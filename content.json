{"meta":{"title":"Welcome to wxq's Blog created in 2017-01-01","subtitle":null,"description":null,"author":"wxq","url":"http://www.digmyth.com"},"pages":[],"posts":[{"title":"Ubuntu k8s for  docker","slug":"kubernetes-ubuntu-docker","date":"2021-04-28T12:21:41.000Z","updated":"2021-05-13T05:42:46.392Z","comments":true,"path":"2021/04/28/kubernetes-ubuntu-docker/","link":"","permalink":"http://www.digmyth.com/2021/04/28/kubernetes-ubuntu-docker/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"prometheus","slug":"consul-01","date":"2021-03-25T01:38:08.000Z","updated":"2021-05-20T06:10:43.762Z","comments":true,"path":"2021/03/25/consul-01/","link":"","permalink":"http://www.digmyth.com/2021/03/25/consul-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"sysctl TCP优化","slug":"linux-sysctl","date":"2021-03-15T01:43:54.000Z","updated":"2021-04-15T05:37:59.492Z","comments":true,"path":"2021/03/15/linux-sysctl/","link":"","permalink":"http://www.digmyth.com/2021/03/15/linux-sysctl/","excerpt":"","text":"内核参数优化1234567891011echo 2048 &gt; /proc/sys/net/core/somaxconn 每一个端口最大的监听队列的长度echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled 关闭透明页功能vm.max_map_count=655350 限制一个进程可以拥有的VMA(虚拟内存区域)的数量fs.file-max = 65536 同时修改vim /etc/security/limits.conf* soft nofile 65536* hard nofile 65536* soft nproc 65535* hard nproc 65535* soft memlock unlimited* hard memlock unlimited 每保持一个TCP连接，进程就要创建一个文件对象，约占内存3.3KB，4GB内存可以维持长达100万条长连接，客户端发送数据的话，还得为TCP对象开启接收缓冲区，这就增大了内存开销, Linux系统里，系统级、用户级、进程级都有最大打开文件数限制 系统级： 当前系统可以打开的文件数，通过fs.file-max参数修改 用户级： 指定用 户可以打开的数量，通过/etc/security/limits.conf 进程级： 单个进程可以打开的数量，通过fs.nr_open参数修改 1234为每一个TCP连接Socket分配的最少字节数或说是接收缓冲区，默认4K，最大可设8MBnet.ipv4.tcp_rmem = 4096(为TCP连接分配的最少字节数) 87380 8388608net.core.rmem_default = 2129922net.core.rmem_max = 8388608 123net.ipv4.tcp_wmem= 4096(发送缓存区最小值，默认4K) 65536 8388608net.core.wmem_default = 212992net.core.wmem_max = 8388608 1ss -n | grep ESTAB |wc -l TCP活动连接数统计 12345678910111213[root@node03 ~]# slabtop 关注dentry/filp/TCP/sock_node_cache指标 Active / Total Objects (% used) : 3721737 / 4145714 (89.8%) Active / Total Slabs (% used) : 125168 / 125168 (100.0%) Active / Total Caches (% used) : 95 / 131 (72.5%) Active / Total Size (% used) : 821348.16K / 878889.63K (93.5%) Minimum / Average / Maximum Object : 0.01K / 0.21K / 8.00K OBJS ACTIVE USE OBJ SIZE SLABS OBJ/SLAB CACHE SIZE NAME 1928862 1578283 81% 0.10K 49458 39 197832K buffer_head448077 447905 99% 0.19K 21337 21 85348K dentry （指标1）298544 297412 99% 1.00K 18659 16 298544K filp（指标2）288966 288966 100% 0.04K 2833 102 11332K TCP（指标3）233070 233070 100% 0.12K 6855 34 27420K sock_node_cache（指标4） 总结慢慢积累吧","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s基于GitlabJenkinsCICD实现","slug":"kubernetes-gitlab-jenkins-CI","date":"2021-02-21T02:51:41.000Z","updated":"2021-04-24T14:10:25.467Z","comments":true,"path":"2021/02/21/kubernetes-gitlab-jenkins-CI/","link":"","permalink":"http://www.digmyth.com/2021/02/21/kubernetes-gitlab-jenkins-CI/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"calico bug","slug":"kubernetes-calico-bug","date":"2021-02-13T07:51:41.000Z","updated":"2021-03-02T08:15:51.878Z","comments":true,"path":"2021/02/13/kubernetes-calico-bug/","link":"","permalink":"http://www.digmyth.com/2021/02/13/kubernetes-calico-bug/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"prometheus","slug":"prometheus-01","date":"2021-01-25T00:48:08.000Z","updated":"2021-01-27T03:00:54.371Z","comments":true,"path":"2021/01/25/prometheus-01/","link":"","permalink":"http://www.digmyth.com/2021/01/25/prometheus-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"kubernetes dashboard","slug":"kubernetes-dashboard","date":"2021-01-15T12:51:41.000Z","updated":"2021-01-22T03:48:33.336Z","comments":true,"path":"2021/01/15/kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2021/01/15/kubernetes-dashboard/","excerpt":"","text":"重新疏理k8s dashboard安装github地址：https://github.com/kubernetes/dashboard 在线dashboard2.1 deployment清单文件1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml 默认type为ClusterIp即只能看到Service地址，需要穿透集群边界让外部进行访问方式有ingress、NodePort、外部LoadBalance、pod HostPort端口转发、pod HostNetwork 等方式，这里采用最简单的NodePort 修改recommended.yaml清单文件123456789101112131415kind: ServiceapiVersion: v1metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboardspec: ports: - nodePort: 30443 port: 443 targetPort: 8443 selector: k8s-app: kubernetes-dashboard type: NodePort 或者跑起来后再直接修改svc/kubernetes-dashboard1kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard # type: NodePort 按你的需要添加单独的NameSpace12345678root@k8s-m:/data/dashboard# kubectl create namespace admin-ns --dry-run=client -o yamlapiVersion: v1kind: Namespacemetadata: creationTimestamp: null name: admin-nsspec: &#123;&#125;status: &#123;&#125; 按你的需要添加kubernetes-dashboard123456789root@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-nsserviceaccount/superadmin createdroot@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-ns --dry-run=client -o yamlapiVersion: v1kind: ServiceAccountmetadata: creationTimestamp: null name: superadmin namespace: admin-ns 创建一个clusterrolebinding,让内置的集群管理员角色--clusterrole=cluster-admin与刚创建的serviceaccount绑定1234567891011121314root@k8s-m:/data/dashboard# kubectl create clusterrolebinding superadmin --clusterrole=cluster-admin --serviceaccount=admin-ns:superadmin --dry-run=client -o yamlapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: creationTimestamp: null name: superadminroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: superadmin namespace: admin-ns 获取Token登录1234567891011121314151617181920212223root@k8s-m:/data/dashboard# kubectl describe sa/superadmin -n admin-nsName: superadminNamespace: admin-nsLabels: &lt;none&gt;Annotations: &lt;none&gt;Image pull secrets: &lt;none&gt;Mountable secrets: superadmin-token-gtrj5Tokens: superadmin-token-gtrj5Events: &lt;none&gt;root@k8s-m:/data/dashboard# kubectl describe secret/superadmin-token-gtrj5 -n admin-nsName: superadmin-token-gtrj5Namespace: admin-nsLabels: &lt;none&gt;Annotations: kubernetes.io/service-account.name: superadmin kubernetes.io/service-account.uid: 339d914d-3ae8-440a-a590-4a304400ef17Type: kubernetes.io/service-account-tokenData====token: eyJhbGciOiJSUzI1NiIsImtpZCI6InZk--xxx # Token字段ca.crt: 1066 bytesnamespace: 8 bytes 界面自带CPU、内存监控图，只是数据是来源于Metrics Server, 需要部署MetricsServer才能展示，如果后期要部署kube-prometheus 就不需要单独部署Metrics Server，因为它己经集成了 metrics-server github 地址： https://github.com/kubernetes-sigs/metrics-server 在线清单文件部署1kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml 发现老是无限重启，说是就绪性探测和存活性探测有问题，我这里换换镜像以及添加2个参数好了其实根源https TLS问题1234567891011121314151617181920212223242526272829spec: hostNetwork: true serviceAccountName: metrics-server containers: - name: metrics-server image: bitnami/metrics-server:0.4.1 # 可以尝试更换官方镜像 #image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1 imagePullPolicy: IfNotPresent args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-insecure-tls # 禁用https - --kubelet-use-node-status-port - --kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname # 添加地址解析类型 livenessProbe: failureThreshold: 3 httpGet: path: /livez port: https scheme: HTTPS periodSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /readyz port: https scheme: HTTPS periodSeconds: 10 ports: 总结 dashboard只是提供web GUI服务，本身并做认证授权，只是代为拿着账号向kubernetes API进行认证 dashboard 运行于pod, pod代为向kubernetes API进行认证的账号也必须是ServiceAccount账号，不可以是User自然人的属性账号 clusterrolebinding只能绑定clusterrole, rolebinding 即可以绑role,也可以绑clusterrole,口决是： 小绑大降权 Metrics-server用于收集pod内部CPU、内存使用量资源，kube-prometheus项目内部集成此功能，所以部署与否看你需要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes ingress进阶","slug":"kubernetes-ingress","date":"2021-01-12T12:51:41.000Z","updated":"2021-01-14T10:04:01.904Z","comments":true,"path":"2021/01/12/kubernetes-ingress/","link":"","permalink":"http://www.digmyth.com/2021/01/12/kubernetes-ingress/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes rbac","slug":"kubernetes-rbac","date":"2021-01-11T12:51:41.000Z","updated":"2021-01-14T04:50:59.033Z","comments":true,"path":"2021/01/11/kubernetes-rbac/","link":"","permalink":"http://www.digmyth.com/2021/01/11/kubernetes-rbac/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes secret","slug":"kubernetes-secret","date":"2021-01-03T12:51:41.000Z","updated":"2021-01-14T08:47:17.288Z","comments":true,"path":"2021/01/03/kubernetes-secret/","link":"","permalink":"http://www.digmyth.com/2021/01/03/kubernetes-secret/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes configmap","slug":"kubernetes-configmap","date":"2021-01-02T12:51:41.000Z","updated":"2021-01-11T09:55:46.529Z","comments":true,"path":"2021/01/02/kubernetes-configmap/","link":"","permalink":"http://www.digmyth.com/2021/01/02/kubernetes-configmap/","excerpt":"","text":"创建configmap12# kubectl get cm/calico-config -n kube-system -o yaml# kubectl get cm/kube-flannel-cfg -n kube-system -o yaml 12345kubectl create ns cm-nskubectl create cm -hkubectl create cm filebeat-cfg -n cm-ns \\ --from-literal=redis_host=&quot;redis.default.svc.cluster.local&quot; \\ --from-literal=log_level=&quot;Info&quot; 1234567891011121314151617181920212223kubectl get cm/filebeat-cfg -n cm-ns -o yamlapiVersion: v1data: log_level: Info redis_host: redis.default.svc.cluster.localkind: ConfigMapmetadata: creationTimestamp: &quot;2021-01-11T05:58:23Z&quot; managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: &#123;&#125; f:log_level: &#123;&#125; f:redis_host: &#123;&#125; manager: kubectl-create operation: Update time: &quot;2021-01-11T05:58:23Z&quot; name: filebeat-cfg namespace: cm-ns resourceVersion: &quot;573737&quot; uid: b06442dc-90e6-446b-8a3c-f119f26226d4 启一个pod运用configmap1234567891011121314151617181920212223242526root@k8s-m:/data/configmap# cat filebeat-pod.yaml apiVersion: v1kind: Podmetadata: name: filebeat-pod namespace: cm-nsspec: containers: - name: filebeat image: ikubernetes/filebeat:5.6.5-alpine env: - name: REDIS_HOST valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: redis_host # 定义的键名 - name: LOG_LEVEL valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: log_level # 定义的键名root@k8s-m:/data/configmap# kubectl apply -f filebeat-pod.yaml#pod内部是能查到的定义变量的root@k8s-m:/data/configmap# kubectl exec -it pods/filebeat-pod -n cm-ns -- env | grep REDIS_HOSTREDIS_HOST=redis.default.svc.cluster.local 定义2个数据文件123456789101112131415161718root@k8s-m:/data/configmap/nginx# cat server1.conf server &#123; server_name www.first.com; listen 80; location / &#123; root &quot;/html/first&quot;; &#125;&#125;root@k8s-m:/data/configmap/nginx# cat server2.conf server &#123; server_name www.second.com; listen 80; location / &#123; root &quot;/html/second&quot;; &#125;&#125; 创建nginx-cfg1kubectl create cm nginx-cfg --from-file=server1.conf --from-file=server-sec.conf=server2.conf -n cm-ns pod使用nginx-cfg12345678910111213141516171819202122232425262728[root@k8smaster nginx]# cat nginx-pod.yaml apiVersion: v1kind: Podmetadata: name: nginx-pod namespace: cm-nsspec: containers: - name: nginx-t image: nginx volumeMounts: - name: config-vol mountPath: /etc/nginx/conf.d/ volumes: - name: config-vol configMap: name: nginx-cfg items: - key: server1.conf # 定义configmap时的key path: server-first.conf # pod内部的文件名 - key: server-sec.conf # 定义configmap时的key path: server-second.conf # pod内部的文件名[root@k8smaster nginx]# kubectl apply -f nginx-pod.yaml[root@k8smaster nginx]# kubectl exec -it pods/nginx-pod -n cm-ns -- ls /etc/nginx/conf.dserver-first.conf server-second.confkubectl edit cm/nginx-cfg -n cm-ns # 修改能在60s生效 总结configmap也是一种存储卷，特殊的存储卷，用于保存pod内程序变量配置或文件等","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-csi-nfs","slug":"kubernetes-csi-nfs","date":"2021-01-01T13:52:41.000Z","updated":"2021-05-14T08:41:03.215Z","comments":true,"path":"2021/01/01/kubernetes-csi-nfs/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-csi-nfs/","excerpt":"","text":"简介要实现kubernetes中动态创建pv必须先创建StorageClass，每一个StorageClass对应了一个provisioner，kubernetes中内置了很多provisioner，但是很难受的是没有内置的nfs provisioner，对于我们这种没有钱的玩家，nfs是实现后端存储最简单直接的方法，所以不知道为什么k8s不提供，但是没关系有方法实现，k8s允许提供外部的provisioner，而nfs可以使用nfs-client-provisioner项目链接1https://github.com/kubernetes-retired/external-storage/tree/master/nfs-client 创建nfs server1234yum install nfs-utils -y[root@node02 deploy]# cat /etc/exports/csc-nfsdata/ *(rw,sync,no_root_squash)[root@node02 deploy]# 开放防火墙123456789101112vim /etc/nfs.conf[mountd]port=port-number# This adds the -p port-number option to the rpc.mount command line: rpc.mount -p port-number.firewall-cmd --permanent --add-service mountdfirewall-cmd --permanent --add-service rpc-bindfirewall-cmd --permanent --add-service nfsfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/tcpfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/udpfirewall-cmd --reload 配置NFS-Client provisioner,首先clone这个项目1git clone https://github.com/kubernetes-retired/external-storage.git 之后进入nfs-client/deploy/文件夹 可以看到有下面几个文件12345678910cd nfs-client/deploy/[root@nginx1-pro deploy]# ll总用量 28-rw-r--r-- 1 root root 225 9月 3 14:26 class.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 1030 9月 3 13:17 deployment-arm.yaml-rw-r--r-- 1 root root 1040 9月 3 13:30 deployment.yaml ## 需要改自己的nsdrwxr-xr-x 2 root root 214 9月 3 13:32 objects-rw-r--r-- 1 root root 1834 9月 3 13:19 rbac.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 241 9月 3 13:55 test-claim.yaml-rw-r--r-- 1 root root 399 9月 3 13:38 test-pod.yaml 首先你要做的是创建一个独立的命名空间12[root@k8smaster ~]# kubectl create ns csi-nfsnamespace/csi-nfs created 之后修改rbac.yaml和deployment.yaml的namespace为你创建的namespace 修改完成之后我们修改deployment.yaml123456789101112 env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.1.11 - name: NFS_PATH value: /data/kubernetesvolumes: - name: nfs-client-root nfs: server: 192.168.1.11 path: /data/kubernetes 执行rbac 和deploy yaml文件1234567891011121314151617181920212223242526[root@node02 deploy]# kubectl apply -f rbac.yamlserviceaccount/nfs-client-provisioner createdclusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner createdclusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner createdrole.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner createdrolebinding.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner created[root@node02 deploy]#[root@node02 deploy]# kubectl apply -f deployment.yamldeployment.apps/nfs-client-provisioner created[root@node02 deploy]# [root@node02 deploy]# kubectl apply -f class.yaml storageclass.storage.k8s.io/managed-nfs-storage created[root@node02 deploy]#查看cs [root@node02 deploy]# kubectl get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEmanaged-nfs-storage fuseim.pri/ifs Delete Immediate false 20s[root@node02 deploy]# cat class.yamlapiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: managed-nfs-storageprovisioner: fuseim.pri/ifs # or choose another name, must match deployment&apos;s env PROVISIONER_NAME&apos;parameters: archiveOnDelete: &quot;false&quot; provisioner就是刚才deployment中的PROVISIONER_NAME，还有一个比较关键的参数是archiveOnDelete，如果你想在删除了pvc之后还保留数据的话需要把这个参数改为true，不然你删除了pvc同时pv也会删除，然后数据也会丢失1234567kubectl apply class.yamlkubectl apply -f class.yaml很简单，只要pvc有annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot; pvc就能动态的创建出来 尝试创建123456789101112131415161718192021222324[root@node02 deploy]# kubectl apply -f test-claim.yaml [root@node02 deploy]# cat test-claim.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: test-claim annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi[root@node02 deploy]# 查看pv和pvc[root@node02 deploy]# kubectl get pv,pvcNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpersistentvolume/pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX Delete Bound default/test-claim managed-nfs-storage 29mNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpersistentvolumeclaim/test-claim Bound pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX managed-nfs-storage 29m[root@node02 deploy]# 尝试删除pvc，查看pv也会被删除，只不过pv中的数据不会被删除。需要注意的是删除pvc之前要把所使用的pod 删除掉 pending排障如果你部署的kubernetes是v1.20 v1.21.0以上,那么需要修改kube-apiserver.yaml支持selfLink功能 日志查看1/var/log/containers/nfs-client-provisioner-6b4 解决办法1234567891011121314参考： www.orchome.com/10024解决方法是编辑/etc/kubernetes/manifests/kube-apiserver.yaml在这里：spec: containers: - command: - kube-apiserver添加这一行：- --feature-gates=RemoveSelfLink=false然后应用它，即可kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml 总结 参考","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes volumes","slug":"kubernetes-volumes","date":"2021-01-01T12:51:41.000Z","updated":"2021-01-11T09:55:36.757Z","comments":true,"path":"2021/01/01/kubernetes-volumes/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-volumes/","excerpt":"","text":"12# kubectl explain pods.spec.volumes# kubectl explain pods.spec.containers.volumeMounts hostPath 为node节点本地卷1234567891011121314151617181920212223root@k8s-m:/data/volumes# cat 01-volume-demo.yaml apiVersion: v1kind: Podmetadata: name: vol-demo namespace: vol labels: app: vol-demospec: nodeName: k8s-n containers: - name: vol-demo image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: webstore volumes: - name: webstore hostPath: path: /volumes/vol-demo type: DirectoryOrCreateroot@k8s-m:/data/volumes# kubectl apply -f 01-volume-demo.yaml empty 临时存储，pod重启数据丢失12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 02-emptydir.yaml apiVersion: v1kind: Podmetadata: name: vol-emptydir-pod namespace: volspec: volumes: - name: html emptyDir: &#123;&#125; containers: - name: nginx image: nginx:1.14-alpine volumeMounts: - name: html mountPath: /usr/share/nginx/html - name: createpage image: alpine volumeMounts: - name: html mountPath: /html command: [&quot;/bin/sh&quot;,&quot;-c&quot;] args: - while true;do echo $(hostname) $(date) &gt;&gt; /html/index.html; sleep 2; doneroot@k8s-m:/data/volumes# kubectl apply -f 02-emptydir.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESvol-emptydir-pod 2/2 Running 0 2m47s 172.16.234.11 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q http://172.16.234.11vol-emptydir-pod Mon Jan 11 03:30:24 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:26 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:28 UTC 2021 # 正如我们期望的那样，每2秒钟生成一条记录 nfs 存储卷12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 03-nfs-pod.yaml apiVersion: v1kind: Podmetadata: name: liveness-httpget-pod namespace: volspec: containers: - name: liveness-httpget-pod image: nginx imagePullPolicy: IfNotPresent ports: - name: http containerPort: 80 livenessProbe: httpGet: port: http path: /index.html initialDelaySeconds: 1 periodSeconds: 3 volumeMounts: - name: html mountPath: /usr/share/nginx/html/ volumes: - name: html nfs: path: /nginx_share server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 03-nfs-pod.yamlapt install nfs-kernel-serverroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESliveness-httpget-pod 1/1 Running 0 16m 172.16.234.13 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q 172.16.234.13test nginx for nfs vol # 成功 redis Pod挂载nfs类型的卷,实现重建pod数据不丢失1234567891011121314151617181920212223242526272829303132333435363738394041424344root@k8s-m:/data/volumes# cat 04-nfs-redis.yaml apiVersion: v1kind: Podmetadata: name: redis namespace: vol labels: app: redisspec: containers: - name: redis image: redis:5.0.4 ports: - name: redis-port containerPort: 6379 volumeMounts: - name: data mountPath: /data volumes: - name: data nfs: path: /vols/v6 server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESredis 1/1 Running 0 12m 172.16.234.12 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; set name wxqOK127.0.0.1:6379&gt; set age 25OK127.0.0.1:6379&gt; saveOKroot@k8s-m:/data/volumes# kubectl delete -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; get name&quot;wxq&quot; # 挂载卷后数据仍然存在 利用 nfs创建一个pv123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 01-pv-nfs.yaml apiVersion: v1kind: PersistentVolumemetadata: name: test-vol labels: storages: nfsspec: capacity: storage: 2Gi volumeMode: Filesystem accessModes: - ReadWriteMany - ReadWriteOnce - ReadOnlyMany persistentVolumeReclaimPolicy: Retain nfs: server: 192.168.1.10 path: /vols/v7root@k8s-m:/data/volumes/pvc# kubectl apply -f 01-pv-nfs.yaml 创建pvc123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 02-pvc-nfs-yaml apiVersion: v1kind: PersistentVolumeClaimmetadata: name: test-pvc namespace: volspec: accessModes: - ReadWriteOnce volumeMode: Filesystem resources: requests: storage: 1Gi#storageClassName: slow# selector:# matchLabels:# release: &quot;stable&quot;# matchExpressions:# - &#123;key: environment, operator: In, values: [dev]&#125;root@k8s-m:/data/volumes/pvc# kubectl apply -f 02-pvc-nfs-yaml 创建一个pod申请pvc12345678910111213141516171819202122232425262728root@k8s-m:/data/volumes/pvc# cat 03-pod-demo.yaml apiVersion: v1kind: Podmetadata: name: pvc-pod-demo namespace: vol labels: app: pvc-podspec: nodeName: k8s-n containers: - name: pvc-pod image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: testpvc volumes: - name: testpvc persistentVolumeClaim: claimName: test-pvcroot@k8s-m:/data/volumes/pvc# kubectl apply -f 03-pod-demo.yamlroot@k8s-m:/data# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEtest-vol 2Gi RWO,ROX,RWX Retain Bound vol/test-pvc 11mroot@k8s-m:/data# kubectl get pvc -n volNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEtest-pvc Bound test-vol 2Gi RWO,ROX,RWX 6m47s 总结无它，唯手熟而，理解运用更重要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Ubuntu20.04 Run k8s","slug":"Kubernetes-ubuntu20.04","date":"2020-12-30T12:51:41.000Z","updated":"2021-01-11T09:55:23.613Z","comments":true,"path":"2020/12/30/Kubernetes-ubuntu20.04/","link":"","permalink":"http://www.digmyth.com/2020/12/30/Kubernetes-ubuntu20.04/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"ELF日志系统实践","slug":"log_elk_实践","date":"2020-12-15T02:12:36.000Z","updated":"2021-04-19T06:15:27.618Z","comments":true,"path":"2020/12/15/log_elk_实践/","link":"","permalink":"http://www.digmyth.com/2020/12/15/log_elk_实践/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb cluster recovery","slug":"mariadb-cluster-recovery","date":"2020-07-10T01:41:54.000Z","updated":"2020-07-06T10:59:33.024Z","comments":true,"path":"2020/07/10/mariadb-cluster-recovery/","link":"","permalink":"http://www.digmyth.com/2020/07/10/mariadb-cluster-recovery/","excerpt":"","text":"mariadb cluster recovery列几个集群检查命令1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+----------------------------------------------+| Variable_name | Value |+--------------------------+----------------------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306,10.0.0.53:3306 |+--------------------------+----------------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 3 |+--------------------+-------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_state_uuid&apos;;+--------------------------+-----------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------+| wsrep_cluster_state_uuid | 345098abd2-291a-9893-acbd3-30923abcdef9 |+--------------------------+-----------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_local_state_comment&apos;;+---------------------------+--------+| Variable_name | Value |+---------------------------+--------+| wsrep_local_state_comment | Synced |+---------------------------+--------+1 row in set (0.01 sec) 场景一 只是很简单的某节点掉线，重启让其重新加入集群即可1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+-------------------------------+| Variable_name | Value |+--------------------------+-------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306 |+--------------------------+-------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 2 |+--------------------+-------+1 row in set (0.01 sec) 1# systemctl restart mariadb 场景二 唯一有一个幸存节点1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 1 |+--------------------+-------+1 row in set (0.01 sec) 幸存节点刚好优雅关闭正确提交了数据，状态为Primary1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_status&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_cluster_status | Primary |+----------------------+---------+1 row in set (0.01 sec) 哪果是non-Primary状态还要单独恢复幸存节点上执行1MariaDB [(none)]&gt; set global wsrep_provider_options=&apos;pc.bootstrap=YES&apos;; 可是 我们一般不这样做，常规做法是直接指定这个幸存节点的主节点，让其它节点加入集群123# systemctl stop mariadb# galera_new_cluster# systemctl restart mariadb 场景三集群崩溃完全不可用,这也分为2种情况，基于最高seqno值恢复状态一是没有集群UUID, seqno: -1,数据定义语言DDL出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 00000000-0000-0000-0000-000000000000seqno: -1safe_to_bootstrap: 0 状态2是有集群UUID，seqno: -1，事务处理数据时出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: -1safe_to_bootstrap: 0 状态3是有集群UUID，seqno值最高正值123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: 31929safe_to_bootstrap: 1 此时我们认为状态3是OK的，需要修改状态１、２数据库配置文件去掉IP地址配置项1wsrep_cluster_address=&quot;gcomm://&quot; 这样节点就能正常启动了1systemctl restart mariadb 最后再修改配置文件后把这2个节点正常加入集群就好了1wsrep_cluster_address=&quot;gcomm://10.8.8.53,10.8.8.54,10.8.8.55&quot; 最后是基于Last Committed恢复先修改配置文件让服务启起来，入库查看wsrep_last_committed123#systemctl stop mariadb 编辑配置文件去掉IP地址wsrep_cluster_address=&quot;gcomm://&quot;#systemctl start mariadb 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_last_committed&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_last_committed | 319589 |+----------------------+---------+1 row in set (0.01 sec) 找到节点最大值认为就是主节点，然后在这个主节点上1# galera_new_cluster 其它节点加入集群即可","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"openstack-HA","slug":"openstack-HA","date":"2020-03-14T01:41:54.000Z","updated":"2020-03-29T03:13:34.557Z","comments":true,"path":"2020/03/14/openstack-HA/","link":"","permalink":"http://www.digmyth.com/2020/03/14/openstack-HA/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"calico-原理剖析","slug":"calico-原理剖析","date":"2020-03-07T01:42:54.000Z","updated":"2021-01-07T06:05:08.285Z","comments":true,"path":"2020/03/07/calico-原理剖析/","link":"","permalink":"http://www.digmyth.com/2020/03/07/calico-原理剖析/","excerpt":"","text":"arp之calico本质参考戳穿 Calico 的谎言 什么是代理ARP？当 ARP 请求目标跨网段时，网关设备收到此ARP请求会用自己的MAC地址返回给请求者,这就是代理arp. 实现MAC地址代理,最终使得主机能够通信. 知识点： 跨网段通信时会发广播得到网关MAC 之后发出的网络数据包目标MAC是网关的MAC 网关的IP地址不会出现在任何网络包头中 因此，没有人在乎网关地址是否真的存在，只要设备能响应ARP就行了 我这里用了2台linux主机实验，主机A：192.168.1.109 主机B:192.168.1.110主机A：1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.10/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-A ~]#ip netns exec ns0 route -n # 命名空间里的路由Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.10 dev veth0ip route add 10.10.10.20 via 192.168.1.110 dev eth0 主机B:1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.20/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-B ~]# ip netns exec ns0 route -n Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.20 dev veth0ip route add 10.10.10.10 via 192.168.1.109 dev eth0 Linux主机打开路由转发1net.ipv4.ip_forward = 1 网卡开启代理ARP功能1echo 1 &gt; /proc/sys/net/ipv4/conf/veth0/proxy_arp 主机A上网络通信测试12345[root@testarp-A ~]# ip netns exec ns0 ping 10.10.10.20PING 10.10.10.20 (10.10.10.20) 56(84) bytes of data.64 bytes from 10.10.10.20: icmp_seq=1 ttl=62 time=0.951 ms64 bytes from 10.10.10.20: icmp_seq=2 ttl=62 time=0.484 ms64 bytes from 10.10.10.20: icmp_seq=3 ttl=62 time=0.556 ms 1234567[root@testarp-A ~]# tcpdump -nni veth0tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on veth0, link-type EN10MB (Ethernet), capture size 262144 bytes08:18:15.999200 IP 10.10.10.10 &gt; 10.10.10.20: ICMP echo request, id 1486, seq 1, length 6408:18:16.000288 IP 10.10.10.20 &gt; 10.10.10.10: ICMP echo reply, id 1486, seq 1, length 6408:18:21.008712 ARP, Request who-has 10.10.10.20 tell 10.10.10.10, length 2808:18:21.008757 ARP, Reply 10.10.10.20 is-at ee:46:7c:2e:d9:ba, length 28 注意： 这里veth0充当路由角色代理ARP, who is 10.10.10.20 ,返回自己MACee:46:7c:2e:d9:ba来响应. 转发过程分析：1 广播寻找目标IP对应MAC是谁？2 根据路由规则所有数据包都会转发到169.254.1.1，寻找169.254.1.1MAC是谁？2 vet0开启代理ARP进行ARP拦截，返回自己MACee:46:7c:2e:d9:ba给以响应3 封包目标IP为10.10.10.20，MAC为ee:46:7c:2e:d9:ba,发出这样的数据包4 主机A查询本地路由，匹配10.10.10.20 via 192.168.1.110 dev eth0 会把包发送给192.168.1.1105 主机B收到10.10.10.20的包时，匹配本地路由10.10.10.20 dev veth0 scope link,数据包发送到veth0上6 完成通信，回程类似","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"corosync/PacemakerHA","slug":"linux-pacemaker-corosync","date":"2020-02-15T01:42:54.000Z","updated":"2020-03-29T01:27:23.789Z","comments":true,"path":"2020/02/15/linux-pacemaker-corosync/","link":"","permalink":"http://www.digmyth.com/2020/02/15/linux-pacemaker-corosync/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"ingress-nginx 基础","slug":"ingress-nginx","date":"2020-01-20T12:51:41.000Z","updated":"2021-01-14T07:57:51.296Z","comments":true,"path":"2020/01/20/ingress-nginx/","link":"","permalink":"http://www.digmyth.com/2020/01/20/ingress-nginx/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"openvswit_vlan流表","slug":"openvswit_vlan流表","date":"2020-01-01T01:41:54.000Z","updated":"2020-01-13T03:44:37.630Z","comments":true,"path":"2020/01/01/openvswit_vlan流表/","link":"","permalink":"http://www.digmyth.com/2020/01/01/openvswit_vlan流表/","excerpt":"","text":"如果计算节点关闭防火墙，配置文件如下，那么就不会产生bridge桥及相应iptables规则 ml2部份配置文件如下123[securitygroup]#enable_security_group = True#firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver linuxBridge桥接口就会为空12kvm-app-6:~ # brctl show # 为空bridge name bridge id STP enabled interfaces 查看某虚机接口信息123456789kvm-app-6:~ # virsh list Id Name State---------------------------------------------------- 1 instance-00000793 runningkvm-app-6:~ # virsh domiflist instance-00000793Interface Type Source Model MAC-------------------------------------------------------tap790c394d-70 bridge br-int virtio fa:16:3e:1f:11:99 ovs-vsctl show1234567891011121314151617181920212223242526272829303132kvm-app-6:~ # ovs-vsctl show8ba4a76e-8c27-4807-a65a-f05b22a3ef76 Manager &quot;ptcp:6640:127.0.0.1&quot; is_connected: true Bridge br-int Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port int-br-ex Interface int-br-ex type: patch options: &#123;peer=phy-br-ex&#125; Port &quot;tap790c394d-70&quot; tag: 1 Interface &quot;tap790c394d-70&quot; Port br-int Interface br-int type: internal Bridge br-ex Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port phy-br-ex Interface phy-br-ex type: patch options: &#123;peer=int-br-ex&#125; Port br-ex Interface br-ex type: internal Port &quot;bond0&quot; Interface &quot;bond0&quot; ovs_version: &quot;2.7.6&quot; 查看br-int桥接口信息ovs-ofctl show br-int12345678910111213141516171819kvm-app-6:~ # ovs-ofctl show br-intOFPT_FEATURES_REPLY (xid=0x2): dpid:00002a77dbc2860an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(int-br-ex): addr:3e:38:8a:6e:c1:de config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(tap790c394d-70): addr:fe:16:3e:1f:11:99 config: 0 state: 0 current: 10MB-FD COPPER speed: 10 Mbps now, 0 Mbps max LOCAL(br-int): addr:2a:77:db:c2:86:0a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-int流表规则ovs-ofctl dump-flows br-int12345678910111213kvm-app-6:~ # ovs-ofctl dump-flows br-intNXST_FLOW reply (xid=0x4): cookie=0x8372d932b48e5321, duration=5395.262s, table=0, n_packets=0, n_bytes=0, idle_age=5395, priority=10,icmp6,in_port=2,icmp_type=136 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=5395.261s, table=0, n_packets=505, n_bytes=21210, idle_age=7, priority=10,arp,in_port=2 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=7776.549s, table=0, n_packets=366813, n_bytes=36441400, idle_age=5395, priority=2,in_port=1 actions=drop cookie=0x8372d932b48e5321, duration=5395.264s, table=0, n_packets=817, n_bytes=74814, idle_age=4, priority=9,in_port=2 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=5395.379s, table=0, n_packets=840145, n_bytes=83511042, idle_age=0, priority=3,in_port=1,dl_vlan=11 actions=mod_vlan_vid:1,NORMAL cookie=0x8372d932b48e5321, duration=7776.964s, table=0, n_packets=4, n_bytes=320, idle_age=7776, priority=0 actions=NORMAL cookie=0x8372d932b48e5321, duration=7776.965s, table=23, n_packets=0, n_bytes=0, idle_age=7776, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.263s, table=24, n_packets=0, n_bytes=0, idle_age=5395, priority=2,icmp6,in_port=2,icmp_type=136,nd_target=fe80::f816:3eff:fe1f:1199 actions=NORMAL cookie=0x8372d932b48e5321, duration=5395.262s, table=24, n_packets=502, n_bytes=21084, idle_age=7, priority=2,arp,in_port=2,arp_spa=10.8.25.220 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=7776.964s, table=24, n_packets=3, n_bytes=126, idle_age=5357, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.265s, table=25, n_packets=1319, n_bytes=95898, idle_age=4, priority=2,in_port=2,dl_src=fa:16:3e:1f:11:99 actions=NORMAL 查看br-ex交换机接口信息ovs-ofctl show br-ex123456789101112131415161718 kvm-app-6:~ # ovs-ofctl show br-exOFPT_FEATURES_REPLY (xid=0x2): dpid:0000aa081303781an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(bond0): addr:82:01:9b:1b:28:c9 config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(phy-br-ex): addr:c2:06:bb:33:da:7a config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max LOCAL(br-ex): addr:aa:08:13:03:78:1a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-ex流表信息12345kvm-app-6:~ # ovs-ofctl dump-flows br-exNXST_FLOW reply (xid=0x4): cookie=0x90f6220dc9413e6e, duration=5441.562s, table=0, n_packets=1328, n_bytes=96564, idle_age=3, priority=4,in_port=2,dl_vlan=1 actions=mod_vlan_vid:11,NORMAL cookie=0x90f6220dc9413e6e, duration=7822.731s, table=0, n_packets=0, n_bytes=0, idle_age=7822, priority=2,in_port=2 actions=drop cookie=0x90f6220dc9413e6e, duration=7822.733s, table=0, n_packets=1213423, n_bytes=120613616, idle_age=0, priority=0 actions=NORMAL","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"nmap工具详解","slug":"linux-nmap详解","date":"2019-12-15T01:42:54.000Z","updated":"2019-01-15T09:13:55.828Z","comments":true,"path":"2019/12/15/linux-nmap详解/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-nmap详解/","excerpt":"","text":"1.1 nmap基础在运维过程中有时需要主机存活性探测，一般是namp、tcpdump命令结合使用，相关工具包安装1[root@ ]# yum install nmap tcpdump 列出几种nmap命令语法123-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans-sU: UDP Scan-sP: ping Scan 下面我们在2台主机间探测，一主机发nmap探测，另一主机tcpdump抓包分析 在A主机正常发一个ping包看看正常情况下的icmp包 ping -c 1 10.17.200.36 在B主机抓包发现icmp包有去有回12345[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:08:38.392418 IP 10.17.200.14 &gt; 10.17.200.36: ICMP echo request, id 5220, seq 1, length 6416:08:43.400811 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 可在一台主机临时禁用icmp协议,再用ping将探测不到这台主机1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 1.2 nmap ping探测我们开始nmap ping探测， -n表示不进行DNS解析123456[root@ ]# nmap -n -sP 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:12 CSTNmap scan report for 10.17.200.36Host is up (0.00030s latency).MAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.05 seconds 在B主机探测发现只收到了对方发的请求包，并未回应，但是还是认为这台主机是存活的，这样提高了探测效率1234[root@localhost roles]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:12:28.972321 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 46 1.3 nmapSYN探测我们开始nmap TCP的SYN探测， -n表示不进行DNS解析1234567891011[root@ ]# nmap -n -PE 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:20 CSTNmap scan report for 10.17.200.36Host is up (0.00014s latency).Not shown: 998 closed portsPORT STATE SERVICE22/tcp open ssh445/tcp filtered microsoft-dsMAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 1.33 seconds 在B主机探测发现，A主机对B主机的各服务都发送了TCP SYN包来进行探测123456789101112[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:20:07.124327 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 4616:20:07.148867 IP 10.17.200.14.40911 &gt; 10.17.200.36.rtsp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148882 IP 10.17.200.14.40911 &gt; 10.17.200.36.smtp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148906 IP 10.17.200.14.40911 &gt; 10.17.200.36.domain: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148943 IP 10.17.200.14.40911 &gt; 10.17.200.36.https: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.mysql: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.ssh: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 0信息太多，略过...16:20:12.152833 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 1.4 arping另外补充一下，arping -D可有效检测IP地址冲突问题,如果命令echo $?返回值为0则表示地址冲突，1则表示不冲突.12345[root@ ]# arping -D -c 2 -I ens192 10.17.200.36ARPING 10.17.200.36 from 0.0.0.0 ens192Unicast reply from 10.17.200.36 [00:50:56:B9:21:18] 0.887msSent 1 probes (1 broadcast(s))Received 1 response(s) 1.5 总结 nmap -sP 可进行ping检测 nmap -PE 可进行tcp SYN检测 nmap -n -sP -PE 可进行ping与SYN结合检测,以免漏扫 arping -D 可进行地址冲突检测 &lt;完结&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux disk","slug":"linux-disk","date":"2019-12-15T01:42:54.000Z","updated":"2020-03-24T13:52:16.618Z","comments":true,"path":"2019/12/15/linux-disk/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-disk/","excerpt":"","text":"Ubuntu系统分区信息查看：fdisk /dev/vda1234567891011Command (m for help): pDisk /dev/vda: 60 GiB, 64424509440 bytes, 125829120 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x630fdccbDevice Boot Start End Sectors Size Id Type/dev/vda1 * 2048 1953791 1951744 953M 83 Linux/dev/vda2 1953792 125829119 123875328 59.1G 83 Linux Sart、End、Sectors单位都是扇区， 1扇区=512bytes，那么2扇区就是1KB 通常称为一个block块，那么就有了2sectors=1KB=1 block,可以通过blockdev --getsz /dev/vda得到整块盘扇区数像上面1953791-2048+1=1951744扇,953M=1951744/2/1024KB CentOS差别可能就是 Blocks数显示，上面说了1Block=1KB12345678910Disk /dev/vda: 64.4 GB, 64424509440 bytes, 125829120 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000afe6d Device Boot Start End Blocks Id System/dev/vda1 * 2048 4196351 2097152 83 Linux/dev/vda2 4196352 125829119 60816384 83 Linux 我来验证一下14196351-2048+1得到扇区数，(4196351-2048+1)/2=2097152刚好等于Blocks数，也就是2097152KB=2048MB=2GB 我们再来学习下dd命令1234bs参数代表逻辑块大小，默认单位是扇区，bs=512代表一个扇区，也就是512bytescount参数代表逻辑块的个数或扇区数，那么处理的存储大小就是bs*countskip 表示跳过if 设备的扇区数开始读数据,skip=200代表200个扇区，也就是100KBseek表示跳过of设备的扇区数开始写数据,seek=400代表400个扇区，也就是200KB 那么学了这些有什么用呢？一个裸盘有硬件raid卡信息是不能正常被格式化的，这个raid信息会存在硬盘的最后63个扇区的地方，我们可以用dd复盖掉12snumber=$(($(blockdev --getsz /dev/sda)-63))dd if=/dev/zero of=/dev/sda bs=512 count=63 seek=$snumber 总结： 一个扇区512bytes , 1Block=1KB=2扇区 dd参数的skip针对if设备，seek针对of设备（跳过多少扇区再处理）","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s_pod资源清单学习1","slug":"k8s_pod1","date":"2019-12-01T12:51:41.000Z","updated":"2020-01-19T09:37:36.257Z","comments":true,"path":"2019/12/01/k8s_pod1/","link":"","permalink":"http://www.digmyth.com/2019/12/01/k8s_pod1/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"udev定义network","slug":"linux-udev","date":"2019-11-15T01:42:54.000Z","updated":"2020-03-29T02:10:23.637Z","comments":true,"path":"2019/11/15/linux-udev/","link":"","permalink":"http://www.digmyth.com/2019/11/15/linux-udev/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"helm部署efk日志系统","slug":"log_helm-efk","date":"2019-10-15T02:42:36.000Z","updated":"2021-03-17T09:56:58.567Z","comments":true,"path":"2019/10/15/log_helm-efk/","link":"","permalink":"http://www.digmyth.com/2019/10/15/log_helm-efk/","excerpt":"","text":"efk 日志系统3大组件elasticsearchfluent-bitkibana helm部署efk日志系统heml.sh 官网https://artifacthub.io/packages/helm/bitnami/elasticsearch 搜索elasticsearch Charts 1234567[root@k8smaster efk]# helm repo add bitnami https://charts.bitnami.com/bitnami&quot;bitnami&quot; has been added to your repositories[root@k8smaster efk]# helm repo listNAME URL loki https://grafana.github.io/loki/chartsstable https://charts.helm.sh/stable bitnami https://charts.bitnami.com/bitnami 12345[root@k8smaster efk]# helm search repo elasticNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ... helm show values bitnami/elasticsearch &gt; es_values.yaml 有人说k8s 中的APP JDK 最好11以上， data.resources +1G = data.heapsize 这个预留一个G给进程使用，其它才给JVM使用性能更佳12345678910111213141516171819202122232425262728293031[root@k8smaster efk]# helm install myes bitnami/elasticsearch -f es_values.yaml -n logsNAME: myesLAST DEPLOYED: Tue Mar 16 10:34:09 2021NAMESPACE: logsSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:------------------------------------------------------------------------------- WARNING Elasticsearch requires some changes in the kernel of the host machine to work as expected. If those values are not set in the underlying operating system, the ES containers fail to boot with ERROR messages. More information about these requirements can be found in the links below: https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html This chart uses a privileged initContainer to change those settings in the Kernel by running: sysctl -w vm.max_map_count=262144 &amp;&amp; sysctl -w fs.file-max=65536** Please be patient while the chart is being deployed ** Elasticsearch can be accessed within the cluster on port 9200 at myes-elasticsearch-coordinating-only.logs.svc.cluster.local To access from outside the cluster execute the following commands: kubectl port-forward --namespace logs svc/myes-elasticsearch-coordinating-only 9200:9200 &amp; curl http://127.0.0.1:9200/ 部署日志采集agent12345678910111213141516[root@k8smaster efk]# helm search repo elasNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ...stable/elastabot 1.2.1 1.1.0 DEPRECATED A Helm chart for Elastabot - a Slack...stable/elastalert 1.5.1 0.2.4 DEPRECATED ElastAlert is a simple framework for...stable/elastic-stack 2.0.6 6 DEPRECATED A Helm chart for ELK stable/elasticsearch 1.32.5 6.8.6 DEPRECATED Flexible and powerful open source, d...stable/elasticsearch-curator 2.2.3 5.7.6 DEPRECATED A Helm chart for Elasticsearch Curator stable/elasticsearch-exporter 3.7.1 1.1.0 DEPRECATED Elasticsearch stats exporter for Pro...stable/fluentd-elasticsearch 2.0.7 2.3.2 DEPRECATED! - A Fluentd Helm chart for Kubernet...bitnami/grafana 5.2.4 7.4.3 Grafana is an open source, feature rich metrics...bitnami/kibana 7.2.3 7.10.2 Kibana is an open source, browser based analyti...stable/apm-server 2.1.7 7.0.0 DEPRECATED The server receives data from the El...stable/dmarc2logstash 1.3.1 1.0.3 DEPRECATED Provides a POP3-polled DMARC XML rep...stable/fluentd 2.5.3 v2.4.0 DEPRECATED A Fluentd Elasticsearch Helm chart f...stable/kibana 3.2.8 6.7.0 DEPRECATED - Kibana is an open source data visu... 1234567891011121314151617181920[root@k8smaster efk]# helm show values bitnami/kibana &gt; kibana_values.yaml[root@k8smaster efk]# vim kibana_values.yaml[root@k8smaster efk]# helm install kibanaui bitnami/kibana -f kibana_values.yaml -n logsNAME: kibanauiLAST DEPLOYED: Tue Mar 16 15:21:01 2021NAMESPACE: logsSTATUS: deployedREVISION: 1NOTES:1. Get the application URL by running these commands: Get the Kibana URL and associate Kibana hostname to your cluster external IP: export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters echo &quot;Kibana URL: http://kibana.local/&quot; echo &quot;$CLUSTER_IP kibana.local&quot; | sudo tee -a /etc/hostsWARNING: Kibana is externally accessible from the cluster but the dashboard does not contain authentication mechanisms. Make sure you follow the authentication guidelines in your Elastic stack.+info https://www.elastic.co/guide/en/elastic-stack-overview/current/setting-up-authentication.htmlWARNING: Rolling tag detected (bitnami/bitnami-shell:10), please note that it is strongly recommended to avoid using rolling tags in a production environment.+info https://docs.bitnami.com/containers/how-to/understand-rolling-tags-containers/ 123456helm repo updatehelm repo list helm search repo fluent-bithelm show values fluent/fluent-bit &gt; fluent-bit-values.yamlhelm install -f fluent-bit-values.yaml -n logshelm list -n logs 总结 helm安装好处是一键安装，坏处是自定义容器内yml配置文件难度极大，如果helm charts提供的原始配置文件里没有(此处不是说修改values.yml值文件),需要重新制作charts部署","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch API","slug":"log_elasticsearch_api","date":"2019-09-15T02:22:36.000Z","updated":"2021-04-19T06:13:15.498Z","comments":true,"path":"2019/09/15/log_elasticsearch_api/","link":"","permalink":"http://www.digmyth.com/2019/09/15/log_elasticsearch_api/","excerpt":"","text":"知识点搜索引擎包括： 索引组件、搜索组件索引组件： 面向数据存储和索引构建搜索组件： 面向用户提供搜索功能以及将用户提供的搜索请求转换成可用的查询语句并通过索引完成查询过程或搜索过程其中一种著名的索引叫做倒排索引 获取数据的组件：工作在pull拉取数据模式， solr/Nutch/grub/ApetureES: 索引index、类型type、文档document、映射mapping 每个索引的分片数量： 5 每个分片也应该有副本： 1用户接口： 9200/tcp集群接口： 9300/tcp 数据类型： string、number、boolean、date、 ES中搜索的数据广义上可被分为2类：12exact: 精确查找，指在原始数据上精确查找full-text: 全文查找，判断文档在多大程度上匹配查询请求，用于评估文档与用户查询请求的相似度 为了完成full-text搜索，ES必须先分析文本并创建出倒排索引，倒排索引中的数据还需要进行“正规化”为标准格式：如单词复数改为单数，助词去掉，这样的分词加正规化的过程即为分析，分析是需要分析器analyzer工作的分析器由3个组件构成： 字符过滤器、分词器、分词过滤器ES内置的分析器有:1234standard analyzer (default analyzer)simple analyzerwhitespace analyzerlanguage analyzer 分析器不仅在创建索引时用到，在构建查询时也会用到并且前后二者的分析器必须一致，否则无法解析 API调用1234567[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/indicesgreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 1628 579.3kb 344kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 14 4.3mb 2.1mbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 3 0 32.9kb 16.4kbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 4 0 48.7kb 27.3kb 12[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/health1618472240 07:37:20 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 123456789101112131415161718[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/health?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;status&quot; : &quot;green&quot;, &quot;timed_out&quot; : false, &quot;number_of_nodes&quot; : 3, &quot;number_of_data_nodes&quot; : 3, &quot;active_primary_shards&quot; : 7, &quot;active_shards&quot; : 14, &quot;relocating_shards&quot; : 0, &quot;initializing_shards&quot; : 0, &quot;unassigned_shards&quot; : 0, &quot;delayed_unassigned_shards&quot; : 0, &quot;number_of_pending_tasks&quot; : 0, &quot;number_of_in_flight_fetch&quot; : 0, &quot;task_max_waiting_in_queue_millis&quot; : 0, &quot;active_shards_percent_as_number&quot; : 100.0&#125; 123456[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/master_node?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;cluster_uuid&quot; : &quot;exgsV0fDSCu826nXkN9w8A&quot;, &quot;master_node&quot; : &quot;WIm1WA75QhSegglRpCn4-Q&quot;&#125; 123[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/nodes?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/stats?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_nodes/stats?pretty 1234[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/pending_tasks?pretty&#123; &quot;tasks&quot; : [ ]&#125; 数据提交1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/1?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 0, &quot;_primary_term&quot; : 1&#125; 1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/2?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, # 索引，没有会自动创建 &quot;_type&quot; : &quot;class1&quot;, # 类型，没有会自动创建 &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 2, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 1&#125; 获取文档数据123456789101112[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/1&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:0,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;2&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:1,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125; 更新文档可以PUT方法覆盖原有文档，也可以局部更新用POST方法调用_update接口1234567891011121314151617181920212223242526272829303132[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X POST http://192.168.1.40:9200/students/class1/2/_update?pretty -d &apos;&#123;&quot;doc&quot;: &#123;&quot;last_name&quot;: &quot;Huang2_222&quot;&#125;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;result&quot; : &quot;noop&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 0, &quot;successful&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2?pretty # 查看更新&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1, &quot;found&quot; : true, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2_222&quot; &#125;&#125; 删除文档1[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/class1/2 查看索引123456789[root@node01 ~]# curl -X GET http://192.168.1.40:9200/_cat/indices?vhealth status index uuid pri rep docs.count docs.deleted store.size pri.store.sizegreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 431 1.3mb 630.3kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open students em-XgwfsSc--wFnCcLC7jg 1 1 2 0 21.5kb 8.6kbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 4 0 43.7kb 21.8kbgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 4 4.2mb 2.1mbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 6 0 75.8kb 40.9kb 删除索引12[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/&#123;&quot;acknowledged&quot;:true&#125; 以上是基于query DSL language,用于实现诸多类型查询向ES发起查询请求的方式有2种：1 通过RestFul request API查询，也称为query string2 通过发送REST request body 进行查询 query string方式查询12345678910111213141516171819202122232425262728293031323334353637383940[root@node01 ~]# curl http://192.168.1.40:9200/students/_search?pretty&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 2, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2&quot; &#125; &#125; ] &#125;&#125; REST request body 方式查询123[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X GET http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&apos; 多索引，多类型查询,一般格式为：http://IP:port/&lt;indices1&gt;,&lt;indices2&gt;/&lt;type1&gt;,&lt;type2&gt;/_search?pretty12curl http://192.168.1.40:9200/_search?pretty # 所有索引查询curl http://192.168.1.40:9200/students1,students2/_search?pretty mappping/analysisES对每一个文档会取得其所有域的所有值，生成一个名为”_all”的域，执行查询时，如果在query_string未指定查询的域，则在_all域上执行查询操作 不指定域查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 指定域精确查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=first_name:&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 查看指定类型的mapping123456789101112131415161718192021222324252627[root@node01 ~]# curl http://192.168.1.40:9200/students/_mapping?pretty&#123; &quot;students&quot; : &#123; &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;first_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;last_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125; &#125; &#125; &#125;&#125; request Body 请求查询 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;term&quot;: &#123;&quot;first_name&quot;:&quot;jing&quot;&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;terms&quot;: &#123;&quot;first_name&quot;:[&quot;jing&quot;,&quot;xx&quot;,&quot;oo&quot;]&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 总结慢慢实践。。。","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch基本使用","slug":"log_elasticsearch-基本使用","date":"2019-08-15T02:42:36.000Z","updated":"2021-04-15T07:13:28.047Z","comments":true,"path":"2019/08/15/log_elasticsearch-基本使用/","link":"","permalink":"http://www.digmyth.com/2019/08/15/log_elasticsearch-基本使用/","excerpt":"","text":"介绍官网： https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-elastic-stack.html elasticsearch: 借住于LuceneAPI 重新封装实现的搜索组件，增加更强大的能力，将Lucene提供的索引组建成shar形式，分片后分布于各节点上从而构建成分布式时时查询组件。 是一个基Lucene实现的开源、分布式、RestFul的全文本搜索引擎，此外，它还是一个分布式实时文档存储，其中每个文档的每个field均是被索引的数据，且可被搜索，也是一个带实时分析功能的分布式搜索引擎，能够扩展至数以百计的节点实时处理PB级的数据 概念 文档只有被索引后才能被索引，这个文档就放在一个叫索引的文件当中。 在Lucene中每一项相当于MYsql表中一行数据，多个项在一起就组成了索引，但是每个索引会尽量存储同类型数据 大索引的多个片分shard散到多个物理节点上去，可成完成读写负载均衡，分片节点挂了所有数据将丢失，但是分布式不应该这样，它还要通过主从副本实现分布解决单点故障问题。 写操作会自动分配到主分片完成写操作，副本分片只有读权限 索引： 文档的集合，类似于表，索引名只能是小写字母 类型(type): 类型是索引内部的逻辑分区，其意义完全取决于用户需求，一个索引内部可以定义一个或多个类型 拥有相同域的文档的预定义，类似于表的表结构，文档是schema free模式自由, 建议一个索引中只存一个类型的文档数据 文档： 是Lucene搜索和索引的原子单位，包含了一个或多个域，是域容器，基于json格式，每个域的组成部份：一个名字和一个或多个值，拥有多个值的域通常称为多值域 映射 (maping): 定义如何切词，指明一个文档中的数据在被存储之前的分析过程该如何执行，原始内容存储为文档之前事先需要分析，映射就 是定义此分析机制该如何实现 例如; 切词、过滤掉某些词、域中内容排序 elasticsearch集群组件： 每一个物理节点必属于且只属于某ES集群 NODE： 运行了单个ES实例的主机即为节点，用于存储数据部份分片、参与集群索引及搜索操作、节点标识靠节点名（默认会生成字串，可自定义） shard分片: 把一个Luence大索引切分为底层物理数据，完成分割存储机制，或说将索引切割成为物理存储组件，但每一个shard都是一个独立且完整的索引，创建索引时，ES默认创建5个副本 shard有2种类型： primary shard/Replicas shard Primary shard 如何切割定义好后不可更改，但是副本数是可以动态更改的 ES工作过程： 通过多播(default)或单播方式工作在9300/TCP查找同一集群的其它节点，并与之建立通信 集群中的所有节点会选举一个主节点负责管理整个集群状态，以及在集群范围内决定各shard分布方式，用户角度没有主从节点，各节点都可接收请求 安装elasticsearch强制要求工作在普通用户模式下，不能root 直接./bin/elasticsearch启动服务，好像rpm安装没有此限制同时启动也有很多限制，否则启动失败 修改系统参数达到启动服务要求1234561 普通用户模式下安装2 安装jdk,要求1.8以上，有人声称1.11以上更佳3 打开文件数限制，包括系统级/etc/security/limits.conf 和ulimit -n 65535用户级4 打开内核参数级限制,临时设置如下命令sysctl -w vm.max_map_count=655350sysctl -w fs.file-max=65536 配置文件修改123456789cat /home/stack/elasticsearch-7.11.2/config/elasticsearch.yml | grep -v ^# | grep -v ^$cluster.name: wxq-esnode.name: node-es3bootstrap.memory_lock: falsenetwork.host: 192.168.1.30discovery.seed_hosts: [&quot;192.168.1.30&quot;,] # 集群模式相应追加主机cluster.initial_master_nodes: [&quot;192.168.1.30&quot;,]http.cors.enabled: true # 方便plugins head插件时跨站请求成功http.cors.allow-origin: &quot;*&quot; head 插件安装安装好后直接访问 http://IP:9100/ 连接地址填入http://es-server:9200/正确1234git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start 1./bin/elasticsearch # 直接启动即可 集群状态 123456green 可用状态red: 不可用yellow: 修复状态ES参与集群事务的端口tcp/9300ES接收请求的端口tcp/9200 API接口使用123456确保集群正常； API接口9200Restful接口API： 4类1 检查集群节点索引健康与否，以及获取其相应状态2 管理集群节点索引及元数据3 执行CRUD操作4 执行高级操作：例如paging 、filtering 12345678910111213所有_cat支持的API操作[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat=^.^=/_cat/allocation/_cat/shards/_cat/shards/&#123;index&#125;/_cat/master/_cat/nodes/_cat/tasks/_cat/indices/_cat/indices/&#123;index&#125;/_cat/segments。。。 v=verbose显示详细信息1234567891011http://192.168.1.30:9200/_cat/nodeshttp://192.168.1.30:9200/_cat/nodes?vhttp://192.168.1.30:9200/_cat/masterhttp://192.168.1.30:9200/_cat/master?v例如：[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?vip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name172.21.0.5 36 98 14 0.22 0.60 1.09 cdfhilmrstw - es02172.21.0.3 28 98 14 0.22 0.60 1.09 cdfhilmrstw * es01172.21.0.4 61 98 14 0.22 0.60 1.09 cdfhilmrstw - es03 help查看某接口支持查询的详细字段12345678[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?helpid | id,nodeId | unique node idpid | p | process idip | i | ip addressport | po | bound transport porthttp_address | http | bound http addressversion | v | es version。。。 查询某接口指定字段1234# curl http://192.168.1.40:9200/_cat/nodes?h=id,pid,ip,port,http_address,version,uptimet_iA 6 172.21.0.5 9300 172.21.0.5:9200 7.12.0 56.8mWIm1 6 172.21.0.3 9300 172.21.0.3:9200 7.12.0 56.8m3bzJ 6 172.21.0.4 9300 172.21.0.4:9200 7.12.0 56.8m health的green状态123# curl http://192.168.1.40:9200/_cat/health?vepoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1618470428 07:07:08 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 总结 带着概念参照官网安装还是挺简单的，练习接口可以了解学习集群及ES的概念","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb-恢复数据","slug":"mariadb-恢复数据","date":"2019-07-25T01:41:54.000Z","updated":"2020-07-08T12:30:31.812Z","comments":true,"path":"2019/07/25/mariadb-恢复数据/","link":"","permalink":"http://www.digmyth.com/2019/07/25/mariadb-恢复数据/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"搜索引擎与Lucene基础","slug":"log_lucene-认识","date":"2019-06-15T02:42:36.000Z","updated":"2021-03-17T09:47:30.627Z","comments":true,"path":"2019/06/15/log_lucene-认识/","link":"","permalink":"http://www.digmyth.com/2019/06/15/log_lucene-认识/","excerpt":"","text":"简单常识：1千万条日志记录存储大小为2G1亿条日志记录 5G8亿条日志记录 40G 程序： 算法+数据结构存储+前端访问接口 开发全文搜索程序： 算法+支持这种场景的特定存储结构海量日志分析： 搜索引擎搜索引擎： 存储时需要有索引链–&gt; 搜索组件（有请求接口有请求返回或展示UI） 收集日志 –&gt; 对收集过来日志检索原始内容–&gt; 构建文档 –&gt;文档分析或切词 –&gt; 建立索引链（创建倒排索引）而SQL的索引： 正排索引 文档数据库： Mongodb、elasticsearch(每一行中每字段文档数据格式各不一样) 著名开源搜索开发库或底层搜索引擎: Lucene添加收集文档，搜索引擎，提供上层搜索接口： Elasticsearch 包含一个或多个域的容器，文档就是由Field、Value组成Lucene没有全局模式：no schema,没有预先定义字段及类型域有很多选项： 索引选项、存储选项、每个域向量使用选项索引选项用于通过倒排索来控制文本是否可被搜索，成为索引中的项才能被搜索： index: ANALYZIED 需要分析或分词并单独构建索引项 index: not_ANALYZIED 不分析或不分词，把整个内容当一个索引项 index: analyzied norms 类似index: ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.Not_analyzied_norms 类似not_ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.NO : 不对此域的值进行索引，因此不能被搜索存储选项: 是否需要存储域的真实值 title: This is a Notebook. –&gt; this notebook 有效信息即可 store.YES: 存储真实值 store.NO: 不存储真实值 (每个项或每个域)向量选项用于在搜索期间控制该文档所有的唯一项都能完全从文档域中检索时使用 文档和域的加权操作： 通过改变某一个文档相对于某一个词的加权因子，对值改大改小可以决定它对用户的重要程序，如竟价排名 加权计算标准：方案很多 搜索：查询Lucene索引时，返回一个有序的scoreDoc对象：查询时Lucene会为每个文档计算出score,API: IndexSearcher: 搜索索引入口 Query及其子类：构建搜索查询语句 QueryParser: 搜索分析后返回结果 TopDocs 某查询分值top10 Lucene的多样化查询： IndexSearcher中的search方法，完成搜索时传入Query实例参数进行，就是告之到底要搜索什么，你键入的搜索关键词分析以后作为Query对象，传递给IndexSearch方法 常用几种查询方法123456789101112131415161718TermQuery： 对索引中特定项进行搜索，Term是索引中的最小索引片段，每个Term包含一个域名和文本值title: This is a Desktitle: Tis is a table索引构建方式： This： （1） (2) Desk： (1) table: (2) TermRangeQuery:索引中每个Term对象上的值都会按照字典编排顺序进行排序，并允许在Lucene TermRangeQuery 提供的范围内进行搜索 大白话就是TermQuery指定一个域中搜索，TermRangeQuery可以指定多个域内搜索 NumericRangeQuery： 只是数值范围内搜索 PrefixQuery： 用于搜索以指定字符串开头的域 BooleanQuery：用于实现组合查询，与或非 and 、or、 not PhraseQuery： 能够跟据位置信息定义文档 WildcardQuery：通配符 FuzzyQuery： 模糊查询 levenshtein处理 总结 Lucene是底层搜索引擎或搜索开发库，基于Lucene库开发有了Elasticsearch存储、搜索引擎系统","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"kubernetes-dashboard-TLS坑","slug":"Kubernetes-dashboard-TLS坑","date":"2019-06-11T12:51:41.000Z","updated":"2019-06-15T15:11:45.437Z","comments":true,"path":"2019/06/11/Kubernetes-dashboard-TLS坑/","link":"","permalink":"http://www.digmyth.com/2019/06/11/Kubernetes-dashboard-TLS坑/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"python-celery-Flask","slug":"python-Celery-Flask","date":"2019-02-10T09:03:01.000Z","updated":"2019-02-21T10:31:24.286Z","comments":true,"path":"2019/02/10/python-Celery-Flask/","link":"","permalink":"http://www.digmyth.com/2019/02/10/python-Celery-Flask/","excerpt":"","text":"一、基本使用Celery是由Python开发的一个简单、灵活、可靠的处理大量任务的分发系统，可以实时处理任务，也可以定时异步处理任务。每次分发任务后得到一个ID，然后根据这个ID查询任务执行情况。 并且celery需要rabbitMQ、Redis等充当broker来进行消息的接收。 安装1pip3 install celery eventlet # windows系统需要eventlet模块 下面我们来快速上手celery编辑s1.py1234567891011#!/usr/bin/env python3from celery import Celerycel = Celery(&apos;xxx&apos;, broker=&quot;redis://192.168.1.40&quot;, backend=&apos;redis://192.168.1.40&apos;)@cel.taskdef f1(x,y): return x+y 然后把s1这个work工作起来，进入命令终端,如果在linux系统，不用添加参数-P eventlet1E:\\pro\\xxx_dir&gt; celery worker -A s1 -l info -P eventlet 编辑s2.py1234567891011121314151617#!/usr/bin/env python3import datetimefrom s1 import f1# 立即执行result = f1.delay(4,6)print(result.id)# 定时执行ctime = datetime.datetime.now()# ctime = datetime.datetime(year=2019,month=2,day=21,hour=14,minute=8)utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp())s10 = datetime.timedelta(seconds=10)ctime_x = utc_time + s10result = f1.apply_async(args=[1,3],eta=ctime_x)print(result.id) 编辑s3.py12345678910111213141516171819202122232425#!/usr/bin/env python3from celery.result import AsyncResultfrom demo1.s1 import celasync = AsyncResult(id=&quot;f43bce52-9503-475e-9d19-4a46ed910a8e&quot;,app=cel)if async.successful(): ret = async.get() # 获取值 #async.forget() # 删除值 print(ret)elif async.failed(): print(&apos;执行失败&apos;)elif async.status == &apos;PENDING&apos;: print(&apos;任务等待中被执行&apos;)elif async.status == &apos;RETRY&apos;: print(&apos;任务异常后正在重试&apos;)elif async.status == &apos;STARTED&apos;: print(&apos;任务已经开始被执行&apos;)else: print(&quot;任务执行失败&quot;)async.revoke() # 取消一个任务，当一个任务正在执行，不能取消async.revoke(terminate=True) # 终止一个任务，当一个任务正在执行，可以被终止 二、多目录结构经过上面快速上手的学习，了解了celery的基本使用，那么重组一下代，形成项目中多目录结构看看相互之间如何调用？ 创建一个celery_tasks的目录，里面一般保存2类文件，其中一个文件名称必须为celery,另一类就是定义task任务的文件，可以有多个。 定义celery_tasks/celery.py文件,如果有多个task任务文件，可以用includ列表包含进来123456789101112131415#!/usr/bin/env python3from celery import Celery# from celery.schedules import crontabcel = Celery(&apos;xxxxxx&apos;, broker=&apos;redis://192.168.1.40:6379&apos;, backend=&apos;redis://192.168.1.40:6379&apos;, include=[&apos;celery_tasks.task1&apos;,) #include=[&apos;celery_tasks.task1&apos;,&apos;celery_tasks.task2&apos;])# 时区cel.conf.timezone = &apos;Asia/Shanghai&apos;# 是否使用UTCcel.conf.enable_utc = False 在多目录结构中，跑celery work时不用指定到文件，指定目录即可1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 定义celery_tasks/task1.py1234567#!/usr/bin/env python3from .celery import cel@cel.taskdef f1(x,y): return x+y 有了celery.py文件和task任务文件，我们就可以在任意地方调用任务了。 比如定义test/exec1.py文件来执行任务123456#!/usr/bin/env python3from celery_tasks.task1 import f1result = f1.delay(4,6)print(result.id) 定义test/exec2.py文件来获取任务执行结果,需要提供任务ID1234567891011#!/usr/bin/env python3from celery_tasks.celery import celfrom celery.result import AsyncResultasync = AsyncResult(id=&quot;be6bb021-da48-46a9-b1bc-94b987f7c8a7&quot;,app=cel)if async.successful(): print(async.get())else: print(&quot;任务执行失败&quot;) 三、Flask中的例用有了上面celery的认识，我们来简单写点代码，看一下在Flask框架中celery是如何使用的？ 定义Flask项目启动文件app.py 写线上代码时是要把任务保存在数据库中的，这里仅作示例就保存在了HISTORY全局变量中了.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/env python3from flask import Flask,request,render_template,redirectfrom celery_tasks.task2 import deployapp = Flask(__name__)HISTORY = []@app.route(&apos;/index&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: return render_template(&apos;index.html&apos;,history=HISTORY)@app.route(&apos;/publish&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def publish(): if request.method == &quot;GET&quot;: return render_template(&apos;publish.html&apos;) else: version = request.form.get(&quot;version&quot;) hosts = request.form.getlist(&quot;hosts&quot;) print(version,hosts) import datetime ctime = datetime.datetime.now() utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp()) ctime_10 = utc_time + datetime.timedelta(seconds=10) result = deploy.apply_async(args=[version,hosts],eta=ctime_10) HISTORY.append(&#123;&quot;version&quot;:version,&quot;hosts&quot;:hosts,&quot;task_id&quot;:result.id&#125;) print(HISTORY) return redirect(&quot;/index&quot;)from celery.result import AsyncResultfrom celery_tasks.celery import cel@app.route(&apos;/check_result&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def check_result(): task_id = request.args.get(&quot;task_id&quot;) async = AsyncResult(id=task_id,app=cel) if async.successful(): result = async.get() print(result) # result.forget() # 将结果删除 return &quot;执行成功&quot; elif async.failed(): return &apos;执行失败&apos; elif async.status == &apos;PENDING&apos;: return &apos;任务等待中被执行&apos; elif async.status == &apos;RETRY&apos;: return &apos;任务异常后正在重试&apos; elif async.status == &apos;STARTED&apos;: return &apos;任务已经开始被执行&apos; else: return &quot;unkown status&quot;@app.route(&apos;/cancel&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def cancel(): task_id = request.args.get(&quot;task_id&quot;) async =AsyncResult(id=task_id,app=cel) async.revoke(terminate=True) for i in HISTORY: if task_id in i.values(): HISTORY.remove(i) return redirect(&quot;/index&quot;)if __name__ == &apos;__main__&apos;: app.run() 定义其中用到的templates/index.html123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;发布系统&lt;/h1&gt;&lt;a href=&quot;/publish&quot;&gt;添加发布任务&lt;/a&gt;&lt;table&gt; &#123;% for row in history %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.task_id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.version &#125;&#125;&lt;/td&gt; &#123;% for host in row.hosts %&#125; &lt;td&gt; &lt;span&gt;&#123;&#123; host &#125;&#125;&lt;/span&gt; &lt;/td&gt; &#123;% endfor %&#125; &lt;td&gt;&lt;a href=&quot;/check_result?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;查看&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/cancel?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;取消&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 定义其中用到的templates/publish.html1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;version&quot; placeholder=&quot;请输入要发布的版本&quot;&gt;&lt;/p&gt; &lt;p&gt; &lt;select name=&quot;hosts&quot; multiple=&quot;multiple&quot;&gt; &lt;option value=&quot;c1.com&quot;&gt;c1.com&lt;/option&gt; &lt;option value=&quot;c2.com&quot;&gt;c2.com&lt;/option&gt; &lt;option value=&quot;c3.com&quot;&gt;c3.com&lt;/option&gt; &lt;/select&gt; &lt;/p&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 定义其中的celery_tasks.task2.py文件,这里的deploy是真正定义任务的地方.12345678#!/usr/bin/env python3from .celery import cel@cel.taskdef deploy(version,hosts): print(version, hosts) # 定义想要执行的任务代码 return &apos;deploy ok&apos; 同样别望了先把work跑起来,再启动Flask1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 四、总结还需要多写代码在项目中总结celery…","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"ansible callback 重写","slug":"ansible-Callback-02","date":"2019-01-12T12:39:12.000Z","updated":"2019-01-13T13:01:21.969Z","comments":true,"path":"2019/01/12/ansible-Callback-02/","link":"","permalink":"http://www.digmyth.com/2019/01/12/ansible-Callback-02/","excerpt":"","text":"1.1 adhoc callback重写adhoc-callback.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象#^#Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)#^# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)#^# 重写CallbackBase父类class AdhocResultsCollector(CallbackBase): def __init__(self, *args, **kwargs): super(AdhocResultsCollector, self).__init__(*args, **kwargs) self.host_ok = &#123;&#125; self.host_unreachable = &#123;&#125; self.host_failed = &#123;&#125; def v2_runner_on_unreachable(self, result): self.host_unreachable[result._host.get_name()] = result def v2_runner_on_ok(self, result, *args, **kwargs): self.host_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.host_failed[result._host.get_name()] = resultcallback = AdhocResultsCollector()passwords = dict()tqm = TaskQueueManager(inventory=myinven, variable_manager=varmanager, loader=loader,options=options, passwords=passwords, stdout_callback=callback )result_status_code = tqm.run(play)print(callback.host_ok.items())result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;)for host,result in callback.host_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.host_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.host_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultprint(json.dumps(result_raw,indent=4)) 1.2 playbook callback重写写入示例playbook文件site.yml12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 编写play_book.py 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;, &apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;, &apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True, )# 重写CallbackBase父类class PlayBookResultsCollector(CallbackBase): CALLBACK_VERSION = 2.0 def __init__(self, *args, **kwargs): super(PlayBookResultsCollector, self).__init__(*args, **kwargs) self.task_ok = &#123;&#125; self.task_skipped = &#123;&#125; self.task_failed = &#123;&#125; self.task_status = &#123;&#125; self.task_unreachable = &#123;&#125; def v2_runner_on_ok(self, result, *args, **kwargs): self.task_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.task_failed[result._host.get_name()] = result def v2_runner_on_unreachable(self, result): self.task_unreachable[result._host.get_name()] = result def v2_runner_on_skipped(self, result): self.task_ok[result._host.get_name()] = result def v2_playbook_on_stats(self, stats): hosts = sorted(stats.processed.keys()) for h in hosts: t = stats.summarize(h) self.task_status[h] = &#123; &quot;ok&quot;:t[&apos;ok&apos;], &quot;changed&quot; : t[&apos;changed&apos;], &quot;unreachable&quot;:t[&apos;unreachable&apos;], &quot;skipped&quot;:t[&apos;skipped&apos;], &quot;failed&quot;:t[&apos;failures&apos;] &#125;# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords )# 把重写的CallbackBase父类加载进playbookcallback = PlayBookResultsCollector()playbook._tqm._stdout_callback = callbackplaybook.run()result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;, skipped = &#123;&#125;, status = &#123;&#125;,)for host,result in callback.task_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.task_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.task_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultfor host,result in callback.task_skipped.items(): result_raw[&apos;skipped&apos;][host] = result._resultfor host, result in callback.task_status.items(): result_raw[&apos;status&apos;][host] = resultprint(json.dumps(result_raw,indent=4)) 执行示例python3 play_book.py 返回类似如下结果12345678910111213141516171819202122232425262728293031323334&#123; &quot;success&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;changed&quot;: true, &quot;end&quot;: &quot;2019-01-14 04:50:06.190607&quot;, &quot;stdout&quot;: &quot;&quot;, &quot;cmd&quot;: &quot;touch /tmp/site.txt&quot;, &quot;rc&quot;: 0, &quot;start&quot;: &quot;2019-01-14 04:50:06.186466&quot;, &quot;stderr&quot;: &quot;&quot;, &quot;delta&quot;: &quot;0:00:00.004141&quot;, &quot;invocation&quot;: &#123; &quot;module_args&quot;: &#123; &quot;creates&quot;: null, &quot;executable&quot;: null, &quot;_uses_shell&quot;: true, ... 略 &#125; &#125;, &#125; &#125;, &quot;failed&quot;: &#123;&#125;, &quot;unreachable&quot;: &#123;&#125;, &quot;skipped&quot;: &#123;&#125;, &quot;status&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;ok&quot;: 2, &quot;changed&quot;: 1, &quot;unreachable&quot;: 0, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 &#125; &#125;&#125; 总结 adhoc重写方法如host_ok,host_failed,host_unreachable playbook重写方法如task_ok,task_failed,task_unreachable,task_skipped,task_status,task_changed 返回如callback.task_ok.items(),其中键为host,值为result对象，result._result得到一个字典类型的详细结果 &lt;&lt; 完结 &gt;&gt;","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"python3下ansible api学习","slug":"ansible-api-01","date":"2019-01-10T12:39:12.000Z","updated":"2019-01-13T12:36:03.633Z","comments":true,"path":"2019/01/10/ansible-api-01/","link":"","permalink":"http://www.digmyth.com/2019/01/10/ansible-api-01/","excerpt":"","text":"1.1 ansible api基础环境说明： python version: python3 ansible version: 2.7.5 inventory file: dir1/inventory/multinode 清单文件定义： dir1/inventory/multinode12345678910[control]192.168.1.6 var1=&quot;ssss&quot; ansible_ssh_user=root ansible_ssh_pass=&apos;123&apos;[nova:children]control[cinder:children]control[glance:children] 一个单一文件进行简单的接口学习: dir1/f1.py1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/env python3import os,sys,jsonfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.plugins.callback import CallbackBaseimport ansible.constants as CBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&quot;dir1/inventory/multinode&quot;)loader = DataLoader()inven = InventoryManager(loader=loader,sources=[source,])# print(inven.get_hosts())inven.add_group(&apos;test_group2&apos;)print(inven.get_groups_dict())inven.add_host(host=&apos;192.168.1.7&apos;,port=22,group=&apos;test_group2&apos;)print(inven.get_groups_dict())host = inven.get_host(hostname=&apos;192.168.1.6&apos;)variableman = VariableManager(loader=loader,inventory=inven)vars = variableman.get_vars(host=host)# print(json.dumps(vars,indent=4))variableman.set_host_variable(host=host,varname=&apos;k1&apos;,value=&apos;v1&apos;) # 局部的x = variableman.get_vars(host=host)print(x[&apos;k1&apos;])print(variableman.__dict__)variableman._extra_vars = &#123;&quot;k2&quot;: &quot;v2&quot;&#125; # 添加全局变量x = variableman.get_vars() # 不传host说明是全局的 执行测试1python3 dir1/f1.py # 输出调用信息对照接口就知道只些方法是干什么的了 1.2 adhoc模式示例学习编辑dir1/adhoc.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)passwords = &#123;&#125;tqm = TaskQueueManager(inventory=myinven,variable_manager=varmanager, loader=loader,options=options,passwords=passwords)result = tqm.run(play) 执行测试1python3 dir1/adhoc.py 输出信息和命令行ansible直接模块运行一样，任务正常执行 1.3 playbook 示例学习编辑dir1/play_book.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords)playbook.run() 用到的site.yml文件示例如下12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 执行测试1python3 play_book.py 输出信息和ansible-playbook命令行输出一样，任务正常执行","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"veth-pair+namespace","slug":"veth-pair+namespace","date":"2019-01-10T01:41:54.000Z","updated":"2021-01-21T09:00:43.702Z","comments":true,"path":"2019/01/10/veth-pair+namespace/","link":"","permalink":"http://www.digmyth.com/2019/01/10/veth-pair+namespace/","excerpt":"","text":"查找对端veth pair12345678root@k8s-m:/data/dashboard# cat /sys/class/net/cali3b4bae3cec1/iflink 4root@k8s-m:/data/dashboard# ethtool -S cali3b4bae3cec1NIC statistics: peer_ifindex: 4 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0 namespace场景参考如下1234567891011121314# ip link add veth-a type veth peer name veth-b # 生成veth pair对，相当于一根网线# ip netns add ns1 # 创建名称空间# ip link set veth-a netns ns1 #将网线A端加入名称容间root@k8s-m:~# ip netns exec ns1 ethtool -S veth-a # veth-a的对端编号16NIC statistics: peer_ifindex: 16 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0root@k8s-m:~# ip netns exec ns1 cat /sys/class/net/veth-a/iflink # veth-a的对端编号1616# ip a # 查看编号16的设备16: veth-b@if17: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether be:ec:d2:fc:64:3f brd ff:ff:ff:ff:ff:ff link-netns ns1 利用ovs实现跨主机通信的简单应用12345678ovs-vsctl add-br ovs0ovs-vsctl add-port ovs0 eth0物理网卡加进ovs可能会断网，解决办法：# ifconfig ovs0 172.16.10.10/24# ifconfig eth0 0.0.0.0.0# route del default# route add default gw 172.16.10.254 dev ovs0# ifconfig ovs0 hw ether $eth0_mac 注意： 完事后放在开机启动项，不然开机失效连不上机","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"OpenVSwitch","slug":"openvswitch","date":"2019-01-08T01:41:54.000Z","updated":"2019-05-26T15:16:23.168Z","comments":true,"path":"2019/01/08/openvswitch/","link":"","permalink":"http://www.digmyth.com/2019/01/08/openvswitch/","excerpt":"","text":"交换机端口查看12345# ovs-vsctl show# ovs-ofctl show# ovs-ofctl show br-int# ovs-ofctl show br-tun# virsh domiflist instance-00000017 open flow流表查看12345678# ovs-ofctl dump-flows br-int# ovs-ofctl dump-flows br-tun# ip netns exec qrouter-c266eb04-0be8-448f-986f-6eef3a9bcdce ifconfig# dpkg-query -S /sbin/brctl# apt-get install bridge-utils# brctl show 添加br-ex网桥：123456# ovs-vsctl add-br br-ex桥加载到物理网口：# ovs-vsctl add-port br-ex eth0添加到不同vlan与端口模式# ovs-vsctl add-port br-ex eth1 tag=100 //设置为access端口# ovs-vsctl add-port br-ex eth2 trunk=200 //设置为trunk端口,允许vlan200通过，默认允许所有vlan直接转发 列出所有桥：123ovs-vsctl list-brovs-vsctl list-ports br-intovs-vsctl port-to-br port_name 列出桥上所接端口123# ovs-vsctl list-ports br-ex# ovs-ofctl dump-ports br-ex# ovs-vsctl list port 根据交换机某个接口名称查端口号12# ovs-vsctl list interface tap0_br | grep &quot;ofport &quot;ofport : 1 流表操作注意： 流量匹配是有顺序的,table0–&gt;table1—&gt;table3–&gt;table4 –&gt;table5…123456789101112# ovs-vsctl add-br vswitch0#发现有一条actions为NORMAL的流表项，这是默认存在的，用以实现交换机的基本动作# ovs-ofctl dump-flows vswitch0cookie=0x0, duration=267197.837s, table=0, n_packets=459, n_bytes=42190, idle_age=387, hard_age=65534, priority=0 actions=NORMAL# ovs-ofctl del-flows vswitch0 # 流表删除后所有流量将被丢弃# ovs-ofctl dump-flows vswitch0# 可以在table0添加类似规则使流量正常转发,没写表名默认table0# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot; 12345#flow优先级越高，会优先匹配,以下规则drop优先，流量被丢弃# ovs-ofctl del-flows br-int# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl add-flow vswitch0 &quot;priority=3,in_port=1,actions=drop&quot; 将table0的规则添加到table1上，发出流量也是不通的，因为流表是有顺序的，table0没有匹配到，流量被丢弃1234567# ovs-ofctl del-flows vswitch0# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl dump-flows vswitch0NXST_FLOW reply (xid=0x4): cookie=0x0, duration=3.485s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=1,in_port=1 actions=output:4 cookie=0x0, duration=3.033s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=2,in_port=4 actions=output:1 现在给table0加上一条将数据包发送到table1处理的flow, 发现流量正常，这就明白了多个table之间是如何协调工作的。1# ovs-ofctl add-flow vswitch0 &quot;table=0,actions=goto_table=1&quot; 组表操作添加一个组表1# ovs-ofctl -O OpenFlow13 add-group vswitch0 &quot;group_id=1,type=select,bucket=resubmit(,1)&quot; 查看组表1# ovs-ofctl -O OpenFlow13 dump-groups vswitch0 在table0中增加两条flow，目的是将数据包发送到group table112# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=1,actions=group:1&quot;# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=4,actions=group:1&quot; 向table1中增加两条flow，真正的数据转发在table1中进行,流量也正常通过12# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot; 虚机挂在网桥上xml格式定义openvswitch网桥，以便于virt-install –network参数指定网桥启动虚机1234567# ovsbr0.xml&lt;network&gt; &lt;name&gt;ovsbr0&lt;/name&gt; &lt;forward mode=&apos;bridge&apos;/&gt; &lt;bridge name=&apos;ovsbr0&apos;/&gt; &lt;virtualport type=&apos;openvswitch&apos;/&gt;&lt;/network&gt; 123virsh net-define ovsbr0.xmlvirsh net-start ovsbr0virsh net-autostart ovsbr0 在安装kvm虚拟机时使用ovsbr012345678910virt-install \\ -n vm-name \\ -r 4096 \\ --disk path=/data/kvm/rhel75-vm1.qcow2,format=qcow2,size=60 \\ --vcpus 4 \\ --noautoconsole \\ --cdrom=/data/kvm/iso/rhel75-x86_64.iso \\ --os-type=linux \\ --network network:ovsbr0 \\ --vnc --vnclisten=0.0.0.0 --vncport=5901 也可以将正在运行的KVM虚拟机的vnet网络接口强制接到ovs网桥上12#virsh dumpxml $vmname|grep vnet 查看某虚拟机在宿主机上对应的网络接口add-port ovsbr0 vnetxx 网桥接口划vlan并配IP命令12ovs-vsctl add-port ovsbr0 tag10 tag=10 -- set interface tag10 type=internalifconfig tag10 192.168.10.10/24 up 1234# ip link命令设置vlan接口命令ip link add link eth0 name eth0.10 type vlan id 10ifconfig eth0.10 192.168.10.33 netmask 255.255.255.0 broadcast 192.168.10.255 uproute add default gw 192.168.10.1 dev eth0.10 总结：这里只是命令总结，并没有什么实验逻辑","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"download technique","slug":"linux-download-technique","date":"2018-12-01T00:48:08.000Z","updated":"2019-05-26T11:37:37.080Z","comments":true,"path":"2018/12/01/linux-download-technique/","link":"","permalink":"http://www.digmyth.com/2018/12/01/linux-download-technique/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-socket-高级篇","slug":"web-socket-02","date":"2018-11-25T12:51:41.000Z","updated":"2018-11-27T02:19:03.844Z","comments":true,"path":"2018/11/25/web-socket-02/","link":"","permalink":"http://www.digmyth.com/2018/11/25/web-socket-02/","excerpt":"","text":"前面我们学习了WebSocket，我们知道客户端要与服务端进行WebSoccket通信，客户端要和服务端握手，握手成功后才能通信。 握手： 客户端发出握手请求，服务端在握手请求中取出“Sec-WebSocket-Key”，把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 如果给定了“Sec-WebSocket-Key”，那么摘要算法代码如下，服务器会把摘要后值返回给客户端完成握手操作。12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 如果我们己经有一个socket server，真的能收到握手信息吗？socker_server.py1234567891011121314#!/usr/bin/env python3import socketconn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)conn.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)conn.bind((&apos;127.0.0.1&apos;,8000))conn.listen(5)client,addr = conn.accept()print(client.recv(8192))print(addr) 如何发送握手请求？方式一：可直接在浏览器console终端下手动发送socket请求，请求中包含握手信息12&gt;var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;)undefined 此时浏览器会报VM44:1 WebSocket connection to &#39;ws://127.0.0.1:8000/xxoo&#39; failed: Connection closed before receiving a handshake response的错，是因为服务器端没有返回摘要后的值，表示没有握手成功。 方式二：直接编写client.html用浏览器运行12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;WebSocket test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;WebSocket study....&lt;/h1&gt; &lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 此时服务器会收到类似b&#39;GET /xxoo HTTP/1.1\\r\\nHost: 127.0.0.1:8000\\r\\nConnection: Upgrade...client_max_window_bits\\r\\n\\r\\n&#39;信息，里面包含“Sec-WebSocket-Key” 如果我们用一个函数手动取出“Sec-WebSocket-Key”，然后手动摘要后把值再手动返回给客户端，这样就握手成功不会报错了。 处理握手信息的函数(get_headers)如下123456789101112131415161718192021def get_headers(data): &quot;&quot;&quot; 将请求头格式化成字典 :param data: :return: &quot;&quot;&quot; header_dict = &#123;&#125; data = str(data, encoding=&apos;utf-8&apos;) for i in data.split(&apos;\\r\\n&apos;): print(i) header, body = data.split(&apos;\\r\\n\\r\\n&apos;, 1) header_list = header.split(&apos;\\r\\n&apos;) for i in range(0, len(header_list)): if i == 0: if len(header_list[i].split(&apos; &apos;)) == 3: header_dict[&apos;method&apos;], header_dict[&apos;url&apos;], header_dict[&apos;protocol&apos;] = header_list[i].split(&apos; &apos;) else: k, v = header_list[i].split(&apos;:&apos;, 1) header_dict[k] = v.strip() return header_dict 把摘要后的值返回给客户端1234567891011121314conn, address = sock.accept()data = conn.recv(1024)headers = get_headers(data) # 提取请求头信息# 对请求头中的sec-websocket-key进行加密response_tpl = &quot;HTTP/1.1 101 Switching Protocols\\r\\n&quot; \\ &quot;Upgrade:websocket\\r\\n&quot; \\ &quot;Connection: Upgrade\\r\\n&quot; \\ &quot;Sec-WebSocket-Accept: %s\\r\\n&quot; \\ &quot;WebSocket-Location: ws://%s%s\\r\\n\\r\\n&quot;magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;value = headers[&apos;Sec-WebSocket-Key&apos;] + magic_stringac = base64.b64encode(hashlib.sha1(value.encode(&apos;utf-8&apos;)).digest())response_str = response_tpl % (ac.decode(&apos;utf-8&apos;), headers[&apos;Host&apos;], headers[&apos;url&apos;])conn.send(bytes(response_str, encoding=&apos;utf-8&apos;)) 摘要后的值返回给客户端后就完成了握手过程，客户端就不会再报连接错误了。 接收客户端发来的数据完成握手操作后就客户端就可以向服务器发送数据了，只需console终端sock.send(&#39;dimyth&#39;) 服务端接收12info = conn.recv(1024)print(info) # 这里是字节 服务器端收到客户端发来的数据，这个数据需要服务器解包，解包过程如下1234567891011121314151617181920payload_len = info[1] &amp; 127if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:]elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:]else: extend_payload_len = None mask = info[2:6] decoded = info[6:]bytes_list = bytearray()for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk)body = str(bytes_list, encoding=&apos;utf-8&apos;)print(body) # 解出真正数据 那么服务器给客户端发送数据要就封包。123456789101112131415161718192021def send_msg(conn, msg_bytes): &quot;&quot;&quot; WebSocket服务端向客户端发送消息 :param conn: 客户端连接到服务器端的socket对象,即： conn,address = socket.accept() :param msg_bytes: 向客户端发送的字节 :return: &quot;&quot;&quot; import struct token = b&quot;\\x81&quot; length = len(msg_bytes) if length &lt; 126: token += struct.pack(&quot;B&quot;, length) elif length &lt;= 0xFFFF: # 65535 token += struct.pack(&quot;!BH&quot;, 126, length) else: token += struct.pack(&quot;!BQ&quot;, 127, length) msg = token + msg_bytes conn.send(msg) return True 对上面BHQ说明一下，B代表1个字节，H代表2个字节，Q代表8个字节 客户端如何收消息呢？1234567891011&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;); sock.onmessage = function (event) &#123; /* 服务器端向客户端发送数据时，自动执行 */ var response = event.data; var newTag = document.createElement(&apos;div&apos;); newTag.innerHTML = response; document.getElementById(&apos;content&apos;).appendChild(newTag); &#125;;&lt;/script&gt;","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"web-socket-基础知识","slug":"web-socket-01","date":"2018-11-06T12:51:41.000Z","updated":"2018-11-25T11:24:51.562Z","comments":true,"path":"2018/11/06/web-socket-01/","link":"","permalink":"http://www.digmyth.com/2018/11/06/web-socket-01/","excerpt":"","text":"WebSocket在什么场景下使用？页面实时展示数据 轮询：setInterval()前端轮询请求，性能低下 长轮询：把请求pending住多少秒后再返回，量大时也损耗服务器性能 WebSocket: 建立socket双向传输数据，高效。 那么什么是WebSocket参考链接 先来看下http协议 http协议： 1 格式：请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接：一次请求，一次响应，然后断开连接。 那么WebSocket协议是怎么样的呢？ WebSocket： 1 格式： 请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接： 创建socket通道后不断开，全双工(full-duplex)通信，可以相互发消息。 WebSocket实现了浏览器与服务器全双工(full-duplex)通信，能主动向浏览器发送消息，但需要浏览器支持websocket封包解包或加密解密。其本质是保持TCP连接，在浏览器和服务端通过Socket进行通信。 WebSocket特性 WebSocket 是独立的、创建在 TCP 上的协议。 Websocket 通过 HTTP/1.1 协议的101状态码进行握手。 为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking） 总结起来：WebSocket是一种在单个TCP连接上进行全双工通信的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。 WebSokcet工作原理首先客户端要验证服务器是否支持websocket协议，能不能一起玩耍？ 客户端发送playload data之前会发送握手字符串，服务器把握手字符串加密后返回给客户端，此时客户端也把字符串按特定算法加密，把客户端加密后的字符串与服务器加密后的字符串进行比较，如果一致则客户端认为服务器支持WebSocket协议通信，可以相互一起玩耍。 握手时的特定算法是什么呢？代码如下12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 能不能一起玩耍，官方术语就是创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）. 不管怎么说，WebSocket允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。 什么？看不懂，一言不合上代码，下面是一个典型的Websocket握手请求. 客户端请求1234567GET / HTTP/1.1Upgrade: websocketConnection: UpgradeHost: example.comOrigin: http://example.com:8002Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==Sec-WebSocket-Version: 13 服务器回应12345HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=Sec-WebSocket-Location: ws://example.com:8002/ 字段说明 Connection必须设置Upgrade，表示客户端希望连接升级。 Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。 Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13. Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是,与Referer不同的是，Origin只包含了协议和主机名称。 服务器解包细节官方WebSocket instructions 注意的是客户端和服务端传输数据时，需要对数据进行封包解包。客户端有 javascript类库实现封包解包，但服务器需要手动实现。 当conn,addr = sk.accept()时，服务器端代码如下12345678910111213141516171819202122info = conn.recv(8096) payload_len = info[1] &amp; 127 if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:] elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:] else: extend_payload_len = None mask = info[2:6] decoded = info[6:] bytes_list = bytearray() for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk) body = str(bytes_list, encoding=&apos;utf-8&apos;) print(body) 要看懂这段代码必须了解websocket解包细节. 当客户端加密发送了socket data数据时，服务端收到数据是这样的. b&#39;\\x81\\x82\\xac\\xde\\xdd\\xf4\\xdc\\xae&#39; 需要对这样的数据解密才能拿到真的数据，跟据第二个字节后7位的值取数据.1234567891011121314151617180 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-------+-+-------------+-------------------------------+|F|R|R|R| opcode|M| Payload len | Extended payload length ||I|S|S|S| (4) |A| (7) | (16/64) ||N|V|V|V| |S| | (if payload len==126/127) || |1|2|3| |K| | |+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +| Extended payload length continued, if payload len == 127 |+ - - - - - - - - - - - - - - - +-------------------------------+| |Masking-key, if MASK set to 1 |+-------------------------------+-------------------------------+| Masking-key (continued) | Payload Data |+-------------------------------- - - - - - - - - - - - - - - - +: Payload Data continued ... :+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +| Payload Data continued ... |+---------------------------------------------------------------+ 1234value = socket_data[1] &amp; 127value &lt;=125 b&apos;\\x81\\x82 \\xac\\xde\\xdd\\xf4\\xdc\\xae&apos; # 数据在第2个节字后value =126 b&apos;\\x81\\x82\\xac\\xde \\xdd\\xf4\\xdc\\xae&apos; # next 16bit(2个字节)，数据在第4个节字后 value =127 xxx... # next 64bit(8个字节), 数据在第10个节字后 其中头32bits为掩码，真正数据还要去掉这4字节，取真正数据真不容易。 好了,WebSocket所有知识都在这里了，慢慢品味知识的韵味。","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"kubernetes-dashboard","slug":"Kubernetes-dashboard","date":"2018-10-01T12:51:41.000Z","updated":"2019-06-15T04:02:25.581Z","comments":true,"path":"2018/10/01/Kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2018/10/01/Kubernetes-dashboard/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"linux dmesg时间戳换算","slug":"linux-dmesg","date":"2018-08-16T01:42:54.000Z","updated":"2021-01-29T09:46:40.249Z","comments":true,"path":"2018/08/16/linux-dmesg/","link":"","permalink":"http://www.digmyth.com/2018/08/16/linux-dmesg/","excerpt":"","text":"dmesg系统内核里的时间戳转换为人类可以看懂的时间 dmesg记录的是自系统开机那刻到出事故时的时间戳 开机时间戳=当时时间戳-机器运行时间戳dmesg_time=开机时间戳+ dmesg记录时间戳再拿着dmesg_time时间戳换算就好了 123456789dmesg_time=`echo &quot;$(date +%s) - $(cat /proc/uptime | cut -f 1 -d&apos; &apos;) + 84679.822059&quot; | bc`echo $dmesg_time/proc/uptime 第一列表示为系统开机时间，根据这个值和当前时间可以获取到dmesg日志中时间发生的时间时间戳的转换为时间[root@site1 ~]# date -d &quot;@$&#123;dmesg_time&#125;&quot; &apos;+%Y-%m-%d %H:%M:%S&apos;2019-01-03 11:10:54","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"cinder多后端逻辑","slug":"cinder-vol-多后端","date":"2018-08-08T01:41:54.000Z","updated":"2019-05-26T12:41:06.912Z","comments":true,"path":"2018/08/08/cinder-vol-多后端/","link":"","permalink":"http://www.digmyth.com/2018/08/08/cinder-vol-多后端/","excerpt":"","text":"cinder配置逻辑123456789101112131415enable_backens=backend1,backend2,backend3[backend1]volume_driver=cinder.xxvolume_backend_name=sata[backend2]volume_driver=cinder.xxvolume_backend_name=ssd[backend3]volume_driver=cinder.xxvolume_backend_name=rbdcinder type-create satacinder type-key sata set volume_backend_name=satacinder create --volume-type sata --display-name vol_stat 20 vmware启用thick配置123456789101、运行命令：cinder type-create thick_volume（注：创建云硬盘类型）2、运行命令：cinder type-key thick_volume set vmware:vmdk_type=thick（注：thick为Vmware使用）3、运行命令：cinder type-key thick_volume set volume_backend_name=fusionstorage_sata3copy（注：指定后端）4、运行命令：glance image-list（注：查看镜像ID）5、运行命令：cinder create --image-id “镜像ID” --volume-type thick_volume --display-name vol-thick 20（注：创建一个20G大小的云硬盘，使用刚刚创建的云硬盘类型）","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"kubernetes-kubeadm","slug":"Kubernetes-kubeadm","date":"2018-08-01T12:51:41.000Z","updated":"2021-05-13T05:42:11.860Z","comments":true,"path":"2018/08/01/Kubernetes-kubeadm/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes-kubeadm/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-入门","slug":"Kubernetes","date":"2018-08-01T12:51:41.000Z","updated":"2018-08-26T04:03:32.956Z","comments":true,"path":"2018/08/01/Kubernetes/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes/","excerpt":"","text":"k8s 的世界12345678910- charts , k8s 的包， 类似 *.rpm 的东西- helm , k8s 的包管理机制，类似 yum 的东西openstack 容器化 ( docker 版本）- kolla-ansible- tripleoopenstack 容器化( k8s 版本）- openstack-helm- kolla-kubernetes openshift中有几种网络端口模式(暴露服务) hostnetworkhostnetwork 就是Docker的host网络，pod直接占用宿主机IP及端口，没什么可说的 hostporthostport 是在单宿主机通过IP+端口来映射容器或pod(-p 参数), 实现外部能访问容器服务或pod服务 nodeportnodeport也是在宿主机通过IP+端口来映射，与hostport不同之处是映射ServiceIP+端口，再转到pod服务 routerrouter是以hostnetwork网络模式跑在宿主机上的容器化haproxy pod, pod IP和端口就是节点的IP和端，对外暴露80、443、1936端口，haproxy中有service query 信息来自于etcd, 再通过service访问到pod服务。 注： router是hostnetwork网络模式就意味着一个节点只能运行一个router","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Dockerfile-详解","slug":"Dockerfile-详解","date":"2018-08-01T12:51:41.000Z","updated":"2018-10-24T06:18:33.872Z","comments":true,"path":"2018/08/01/Dockerfile-详解/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Dockerfile-详解/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Openshift-入门","slug":"Openshift","date":"2018-08-01T12:51:41.000Z","updated":"2018-07-29T10:51:12.609Z","comments":true,"path":"2018/08/01/Openshift/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Openshift/","excerpt":"","text":"前言","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"CentOS 7.x/Mysql limit","slug":"mysql-limit","date":"2018-07-25T01:41:54.000Z","updated":"2018-08-25T06:25:06.410Z","comments":true,"path":"2018/07/25/mysql-limit/","link":"","permalink":"http://www.digmyth.com/2018/07/25/mysql-limit/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"python-08-07-抽象类抽象方法.md","slug":"python-08-07-抽象类抽象方法","date":"2018-06-15T12:39:12.000Z","updated":"2018-12-21T18:24:42.815Z","comments":true,"path":"2018/06/15/python-08-07-抽象类抽象方法/","link":"","permalink":"http://www.digmyth.com/2018/06/15/python-08-07-抽象类抽象方法/","excerpt":"","text":"接口当多个类都有同样的方法，此时可以把相同的方法提练出来放在父类，但对继承父类的子类作约束就要用到接口了。 下面来段伪代码，在其它语言中普遍使用的语法，不适于python,这里主要学习其思想12345678910111213141516interface IFoo(): # 这个叫IFoo接口，约束实现该接口的类必须实现定义的方法 def exec(self):passclass A(IFoo): # 这个叫实现了IFoo接口，接口中的方法必须在当前类实现 def exec(self): return &quot;A.exec&quot;class B(IFoo): def exec(self): return &apos;B.exec&apos;def f1(arg): arg.exec()obj = A()print(f1.obj) 上面就是接口的概念或者用法，下面是用抽象类、抽象方法实现同样功能的原理伪代码123456789101112AbstractClass Foo(): 抽象类，抽象方法(有继承的特性，也有约束的特性) def abstractmethod():passclass A(Foo): def exec(self): return &apos;A.exec&apos; def f1(self): return &quot;A.f1&quot;obj = A()obj.exec() 那么如何用代码实现python抽象类、抽象方法呢？ 要用到from abc import abstractmethod,ABCMeta1234567891011121314151617from abc import abstractmethod,ABCMetaclass IFoo(metaclass=ABCMeta): @abstractmethod def exec(self):pass def f1(self): return &quot;cloud implement really method&quot;class A(IFoo): # 当前类继承了抽象类，当前类必须实现抽象类中的所有抽象方法，其它方法可以不用定义且可以直接继承使用。 def exec(self): return &quot;really method&quot;obj = A()print(obj.exec())print(obj.f1()) 好了， 这个接口或抽象类、抽象方法的学习完结。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Rabbitmq集群","slug":"Rabbitmq","date":"2018-06-08T01:41:54.000Z","updated":"2021-03-03T07:10:17.722Z","comments":true,"path":"2018/06/08/Rabbitmq/","link":"","permalink":"http://www.digmyth.com/2018/06/08/Rabbitmq/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"shell function语法","slug":"shell-func","date":"2018-05-29T01:41:54.000Z","updated":"2018-06-25T02:18:08.139Z","comments":true,"path":"2018/05/29/shell-func/","link":"","permalink":"http://www.digmyth.com/2018/05/29/shell-func/","excerpt":"","text":"Linux shell中函数语法很重要，它能让你写出很漂亮的shell,来看个例子学习下 1234567891011121314151617181920212223242526272829cat /usr/local/bin/show #!/bin/basha=&apos;df -hT&apos;b=&quot;ls&quot;echo_print() &#123; echo -e &quot;\\033[1;32m$1\\033[0m&quot;&#125;exec() &#123; echo_print &quot;$1&quot; $1 echo &quot;&quot;&#125;info () &#123; exec $a exec $b&#125;case &quot;$1&quot; ininfo) info;;*) echo &quot;Usage: show info&quot;;;esac 相当于定制了一个shell命令，运行一下看下效果12345678910111213#[root@wxqnode opt]# show infodfFilesystem 1K-blocks Used Available Use% Mounted on/dev/mapper/centos-root 22001156 1946776 20054380 9% /devtmpfs 2962076 0 2962076 0% /devtmpfs 2973096 0 2973096 0% /dev/shmtmpfs 2973096 33268 2939828 2% /runtmpfs 2973096 0 2973096 0% /sys/fs/cgroup/dev/sda1 1038336 145652 892684 15% /boottmpfs 594620 0 594620 0% /run/user/0lsrestart_cob study venv","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"get namespace","slug":"shell-get-namespace","date":"2018-01-29T01:41:54.000Z","updated":"2019-05-26T11:41:52.484Z","comments":true,"path":"2018/01/29/shell-get-namespace/","link":"","permalink":"http://www.digmyth.com/2018/01/29/shell-get-namespace/","excerpt":"","text":"get namespace shell123456789101112131415161718# read me :please mv this file to ns;use method #ns info#!/bin/bash#echo_print () &#123; echo -e &quot;\\033[32m$1\\033[0m&quot;&#125;nsinfo () &#123;for i in $(ip netns);do echo_print $i;ip netns exec $i ifconfig | grep &quot;inet addr:10&quot; |awk &apos;$1=$1&apos;;echo &apos;&apos; ;done&#125;case &quot;$1&quot; ininfo) nsinfo ;;*) echo_print &quot;Usage: ns info command&quot; ;;esac","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"linux awk","slug":"linux-awk","date":"2018-01-15T02:48:54.000Z","updated":"2021-01-29T09:59:47.621Z","comments":true,"path":"2018/01/15/linux-awk/","link":"","permalink":"http://www.digmyth.com/2018/01/15/linux-awk/","excerpt":"","text":"知识1： awk中,字符串或空串参与运算时会被当作数字0 1234[root@cloud-site mnt]# awk &apos;BEGIN&#123;a=&quot;test&quot;;print a; a=a+1;print a;a++;print a&#125;&apos;test12 知识2：直接引用一个数组中不存在的元素时，awk会自动创建这个元素，并且为其赋值为”空字符串”，同样参与运算时被当作数字0 123[root@cloud-site mnt]# awk &apos;BEGIN&#123;print t[&quot;ip&quot;]; t[&quot;ip&quot;]++;print t[&quot;ip&quot;]&#125;&apos;1 123456789101112示例;[root@cloud-site mnt]# cat test.txtaa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.txt | awk &apos;&#123;A[$1]++&#125;END&#123;for (i in A)&#123; print i,A[i]&#125; &#125;&apos;bb 2cc 2aa 2 示例一123456789101112[root@cloud-site mnt]# cat a.log1|aa|3|45|5|6|7|8|9|2|aa|3|44|5|6|7|8|9|3|aa|3|43|5|6|7|8|9|4|aa|3|44|5|6|7|8|9|5|bb|3|45|5|6|7|8|9|6|bb|3|4 |5|6|7|8|9|[root@cloud-site mnt]# awk -F&apos;|&apos; &apos;&#123;counxxt[$4]++;&#125;END&#123;for (i in counxxt) &#123;print i&quot;|&quot;counxxt[i]&#125;&#125;&apos; a.log44|245|24 |143|1 示例二12345678910111213141516171819202122if 表达式1？那么表达式2 ： 否则 表达式3[root@cloud-site mnt]# cat test.txt aa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.sh#awk &apos;BEGIN &#123;#printf &quot;%s,%5s,%4s\\n&quot;,&quot;IP&quot;,&quot;AVG&quot;,&quot;MAX&quot;#&#125;awk &apos;&#123;A[$1]++;SNF[$1]+=$NF;MAXNF[$1]=($NF&gt;MAXNF[$1]?$NF:MAXNF[$1])&#125;END&#123;for (IP in A) print IP,SNF[IP]/A[IP],MAXNF[IP]&#125;&apos; test.txt[root@cloud-site mnt]# sh test.shbb 57.5 75cc 77 99aa 99.5 100","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"python-django-26-API验证","slug":"python-django-26-API验证","date":"2018-01-06T12:51:41.000Z","updated":"2018-02-12T12:44:12.444Z","comments":true,"path":"2018/01/06/python-django-26-API验证/","link":"","permalink":"http://www.digmyth.com/2018/01/06/python-django-26-API验证/","excerpt":"","text":"前言 验证原理 代码实现 讲解Django api验证，基于Tornado签名Cookie源码 验证原理客户端 服务端和客户端共同存一个字符串，客户端用这个字符串和时间戳算一个md5值，把这个md5和时间戳组成一个字符串在请求头里发送给服务端。 服务端 服务端收到这个字符串，分别取出md5和时间戳，用这个时间戳与自己存的key&#39;也算一个md5`值，这个md5值与客户端发来的md5值作比较。 当然这里还是不够的，比如黑客拿到md5和时间戳呢？ 我们还需要作进一步策略 策略一：发来的时间戳+5秒小于服务器时间戳，认为是非法请求 策略二：基于字符串和时间戳算的md5不等于客户端发来的md5值，认为是非法请求 策略三：5秒钟内的请求作进一步验证，维护一个5秒钟内的合法请求md5值,再来这个md5值的，认为是非法请求。5秒钟失效需要借住memcache redis，它们都自带过期时间。 策略四：如果基于网络原因，黑客的非法请求比客户端的请求先到达服务器，这样只能数据AES加密了。 代码实现客户端发送请求头 123456import timeimport hashlibdef md5(arg): hs = hashlib.md5() hs.update(arg.encode(&quot;utf-8&quot;)) return hs.hexdigest() 12345ctime=time.time()key=&apos;sdgasgsdgsdffsdf&apos;new_key=&quot;%s|%s&quot; %(key,ctime)md5_str = md5(new_key)auth_md5_str=&quot;%s|%s&quot; %(mdr_str,ctime) 发送请求 1requests.get(url=&quot;http://127.0.0.1:8000/test_api/&quot;,headers = &#123;&apos;auth-api&apos;:auth_md5_str&#125;) 服务端 123456789server_float_time = time.time()auth_header_val = requests.META.get(&apos;HTTP_AUTH_API&apos;)client_md5_str,client_ctime=auth_header_val.rsplit(&apos;|&apos;,maxsplit=1)if (client_float_time + 5) &lt; server_float_time : return HttpResponse(&quot;已过期&quot;)server_md5_str != client_md5_str: return HttpResponse(&quot;非法请求&quot;)if visited_keys.get(client_md5_str): return HttpResponse(&quot;来晚了，你是非法的&quot;) &lt;数据加密待续&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Flask-基础","slug":"web-Flask-基础","date":"2018-01-01T12:51:41.000Z","updated":"2018-04-23T07:00:52.290Z","comments":true,"path":"2018/01/01/web-Flask-基础/","link":"","permalink":"http://www.digmyth.com/2018/01/01/web-Flask-基础/","excerpt":"","text":"前言","categories":[{"name":"WebFlask开发","slug":"WebFlask开发","permalink":"http://www.digmyth.com/categories/WebFlask开发/"}],"tags":[]},{"title":"web-Django-25-DjangoAdmin","slug":"web-django-25-DjangoAdmin","date":"2017-12-28T12:37:00.000Z","updated":"2019-01-15T03:53:24.763Z","comments":true,"path":"2017/12/28/web-django-25-DjangoAdmin/","link":"","permalink":"http://www.digmyth.com/2017/12/28/web-django-25-DjangoAdmin/","excerpt":"","text":"目录 DjangoAdmin工作流程 制作启动文件 单例模式应用 博客参考 一 Django admin工作流程1 注册models_class，生成_registry 中model_class 字典1234admin.py注册models_class如models.UserInfofrom django.contrib import adminfrom app01 import modelsadmin.site.register(models.UserInfo) 2 admin.site.urls admin.site.urls循环_registry={}字典生成相应URL12345生成4个URL分别是如下：app01/userinfo/app01/userinfo/add/app01/userinfo/1/change/app01/userinfo/1/delete/ 其中要深入理解URL include原理： url(r’^xx’, “可以是视图函数，也可以是元组”),1234567partterns = [ url(r&apos;^admin&apos;, admin.site.urls), # admin.site.urls 返回形如（[],None,None）的元组. url(r&apos;^backend&apos;, include(&apos;backend.urls&apos;)), # include 同样返回形如（[],None,None）的元组. # 也可以写成形如 include([],None,None) 格式. ] 二 制作stack启动文件 1 创建一个stack 的app 2 settings.py 注册app- &apos;stack.apps.StackConfig&apos;, 3 在stack apps.py文件定义ready方法 stack/apps.py文件ready()方法123456from django.utils.module_loading import autodiscover_modulesclass StackConfig(AppConfig): name = &apos;stack&apos; def ready(self): autodiscover_modules(&quot;xxx&quot;) 4 启动项目时会先在执行所有app下的xxx.py文件. (当然前提是这些app也是settings.py注册好的) 三 单例模式单例模式有很多种实现方式 其中一种：利用模块多次导入时，除第一次外不会真正执行模块代码。 如果模块中有实例化对象操作，那么多次导入也不会真正实例化多个对象，而是同一个实例 如果在一个程序先运行的文件改变了实例数据或属性，后运行的文件导入后读这个实例就会有数据或属性. 示例： 随便定义一个实例化对象的文件stack/service.v1 123456789class StackSite(): def __init__(self): self._registry = &#123;&#125; def register(self,class_name,config_class): self._registry[class_name] = config_class site = StackSite()## 单例 在我们定义的启动文件app01/xxx.py中写入代码(因为会先执行xxx.py) 1234from stack.service import v1v1.site.register(&quot;k1&quot;,&quot;v1&quot;)v1.site.register(&quot;k2&quot;,&quot;v2&quot;)v1.site.name = &apos;wxq&apos; 项目urls.py中写入 from stack.service import v1 print(v1.site._registry) print(v1.site.name) 总结启动项目时，先执行app01/xxx.py,后执行urls.py文件，程序读到了实例的数据并不是重新实例化新对象，这就是单例模式的运用。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-24-Django中间件","slug":"web-django-24-Django中间件","date":"2017-12-26T12:26:37.000Z","updated":"2018-01-18T03:43:22.000Z","comments":true,"path":"2017/12/26/web-django-24-Django中间件/","link":"","permalink":"http://www.digmyth.com/2017/12/26/web-django-24-Django中间件/","excerpt":"","text":"目录 官方解释 Django默认 定义中间件 示例 总结 Django中间件学习 官方解释1234This document explains all middleware components that come with Django.For information on how to use them and how to write your own middleware, see the middleware usage guide.Middleware is a framework of hooks into Django’s request/response processing.It’s a light, low-level “plugin” system for globally altering Django’s input or output. Django 中间件是一个钩进request/response处理过程的框架，轻量且较为底层的插件系统，全局改变Django输入输出。 Django默认12345678910Django默认中间件MIDDLEWARE = [ &apos;django.middleware.security.SecurityMiddleware&apos;, &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, &apos;django.middleware.common.CommonMiddleware&apos;, &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;, &apos;django.contrib.messages.middleware.MessageMiddleware&apos;, &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,] 定义中间件在Django中就表现为一个类.123456789101112m1.process_exception(self, request, exception): print(&quot;m1.process_exception1&quot;)m1.process_requestm2.process_requestm1.process_viewm2.process_viewviews.pym2.process_exceptionm1.process_exceptionm2.process_responsem1.process_response 中间件流1234process_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_response 示例1... 总结：基于Django中间件我们能实现一些功能，这些处理是在请求到来之前或views视图函数处理过后。 process_request可以有返回值，也可以没有返回值。 process_response必须有返回值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-17-ModelForm","slug":"web-django-17-ModelForm","date":"2017-12-20T12:26:37.000Z","updated":"2018-01-18T03:48:11.260Z","comments":true,"path":"2017/12/20/web-django-17-ModelForm/","link":"","permalink":"http://www.digmyth.com/2017/12/20/web-django-17-ModelForm/","excerpt":"","text":"目录 回顾Form ModelForm特性 ModelForm使用 html前端展示 ModelForm简介1 回顾FormForm作用：第一： 用于Form验证第二： 用于生成 html标签，并且可以保留数据（如编辑） 缺点：多表查询时需要手动查出数据在前端渲染，跨表保存数据同样需要手动update() 2 ModelForm特性解决办法，引用ModelForm 1 它可以循环model class字段在前端生成表单或html标签并保留数据 2 调用save()方法自动跨表保存数据。 3 可以自定义models class以外的fields字段,很灵活，如果自定义的字段名与model class字段名重名， 那么model class字段将被重写 4 ModelForm同样可以做数据验证包括钩子函数 5 ModelForm中的fields字段是可以循环的，循环在前端生成不必写 6 当编辑数据时传入instance=obj 可以循环生成表单并且表单有值。 ModelForm适用场景 Form与ModelForm没有谁好谁不好，只是适用场景不同。 ModelForm依赖modelsclass, modelForm必须和models.py在一起。 3 ModelForm使用12345678910111213141516171819from django.forms import Formfrom django.forms import ModelFormfrom django.forms import fieldsfrom django.forms import widgets as fwidgetsfrom app01 import modelsclass TestForm(ModelForm): class Meta: model = models.Book fields = &quot;__all__&quot; # 可以是[&quot;&quot;,&quot;&quot;,] labels = &#123; &apos;title&apos;:&quot;书名&quot;, &quot;price&quot;:&quot;价格&quot;, &#125; error_messages = &#123; &quot;title&quot;:&#123;&quot;requried&quot;:&quot;书名不能为空&quot;,&#125;, &#125; widgets=&#123; &quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;) &#125; 4 html前端展示1234567&lt;form action=&quot;/addbook/&quot; method=&quot;POST&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;% for field in form %&#125; &lt;p&gt;&#123;&#123; field.label &#125;&#125;:&#123;&#123; field &#125;&#125; &#123;&#123; field.errors.0 &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt; 引入bootstrap时，querySet for循环展示:注意时间格式的转换1234567891011121314&lt;div class=&quot;container&quot; style=&quot;width: 700px;margin-top: 50px&quot;&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt;&lt;/thead&gt; &lt;tbody&gt; &#123;% for row in data_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.title &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.price &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"03-GET/POST/ContentType知识","slug":"web-get_post_contentype知识","date":"2017-12-15T12:51:41.000Z","updated":"2018-02-12T09:50:11.623Z","comments":true,"path":"2017/12/15/web-get_post_contentype知识/","link":"","permalink":"http://www.digmyth.com/2017/12/15/web-get_post_contentype知识/","excerpt":"","text":"前言 ContentType知识 requests发送get/post请求分析 requests发送get/post请求示例 表格总结 一、ContentType知识contentType 定义： 客户端告知服务器如何组装数据来发送，服务器那边就必须以相应编码解开。 contentType一般为 application/x-www–form-urlencode12如form就默认enctype=&quot;application/x-www-form-urlencoded&quot;形如b&apos;user=wxq&amp;pwd=123&apos; 组装数据。 Django帮我们默认以enctype=”application/x-www-form-urlencoded”解开后放在request.GET或 request.POST里方便我们取数据。如果是application/json 格式，双引号字符串 {“user”:”wxq”,”pwd”:123}，需自行解数据。 1form文件传送时必须指明enctype=&quot;multipart/form-data&quot; 如果是application/json,就要用相应格式解开后组装数据。application/json 双引号字符串 {“user”:”wxq”,”pwd”:123} request.body 报文元数据12345application/json data: JSON.stringfy(&#123;d&#125;) # 前端以json 格式发数据s=request.body.decode(&quot;utf8&quot;)d=json.loads(s) # 后端以json格式解数据d[&apos;name&apos;] 当ajax处理数据时，后端数据以json格式传过来的，那么前端需手动JSON.parse()反序列化操作， 我们可以添加参数datatype: “JSON” ，添加后就自动反序列化了。 二、 requests发送get/post请求分析分析知识点 分析如何组装数据发送 分析get/post请求组装数据方式的不同 分析get/post方式不同，requests参数写法上的不同 大家都知道请求头之间用\\r\\n分隔，请求头与请求体用\\r\\n\\r\\n分隔。 GET请求头get请求发送数据封装在请求头，形如http://www.baidu.com/?a=1&amp;b=2 get请求发送数据用params,params中的数据会组装在请求头上12requests.get(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;)data=&quot;http GET /index?a=1&amp;b=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&quot; POST请求头post请求发送数据可以像get一样?a=1&amp;b=2封装在请求头，但决大多数情况封装在请求体，形如1data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时可以data传参，数据在请求体里，封装为name=wxq&amp;age=18,请求头ContentType为application/x-www-form-urlencoded12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,data=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时也可以json传参,数据在请求体里，封装为json.dumps({‘name’:’wxq’,’age’:18})后的字符串。请求头ContentType为application/json12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,json=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&#123;&quot;name&quot;: &quot;wxq&quot;, &quot;age&quot;: 18&#125;&quot; 服务器解析当服务器接收到客户端发来的数据，所有的数据会放到request.FILES或request.body里，再跟据ContentType的不同放到相应变量里,如request.POST里是Content-Type:application/x-www-form-urlencoded; charset=UTF-8,也就是data而非json格式发来的数据。 12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 三、requests发送get/post请求示例data传参可以是字典可以是字符串可以是字节可以是文件对象1 requests.request(method=”post”,data=字典)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}1requests.post(url=&quot;xxx&quot;,data=&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;) 2 requests.request(method=”post”,data=字符串)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}12requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq&amp;pwd=123&quot;) # 或requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq;pwd=123&quot;) 基于HTTP本质，上面2种数据最终转为请求体\\r\\n\\r\\nname=wxq&amp;pwd=123 3 手动构建json字符串发送手动加headers={&#39;Content-Type&#39;: &#39;application/json&#39;}1234requests.post( url=&quot;xxx&quot;, data=json.dumps(&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;), headers=&#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;) json传参requests.request(method=”post”,json=…)1) 将json中对应的数据进行序列化成一个字符串，json.dumps(…)2) 然后发送到服务器端的body中3) 并且自动Content-Type是 {‘Content-Type’: ‘application/json’}1234def param_json(): requests.request(method=&apos;POST&apos;, url=&apos;http://127.0.0.1:8000/test/&apos;, json=&#123;&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;水电费&apos;&#125;) json方式传输数据的一种场景Content type: application/x-www-form-urlencode不支持传键所对应的值为字典的字典.1request.post(url=url,data=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 不支持 传键所对应的值为字典的字典,这种情况只能以json方式传送数据12request.post(url=url,json=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 支持Content type: application/json 四、总结 methond 传参 解析为 浏览器显示标识名 GET params ?page=1&amp;k1=v1 Query String Parameter POST data \\r\\n\\r\\nname=wxq&amp;pwd=123 Form Data POST json \\r\\n\\r\\n{“name”:”wxq”,”age”:18}” Request Payload","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"python-spider-基础知识","slug":"python-spider01-基础知识","date":"2017-12-06T12:51:41.000Z","updated":"2018-02-12T11:57:36.272Z","comments":true,"path":"2017/12/06/python-spider01-基础知识/","link":"","permalink":"http://www.digmyth.com/2017/12/06/python-spider01-基础知识/","excerpt":"","text":"前言 爬虫简介 具备技能 爬虫实现 爬虫示例 简介爬虫：利用python模块伪造浏览器行为，读取网页源码，再经过正则匹配取出HTML文本的一系列处理，数据分析称为爬虫 基本内容：123456789- python实现浏览器行为： requests- beautifulsoup4 对HTML内容进行分析- HTTP相关知识： - cookie - csftToken - 请求头：其中ContenType表明什么格式封装的数据，服务器需要用相应格式解数据 请求： 请求头(cookie)/请求体(发送的内容) 响应： 响应头（浏览器读取头数据）/响应体（我们看到的网页或网页源码）- 数据持久化（数据库存储） 具备技能1234567891011性能相关：批量get URL可想而知性能重要性1 线程池，进程池，2 协程coroutine（微线程）： 协程本身没有用，只做切换，具有切换特性,要想性能很高，刚好遇到IO时切换 3 异步非阻塞（如twisted,gevent,asyncio,tornado内部集成） 其中gevent异步模块由2个东西组成: greenlet协程: greenlet就是利用yield实现的协程 libevent: libevent做异步IO库 七牛云进程线程分享 异步非阻塞123遇到IO请求不等待继续执行其它任务,如果IO请求响应内容回来了,自动回调某个函数.异步： 回调（相关于通知机制）非阻塞： 不等待 后面会学到爬虫框架：scrapy1231 内部是twisted实现异步2 写入URL自动下载网页3 自动将下载的网页解析为对象方便我们处理 后面也会学到分布式爬虫组件redis-scrapy 爬虫实现基本模块：12pip3 install requestspip3 install beautifulsoup4 （将网页字符串解析为对象，用于直接取文本内容） 爬虫实现123451 代码发送get请求： 请求头+请求体2 接收返回值： 响应头+响应体（本质字符串）3 获取响应体后进行解析，方便获取文本内容 import requests from bs4 import BeautifulSoup 注意几点：1231 回车时得到token和cookies,如果有token和cookies的话取出来,一般get请求2 提交用户名密码时带上token和cookies,一般post请求,并且取出登录成功后的cookies3 登录后才能看到的网页(前2次请求的cookies都带上) 示例示例这里就不展开了，可以基于这几个站点简单入门 github或汽车之家 抽届点赞 博客园用户名密码密文发送给服务器的情况，其实是利用js三方模块在浏览器端加密再发送的（python rsa模块加密） 知乎，新浪微博这种有图形验证码的网站，需要第三方平台做图像识别（类似滑动验证码这种验证其实是向后台发送鼠标坐标）","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"web-Django-23-Django序列化","slug":"web-django-23-Django序列化","date":"2017-12-01T12:26:37.000Z","updated":"2018-01-18T03:43:21.996Z","comments":true,"path":"2017/12/01/web-django-23-Django序列化/","link":"","permalink":"http://www.digmyth.com/2017/12/01/web-django-23-Django序列化/","excerpt":"","text":"目录 序列化 Django中的序列化操作序列化操作参考ajax学习Django返回前端数据一般为json格式，那么就要数据进行序列化。方法一：Django内置serializers123from django.core import serializersret = models.BookType.objects.all()data = serializers.serialize(&quot;json&quot;, ret) 方法二：json.dumps123456import json #ret = models.BookType.objects.all().values(&apos;caption&apos;)ret = models.BookType.objects.all().values_list(&apos;caption&apos;)ret=list(ret)result = json.dumps(ret,nsure_ascii=False) 方法三：由于json.dumps时无法处理datetime日期，所以可以通过自定义处理器来做扩展12345678910111213import json from datetime import date from datetime import datetime class JsonCustomEncoder(json.JSONEncoder): def default(self, field): if isinstance(field, datetime): return o.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) elif isinstance(field, date): return o.strftime(&apos;%Y-%m-%d&apos;) else: return json.JSONEncoder.default(self, field) # ds = json.dumps(d, cls=JsonCustomEncoder) 有时在前端渲染也需要date:&#39;Y-m-d&#39;处理一下1&lt;p&gt;出版日期&lt;input type=&quot;date&quot; name=&quot;pubdate&quot; value=&quot;&#123;&#123; edit_book.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&quot;&gt;&lt;/p&gt; 如果用到了Form或ModelForm，同样需要widgets处理下时间格式12widgets=&#123;&quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;)","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-21-图片上传","slug":"web-django-21-图片上传","date":"2017-11-21T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/21/web-django-21-图片上传/","link":"","permalink":"http://www.digmyth.com/2017/11/21/web-django-21-图片上传/","excerpt":"","text":"目录 上传文件版本一 上传文件版本二 上传文件版本三 上传文件版本一定义views.py123456789101112def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) else: obj=request.FILES.get(&quot;fff&quot;) # obj.name 文件名 # obj.chunks 文件块 f = open(obj.name,&apos;wb&apos;) for chunk in obj.chunks(): f.write(chunk) f.close() return render(request,&quot;upload.html&quot;) upload.html12345&lt;form action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;p&gt;&lt;input type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt;&lt;/form&gt; 上传文件版本二版本一中form表单上传文件或图片无法做预览，并无法做失败验证及上传文件大小限制，那么就要用到ajax 方式发送。下面学习下ajax方式上传文件。定义views.py12345678910111213def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) elif request.is_ajax(): file_obj= request.FILES.get(&apos;obj&apos;) print(obj) f = open(file_obj.name, &apos;wb&apos;) for chunk in file_obj.chunks(): f.write(chunk) f.close() return HttpResponse(&quot;ok&quot;) else: pass 12345678910111213141516171819202122232425262728293031&lt;h1&gt;ajax形式上传文件&lt;/h1&gt;&lt;input type=&quot;file&quot; id=&quot;f4&quot;/&gt;&lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;btn&quot;&gt; #input的button默认不会有任何事件，除非绑定事件&#123;% csrf_token %&#125;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function () &#123; $(&quot;#btn&quot;).click(function () &#123; var fm=new FormData(); fm.append(&apos;obj&apos;,$(&quot;#f4&quot;)[0].files[0]); fm.append(&apos;csrfmiddlewaretoken&apos;,$.cookie(&apos;csrftoken&apos;)); //自行组数据$(&quot;input[name=&apos;csrfmiddlewaretoken&apos;]&quot;).val()); // fm.append(&apos;file_obj&apos;,document.getElementById(&quot;f4&quot;).files[0]); //document.getElementById(&quot;f4&quot;) # dom对象 // $(&quot;#f4&quot;) # jquery对象 // $(&quot;#f4&quot;)[0] #jquery对象转dom对象 $.ajax(&#123; url:&apos;/upload/&apos;, type:&apos;POST&apos;, data:fm, processData: false, contentType: false, success:function (data) &#123; console.log(data); &#125; &#125;) &#125;) &#125;)&lt;/script&gt; 上传文件版本三版本二中对各种浏览器兼容不好，可以再次改进. 利用form+iframe特性做的，业内都是这么做的，很重要，兼容性非常好。形式上与ajax很像但不是ajax,称伪ajax,后端不能用request.is_ajax()判断请求方式。不得不先来学习下iframe标签12&lt;iframe id=&quot;ifm&quot; src=&quot;http://www.chouti.com&quot;&gt;&lt;/iframe&gt;$(&quot;#ifm&quot;).attr(&apos;src&apos;, &apos;http://www.qq.com&apos;) # 修改iframe src属性但页面不刷新，返回的数据不在整个页面，而在iframe body里，基于这样的特性我们可以上传文件。 当form表单以iframe形式发送数据到后端，后端返回的数据会在iframe body里form 的target属性值要与iframe的name属性值保持一致。12345&lt;form id=&quot;ff1&quot; action=&quot;/upload/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &lt;p&gt;&lt;input onchange=&quot;changeImg();&quot; type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input id=&quot;sb&quot; type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt; &lt;/form&gt;&lt;iframe id=&quot;ifm&quot; name=&quot;ifr&quot; onload=&quot;sucessBack();&quot; &gt;&lt;/iframe&gt; 那么如何取出iframe body里的值呢？1$(&quot;#ifm&quot;).html(); # iframe会重新生成一个子document,有html/head/body,这种方法无法取出。 1$(&quot;#ifm&quot;).find(&apos;body&apos;).html(); # 有这种想法是好的，这种找只会在当前document里找，但是这样的document嵌套递归查找需要一个额外方法处理.contents()后再查找 1$(&quot;#ifm&quot;).contents().find(&apos;body&apos;).html(); # iframe最终正确的方法 文件上传完整版utils.py12345class BaseResponse(): def __init__(self): self.status=False self.data=None self.error=None views.py123456789101112131415161718192021from django.shortcuts import render,HttpResponse,redirectimport os,jsonfrom utils import BaseResponseret=BaseResponse()def upload(request): if request.method == &quot;GET&quot;: return render(request, &quot;upload.html&quot;) else: try: file_obj=request.FILES.get(&apos;fff&apos;) # file_obj.name # file name # file_obj.chunks() #file block file_path = os.path.join(&apos;static&apos;, file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) ret.status=True ret.data=file_path except Exception as e: ret.error=&quot;上传失败&quot; return HttpResponse(json.dumps(ret.__dict__,ensure_ascii=False)) upload.html123456789101112131415161718192021222324252627282930&lt;form id=&quot;sb&quot; action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;file&quot; name=&quot;fff&quot; onchange=&quot;changeImg();&quot;/&gt; &lt;!-- 元素更新时触发onchange事件 --&gt;&#123;# &lt;input type=&quot;submit&quot;&gt;#&#125;&lt;/form&gt;&lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; onload=&quot;successBack();&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt;&lt;div id=&quot;prevImg&quot;&gt;&lt;/div&gt;&lt;!-- 我们这里不是真正的ajax,是没有success回调函数的,上传成功后会返回数据到前端，文本载入会触发onload事件。 --&gt;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function successBack() &#123; var v=$(&quot;#ifr&quot;).contents().find(&quot;body&quot;).html(); var v=JSON.parse(v); if(v.status)&#123; var tag=document.createElement(&apos;img&apos;); tag.src=&quot;/&quot;+v.data; $(&quot;#prevImg&quot;).append(tag); &#125;else &#123; console.log(v.error) &#125; &#125; function changeImg() &#123; $(&quot;#sb&quot;)[0].submit(); // document.getElementById(&apos;sb&apos;).submit(); &#125;&lt;/script&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-20-ajax","slug":"web-django-20-ajax","date":"2017-11-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/20/web-django-20-ajax/","link":"","permalink":"http://www.digmyth.com/2017/11/20/web-django-20-ajax/","excerpt":"","text":"目录 代码例子 代码例子 ajax前端组装数据 ajax涉及的序列化 ajax错误验证 ajax的3种csrf_token Ajax 学习详情参考Ajax 武佩齐博客 这里只是对Ajax学习做一个记录和总结，内容还有很多没有包括。 代码例子普通请求 —&gt; render渲染全部HTMLAjax – -&gt; render生成己经渲染好的局部HTML, 功能单一。Ajax — &gt; HttpResponse(‘data’) 得到原始数据，ajax前端自行展示，定制化强，一般用于提供接口，为别人提供数据。 render和HttpResponse的关系？render:1 模板+数据进行替换2 HttpResponse(数据) HttpResponse:1 HttpResponse(数据) Ajax请求时，响应内容时可以是render和HttpResponse,不要认为只能用HttpResponse. views.py里不能return redirect(&quot;&quot;)跳转是在前端跳转location.href = “http://www.baidu.com&quot; ajax前端组装数据ajax形式发input数据时在前端取数据并组装数据后给后台123ajax取input数据时，可以用data:&#123;&quot;user&quot;:$(&quot;#user&quot;).val(),&quot;pwd&quot;:$(&quot;#pwd&quot;).val()&#125;获取数据，更简单的数据组装方法是加form表单:&lt;form id=&quot;ff&quot;&gt;&lt;input /&gt;&lt;/form&gt;此时取数据可以用：data: $(&quot;#ff&quot;).serialize(), ajax涉及的序列化Django 中Ajax方式获取ORM数据时，涉及序列化操作的5种方法1234567891011121314151617181920212223242526272829303132333435363738394041424344# # 方式一 我们伪造的数据是可以序列化实现展示的# # 模板渲染后生成字符串# # user_list = models.UserInfo.objects.all()# ## # return render(request,&quot;tpl.html&quot;,&#123;&quot;user_list&quot;:user_list&#125;)# user_list = [# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# ]## import json# data = json.dumps(user_list)# return HttpResponse(data)# # 方式二： 这里是失败的， QuerySet不支持Json序列化，经测试失败# user_list = models.UserInfo.objects.all()# import json# return HttpResponse(json.dumps(user_list))# # 方式三 也是成功的,但不常见## user_list = models.UserInfo.objects.all()# from django.core import serializers# data= serializers.serialize(&quot;json&quot;, user_list)# return HttpResponse(data)# 方式四 推荐用法user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data)# 方式五 user_list = models.UserInfo.objects.values_list(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data) Ajax 错误验证123456789101112## 异常判断 import json ret = &#123;&apos;status&apos;:False,&apos;data&apos;:None,&apos;error&apos;:None&#125; try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret[&apos;status&apos;]= True ret[&apos;data&apos;] = user_list except Exception as e: ret[&apos;error&apos;] = &apos;获取数据失败&apos; data = json.dumps(ret) return HttpResponse(data) 或者以类的形式调用更为简洁123456789101112131415161718app01项目下新建utls.pyclass BaseResponse(): def __init__(self): self.status = False self.data = None self.error = Noneviews.py中导入：from app01.utils import BaseResponseret = BaseResponse()try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret.status= True ret.data = user_listexcept Exception as e: ret.error = &apos;获取数据失败&apos; data = json.dumps(ret.__dict__,ensure_ascii=False) # False表示不要中文为变为unicode编码 return HttpResponse(data) 1234var tag.createElement(&quot;a&quot;)tag.innertHTML=&quot;hello&quot;div.append(tag) # &lt;div&gt; &lt;a&gt;hello&lt;/a&gt;&lt;/div&gt; 加在标签里面div.after(tag) # &lt;div&gt;&lt;/div&gt;&lt;a&gt;hello&lt;/a&gt; 加在标签后面 ajax的3种csrf_token方法一： 自己组装数据csrf_token12&#123;% csrf_token %&#125; 会生成带csrfmiddlewaretoken的input标签data:&#123;&apos;csrfmiddlewaretoken&apos;:$(&apos;input[name=&quot;csrfmiddlewaretoken&quot;]&apos;).val()&#125; 方法二：加 form表单后用$(“#form_id”).serialize()方法自动组装数据 121 添加form HTML 标签 &lt;form id=&quot;form_id&quot;&gt;&lt;input /&gt;&lt;/form&gt;2 用data: $(&quot;#form_id&quot;).serialize(),自动组装数据 方法三：自行在cookies里取csrf_token放在请求头里参考1234561 导入jquery.cookie.js: &lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;2 jquery方式操作cookie取值: csrf_token=$.cookie(&apos;csrftoken&apos;) 3 ajax形式添加到请求头里，注意写法是定死的 $.ajax(&#123; header: &#123;&quot;X-CSRFToken&quot;: $.cookie(&apos;csrftoken&apos;)&#125;， )&#125;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"linux nginx基础","slug":"linux-nginx","date":"2017-11-12T01:41:54.000Z","updated":"2018-10-21T11:30:26.599Z","comments":true,"path":"2017/11/12/linux-nginx/","link":"","permalink":"http://www.digmyth.com/2017/11/12/linux-nginx/","excerpt":"","text":"目录 nginx基本介绍 nginx URI优先级 nginx URI优先级第一优先级精确匹配此路径123location = URI &#123;&#125; 第二优先级不使用正则表达式的模糊匹配123location ^~ URI &#123;&#125; 第三优先级可使用正则表达式的模糊匹配123location ~ URI &#123;&#125; 第四优先级匹配当前路径及其子路径123location URI &#123;&#125; 补充 ~ 区分字符大小写匹配 ~* 不区分字符大小写匹配 ! 表过不匹配 !~* 不区分字符大小写非匹配","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux haproxy基础","slug":"haproxy-基础","date":"2017-11-12T01:41:54.000Z","updated":"2018-04-23T06:57:35.510Z","comments":true,"path":"2017/11/12/haproxy-基础/","link":"","permalink":"http://www.digmyth.com/2017/11/12/haproxy-基础/","excerpt":"","text":"目录 haproxy基本介绍 haproxy基础语法 haproxy应用 haproxy基本介绍haproxy基础语法当有多个缓存key/value服务器时，app缓存到服务器1，那么必须到服务器1才能找到缓存。 取模法：key- hash(16进制数值)–这个数值除以服务器数量的余数就是哪台服务器 当有服务器添加或移走这种缓存就失效了 如何解决，是有办法的，那就是改进上面那种方法，称一致性hash算法：consitent hash 有一个环，用32位二进制从0开始计数，环上分布有离散的2^32 点。key hash 后的值除以2^32时取余数，这个余数一定在0到2^32-1范围内，也就是在这个环上那么数据就是存储在余数的下一台服务器上，服务器是离散分布在这样的环上的。缺点：服务器分布可能存在偏斜，也就是可能所有服务器集中在环三分之一处。当存储数据找下一台服务器，那台服务器存储量太大了。 解决办法：使用虚拟节点离散分布在环上来代替物理节点。hadoop前身开源搜索引擎，任何搜索引擎首先是大数据搜索平台，其次才是高性能分析平台。 流式数据存储处理平台：storm spark大数据处理平台。12345678910111213141516nginx:server &#123;&#125;server &#123; proxy_pass: &#125;upstream &#123;&#125;upstream &#123;&#125; haproxy应用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"kolla Pike on CentOS 7.3","slug":"kolla-Pike-on-CentOS7.3","date":"2017-11-09T00:41:54.000Z","updated":"2017-11-08T07:15:16.901Z","comments":true,"path":"2017/11/09/kolla-Pike-on-CentOS7.3/","link":"","permalink":"http://www.digmyth.com/2017/11/09/kolla-Pike-on-CentOS7.3/","excerpt":"","text":"openstack Pike发布很长一段时间了，一直没有时间整理一份在kolla on CentOS7.3 的文档参考：沙克老师单节点ocata安装 环境准备12yum install epel-release yum install axel vim git curl wget lrzsz ansible gcc python-devel docker-ce yum12add docker-ce yum:yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo docker-ce install12install docker-ce# yum install docker-ce docker-ce configuration12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof 编辑 /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker kolla-ansible install github项目 openstack kolla镜像地址 openstack-ansible是用ansible部署openstack用的 ceph-ansible是用ansible部署ceph用的 kolla-ansible是用ansible部署kolla用的，其中openstack+ceph环境均分散在一个一个的docker容器里 安装pike版本 kolla-ansible，pip install 安装方式存在版本问题或非最新代码，这里直接git下载代码安装。12345678910cd /optgit clone https://github.com/openstack/kolla-ansible.gitcd /opt/kolla-ansiblegit branch -avgit checkout remotes/origin/stable/pikecp -r /opt/kolla-ansible/etc/kolla/ /etc/# 安装相关依赖包cd /opt/kolla-ansiblepip install -r requirements.txt 生成密码12cd /opt/kolla-ansible/toolspython generate_passwords.py 安装镜像仓库123456# docker pull registry下载最新pike 容器镜像：http://tarballs.openstack.org/kolla/images/centos-source-registry-pike.tar.gztar xf centos-source-registry-pike.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry eg:1234mkdir /registrytar -zxf /root/docker-registry.tar.gz -C /registrydocker load &lt; /root/registry.tardocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry check docker hub12345curl http://192.168.200.2:4000/v2/_catalog[root@controller01 ~]# curl 192.168.200.2:4000/v2/99cloud/centos-source-memcached/tags/list&#123;&quot;name&quot;:&quot;99cloud/centos-source-memcached&quot;,&quot;tags&quot;:[&quot;4.0.1.1&quot;]&#125;docker pull 192.168.200.2:4000/99cloud/centos-source-memcached:4.0.1.1 ceph disk set1# for i in vdb vdc vdd; do parted /dev/$i -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1; done in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 edit global.yml12edit /etc/kolla/global.yml此处略过。。。 kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient access dashboard1curl http://openstack_VIP/horizon","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"Mysql MGR 集群","slug":"mysql-MGR","date":"2017-11-08T22:41:54.000Z","updated":"2017-11-08T15:18:04.873Z","comments":true,"path":"2017/11/09/mysql-MGR/","link":"","permalink":"http://www.digmyth.com/2017/11/09/mysql-MGR/","excerpt":"","text":"目录 MGR简介 MGR安装 数据库Galera集群的笔记做过了，今天来讲一讲MySQL Group Replication组复制技术。 一 MGR简介MySQL当前存在的三种复制模式有：异步模式、半同步模式和组复制模式。MySQL Group Replication（简称MGR）官方推出的高可用解决方案， 原生复制技术，基于插件的方式工作。 分为以下两种 single primary mode 单主模式只有一个读写，其余都是只读。 multi primary mode多主模式全部可读写 不管组复制单主还是多主的故障切换都无法让应用无感知，需要自主实现。 包含以下特性： 复制管理操作更为自动化。 通过Paxos协议提供数据库集群节点数据强一致性保证。 多主模式所有节点都可读写操作。 解决网络分区导致的脑裂问题，提升复制数据的可靠性。 官方引言1Quite obviously, regardless the mode Group Replication is deployed, it does not handle client-side fail-over. That must be handled by the application itself, connector or a middleware framework such as a proxy or router. 意思就是说MGR内部没有提供一种机制来实现主节点故障切换对应用的无感知。应用的这种故障无感知需要借助外力实现。 组复制存在以下局限性123456789101112131415161. 所有涉及的数据都必须发生在InnoDB存储引擎的表内。2. 所有的表必须有明确的主键定义。3. 网络地址只支持IPv4。4. 需要低延迟，高带宽的网络。5. 目前集群限制最多允许9个节点。6. 必须启用binlog。7. binlog 格式必须是row格式。8. 必须打开gtid模式。9. 复制相关信息必须使用表存储。10.事务写集合（Transaction write set extraction）必须打开。（这个目前与savepoint冲突，这也是导致mysqldump无法备份GR实例的原因）11. log slave updates必须打开。12. binlog的checksum目前不支持。13. 由于事务写集合的干扰，无法使用savepoint。14. SERIALIZABLE 隔离级别目前不支持。15. 对同一个对象，在集群中不同的实例上，并行地执行DDL（哪怕是相互冲突的DDL）是可行的，但会导致数据一致性等方面的错误，目前阶段不支持在多节点同时执行同一对象的DDL。16. 外键的级联约束操作目前的实现并不完全支持，不推荐使用。 二 MGR安装3.1 软件安装官方单库安装官方集群安装 参考链接 :1234https://dev.mysql.com/doc/refman/5.7/en/replace-third-party-yum.html # 禁用第三方源或安装包https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html # 根据您的系统安装相应版本https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html #CentOS7.3安装mysql 5.7https://dev.mysql.com/doc/refman/5.7/en/group-replication.html # mysql Group Replication安装 123# rpm -ivh /opt/mysql57-community-release-el7-11.noarch.rpm# yum install mysql-community-server# systemctl start mysqld 3.2 内置策略说明mysql5.7启动服务后会生成一个随机密码用于临时登录，内置策略强制让你进入数据库后马上更改登录密码，并且有一套密码复杂度管理的策略。我们可以在数据库my.cnf中过滤掉复杂度策略或临时修改全局变量来忽略复杂度。123456789101112131415161718192021mysql&gt; select @@validate_password_length;+----------------------------+| @@validate_password_length |+----------------------------+| 8 |+----------------------------+1 row in set (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec) 或者/etc/my.cnf添加5行策略来忽略掉。12345validate_password_length = 0validate_password_mixed_case_count = 0validate_password_number_count = 0validate_password_policy =0validate_password_special_char_count =0 当然也可以类似以下命令临时全局修改1set global validate_password_special_char_count =0; # 全部设置为0 查询临时密码1# grep &apos;temporary password&apos; /var/log/mysqld.log 马上修改临时密码用以后续操作。123mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;Query OK, 0 rows affected (0.00 sec)#否则收到提示：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 3.3 为复制授权1234567mysql&gt; SET SQL_LOG_BIN=0;mysql&gt; CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; SET SQL_LOG_BIN=1;mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3.4 启动组复制123456789101112mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; Query OK, 0 rows affected (0.02 sec)mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+...| validate_password | ACTIVE | VALIDATE PASSWORD | validate_password.so | GPL || group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+46 rows in set (0.01 sec) 启动复制通道123SET GLOBAL group_replication_bootstrap_group=ON;START GROUP_REPLICATION;SET GLOBAL group_replication_bootstrap_group=OFF; 查看集群成员1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+1 row in set (0.00 sec) 创建测试同步数据1234mysql&gt; CREATE DATABASE test;mysql&gt; USE test;mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);mysql&gt; INSERT INTO t1 VALUES (1, &apos;Luis&apos;); 检查同步数据和Binlog1234567mysql&gt; select * from t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+1 row in set (0.01 sec) mysql&gt; show binlog events;12345678+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 1 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 1 | 150 | || binlog.000001 | 150 | Stop | 1 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec 3.5 加入集群其余节点加入集群1 先定义主配文件与主机hosts2 建立通道授权 123456SET SQL_LOG_BIN=0;CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos; ;GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;SET SQL_LOG_BIN=1;CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3 添加插件1mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; 4 启动复制通道1mysql&gt; START GROUP_REPLICATION; 如果有失败，尝试12mysql&gt; set global validate_password_policy=0; mysql&gt; set global group_replication_allow_local_disjoint_gtids_join=ON; 5 查看集群成员123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | 2863475f-c490-11e7-b93e-fa163ebc6e6c | 172.18.23.8 | 3306 | ONLINE || group_replication_applier | 9c1ded3e-c495-11e7-8c62-fa163ea91040 | 172.18.23.33 | 3306 | ONLINE || group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+3 rows in set (0.01 sec) 6 查看集群中的主节点1234567mysql&gt; SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= &apos;group_replication_primary_member&apos;;+--------------------------------------+| VARIABLE_VALUE |+--------------------------------------+| f2d4456f-c48b-11e7-94f2-fa163e894684 |+--------------------------------------+1 row in set (0.01 sec) 7 binlog123456789mysql&gt; show binlog events;+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 3 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 3 | 150 | || binlog.000001 | 150 | Stop | 3 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec) 8 my.cnf优化项1234max_connections = 4096max_prepared_stmt_count=100000query_cache_type = 1query_cache_size = 10M 9 命令123456789mysql&gt; show full processlist;+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| Id | User | Host | db | Command | Time | State | Info |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| 3 | root | localhost | test | Query | 0 | starting | show full processlist || 11 | system user | | NULL | Connect | 490 | executing | NULL || 14 | system user | | NULL | Connect | 490 | Slave has read all relay log; waiting for more updates | NULL |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+3 rows in set (0.00 sec)","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-22-验证码","slug":"web-django-22-验证码","date":"2017-11-08T12:26:37.000Z","updated":"2018-04-23T07:00:07.330Z","comments":true,"path":"2017/11/08/web-django-22-验证码/","link":"","permalink":"http://www.digmyth.com/2017/11/08/web-django-22-验证码/","excerpt":"","text":"目录 生成验证码 认证验证码 插件认证 生成验证码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108def get_valid_img(request): # 第一步 # f=open(&quot;default.jpg&quot;,&apos;rb&apos;) # data=f.read() # 第二步 # import PIL # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(123, 222, 255)) # f=open(&apos;code.png&apos;,&apos;wb&apos;) # img.save(f,&apos;png&apos;) # f = open(&apos;code.png&apos;, &apos;rb&apos;) # data=f.read() # f.close() # 第三步 # from io import BytesIO # f=BytesIO() # # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(255, 255, 66)) # img.save(f,&quot;png&quot;) # data=f.getvalue() # # 第四步： # # from io import BytesIO # # f = BytesIO() # from PIL import Image, ImageDraw, ImageFont # # # 画字 # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(0, 255, 0)) # draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) # font=ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;,28) # draw.text([15,0],&apos;y&apos;,&quot;red&quot;,font=font) # # img.save(f,&quot;png&quot;) # data=f.getvalue() # 第五步： import random from io import BytesIO from PIL import Image, ImageDraw, ImageFont f = BytesIO() img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))) draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) char_list = [] # # 画字 for i in range(5): char = random.choice([chr(random.randint(65, 90)), str(random.randint(1, 9)), chr(random.randint(97, 122)), ]) font = ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;, 28) draw.text([i * 24, 0], char, (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),font=font) char_list.append(char) # # # ========================= width = 120 height = 30 def rndColor(): &quot;&quot;&quot; 生成随机颜色 :return: &quot;&quot;&quot; return (random.randint(0, 255), random.randint(10, 255), random.randint(64, 255)) # 写干扰点 for i in range(40): draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # # 写干扰圆圈 # for i in range(40): # draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # x = random.randint(0, width) # y = random.randint(0, height) # draw.arc((x, y, x + 4, y + 4), 0, 90, fill=rndColor()) # # # 画干扰线 # for i in range(5): # x1 = random.randint(0, width) # y1 = random.randint(0, height) # x2 = random.randint(0, width) # y2 = random.randint(0, height) # # draw.line((x1, y1, x2, y2), fill=rndColor()) img.save(f, &quot;png&quot;) data = f.getvalue() s = &apos;&apos;.join(char_list) request.session[&quot;valid_code&quot;] = s &apos;&apos;&apos; Dajngo: set_cookie(&quot;sessionId&quot;,&quot;asdsa234asd3sad&quot;) in session表 sessionkey sessiondata asdsa234asd3sad &#123;&quot;valid_code&quot;:s&#125; &apos;&apos;&apos; return HttpResponse(data) 认证验证码注意： 验证码的验证过程也是基于session/cookie,session/cookie知识必备12345678910111213141516171819202122232425262728from PIL import Imagefrom blog.utils import BaseResponsefrom django.contrib import authfrom blog import modelsimport jsonfrom blog.forms import RegFormdef login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.is_ajax(): username=request.POST.get(&quot;username&quot;) password=request.POST.get(&quot;password&quot;) valid=request.POST.get(&quot;valid&quot;) # 输入的验证码 keep_valid = request.session.get(&quot;valid_code&quot;) loginResponse = BaseResponse() if valid.upper() == keep_valid.upper(): user=auth.authenticate(username=username,password=password) # auth模块做认证 if user: loginResponse.user = username auth.login(request,user) # auth模块加session else: loginResponse.error = &quot;用户名或密码错误&quot; else: loginResponse.error=&quot;验证码错误&quot; return HttpResponse(json.dumps(loginResponse.__dict__)) 插件认证这个插件用于拦截机器识别，确定人为登录，使认证系统更加安全等补充… 参考","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"Mysql Galera集群搭建","slug":"mysql-Galera","date":"2017-11-08T01:41:54.000Z","updated":"2017-11-07T13:25:31.456Z","comments":true,"path":"2017/11/08/mysql-Galera/","link":"","permalink":"http://www.digmyth.com/2017/11/08/mysql-Galera/","excerpt":"","text":"目录 wsrep简介 Galera集群搭建 wsrep简介wsrep是writeset replication的简称，是一种API，在底层调用各库实现数据库同步写.通过wsrep协议在全局实现复制,任何一节点都可读写. 基于wsrep协议提供的一种底层复制机制，实现了Galera cluster数据库集群。因此Galera cluster需要特定研发的一个数据库版本,只有支持了特别的研发版本，才能借住于wsrep协议实现复制机制. 多个节点之上有了信息层，上层应用完成高可用，研发时调用信息层所提供的api去开发，并基于这个api去完成集群事务决策，不然就要自行加入中间层称资源管理器crm，如pacemaker galera cluster不是专为数据库提供的，只是一个工作在较为底层能够为你的服务提供数据复制功能的底层组件. mysql只有在研发时调用了galera cluster api写的mysql才能利用galera cluster完成复制,它的复制不再是让其它节点通过读取主节点二进制日志文件在本地重放，而是你指明了复制哪个数据库文件，由galera cluster自己在底层完成同步，mysql本身不感知. 12percona-cluster 版本支持galera clusterMariaDB-cluster 版本支持galera cluster 复制的问题和解决方案:(1) 数据损坏或丢失1234语句或行记录二进制日志，从而在从服务器上重放，重放机制也可能主从不一致的情况硬件故障、软件bug也会有数据损坏或丢失Master: MHA + semi replication(至少有一个从节点接收到了提交的binlog事件才返回成功，也是半同步复制)如果主节点数据损坏或丢失，就必须手动在从节点通过gtid来判断出己经提交的所有应用或事务，然后合并出一个较新的从节点提升为主节点Slave: 重新复制数据即可 (2) 运维部署注意事项：12345关键业务监控重要数据要备份和冗余不能混合使用存储引警MyISM: 不支持事务InnoDB: 支持事务 (3) 设置了不唯一的server ID12不唯一，整个复制集群数据产生错乱，每一个服务节点都不会在本地重放由同一个server ID 所产生的事件会导致重新复制数据 (4) 复制延迟12345需要额外监控工具的辅助自写一些脚本监控从节点有一个落后于主节点的时间判定，这个时间不为0时，尝试重启从节点服务对于从服务器延迟，主节点的事务是可以并发的，往二进制写入是单线程的，有先有后，从服务器重放也是单线程的，从服务器延迟落后也是必然的mysql5.6/mariadb 10以后引入了多线程复制机制，三节点集群可设置wsrep_slave_threads = 4 数据库服务衡量指标12qps : query per second 查询量tps: transaction per second 事务量 Galera集群搭建最新文档请参考Galera 集群官方链接 一 准备工作1 关闭防火墙2 关闭selinux3 同步主机时间4 设置hosts文件 二 MariaDB源在MariaDB 10.1以前需要卸载mariadb包，单独准备MariaDB-Galera-server源来安装MariaDB-Galera-server包例：123456789101112yum list all | grep -i galerayum remove mariadb*yum -y install MariaDB-Galera-server.rpm galera-25.3rpm -ql MariaDB-Galera-serverrpm -qa | grep MariaDB MariaDB-common-10.0.32-1.el7.centos.x86_64 MariaDB-shared-10.0.32-1.el7.centos.x86_64 MariaDB-Galera-server-10.0.32-1.el7.centos.x86_64 MariaDB-client-10.0.32-1.el7.centos.x86_64vim /etc/my.cnf.d/server.cnf[galera]... 而在MariaDB 10.1以后MariaDB-server己经自带Galera集群了，不必单独安装MariaDB-Galera-server包，只需准备如下源 编辑/etc/yum.repos.d/Mariadb.repo1234567# MariaDB 10.2 CentOS repository list - created 2017-11-07 12:07 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 三 软件安装1yum install MariaDB-server MariaDB-client 四 修改配置编辑/etc/my.cnf.d/server.cnf123456789101112[galera]#Mandatory settingswsrep_provider=/usr/lib64/galera/libgalera_smm.so # 可查rpm -ql galera | grep -i smm.sowsrep_cluster_address = &apos;gcomm://172.16.100.67,172.16.100.68,172.16.100.69&apos;wsrep_cluster_name = &apos;cluster&apos;wsrep_node_name = &apos;node1&apos;wsrep_node_address= &apos;172.16.100.67&apos;binlog_format = rowdefault_storage_engine = InnoDBinnodb_autoinc_lock_mode = 2bind-address = 0.0.0.0wsrep_on=ON 五 启动服务任意一个节点启动123/etc/init.d/mysql start --wsrep-new-cluster或service mysql bootstrap或systemctl start mariadb --wsrep-new-cluster 然后在其它节点正常启动即可12systemctl start mariadbMariaDB [(none)]&gt; show status like &apos;%wsrep%&apos;; 简单验证1234567create database mydb;use mydbcreate table tb1 (id int, name char(10));desc tb1;create table tb2 (id int unsigend auto_increment not null primary key, name char(30));insert into tb2(name) values (&apos;hi&apos;, &apos;hello&apos;)select * from tb2; 有关认证及集群检测自行研究1234wsrep_sst_method = xtrabackup-v2wsrep_sst_auth = root:NtEXLlZGF9KeXYUE79e7H8N5C9Vdy0EkHlBfFPtrwsrep_slave_threads = 4wsrep_notify_cmd = /usr/local/bin/wsrep-notify.sh # 注意定义这个脚本","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"ceph-01-运维那事","slug":"ceph-01-运维那事","date":"2017-11-05T01:41:54.000Z","updated":"2017-11-22T08:06:37.975Z","comments":true,"path":"2017/11/05/ceph-01-运维那事/","link":"","permalink":"http://www.digmyth.com/2017/11/05/ceph-01-运维那事/","excerpt":"","text":"待整理ceph运维笔记 12ceph osd set nooutceph osd unset noout 1rbd create wxq --size 1 12345678(ceph-mon)[root@pike-vm /]# rbd info rbd/wxqrbd image &apos;wxq&apos;: size 1024 kB in 1 objects order 22 (4096 kB objects) block_name_prefix: rbd_data.498102ae8944a format: 2 features: layering, exclusive-lock, object-map, fast-diff, deep-flatten flags: 12(ceph-mon)[root@pike-vm /]# ceph osd map rbd rbd_data.498102ae8944aosdmap e183 pool &apos;rbd&apos; (0) object &apos;rbd_data.498102ae8944a&apos; -&gt; pg 0.455bea7d (0.3d) -&gt; up ([1], p1) acting ([1], p1) 123456[root@lab8106 ]#ceph-objectstore-tool \\ --data-path /var/lib/ceph/osd/ceph-1/ \\ --journal-path /var/lib/ceph/osd/ceph-1/journal \\ --pgid 0.3d \\ rbd_data.498102ae8944a remove 12(ceph-mon)[root@pike-vm /]# ceph pg map 8.7d osdmap e183 pg 8.7d (8.7d) -&gt; up [2] acting [2] 12345(ceph-mon)[root@pike-vm /]# ceph pg 8.7d query&#123; &quot;state&quot;: &quot;active+clean&quot;, &quot;snap_trimq&quot;: &quot;[]&quot;,... 1234ceph pg dumpceph osd dumpceph pg map 8.7dceph pg 8.7d list_missing 12ceph pg 4.438 mark_unfound_lost revertceph pg 4.438 mark_unfound_lost delete 12ceph pg repair 0.44ceph osd pool set rbd min_size 1","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"proxy-01-代理","slug":"proxy-01-代理","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:45:24.259Z","comments":true,"path":"2017/10/31/proxy-01-代理/","link":"","permalink":"http://www.digmyth.com/2017/10/31/proxy-01-代理/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"webssh-shellinabox","slug":"linux-shellinabox","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:43:37.447Z","comments":true,"path":"2017/10/31/linux-shellinabox/","link":"","permalink":"http://www.digmyth.com/2017/10/31/linux-shellinabox/","excerpt":"","text":"利用http/https协议网页连接linux服务器，Webssh中最简单最方便的一种,还有GateOne/原生webssh yum安装1yum install shellinabox -y 查看安装文件，主要是主题相关，可以根据其位置自定义主题123456789101112131415161718rpm -ql shellinabox/etc/sysconfig/shellinaboxd/usr/lib/systemd/system/shellinaboxd.service/usr/sbin/shellinaboxd/usr/share/doc/shellinabox-2.20/usr/share/doc/shellinabox-2.20/AUTHORS/usr/share/doc/shellinabox-2.20/NEWS/usr/share/doc/shellinabox-2.20/README/usr/share/doc/shellinabox-2.20/README.Fedora/usr/share/doc/shellinabox-2.20/print-styles.css/usr/share/doc/shellinabox-2.20/shell_in_a_box.js/usr/share/doc/shellinabox-2.20/styles.css/usr/share/man/man1/shellinaboxd.1.gz/usr/share/shellinabox/usr/share/shellinabox/color.css/usr/share/shellinabox/monochrome.css/usr/share/shellinabox/white-on-black.css/var/lib/shellinabox 编辑配置文件/etc/sysconfig/shellinaboxd1OPTS=&quot;--css=/usr/share/shellinabox/white-on-black.css --disable-ssl-menu -s /:SSH:192.168.1.244&quot; 启动服务12systemctl enable shellinaboxd.servicesystemctl start shellinaboxd.service 网页登录服务器 https://192.168.1.244:4200","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-19-auth认证系统","slug":"web-django-19-auth认证系统","date":"2017-10-09T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/10/09/web-django-19-auth认证系统/","link":"","permalink":"http://www.digmyth.com/2017/10/09/web-django-19-auth认证系统/","excerpt":"","text":"目录 auth模块 Django内置补充 auth模块可以基于Cookie/Session自己写登录、注销的用户认证，这里我们学习Django自带的auth模块实现用户的登录、注销认证系统。 模块引入123from django.contrib import auth # 模块引入#from django.contrib.auth.models import User,AbstractUser#from app01 import models 下面2条命令会生成Django默认表，其中有张表auth_user用于存认证用户信息。12python manage.py makemigrationspython manage.py migrate 创建一个超级用户，auth_user可查看1python manage.py createsuperuser 自己写登录系统123456789101112131415161718192021def login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.method==&quot;POST&quot;: username=request.POST.get(&quot;username&quot;) pwd=request.POST.get(&quot;pwd&quot;) user_obj=auth.authenticate(username=username,password=pwd) # 验证 if user_obj: auth.login(request,user_obj) # 写入session return redirect(&quot;/home/&quot;) else: return redirect(&quot;/login/&quot;)def log_out(request): auth.logout(request) #相当于request.session.flush() 去除session return redirect(&quot;/login/&quot;)def home(request): if not request.user_obj.is_authenticated(): # 是否认证过有没写入session return redirect(&quot;/login/&quot;) return render(request,&quot;home.html&quot;) 注意：利用Django自带的表创建用户，不能对Django自带的表直接操作，那怎么创建呢，Django提供一个接口，通过auth模块操作User表.12from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;） 当Django自带User表字段不够用时，可以自己建表继承User表字段，方法:123from django.contrib.auth.models import AbstractUserclass UserInfo(AbstractUser): detail = modoles.CharField(max_length=32) 自建表记得settins.py配置AUTH_USER_MODEL123456789STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS =[ os.path.join(BASE_DIR,&quot;blog&quot;,&quot;static&quot;),]# MEDIA_ROOT=os.path.join(BASE_DIR,&apos;blog&apos;,&apos;media&apos;,&apos;upload&apos;)# MEDIA_URL = &apos;/media/&apos;AUTH_USER_MODEL= &quot;blog.UserInfo&quot; Django 内置补充1234567891011121314151617181920212223242526272829303132333435363738django已经为我们设计好了一个用于此种情况的装饰器：login_requierd()from django.contrib.auth.decorators import login_required @login_requireddef my_view(request): ...若用户没有登录，则会跳转到django默认的 登录URL &apos;/accounts/login/ &apos; (这个值可以在settings文件中通过LOGIN_URL进行修改)。并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。User对象User 对象属性：username， password（必填项）password用哈希算法保存到数据库is_staff ： 用户是否拥有网站的管理权限.is_active ： 是否允许用户登录, 设置为``False``，可以不用删除用户来禁止 用户登录2.1 、is_authenticated()表明是否认证通过并有session,当使用auth模块时，前端`&#123;&#123; request.user &#125;&#125;`可以直接使用不需要后端传入request.user变量。request.user.username 为AnonymousUser或用户名2.2 、创建用户使用 create_user 辅助函数创建用户:from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;）2.3 、check_password(passwd)用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 True2.4 、修改密码使用 set_password() 来修改密码user = User.objects.get(username=&apos;&apos;)user.set_password(password=&apos;&apos;)user.save 简单示例注册：1234567891011121314151617181920def sign_up(request): state = None if request.method == &apos;POST&apos;: password = request.POST.get(&apos;password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) email=request.POST.get(&apos;email&apos;, &apos;&apos;) username = request.POST.get(&apos;username&apos;, &apos;&apos;) if User.objects.filter(username=username): state = &apos;user_exist&apos; else: new_user = User.objects.create_user(username=username, password=password,email=email) new_user.save() return redirect(&apos;/book/&apos;) content = &#123; &apos;state&apos;: state, &apos;user&apos;: None, &#125; return render(request, &apos;sign_up.html&apos;, content) 修改密码：123456789101112131415161718192021222324@login_requireddef set_password(request): user = request.user state = None if request.method == &apos;POST&apos;: old_password = request.POST.get(&apos;old_password&apos;, &apos;&apos;) new_password = request.POST.get(&apos;new_password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) if user.check_password(old_password): if not new_password: state = &apos;empty&apos; elif new_password != repeat_password: state = &apos;repeat_error&apos; else: user.set_password(new_password) user.save() return redirect(&quot;/log_in/&quot;) else: state = &apos;password_error&apos; content = &#123; &apos;user&apos;: user, &apos;state&apos;: state, &#125; return render(request, &apos;set_password.html&apos;, content) 补充原文","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-19-Cookies-Session","slug":"web-django-19-Cookies-Session","date":"2017-10-08T12:26:37.000Z","updated":"2019-01-20T03:34:50.249Z","comments":true,"path":"2017/10/08/web-django-19-Cookies-Session/","link":"","permalink":"http://www.digmyth.com/2017/10/08/web-django-19-Cookies-Session/","excerpt":"","text":"目录 Cookies Session 代码学习 相关配置 总结 Cookies用户第一次请求时，服务器会在浏览器上写入cookies键值对，下一次请求会把这个键值对带上，服务器会验证这个cookies键值对，基于这样的特性cookies可以做登录验证和投票。如果没有cookies时，会先让你做用户登录。 Session所有的用户信息都写入客户端浏览器存在安全问题也不现实，我们把这些信息都写到服务器端，对应一个随机字符串，再把这个随机字符串写入cookies，格式为{“sessionid”:”随机字符串”},问题就得到了解决。 cookies就是能在客户端浏览器写键值对的一种机制，类似’user’:’abc’, 如果写的是’sessionid’:’随机字符串’，那么session就诞生了，服务端再拿到这样的随机字符串，记录信息格式如’随机字符串’:’你想存的敏感信息’ 代码学习Cookies 工作特性：在浏览器F12 network-&gt;cookies中首次请求时可以看到 Response Cookies有写入的键值对，下次再访问时Request Cookies有这个键值对，证明此时浏览器会带着这个键值对发给服务器。可以简单用下面代码测试123456def ck(request): print(request.COOKIES) # cookies会封装在request.COOKIES内 obj = render(request, &quot;ck.html&quot;, &#123;&quot;msg&quot;: &quot;&quot;&#125;) obj.set_cookie(&apos;user&apos;, &apos;wxq&apos;) # 向浏览器写入cookies键值对 return obj 下面用代码描述Cookies、Session各自工作：login.html123456&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/form&gt; views.py视图12345678910111213141516171819202122232425from app01 import modelsdef login(request): if request.method == &quot;GET&quot;: return render(request, &apos;login.html&apos;,&#123;&quot;msg&quot;: &quot;&quot;&#125;) else: u = request.POST.get(&quot;username&quot;) p = request.POST.get(&quot;pwd&quot;) v=models.UserInfo.objects.filter(username=u, pwd=p).exists() if v: # obj.set_cookie(&quot;user&quot;, u,max_age=5) request.session[&quot;user&quot;] = u request.session[&quot;pwd&quot;] = p return redirect(&quot;/home/&quot;) else: return render(request,&quot;login.html&quot;,&#123;&quot;msg&quot;: &quot;用户名或密码错误&quot;&#125;)def home(request): # v = request.COOKIES.get(&quot;user&quot;) v = request.session.get(&quot;user&quot;) if v: return HttpResponse(&quot;登录成功&quot;) else: return redirect(&quot;/login/&quot;) 利用session注销1234567891011def logout(request): &apos;&apos;&apos; obj=HttpResponse(&quot;xxx&quot;) obj.set_cookie(&quot;user&quot;,&quot;name&quot;) # 设置cookie request.COOKIES.get(&quot;user&quot;) # 获取cookie obj.delete_cookie(&apos;user&apos;) # 清除cookie &apos;&apos;&apos; #request.session[&apos;user&apos;] = &apos;wxq&apos; # 设置session #request.session.get(&apos;user&apos;) # 获取session request.session.clear() # 清除session return redirect(&quot;/login/&quot;) Cookies、Session相关配置配置参考 settings.py配置12345678910SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos; # 引擎（默认） SESSION_COOKIE_NAME ＝ &quot;sessionid&quot; # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）SESSION_COOKIE_PATH ＝ &quot;/&quot; # Session的cookie保存的路径（默认）SESSION_COOKIE_DOMAIN = None # Session的cookie保存的域名（默认）SESSION_COOKIE_SECURE = False # 是否Https传输cookie（默认）SESSION_COOKIE_HTTPONLY = True # 是否Session的cookie只支持http传输（默认）SESSION_COOKIE_AGE = 1209600 # Session的cookie失效日期（2周）（默认）SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使得Session过期（默认）SESSION_SAVE_EVERY_REQUEST = True # 是否每次请求都保存Session，默认修改之后才保存（默认） 总结1 cookies是记录在浏览器上的键值对，本身与登录没有任何关系。 cookies信息保存在request.COOKIES.2 session是记录在服务器上的键值对，key是一个随机字符串, session信息保存在request.session字典里的.3 只有Django框架有session 相关的封装,Flask/tornado等其它web框架是没有的，需要自己写Cookies、session.","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(三)","slug":"web-django-orm(三)","date":"2017-09-15T12:51:41.000Z","updated":"2018-01-18T03:45:03.508Z","comments":true,"path":"2017/09/15/web-django-orm(三)/","link":"","permalink":"http://www.digmyth.com/2017/09/15/web-django-orm(三)/","excerpt":"","text":"目录 Orm Shell FQ查询 聚合查询 参考资料官方昊练习一练习二pythoncode 一 Orm Shell pycharm中models我们己经学习过了，这里记录下在linux操作系统中启动Orm Shell需要做的几件事儿. 1 模块导入12345pip3 install pymysqlpycharm中可以在应用目录下__init__.py,也可以在项目目录__init__.py下import pymysqlpymysql.install_as_MySQLdb()但是linux系统里只能在项目目录下 2 models.py的区别1234在建立一对一或一对多关系表时需要位置参数on_delete=models.CASCADE，多对多不需要author=models.OneToOneField(&quot;Author&quot;,on_delete=models.CASCADE)publisher=models.ForeignKey(to=&quot;Publish&quot;,on_delete=models.CASCADE)authors=models.ManyToManyField(&quot;Author&quot;) 3 数据库12345678910DATABASES = &#123;&apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125; &#125; 4 明确指明INSTALLED_APPS123456789 INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;app01.apps.App01Config&apos;, ] 5 启动Orm Shell可以命令行操作orm语句学习了123python3 manage.py shell&gt;&gt;&gt; from app01 import models&gt;&gt;&gt; 6 联表sql示例原始sql语句的一个精典联表操作示例123456789101112131415161718 MariaDB [wxq_db]&gt; select sum(app01_book.price) as bookSumPrice,app01_publish.name -&gt;from app01_book_authors -&gt;left join app01_book -&gt;on app01_book.nid=book_id -&gt;left join app01_author -&gt;on author_id=app01_author.id -&gt;left join app01_publish -&gt;on publisher_id=app01_publish.id -&gt;group by app01_publish.name -&gt;having bookSumPrice &gt; 100 -&gt;order by bookSumPrice desc;+--------------+-----------------+| bookSumPrice | name |+--------------+-----------------+| 176.40 | 工业出版社 || 124.00 | 人民出版社 |+--------------+-----------------+2 rows in set (0.00 sec) 二 FQ查询123456789101112131415161718def FQQuery(request): from django.db.models import F,Q # F查询 # F查询用于自修改或字段比较或一个字段值赋值给另一字段的场景 # ret1=models.Book.objects.filter(comment_num__gt=50) # ret2=models.Book.objects.filter(comment_num__gt=F(&quot;read_num&quot;)*2) # print(ret2) #models.Book.objects.all().update(price=F(&quot;price&quot;)+10) ################################## Q查询 ret3=models.Book.objects.filter(comment_num__gt=50,read_num__gt=50) # 并且 ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100)) # 或者 print(ret3) return HttpResponse(&quot;OK&quot;) F查询总结1234F查询适用场景:场景1： 两个字段间值的比较F(&apos;price&apos;)场景2： 自运算，如F(&apos;price&apos;) + 10 Q查询总结12345# 注意事项：不同顺序的区别，不同放置的区别# 关键字语句放在Q查询的后面，并且只要有(逗号)就是(且)的意思#ret3=models.Book.objects.filter(price__lt=100,(Q(comment_num__gt=100)|Q(read_num__gt=100))) # 有效语句#ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100),price__lt=100) # 有效语句#ret3=models.Book.objects.filter(price__lt=100,Q(comment_num__gt=100)|Q(read_num__gt=100)) # 无效语句 三 聚合查询1234567891011121314151617181920212223242526272829303132def juheQuery(reqeuest): from django.db.models import F,Q,Avg,Count,Sum,Min,Max # 单纯聚合函数 # 计算所有图书的平均价格 # ret=models.Book.objects.all().aggregate(priceSum=Sum(&quot;price&quot;)) # print(ret) # &#123;&apos;priceSum&apos;: Decimal(&apos;2158.00&apos;)&#125; # 统计每一本书的作者个数 # ret2=models.Book.objects.all().annotate(authors_num=Count(&quot;authors&quot;)) # 返回QuerySet # print(ret2) # [book_obj1,book_obj2,book_obj3,book_obj4,....] # # for obj in ret2: # print(obj.nid,obj.title,obj.authors_num) # 查询每一个出版社出版过的所有书籍的总价格 #方式1： # ret3=models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)) # # for obj in ret3: # print(obj.id,obj.name,obj.priceSum) # ret4 = models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)).values(&quot;name&quot;,&quot;priceSum&quot;) # print(ret4) # 方式2： # ret5=models.Book.objects.all().values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&quot;publisher__name&quot;,&quot;priceSum&quot;) # print(ret5) return HttpResponse(&quot;OK&quot;) 实践示例12345In [178]: models.Publish.objects.annotate(priceSum=Sum(&quot;book__price&quot;)).values(&apos;name&apos;,&apos;priceSum&apos;)Out[178]: &lt;QuerySet [&#123;&apos;priceSum&apos;: Decimal(&apos;12.00&apos;), &apos;name&apos;: &apos;人民出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;工业出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;清华版社&apos;&#125;]&gt;In [179]: models.Book.objects.values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&apos;publisher__name&apos;,&apos;priceSum&apos;)Out[179]: &lt;QuerySet [&#123;&apos;publisher__name&apos;: &apos;人民出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;12.00&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;清华版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;工业出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;]&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"ceph-luminous安装","slug":"ceph-luminous安装","date":"2017-09-05T01:41:54.000Z","updated":"2017-11-13T05:12:03.615Z","comments":true,"path":"2017/09/05/ceph-luminous安装/","link":"","permalink":"http://www.digmyth.com/2017/09/05/ceph-luminous安装/","excerpt":"","text":"这里只简单列下luminous12.X 安装，默认存储引警Bluestore及监控界面 1 /etc/hosts解析略2 ntpservers时间同步略3 系统配置123456sed -i &apos;s/SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/configsetenforce 0systemctl stop firewalld systemctl disable firewalldsystemctl stop NetworkManagersystemctl disable NetworkManager 添加yum源123456789[root@cluster-sql ~]# cat ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 4 新建集群123456# mkdir /mnt/cluster# cd /mnt/cluster # yum -y install ceph-deploy# ceph-deploy install --no-adjust-repos node01 node02 node03# ceph-deploy new node01 node02 node03 5 生成原始文件12[root@node01 cluster]# ls /mnt/clusterceph.conf ceph-deploy-ceph.log ceph.mon.keyring 6 根据需要更新原始文件添加需的ceph.conf配置12345678910111213[root@node01 cluster]# cat ceph.conf [global]fsid = d8fa6509-0196-41bc-838e-6226c927e680mon_initial_members = node01, node02, node03mon_host = 192.168.1.10,192.168.1.11,192.168.1.12auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephxmon_allow_pool_delete=true[mgr]mgr modules = dashboard 7 初始化同时推送配置文件1# ceph-deploy mon create-initial 9 推送密钥文件1[root@node01 cluster]# ceph-deploy admin node01 node02 node03 10 查看集群状态12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: 11 添加激活osd磁盘12345[root@node01 cluster]# ceph-deploy osd create --bluestore node01:/dev/sdb node02:/dev/sdb node03:/dev/sdb --zap-disk[root@node01 cluster]# lsceph.bootstrap-mds.keyring ceph.bootstrap-osd.keyring ceph.client.admin.keyring ceph-deploy-ceph.logceph.bootstrap-mgr.keyring ceph.bootstrap-rgw.keyring ceph.conf ceph.mon.keyring 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[root@node01 cluster]# systemctl status ceph-osd@2 # 查看单个osd进程[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN no active mgr clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: ####[root@node01 cluster]# ceph quorum_status --format json-pretty[root@node01 cluster]# ceph osd treeID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 0.14607 root default -3 0.04869 host node01 0 hdd 0.04869 osd.0 up 1.00000 1.00000 -5 0.04869 host node02 1 hdd 0.04869 osd.1 up 1.00000 1.00000 -7 0.04869 host node03 2 hdd 0.04869 osd.2 up 1.00000 1.00000 [root@node01 cluster]# df -hTFilesystem Type Size Used Avail Use% Mounted on/dev/mapper/vg-root xfs 16G 1.7G 14G 11% /devtmpfs devtmpfs 482M 0 482M 0% /devtmpfs tmpfs 493M 0 493M 0% /dev/shmtmpfs tmpfs 493M 6.9M 486M 2% /runtmpfs tmpfs 493M 0 493M 0% /sys/fs/cgroup/dev/sda1 xfs 497M 159M 338M 32% /boot/dev/mapper/vg-data xfs 3.9G 33M 3.9G 1% /datatmpfs tmpfs 99M 0 99M 0% /run/user/0/dev/sdb1 xfs 97M 5.4M 92M 6% /var/lib/ceph/osd/ceph-0[root@node01 cluster]# cat /var/lib/ceph/osd/ceph-0/type bluestore[root@node01 cluster]# parted /dev/sdb printModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 53.7GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name Flags 1 1049kB 106MB 105MB xfs ceph data 2 106MB 53.7GB 53.6GB ceph block 12 配置ceph-mgr1[root@node01 cluster]# ceph-deploy mgr create node01 node02 node03 可以看到己被激活12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: node01(active), standbys: node02, node03 osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 3164 MB used, 146 GB / 149 GB avail pgs: 123456789101112131415[root@node01 cluster]# ceph config-key put mgr/dashboard/server_addr 192.168.1.10set mgr/dashboard/server_addr[root@node01 cluster]# ceph config-key put mgr/dashboard/server_port 7000set mgr/dashboard/server_port[root@node01 cluster]# ceph mgr module enable dashboard[root@node01 cluster]# ceph mgr module ls[ &quot;dashboard&quot;, &quot;restful&quot;, &quot;status&quot;][root@node01 cluster]# netstat -tnlp | grep 7000tcp 0 0 192.168.1.10:7000 0.0.0.0:* LISTEN 34774/ceph-mgr 13 ceph-fs部署123456789101112# ceph-deploy mds create node01 node02 node03# ceph osd pool create cephfs_data &lt;pg_num&gt;# ceph osd pool create cephfs_metadata &lt;pg_num&gt;# ceph fs new cephfs cephfs_metadata cephfs_data(ceph-mds)[root@pike-vm /]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ](ceph-mds)[root@pike-vm /]# ceph fs get cephfsFilesystem &apos;cephfs&apos; (1)fs_name cephfs... 14 cephfs文件系统挂载确保客户端存在/etc/ceph/ceph.client.admin.keyring /etc/ceph/ceph.conf 方法一：12345[root@admin:]# yum install ceph-commonroot@admin:~# ceph-authtool -l /etc/ceph/ceph.client.admin.keyring[client.admin]key = AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg==mount -t ceph 172.16.170.135:6789:/ /mnt/cephdir/ -o name=admin,secret=AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg== 方法二：123456[root@wxq ceph]# yum install ceph-fuse[root@wxq ceph]# ceph-fuse -m 172.18.23.17:6789 /mnt/cephdir/ceph-fuse[25849]: starting ceph clientceph-fuse[25849]: starting fuse[root@wxq ceph]# df -hT | grep fuseceph-fuse fuse.ceph-fuse 135G 116M 135G 1% /mnt/cephdir 总结几点1 ceph quorum_status –format json-pretty 可查看选举详情2 ceph osd pool application enable volumes rbd 标记一个池的应用(cephfs/rbd/rgw),不标记可以使用但集群状态将为warning3 保护机制的存在默认删除池是不允许的12345[root@ceph cluster]# ceph --show-config | grep deletemon_allow_pool_delete = falsemon_fake_pool_delete = falseosd_pool_default_flag_nodelete = falserbd_mirror_delete_retry_interval = 30.000000 需要编辑ceph.conf12[global]mon_allow_pool_delete=true 界面视图","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"kolla on redhat 7.2","slug":"kolla-on-redhat7.2","date":"2017-08-08T01:41:54.000Z","updated":"2017-09-10T16:06:09.587Z","comments":true,"path":"2017/08/08/kolla-on-redhat7.2/","link":"","permalink":"http://www.digmyth.com/2017/08/08/kolla-on-redhat7.2/","excerpt":"","text":"在一次项目中客户要求在redhat 7.2系统安装部署kolla ocata版本，在这种特定要求下还是实践一把的，在此把详细文档做个记录。 1. install wget最小化安装，系统很干净1rpm -ivh ftp://195.220.108.108/linux/centos/7.3.1611/os/x86_64/Packages/wget-1.14-13.el7.x86_64.rpm 2. remove yum of redhat 首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的12rpm -aq|grep yum|xargs rpm -e --nodeps rpm -aq|grep python-iniparse|xargs rpm -e --nodeps 3. install new yum123456wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-3.4.3-132.el7.centos.0.1.noarch.rpmwget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm rpm ivh *.rpm 4. yum sourece configure123456789101112131415161718192021222324252627edit /etc/yum.repos.d/Centos72.repo[base]name=CentOS-$releasever - Basebaseurl=http://vault.centos.org/7.2.1511/os/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updatesbaseurl=http://vault.centos.org/7.2.1511/updates/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[extras]name=CentOS-$releasever - Extrasbaseurl=http://vault.centos.org/7.2.1511/extras//$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[centosplus]name=CentOS-$releasever - Plusbaseurl=http://vault.centos.org/7.2.1511/centosplus//$basearch/gpgcheck=1enabled=0 5. update yum123yum clean allyum updateyum install epel-release axel vim git curl wget net-tools git gcc lrzsz python-devel vsftpd createrepo 6. optimization system123close selinuxclose NetworkManagerclose firewalld 7. add docker yum12345678tee /etc/yum.repos.d/docker.repo &lt;&lt; &apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 8. install docker1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 如果安装很慢，可以挂载ocata_20170420.iso光盘进入目录Packages/d 下面有相应软件包，执行下面命令1yum localinstall docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm docker-engine-1.12.6-1.el7.centos.x86_64.rpm 再执行完成安装1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 9. 配置docker12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof edit /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker:1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker 10. install pip1234yum install python-pippip install -U pip#easy_install -U pip # 或者easy_install工具安装pip install docker-py 11. install kolla-ansible1234# yum install gcc libffi-devel python-devel openssl-devel# pip install kolla-ansible#cp -rf /usr/share/kolla-ansible/etc_examples/kolla/ /etc/# kolla-genpwd 12. install docker registry123456789mount /dev/sr0 /mntdocker load &lt; registry.tarmkdir /opt/registrytar -zxf docker-registry.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry# curl http://172.16.100.100:4000/v2/_catalog# curl http://172.16.100.100:4000/v2/kolla/centos-source-nova-api/tags/list&#123;&quot;name&quot;:&quot;kolla/centos-source-nova-api&quot;,&quot;tags&quot;:[&quot;4.0.0.3&quot;]&#125; 13. ceph disk set123parted /dev/sdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdd -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1 14. in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 15. edit global.yml12edit /etc/kolla/global.yml此处略过。。。 16. kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy 17. cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient 18. access dashboard1curl http://172.16.100.100/horizon 如果在openstack平台虚机中搭建kolla情况下，让其能通过浮动地址访问内部地址的dashboard1iptables -t nat -I PREROUTING -d 172.18.128.244 -p tcp --dport 80 -j DNAT --to 172.16.100.100 1成功访问：http://172.18.128.244 《成功》。。。","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-ganesha-manila","slug":"cephfs-manila","date":"2017-08-05T01:41:54.000Z","updated":"2017-11-16T03:31:22.380Z","comments":true,"path":"2017/08/05/cephfs-manila/","link":"","permalink":"http://www.digmyth.com/2017/08/05/cephfs-manila/","excerpt":"","text":"openstack manila项目最近很活跃，ceph刚好发布luminous版,具说cephfs性能得到很大提升，那么manila 后端存储cephfs找到了着力点，得到在大力发展。这里对manila cephfs实验做下记录。官网链接参考 驱动简介manila cephfs驱动分为两种：一种： cephfs native share相当于租户虚机直接连接cephfs集群，存在安全问题，生产环境中很难推行。 1 ceph-common包安装在manila-share中2 ceph-common/ceph-fuse 软件安装在租户虚机Guest里3 ceph集群与manila-share网络打通4 ceph集群与租户虚机网络打通 二种： cephfs nfs share官网说明1234567891 Pike or later versions of manila.2 Kraken or later versions of Ceph.3 2.5 or later versions of NFS-Ganesha.4 A Ceph cluster with a filesystem configured5 ceph-common package installed in the servers running the manila-share service.6 NFS client installed in the guest.7 Network connectivity between your Ceph cluster’s public network and the servers running the manila-share service.8 Network connectivity between your Ceph cluster’s public network and NFS-Ganesha server.9 Network connectivity between your NFS-Ganesha server and the manila guest. 在cephfs nfs share驱动，借住nfs-Ganesha解决了网络安全性问题，避免ceph public网直接暴露。直观的理解就是Ganesha为协议转换层，FSAL_CEPH把guest vm的NFS协议调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. 安装openstack+ceph跟据官网所说准备一套openstack pike + ceph luminous 环境，安装过程略。。。。 ceph luminous 源12345678[ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 安装nfs-ganesha 需要nfs-ganesha 版本为2.5以上，只能编译安装了,具体[请参考(http://www.digmyth.com/2017/06/05/cephfs-Ganesha/)1234567891011yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -ycd /optgit clone --recursive git://github.com/nfs-ganesha/nfs-ganesha.gitmkdir /opt/build &amp;&amp; cd /opt/buildcmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 配置manila-share必要客户端安装 1234yum instal ceph ceph-fuse ceph-common libcephfs1-devel librgw2-develscp ceph_mon:/etc/ceph/* /etc/ceph #^# 复制相关配置文件``` ceph授权 如下命令会生成manila.keyring文件，一并复制到 manila-share的/etc/ceph目录下123456789101112read -d &apos;&apos; MON_CAPS &lt;&lt; EOFallow r,allow command &quot;auth del&quot;,allow command &quot;auth caps&quot;,allow command &quot;auth get&quot;,allow command &quot;auth get-or-create&quot;EOFceph auth get-or-create client.manila -o manila.keyring \\mds &apos;allow *&apos; \\osd &apos;allow rw&apos; \\mon &quot;$MON_CAPS&quot; 编辑manila-share的/etc/ceph/ceph.conf 添加如下配置1234567...[client.manila]client mount uid = 0client mount gid = 0log file = /var/logs/ceph-client.manila.logadmin socket = /run/ceph/ceph-mon.172.18.23.17.asokkeyring = /etc/ceph/manila.keyring 允许快照支持1ceph mds set allow_new_snaps true --yes-i-really-mean-it 编辑manila-share的/etc/manila/manila.conf 添加如下配置12345678910111213141516[DEFAULT]...enabled_share_backends = generic, cephfsnfs1default_share_type = default_share_typeenabled_share_protocols = NFS,CIFS,CEPHFS[cephfsnfs1]driver_handles_share_servers = Falseshare_backend_name = CEPHFSNFS1share_driver = manila.share.drivers.cephfs.driver.CephFSDrivercephfs_protocol_helper_type = NFScephfs_conf_path = /etc/ceph/ceph.confcephfs_auth_id = manilacephfs_cluster_name = cephcephfs_enable_snapshots = Falsecephfs_ganesha_server_is_remote= Falsecephfs_ganesha_server_ip = 172.18.23.17 # 指明nfs-ganesha服务器位置 验证服务验证12345678910(manila-share)[root@pike-vm /]# manila service-list+----+------------------+--------------------+------+---------+-------+----------------------------+| Id | Binary | Host | Zone | Status | State | Updated_at |+----+------------------+--------------------+------+---------+-------+----------------------------+| 1 | manila-data | pike-vm | nova | enabled | up | 2017-11-15T10:14:37.000000 || 2 | manila-scheduler | pike-vm | nova | enabled | up | 2017-11-15T10:14:38.000000 || 3 | manila-share | pike-vm@generic | nova | enabled | up | 2017-11-15T10:14:40.000000 || 4 | manila-share | pike-vm@cephfsnfs1 | nova | enabled | up | 2017-11-15T10:14:40.000000 |+----+------------------+--------------------+------+---------+-------+----------------------------+ 创建manila实例123manila type-create cephfsnfstype falsemanila type-key cephfsnfstype set vendor_name=Ceph storage_protocol=NFSmanila create --share-type cephfsnfstype --name cephnfsshare1 nfs 1 查看共享路径123456(manila-share)[root@pike-vm /]# manila share-export-location-list cephnfsshare1+--------------------------------------+---------------------------------------------------------------------+-----------+| ID | Path | Preferred |+--------------------------------------+---------------------------------------------------------------------+-----------+| 18cf503a-9357-40e2-925a-53333031a3e6 | 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 | False |+--------------------------------------+---------------------------------------------------------------------+-----------+ 权限管理 1manila access-allow cephnfsshare1 ip 172.24.4.225 guest vm 挂载1mount -t nfs 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 /mnt/nfs/","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-16-Form验证","slug":"web-django-16-Form","date":"2017-07-20T12:26:37.000Z","updated":"2018-01-18T03:41:15.272Z","comments":true,"path":"2017/07/20/web-django-16-Form/","link":"","permalink":"http://www.digmyth.com/2017/07/20/web-django-16-Form/","excerpt":"","text":"目录 基本功能 基本使用 常用字段 常用插件 总结 这篇博客记录Django Form功能的学习，链接请参考Django Form武佩齐权威博客 基本功能 Form验证 生成html标签（保留上次提交的内容） 详细：12345678class TestForm(forms.Form): username = fields.CharField( # 静态字段 required=True, min_length=6, max_length=8, error_messages=&#123;&quot;required&quot;:&quot;用户名不能为空&quot;, &quot;min_length&quot;:&quot;最少6位&quot;&#125;， widget = widgets.TextInput(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # 插件 ) 基本使用模块导入-&gt;类定义-&gt;定义字段-&gt; 定义插件-&gt; 实例化-&gt; 传入前端-&gt;前端渲染12from django import formsfrom django.forms import fields,widgets views.py定义Form类，写出来常用插件用法1234567891011121314151617class TestForm(forms.Form): n1 = fields.CharField( widget = widgets.TextInput() ) n2 = fields.CharField( widget = widgets.PasswordInput() ) n3 = fields.CharField( widget=widgets.Textarea() ) n4 = fields.CharField( widget=widgets.Select(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]) ) 单选多选总结：1 把上面CharField改为ChoiceField就好了，并choices=[]提到前面来2 单选CharField就可以，多选一定记得用ChoicField,并且choices=[]提前 123456789# n5 = fields.CharField( # # 这里是有问题的，CharField只能是字符串，&quot;n5&quot;:[1,3]默认值是一个列表，后端没法接收数据。# widget=widgets.SelectMultiple(choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)])# )n5 = fields.ChoiceField( choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget=widgets.SelectMultiple()) 12345678910111213141516n6 = fields.IntegerField( widget=widgets.RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]))n7 = fields.CharField( # 这里只会生成CheckboxInput标签 &lt;input type=&quot;checkbox&quot; name=&quot;n7&quot; required=&quot;&quot; id=&quot;id_n7&quot;&gt; widget=widgets.CheckboxInput())n8 = fields.ChoiceField( # 真正生成checkbox组写法 choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget = widgets.CheckboxSelectMultiple())n9 = fields.FileField( widget=widgets.FileInput()) 实例化Form类时传入默认值用于前端展示，主要学习文件上传的方法123456789101112131415161718192021222324252627def test(request): if request.method == &quot;GET&quot;: obj = TestForm( initial=&#123;&quot;n1&quot;:&quot;请输入&quot;,&quot;n2&quot;:&quot;xxx&quot;,&quot;n3&quot;:&quot;文本输入&quot;,&quot;n4&quot;:1,&quot;n5&quot;:[1,3], &quot;n6&quot;:2,&quot;n7&quot;:&quot;&quot;,&quot;n8&quot;:[2,3]&#125; ) return render(request, &quot;test.html&quot;,&#123;&quot;obj&quot;:obj&#125;) if request.method == &quot;POST&quot;: # 文件提交保存在request.FILES # obj = TestForm(data=request.POST,files=request.FILES) # if obj.is_valid(): # # obj.cleaned_data[&apos;n9&apos;] 这是上传的文件对象 # #obj.cleaned_data[&apos;n9&apos;].name 这是上传文件名 # files_obj = obj.cleaned_data[&apos;n9&apos;] # f = open(files_obj.name, &apos;wb&apos;) # for chunck in files_obj.chunks(): # f.write(chunck) # f.close() # else: # pass files_obj = request.FILES.get(&quot;n9&quot;) f = open(files_obj.name, &apos;wb&apos;) for chunck in files_obj.chunks(): f.write(chunck) f.close() return redirect(&apos;/test/&apos;) 提交文件需要enctype=&quot;multipart/form-data&quot;测试时忽略其它值用novalidatetest.html12345678910111213&lt;form action=&quot;/test/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;&#123; obj.n1 &#125;&#125; &#123;&#123; obj.n2 &#125;&#125; &#123;&#123; obj.n3 &#125;&#125; &#123;&#123; obj.n4 &#125;&#125; &#123;&#123; obj.n5 &#125;&#125; &#123;&#123; obj.n6 &#125;&#125; &#123;&#123; obj.n7 &#125;&#125; &#123;&#123; obj.n8 &#125;&#125; &#123;&#123; obj.n9 &#125;&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/form&gt; 常用字段123456CharField 字符串 EmailField 字符串（邮箱格式）IntegerField 字符串（整形格式）GenericIPAddressField 字符串（Ip格式）RegexField 字符串（正则自定义）FileField 文件对象 常用插件123456789101112TextInputPasswordInputTextareaFileInput()Select(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;，choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])SelectMultiple(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)]RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])CheckboxInput()CheckboxSelectMultiple() Form问题在前端使用选择标签渲染时，多表foreigh key跨表查询数据源无法实时更新。比如choices的选项可以从数据库中获取，但是由于是静态字段获取的值无法实时更新，那么需要自定义构造方法从而达到此目的。 方法有很多，推荐123456789101112131415161718from django.forms import Formfrom django.forms import widgetsfrom django.forms import fieldsfrom django.core.validators import RegexValidator class MyForm(Form): user = fields.ChoiceField( # choices=((1, &apos;上海&apos;), (2, &apos;北京&apos;),), initial=2, widget=widgets.Select ) def __init__(self, *args, **kwargs): super(MyForm,self).__init__(*args, **kwargs) # self.fields[&apos;user&apos;].widget.choices = ((1, &apos;上海&apos;), (2, &apos;北京&apos;),) # 或 self.fields[&apos;user&apos;].widget.choices = models.Classes.objects.all().value_list(&apos;id&apos;,&apos;caption&apos;) 总结Django Form功能一是验证，功能二是用于生成html标签并且能保留上次提交的内容。注意Form验证读取数据时的数据源实时更新问题，一般我们自定义Form类的构造方法实现。 还有很多要学习的。。。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"基于CentOS 7的PXE装机","slug":"基于CentOS7的PXE装机","date":"2017-07-01T01:41:54.000Z","updated":"2021-01-27T08:35:19.030Z","comments":true,"path":"2017/07/01/基于CentOS7的PXE装机/","link":"","permalink":"http://www.digmyth.com/2017/07/01/基于CentOS7的PXE装机/","excerpt":"","text":"网上各种贴子各种飞总说不到重点，本人表示不喜欢。 基于Centos7PXE装机基本概念 pxe装机依赖几个服务： dhcp/tftp/fileserver dhcp: 为装机分配地址及指明tftp server服务器是谁，下载什么文件 tftp: 提供网络引导文件pxelinux.0及内核文件vmlinuz、initrd.img (具体文件： boot.msg initrd.img pxelinux.0 pxelinux.cfg splash.png vesamenu.c32 vmlinuz) fileserver: 提供安装树输出，一般指yum repository (yum 仓库或yum源) syslinux: 网络引导文件pxelinux.0由syslinux软件包提供 dhcp服务1234yum -y install dhcprpm -ql dhcp/etc/dhcp/dhcpd.conf # 主配置文件/var/lib/dhcpd/dhcpd.leases # 租约文件 12345678910111213141516[root@master ~]# cat /etc/dhcp/dhcpd.conf | grep -v ^# | grep -v ^$option domain-name &quot;digmyth.com&quot;;option domain-name-servers 114.114.114.114;default-lease-time 600;max-lease-time 7200;log-facility local7;subnet 172.16.10.0 netmask 255.255.255.0 &#123; range 172.16.10.20 172.16.10.30; option domain-name-servers 172.16.10.1; option domain-name &quot;digmyth.com&quot;; option routers 172.16.10.254; default-lease-time 600; max-lease-time 7200;&#125;filename &quot;pxelinux.0&quot;; # 定义网络引导文件名next-server 172.16.10.1; # 定义tftp server地址 启动服务123# systemctl start dhcpd[root@master ~]# netstat -unlp | grep 67udp 0 0 0.0.0.0:67 0.0.0.0:* 995/dhcpd syslinux提供引导文件1234准备网络引导文件pxelinux.0 相当于bootloader# yum -y install syslinux[root@master tftpboot]# ll /usr/share/syslinux/pxelinux.0 -rw-r--r--. 1 root root 26764 Nov 6 2016 /usr/share/syslinux/pxelinux.0 tftp server12345# yum -y install tftp tftp-server[root@master ~]# rpm -ql tftp-server/etc/xinetd.d/tftp # 启动文件/usr/sbin/in.tftpd/var/lib/tftpboot # 服务根目录 1234567891011121314# cat /etc/xinetd.d/tftpservice tftp&#123; socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /var/lib/tftpboot disable = no #改为no per_source = 11 cps = 100 2 flags = IPv4&#125; 启动tftp服务1234# cp /usr/share/syslinux/pxelinux.0 /var/lit/tftpboot# systemctl start tftp# tftp localhost&gt; get pxelinux.0 # 测试成功 准备内核及其它相关文件 此时pxe己经能够获得地址并下载pxelinux.0进行网络引导，接下来是下载内核文件vmlinuz、initrd.img继续完成装机。 这里我拿CentOS7.2为例：CentOS-7-x86_64-DVD-1511.iso 12345[root@master ~]# mount -o loop CentOS-7-x86_64-DVD-1511.iso /mntmount: /dev/loop0 is write-protected, mounting read-only[root@master pxeboot]# cd /mnt/images/pxeboot/[root@master pxeboot]# cp vmlinuz /var/lib/tftpboot/[root@master pxeboot]# cp initrd.img /var/lib/tftpboot/ 12345678910111213mkdir /var/lib/tftpboot/pxelinux.cfgcp /mnt/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg /default [root@master pxelinux.cfg]# cat default default vesamenu.c32#default linux # 这里是一个标签，对找后面相应的labeltimeout 600menu title CentOS 7 wxq # 此处定义titlelabel linux menu label ^Install CentOS 7 # 此处定义系统安装时显示版本 kernel vmlinuz append initrd=initrd.img method=http://172.16.10.1/pub/ ks=http://172.16.10.1/pxe/CentOS72.ks# 注意： 如果此处只定义method,那么装机过程将全手动。 此外还有一些额外文件12345[root@master ~]# ls /mnt/isolinux/boot.cat grub.conf isolinux.bin memtest TRANS.TBL vesamenu.c32boot.msg initrd.img isolinux.cfg splash.png upgrade.img vmlinuz[root@master ~]# ll /var/lib/tftpboot/boot.msg initrd.img pxelinux.0 splash.png vesamenu.c32 vmlinuz 定义安装树12345# yum -y install httpd# mkdir /var/www/html/pxe# mkdir /var/www/html/pub# mount --bind /mnt /var/www/html/pub/ # systemctl start httpd 定义ks文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/pxe/CentOS72.ks[root@master pxe]# cat CentOS72.ks#version=DEVEL# System authorization informationinstall# Keyboard layoutskeyboard --vckeymap=us --xlayouts=&apos;us&apos;auth --enableshadow --passalgo=sha512# Use CDROM installation media# Run the Setup Agent on first boot#firstboot --enable# System languagelang en_US.UTF-8url --url=http://172.16.10.1/pub/# Use graphical installgraphical#textselinux --disabledskipxreboot# Network information#network --bootproto=static --device=ens33 --gateway=172.16.10.254 --ip=172.16.10.30 --nameserver=114.114.114.114 --netmask=255.255.255.0 --onboot=on --ipv6=auto --activatenetwork --bootproto=dhcp --device=ens33 --onboot=yes --ipv6=auto --activatenetwork --hostname=digmyth# Root password=123456rootpw --iscrypted $6$6ErC1johQ5LVAYwQ$cGGxb6Q6./SpvXCZs.K39d9LpV/IeFnspUT6mHmsVsARzToRCSsZ4fLxcOh0tYWpt38Yh6JoMzmSEkEtCtMlS/# System servicesservices --disabled=&quot;chronyd&quot;# System timezonetimezone Asia/Shanghai --isUtc --nontp# System bootloader configurationclearpart --all --initlabelbootloader --append=&quot; crashkernel=auto&quot; --location=mbr --boot-drive=sda# Partition clearing information#clearpart --drives=sda --initlabel#clearpart --none --initlabel# Disk partitioning information#ignoredisk --only-use=sda#part pv.735 --fstype=&quot;lvmpv&quot; --ondisk=sda --size=19979#volgroup vg --pesize=4096 pv.735#logvol /boot --fstype=&quot;xfs&quot; --size=500 --name=boot --vgname=vg#logvol / --fstype=&quot;xfs&quot; --size=16000 --name=root --vgname=vg#logvol /data --fstype=&quot;xfs&quot; --size=3000 --name=data --vgname=vg#logvol swap --fstype=&quot;swap&quot; --grow --size=1%packages@^minimal@corekexec-toolsvimnet-toolssysstat%end%posttouch /root/wxq.txt%end%addon com_redhat_kdump --enable --reserve-mb=&apos;auto&apos;%end 上面的装机将进入图形界面手动分区安装 到此完结，可以结合cobbler实现多pxe环境并存。 cobbler 一些概念： distro发行版： 其实就是pxe所说的相应内核文件 profile: 提供pxeboot引导文件、KS文件、安装树（用现有iso镜像mirror/import方式） 是不是很完美 。。。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux java install","slug":"linux-java-install","date":"2017-06-21T03:42:54.000Z","updated":"2021-01-29T10:01:54.393Z","comments":true,"path":"2017/06/21/linux-java-install/","link":"","permalink":"http://www.digmyth.com/2017/06/21/linux-java-install/","excerpt":"","text":"download jdk1.812[root@nodeadm ]# mkdir /usr/local/java[root@nodeadm ]# tar xf jdk-8u181-linux-x64.tar.gz -C /usr/local/java uncompress1234567891011121314151617[root@nodeadm java]# pwd/usr/local/java[root@nodeadm java]# ll jdk1.8.0_181/total 25976drwxr-xr-x 2 root root 4096 Sep 21 08:54 bin-r--r--r-- 1 root root 3244 Sep 21 08:54 COPYRIGHTdrwxr-xr-x 3 root root 132 Sep 21 08:54 include-rw-r--r-- 1 root root 5207314 Sep 21 08:54 javafx-src.zipdrwxr-xr-x 5 root root 185 Sep 21 08:54 jredrwxr-xr-x 5 root root 245 Sep 21 08:54 lib-r--r--r-- 1 root root 40 Sep 21 08:54 LICENSEdrwxr-xr-x 4 root root 47 Sep 21 08:54 man-r--r--r-- 1 root root 159 Sep 21 08:54 README.html-rw-r--r-- 1 root root 424 Sep 21 08:54 release-rw-r--r-- 1 root root 21099920 Sep 21 08:54 src.zip-rw-r--r-- 1 root root 106782 Sep 21 08:54 THIRDPARTYLICENSEREADME-JAVAFX.txt-r--r--r-- 1 root root 154222 Sep 21 08:54 THIRDPARTYLICENSEREADME.txt set java_env123456[root@nodeadm java]# tail -n 5 /etc/profileexport JAVA_HOME=/usr/local/java/jdk1.8.0_181export JRE_HOME=/usr/local/java/jdk1.8.0_181/jreexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 仅作记录","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-11-模板渲染","slug":"web-django-11-模板渲染","date":"2017-06-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/06/20/web-django-11-模板渲染/","link":"","permalink":"http://www.digmyth.com/2017/06/20/web-django-11-模板渲染/","excerpt":"","text":"目录 基本方法 过滤器 标签 Django对template中html的渲染有着一套语法, 基本方法1234567891011return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 过滤器filter内置一些方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 1 add ： 给变量加上相应的值 # # 2 addslashes : 给变量中的引号前加上斜线 # # 3 capfirst : 首字母大写 # # 4 cut ： 从字符串中移除指定的字符 # # 5 date ： 格式化日期字符串 # # 6 default ： 如果值是False,就替换成设置的默认值，否则就是用本来的值 # # 7 default_if_none: 如果值是None，就替换成设置的默认值，否则就使用本来的值#value1=&quot;aBcDe&quot;&#123;&#123; value1|upper &#125;&#125;&lt;br&gt;#value2=5&#123;&#123; value2|add:3 &#125;&#125;&lt;br&gt;#value3=&apos;he llo wo r ld&apos;&#123;&#123; value3|cut:&apos; &apos; &#125;&#125;&lt;br&gt;#import datetime#value4=datetime.datetime.now()&#123;&#123; value4|date:&apos;Y-m-d&apos; &#125;&#125;&lt;br&gt;#value5=[]&#123;&#123; value5|default:&apos;空的&apos; &#125;&#125;&lt;br&gt;#value6=&apos;&lt;a href=&quot;#&quot;&gt;跳转&lt;/a&gt;&apos;&#123;&#123; value6 &#125;&#125;&#123;% autoescape off %&#125; &#123;&#123; value6 &#125;&#125;&#123;% endautoescape %&#125;&#123;&#123; value6|safe &#125;&#125;&lt;br&gt;&#123;&#123; value6|striptags &#125;&#125;#value7=&apos;1234&apos;&#123;&#123; value7|filesizeformat &#125;&#125;&lt;br&gt;&#123;&#123; value7|first &#125;&#125;&lt;br&gt;&#123;&#123; value7|length &#125;&#125;&lt;br&gt;&#123;&#123; value7|slice:&quot;:-1&quot; &#125;&#125;&lt;br&gt;#value8=&apos;http://www.baidu.com/?a=1&amp;b=2&apos;&#123;&#123; value8|urlencode &#125;&#125;&lt;br&gt; value9=&apos;hello I am pythoner&apos; 标签Django 提供的函数: simple_tag 可以有多个参数 filter 只能有2个参数，并且可以做条件语句的条件 自定义过滤器、自定义标签 形如for/if123&#123;% for item in todo_list %&#125; &lt;p&gt;&#123;&#123; forloop.counter &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 自定义标签当内置函数不满足需求时，可自定义filter/simple_tag 1 在Django app中创建目录名心须为templatetags的目录 2 在templatetags下随意定义.py 文件 如my_tag.py12345678910111213141516#!/usr/bin/env python3__author__ = &quot;wxq&quot;from django import templatefrom django.utils.safestring import mark_saferegister = template.Library()# register变量名是固定的，不可以改变@register.filter # 自定义过滤器def multip(x,y): return x*y@register.simple_tag # 自定义标签def multi_tag(x,y,z): return x*y*z 3 使用自定义simple_tag和filter的html文件中导入之前创建的 my_tag.py, 注意格式百分号.1&#123;% load &quot;my_tag&quot; %&#125; 4 使用定义的simple_tag和filter123456# html首行导入&#123;% load my_tag %&#125;&lt;body&gt; &lt;p&gt;&#123;&#123; 10 |add:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; n | multip:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;% multi_tag 10 320 30 %&#125;&lt;/p&gt;&lt;/body&gt; 模板继承123456&#123;% block content %&#125;...&#123;% endblock %&#125;使用模板标签： &#123;% block %&#125; 。 所有的 &#123;% block %&#125; 标签告诉模板引擎，子模板可以重载这些部分。每个&#123;% block %&#125;标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。 总结：1 后端是字典如[“key”]取值，模板里都用.key2 后端是元组或列表如[0]取值，模板里都用.03 后端是函数或类方法用跨号()调用，模板里不加跨号，切记","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-02-前端html","slug":"web-02-前端html","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:47:19.192Z","comments":true,"path":"2017/06/15/web-02-前端html/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-02-前端html/","excerpt":"","text":"前言单选框提交时以{“gender”:”男”}形式, checked表示默认选中1234&lt;div&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; checked=&quot;checked&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;/&gt;女&lt;/div&gt; 多选框提交时以{“hobby”:”[11,12.13]”}形式，checked表示默认选中123456&lt;div&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;11&quot; checked=&quot;checked&quot; /&gt;乒乓球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;12&quot;/&gt;监球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;13&quot;/&gt;足球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;14&quot;/&gt;排球&lt;/div&gt; 下拉框multiple表示多选，没有multiple表示单选，selected表示默认选中1234567&lt;div&gt; &lt;select name=&quot;city&quot; id=&quot;&quot; multiple&gt; &lt;option value=&quot;北京&quot; selected=&quot;selected&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 提交type=”button” 不能提交表单数据，除非事件绑定type=”submit” 默认事件就是提交表单数据。12345&lt;form&gt; &lt;button&gt;提交&lt;/button&gt; # button标签在form里也会有事件，会提交 &lt;input type=&quot;submit&quot;&gt; # 有事件，也会提交 &lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt; # 没有事件，不会提交&lt;/form&gt; 前端相关概念Jquery学习可参考基本概念： html很骨感. css就是装饰或样式. js 就是让其能动起来, js=javascript，Javascript是一门编程语言，我们用它来编写客户端浏览器脚本 jQuery是一个快速、简洁的JavaScript框架,一种javascript工具库，把我们常用的一些功能进行封装，方便我们调用，极大简化了Javascript编程，提高了开发效率。jQuery设计的宗旨就是“write Less，Do More” Bootstrap是一个开发框架，集成了很多现成的网页格式和网页布局，封装了很多CSS样式和JS代码 Javascipt跟jQuery的区别：jQuery是javascript的一个库，包含多个可重用的函数，用来辅助我们简化javascript开发jQuery能做的javascipt都能做到，而javascript能做的事情，jQuery不一定能做到。 position定位的学习12345position position: relative # 与absolute一起使用 position: absolute #随滚动条滚动而滚动 随滚动条滚动而滚动，并且一直往上找，直到找到一个relative后进行定位 position: fixed # 永远在窗口某位置 引用图标要想用图标有很多种方法方法一：当我们引入了bootstrap.css时，我们可以用它官网的图标https://v3.bootcss.com/components/ 图标名字即类名就可使用了 方法二：fontawesome也有很多图标需要下载font-awesome文件来引入 https://fontawesome.io/icons/ # 每一个图标可点击，点开后能看到引用方法。 方法三：这个也是图标库，方法见官网http://fontawesome.dashgame.com/#basic","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(二)","slug":"web-django-orm(二)","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:44:48.308Z","comments":true,"path":"2017/06/15/web-django-orm(二)/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-django-orm(二)/","excerpt":"","text":"目录 一对多查询 多对多查询 查询优化 一对多查询1.1 创建测试数据models.py数据库模型1234567from django.db import modelsclass DePart(models.Model): title=models.CharField(max_length=32)class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(DePart) 创建测试数据12345678models.DePart.objects.create(title=&quot;IT&quot;)models.DePart.objects.create(title=&quot;咨询&quot;)models.DePart.objects.create(title=&quot;公关&quot;)models.UserInfo.objects.create(username=&quot;user1&quot;,pwd=123,dp_id=1)models.UserInfo.objects.create(username=&quot;user2&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user3&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user4&quot;,pwd=456,dp_id=2) 注：12p=models.UserInfo.objects.create(username=&apos;wxq&apos;,pwd=123) # 返回对象本身print(p.username,p.pwd) 1.2 一对多正向查询all() 返回Queryset123v = models.DePart.objects.all()for row in v: print(row.id,row.title,row.userinfo_set.all()) values()返回Queryset1234# values()每一个字典代表一行数据# v = models.UserInfo.objects.values(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)# for row in v:# print(row[&apos;username&apos;],row[&apos;dp__title&apos;]) values_list()返回Queryset1234# values_list()每一个元组代表一行数据v = models.UserInfo.objects.values_list(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)for row in v: print(row[0],row[2]) 1.3 一对多反向查询all()1234567 v=models.DePart.objects.all() for row in v: print(row.id, row.title, row.userinfo_set.all())打印结果：1 IT &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;2 咨询 &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;]&gt;3 公关 &lt;QuerySet []&gt; values()123456789v = models.DePart.objects.values(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[&apos;title&apos;],row[&apos;userinfo__username&apos;],row[&apos;userinfo__dp_id&apos;])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None values_list()123456789v = models.DePart.objects.values_list(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[0],row[1],row[2])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None 1.4 总结正向查询用字段（这里字段是指外键字段） all: 字段+.跨表字段 values: 字段 + __跨表字段 values_list 字段+ __跨表字段反向查询用表名 all: 表名小写+_set values: 表名小写 + __跨表字段 values_list 表名小写+ __跨表字段 总结一句话就是： 正向查询用字段，反向查询用表名 多对多查询2.1 多对多自建表当我们自己建第三张表时，第三张表列数没有限制，更加灵活，更能满足复杂需求1234567表模型class UserGroup(models.Model): caption= models.CharField(max_length=32)class U2G(models.Model): ui = models.ForeignKey(UserInfo) ug = models.ForeignKey(UserGroup) 12345678910111213创建测试数据models.U2G.objects.create(ui_id=1,ug_id=1)models.U2G.objects.create(ui_id=2,ug_id=1)models.U2G.objects.create(ui_id=3,ug_id=2)models.U2G.objects.create(ui_id=4,ug_id=2)v=models.U2G.objects.all()for row in v: print(row.ug.caption,row.ui.username)# 打印结果A组 user1A组 user2B组 user3B组 user4 2.2 多对多非自建多对多关系Django ManyToMany帮我们建第三张表时，我们不能对第三张直接操作，并且第三张只有三列（2张表的分别ForeighKey列，自增ID列）。只能通过如下面的ManyToMany字段间接操作12345678910111213#表模型class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(&quot;DePart&quot;)class UserGroup(models.Model): caption= models.CharField(max_length=32) m = models.ManyToManyField(&quot;UserInfo&quot;)&apos;&apos;&apos;第三张表只有三列id userinfo_id usergroup_id&apos;&apos;&apos;&apos; 添加几个组做如下增删及更新数据操作123456obj = models.UserGroup.objects.filter(id=2).first() #id为2的组是B组print(obj.id,obj.caption,obj.m)obj.m.add(*[1,2]) #ID为1，2的用户加入B组# obj.m.remove(*[1,]) # 删除B组中用户id为1的记录obj.m.clear() # 清除组id为2的所有记录obj.m.set([1,]) # 不管id为2的组有几个用户都清空后把用户id为1的加入B组 2.3 多对多查询学习多对多查询注意：first/get返回对象，filter/all/values/values_list返回QuerySet1234obj=models.UserGroup.objects.filter(id=2).first() # 得到组对象v=obj.m.all() # obj.m表示UserInfo表for row in v: print(row.username, row.dp.title) 123obj=models.UserGroup.objects.filter(id=2).first() # 得到组ID为2的对象v=obj.m.filter(dp__title=&quot;IT&quot;).first() # UserInfo表中查部门为IT的记录print(v.username) # 打印符合条件的username 优化select_related优化12345user_list=models.UserInfo.objects.all() # 这里是1次sql请求for row in user_list: #如果有10条数据,会有10次sql请求 print(row.username,row.dp.title) # 每一次row.dp.title都会跨表查询那么返回结果经历了11次sql请求,做select_related优化后只有2次sql请求,其中1次是跨表请求models.UserInfo.objects.all().select_related(&quot;ForeighKeyname&quot;) #优化方法一 prefetch_related优化,推荐用优化方法二123456789models.UserInfo.objects.all().prefetch_related(&quot;ForeighKeyname&quot;) # 优化方法二prefetch_related可以分解为models.UserInfo.objects.all()一次单表查询取到了ForeighKeyname_id=[1,2,3,4,5] 然后DJango会发起第2次单表查询，models.DePart.objects.filter(id__in = [1,2,3,4,5]) 2次单表查询明显轻量了。#only:只取相应字段，否则性能下降# defer:不取相应字段，否则性能下降models.UserInfo.objects.all().only(&apos;id&apos;,&apos;name&apos;) # 只取哪几列models.UserInfo.objects.all().defer(&apos;id&apos;,&apos;name&apos;) # 不取哪几列 还有更多","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"git 利器","slug":"git-01","date":"2017-06-15T01:42:54.000Z","updated":"2018-08-25T03:35:15.638Z","comments":true,"path":"2017/06/15/git-01/","link":"","permalink":"http://www.digmyth.com/2017/06/15/git-01/","excerpt":"","text":"目录 git建版本库 git别名设置 git基本配置 git基本命令 git分支管理 git创建版本库12git init # 把当前目录变成git可管理的仓库生成的.git目录是用来跟踪管理版本库的,称为git的一个版本库 git别名设置1234为命令设置别名$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch git配置123每台机器自报家门$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 12优先级从高到低是.git/config--&gt; --global --&gt; system 12345全局生效: 配置保存在/etc/gitconfig[root@wxq-srv git_work]# git config --system user.name &quot;wxq&quot;[root@wxq-srv git_work]# cat /etc/gitconfig [user] name = wxq 12345678当前用户所有仓库生效：配置保存在~/.gitconfig[root@wxq-srv git_work]# cat /root/.gitconfig [user] name = wxq email = you@example.com[root@wxq-srv git_work]# git config --global user.name &quot;wxq&quot;[root@wxq-srv git_work]# git config --global user.email &quot;you@example.com&quot; 12345678910只对某仓库生效：配置保存在reponame/.git/config[root@wxq-srv git_work]# git config user.name &quot;wxq1&quot;[root@wxq-srv git_work]# cat .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[user] name = wxq1 基本命令1234567git log # 每一次提交的记录git reset --hard HEAD^ #HEAD表示当前版本，HEAD^^表示上上个版本，依次类推，上100个版本是HEAD~100git reset --hard $commit_id # 回到指定版本git reflog # 只要改变都会在这里记录，用于回到未来的某个版本。git add index.html # 添加更改至state暂存 区git reset HEAD index.html # unstage 退出暂存区git diff HEAD -- readme.txt # 查看当前工作区和版本库有什么不同 放弃修改除了版本回退外，只要未commit之前都可以放弃工作区所做的修改。如果有add 动作，需要先从暂存区回退到工作区git reset HEAD index.html如果没有add动作，可直接放弃修改git checkout -- index.txt或者可以这么理解git checkout -- index.txt 都会从暂存区或版本库(优先从暂存区)恢复到工作区. 分支管理123456查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt; 待续","categories":[{"name":"Git","slug":"Git","permalink":"http://www.digmyth.com/categories/Git/"}],"tags":[]},{"title":"linux_iptables应用","slug":"linux-iptables应用","date":"2017-06-15T01:42:54.000Z","updated":"2018-04-23T06:57:19.754Z","comments":true,"path":"2017/06/15/linux-iptables应用/","link":"","permalink":"http://www.digmyth.com/2017/06/15/linux-iptables应用/","excerpt":"","text":"iptables 规则应用总结防火墙端口重定向规则1iptables -t nat -I PREROUTING -i eth1 -p tcp --dport 80 -j REDIRECT --to 8080 反向代理防火墙规则12iptables -I INPUT -d 123.125.168.130 -i eth0 -p tcp --dport 80 -j ACCEPTiptables -I INPUT -s 10.10.10.0/24 -i eth1 -p tcp --sport 9999 -j ACCEPT 此包为input状态检测可省略12iptables -I OUTPUT -p tcp -o eth1 -s 10.10.10.1 -d 10.10.10.10 --dport 9999 -j ACCEPTiptables -I OUTPUT -p tcp -o eth0 -s 123.125.168.130 --sport 80 -j ACCEPT 目标地址转换：123iptables -t nat -I PREROUTING -i eth0 -d 123.125.168.130 -p tcp --dport 80 -j DNAT --to 10.10.10.10:9999iptables -A FORWARD -d 10.10.10.10 -p tcp --dport 9999 -j ACCEPTiptables -A FORWARD -s 10.10.10.10 -p tcp --sport 9999 -j ACCEPT 如果10.10.10.10机器默认网关不是10.10.10.1或没有指网关,则网关防火墙需如下:有点奇怪的规则1iptables -t nat -I POSTROUTING -d 10.10.10.10 -p tcp --dport 9999 -j SNAT --to 10.10.10.1 源地址转换：12iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j SNAT --to 123.125.168.130iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE 此条开销较大，与上条可二选一12iptables -I FORWARD -s 10.10.10.0/24 -j ACCEPT 注：forward不指网卡，要指也是内网卡iptables -I FORWARD -d 10.10.10.0/24 -j ACCEPT","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Mysql sysbench 压测","slug":"mysql-sysbench","date":"2017-06-10T01:41:54.000Z","updated":"2017-11-10T09:01:54.314Z","comments":true,"path":"2017/06/10/mysql-sysbench/","link":"","permalink":"http://www.digmyth.com/2017/06/10/mysql-sysbench/","excerpt":"","text":"目录 工具安装 执行压测 针对优化 示例结果 数据库指标对于mysql压力测试，大多用sysbench/tpcc-mysql工具。主要针对数据库OLTP（在线事务处理）指标。 12qps : query per second 查询量tps: transaction per second 事务量 工具安装123yum install sysbench -y[root@mysql sysbench]# sysbench --versionsysbench 1.0.9 在sysbench压测时会调用内置lua脚本, 这些脚本为于/etc/share/sysbench目录下12345678910111213141516/usr/share/sysbench[root@mysql sysbench]# lltotal 64-rwxr-xr-x 1 root root 1452 Sep 18 12:29 bulk_insert.lua-rw-r--r-- 1 root root 13762 Sep 18 12:29 oltp_common.lua-rwxr-xr-x 1 root root 1290 Sep 18 12:29 oltp_delete.lua-rwxr-xr-x 1 root root 2018 Sep 18 12:29 oltp_insert.lua-rwxr-xr-x 1 root root 1265 Sep 18 12:29 oltp_point_select.lua-rwxr-xr-x 1 root root 1649 Sep 18 12:29 oltp_read_only.lua-rwxr-xr-x 1 root root 1824 Sep 18 12:29 oltp_read_write.lua-rwxr-xr-x 1 root root 1118 Sep 18 12:29 oltp_update_index.lua-rwxr-xr-x 1 root root 1127 Sep 18 12:29 oltp_update_non_index.lua-rwxr-xr-x 1 root root 1440 Sep 18 12:29 oltp_write_only.lua-rwxr-xr-x 1 root root 1919 Sep 18 12:29 select_random_points.lua-rwxr-xr-x 1 root root 2118 Sep 18 12:29 select_random_ranges.luadrwxr-xr-x 4 root root 4096 Nov 10 02:57 tests 执行压测方便压测时找到内置lua脚本，以下命令都在/etc/share/sysbench目录下执行 在远端连接数据库时，授权1grant all on test.* to root@&apos;%&apos; identified by &apos;123&apos;; 生成压测数据12cd /usr/share/sysbench/sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 prepare 执行压测1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 run 清理压测数据1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 cleanup 优化数据库在压测过程中可能出现一些错误，连接数不够，max_prepared_stmt_count不够，可优化/etc/my.cnf 做适当调整123456789101112max_connections = 4096max_prepared_stmt_count=100000 # 默认16384压测时需调大query_cache_type = 1query_cache_size = 10Mwsrep_slave_threads = 4#wsrep_notify_cmd = /usr/local/bin/wsrep-notify.shmax_connections = 10000key_buffer_size = 64Mmax_heap_table_size = 64Mtmp_table_size = 64Minnodb_buffer_pool_size = 8192M 示例结果1234567891011121314151617181920212223242526272829303132333435Initializing worker threads...Threads started![ 10s ] thds: 300 tps: 198.33 qps: 5741.67 (r/w/o: 4335.25/830.02/576.41) lat (ms,95%): 3706.08 err/s: 81.77 reconn/s: 0.00[ 20s ] thds: 300 tps: 222.61 qps: 6095.90 (r/w/o: 4553.90/924.16/617.84) lat (ms,95%): 4203.93 err/s: 102.31 reconn/s: 0.00[ 30s ] thds: 300 tps: 221.01 qps: 5899.58 (r/w/o: 4399.84/899.83/599.92) lat (ms,95%): 4055.23 err/s: 93.20 reconn/s: 0.00[ 40s ] thds: 300 tps: 198.06 qps: 5400.91 (r/w/o: 4032.79/827.03/541.09) lat (ms,95%): 4683.57 err/s: 89.98 reconn/s: 0.00[ 50s ] thds: 300 tps: 186.14 qps: 5162.76 (r/w/o: 3866.39/783.36/513.00) lat (ms,95%): 5312.73 err/s: 90.12 reconn/s: 0.00[ 60s ] thds: 300 tps: 158.49 qps: 4433.94 (r/w/o: 3325.93/670.45/437.56) lat (ms,95%): 5507.54 err/s: 78.99 reconn/s: 0.00SQL statistics: queries performed: read: 246736 write: 50340 other: 33317 total: 330393 transactions: 12147 (195.34 per sec.) queries: 330393 (5313.17 per sec.) ignored errors: 5477 (88.08 per sec.) reconnects: 0 (0.00 per sec.)General statistics: total time: 62.1815s total number of events: 12147Latency (ms): min: 16.10 avg: 1503.84 max: 14267.54 95th percentile: 4683.57 sum: 18267086.41Threads fairness: events (avg/stddev): 40.4900/6.29 execution time (avg/stddev): 60.8903/0.59","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"KVM introduction","slug":"KVM-introduction","date":"2017-06-08T01:41:54.000Z","updated":"2018-03-30T06:58:49.290Z","comments":true,"path":"2017/06/08/KVM-introduction/","link":"","permalink":"http://www.digmyth.com/2017/06/08/KVM-introduction/","excerpt":"","text":"1. kvm简介kvm as a kernel based virtual machine,现如今较为流行的虚拟化技术，openstack后端就是kvm虚拟化。 2. 模拟与虚拟 模拟： 完全由软件模拟：ring0 ring1 ring2 ring3都需要软件模拟， 底层硬件架构与虚拟机硬件架构可以不同 虚拟： 底层硬件架构与虚机硬件架构必须相同，如cpu平台架构都为x86_64 3.虚拟化分类虚拟化分类无非2种方式： 一种：直接运行于硬件平台–&gt; hypervisor: dom0 如xen ,esxi,这里xen不好理解，装xen不也要安装操作系统后安装xen4软件包么？为什么它也说直接运行在硬件平台，是因为安装完xen4后，切换了xen4的内核来启动，并非原有操作系统内核. 二种：先有host系统，再安装虚拟软件（如vmware station）或统称virtual machine mintor(虚拟机监视器) 如kvm, 虚拟机的cpu,内存通过kvm模块来调用，但IO不行，虚拟机的IO是通过host系统的qemu程序模拟提供的，再由host系统的内核提供IO 那么什么是半虚拟化？ 半虚拟化是要修改内核的，要让虚拟机知道自己运行在虚拟机环境下的，知道的结果是当虚拟机发起cpu指令时不能直接操作硬件，需要发起hypercall调用. 那么什么是完全虚拟化？ 1) 早期BT技术实现加速，binary translation 边运行边翻译,虚机内核就是运行ring1上专用于翻译加速 2) hvm: 硬件辅助虚拟化，需要cpu硬件支持，就是cpu多了ring-1，这样虚拟机直接运行在ring0上，宿主机内核运行在ring-1,ring-1捕获ring0的特权指令直接运行，性能可想而知提高了","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-Ganesha","slug":"cephfs-Ganesha","date":"2017-06-05T01:41:54.000Z","updated":"2017-11-14T09:43:43.912Z","comments":true,"path":"2017/06/05/cephfs-Ganesha/","link":"","permalink":"http://www.digmyth.com/2017/06/05/cephfs-Ganesha/","excerpt":"","text":"nfs-ganesha简介因工作需要调研了cephfs 导为nfs,目前有两种方法： 方法一：内核mount挂载或 ceph-fuse 挂载至NFS server，如/data再正常搭建NFS-server即可。 方法二 : 借用nfs-ganesha协议转换间接存储在cephfs集群中。 nfs-ganesha不仅可以导 cephfs,也可以导RGW.ceph RGW理解: 相当于协议转换层，把符合S3和swift协议的 restFul API 请求转换为rados存储在ceph对象存储中. 换一种说法： Ceph 导出为 NFS，一种通过 RGW，一种通过 CephFS，通过 FSAL 模块 连接到 RGW 或者 CephFS FSAL_RGW 调用 librgw2 将 NFS 协议转义为 S3 协议再通过 RGW 存入到 Ceph 中. FSAL_CEPH 调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. FSAL： File System Abstraction Layer 文件系统抽像层 题外话，openstack项目manila后端存储驱动，其中一种就是Ganesha Driver12345## manila 4驱动Default Driver: 使用 RBD 作为 Manila Service VM 的后端，在 VM 上启动 NFS 实例提供服务Ganesha Driver: 使用 Ganesha 将 CephFS 重新 Reexport 出去Native CephFS Driver: 在 Guest VM 上直接使用原生 CephFS Module 访问VirtFS Driver: 将 CephFS 挂载在 Host 端，VM 通过 VirtFS 访问 nfs-ganesha安装在CentOS7系统中有nfs-ganesha rpm软件包，但没有ceph相关模块，所以我这里是编译安装，把FSAL_RGW 模块/FSAL_CEPH 模块编译进去。 1git clone -b V2.4-stable https://github.com/nfs-ganesha/nfs-ganesha.git --recursive 由于ceph-jewel版本才有libcephfs1-devel软件包，所以这里ganesha客户端 ceph用 jewel版本，服务器ceph版本Luminousceph-jewel源123456789[root@ ganesha]# cat /etc/yum.repos.d/ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/noarch/gpgcheck=0 软件安装12345yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -y 如果需要生成 FSAL_RGW 模块，则在编译选项中添加： -DUSE_FSAL_RGW=ON 如果需要生成 FSAL_CEPH 模块，则在编译选项中添加： -DUSE_FSAL_CEPH=ON 12345mkdir /opt/build/cd /opt/build/cmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 在cmake输出中确保有12345-- USE_FSAL_CEPH = ON-- USE_FSAL_CEPH_MKNOD = OFF-- USE_FSAL_CEPH_SETLK = OFF-- USE_FSAL_CEPH_LL_LOOKUP_ROOT = ON-- USE_FSAL_RGW = ON 确保： – USE_FSAL_CEPH 为 ON,以及 – USE_FSAL_RGW 为 ON。 如果过程中出错，请删除/tmp/build/* 及/tmp/build/CMakeCache.txt重新编译 make install成功输出中有:12&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/rgw.conf&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/ceph.conf 这两个文件就是配置将 RGW 和 CephFS 配置为 nfs-ganesha的配置模板。 nfs-ganesha 配置123456789101112131415161718192021222324252627282930313233cat /etc/ganesha/ganesha.confEXPORT&#123; Export_ID=1; Path = /; Pseudo = /cephfs; Access_Type = RW; NFS_Protocols = 4; Transport_Protocols = TCP; Squash = No_Root_Squash; FSAL &#123; Name = CEPH; &#125;&#125;EXPORT&#123; Export_ID=2; Path = /; Pseudo = /rgw; Access_Type = RW; Squash = No_root_squash; NFS_Protocols = 4; Transport_Protocols = TCP; FSAL &#123; Name = RGW; User_Id = &quot;admin&quot;; Access_Key_Id =&quot;RDS4VW60OA48ZW1HSU61&quot;; Secret_Access_Key = &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;; &#125;&#125;RGW &#123; ceph_conf = &quot;/etc/ceph/ceph.conf&quot;;&#125; 其中Access_Key_Id Secret_Access_Key部份在ceph-rgw中读取123456789101112131415 (ceph-mon)[root@pike-vm /]# radosgw-admin user info --uid=admin&#123; &quot;user_id&quot;: &quot;admin&quot;, &quot;display_name&quot;: &quot;admin&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;admin&quot;, &quot;access_key&quot;: &quot;RDS4VW60OA48ZW1HSU61&quot;, &quot;secret_key&quot;: &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;... 启动nfs-ganesha1ganesha.nfsd -L /var/log/ganesha.log 挂载使用在客户端进行挂载使用：1 安装ceph-common ceph-fuse libcephfs1-devel librgw2-devel2 拷贝ceph.conf配置文件及keyring文件至/etc/ceph3 挂载：mount -t nfs4 {$ganesha-server-ip}:/ /mnt如果出现I/O error,请ceph-fuse -m 172.18.23.17:6789 /mnt 挂载一遍，就是这么神奇，不要问我为什么。。。12[root@-3 mnt]# lsls: reading directory .: Remote I/O error 成功123456[root@-3 cephfs]# ll /mnt/total 1drwxrwxrwx 1 root root 33 Nov 14 08:31 cephfs[root@-3 cephfs]# echo &quot;99cloud new data...&quot; &gt; cephfs.txt [root@-3 cephfs]# cat cephfs.txt cephfs data... 在cephfs集群中我们可以看到客户端写入的数据12345678[root@-3 ~]# ceph-fuse -m 172.18.23.17:6789 /data/ceph-fuse[4579]: starting ceph clientceph-fuse[4579]: starting fuse[root@-3 ~]# cd /data/[root@-3 data]# lscephfs.txt[root@3 data]# cat cephfs.txt cephfs data...","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-02-分页示例","slug":"web-django-03-分页示例","date":"2017-05-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/05/20/web-django-03-分页示例/","link":"","permalink":"http://www.digmyth.com/2017/05/20/web-django-03-分页示例/","excerpt":"","text":"1 django 分页功能app01/views.py Paginator模块的使用123456789101112131415161718192021222324def users(request): from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger user_list = models.UserInfo.objects.all() paginator = Paginator(user_list,10) # paginator.per_page 每页显示条目数量 # paginator.count 数据总个数 # paginator.num_pages 总页数 # paginator.page_range 总页数的索引范围，如(1,10),(1,20) current_page = request.GET.get(&apos;p&apos;) try: page_obj=paginator.page(current_page) except EmptyPage as e: page_obj = paginator.page(1) except PageNotAnInteger as e: page_obj = paginator.page(1) # page_obj.has_next() 是否有下一页 # page_obj.next_page_number() 下一页页码 # page_obj.has_previous() 是否有上一页 # page_obj.previous_page_number() 上一页页码 # page_obj.object_list 分页之后的数据列表 # page_obj.number 当前页 # page_obj.paginator paginator对象 return render(request,&quot;users.html&quot;, &#123;&apos;page_obj&apos;:page_obj&#125;) templates/users.html12345678910111213141516171819&#123;% if page_obj.has_previous %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&#123;% endif %&#125;&#123;% for i in page_obj.paginator.page_range %&#125; &lt;a href=&quot;/users?p=&#123;&#123; i &#125;&#125;&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;&#123;% endfor %&#125;&#123;% if page_obj.has_next %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&#123;% endif %&#125;&lt;span&gt; &lt;a&gt;&#123;&#123; page_obj.number &#125;&#125;/&#123;&#123; page_obj.paginator.num_pages &#125;&#125;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-加密解密加签验签","slug":"python加密解密加签验签","date":"2017-05-15T12:51:41.000Z","updated":"2018-04-23T06:59:41.630Z","comments":true,"path":"2017/05/15/python加密解密加签验签/","link":"","permalink":"http://www.digmyth.com/2017/05/15/python加密解密加签验签/","excerpt":"","text":"python加密解密，加签验签(转)在与第三方服务对接时，加密与解密，加签与验签是这个过程中的关键一步 一般情况下，对接服务中会有两对公私钥。使用对方公钥进行加密，使用自己私钥进行加签。传回来的数据，使用自己的私钥解密，使用对方的公钥验签。 12345678import base64from Crypto.PublicKey import RSAfrom Crypto.Hash import SHAfrom Crypto.Cipher import PKCS1_v1_5from Crypto.Signature import PKCS1_v1_5 as SIGN_PKCSPUB_KEY = RSA.importKey(open(&apos;rsa_public_key.pem&apos;,&apos;r&apos;).read())PRI_KEY = RSA.importKey(open(&apos;rsa_private_key.pem&apos;,&apos;r&apos;).read()) 加密 12345678910def split_data(l, n): for i in range(0, len(l), n): yield l[i: i+n] def encrypt(params): raw = params.encode(&apos;utf-8&apos;) cipher = PKCS1_v1_5.new(PUB_KEY) ＃ 加密超长字节117个字节一加密 content = b&apos;&apos;.join([cipher.encrypt(x) for x in chunks(raw, 117)]) return base64.b64encode(content) 解密123456def decrypt(data): raw = data.encode(&apos;utf-8&apos;) decrypt = PKCS1_v1_5.new(PRI_KEY).decrypt # 解密超长字符128一解密 content = b&apos;&apos;.join(decrypt(x, object()) for x in chunks(raw, 128)) return content.decode() 加签1234def signer(data): signstr = data.encode(&apos;utf-8&apos;) sign = SIGN_PKCS.new(PRI_KEY).sign(SHA.new(signstr)) return base64.b64encode(sign) 验签1234def verify_sign(unsign, raw_sign): # unsign: 签名 # raw_sign: 待验证签名 assert SIGN_PKCS.new(PUB_KEY).verify(SHA.new(unsign.encode(&apos;utf-8&apos;)), raw_sign)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"linux_Suse init","slug":"linux-SUSE-init","date":"2017-05-15T01:42:54.000Z","updated":"2018-09-04T13:15:50.755Z","comments":true,"path":"2017/05/15/linux-SUSE-init/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-SUSE-init/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux_7.X内核升级","slug":"linux-7.x内核升级","date":"2017-05-15T01:42:54.000Z","updated":"2018-08-04T08:38:33.350Z","comments":true,"path":"2017/05/15/linux-7.x内核升级/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-7.x内核升级/","excerpt":"","text":"查看版本12# uname -r3.10.0-693.el7.x86_64 升级内核需要先导入elrepo的key，然后安装elrepo的yum源12345678910111213141516171819202122232425262728293031# rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpmPreparing... ################################# [100%]Updating / installing... 1:elrepo-release-7.0-3.el7.elrepo ################################# [100%]# yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list availableLoaded plugins: fastestmirrorelrepo-kernel | 2.9 kB 00:00:00 elrepo-kernel/primary_db | 1.8 MB 00:00:01 Determining fastest mirrors * elrepo-kernel: mirrors.neusoft.edu.cnAvailable Packageskernel-lt.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-doc.noarch 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-headers.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-ml.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-doc.noarch 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-headers.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelperf.x86_64 4.17.11-1.el7.elrepo elrepo-kernelpython-perf.x86_64 4.17.11-1.el7.elrepo elrepo-kernel 安装你需要的版本12# yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64版本性质：主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 查看内核是否安装完成123456# rpm -qa |grep kernelkernel-tools-3.10.0-693.el7.x86_64kernel-ml-4.17.11-1.el7.elrepo.x86_64kernel-3.10.0-693.el7.x86_64kernel-ml-devel-4.17.11-1.el7.elrepo.x86_64kernel-tools-libs-3.10.0-693.el7.x86_64 查看并修改grub的启动顺序1234# awk -F\\&apos; &apos;$1==&quot;menuentry &quot; &#123;print $2&#125;&apos; /etc/grub2.cfgCentOS Linux (4.17.11-1.el7.elrepo.x86_64) 7 (Core)CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)CentOS Linux (0-rescue-d14171e79a9e4b5da1a69e7348d0f45f) 7 (Core) 注： 最新内核为第一个，故启动项为012345678# vim /etc/default/grubGRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=saved(这里改成0)GRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 生成grub重新创建内核配置并重启12345678910# grub2-mkconfig -o /boot/grub2/grub.cfgGenerating grub configuration file ...Found linux image: /boot/vmlinuz-4.17.11-1.el7.elrepo.x86_64Found initrd image: /boot/initramfs-4.17.11-1.el7.elrepo.x86_64.imgFound linux image: /boot/vmlinuz-3.10.0-693.el7.x86_64Found initrd image: /boot/initramfs-3.10.0-693.el7.x86_64.imgFound linux image: /boot/vmlinuz-0-rescue-d14171e79a9e4b5da1a69e7348d0f45fFound initrd image: /boot/initramfs-0-rescue-d14171e79a9e4b5da1a69e7348d0f45f.imgdone[root@localhost ~]# reboot 确认内核版本12# uname -r4.17.11-1.el7.elrepo.x86_64","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Python 操作mysql","slug":"mysql-pyton操作mysql","date":"2017-04-29T01:41:54.000Z","updated":"2017-11-19T09:00:13.663Z","comments":true,"path":"2017/04/29/mysql-pyton操作mysql/","link":"","permalink":"http://www.digmyth.com/2017/04/29/mysql-pyton操作mysql/","excerpt":"","text":"这里记录下python操作mysql的知识点，详细参见链接 模块安装在python2中使用模块MySQLdb在python3中使用模块pymysql1pip3 install pymysql 基本使用基本操作过程就是 创建连接 创建游标 发送语句 获取数据 事务提交 关闭游标 关闭连接1234567891011121314151617181920212223import pymysql# 创建连接conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;db1&apos;)# 创建游标cursor = conn.cursor()# 发送语句cursor.execute(sqlstatement)cursor.executemany(sqlstatement)# 获取数据cursor.fetchone()cursor.fetchmany(3)cursor.fetchall() # 事务提交，不然无法保存新建或者修改的数据conn.commit() # 关闭游标cursor.close()# 关闭连接conn.close() 基本知识点获取新创建数据自增ID1234567891011import pymysql conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)cursor = conn.cursor()cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;1.1.1.11&quot;,1),(&quot;1.1.1.11&quot;,2)])conn.commit()cursor.close()conn.close() # 获取最新自增IDnew_id = cursor.lastrowid 游标操作1234在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：cursor.scroll(1,mode=&apos;relative&apos;) # 相对当前位置移动cursor.scroll(2,mode=&apos;absolute&apos;) # 相对绝对位置移动 fetch 数据类型关于默认获取的数据是元组类型，如果想要获取字典类型的数据，如下pymysql.cursors.DictCursor：1234567import pymysqlconn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)# 游标设置为字典类型cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)r = cursor.execute(&quot;call p1()&quot;) result = cursor.fetchone() 1234567891011# 执行SQL，并返回受影响行数effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos;&quot;)# 执行SQL，并返回受影响行数#effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot;, (1,)) 这里值得注意的是不能把上面语句替换成下面语句，否则会被sql注入statement=&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot; % 1effect_row = cursor.execute(statement)# 执行SQL，并返回受影响行数#effect_row = cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;172.16.0.1&quot;,1),(&quot;1.1.1.11&quot;,2)]) SQLAlchemySQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果1pip3 install SQLAlchemy SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：12345678910111213MySQL-Python mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; pymysql mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;] MySQL-Connector mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; cx_Oracle oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...] 更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-02-基本配置示例","slug":"web-django-02-基本配置示例","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.976Z","comments":true,"path":"2017/04/20/web-django-02-基本配置示例/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-02-基本配置示例/","excerpt":"","text":"1 django安装1pip install django pymysql 2 新建django project1django-admin.py startproject mysite 或用pycharm新建一个项目 3 该项目下创建一个应用1cd mysite &amp;&amp; python manage.py startapp app01 4 配置Djangosettings.py文件确保有下面代码，用于在static目录放置静态1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS= ( os.path.join(BASE_DIR, &apos;static&apos;),) 确保INSTALLED_APPS = []有app01,应用 5 Django mysql配置settings.py文件确保有12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;&#125; app01下 init.py12import pymysqlpymysql.install_as_MySQLdb() 对于初学者建议配置此项，用于打印orm翻译后的sql语后，便于对照学习1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 6 django生成数据models.py12345from django.db import modelsclass UserInfo(models.Model): username = models.CharField(max_length=32) password = models.CharField(max_length=32) email = models.CharField(max_length=32) 12python manage.py makemigrationspython manage.py migrate 7 urls.py定义123456from app01 import viewsurlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;^users/$&apos;, views.users), # url(r&apos;^create_data/&apos;, views.create_data),] 8 views.py定义123456789101112131415from django.shortcuts import render,HttpResponse, redirectfrom app01 import modelsdef create_data(request): for i in range(1,104): models.UserInfo.objects.create( username = &quot;root%s&quot; %i, password = &quot;123&quot;, email = &quot;root%s@qq.com&quot; %i, ) return HttpResponse(&quot;data generate...&quot;)def users(request): user_list = models.UserInfo.objects.all() return render(request,&quot;users.html&quot;, &#123;&apos;user_list &apos;:user_list &#125;) 9 templates/users.html定义12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/bootstrap-3.3.7-dist/css/bootstrap.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;width: 700px; margin: 10px auto&quot;&gt; &lt;h1&gt;用户列表&lt;/h1&gt; &lt;table class=&quot;table table-hover table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; 用户名&lt;/th&gt; &lt;th&gt; 密码&lt;/th&gt; &lt;th&gt;邮箱&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for user in page_obj.object_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; user.username &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.password &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.email &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 10 注意bootstrap应用bootstrap下载链接 11 启动项目运行项目1python manage.py runserver 127.0.0.1:8000","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-04-路由分发与别名.md","slug":"web-django-04-路由分发与别名","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/04/20/web-django-04-路由分发与别名/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-04-路由分发与别名/","excerpt":"","text":"目录 别名设置 namespace设置 reverse include本质 Django URLS 路由分发流程己经学习过了，这里了解一下url中的别名设置，reverse反向生成URL，以及include本质如何路由分发的。 别名设置URL有别名name的设置，添加在最后一级分发视图函数的后面1url(r&apos;^login/&apos;, views.login,name=&quot;alias_name&quot;), namespace设置URL有namespace的设置当多个app多级分发时可能存在别名相同,这时就用到namespace来加以区分 namespace添加12url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)), 或url(r&apos;^app01&apos;,([url(&apos;^hosts&apos;,oviews.hosts,name=&quot;nnnn&quot;),],None,&quot;oo&quot;)), reverse用法reverse反向生成url1234from django.urls import reversedef login(request): url = reverse(&quot;namespace1:namespace2:alias_name&quot;) return redirect(url) include本质include原生写法是1url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)) include用于路由下级分发，本质是返回元组，最后一个None表示namespace,也就是形如1url(r&apos;^openstack/&apos;, ([url映射关系，],None,None)) 总结：了解分发基础知识有利于我们后面学习Django admin，如何动态生成URL的代码学习。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(一)","slug":"web-django-orm(一)","date":"2017-04-15T12:51:41.000Z","updated":"2018-01-18T03:44:22.364Z","comments":true,"path":"2017/04/15/web-django-orm(一)/","link":"","permalink":"http://www.digmyth.com/2017/04/15/web-django-orm(一)/","excerpt":"","text":"目录 简单介绍 初识ORM 简单介绍声明：ORM原理请参考 一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 初识ORM下面学习下Django里sql操作的基本语法 通过简单设置，可以在logging查看翻译成的sql语句settings.py1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 2.1 创建表12345from django.db import modelsclass UserInfo(models.Model): nid=models.AutoField(primary_key=True) name=models.CharField(max_length=32) pwd = models.CharField(max_length=32) 2.2 操作表123456789101112q = models.UserInfo.objects.all()Queryset = [obj(id,name,pwd), obj(id,name,pwd),obj(id,name,pwd),]q=models.UserInfo.objects.values(&apos;name&apos;,&apos;pwd&apos;)Queryset = [&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123&#125;, &#123;&quot;name&quot;:&quot;user1&quot;,&quot;pwd&quot;:123&#125;, &#123;&#125;] # 字典q = models.UserInfo.objects.value_list(&apos;name&apos;,&apos;pwd&apos;)Queryset = [(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123), (&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123),(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123)]#元组q = models.UserInfo.objects.filter(name=&quot;wxq&quot;)q = models.UserInfo.objects.get(name=&apos;wxq&apos;) # 多个或没有值都会报错q = models.UserInfo.objects.filter(name=&apos;wxq&apos;).first() # 推荐 2.3 操作表的其它方法12345678910111213141516171819202122232425261. all() 返回的是querySet2. filter(id__lt=10, id__gt=1) 并且查， 返回的是querySet3. get() 只有一个值，否则报错， 返回的是对象4. first() 只找第一个值，返回的是对象5. exclude 取反model.Book.objects.exclude(prince=134) 返回querySet6. countmodeles.Book.objects.exclude(prince=134).count() #querySet对象才有.count()调用方法 7. order_by(*field)models.Book.objects.objects.all().order_by(&quot;prince&quot;) 小到大排序models.Book.objects.objects.all().order_by(&quot;-prince&quot;) 大到小排序8.distinct() 提除重复的记录9 values 返回字典querySet集合10 values_list 返回元组querySet集合11 existret = models.Book.objects.all().exist()","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-09-02-网络编程","slug":"python-10-02-网络编程","date":"2017-03-31T14:26:46.000Z","updated":"2018-02-08T09:19:59.999Z","comments":true,"path":"2017/03/31/python-10-02-网络编程/","link":"","permalink":"http://www.digmyth.com/2017/03/31/python-10-02-网络编程/","excerpt":"","text":"目录 socket概念 socket基本使用 socket简单示例 总结 一、socket概念什么是socket ? socket常称为’套接字’，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或应答网络请求。 Unix中一切皆文件，socket是一种特殊的套接字文件，对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。 所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。 对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。 二、socket基本使用服务器端第一步： 创建 套接字对够用123456789import socketsocket.socket(family, type)family AF_INET AF_UNIXtype SOCK_STREAM -------&gt; TCP SOCK_DGRAM -------&gt; UDPconns = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 绑定地址使用套接字对象的 bind方法绑定于地址和端口组成的元组1conns.bind((&apos;ip&apos;,port)) 第三步： 使用套接字的Listen()方法进行监听1conns.listen(10) #等待队列长度 第四步： 进入循环监听状态 使用套接字的accept()方法接收用户连接请求help(tcpconn.accept)1client_sock,client_addr = conns.accept() 编写客户端程序第一步： 创建套接字对象以连接服务器端1client_conn = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 请求连接服务器client_conn.conncet((‘server_ip’, port)) 第三步： 发送数据 1client_conn.send(b&apos;hello world&apos;) 示例server.py1234567891011121314import socketsock = socket.socket()sock.bind((&apos;127.0.0.1&apos;,8000))sock.listen(5)while True: conn,addr = sock.accept() client_data = conn.recv(1024) print(client_data) conn.sendall(&apos;response info from server&apos;) conn.close() client.py1234567891011import socketsk = socket.socket()sk.connect((&apos;127.0.0.1&apos;,8000))sk.sendall(&apos;请求数据&apos;)server_reply = sk.recv(1024)print(server_reply)sk.close() 三、socket简单示例python中网络编程主要有socket/socketserver和异步相关的Twisted/tornado/ socket这里包括自己用select实现的伪异步IO多路复用 2.1 示例一web浏览器和socket_server交互,浏览器将收到服务端返回的数据123456789101112131415161718192021# socket_server.pyimport socketdef handle_process(client): data = client.recv(1024) print(data.decode(&quot;utf-8&quot;)) client.send(b&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;)#一定要先发送合规请求头 client.send(b&apos;hello worldfdds&apos;)def main(): sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM) sock.bind((&apos;127.0.0.1&apos;,8003)) sock.listen(5) while True: conn,addr = sock.accept() handle_process(conn) conn.close()if __name__ == &apos;__main__&apos;: main() 2.2 示例二socket + select 实现IO多路复用1234567891011121314151617181920212223242526272829303132333435363738394041# socket_server.pyimport selectimport socket# 单线程里同时监听多个socket对象，实现了&quot;伪&quot;并发IO操作： IO多路复用sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8001))sk1.listen(5)sk2 = socket.socket()sk2.bind((&apos;127.0.0.1&apos;,8002))sk2.listen(5)inputs = [sk1,sk2]w_inputs = []while True: # IO多路复用： # select: 内部循环，主动查看 # poll: 内部循环，主动查看 # epoll: 非循环， 异步回调或被动通知 r,w,e = select.select(inputs,w_inputs,[],0.05) for obj in r: if obj in [sk1,sk2]: print(&quot;新的连接来了。。&quot;) conn,addr = obj.accept() inputs.append(conn) else: print(&quot;新的数据来了&quot;) try: data=obj.recv(1024) except Exception as e: data = &quot;&quot; if data: # obj.sendall(data) w_inputs.append(obj) else: inputs.remove(obj) w_inputs.remove(obj) obj.close() for obj in w: obj.sendall(b&apos;ok&apos;) w_inputs.remove(obj) 定义2个socket_client 1234567891011# socket_client01.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8001))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 12345678910# socket_client02.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8002))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 测试服务端并发： 先启动socket_server.py,后启动socket_clientx.py 小结：服务端单线程同时监听了多个socket对象，表明实现了并发连接或IO多路复用，但真正实现了并发吗？当并发边连接有IO请求时还是占住了资源,那么在下一个例子中用线程处理IO请求实现真正的IO并发 4.2 示例三select + 线程实现真正的多并发123456789101112131415161718192021222324import selectimport socketimport threadingdef process_request(conn): while True: v = conn.recv(1024) conn.sendall(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\ndownload page ...&apos;) conn.close() break # 任务处理完成后终止这个线程sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8009))sk1.listen(5)inputs = [sk1,]while True: r,w,e = select.select(inputs,[],[],0.05) for obj in r: if obj in [sk1,]: conn,addr = obj.accept() t=threading.Thread(target=process_request,args=(conn,)) t.start() 设计思路可参考 socketserver源代码1234567import socketserverclass MyHandler(socketserver.BaseRequestHandler): def handle(self): pass server = socketserver.ThreadingTCPServer((&apos;127.0.0.1&apos;,8001),MyHandler)server.serve_forever() 4.2 示例四浏览器会自动向服务端请求头的一些数据，process_data()函数对请求头做了结构化处理，同时浏览器请求什么URL，服务端就会返回什么URL, 在此基础上可以用类封装为一个web框架邹形, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import selectimport socketdef process_data(client): data = bytes() while True: try: chunk = client.recv(1024) except Exception as e: chunk = None if not chunk: break data += chunk data_str = str(data, encoding=&quot;utf-8&quot;) header,body = data_str.split(&apos;\\r\\n\\r\\n&apos;,1) header_list = header.split(&apos;\\r\\n&apos;,1) header_dict = &#123;&#125; for line in header_list: value = line.split(&apos;:&apos;, 1) if len(value) == 2: k, v = value header_dict[k] = v else: header_method, header_url, header_protocal = line.split(&quot; &quot;) header_dict[&quot;header_method&quot;] = header_method header_dict[&quot;header_url&quot;] = header_url header_dict[&quot;header_protocal&quot;] = header_protocal return header_dict,bodysock = socket.socket()sock.setblocking(False) # setblocking表示是否设置为阻塞模式,这里是对accept生效sock.bind((&apos;127.0.0.1&apos;,8008))sock.listen(5)# while True:# conn,addr = sock.accept() #setblocking(False)后不阻塞了，有连接就拿连接，没有连接就直接报错# conn.setblocking(False)# conn.recv(1024) # 有数据拿数据，没有数据就直接报错inputs = [sock,]while True: rList,wList,eList = select.select(inputs,[],[],0.05) for client in rList: if client == sock: # 建立新的连接 conn,addr = client.accept() conn.setblocking(False) # 有数据拿数据，没有数据就直接报错 inputs.append(conn) else: header_dict,body=process_data(client) request_url=header_dict[&apos;header_url&apos;] client.send(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\n&apos;) client.send(request_url.encode(&quot;utf-8&quot;)) inputs.remove(client) client.close() 总结对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。掌握socket可读可写状态","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-02-面象对象编程中级","slug":"python-08-02-面象对象编程中级","date":"2017-03-26T13:28:41.000Z","updated":"2018-02-06T09:05:12.632Z","comments":true,"path":"2017/03/26/python-08-02-面象对象编程中级/","link":"","permalink":"http://www.digmyth.com/2017/03/26/python-08-02-面象对象编程中级/","excerpt":"","text":"目录 staticmethod classmethod staticmethod几个魔法方法说明： @classmethod @staticmethod不依赖任何具体的对象来执行类当中是方法，这个方法要么是静态方法， 要么是类方法，要么是属性 12345678910@classmethoddef test_func(cls): # 类方法传入cls参数（类本身） pass@staticmethoddef test_func(): # 静态方法时没有任何变量 passdef test_func(self): # 普通实例方法时传入self参数（实例本身） pass staticmethod语法12345678In [4]: class Foo(object): ...: @staticmethod ...: def spam(x,y,z): # 静态方法时方法定义不写self ...: print(x,y,z) In [5]: In [5]: Foo.spam(1,2,3) # 静态方法属于类的，用类名调用。虽然实例能调用，但不要那样混用,不规范1 2 3 staticmethod用法场景123456789101112131415161718192021In [7]: import timeIn [6]: class Date(object): ...: def __init__(self,year,mon, day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @staticmethod ...: def now(): ...: t = time.localtime() ...: return Date(t.tm_year, t.tm_mon, t.tm_mday) ...: In [8]: d1 = Date(1989, 8,20) # 获得一个对象In [9]: d2 = Date.now() # 这里也能获得一个对象In [10]: d1.dayOut[10]: 20In [11]: d2.dayOut[11]: 12 classmethod@classmethod语法1234567891011In [12]: class C1(object): ....: name = &apos;wxq&apos; ....: @classmethod ....: def test(cls): # 这里需要传入cls, 谁调用谁就是cls ....: print(cls, cls.name) ....: In [14]: C1.test() # 这里cls就是C1&lt;class &apos;__main__.C1&apos;&gt; wxqIn [13]: c = C1() # 正常实例化对象 @classmethod用法场景1234567891011121314151617In [2]: import timeIn [3]: class Date(object): ...: def __init__(self, year, mon,day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @classmethod ...: def now(cls): ...: t = time.localtime() ...: return cls(t.tm_year, t.tm_mon, t.tm_mday) ...: In [4]: d = Date.now()In [5]: print(d.year,d.mon, d.day)2017 3 12 staticmethod与classmethod区别的牛逼之处123456789101112131415161718192021root@ubuntu:~# cat method.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @staticmethod def now(): t = time.localtime() return Date(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 method.py &lt;__main__.Date object at 0x7f5514658940&gt; 上面并没有我们想要的结果分析：e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。也就是return Date(t.tm_year, t.tm_mon, t.tm_mday), 实例print时调Date类的__str__方法，故打印return Date(t.tm_year, t.tm_mon, t.tm_mday)后的内存地址，不会打印EuroDate类中定义的__str__方法 123456789101112131415161718192021root@ubuntu:~# cat goodmethod.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @classmethod def now(cls): t = time.localtime() return cls(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 goodmethod.py year: 2017 mon:3 day:12 这样才是我们想要的结果，好象参悟了点什么分析:e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。这一点和上面是一致的。但此时return cls(t.tm_year, t.tm_mon, t.tm_mday)中的cls不是Date,而是EuroDate,符合谁调谁就是cls的原则。这样实例化e = EuroDate.now()时print(e)就会去调EuroDate中的__str__方法，得到我们想要的结果 小结：staticmethod与classmethod在一定场景中是有区别的。细节参照上面的例子练习","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-06-异常","slug":"python-08-06-异常","date":"2017-03-25T12:39:12.000Z","updated":"2018-02-06T09:07:40.152Z","comments":true,"path":"2017/03/25/python-08-06-异常/","link":"","permalink":"http://www.digmyth.com/2017/03/25/python-08-06-异常/","excerpt":"","text":"目录 1 2 3 12345678910class WxqException(Exception): def __init__(self, msg): self.message = msg def __str__(self): return self.messagetry: raise WxqException(&quot;Game Over!&quot;)except WxqException as e: print(e)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-09-01-进程和线程","slug":"python-09-01-进程和线程","date":"2017-03-20T14:26:37.000Z","updated":"2018-02-07T07:46:27.544Z","comments":true,"path":"2017/03/20/python-09-01-进程和线程/","link":"","permalink":"http://www.digmyth.com/2017/03/20/python-09-01-进程和线程/","excerpt":"","text":"目录 基本概念 进程 线程 协程 总结 基本概念我们都知道现代操作是支持“多任务”的，什么叫“多任务”呢？。简单地说，就是操作系统可以同时运行多个任务。打个比方一边微信一边QQ。 单核cpu是如何执行“多任务”的？简单的说，就是cpu时间分片，同一时间单核cpu只能执行一个任务，cpu计算时间分片到每个任务交替运行，进程切换或上下文切换时间很短，我们无法感知而己。真正并发执行多任务还要靠多核cpu来完成。 并发执行任务方案， 多进程 多线程 多进程+多线程 Python线程有GIL(Global Interpreter Lock), 这种锁在单核cpu单进程里同一时间只能有一个线程被cpu调度。 那么多线程并发就没有用了吗？计算密集型多进程不就解决了IO密集型多线程不就解决了，同一时间只有一个线程调度，其它时间线程处理IO啊 进程，多进程，进程池进程定义: 程序由指令+数据组成，进程就是这样一种描述的实体(process),简单的认为一个任务就是一个进程。 一个进程至少一个线程，进程间相互隔离（数据不共享），一个子进程挂了并不影响程序运行，当然主进程挂了程序也就挂了，进程切换开销较大。 多进程： 用于解决计算密集型作务的多并发。 进程池： 内部维护一个进程序列，当使用时创建一个新的进程放入池中，再从池中取出来使用，当达到进程池个数时，不再创建进程，请求直接从进程池中取出来用，其它请求只能等待直到进程池中有进程可用。 进程示例：12345678910111213from multiprocessing import Processimport timedef task(arg): time.sleep(arg) print(arg)if __name__ == &apos;__main__&apos;: for i in range(10): p = Process(target=task, args=(i,)) # p.daemon=True p.start() p.join(0.5) print(&quot;end&quot;) 进程池与线程池用法一样，细节不展开1from concurrent.futures import ProcessPoolExecutor 进程锁也是和线程锁一样的用法，细节不展开 进程与线程不同的是进程数据不共享，那如何实现数据交互，方法很多rpc,Queue,pipe,自己实现socket也可以实现 ,借住第三方工具，python本身也可以实现，2种方法： Array (基于C语言数据类型) Manager (基于socket) 1234567891011from multiprocessing import Processdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: v = [] for i in range(10): p = Process(target=task,args=(i, v)) #每个进程数据独立存在 p.start() C语言里Array存的元素是定义时定死的，和python 的列表有很大不同。1234567891011from multiprocessing import Process,Arraydef task(num,li): li[num] = 1 print(list(li))if __name__ == &apos;__main__&apos;: v = Array(&apos;i&apos;, 10) #i在c语言是的int，10表示长度 for i in range(10): p = Process(target=task,args=(i, v)) p.start() Manger().list() Manger().dict()12345678910111213from multiprocessing import Process,Array,Managerdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: # dic = Manager().dict() v = Manager().list() for i in range(10): p = Process(target=task,args=(i, v)) p.start() p.join() 线程，多线程，线程池线程定义：一个任务可以再划分为多个小任务，进程内独立执行这些小任务的最小单元。 一个进程可以有多个线程，线程间共享内存数据，一个线程挂了，其它线程也会崩溃，线程切换开销较进程小一些。 多线程： 用于解决IO密集型任务的多并发 线程池： 内部维护一个线程序列. (与进程池同理) 线程示例123456789101112import threadingimport timedef task(arg): time.sleep(1) print(arg)for i in range(5): t = threading.Thread(target=task,args=(i,)) t.setDaemon(False) # 等子线程完成后再结束主线程 t.start() t.join() # 变为串行,一直等 t.join(3) # 变为串行,只等3秒print(&quot;end&quot;) # 先打印主线程的end,再一起打印子线程的i 自定义线程类示例123456789101112131415161718import threadingimport timeclass MyThread(threading.Thread): def __init__(self,target=None,args=(),**kwargs): super(MyThread,self).__init__(target=None,args=(),**kwargs) self.target =target self._args = args def run(self,): return self.target(*self._args)def task(arg): time.sleep(1) print(arg)t = MyThread(target=task, args=(123,))t.run()print(&quot;end&quot;) 线程锁线程共享数据，共同修改一份数据是有问题的，pycharm环境下可能看不出效果，cmd命令行下可以看到数据修改混乱了。123456789101112import threadingimport timev=10def task(arg): global v v-=1 print(v)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 数据修改乱了，就要加锁了：普通锁，递归锁RLock,事件锁、条件锁，互斥锁普通锁 1234567891011import threadingimport timev=10lock = threading.Lock()def task(arg): lock.acquire() # 申请锁 global v v-=1 print(v) lock.release() # 释放锁 普通锁不能开多重没锁，如果是下面这种设置会造成死锁123456# 死锁lock = threading.Lock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 递归锁RLock递归锁RLock可以开多重锁，不会造成死锁123456# 不会死锁lock = threading.RLock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 信号量BoundedSemaphore多个线程同时使用锁，当然这里3个同时修改数据也可能混乱。 12345678910111213141516import threadingimport timev=10lock = threading.BoundedSemaphore(3)def task(arg): lock.acquire() # 申请锁 time.sleep(1) global v v-=1 print(v) lock.release() # 释放锁for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 事件锁条件式批量解锁12345678910111213141516import threadingimport timelock = threading.Event()def task(arg): time.sleep(1) lock.wait() #锁住所有线程 print(arg)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = input(&quot;&gt;&gt;&gt;&quot;) if value == &apos;1&apos;: lock.set() # 解锁 条件锁123456789101112131415161718import threadingimport timelock = threading.Condition()def task(arg): time.sleep(1) lock.acquire() lock.wait() #锁住所有线程 print(&apos;线程&apos;,arg) lock.release()for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = int(input(&quot;&gt;&gt;&gt;&quot;)) lock.acquire() lock.notify(value) # 传几就解几个锁 lock.release() 线程池pool.submit(download,url)取出一个线程执行任务，返回future对象future.add_done_callback(write)future对象有一个add_done_callback方法，传入我们自己写的回调函数write, future对象也会自动传给write回调函数。download 函数的返回值=future.result() 12345678910111213141516171819202122232425import requestsfrom concurrent.futures import ThreadPoolExecutordef write(future): response = future.result() f=open(&apos;xx.txt&apos;,&apos;wb+&apos;) f.write(response.content) f.close()url_list = [ &apos;http://www.baidu.com&apos;, &apos;http://www.digmyth.com&apos;, &apos;http://www.github.com&apos;,]def download(url): response=requests.get(url) print(&quot;得到结果&quot;,url) return responsepool = ThreadPoolExecutor(2)for url in url_list: print(&quot;开始请求：&quot;,url) future=pool.submit(download,url) # 池中取一个连接 # ruture自动传给write调函数:write(future) future.add_done_callback(write) 封装1234567891011121314import requestsfrom concurrent.futures import ThreadPoolExecutordef download(url): response=requests.get(url) return responsedef run(url_list=None): pool = ThreadPoolExecutor(2) for item in url_list: url = item[&apos;url&apos;] callback = item[&apos;callback&apos;] future=pool.submit(download, url) future.add_done_callback(callback) 1234567891011121314151617def f1(future): print(future.result().content)def f2(arg): print(&quot;future&quot;)def f3(future): print(&quot;future&quot;)url_list = [ &#123;&apos;url&apos;:&apos;http://www.baidu.com&apos;,&apos;callback&apos;:f1&#125;, &#123;&apos;url&apos;:&apos;http://www.digmyth.com&apos;,&apos;callback&apos;:f2&#125;, &#123;&apos;url&apos;:&apos;http://www.github.com&apos;,&apos;callback&apos;:f3&#125;,]import nb_threadnb_thread.run(url_list) 协程协程定义： 协程不同于进程，线程对于操作系统可见且是一种资源，协程只是代码层面的来回切换，对于操作系统不可见且并非是一种资源。 1pip3 install greenlet # python中原生协程 单独协程没什么用，结合协程切换特性+IO+select+socket可以编写出牛逼的异步IO模块或异步非阻塞框架 gevent就是基于greenlet+libvent+IO二次加工实现的python异步模块1pip3 instal gevent 示例：和多线程不同，这里是单线程并发IO任务123456789101112import geventimport requestsdef func(url): response = requests.get(url) print(response.url)gevent.joinall([ gevent.spawn(func,&apos;http://www.baidu.com&apos;), gevent.spawn(func,&apos;http://www.digmyth.com&apos;), gevent.spawn(func,&apos;http://www.github.com&apos;),]) 当然我们也可以自己用select来写IO多路复实现并发 总结即使有了多进程多线程或进程池，线程池处理多任务，但如果一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型也只能处理一个任务，无法并发执行。 还好现代操作系统支持异步IO，这是一个很牛逼的东东，单进程单线程模型并发执行任务得以实现。这种称为事件驱动模型，Nginx就是支持异步IO的Web服务器。 单线程的异步编程或异步IO多路复用会是趋势，可以基于事件驱动编写高效的多任务程序。Twisted,Tornado之所以牛逼，就是因为它们的高性能也是基于事件驱动，基于异步IO多路复用。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-Django-01-入门","slug":"web-django-01-入门","date":"2017-03-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.948Z","comments":true,"path":"2017/03/20/web-django-01-入门/","link":"","permalink":"http://www.digmyth.com/2017/03/20/web-django-01-入门/","excerpt":"","text":"目录 什么是WSGI 什么是mvc/mtv模型 orm如何工作 Django安装 一、什么是WSGI对浏览器而言，远端是服务器程序和应用程序，而服务器程序就是socket Server,用于接收用户请求，解析用户请求，响应用户请求，这部份工作永远不变的。可变的是应用程序，那么服务器程序与应用程序解耦偶就有了必要。 接收用户请求，解析用户请求，响应用户请求这些封装为WSGI接口简化开发。 定义web app与web server之间接口解耦规则就是WSGI. Python标准库提供的独立wsgi服务器称为wsgiref 二、什么是mvc/mtv模型init.py: 告诉python它不是一个目录文件夹而是一个包 mvc: model(数据库交互) view(模板) control (业务处理逻辑) mtv: model（数据库交互）view(视图，业务逻辑处理) templates(模板） 注： templates模板可以放在项目下或各个app下 三、orm如何工作一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 自动路由： 反射应用，自定义扩展 四、Django安装安装Djangopip3 install django pika pymysql 查看安装pip3 list 创建一个Django项目cd /optmkdir /opt/templates # 用于整个项目存放模板文件django-admin startproject Mysite #创建一个项目 生成目录结构如下123456789101112/opt/Mysite - Mysite # 还有一个与项目同名的文件夹/opt/Mysite/Mysite，对整个程序进行配置 - __init__.py - settings.py # 配置文件 - urls.py # URL对应关系 - wsgi.py # 遵循WSGI规范，一般使用 uwsgi + nginx - manage.py # /opt/Mysite/manage.py管理Django程序：如下 - python manage.py runserver # 运行程序 - python manage.py startapp xx # 创建app # Django的orm框架 - python manage.py makemigrations - python manage.py migrate 创建一个应用：12345678910cd /opt/Mysitepython manage.py startapp app01生成/opt/Mysite/app01目录结构如下：/opt/Mysite/app01/__init__.py # 说明app01是一个包/opt/Mysite/app01/migrations # django orm框架，修改表结构的操作记录（差异化）/opt/Mysite/app01/admin.py # Django提供的后台管理程序/opt/Mysite/app01/apps.py # 配置当前app/opt/Mysite/app01/models.py # 数据库交互：orm-写指定的类，通过命令可以创建数据库结构/opt/Mysite/app01/views.py # 视图函数，业务逻辑处理/opt/Mysite/app01/test.py # 单元测试 初始练习：12Mysite/Mysite/urls.py (导入from blog import views及编写业务逻辑url(r&apos;^index&apos;,views.index)) ---&gt; 练习各种例子。。。 URLS别名用法：12345url(r&apos;^/login$&apos;, views.login, name=&quot;LOGIN&quot;)那么前端templates中的html代码需要用别名方式，语法如下：&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; 改为&lt;form action=&quot;&#123;% url &apos;LOGIN&apos; %&#125;&quot; mothod=&quot;post&quot;&gt; 1234567891011121314151617181920212223urls url(正则表达式 视图函数，参数，别名）正则这里匹配到的或者说捕获到的数据都是字符串类型，post提交的数据get post都可以向server端发送数据，区别是提交数据的方式不同：格式如下get ?id=2&amp;page=3post 数据在body里 无命名分组 位置参数有命名分组 关键字参数--在函数定义时，只能用命名的key，这一点是要注意的获取登录首页是以GET方法提交 -----GET用户名，密码表单submit时是以POST方式提交 -----POST时间表达：1 时间戳2 字符串3 结构化时间 五、Django生命周期 5.1 路由系统URLS123456789101112131 /index/ -&gt; def index(request)2 /detail-(\\d+)/ -&gt; def detail(request, nid) /detail-(?P&lt;nid&gt;\\d+)/ -&gt; def detail(request,nid)3 /index/ -&gt; def index(request) name=n1 使用别名生成URL： 模板语言： &#123;% url n1 %&#125; -&gt; /index/ 视图函数：（需要导入reverse模块） reverse(name=&quot;n1&quot;) --&gt; /index/ 4 /web/ include(&quot;app01.urls&quot;) 5.2 视图函数1 函数至少一个参数 request2 request12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 注意:form表单提交方法只能是get或post当提交文件时特别注明enctype=&quot;multipart/form-data&quot;12345&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;filename&quot;&gt;&lt;/form&gt; 3 返回方式123HttpResponse()render(request,)redirect() 5.3 ORM操作各数据库操作是一种外对sql api接口的封装 第一层封装：数据库存储最底层是db驱动，对外开放SQL API用于操作数据库 第二层封装：python3 中操作mysql数据库的库为pymysql,是对SQL API之上的一层封装 第三层封装: orm操作是最高级封装，pymsql之上的一层封装 最终：orm翻译成pymsql,pymysql再翻译成sql语句 Django 数据库操作具体语法介绍请参考 5.4 模板引警Django对template中html的渲染有着一套语法,我有专门一篇博客讲解模板渲染语法渲染语法博客参考 1 基本方法12345678910111213return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 2 函数 Django 提供的函数:12simple_tag 可以有多个参数filter 只能有2个参数，并且可以做条件语句的条件","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-08-03-面象对象编程高级","slug":"python-08-03-面象对象编程高级","date":"2017-03-15T14:28:41.000Z","updated":"2018-02-21T04:38:02.994Z","comments":true,"path":"2017/03/15/python-08-03-面象对象编程高级/","link":"","permalink":"http://www.digmyth.com/2017/03/15/python-08-03-面象对象编程高级/","excerpt":"","text":"目录(魔法方法) 类内置方法 构造方法 @property getattr系列 getitem系列 metaclass系列 importlib 字符串形式运行函数 内置方法1234567891 Foo.__name__ 字符串形式的类名2 Foo.__doc__ Foo的文档字符串3 Foo.__bases__ 父类组成的元组4 Foo.__class__ Foo类所在5 Foo.__bases__ Foo的所有父类构成的元组7 Foo.__module__ Foo类所在模块8 obj.__class__ obj对象所在的类 9 dir(Foo)` Foo类所有属性名组成的列表10 Foo.__dict__ Foo类所在属性组成的字典 构造方法12__init__ 构造方法，通过类创建对象时自动触发执行__del__ 析构方法，当对象在内存中被释放时自动触发执行 __str__ __repr__ __call__123__str__ 对象打印时自动触发__repr__ 对象直接回车自动触发（仅供程序员使用）__call__ 对象后面加括号调用时自动触发 @property属性方法把一个类方法变为属性来用12345678910111213141516171819class Dog(object): def __init__(self,name): self.name = name self.__food = None @property def eat(self): print(&quot;%s is eating %s&quot; %(self.name, self.__food)) @eat.setter # 赋值调用属性，调这个方法 def eat(self,food): print(&quot;set to food:&quot;,food) self.__food = food @eat.deleter # 删除属性 def eat(self): del self.__food print(&quot;Delete the finished&quot;)obj=Dog(&apos;w..w&apos;)obj.eat = &quot;fish&quot; # 自动调用@eat.setter赋值obj.eat property 原理就是property类里定义了__get__() __set__() __delete__()方法，是描述符的运用123456定义： 描述符就是将某种特殊类的实例指派给另一个类的属性，__get__ __set__ __delete__实现了 描述符协议，用于property描述符编写。一种调用方式之一： property(fget=None, fset=None, fdel=None, doc=None)__get__(self, instance, owner) #用于访问属性，它返回属性的值__set__(self, instance, value) #将在属性分配操作中调用，不返回任何内容__delete__(self, instance) # 控制删除操作，不返回任何内容 getattr setattr hasattr反射系列用于通过字符串找到函数或方法 示例：1234567891011121314151617181920def func1(self): print(self.name,&apos;say Hi&apos;) return &quot;func1&quot;class Foo(object): def __init__(self): self.name = &apos;wxq&apos; def func2(self): print(self.name) return &quot;method func2&quot;obj = Foo()choice = input(&quot;请输入调用方法名:&quot;)if hasattr(obj,choice): # 实例中有这个方法，执行实例中的方法 func=getattr(obj,choice) func() # 绑定方法自动传入self参数else: # 动态加载函数封装到类中 setattr(obj,choice,func1) func = getattr(obj,choice) func(obj) # 函数时需手动传入self参数 __getattr__ __setattr__ __hasattr__ __delattr__ 进行__dict__拦截一般来讲，obj.name = &#39;wxq&#39;python自动基于self.__dict__赋值取值操作，无需关心，这里只是对这种自动操作进行拦截，用于高级代码重写操,self.xx不存在变量xx时先访问__getattribute__,再访问__getattr__,默认返回None,self.xx存在变量xx时不会访问getattr，直接取出值返回，self.name=’wxq’赋值先访问setattr`方法，没有该方法就用默认内置. 示例一12345678910111213141516171819class Foo(): def __init__(self): pass def __getattribute__(self, item): print(&apos;__getattribute__&apos;) return object.__getattribute__(self,item) def __getattr__(self, item): print(&apos;__getattr__&apos;) return &quot;%s variable don&apos;t exists&quot; % item def __setattr__(self, item, value): print(&apos;__setattr__&apos;) self.__dict__[item] = &apos;test&apos;+valueobj=Foo()obj.name = &apos;wxq&apos;print(obj.name) 打印123__setattr____getattribute__testwxq 示例二： 当没有.xx变量属性时会访问__getattr__方法12345678910111213class Foo(): def __init__(self): pass def __getattr__(self, item): if item == &apos;name&apos;: return &apos;wxq&apos; elif item == &apos;age&apos;: return 25obj = Foo()print(obj.age) 示例三：123456789101112class Foo(): def __init__(self,path=&apos;&apos;): self.path = path def __getattr__(self, item): return Foo(&quot;%s/%s&quot;%(self.path, item)) def __str__(self): return self.pathobj = Foo(&quot;www&quot;).bai.comprint(obj) # 打印 www/bai/com __getitem__ __setitem__ __delitem__用于索引操作，如字典形式：obj[&#39;k1&#39;]如Session设置 request.session[&#39; user_info&#39;] = &#39;user&#39; 1234567891011121314151617181920class Foo(object): def __init__(self,attrs=&#123;&#125;): self.attrs = attrs def __getitem__(self, key): print(&apos;__getitem__&apos;,key) return self.attrs.get(key) def __setitem__(self, key, value): print(&apos;__setitem__&apos;,key,value) self.attrs[key] = value def __delitem__(self, key): print(&apos;__delitem__&apos;,key) del self.attrs[key] print(self.attrs) obj = Foo(&#123;&apos;name&apos;:&apos;wxq&apos;&#125;)obj[&apos;k1&apos;] = &apos;v1&apos; # 设置，自动触发执行 __setitem__print(obj.attrs)print(obj[&apos;k1&apos;]) # 获取值，自动触发执行 __getitem__del obj[&apos;name&apos;] # 触发__delitem__ __new__和 __metaclass____new__与实例化对象相关123456789class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): # 其实是运行了__new__(),不再调用__init__()方法了 print(&quot;Foo __new__&quot;)obj = Foo(&apos;wxq&apos;) # 打印 Foo __new__,这里obj是None 这里可以看出实例化是先运行的__new__()方法，如果__new__()没有返回值，Foo.__init__()就不会运行了，obj也就为None了要想运行Foo.__init__(), 那么__new__()必须有返回值1234567891011class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): print(&quot;Foo __new__&quot;) return object.__new__(cls)obj = Foo(&apos;wxq&apos;)print(obj) 总结实例化过程 看起来__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。 __metaclass__与类的创建相关12print type(f) # 输出：&lt;class &apos;__main__.Foo&apos;&gt; 表示，obj 对象由Foo类创建print type(Foo) # 输出：&lt;type &apos;type&apos;&gt; 表示，Foo类对象由 type 类创建 培析类 的创建过程123456789def func(self): print(&apos;hello fgf&apos;)Foo = type(&apos;Foo&apos;,(object,), &#123;&apos;talk&apos;: func&#125;)# type第一个参数：类名# type第二个参数：当前类的基类# type第三个参数：类的成员f = Foo()f.talk() 12345678910def func(self): print(&quot;hello %s %s&quot;%(self.name,self.age))def __init__(self,name,age): self.name = name self.age = ageFoo = type(&apos;Foo&apos;,(object,),&#123;&apos;func&apos;:func, &apos;__init__&apos;:__init__&#125;) # 用type创建出Foo这个对象（类）f = Foo(&quot;wxq&quot;,25) # 再用Foo对象创建f对象f.func() Metaclass元类创建过程1234567891011121314151617181920212223242526272829#print(globals())class MyType(type): def __init__(self,*args,**kwargs): print(&quot;MyType __init__&quot;,self,*args,**kwargs) def __call__(self, *args, **kwargs): print(&quot;MyType __call__&quot;,self, *args, **kwargs) obj = self.__new__(self) self.__init__(obj, *args, **kwargs) obj.age= 25 return obj def __new__(cls, *args, **kwargs): print(&quot;MyType __new__&quot;,cls, *args, **kwargs) obj = type.__new__(cls, *args, **kwargs) return objclass Foo(object,metaclass=MyType): def __init__(self, name): self.name = name print(&quot;Foo __init__&quot;) def __call__(self, *args, **kwargs): print(&quot;call...&quot;)#print(globals()f = Foo(&quot;test&quot;)print(f.name,f.age) 总结Type创建类过程 前面实例化对象的结论是__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。那么type创建Foo对象(类)也是这个流程，因为是Type实例化Foo类，MyType执行__new__创建Foo,返回给MyType.__init__()执行，当f=Foo() 实例化对象也就是加()调用MyType.__call__()方法,__call__()方法来执行实例化，实例化过程又是执行Foo.__new__()返回给Foo.__init__()，完成实例化。 importlib字符串模块导入123456import importlibx=&apos;scrapy.crawler.CrawlerProcess&apos;model_path,model_name = x.rsplit(&apos;.&apos;,maxsplit=1)md=importlib.import_module(model_path) # 字符串形式模块导入cls=getattr(md,model_name)print(cls) 字符串形式运行函数1 eval(字符串)1234def func(arg): return argeval(&apos;func(&quot;hello wolrd&quot;)&apos;) Tornado编写session组件会用到这个知识点，结合工厂设计模式 2 eval获取函数1234567def f1(arg): print(arg)x=&quot;f1&quot;func=eval(x) # 获取函数func(&quot;wxq&quot;) 3 sys.modules获取函数1234567891011import sysdef process(arg): return argf=&quot;process&quot;func=getattr(sys.modules[__name__], f) # 获取函数ret=func(&apos;hello world&apos;)print(ret) 4 运用类中getattr123456789class Foo(): def f1(self): return &quot;hello world&quot; obj = Foo()x=&quot;f1&quot;func=getattr(obj,x)print(func()) &lt;完结&gt;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-06-01-正则表达式","slug":"python-06-01-正则表达式","date":"2017-03-01T09:03:01.000Z","updated":"2017-02-27T08:36:47.909Z","comments":true,"path":"2017/03/01/python-06-01-正则表达式/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-06-01-正则表达式/","excerpt":"","text":"目录 基础 进阶 re模块 分组 切分字符串 编译compile 贪婪模式匹配 基础元字符：(Meta-Characters)是正则表达式中具有特殊意义的专用字符比如：\\d表示数字 \\s表示空格 \\w表示[a-zA-Z0-9_]大小写字母数字下划线元字符表 链接字符类：又字符集，一组可以匹配[ ]中字符串的字符12345678910111213141516171819202122. # 任意单个字符[] # 集合内[^] # 集合内取反? # 表示前一个字符长度为0或1+ # 表示前一个字符长度为1或1以上* # 表示前一个字符长度为任意，等同于?+的并集&#123;m&#125;&#123;m,n&#125;&#123;0,n&#125;&#123;m,&#125;^$pat1|pat2() # 分组\\b # 嘛意思[0-9] \\d[0-9a-zA-Z_] \\w\\s # 任意空白字符\\nna*? # 这里？使用非贪婪模式（正则表达式默认工作在贪婪模式，尽可能多的去匹配）(*|+|?|&#123;&#125;)?` # 使用非贪婪模式match # 只匹配首项以开头的，与shell中^相同 进阶re模块12345678910111213141516171819202122232425262728293031&gt;&gt;&gt; re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; res = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; print(res)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt; # 没有匹配到打印为None&gt;&gt;&gt; res.group() # 匹配到时用.group()取出匹配结果 &apos;wxq&apos;&gt;&gt;&gt; &quot;I love wxq &quot;.find(&apos;wxq&apos;)7&gt;&gt;&gt; re.search(r&apos;.&apos;, &apos;I love digmyth.com&apos;) # 匹配任意单个字符，所以匹配到&quot;I&quot;&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\.&apos;, &apos;I love digmyth.com&apos;) # 只匹配.需要转义&lt;_sre.SRE_Match object; span=(14, 15), match=&apos;.&apos;&gt;&gt;&gt;&gt; re.search(r&apos;wx.&apos;, &apos;I love wxq.com&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d&apos;, &apos;I love 123 wxq&apos;) # 匹配单个数字&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt; &gt;&gt;&gt; re.search(r&apos;\\d\\d\\d&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;123&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.10&apos;) # 少一位匹配不到&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.100&apos;) # 匹配到&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.100.100&apos;&gt; 12345678910111213141516171819202122232425262728293031323334353637&gt;&gt;&gt; re.search(r&apos;[aeiou]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(3, 4), match=&apos;o&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[aeiouAEIOU]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[a-z]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(2, 3), match=&apos;l&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[2-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(8, 9), match=&apos;2&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[0-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3&#125;c&apos;, &apos;abbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 5), match=&apos;abbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3,10&#125;c&apos;, &apos;abbbbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 7), match=&apos;abbbbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[0-255]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;1&apos;&gt;&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[0-2][0-5][0-5]&apos;, &apos;188&apos;) # 没有匹配到&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[01]\\d\\d|2[0-2]\\d|25[0-5]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;188&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5]))&apos;, &apos;192.168.1.1&apos;) # 只匹配到192&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;192&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5])\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]\\d\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 11), match=&apos;192.168.1.1&apos;&gt; ip地址匹配最终完美写法：12345&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.240.240&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 14), match=&apos;192.168.240.24&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[0-1]?\\d?\\d)&apos;, &apos;192.168.240.240&apos;) # 这个写法完美&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.240.240&apos;&gt; [0-255]表示的是0，1，2后跟上55[0-2][0-5][0-5]只是三个占位上的数字，没有个位，百位这样的区分，当然不能匹配188了 1234567891011121314&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;3&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 重复&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1, 5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 注意没有空格&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1,5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 匹配到了&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; s = &quot;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt;&quot;&gt;&gt;&gt; re.search(r&apos;&lt;.+?&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;&lt;html&gt;&apos;&gt;&gt;&gt;&gt; re.search(r&apos;&lt;.+&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 50), match=&apos;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt; 12345&gt;&gt;&gt; re.findall(r&apos;\\bFishC\\b&apos;, &quot;FishC.com!FishC_com!(FishC)&quot;) # 待续。#^#[&apos;FishC&apos;, &apos;FishC&apos;]&gt;&gt;&gt; &gt;&gt;&gt; re.findall(r&apos;\\w&apos;, &quot;牛X工作室Love_FishC_com!)&quot;)[&apos;牛&apos;, &apos;X&apos;, &apos;工&apos;, &apos;作&apos;, &apos;室&apos;, &apos;L&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;F&apos;, &apos;i&apos;, &apos;s&apos;, &apos;h&apos;, &apos;C&apos;, &apos;_&apos;, &apos;c&apos;, &apos;o&apos;, &apos;m&apos;] re-replace/sub的例子如下字符串的strip方法只能去前后空格、字符串的replace方法是字符替换、re.sub方法也是替换功能。123456789&gt;&gt;&gt; name = &apos; w x q&apos;&gt;&gt;&gt; name.strip()&apos;w x q&apos;&gt;&gt;&gt; name.replace(&apos; &apos;, &apos;&apos;)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos;wxq&apos;, &apos;love&apos;, &apos;I wxq wxq wxq&apos;, count=2)&apos;I love love wxq&apos; 分组eg1:123&gt;&gt;&gt; name = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; name.group() # .group()打印匹配对象&apos;wxq&apos; eg2:12345678910&gt;&gt;&gt; s = &apos;aa bb cc dd &apos;&gt;&gt;&gt; p = re.compile(r&apos;\\w+\\s+\\w+&apos;) # 匹配单词空格单词这样的分组&gt;&gt;&gt; p.findall(s) # 匹配分为了2组[&apos;aa bb&apos;, &apos;cc dd&apos;]&gt;&gt;&gt; p = re.compile(r&apos;(\\w+)\\s+\\w+&apos;) # 只匹配单词空格单词中括号那个单词&gt;&gt;&gt; p.findall(s)[&apos;aa&apos;, &apos;cc&apos;]&gt;&gt;&gt; p = re.compile(r&apos;((\\w+)\\s+\\w+)&apos;) # 先打印外括号，后打印内括号，先后内容组成元组，最后列表呈现&gt;&gt;&gt; p.findall(s)[(&apos;aa bb&apos;, &apos;aa&apos;), (&apos;cc dd&apos;, &apos;cc&apos;)] eg3:12&gt;&gt;&gt; re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;(?P&lt;birthday&gt;[0-9]&#123;4&#125;))&quot;, &quot;371481199306143242&quot;).groupdict()&#123;&apos;province&apos;: &apos;3714&apos;, &apos;birthday&apos;: &apos;1993&apos;, &apos;city&apos;: &apos;811993&apos;&#125; 切分字符串re.split用法split 以至少2个空格为分隔, 两种写法:re.split(r’\\s{2,}’, str)re.split(r’\\s\\s+’，str) 12345&gt;&gt;&gt; import re&gt;&gt;&gt; re.split(r&apos;\\s&#123;2,&#125;&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;) # 以2个空隔分割字符串返回列表[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;]&gt;&gt;&gt; re.split(r&apos;\\s\\s+&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;)[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;] 12345678910111213# cat whodata.txt 17:24:49 up 2:05, 3 users, load average: 0.00, 0.02, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/1 192.168.109.1 15:33 9.00s 0.17s 0.04s python3&gt;&gt;&gt; import re&gt;&gt;&gt; with open(&apos;whodata.txt&apos;, &apos;r&apos;) as f:... for line in f:... res = re.split(&apos;\\s\\s+&apos;, line)... print(res)... [&apos; 17:24:49 up&apos;, &apos;2:05,&apos;, &apos;3 users,&apos;, &apos;load average: 0.00, 0.02, 0.05\\n&apos;][&apos;USER&apos;, &apos;TTY&apos;, &apos;FROM&apos;, &apos;LOGIN@&apos;, &apos;IDLE&apos;, &apos;JCPU&apos;, &apos;PCPU WHAT\\n&apos;][&apos;root&apos;, &apos;pts/1&apos;, &apos;192.168.109.1&apos;, &apos;15:33&apos;, &apos;9.00s&apos;, &apos;0.17s&apos;, &apos;0.04s python3\\n&apos;] eg1:123456789101112&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; p = re.compile(&apos;\\.&apos;)&gt;&gt;&gt; p.split(&apos;www.digmyth.com&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; url = &apos;www.digmyth.com&apos;&gt;&gt;&gt; re.compile(&apos;\\.&apos;).split(url)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; re.sub(&apos;www&apos;, &apos;mail&apos;, url)&apos;mail.digmyth.com&apos;&gt;&gt;&gt; url.split(&apos;.&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;] eg2:123456789&gt;&gt;&gt; import re&gt;&gt;&gt; name = &apos;hello world&apos;&gt;&gt;&gt; str_a, str_b = re.split(r&apos;\\s+&apos;, name)&gt;&gt;&gt; str_a, str_b(&apos;hello&apos;, &apos;world&apos;)&gt;&gt;&gt; str_a&apos;hello&apos;&gt;&gt;&gt; str_b&apos;world&apos; eg3:123456789101112root@ubuntu:~# cat put_split.py #!/usr/bin/env python3import osimport reinput = input(&quot;enter you str: &quot;).strip()cmd, path = re.split(r&apos;\\s+&apos;, input)print(cmd.strip())print(path.strip())root@ubuntu:~# python3 put_split.py enter you str: put /root/demo.txtput/root/demo.txt 编译compile正则表达式工作流程： 检测语法–&gt; 编译–&gt; 匹配当一个正则表达式多次调用时，建议预先编译好，后续直接用于匹配以提高效率 123456789&gt;&gt;&gt; p = re.compile(r&apos;[A-Z]&apos;)&gt;&gt;&gt; type(p)&lt;class &apos;_sre.SRE_Pattern&apos;&gt;&gt;&gt;&gt; p.search(&quot;I Love www.DigMyth.Com&quot;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; p.findall(&quot;I LLove www.DigMyth.Com&quot;)[&apos;I&apos;, &apos;L&apos;, &apos;L&apos;, &apos;D&apos;, &apos;M&apos;, &apos;C&apos;] 贪婪模式匹配","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-07-01-面象对象编程初级","slug":"python-07-01-面象对象编程初级","date":"2017-03-01T00:28:28.000Z","updated":"2018-02-06T09:03:55.804Z","comments":true,"path":"2017/03/01/python-07-01-面象对象编程初级/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-07-01-面象对象编程初级/","excerpt":"","text":"目录 相关概念 创建类和对象 面向对象内置变量 继承、封装、多态 抽象方法 相关概念定义： 面向对象编程(oop=object-oriented programming): 相对于面对过程编程，它只是一种编程范示。 状态和转换这种状态的操作: 状态其实就是数据，转换这种状态的操作其实就是方法 类：将同一种具体的共同特性抽象出来数据：如变量方法：函数：操作变量引用的数据的代码方法是类的组成部份，属性也是在类中定义的, 但数据是在类实例化时赋值的. 对象是类的实例，对象的某个方法的调用理解为对其发消息，或接口调用同一个类的所有对象都能接收相同的消息，也就是同种方法依赖 一个类中的方法操作另一个类的对象聚合 类A的对象包含类B的对象继承：描述特殊或具体与一般性的关系面向对象的模型机制有3原则：封装，继承，多态 类或类成员有数据和方法一个类的行为和接口是通过类的方法来定义的对象是类的实例自定义类—实例化—–对象–对象间的操作—消息传递这里消息就是调用请求 创建类和对象1234567891011121314class Foo(): data=&apos;hello world&apos; #类数据变量作用于所有实例 def __init__(self,name=&apos;default&apos;): # 构造器 self.name = name # 实例变量作用于调用对象或调用实例 def set_score(self,value): # 类方法属性 self.score = value def get_score(self): return self.scoreobj = Foo(&apos;wxq&apos;) obj.set_score(100)print(obj.get_score()) 可以给一个对象添加属性123456class Foo(): data = &apos;default data&apos;obj = Foo()obj.name = &apos;wxq&apos;print(obj.name) 可以把某个方法绑定给一个实例或 一个类，当绑定给类时，这个方法对此类的所有实例都生效方法绑定给一个实例12345678910def set_age(self,age): self.age = age class Foo(): data = &apos;default data&apos; from types import MethodTypeobj.set_age = MethodType(set_age, obj)obj.set_age(20) 方法绑定给一个类12345678910111213from types import MethodTypeclass Foo(): data = &apos;default data&apos;def set_age(self,age): self.age = ageFoo.set_age = MethodType(set_age, Foo)obj = Foo()obj.set_age(23)print(obj.age) 面向对象内置变量1 类变量作用于所有对象或实例2 实例变量作用于调用对象或调用实例3 __init__() 构造器 __del__() 析构器4 Foo.__name__ 字符串形式的类名5 Foo.__doc__ Foo的文档字符串6 Foo.__bases__ Foo的所有父类构成的元组 7Foo.moduleFoo类所在模块 8obj.classobj对象所在的类 9dir(Foo)` Foo类所有属性名组成的列表1[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;data&apos;] 10 Foo.__dict__Foo类的所有属性组成的字典1&#123;&apos;data&apos;: &apos;hello&apos;, &apos;__weakref__&apos;: &lt;attribute &apos;__weakref__&apos; of &apos;Foo&apos; objects&gt;, &apos;__dict__&apos;: &lt;attribute &apos;__dict__&apos; of &apos;Foo&apos; objects&gt;, &apos;__init__&apos;: &lt;function Foo.__init__ at 0x0000000000ABC9D8&gt;, &apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None&#125; 类的继承，封装，多态3特性继承1234567891011121314class Foo(): def f1(self): return self.f2() def f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def f2(self): return &quot;Bar.f2&quot;obj = Bar()obj.f1() # 打印Bar.f2# 描述运行过程:self=obj,没有f1就先调用父类的f1,再找当前类的f2, 不是直接找父类的f2,如果非要找父类的f2,参考下面引藏示例 有时子类直接继承父类，在继承基础上重构子类属性，那么就要用到super()方法用法： super(当前类，self.).__init__()或py3 supuer().__init__() 12345678class Foo(): def __init__(self,*args,**kwargs): passclass Bar(): def __int__(self,name,*args,**kwargs): super(Bar,self).__init__() self.name = name Boolean型判断123456789判断一个类是不是另一个类的子类issubclass(CC,PP)issubclass(PP,object)判断一个实例是不是那个类生成的isinstance(ins1,CC)判断一个实例有没有那个属性值hasattr(ins1,&apos;name&apos;) 12345678from types import FunctionTypeclass Foo(): def f1(self,name): return nameobj = Foo()print(isinstance(Foo.f1,FunctionType)) # Trueprint(isinstance(obj.f1,FunctionType)) # False 封装python数据封装只要写代码就会有，对数据结构化存储; 如1234567class Base(): def __init__(self): self.status = False self.data = None self.errors = Noneobj=Base()obj.status/obj.data/obj.errors # 这就是一种数据封装 封装可以__开头隐藏属性，但在类内部不受限制，外部是无法访问的，当然只是语法变形的隐藏，在名称空间还是能找到的123456789101112131415161718class Foo(): __N = &apos;NN&apos; def __init__(self,name): self.__name = name def __f1(self): # 外部无法直接访问 return self.__name def f2(self): return self.__f1() # 在内部调用不受限制obj = Foo(&apos;wxq&apos;)print(obj.__f1()) # 无法直接调用,直正调用还是可以的obj._Foo__f1()print(obj.f2())obj.__dict__ # &#123;&apos;_Foo__name&apos;: &apos;wxq&apos;&#125;obj.__x = &quot;xx&quot; # 语法隐藏变形是在定义类时，实例化后再__不会变形obj.__xx # 实例化后不会隐藏 继承类时，我们就想调用Foo的f2(),方法很多，这里用一下隐藏实现1234567891011121314 class Foo(): def f1(self): return self.__f2() #变形为 self._Foo__f2 def __f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def __f2(self): # self._Bar__f2 return &quot;Bar.f2&quot;obj = Bar()x=obj.f1() # 打印Foo.f2print(x) 多态python原生就是多态，没什么可说的 123456789101112131415161718192021222324252627class Animal(): def __init__(self,name): self.name = name def talk(self): pass @staticmethod def animal_talk(obj): obj.talk()class Dog(Animal): def talk(self): print(&quot;wang...&quot;)class Cat(Animal): def talk(self): print(&quot;miao miao...&quot;)d=Dog(&apos;dog&apos;)# d.talk()c = Cat(&apos;cat&apos;)# c.talk()Animal.animal_talk(d)Animal.animal_talk(c) 抽象方法抽象方法作用：定义子类必须实现的父类的某些方法使用：12345678910111213141516171819import abcclass Base(metaclass=abc.ABCMeta): @abc.abstractmethod def read(self): pass @abc.abstractmethod def write(self): passclass dev(Base): def read(self): pass def write(self): passobj = dev() 如果子类没有实现父类规定的@abc.abstractmethod装饰的方法就会报错1TypeError: Can&apos;t instantiate abstract class dev with abstract methods read, write","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-02-模块","slug":"python-05-02-模块","date":"2017-02-20T02:09:10.000Z","updated":"2018-01-03T10:57:43.240Z","comments":true,"path":"2017/02/20/python-05-02-模块/","link":"","permalink":"http://www.digmyth.com/2017/02/20/python-05-02-模块/","excerpt":"","text":"目录 相关概念 模块os 模块sys 模块time 模块random 模块pickle 模块json 模块logging 模块paramiko 模块configparser 模块MySQLdb 模块hashlib 模块uuid 模块md5 模块 相关概念 过程编程 , 函数式编程, 模块化编程是一个意思，区别于面向对象编程 面向对象编程好处：（特性: 封装，继承，多态） python程序可以分解成模块，语句，表达式和 对象 程序由模块构成 模块包含语句 语句包含表达式 表达式建立并处理对象表达式是”某事“， 语句是“做某事”即指令语句的特性：它们改变了事物，例如，赋值语句改变了变量，print改变了屏幕输出。 模块导入的使用 123456&gt;&gt;&gt; import platform&gt;&gt;&gt; print(platform.uname())uname_result(system=&apos;Linux&apos;, node=&apos;ubuntu&apos;, release=&apos;4.2.0-35-generic&apos;, version=&apos;#40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016&apos;, machine=&apos;x86_64&apos;, processor=&apos;x86_64&apos;)&gt;&gt;&gt; import platform&gt;&gt;&gt; dir(platform)[&apos;DEV_NULL&apos;, &apos;_UNIXCONFDIR&apos;, &apos;__builtins__&apos; 此处略... ] 模块导入区别 import 导入会形成以模块名同名的名称空间，如果有个方法叫uname(),那么我们调用是print(platform.uname())加上platform名称空间前缀不会冲突 123456&gt;&gt;&gt; import random # 独立名称空间&gt;&gt;&gt; random.choice([3,5,6,7,8,9]) 7&gt;&gt;&gt; from random import choice # 没有独立名称空间，当前有choice方法会覆盖，这就是区别&gt;&gt;&gt; choice([3,5,6,7,8,9])6 from-import是导入指定模块的某些方法和属性，会导入在当前名称空间里，如果当前名称空间也有choice方法，那么会覆盖choice方法。import和from-import是可执行语句，独立可执行片断，可以嵌套在if测试中，或出现在def中，这样在我们满足条件再导入模块。 己知模块查找此模块在系统中的路径，用法module_name.__file__123&gt;&gt;&gt; import random&gt;&gt;&gt; random.__file__&apos;/usr/lib/python3.4/random.py&apos; 反射有一种说法叫反射1 以字符串的形式导入模块2 以字符串的形式调用函数 例子：12345678910111213root@apt:~# cat /usr/local/lib/python2.7/dist-packages/pkg/mysql.py#!/usr/bin/python2.7def count(): return 3306root@apt:~#In [1]: var = &apos;pkg.mysql&apos;In [2]: mode = __import__(var)In [3]: mode.mysql.count()Out[3]: 3306In [4]: func = &apos;count&apos;In [5]: Func = getattr(mode.mysql, func)In [6]: Func()Out[6]: 3306 模块osMore info 详情 模块sys利用sys模块模拟#滚动条12345678import sys,timeIn [111]: for i in range(50): .....: sys.stdout.write(&quot;\\033[32;1m#\\033[0m&quot;) .....: sys.stdout.flush() .....: time.sleep(0.05) .....: ################################################## time模块random模块博客参考 几个有用的方法1234import randomprint(random.randint(1,10)) # 取1-9print(random.randrange(1,20,2)) # 步长为2，意味着取奇数print(random.sample([1,2,3,4,5,6,7,8],3)) # 取一个3个元素的列表[3, 6, 1] 生成随机码(一)123456789checkcode = &apos;&apos;for i in range(4): current=random.randrange(0,4) if current != i: tmp = chr(random.randint(65,90)) else: tmp = random.randint(0,9) checkcode += str(tmp)print(checkcode) 生成随机码(二)1234import string# print(string.ascii_uppercase + string.ascii_lowercase+string.digits)source = string.ascii_uppercase + string.ascii_lowercase+string.digitsprint(&quot;&quot;.join(random.sample(source,4))) pickle模块pickle只是python支持，那么可以序列化python内所有数据类型 在程序运行的过程中，所有的变量都是在内存中,过程中可能改变变量，程序结束，内存变量回收。此时如果没有把修改过的变量存到磁盘上，下次程序运行又是最初的变量，怎么解决这个问题，序列化就派上用场了。 序列化： 把内存中的变量变成可存储可传输的过程称为序列化，pickling反序列化：把变量从序列化对象重新读入内存称为反序列化，unpickling pickle.dump() 序列化入文件pickle.dumps() 序列化为字符串，可赋值pickle.load() 从文件加载pickle.loads() 从字符串加载 1234567891011In [27]: import pickleIn [29]: my_listOut[29]: [0, 2, 4, 6, 8, 10]In [30]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;wb&apos;) # 打开一个文件In [31]: pickle.dump(my_list, pickle_file) # 序列化入这个文件In [32]: pickle_file.close()In [33]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;rb&apos;) # 打开文件In [34]: pickle.load(pickle_file) # 从一个文件加载回来Out[34]: [0, 2, 4, 6, 8, 10] 12345678910111213In [36]: import pickleIn [37]: list1 = [&apos;wxq&apos;, 11, 22,&apos;good&apos;]In [38]: dumpsed = pickle.dumps(list1)In [39]: type(dumpsed)Out[39]: builtins.bytesIn [40]: loadsed = pickle.loads(dumpsed)In [41]: loadsedOut[41]: [&apos;wxq&apos;, 11, 22, &apos;good&apos;]In [42]: type(loadsed)Out[42]: builtins.list json模块json是各语言通用的序列化数据交换格式，只支持序列化数据类型：str int float set dict list tuple JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输，并且可以直接在Web页面中读取，这也是为什么json这么通用的原因。 1234567891011121314import json# d=&#123;&quot;user&quot;:&quot;wxq&quot;&#125;## json_s=(json.dumps(d)) # 这里d是什么不管，json.dumps后是把d 序列化为符合json标准(只支持双引号)的字符串# json.loads(json_s) # json_s必须符合json双引号标准才能反序列化## json.loads(&quot;&#123;&apos;user&apos;:&apos;wxq&apos;&#125;&quot;) # 这里虽然是字符串，但里面是单引号，不符合json标准，会报错的json_s=json.dumps(&#123;&apos;user&apos;:&apos;wxq&apos;&#125;)# 可以看到这里传入的不是标准的(双引号)，但json_dumps后成为字符串&#123;&quot;user&quot;: &quot;wxq&quot;&#125;，是符合json标准(只支持双引号)的字符串。in javascriptJSON.stringfy() # 序列化JSON.parse() # 反序列化 logging模块python的logging模块提供了标准的日志接口，我们来看一下简单用法123456789101112root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;)root@apt:/tmp# python3 log.py WARNING:root:warning messageERROR:root:error message 上面的日志是直接输出，怎么才能让应用程序日志写入文件呢？ 也很简单定义一个log.py的文件12345678910111213root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50log_file = &apos;example.log&apos;logging.basicConfig(filename=log_file,level=logging.INFO)logging.debug(&apos;program debug message ...&apos;)logging.info(&apos;info message&apos;)logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;) 运行一下log.py文件12345root@apt:/tmp# python3 log.pyroot@apt:/tmp# cat example.log INFO:root:info messageWARNING:root:warning messageERROR:root:error message 我们注意到logging.debug信息并没有写入，为什么呢？因为level=logging.INFO定义要写入日志的日志级别，只有达到定义的日志级别才会记录。 但是发现记录的日志太丑了，怎么样才能让打印的日志人性化呢，就需要格式化输出。 格式 说明 %(name)s Logger的名字 %(levelno)s 数字形式的日志级别 %(levelname)s 文本形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名 %(funcName)s 调用日志输出函数的函数名 %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示 %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数 %(asctime)s 字符串形式的当前时间。默认格式是 “2017-02-01 16:49:45,896”。逗号后面的是毫秒 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 %(message)s 用户输出的消息 如果想同时把log打印在屏幕和文件日志里，或者有日志切割的需求，可能要复杂些 logger提供了应用程序可以直接使用的接口； handler将(logger创建的)日志记录发什么方式输出，是屏幕还是文件，或二都都要； filter提供了细度过滤来决定哪些日志不要输出，如密码敏感信息； formatter决定日志记录的最终输出格式。 logger工作原理图 屏幕和文件都输出123456789101112131415161718192021222324252627282930import logging #create loggerlogger = logging.getLogger(&apos;TEST-LOG&apos;)logger.setLevel(logging.DEBUG) # create console handler and set level to debugsh = logging.StreamHandler()sh.setLevel(logging.DEBUG)# create file handler and set level to warningfh = logging.FileHandler(&quot;access.log&quot;)fh.setLevel(logging.WARNING)# create formatterformatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)# add formatter to sh and fhsh.setFormatter(formatter)fh.setFormatter(formatter)# add ch and fh to loggerlogger.addHandler(sh)logger.addHandler(fh)# &apos;application&apos; codelogger.debug(&apos;debug message&apos;)logger.info(&apos;info message&apos;)logger.warn(&apos;warn message&apos;)logger.error(&apos;error message&apos;)logger.critical(&apos;critical message&apos;) 日志切割handlers.RotatingFileHandler：按文件大小切割handlers.TimedRotatingFileHandler： 按时间切割 示例1：1大小切割略 示例2：12345678910111213141516import loggingfrom logging import handlerlogger = logging.getLogger(__name__)log_file = &quot;timelog.log&quot;#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3)fh = handlers.TimedRotatingFileHandler(filename=log_file,when=&quot;S&quot;,interval=5,backupCount=3)formatter = logging.Formatter(&apos;%(asctime)s %(module)s:%(lineno)d %(message)s&apos;)fh.setFormatter(formatter)logger.addHandler(fh)logger.warning(&quot;test1&quot;)logger.warning(&quot;test12&quot;)logger.warning(&quot;test13&quot;)logger.warning(&quot;test14&quot;) 模块paramiko123456789`pycrypto-2.6.1.tar.gz`# 下载安装apt-get install python-devpython setup.py buildpython setup.py installimport Crypto`paramiko-1.10.1.tar.gz` 下载安装python setup.py buildpython setup.py installimport paramiko 模块configparser生成如下example.ini 文件，该如何做呢12345678910111213root@ubuntu:~# cat example.ini[DEFAULT]compression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes[bitbucket.org]user = wxq[topsecret.server.com]host port = 5000forwardx11 = no 编写如下脚本执行 python3 create_example.py即可 12345678910111213141516171819root@ubuntu:~# cat create_example.py #!/usr/bin/env python3#import configparserconfig = configparser.ConfigParser()config[&quot;DEFAULT&quot;] = &#123;&apos;ServerAliveInterval&apos;: &apos;45&apos;, &apos;Compression&apos;: &apos;yes&apos;, &apos;CompressionLevel&apos;: &apos;9&apos;&#125;config[&apos;bitbucket.org&apos;] = &#123;&#125;config[&apos;bitbucket.org&apos;][&apos;User&apos;] = &apos;wxq&apos;config[&apos;topsecret.server.com&apos;] = &#123;&#125;topsecret = config[&apos;topsecret.server.com&apos;]topsecret[&apos;Host Port&apos;] = &apos;5000&apos; # mutates the parsertopsecret[&apos;Forwardx11&apos;] = &apos;no&apos; # same hereconfig[&apos;DEFAULT&apos;][&apos;Forwardx11&apos;] = &apos;yes&apos;with open(&apos;example.ini&apos;, &apos;w&apos;) as configfile: config.write(configfile) 那么有了example.ini 这样的文件，如何读取呢12345678910111213141516171819202122&gt;&gt;&gt; import configparser # 导入模块&gt;&gt;&gt; config = configparser.ConfigParser() # 类实例化&gt;&gt;&gt; config.sections() # 调用类中一个方法[]&gt;&gt;&gt; config.read(&apos;example.ini&apos;) # 文件读入[&apos;example.ini&apos;]&gt;&gt;&gt; config.sections() # 除了[DEFAULT]还有哪些区块，列表呈现[&apos;bitbucket.org&apos;, &apos;topsecret.server.com&apos;]&gt;&gt;&gt; &apos;bitbucket.org&apos; in configTrue&gt;&gt;&gt; config[&apos;bitbucket.org&apos;][&apos;user&apos;] # 指定区块指定字典键对应值&apos;wxq&apos;&gt;&gt;&gt; config[&apos;DEFAULT&apos;][&apos;compression&apos;]&apos;yes&apos;&gt;&gt;&gt; for i in config[&apos;bitbucket.org&apos;]: # 指定区块打印键... print(i) # 注意：包括[DEFAULT]区块的键也在这里呈现... usercompressionserveraliveintervalcompressionlevelforwardx11 123456789&gt;&gt;&gt; d1 = config[&apos;bitbucket.org&apos;] # 指定区块读出其实是一个字典&gt;&gt;&gt; for k,v in d1.items():... print(&quot;%s = %s&quot; % (k,v))... user = wxqcompression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes 12345678910111213141516171819202122232425root@ubuntu:~# cat wxq.txt # 有这么一个文件[section1]k1 = v1k2: v2[section2]k1 = v111&gt;&gt;&gt; import configparser&gt;&gt;&gt; config = configparser.ConfigParser()&gt;&gt;&gt; config.read(&apos;/root/wxq.txt&apos;) # 读入这样的文件[&apos;/root/wxq.txt&apos;]&gt;&gt;&gt; config.sections() # 查看这个文件的区块[&apos;section1&apos;, &apos;section2&apos;]&gt;&gt;&gt; config.items(&apos;section1&apos;) # 查看指定区块的键值对[(&apos;k1&apos;, &apos;v1&apos;), (&apos;k2&apos;, &apos;v2&apos;)]&gt;&gt;&gt; config.options(&apos;section1&apos;) ＃ 只显示指定区块的键[&apos;k1&apos;, &apos;k2&apos;]&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 判断某区块是否存在返回True/FalseFalse&gt;&gt;&gt; config.add_section(&apos;section3&apos;) # 添加一个区块&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 有了这个区块True&gt;&gt;&gt; config.set(&apos;section3&apos;, &apos;k1&apos;, &apos;v1&apos;) ＃ 添加一行配置，也就是设置一个区块的键值对&gt;&gt;&gt; config.write(open(&apos;wxq&apos;, &apos;w&apos;)) 12345678910root@ubuntu:~# cat wxq # 按照上面的写入会生成了一个新文件[section1]k1 = v1k2 = v2[section2]k1 = v111[section3]k1 = v1 123456&gt;&gt;&gt; config.remove_option(&apos;section3&apos;, &apos;k1&apos;) # 删除某键值对True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;))&gt;&gt;&gt; config.remove_section(&apos;section3&apos;) # 删除某区块True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;)) 模块MySQLdbpython连接数据库操作 建立数据库连接 创建游标cursor(用于发送sql语句，获取sql结果，解析返回结果) 关闭游标cursor curname.close() 关闭数据库连接 conname.close() 模块安装apt-get install python-mysqldb查看模块help(‘modules’)加载数据库模块import MySQLdb as mysql 创建连接，会生成一个con.cursor()的类con = mysql.connect(host=’127.0.0.1’,user=’root’,passwd=’dbpass’) 游标类实例化cur = con.cursor() cur.execute 传入一个参数执行sql语句cur.executemany 传入多个参数执行sql语句 cur.fetchall 查询执行后的结果返回所有cur.fetchmany查询执行后的结果返回多个cur.fetchone 查询执行后的结果返回一个游标回滚help(cur.scroll)scroll(self, value, mode=’relative’) cur.scroll(0,mode=’absolute’) hashlib模块用于加密相关操作，3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法123456789import hashlibstr = hashlib.sha1(b&apos;admin123&apos;) # python3中必须bytes格式str.hexdigest()&apos;f865b53623b121fd34ee5426c792e5c33af8c227&apos;str = hashlib.md5(b&apos;admin123&apos;)str.hexdigest()&apos;0192023a7bbd73250516f069df18b500&apos; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import hashlib m = hashlib.md5()m.update(b&quot;Hello&quot;)m.update(b&quot;It&apos;s me&quot;)print(m.digest())m.update(b&quot;It&apos;s been a long time since last time we ...&quot;) print(m.digest()) #2进制格式hashprint(len(m.hexdigest())) #16进制格式hash&apos;&apos;&apos;def digest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of binary data. &quot;&quot;&quot; pass def hexdigest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of hexadecimal digits. &quot;&quot;&quot; pass &apos;&apos;&apos;import hashlib# ######## md5 ########hash = hashlib.md5()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha1 ########hash = hashlib.sha1()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha256 ########hash = hashlib.sha256()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha384 ########hash = hashlib.sha384()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha512 ########hash = hashlib.sha512()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密1234import hmach = hmac.new(b&apos;wxq&apos;)h.update(b&apos;hi&apos;)print(h.hexdigest()) 来个实用例子：注意：bytes只接收ascii的值，字符串为unicode,需转为ascii样的值，比如utf-8 1234567891011121314151617root@wxq:~# cat md5.py #!/usr/bin/env python3import hashlibimport timedef create_md5(): m = hashlib.md5() m.update(bytes(str(time.time()),encoding=&apos;utf-8&apos;)) return m.hexdigest()res = create_md5()print(res)root@wxq:~# python3 md5.py ebd8a4dd680e2e29b1a44b27b2bdd2f7root@wxq:~# python3 md5.py 4e178ffe5eaa58584434d3b519708638 更多关于md5,sha1,sha256等介绍的文章.看这里 模块uuid直接来个例子：12345678910root@wxq:~# cat create_uuid.py #!/usr/bin/env python3import uuiddef create_uuid(): return (str(uuid.uuid1()))res = create_uuid()print(res)root@wxq:~# python3 create_uuid.py 2cad772c-fe7d-11e6-b3db-3a71234db8d2 模块md512345678910111213#password=form.cleaned_data[&apos;password&apos;]from utils import md5form.cleaned_data[&apos;password&apos;]=md5(form.cleaned_data[&apos;password&apos;])app01/utils/md.pyimport hashlibdef md5(text): m = hashlib.md5() m.update(text.encode(&apos;utf-8&apos;)) # python3接收bytes格式，encode后就是bytes return m.hexdigest()if __name__ == &apos;__main__&apos;: text=&apos;123&apos; return md5(text) update可以执行多次，效果一样123m.update(b&quot;hello &quot;)m.update(b&quot;world&quot;)等同于m.update(b&quot;hello world&quot;) 模块模块模块","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-01-列表解析_生成器_迭代器","slug":"python-05-01-列表解析-生成器-迭代器","date":"2017-02-18T02:53:38.000Z","updated":"2018-02-06T05:22:07.452Z","comments":true,"path":"2017/02/18/python-05-01-列表解析-生成器-迭代器/","link":"","permalink":"http://www.digmyth.com/2017/02/18/python-05-01-列表解析-生成器-迭代器/","excerpt":"","text":"目录 列表解析 生成器 迭代器 列表解析什么是列表解析？定义： 基于一个列表生成另外一个列表，或动态生成一个列表。如：12345In [26]: [ i ** 2 for i in range(2,8)] # 对原列表乘以2Out[26]: [4, 9, 16, 25, 36, 49]In [25]: [ i for i in range(1,10) if i % 2 ] # 对原列表取奇数Out[25]: [1, 3, 5, 7, 9] 练习1： 有如下文件123# cat word.txtrender practice inventory indent accelerate,trigger status,wxq. 我们计算word.txt单词个数1234567891011In [29]: f = open(&apos;/root/word.txt&apos;, &apos;r&apos;)In [31]: word_list = [ word for line in f for word in line.split() ]In [36]: print(word_list)[&apos;render&apos;, &apos;practice&apos;, &apos;inventory&apos;, &apos;indent&apos;, &apos;accelerate,&apos;, &apos;trigger&apos;, &apos;status,wxq.&apos;]In [37]: f.seek(0) # 上面读取过文件，指针己然在最后了，这里是把指针移到文件首部Out[37]: 0In [38]: len([ word for line in f for word in line.split() ]) # 计算结果为7Out[38]: 7 我们计算word.txt非空白字符数12345In [37]: f.seek(0) # 把指针移到文件首部Out[37]: 0In [41]: sum([ len(word) for line in f for word in line.split() ])Out[41]: 58 练习2： 打印一个3行5列的矩阵123In [45]: list1 = [ (x+1, y+1) for x in range(3) for y in range(5) ]In [47]: print(list1)[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)] 练习3：123&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()][&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;] 练习4：1234In [61]: L = [&apos;I&apos;, &apos;WILL&apos;, &apos;STUDY&apos;, &apos;HARD&apos;, &apos;PYTHON&apos;]In [62]: [ s.capitalize() for s in L ]Out[62]: [&apos;I&apos;, &apos;Will&apos;, &apos;Study&apos;, &apos;Hard&apos;, &apos;Python&apos;] 生成器列表解析会创建完整列表占用内存，那么有没有一种算法或机制让我们循环使用时推算出后续元素，这样节省了内存空间。定义：这种边循环边计算的机制，称为生成器generator 创建一个生成器，其中一个方法就是把前面的列表解析[] 换成()123456789101112131415161718192021222324In [107]: g = (i for i in range(4))In [108]: gOut[108]: &lt;generator object &lt;genexpr&gt; at 0x7f98a27ba150&gt;In [117]: g.send(None) Out[117]: 0In [118]: g.send(None)Out[118]: 1In [119]: next(g)Out[119]: 2In [120]: next(g)Out[120]: 3In [122]: next(g)---------------------------------------------------------------------------StopIteration Traceback (most recent call last)&lt;ipython-input-122-5f315c5de15b&gt; in &lt;module&gt;()----&gt; 1 next(g)StopIteration: 利用yield创建一个生成器，取出完整元素需要用for 循环来迭代1234567891011In [123]: def genNum(x): .....: i = 0 .....: while i &lt; x: .....: yield i .....: i += 1 In [124]: g = genNum(5)In [136]: for i in g: .....: print(i, end=&apos; &apos;) .....: 0 1 2 3 4 来看一下yield工作细节1234567891011121314151617In [138]: def consumer(): .....: print(&quot;yield starting&quot;) .....: m = yield 5 .....: print(&quot;m_values: %s&quot; % m) .....: n = yield 12 .....: print(&quot;Game over&quot;) .....: In [139]: c = consumer()In [140]: c.send(None)yield startingOut[140]: 5In [141]: c.send(&apos;to be brave&apos;)m_values: to be braveOut[141]: 12 小结: c.send(None)遇到第一个yield停止，在解释器中out yield中的值，在python yield.py却不会. c.send(‘to be brave’)会上次中止处继续，’to be brave’会赋值给yield 5,即m = ‘to be brave’, 遇到第二个yield停止. g.send(None)启动迭代器，遇到第一个yield返回.1234567891011121314151617root@apt:~/script_study# cat yield.py #!/usr/bin/env python3#def h(): print(&quot;yield starting&quot;) m = yield 5 print(&quot;m_values: %s&quot; % m) d = yield 12 print(&apos;Game over&apos;) c = h()# print test infoc.send(None)c.send(&apos;Fighting!&apos;)root@apt:~/script_study# python3 yield.py yield startingm_values: Fighting! 后面协程正是用的这个知识点。 迭代器细心的朋友不难发现生成器可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值为止。 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator 可以直接作用于for循环的对象统称为可迭代对象：Iterable 哪些是可迭代对象呢？或说可作用于for循环呢？有以下几种数据类型： 一类是集合数据类型，如list、tuple、dict、set、str等； 一类是generator，包括生成器和带yield的generator function。 可以使用isinstance()判断一个对象是否是Iterable对象：1234567891011&gt;&gt;&gt; from collections import Iterable&gt;&gt;&gt; isinstance([], Iterable)True&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)True&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable)True&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)True&gt;&gt;&gt; isinstance(100, Iterable)False 可以使用isinstance()判断一个对象是否是Iterator对象：123456789&gt;&gt;&gt; from collections import Iterator&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)True&gt;&gt;&gt; isinstance([], Iterator)False&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)False&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterator)False 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。 把list、dict、str等Iterable变成Iterator可以使用iter()函数：1234&gt;&gt;&gt; isinstance(iter([]), Iterator)True&gt;&gt;&gt; isinstance(iter(&apos;abc&apos;), Iterator)True 为什么list、dict、str等数据类型不是Iterator 呢？ 这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。 Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。 Python的for循环本质上就是通过不断调用next()函数实现的，例如： for x in [1, 2, 3, 4, 5]: pass实际上完全等价于：12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break 总结1234567凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。迭代器：能够作用于next()函数，不断向后返回值，称为迭代器 iter([1,2,3,4])生成器：yield返回，并且可以next(),是一种特殊的迭代器可迭代对象：一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个类的对象就是可迭代对象，可for循环","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-01-开发入门","slug":"web-01-开发入门","date":"2017-02-15T12:51:41.000Z","updated":"2018-01-18T03:54:37.780Z","comments":true,"path":"2017/02/15/web-01-开发入门/","link":"","permalink":"http://www.digmyth.com/2017/02/15/web-01-开发入门/","excerpt":"","text":"前言从现在开始，此时此刻写点web开发和Django 的知识，便于以后查阅学习。廖雪峰老师的博客写得特别好，我也是摘抄参考其内容。廖雪峰老师博客原文 一. HTTP协议简介web历程web开发经历几个阶段1 静态页面: 直接由编辑器生成静态html2 CGI: 交互与动态数据处理出现了CGI（common gateway interface）,由C/C++编写3 脚本语言（ASP/JSP/PHP）: 脚本语言开发效率高，与html结合紧密4 框架：mvc mtv mvvm HTTP协议服务器把网页传给浏览器，实际上就是把网页的html代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议就是HTTP HTML是一种用来定义网页的文本，会HTML就会编写网页http是在网络上传输html的协议，用于浏览器和服务器的通信 Elements显示网页的结构，Network显示浏览器和服务器的通信。我们点Network，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信。 GET / HTTP/1.1： 注：1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐 当浏览器读取到新浪首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给新浪服务器，拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出一个完整的页面。所以我们在Network下面能看到很多额外的HTTP请求。 HTTP请求流程步骤1：浏览器向服务器发送http请求 方法：GET仅请求资源 POST 会附带用户数据body部份 路径; /full/url/path 域名： 步骤2：服务器向浏览器返回HTTP响应 响应代码：200表示成功 3** 表示重定向 4** 表示客户端发送的请求有错误 5** 表示服务器处理错误 响应类型： 由Content-Type指定 通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中 步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2 Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP请求中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源 HTTP协议同时具备极强的扩展性，虽然浏览器请求的是http://www.sina.com.cn/的首页，但是新浪在HTML中可以链入其他服务器的资源，比如&lt;img src=&quot;#url&quot;/&gt;，从而将请求压力分散到各个服务器上，并且一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称WWW。 二. HTML简介HTML是一种用来定义网页的文本，会HTML就会编写网页 。其它前端知识不在这里展开。略。。。 三 . WSGI接口了解了HTTP协议和HTML文档，我们其实就明白了一个Web应用的本质就是：浏览器发送一个HTTP请求；服务器收到请求，生成一个HTML文档；服务器把HTML文档作为HTTP响应的Body发送给浏览器；浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。 所以，最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。 如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。 正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。 这个接口就是WSGI：Web Server Gateway Interface。 WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”：123def application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 上面的application()函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数： environ：一个包含所有HTTP请求信息的dict对象；start_response：一个发送HTTP响应的函数。 在application()函数中，调用：start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])就发送了HTTP响应的Header，注意Header只能发送一次，也就是只能调用一次start_response()函数。start_response()函数接收两个参数，一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示。 通常情况下，都应该把Content-Type头发送给浏览器。其他很多常用的HTTP Header也应该发送。然后，函数的返回值b&#39;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#39;将作为HTTP响应的Body发送给浏览器。 有了WSGI，我们关心的就是如何从environ这个dict对象拿到HTTP请求信息，然后构造HTML，通过start_response()发送Header，最后返回Body。 整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，底层代码不需要我们自己编写，我们只负责在更高层次上考虑如何响应请求就可以了。 不过，等等，这个application()函数怎么调用？如果我们自己调用，两个参数environ和start_response我们没法提供，返回的bytes也没法发给浏览器。 所以application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器，我们可以挑选一个来用。但是现在，我们只想尽快测试一下我们编写的application()函数真的可以把HTML输出到浏览器，所以，要赶紧找一个最简单的WSGI服务器，把我们的Web应用程序跑起来。 好消息是Python内置了一个WSGI服务器，这个模块叫wsgiref，它是用纯Python编写的WSGI服务器的参考实现。所谓“参考实现”是指该实现完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用。 运行WSGI服务我们先编写hello.py，实现Web应用程序的WSGI处理函数：12345# hello.pydef application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 然后，再编写一个server.py，负责启动WSGI服务器，加载application()函数：12345678910111213# server.py# 从wsgiref模块导入:from wsgiref.simple_server import make_server# 导入我们自己编写的application函数:from hello import application# 创建一个服务器，IP地址为空，端口是8000，处理函数是application:httpd = make_server(&apos;&apos;, 8000, application)print(&apos;Serving HTTP on port 8000...&apos;)# 开始监听HTTP请求:httpd.serve_forever()确保以上两个文件在同一个目录下，然后在命令行输入python server.py来启动WSGI服务器：python server.py 执行程序启动 四 web 框架了解了WSGI框架，我们发现：其实一个Web App，就是写一个WSGI的处理函数，针对每个HTTP请求进行响应。 但是如何处理HTTP请求不是问题，问题是如何处理100个不同的URL。方法是一个函数处理一个URL, 我们专注于写业务处理函数，URL和函数对应关系交给web框架完成，这就是 web框架其中一个价值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-04-01-装饰器","slug":"python-04-01-装饰器","date":"2017-02-04T10:08:26.000Z","updated":"2017-03-01T12:12:35.805Z","comments":true,"path":"2017/02/04/python-04-01-装饰器/","link":"","permalink":"http://www.digmyth.com/2017/02/04/python-04-01-装饰器/","excerpt":"","text":"目录 装饰器 Python装饰器，英文decorator, 以被装饰函数作为参数对其装饰。这里会用到函数，我们可以像使用变量一样使用函数，函数有对象一致特性。 函数可以被赋值给其它变量 函数可以内部再定义函数 函数可以作为参数传递给另外一个函数 函数可以直接返回给外层函数 简单函数进行装饰有这么一个函数12def hello(): return &apos;hello world&apos; 我们想在不修改原函数的情况下，让函数返回特定标签1234def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper 我们定义了一个函数maketag(),该函数有一个参数func,这个参数必须是一个函数，内部又定义了一个wrapper()函数，并直接返回给maketag()123&gt;&gt;&gt; hello = maketag(hello) # 将 hello 函数传给 maketag&gt;&gt;&gt; hello()&apos;&lt;h&gt;hello world&lt;/h&gt;&apos; 上面我们把最初hello函数传给maketag()函数并将返回赋值给变量hello,此时调用hello得到我们想要的结果。注意： maketag()返回赋值给hello,hello函数本身还存在，但函数名引用己经变为了maketag返回函数的名称wrapper,不在是原来的hello,验证一下1234567In [6]: a = maketag(hello)In [8]: a.__name__Out[8]: &apos;wrapper&apos;In [9]: hello = maketag(hello)In [10]: hello.__name__Out[10]: &apos;wrapper&apos; 总结一下：为了增强原函数hello的功能定义了一个maketag函数，它接收一个函数作为参数，maketag返回一个新的函数赋值给一个变量hello,然后hello可直接调用。 一般情况下，我们使用装饰器提供的 @ 语法糖（Syntactic Sugar）来简化上面的写法：12345678def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 像上面的情况，可以动态修改函数（或类）功能的函数就是装饰器。本质上，它是一个高阶函数，以被装饰的函数（比如上面的 hello）为参数，并返回一个包装后的函数（比如上面的 wrapper）给被装饰函数（hello）。 单/多个装饰器的使用形式装饰器的一般使用形式如下：12345678@decoratordef func(): pass等价于下面的形式：def func(): passfunc = decorator(func) 装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如：12345678910@decorator_one@decorator_twodef func(): pass等价于：def func(): passfunc = decorator_one(decorator_two(func)) 看下多个装饰器的例子，为了简单起见，下面的例子就不使用带参数的装饰器。1234567891011121314def maketag1(func): def wrapper(): return &apos;&lt;html&gt;&apos; + func() + &apos;&lt;/html&gt;&apos; return wrapper def maketag2(func): def wrapper(): return &apos;&lt;i&gt;&apos; + func() + &apos;&lt;/i&gt;&apos; return wrapper@maketag1@maketag2def hello(): return &apos;hello world&apos; 上面定义了两个装饰器，对 hello 进行装饰，上面的最后几行代码相当于：12345678def hello(): return &apos;hello world&apos; hello = maketag1(maketag2(hello))调用函数 hello：&gt;&gt;&gt; hello() &apos;&lt;html&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/html&gt;&apos; 似乎理解深刻了：当多个装饰器时，离函数定义最近的装饰器先被调用 对带参数的函数进行装饰让被装饰函数带有参数，对前面例子中的 hello() 函数进行改写使其带参数，如下： 12345678910111213def maketag(func): def wrapper(*args, **kwargs): res = func(*args, **kwargs) return &apos;&lt;h&gt;&apos; + res + &apos;&lt;/h&gt;&apos; return wrapper@maketagdef hello(name): return &apos;hello %s&apos; % name @maketagdef hello2(name1=&apos;user1&apos;, name2=&apos;user2&apos;): return &apos;hello %s, %s&apos; % (name1, name2) 由于函数 hello 带参数，因此内嵌包装函数 wrapper 也做了一点改变： 内嵌包装函数的参数传给了 func，即被装饰函数，也就是说内嵌包装函数的参数跟被装饰函数的参数对应，这里使用了 (*args, **kwargs)，是为了适应可变参数。看看使用：1234&gt;&gt;&gt; hello1(&apos;python&apos;)&apos;&lt;h&gt;hello python&lt;/h&gt;&apos;&gt;&gt;&gt; hello2(&apos;python&apos;, &apos;java&apos;)&apos;&lt;h&gt;hello python, java&lt;/h&gt;&apos; 带参数的装饰器装饰器还可以带参数，比如：123456789@decorator(args1, args2)def func(): pass等价于：def func(): passfunc = decorator(args1, args2)(func) 我们想改用标签 &lt;html&gt;...&lt;/html&gt; 是不是要再定义一个装饰器呢？不必，其实我们可以装饰器外层再定义一个函数，将标签作为参数，返回一个装饰器，比如：12345678def outer_decorator(tag): # 外层函数参数传给装饰器 def decorator(func): # 真正的装饰器参数必然是被装饰器函数func def wrapper(*args, **kwargs): # 装饰器内层函数的参数是func的参数 res = func(*args, **kwargs) # 被装饰函数正常调用# return &apos;&lt;&apos; + tag + &apos;&gt;&apos; + res + &apos;&lt;/&apos; + tag + &apos;&gt;&apos; return &apos;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&apos;.format(tag=tag, res=res) return wrapper # 内层函数作返回值返回给装饰器 return decorator # 装饰器本身作为返回值返回给最外层函数 现在，我们可以根据需要生成想要的装饰器了：1234567outer_decorator = outer_decorator(&apos;html&apos;)@outer_decoratordef hello(name): return &apos;hello %s&apos; % name &gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 上面的形式也可以写得更加简洁：123@outer_decorator(&apos;html&apos;) # @语法糖syntactic sugardef hello(name): return &apos;hello, %s&apos; % name 这就是带参数的装饰器，其实就是在装饰器外面多了一层包装，根据不同的参数返回不同的装饰器。 基于类的装饰器前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子：12345678910111213class Deco_C(object): def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): return &apos;&lt;html&gt;&apos; + self.func(*args, **kwargs) + &apos;&lt;/html&gt;&apos;@Deco_Cdef hello(name): return &apos;hello %s&apos; % name&gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 可以看到，类 Deco_C 有两个方法： __init__()：它接收一个函数作为参数，也就是被装饰的函数__call__()：让类对象可调用，就像函数调用一样，在调用被装饰函数时被调用还可以让类装饰器带参数： 123456789101112131415class Tag(object): def __init__(self, tag): self.tag = tag def __call__(self, func): def wrapper(*args, **kwargs): return &quot;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&quot;.format(res=func(*args, **kwargs), tag=self.tag) return wrapper@Tag(&apos;html&apos;)def hello(name): return &apos;hello %s&apos; % name&gt;&gt; hello(&apos;, welcome&apos;)&apos;&lt;html&gt;hello, welcome&lt;/html&gt;&apos; 需要注意的是，如果类装饰器有参数，则 init 接收此参数，而 call 接收 func函数，并多了一层wrapper(*args, **kwargs)来接收func函数的参数。 装饰器的副作用前面提到装饰器有一个瑕疵，就是被装饰函数的函数名称已经不是原来的名称了，回到最开始的例子：12345678def maketagc(func): def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 函数 hello 被 maketag 装饰后，它的函数名称已经改变了：12&gt;&gt;&gt; hello.__name__&apos;wrapper&apos; 为了消除这样的副作用，Python 中的 functool 包提供了一个 wraps 的装饰器：1234567891011121314from functools import wrapsdef maketag(func): @wraps(func) # 加上 wraps 装饰器 def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos;&gt;&gt;&gt; hello.__name__&apos;hello&apos; 小结:本质上，装饰器就是一个有返回函数的高阶函数。装饰器可以动态地修改一个类或函数的功能，通过在原有的类或者函数上包裹一层修饰类或修饰函数实现。事实上，装饰器就是闭包的一种应用，但它比较特别，以被装饰函数为参数，并返回一个函数，赋给被装饰函数，闭包则没这种限制。 装饰器生产化进阶eg1:1234567891011121314def deco(func): def wrapper(x): print(&quot;what ...&quot;) func(x) print(&apos;Game over ...&apos;) return wrapper@decodef show(x): print(x)&gt;&gt;&gt;show(&quot;I am a pythoner&quot;)what ...I am a pythonerGame over ... eg2:","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Mysql 基础篇","slug":"mysql-基础篇","date":"2017-01-29T01:41:54.000Z","updated":"2017-11-19T10:00:09.447Z","comments":true,"path":"2017/01/29/mysql-基础篇/","link":"","permalink":"http://www.digmyth.com/2017/01/29/mysql-基础篇/","excerpt":"","text":"目录 知识扫盲 基础语句 主键、外键 修改表 分组与聚合 连表查询 其它查询 shell终端获取数据 数据库操作无非就是insert`deleteupdateselete,这篇博客对mysql`数据库语句做个总结记录便于学习 知识扫盲 什么是事务： 原子性操作(不可拆分)就是要么全成功，要么全失败。 mysql语句的注释符是 --，在SQL注入或别的场景中语句形如：username=”root” and 1 =1 – and password=’123’很明显 username=&quot;root&quot; and 1 =1将永远成立， and password=’123’ 部份将被注释，这点需要注意。 基础语句基础语句过于简单，这里就简单逻列下。 创建数据库1CREATE DATABASE db1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 创建一张表注意：auto_increment表示自增，primary key 表示id 这列为主键default charset utf8指定默认字符集engine=innodb指定因默认引警 1234create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 插入数据1insert into tb1(name,age) values(&apos;wxq&apos;,20),(&apos;pp&apos;,18); 更改数据1update tb1 set age=25 where name=&apos;wxq&apos;; 删除某条数据1delete from tb1 where id&gt;1; 删除表内所有数据12delete from 表名 # 不会删除自增序列truncate table 表名 # 会删除自增序列，再次插入数据将从0开始，删除更辙底 删除表1drop table tb1 主键12345主键create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 123456组合主键create table tb1( nid int not null, num int not null, primary key(nid,num) ) 外键1constraint fk_任意字符 foreign key (department_id自己字段) references department外面的表(nid外面表的字段) 12345678外键(约束):一对多 create table tb1( id int not null primary key, name char(32) null , age int not null, department_id int not null constraint fk_department_nid foreign key (department_id) references department(nid) ) 双向外键（约束）：多对对创建主机与部门之间的多对多关系12345678910111213141516create table host (id int not null auto_increatement primary key,host char(20) not null );create table department(id int not null auto_increatement primary key,title char(20) not null);create table de_2_host (id int not null auto_increatement primary key,hid int not null,did int not null,constraint fk_hid_host foreign key (hid) references host(id)，constraint fk_did_department foreign key (did) references department(id)) 修改表1234567891011121314151617添加列：alter table 表名 add 列名 类型删除列：alter table 表名 drop column 列名修改列： alter table 表名 modify column 列名 类型; -- 类型 alter table 表名 change 原列名 新列名 类型; -- 列名，类型 添加主键： alter table 表名 add primary key(列名);删除主键： alter table 表名 drop primary key; alter table 表名 modify 列名 int, drop primary key; 添加外键：alter table 从表 add constraint 外键名称（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);删除外键：alter table 表名 drop foreign key 外键名称 修改默认值：ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;删除默认值：ALTER TABLE testalter_tbl ALTER i DROP DEFAULT; 1234show variables like &apos;%char%&apos;; 查看整个mysql字符集show create table migrate_version; 查看表字符集alter table migrate_version character set utf8; 设置表字符集或者如下条：alter table migrate_version default character set utf8 collate utf8_general_ci; 分组与聚合group by - 对列进行聚合 sum(sid),max(sid),min(sid),count(sid) - 聚合条件过滤,having count(sid) &gt; 7 123456789分组 select num from 表 group by num select num,nid from 表 group by num,nid select num,nid from 表 where nid &gt; 10 group by num,nid order nid desc select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid select num from 表 group by num having max(id) &gt; 10 特别的：group by 必须在where之后，order by之前 连表查询示例1234select A.sid,A.sname,B.captionfrom student as A left join class as B on A.class_id = class.cid; left join 表名 on 多出的数据将会出现NULL数据 rigth join 表名 on 相对left 只是表位置变化，其它没有区别 inner join 表名 on 不会出现NULL数据，没有关联的数据将不会显示 1234567891011121314151617181920连表 无对应关系则不显示 select A.num, A.name, B.name from A,B Where A.nid = B.nid 无对应关系则不显示 select A.num, A.name, B.name from A inner join B on A.nid = B.nid A表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A left join B on A.nid = B.nid B表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A right join B on A.nid = B.nid 其它查询12345678910111213141516171819202122232425262728293031323334353637a、条件 select * from 表 where id &gt; 1 and name != &apos;wxq&apos; and num = 12; select * from 表 where id between 5 and 16; select * from 表 where id in (11,22,33) select * from 表 where id not in (11,22,33) select distinct name from 表 where id in (select nid from 表) # distinct重复数所将只显示一条 b、通配符 select * from 表 where name like &apos;wxq%&apos; - wxq开头的所有（多个字符串） select * from 表 where name like &apos;wx_&apos; - wx开头的所有（一个字符） c、限制 select * from 表 limit 5; - 前5行 select * from 表 limit 4,5; - 从第4行开始的5行 select * from 表 limit 5 offset 4 - 从第4行开始的5行 d、排序 select * from 表 order by 列 asc - 根据 “列” 从小到大排列 select * from 表 order by 列 desc - 根据 “列” 从大到小排列 select * from 表 order by 列1 desc,列2 asc - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序 e、组合 组合，自动处理重合 select nickname from A union select name from B 组合，不处理重合 select nickname from A union all select name from B shell终端获取数据下面介绍在shell终端获取mysql的几种方法 用法一：123456[root@mysql ~]# mysql -p123 -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+---------------+-------+| Variable_name | Value |+---------------+-------+| Uptime | 8025 |+---------------+-------+ 用法二：1234[root@mysql ~]# mysql -p123 -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+--------+------+| Uptime | 8029 |+--------+------+ 用法三：12[root@mysql ~]# mysql -p123 -s -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;Uptime 8037 用法四：12[root@mysql ~]# echo &quot;show global status where variable_name=&apos;uptime&apos;;&quot; | mysql -N -p123Uptime 8072 123456789# echo &quot;show databases;&quot; | mysql -h 127.0.0.1 -uroot -A -p123 | tail -n +2 | head -n 2 -A 表示不自动rehash tail -n +2 表示从第二行开始打印 head -n 2表示打印前2行# echo &quot;use nova01 ; show tables;&quot; | mysql -uroot -padmin# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock -e &quot;use nova01;show tables;&quot;# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock \\ -e &quot;grant all on *.* to user1@&apos;localhost&apos; identified by \\&quot;user1\\&quot;;&quot;","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"shell getopts语法","slug":"shell-getopts语法","date":"2017-01-29T01:41:54.000Z","updated":"2018-04-23T06:58:29.638Z","comments":true,"path":"2017/01/29/shell-getopts语法/","link":"","permalink":"http://www.digmyth.com/2017/01/29/shell-getopts语法/","excerpt":"","text":"Linux shell中getopts语法是一个很高级的语法，它能让你写出很漂亮的shell,来看个例子学习下 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu:~# cat getopts.sh #!/bin/bash# a: b: c: 表示脚本运行时接受选项&lt;-a options_1&gt; &lt;-b options_2&gt; &lt;-c options_3&gt;# first: 表示友好， 给出错误选项时尽量少的打印错误信息# OPTARG 表示选项给的值# OPTIND 表示选项指针（下一位）# 比如：(-a 指针为2) (-a a1 -b 指针为4) (-a a1 -b b1 -c c1指针为7)while getopts &quot;:a:b:c:&quot; OPT;docase $OPT in a) echo &quot;a is OPTARG: $OPTARG&quot; echo &quot;a is OPTIND: $OPTIND&quot; ;; b) echo &quot;b is OPTARG: $OPTARG&quot; echo &quot;b is OPTIND: $OPTIND&quot; ;; c) echo &quot;c is OPTARG: $OPTARG&quot; echo &quot;c is OPTIND: $OPTIND&quot; ;; *) echo &quot;Usage: $0 [-a arg1] [-b arg2] [-c arg3]&quot;esacdoneshift $(($OPTIND-1))echo &quot;\\$1 is: $1&quot;root@ubuntu:~# bash getopts.sh -a a1 -b b1 -c c1 test.sha is OPTARG: a1a is OPTIND: 3b is OPTARG: b1b is OPTIND: 5c is OPTARG: c1c is OPTIND: 7$1 is: test.sh","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"python-03-02-函数","slug":"python-03-02-函数","date":"2017-01-23T12:42:06.000Z","updated":"2017-02-20T10:41:23.378Z","comments":true,"path":"2017/01/23/python-03-02-函数/","link":"","permalink":"http://www.digmyth.com/2017/01/23/python-03-02-函数/","excerpt":"","text":"目录 函数概念 普通函数 匿名函数 递归函数 闭包 高阶函数 函数概念什么是函数 函数是python为了代码最大程度地重用和最小化代码冗余而提供的基本程序结构 函数是一种设计工具，它能让程序员将复杂的程序逻辑分解为可管理的部件 函数用于将相关功能打包并参数化，一个函数可以当参数传给变量或另一个函数 python自带有许多内置函数 在python有4种函数表现形式：1234全局函数： 定义在模块中局部函数：嵌套于其它函数中lambda函数：表达式，可以出现在任意表达式可以出现的地方(又称匿名函名)方法：定义在类中与特定数据类型关联的函数，并且只能与数据类型关联一起使用. 函数语法 函数代码表现12def functionName(parameters): 函数主体代码 相关概念def 是一个可执行语句,因此可以出现在任意语句可以出现的地方，甚至可以嵌套于其它if/while语句中def 创建了一个对象并将其赋值给一个变量名，也就是函数名return 用于返回结果对象,其为可选,无return语句时函数自动返回None对象,多个返回值时用逗号分隔，并组合为元组形式返回一个对象def 语句运行之后可以在程序中通过函数后附加括号的形式进行调用 普通函数函数传参内置函数官方 详解More info 动我试试 Built-in Functions abs() dict() help() main() setattr() all() dir() hex() next() slice() any() divmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod() bin() eval() int() open() str() bool() exec() isinstance() ord () sum() bytearray() filter() issubclass() pow() super() bytes() float() iter() print() tuple() callable() format() len() property() type() chr() frozenset() list() range() vars() classmethod() getattr() locals() repr() zip() compile() globals() map() reversed() __import__() complex() hasattr() max() round() delattr() hash() memoryview() set() 拿几个作下说明：123456789101112131415ASCII编码表查询：ord(&apos;a&apos;) 字符在编码表中的数字表示chr(97) 数字在编码表中的字符表示global() 查看全局变量locals() 查看局部变量vars() 无参数时等于locals(), 有参数时vars(a) == a.__dict__ (__dict__一个对象的属性)eval() 把字符串形式的表达式解析并扫行exec() 把字符串形式的代码解析并执行compile()把文件的代码加载进来，按 eval, exec方式解析并执行# 以字符串的形式导入模块, 后面模块章节也会讲到__import__()用法mode = &apos;module_name&apos;__import__(mode) 123456789101112131415161718192021222324all()与any()区别：all:传入一个可迭代对象，对其中每个元素求bool(x),所有返回True,则返回Tru迭代对象为空时返回True，注意是为空如[]，不是空元素如[&apos;&apos;]any:传入一个可迭代对象，对其中每个元素求bool(x),任意一个返回True，则返回True迭代对象为空时，返回Falsedef all(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True. &quot;&quot;&quot; passdef any(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for any x in the iterable. If the iterable is empty, return False. &quot;&quot;&quot; pass 匿名函数123In [31]: f = (lambda x,y,z=10: x+y+z) # 匿名函数也支持默认参数 In [32]: f(4,9)Out[32]: 23 123456In [56]: L = [ (lambda x: x*2),(lambda y: y*3) ] # 匿名函数可以出现在任意表达式可以出现的地方In [56]: for i in L: ....: print(i(4)) ....: 812 递归函数定义： 一个函数的自我循环调用称为递归 阶乘 123456&gt;&gt;&gt; def fact(x):... if x &lt;= 1: return 1... else: return x * fact(x-1)... &gt;&gt;&gt; fact(4)24 汉诺塔汉诺塔： 是一个传说，大概意思就是说把一个柱子上的盘子通过第二根柱子移到第三根柱子上。。未完。。。 123456789101112131415161718192021root@ubuntu:~# cat hanoi.py #!/usr/bin/env python3def move(n, a, b, c): if n == 1: print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) else: move(n-1, a, c, b) print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) move(n-1, b, a, c)n = int(input(&quot;input: &quot;))move(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)root@ubuntu:~# python3 hanoi.py input: 3move A --&gt; Cmove A --&gt; Bmove C --&gt; Bmove A --&gt; Cmove B --&gt; Amove B --&gt; Cmove A --&gt; C 斐波那契数列 123456789101112131415161718root@ubuntu:~# cat fibonacci.py #!/usr/bin/env python3def fibonacci(): a = b = 1 yield a yield b while True: a, b = b, a+b yield bfor num in fibonacci(): if num &gt; 100: break print(num, end=&apos; &apos;)print()root@ubuntu:~# python3 fibonacci.py 1 1 2 3 5 8 13 21 34 55 89 闭包python闭包：lexical closure函数及相关环境所构成的整体, 或者说一个函数(内层函数)和它所处的环境(外层函数)所构成的整体称为python闭包在这种情况下内层函数会记住外层函数的变量，在外层函数返回时内层函数依然可以调用 eg1123456789101112131415In [123]: def f1(x): .....: def f2(y): .....: return y ** x .....: return f2 # 内层函数直接返回 .....: In [124]: f = f1(3) # f1为f2提供运行环境，记住外部变量In [125]: f Out[125]: &lt;function __main__.f1.&lt;locals&gt;.f2&gt;In [126]: f(4)Out[126]: 64In [127]: f(5)Out[127]: 125 以上例子用匿名函数lambda简写成如下12345678In [129]: def f1(x): .....: return lambda y: y ** x .....: In [131]: f = f1(3)In [132]: f(6)Out[132]: 216 高阶函数定义： 一个函数当参数传递给另一个函数，我们就称这样的函数为高阶函数.装饰器/函数闭包: 是有返回函数的高阶函数，是高阶函数的特例 高阶函数 用法说明 map(func,seq1,seq2) 将函数func作用于给定序列(s)的每个元素，并用一个列表来提供返回值，如果func为None,func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组列表 reduce(func, seq, init) 将二元函数作用于seq序列的元素，每次携带一对(先前的结果以及下一个序列无素)，连续地将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为一个单一的返回值，如果初始值init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素 filter(func,seq) 调用一个布尔函数func来迭代遍历每个seq中的元素，返回一个使func返回值为True的元素组成的序列 map()map()将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回 一个序列时1234567In [143]: def f(x): .....: return x ** 2In [144]: res = map(f, [1,2,3,4]) # 根据说明这里返回结果是一个Iterator惰性序列In [145]: list(res) # 惰性序列需要通过list()函数让它把整个序列都计算出来并返回一个listOut[145]: [1, 4, 9, 16] 二个序列时每一次同时依次取一个序列的一个值，两个序列就有2个值，那么用传入的函数作用于这2个值返回一个值,最后这些值再以列表显现。1234567In [140]: def f(x,y): return y ** xIn [141]: res = map(f, [1,2,3], [4,5,6])In [142]: list(res)Out[142]: [4, 25, 216] reduce()python3中reduce函数在functools模块里,用时需要先导入 从初始值开始，对序列折叠123456In [39]: from functools import reduceIn [50]: def add(x,y): ....: return x+y ....: In [52]: reduce(add, [1,2,3], 10) # 10为初始值Out[52]: 16 如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：123456&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])13579 这个例子本身没多大用处，但是考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()就可以写出把str转换为int的函数： 123456789&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; def char2num(s):... return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]...&gt;&gt;&gt; reduce(fn, map(char2num, &apos;13579&apos;))13579 整理成一个str2int的函数就是：12345678from functools import reducedef str2int(s): def fn(x, y): return x * 10 + y def char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s] return reduce(fn, map(char2num, s)) 还可以用lambda函数进一步简化成：1234567from functools import reducedef char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]def str2int(s): return reduce(lambda x, y: x * 10 + y, map(char2num, s)) 也就是说，假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数. filter()Python内建的filter()函数用于过滤序列。filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。 例如，在一个list中，删掉偶数，只保留奇数，可以这么写：12345def is_odd(n): return n % 2 == 1list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))# 结果: [1, 5, 9, 15] 把一个序列中的空字符串删掉，可以这么写：12345def not_empty(s): return s and s.strip()list(filter(not_empty, [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, None, &apos;C&apos;, &apos; &apos;]))# 结果: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;] 可见filter()这个高阶函数，关键在于正确实现一个“筛选”函数, 这个函数必须是一个二元函数，返回True 或 False的函数 注意到filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。 用filter求素数 计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单： 首先，列出从2开始的所有自然数，构造一个序列： 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, … 取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：取新序列的第一个数5，然后用5把序列的5的倍数筛掉：不断筛下去，就可以得到所有的素数。 用Python来实现这个算法，可以先构造一个从3开始的奇数序列：12345def _odd_iter(): n = 1 while True: n = n + 2 yield n 注意这是一个生成器，并且是一个无限序列。 然后定义一个筛选函数：12def _not_divisible(n): return lambda x: x % n != 0 最后，定义一个生成器，不断返回下一个素数：1234567def primes(): yield 2 it = _odd_iter() # 初始序列 while True: n = next(it) # 返回序列的第一个数 yield n it = filter(_not_divisible(n), it) # 构造新序列 这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。 由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：123456# 打印1000以内的素数:for n in primes(): if n &lt; 1000: print(n) else: break 小结： filter()的作用是从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。 sorted()sorted()高阶函数用于排序 sorted()语法12sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order. 先来看一个例子：123456&gt;&gt;&gt; list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]&gt;&gt;&gt; sorted(list1, key=lambda x: x[&apos;age&apos;], reverse=False) [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] 这个例子也可以写成：12345678910In [174]: def f1(x): .....: return x[&quot;age&quot;] .....: In [175]: list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]In [176]: sorted(list1, key=f1)Out[176]: [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] list1这样的迭代对象取出一个值（一个一个的字典）给key函数处理后的结果作为排序依据，而后返回另一个排续后的对象. 列表自身有个sort()方法，和sorted()有什么区别呢？ 来看个例子：123456789101112In [66]: list1Out[66]: [1, 2, 3, 4, 5]In [67]: list1.sort() # sort()方法是在原有列表上排序，这是与sorted()高阶函数的区别In [68]: list1Out[68]: [1, 2, 3, 4, 5]In [69]: list1.sort(reverse=True) # reverse表示逆序In [70]: list1 Out[70]: [5, 4, 3, 2, 1] 区别就是sorted()会生成新的对象，而列表sort()不会，如下是按字母排序的例子：12In [173]: sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], key=str.lower)Out[173]: [&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-03-01-IO","slug":"python-03-01-IO","date":"2017-01-19T18:12:36.000Z","updated":"2017-02-20T10:30:30.882Z","comments":true,"path":"2017/01/20/python-03-01-IO/","link":"","permalink":"http://www.digmyth.com/2017/01/20/python-03-01-IO/","excerpt":"","text":"目录 文件对象 OS 对象 IO 编程文件对象文件对象用于访问系统文件的接口，文件系统是计算机存储数据，组织数据的方式。计算机文件是存储在设备中的一段数据流，归属于文件系统管理之下。是计算机中由OS管理的具有名字的存储区域，对Linux而言，文件可以被看作字节序列。 序列化的对象才能存储的文件系统中，非字节序列化的数据不能存储在文件系统中的。 文件对象接口不仅用于访问普通文件，还可以访问套接字文件，管道文件。在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。 open(name[,mode[,bufsize]]) 返回的是一个文件对象。这里三个参数分别表示文件名，文件打开模式和缓冲区大小 bufsize:定义输出缓存12340 表示无输出缓存,禁用缓冲1 表示使用缓冲，只缓冲一行数据负数表示使用系统默认设置2+之后的正数表示使用指定大小缓冲 open(‘/var/log/message’, ‘r’)简单模式，首次打开的文件指针于文件首部r: 只读w: 新建文件或文件首部覆盖写入。a: 尾部追加，即打开时指针处于文件尾部 在模式后使用+表示同时支输入输出操作r+ w+ a+ 在模式后附加 b 表示二进制方式打开rb wb+ 创建一个文件对象123&gt;&gt; f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [3]: type(f)Out[3]: _io.TextIOWrapper 只读模式打开一个不存在文件是不可以的1234567In [1]: f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)---------------------------------------------------------------------------FileNotFoundError Traceback (most recent call last)&lt;ipython-input-1-07bb2dbd474f&gt; in &lt;module&gt;()----&gt; 1 f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)FileNotFoundError: [Errno 2] No such file or directory: &apos;/tmp/abc&apos; 以写模式打开一个不存在文件，这个文件会自动被创建12345678In [3]: import osIn [7]: os.path.isfile(&apos;/tmp/f1&apos;)Out[7]: FalseIn [8]: f = open(&apos;/tmp/f1&apos;, &apos;w+&apos;)In [9]: os.path.isfile(&apos;/tmp/f1&apos;)Out[9]: True 查看一个文件的描述符，描述符是一个很小的数字表示，0表示标准输入，1表示标准输出，2表示标准错误输出它们所使用的描述符12In [20]: f.fileno()Out[20]: 8 f.readline() 读文件一行数据f.readlines() 读文件指针处至尾部所有数据包括行结束符\\n，一行为一个对象，然后多行多个对象组成一个列表 返回指针在当前文件中的位置，表示在多少个字节的位置。12In [23]: f.tell()Out[23]: 597 f.seek(offset, whence) offset:表示偏移多少个字节，whence表示从 多少节字数开始偏移。下面表示回到文件首部：12In [37]: f.seek(0)Out[37]: 0 f.read() 读取给定字节123456In [44]: f.seek(0)Out[44]: 0In [45]: f.read(10)Out[45]: &apos;# /etc/fst&apos;In [46]: f.tell()Out[46]: 10 12345678910In [57]: f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [58]: f.name #返回文件名Out[58]: &apos;/etc/fstab&apos;In [59]: f.closed #返回是否关闭文件Out[59]: FalseIn [60]: f.close() #关闭文件In [61]: f.closedOut[61]: True 操作完毕会自动关闭文件对象12with open(&apos;/root/wxq.txt&apos;,&apos;w+&apos;) as f: f.write(&apos;hello world!\\n&apos;) OS 对象一些方法123456789101112131415161718192021os.path 跟文件路径相关 basename() 路径基名 dirname() 路径目录名 join() split() 返回dirname(), basename()元组 splitext() 返回(filename, extension_name)元组 信息： getatime() getctime() getmtime() getsize() 获取文件大小查询： exists() 指定文件是否存在 isabs() 指定路径是否为绝对路径 isdir() 是否为目录 isfile() 是否为文件 islink() 是否为符号链接 ismount() 是否为挂载点 samefile() 两个路径是否指向了同一个文件 __file__属性 在上面的glabals()中有一个file属性，其中保存的是程序运行的相对路径，如python3 ../py3_training/test/yy.py，则路径为../py3_training/test/yy.py在pycharm中为什么又变成了绝对路径了呢，不要认为是pycharm做了封装，是因为pycharm运行路径永远从c:\\开始，这样看不出效果 要获取程序绝对路径os.path.abspath(file)应用举例：12345678910import osimport sysbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))print(base_dir)sys.path.append(base_dir)from core import mainif __name__ == &apos;__main__&apos;: main.run() 来几个小练习，似乎参悟了1234567891011121314&gt;&gt;&gt; import os&gt;&gt;&gt; os.path.split(&apos;/root/wxq.txt&apos;)(&apos;/root&apos;, &apos;wxq.txt&apos;)&gt;&gt;&gt; os.path.splitext(&apos;/root/wxq.txt&apos;)(&apos;/root/wxq&apos;, &apos;.txt&apos;)&gt;&gt;&gt; os.path.dirname(&apos;/root/wxq.txt&apos;)&apos;/root&apos;&gt;&gt;&gt; os.path.basename(&apos;/root/wxq.txt&apos;)&apos;wxq.txt&apos;&gt;&gt;&gt; dir, file_name = os.path.split(&apos;/root/wxq.txt&apos;)&gt;&gt;&gt; dir&apos;/root&apos;&gt;&gt;&gt; file_name&apos;wxq.txt&apos;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_02_流程控制/枚举","slug":"python-02-流程控制_枚举","date":"2017-01-15T05:03:41.000Z","updated":"2017-02-22T04:09:53.601Z","comments":true,"path":"2017/01/15/python-02-流程控制_枚举/","link":"","permalink":"http://www.digmyth.com/2017/01/15/python-02-流程控制_枚举/","excerpt":"","text":"目录 流程控制 三元表达式 枚举类 流程控制ifif 玩猜数字游戏123456789101112131415#!/usr/bin/env python3i = 0try_num = 3AGE = 27while i &lt; try_num: enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) i += 1 else: print(&quot;too smaller&quot;) i+=1 if成绩查询12345678910111213141516171819#!/usr/bin/env python3__author__ = &quot;wxq&quot;enter_score = int(input(&quot;enter your score :&quot;).strip())if enter_score &lt;=100 and enter_score &gt;=0: if enter_score &gt;=90: print(&quot;A&quot;) elif enter_score &gt;=80: print(&quot;B&quot;) elif enter_score &gt;=70: print(&quot;C&quot;) elif enter_score &gt;= 60: print(&quot;D&quot;) else: print(&quot;you are too low&quot;)else: print(&quot;invalid score&quot;) while这里主要注意与shell中的区别，python里while后有else, 即while语句正常执行完后才执行else中的语句，否则不会执行。1234567891011i = 0while i &lt;3: if i &gt;=2: break print(i) i += 1else: print(&apos;end&apos;) #结果01 来个小练习12345678910111213count1 = 0while True: if count1 == 10000000: break count1 += 1print(&quot;cost&quot;, time.time() - t1_start, count1)t2_start = time.time()count2 = 0while count2 &lt; 10000000: count2 += 1print(&quot;cose&quot;, time.time() - t2_start, count2) for 很懒什么也没有留下…1234567891011121314151617181920count = 3AGE = 27for i in range(100): if i &gt;3: enter=input(&quot;are you want to keep trying ....&quot;).strip() if enter == &quot;y&quot;: count = 0 else: break enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) else: print(&quot;too smaller&quot;) count +=1 continue/breakcontinue结束本次循环，提前进入下一轮循环break 直接终止循环 1234567891011121314151617181920212223242526272829#!/usr/bin/env python3__author__ = &quot;wangxiaoqiang&quot;for i in range(10): if i == 5: for j in range(10): if j == 8: break print(&quot;inner loop&quot;,j) continue print(&quot;loop&quot;,i)结果：loop 0loop 1loop 2loop 3loop 4inner loop 0inner loop 1inner loop 2inner loop 3inner loop 4inner loop 5inner loop 6inner loop 7loop 6loop 7loop 8loop 9 三元表达式三元表达式很简单， 这里来几个小例子就明白了 条件满足为1，否则为False12n [44]: 1 if True else FalseOut[44]: 1 成员关系判断，条件满足为True, 否则为False12345In [53]: True if 1 in [1,2,3] else FalseOut[53]: TrueIn [54]: True if 0 in [1,2,3] else FalseOut[54]: False 12345In [45]: a = 10In [46]: b = 15In [47]: a if a&gt;b else bOut[47]: 15 枚举类枚举 enumerate, 在用到index和value对应关系时能用到enumerate函数，参数为可遍历对象（字符串，列表等），返回多个元组123456789101112In [3]: for i in enumerate(&apos;abc&apos;): ...: print(i) ...: (0, &apos;a&apos;)(1, &apos;b&apos;)(2, &apos;c&apos;)In [43]: for index,i in enumerate(&apos;abc&apos;, 10): ....: print(index,i) ....: 10 a11 b12 c 1234In [4]: a = enumerate(&apos;abc&apos;)In [5]: list(a)Out[5]: [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] 1234567891011121314151617181920In [6]: import stringIn [7]: s = string.ascii_uppercaseIn [8]: E = enumerate(s)In [9]: sOut[9]: &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;In [10]: list(E)Out[10]: [(0, &apos;A&apos;), (1, &apos;B&apos;),此处略...In [11]: for i in E: ....: print(i, end=&apos; &apos;) ....: In [12]: E = enumerate(s)In [13]: for i in E: print(i, end=&apos; &apos;) ....: (0, &apos;A&apos;) (1, &apos;B&apos;) (2, &apos;C&apos;) (3, &apos;D&apos;) (4, &apos;E&apos;) (5, &apos;F&apos;) (6, &apos;G&apos;) (7, &apos;H&apos;) (8, &apos;I&apos;) (9, &apos;J&apos;) (10, &apos;K&apos;) (11, &apos;L&apos;) (12, &apos;M&apos;) (13, &apos;N&apos;) (14, &apos;O&apos;) (15, &apos;P&apos;) (16, &apos;Q&apos;) (17, &apos;R&apos;) (18, &apos;S&apos;) (19, &apos;T&apos;) (20, &apos;U&apos;) (21, &apos;V&apos;) (22, &apos;W&apos;) (23, &apos;X&apos;) (24, &apos;Y&apos;) (25, &apos;Z&apos;) 枚举类用法int 常量默认从1开始，我们来看个例子 1234567891011121314151617181920212223242526272829In [16]: from enum import EnumIn [17]: Month = Enum(&apos;Month&apos;, (&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;))In [19]: print(Month.January)Month.JanuaryIn [20]: print(Month[&apos;January&apos;])Month.JanuaryIn [21]: print(Month[&apos;January&apos;].value)1In [22]: print(Month(4))Month.AprilIn [24]: for name, members in Month.__members__.items(): print(&quot;%s =&gt; %s =&gt; %s&quot; % (name, members, members.value)) ....: January =&gt; Month.January =&gt; 1February =&gt; Month.February =&gt; 2March =&gt; Month.March =&gt; 3April =&gt; Month.April =&gt; 4May =&gt; Month.May =&gt; 5June =&gt; Month.June =&gt; 6July =&gt; Month.July =&gt; 7August =&gt; Month.August =&gt; 8September =&gt; Month.September =&gt; 9October =&gt; Month.October =&gt; 10November =&gt; Month.November =&gt; 11December =&gt; Month.December =&gt; 12 自定义枚举类（自定义int常量从0开始）@unique帮助我们检查没有重复值 12345678910111213141516171819202122232425262728293031323334353637In [29]: from enum import Enum, uniqueIn [30]: @unique ....: class Myday(Enum): ....: Sun = 0 ....: Mon = 1 ....: Tue = 2 ....: Wed = 3 ....: Thu = 4 ....: Fri = 5 ....: Sat = 6 ....: In [31]: Myday.FriOut[31]: &lt;Myday.Fri: 5&gt;In [32]: print(Myday.Fri)Myday.FriIn [33]: print(Myday.Fri.value)5In [34]: print(Myday[&apos;Fri&apos;])Myday.FriIn [35]: print(Myday(5))Myday.FriIn [37]: for name, members in Myday.__members__.items(): ....: print(&quot;%s, %s, %s&quot; % (name, members, members.value)) ....: Sun, Myday.Sun, 0Mon, Myday.Mon, 1Tue, Myday.Tue, 2Wed, Myday.Wed, 3Thu, Myday.Thu, 4Fri, Myday.Fri, 5Sat, Myday.Sat, 6","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇下","slug":"python-01-基础篇下","date":"2017-01-09T02:37:13.000Z","updated":"2018-04-27T05:01:04.973Z","comments":true,"path":"2017/01/09/python-01-基础篇下/","link":"","permalink":"http://www.digmyth.com/2017/01/09/python-01-基础篇下/","excerpt":"","text":"目录 位运算 程序编码 用户交互 第四节 位运算123456位运算：&amp;与 ： 同位都为1则为1|或 ： 同位有1则为1^异或: 同位相异为1，相同为0&lt;&lt;n左移位： 左移n位(保留左位),右边补n个0&gt;&gt;n右移位： 右移n位(去掉右位),左边补n个0 &amp;运算:都为11234001100010111111100110001` |运算：或为1123001100010111111101111111 ^运算：相异为1123110011010111111110110010 &lt;&lt;3左移位：左边110保留121101000111010001000 &gt;&gt;3右移位：右边001不保留121101000100011010 第五节 程序编码bytes、str 区别python3 中bytes、str是有区别的 bytes/str的区别：bytes 是byte的序列，而str是unicode 序列 bytes并不能存储中文，需要先定义成str类型后encode()编码 之间的转换是编码，解码完成。 方式： b1 = str1.encode()/ b1.decode() 网络传输中都是用的bytes类型二进制进行传输（socket编程发送必须bytes类型） b（bytes）只能接收ASCII 的值 python3与大多数软件运行在内存中都是unicode编码 b表示方法(bytes)只能接收ASCII的值, 直接传的中文为字符串 unicode编码，一个unicode两个字节，一个汉字两个字节。 1234&gt;&gt;&gt; b1 = b&apos;hello world&apos; # bytes只能接收ASCII样的值&gt;&gt;&gt; b2 = b&apos;你好&apos; File &quot;&lt;stdin&gt;&quot;, line 1SyntaxError: bytes can only contain ASCII literal characters. 将中文转换为bytes (转为ASCII里面能支持的格式，默认为utf-8)123456&gt;&gt;&gt; b2 = &apos;你好&apos;.encode(&apos;utf-8&apos;)&gt;&gt;&gt; b3 = bytes(&apos;你好&apos;, encoding=&apos;utf-8&apos;)&gt;&gt;&gt; type(b2)&lt;class &apos;bytes&apos;&gt;&gt;&gt;&gt; b2b&apos;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd&apos; 看看下面的转换是否能领悟点什么12345678910&gt;&gt;&gt; test_str = &apos;你是最好的！&apos;&gt;&gt;&gt; test_b = test_str.encode() # 不指定时默认encode()成utf-8&gt;&gt;&gt; test_bb&apos;\\xe4\\xbd\\xa0\\xe6\\x98\\xaf\\xe6\\x9c\\x80\\xe5\\xa5\\xbd\\xe7\\x9a\\x84\\xef\\xbc\\x81&apos;&gt;&gt;&gt; for i in test_b:... print(i, end=&apos; &apos;)228 189 160 230 152 175 230 156 128 229 165 189 231 154 132 239 188 129&gt;&gt;&gt; for i in test_str:... print(i, end=&apos; &apos;)你 是 最 好 的 ！ 1234567891011121314root@ubuntu:~# cat utf-8.txt 我是最好的！root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt ϒˇخºõģ¡root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt &gt; gbk.txtroot@ubuntu:~# cat gbk.txtϒˇخºõģ¡&gt;&gt;&gt; f = open(&apos;gbk.txt&apos;, &apos;rb&apos;)&gt;&gt;&gt; test = f.read()&gt;&gt;&gt; testb&apos;\\xce\\xd2\\xca\\xc7\\xd7\\xee\\xba\\xc3\\xb5\\xc4\\xa3\\xa1\\n&apos;&gt;&gt;&gt; test.decode(&apos;gbk&apos;)&apos;我是最好的！\\n&apos;&gt;&gt;&gt; f.close() 编码总结编码过程： 任意unicode到bytes的过程解码过程： bytes到unicode的过程12345678910pycharm默认以UTF-8存数据到硬盘(unicode to UTF-8) 一个编码过程python3默认以UTF-8读数据到内存（UTF-8 to unicode） 一个解码过程#coding:utf-8 也是指明了用什么编码读数据到内存,一个解码过程#这里open虽然文件是UTF8存的，此时要以utf8读, utf8 to unicode， 是一个解码过程with open(&quot;test.txt&quot;,&apos;r&apos;,encoding=&apos;utf8&apos;) as f: f.read() python3字符串就是unicode, 任意unicode只要编码后就是bytes&apos;你好&apos;.encode(&apos;utf8&apos;) 第六节 用户交互for python2.xname = raw_input(“What is your name:”)for python3.xname = input(“What is your name:”)eg: 想要输入密码时不可见，可以利用getpass模块的getpass()方法12345678root@apt:/mnt# cat getp.py #!/usr/bin/env python3import getpasspwd = getpass.getpass(\"请输入密码：\")print(pwd)root@apt:/mnt# python3 getp.py 请输入密码：123","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇上","slug":"python-01-基础篇上","date":"2017-01-08T02:37:13.000Z","updated":"2018-04-27T04:57:42.337Z","comments":true,"path":"2017/01/08/python-01-基础篇上/","link":"","permalink":"http://www.digmyth.com/2017/01/08/python-01-基础篇上/","excerpt":"","text":"目录 python简介 python变量 数据类型 第一节 简介Python 简介 Python 安装More info: 官网 Python第一个程序斐波那契数列： 123456789# Python 3: Fibonacci series up to n&gt;&gt;&gt; def fib(n):&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; while a &lt; n:&gt;&gt;&gt; print(a, end=&apos; &apos;)&gt;&gt;&gt; a, b = b, a+b&gt;&gt;&gt; print()&gt;&gt;&gt; fib(1000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Python 注释单行注释：#多行注释：英文三引号 ‘’’‘’’say somethig‘’’有种特殊的用法,此时并非注释123456789101112131415161718192021root@apt:/mnt/proper# cat people_info.py #!/usr/bin/env python3name = input(\"your name: \").strip()age = input(\"your age: \").strip()salary = input(\"your money: \").strip()info = ''' -------- day day up ------------ name: %s age: %s salary: %s''' % (name, age, salary)print(info)root@apt:/mnt/proper# python3 people_info.py your name: wxq your age: 18your money: 5000 -------- day day up ------------ name: wxq age: 18 salary: 5000 Python代码长相123456789101112131415#!/usr/bin/env python3 # (1)程序起始行&quot;this is a test module&quot; # (2)模块文档(文档字符串)import os # (3)模块导入import sysdebug = True # (4)全局变量定义class FooClass(object): # (5)类定义 &quot;Foo class&quot; passdef func(*args, **kwargs): # (6)函数定义 &quot;test function&quot; foo = FooClass() if debug: print(&quot;run test()&quot;)if __name__ == &apos;__main__&apos;: # (7)主程序 func() 第二节 变量2.1 变量规范变量： 字母，数字，下划线且不能以数字开头，并系统己经引用的关键字不能为变量名关键字[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’,‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]1234In [2]: name = \"wxq\"In [3]: print(name)wxq 2.2 变量标准eg: age_of_name = ‘wxq’ #习惯上 AGE_OF_NAME = &quot;XX&quot; #常量 Age_Of_Name = &quot;XX&quot; #驼峰体 Age_of_name = &quot;xx&quot; #类名 第三节 数据类型3.1 数字int(整型)long(长整型) python3 中己经没有了float(浮点型)complex(复数) 3.2 布尔值True 1False 0 3.3 字符串不可变类型字符串常用功能：字符串拼接 join()方法： 用于指定字符把序列中的每一个元素连接起来1234In [11]: str = '_'In [12]: seq = ('a', 'b', 'c')In [13]: str.join(seq)Out[13]: 'a_b_c' 移除前后空白分割len()长度index()索引split()切片格式化输出% 格式化输出%s 字符串%d 数字%f 符点%r 原生字符串，不会对\\n \\t进行转换123In [5]: name = 'wxq'In [6]: print(\"hello, %s\" % name)hello, wxq 1234# 字符串.center()方法+颜色格式化输出In [22]: print(&quot;\\033[32;1m%s\\033[0m&quot; % &quot;wxq&quot;.center(50, &apos;-&apos;))-----------------------wxq------------------------ format 格式化输出12In [7]: \"&lt;&#123;tag&#125;&gt;&#123;str&#125;&lt;/&#123;tag&#125;&gt;\".format(tag='b', str='hello world')Out[7]: '&lt;b&gt;hello world&lt;/b&gt;' 3.4 列表可变类型name = [‘hello’, ‘world’]通过下标访问列表中元素，下标从0开始计数12345In [9]: name[0]Out[9]: 'hello'In [10]: name[-1]Out[10]: 'world' 列表常用操作：切片：取出多个元素追加插入修改删除扩展 3.5 字典python支持dictionary,采用key-value存储方式，在存放时根据key算出value的存放位置，这样取的时候根据key直接拿到value，这也说明了为什么字典查找速度比列表快的原因。 由于dict根据key来计算value的存储位置，就决定了dict的key必须是不可变对象，利于每次计算相同的key得出的相同的结果，这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变. 12345678910111213141516171819In [2]: dict_test = &#123;&#125;In [3]: for i in range(4): ...: k = &apos;f%s&apos; % (i+1) ...: v = &apos;v%s&apos; % i ...: dict_test[k] = v ...: In [4]: dict_testOut[4]: &#123;&apos;f1&apos;: &apos;v0&apos;, &apos;f2&apos;: &apos;v1&apos;, &apos;f3&apos;: &apos;v2&apos;, &apos;f4&apos;: &apos;v3&apos;&#125;In [5]: dict_test.get(&apos;f4&apos;)Out[5]: &apos;v3&apos;In [6]: for k,v in dict_test.items(): ...: print(k,v) ...: (&apos;f1&apos;, &apos;v0&apos;)(&apos;f2&apos;, &apos;v1&apos;)(&apos;f3&apos;, &apos;v2&apos;)(&apos;f4&apos;, &apos;v3&apos;) 3.6 元组3.7 集合可变集合集合：一组无序排列的可哈希的值，集合没有特定语法格式，使用工厂函数创建。支持： 支持集合关系测试：并集 支持成员关系测试：in /not in/迭代不支持： 索引,元素获取，切片 集合创建12345678&gt;&gt;&gt; set1 = set([1,2,3]) # 用set创建&gt;&gt;&gt; set1 &#123;1, 2, 3&#125;&gt;&gt;&gt; s1 = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125; # 或用&#123;&#125;创建&gt;&gt;&gt; s1&#123;&apos;b&apos;, &apos;c&apos;, &apos;a&apos;&#125;&gt;&gt;&gt; type(s1)&lt;class &apos;set&apos;&gt; 项目 描述 符号表示 len(s1) 返回s1项的长度 len(s1) s1.copy 制作s1的副本 s1.difference(s2) 求差集，返回所有在s1中，但不在s2中的项 s1 - s2 s1.intersection(s2) 求交集，返回所有同时在s1 s2中的项 s1 &amp; s2 s1.union(s2) 求并集，返回所有在s1或s2中的项 s1 l s2(竖线) s1.symmetric_differencee(s2) 求对称差集，返回所有在s1或s2中，但又不同时在s1 s2中的项，即并集减交集 s1 ^ s2 s1.isdisjoin(s2) 如果s1 s2没有相同项，则返回True s1.issubset(s2) 如果s1是s2的一个子集，则返回True s1.issuperset(s2) 如果s1是s2的一个父集，则返回True max(s1) 求最大值 max(s1) min(s1) 求最小值 min(s1) 3.8 集合forzent()可变集合","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"PyCharm基本使用-01","slug":"PyCharm基本使用-01","date":"2017-01-05T02:37:13.000Z","updated":"2018-04-23T06:58:15.230Z","comments":true,"path":"2017/01/05/PyCharm基本使用-01/","link":"","permalink":"http://www.digmyth.com/2017/01/05/PyCharm基本使用-01/","excerpt":"","text":"入门More info: 参考官网 下载123456789101112131415161718192021222324252627282930313233343536373839404142434445464748491 在Pycharm为你的python项目配置python解释器 Project当前项目名为&gt;&gt;Project Interpreter &gt;&gt; add Local2 在Pycharm下创建Python 文件，Python模块 File&gt;&gt;New&gt;&gt;Python file File &gt;&gt; New &gt;&gt; Python Package3 使用Pycharm安装python 三方模块 Project 当前项目名&gt;&gt; Project Interpreter &gt;&gt; 点击右侧绿色小加号4 Pycharm基本设置，例如不使用tab, tab=4空格，字体，字体颜色，主题，脚本设置，显示行号等， 如何导出入导入自定义设置 1 不使用tab,tab=4空格：Editor&gt;&gt;Code Style&gt;&gt;python 2 字体，字体颜色：Editor&gt; Color&amp;Fronts &gt;&gt; python 3 关闭自动更新：Apperance&amp; Behavior &gt; System Setting &gt;&gt; Updates 4 脚本关设置: Editor&gt;&gt; File and Code Templates &gt;&gt; Python Script 注：其它类似 5 显示行号： Editor&gt;&gt; Geratal &gt;&gt; Apperance &gt;&gt; Show Line number 注：2016.2默认显示行号 6 右侧坚线是PEP8的代码规范，提示一行不要超过120个字符 7 导出，导入你自定义的配置：File &gt;&gt; Export Settings, Import Settings5 常用快捷键，例如复制当前行，删除当前行，批量注释，缩进，查找和替换 1 常用快捷键的查询和配置：Keymap 1 Ctrl + D : 复制当前行 2 Ctrl + E : 删除当前行 3 Ctrl + Enter 快捷换行 4 Ctrl + / 快捷注释，（选中多行后可以批量注释） 5 Tab: 缩进当前行（选中多行后可以批量缩进） 6 Shift + Tab : 取消缩进（选中多行后可以批量取消缩进） 7 Ctrl + F: 查找 8 Ctrl + H : 替换 9 批量注释：ctrl + ?6 Pycharm安装插件，例如Markdown supprot,数据库支持插件等 1 Plugins &gt; Browse reposltories (下方三个按钮中间寻个)&gt;&gt; 搜索 markdown supprot &gt; Install 2 右上解View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览7 Git配置 ？ 1 需要本地安装好git 2 Version control &gt; git 3 配置了git等版本控制系统之后，可以很方便的diff查看文件的不同8 常用操作指南，例如复制文件路径，在文件管理中打开，快速定位，查看模块结构视图，tab批量换space ,TODO的使用 ， Debug的使用， 1 复制文件路径: 左侧文件列表右键选中的文 件&gt; Copy Path 2 在文件管理器中打开：右键选中的文件&gt;&gt;往下找到show In Explorer 3 快速定位： Ctrl + 某些内键模块之后，点击在源文件中展开 4 查看结构： IDE左侧边栏Structure 查看当前项目的结构 5 tab 批量换space: Editor &gt; Convert Indents 6 Todo的使用： #todo要记录的事情 7 tab页上右键 &gt;&gt; Move Right (Down) , 把当前Tab 页移到窗口右边（下边），方便对比 8 文件中右键 &gt;&gt;Local History 能够查看文件修改前后对比 9 IDE右下解能看到一些有用的信息，光标当前在第几行的基本几个字符，当前回车换行，当前编码类型 ， 当前git 分支 10 IDE 右侧边栏&gt;&gt; Database9 如何去掉烦人的波浪线？PEP8是什么？ 完","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"博客声明","slug":"declare","date":"2017-01-01T00:47:02.000Z","updated":"2018-04-23T05:58:42.174Z","comments":true,"path":"2017/01/01/declare/","link":"","permalink":"http://www.digmyth.com/2017/01/01/declare/","excerpt":"","text":". 公告 本博客属个人所有，不涉及商业用途，本人保留追究其法律责任的权利。本博客为个人随笔所写，内容大多取自网络或个人经验，包括老男孩、马哥、廖雪峰、林海峰、小甲鱼及Python开发者，纯为个人学习记录所用.按金庸武侠秘籍上说就是本博客纯属虚构，如有雷同，纯属巧合.. 如涉及版权问题及时联系作者 wxqnote@163.com","categories":[{"name":"声明","slug":"声明","permalink":"http://www.digmyth.com/categories/声明/"}],"tags":[]},{"title":"为什么写博客","slug":"为什么写博客","date":"2017-01-01T00:08:08.000Z","updated":"2018-04-23T05:56:37.662Z","comments":true,"path":"2017/01/01/为什么写博客/","link":"","permalink":"http://www.digmyth.com/2017/01/01/为什么写博客/","excerpt":"","text":". 关于作者欢迎大家来到个人博客,我来自成都无疑不幸与万幸是北漂IT engineer ! 尤如www.digmyth.com,一个想要遆造神话却总在路上的人。 . 一个选择至于为什么写博客，有很多原因, 一段时间，一个心境，一段经历，一个情怀。在一个适当的时间做适当的事，想要做的事，没有目的，如半夜突然起来想写下一段话，转身安然入睡。 . 认知时间时间对年轻人来说太快了，2016年己远去，2017年己来临,刚好2017年1月1日,此时成立博客也许是天时地利。各大互联网产品创业思路一是提供服务优化它人时间如知识产品，二是让它人上瘾拖住它的时间如微信朋友圈。会在不知不觉中时间己去，套用罗振宇跨年演讲上的一句话，有时你什么错都没有，你就是老了。可能是因为身处互联网圈的原因，信息发展太快着时让人有种焦虑感,让人很着急，告别了过去却抓不到未来。此时我要做的就是脚踏实地做自己正在做的事情，就会让自己很充实. . 共鸣共勉欲望勃发节奏飞速的当下，如果不能够保持淡定和从容，不具有宠辱不惊的修养，就很难拥有一颗平常恬淡的心境。更无法在纷乱中理清头绪，认清自我，认清形势，找准坐标，在反思中沉淀，在沉淀中积累,才不会迷失方向,才不会迷失自我。 越是浮躁越是保持淡定，越是功利越是要适度恬静.焦虑和躁动不仅会折损你的心智，更会戕害你的身体，经过了不平凡不寻常的年头，度过了最艰难的岁月,再大的风险和考验都可以轻轻的付之一笑.有定力的人才有希望，告别2016，迎来2017，善待自己，给自己的心灵除除尘，给自己的灵魂洗洗礼, 给自己多些淡定和从容. . 记录点滴记录一个想要遆造神话却总在路上的人的点滴，代表曾经来过，有些事我做过。。。","categories":[{"name":"生活","slug":"生活","permalink":"http://www.digmyth.com/categories/生活/"}],"tags":[]}]}