{"meta":{"title":"Welcome to wxq's Blog created in 2017-01-01","subtitle":null,"description":null,"author":"wxq","url":"http://www.digmyth.com"},"pages":[],"posts":[{"title":"Ubuntu k8s for  docker","slug":"kubernetes-ubuntu-docker","date":"2021-04-28T12:21:41.000Z","updated":"2021-05-13T05:42:46.392Z","comments":true,"path":"2021/04/28/kubernetes-ubuntu-docker/","link":"","permalink":"http://www.digmyth.com/2021/04/28/kubernetes-ubuntu-docker/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"sysctl TCP优化","slug":"linux-sysctl","date":"2021-03-15T01:43:54.000Z","updated":"2021-04-15T05:37:59.492Z","comments":true,"path":"2021/03/15/linux-sysctl/","link":"","permalink":"http://www.digmyth.com/2021/03/15/linux-sysctl/","excerpt":"","text":"内核参数优化1234567891011echo 2048 &gt; /proc/sys/net/core/somaxconn 每一个端口最大的监听队列的长度echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled 关闭透明页功能vm.max_map_count=655350 限制一个进程可以拥有的VMA(虚拟内存区域)的数量fs.file-max = 65536 同时修改vim /etc/security/limits.conf* soft nofile 65536* hard nofile 65536* soft nproc 65535* hard nproc 65535* soft memlock unlimited* hard memlock unlimited 每保持一个TCP连接，进程就要创建一个文件对象，约占内存3.3KB，4GB内存可以维持长达100万条长连接，客户端发送数据的话，还得为TCP对象开启接收缓冲区，这就增大了内存开销, Linux系统里，系统级、用户级、进程级都有最大打开文件数限制 系统级： 当前系统可以打开的文件数，通过fs.file-max参数修改 用户级： 指定用 户可以打开的数量，通过/etc/security/limits.conf 进程级： 单个进程可以打开的数量，通过fs.nr_open参数修改 1234为每一个TCP连接Socket分配的最少字节数或说是接收缓冲区，默认4K，最大可设8MBnet.ipv4.tcp_rmem = 4096(为TCP连接分配的最少字节数) 87380 8388608net.core.rmem_default = 2129922net.core.rmem_max = 8388608 123net.ipv4.tcp_wmem= 4096(发送缓存区最小值，默认4K) 65536 8388608net.core.wmem_default = 212992net.core.wmem_max = 8388608 1ss -n | grep ESTAB |wc -l TCP活动连接数统计 12345678910111213[root@node03 ~]# slabtop 关注dentry/filp/TCP/sock_node_cache指标 Active / Total Objects (% used) : 3721737 / 4145714 (89.8%) Active / Total Slabs (% used) : 125168 / 125168 (100.0%) Active / Total Caches (% used) : 95 / 131 (72.5%) Active / Total Size (% used) : 821348.16K / 878889.63K (93.5%) Minimum / Average / Maximum Object : 0.01K / 0.21K / 8.00K OBJS ACTIVE USE OBJ SIZE SLABS OBJ/SLAB CACHE SIZE NAME 1928862 1578283 81% 0.10K 49458 39 197832K buffer_head448077 447905 99% 0.19K 21337 21 85348K dentry （指标1）298544 297412 99% 1.00K 18659 16 298544K filp（指标2）288966 288966 100% 0.04K 2833 102 11332K TCP（指标3）233070 233070 100% 0.12K 6855 34 27420K sock_node_cache（指标4） 总结慢慢积累吧","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s基于GitlabJenkinsCICD实现","slug":"kubernetes-gitlab-jenkins-CI","date":"2021-02-21T02:51:41.000Z","updated":"2021-04-24T14:10:25.467Z","comments":true,"path":"2021/02/21/kubernetes-gitlab-jenkins-CI/","link":"","permalink":"http://www.digmyth.com/2021/02/21/kubernetes-gitlab-jenkins-CI/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"calico bug","slug":"kubernetes-calico-bug","date":"2021-02-13T07:51:41.000Z","updated":"2021-03-02T08:15:51.878Z","comments":true,"path":"2021/02/13/kubernetes-calico-bug/","link":"","permalink":"http://www.digmyth.com/2021/02/13/kubernetes-calico-bug/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"prometheus","slug":"prometheus-01","date":"2021-01-25T00:48:08.000Z","updated":"2021-01-27T03:00:54.371Z","comments":true,"path":"2021/01/25/prometheus-01/","link":"","permalink":"http://www.digmyth.com/2021/01/25/prometheus-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"kubernetes dashboard","slug":"kubernetes-dashboard","date":"2021-01-15T12:51:41.000Z","updated":"2021-01-22T03:48:33.336Z","comments":true,"path":"2021/01/15/kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2021/01/15/kubernetes-dashboard/","excerpt":"","text":"重新疏理k8s dashboard安装github地址：https://github.com/kubernetes/dashboard 在线dashboard2.1 deployment清单文件1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml 默认type为ClusterIp即只能看到Service地址，需要穿透集群边界让外部进行访问方式有ingress、NodePort、外部LoadBalance、pod HostPort端口转发、pod HostNetwork 等方式，这里采用最简单的NodePort 修改recommended.yaml清单文件123456789101112131415kind: ServiceapiVersion: v1metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboardspec: ports: - nodePort: 30443 port: 443 targetPort: 8443 selector: k8s-app: kubernetes-dashboard type: NodePort 或者跑起来后再直接修改svc/kubernetes-dashboard1kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard # type: NodePort 按你的需要添加单独的NameSpace12345678root@k8s-m:/data/dashboard# kubectl create namespace admin-ns --dry-run=client -o yamlapiVersion: v1kind: Namespacemetadata: creationTimestamp: null name: admin-nsspec: &#123;&#125;status: &#123;&#125; 按你的需要添加kubernetes-dashboard123456789root@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-nsserviceaccount/superadmin createdroot@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-ns --dry-run=client -o yamlapiVersion: v1kind: ServiceAccountmetadata: creationTimestamp: null name: superadmin namespace: admin-ns 创建一个clusterrolebinding,让内置的集群管理员角色--clusterrole=cluster-admin与刚创建的serviceaccount绑定1234567891011121314root@k8s-m:/data/dashboard# kubectl create clusterrolebinding superadmin --clusterrole=cluster-admin --serviceaccount=admin-ns:superadmin --dry-run=client -o yamlapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: creationTimestamp: null name: superadminroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: superadmin namespace: admin-ns 获取Token登录1234567891011121314151617181920212223root@k8s-m:/data/dashboard# kubectl describe sa/superadmin -n admin-nsName: superadminNamespace: admin-nsLabels: &lt;none&gt;Annotations: &lt;none&gt;Image pull secrets: &lt;none&gt;Mountable secrets: superadmin-token-gtrj5Tokens: superadmin-token-gtrj5Events: &lt;none&gt;root@k8s-m:/data/dashboard# kubectl describe secret/superadmin-token-gtrj5 -n admin-nsName: superadmin-token-gtrj5Namespace: admin-nsLabels: &lt;none&gt;Annotations: kubernetes.io/service-account.name: superadmin kubernetes.io/service-account.uid: 339d914d-3ae8-440a-a590-4a304400ef17Type: kubernetes.io/service-account-tokenData====token: eyJhbGciOiJSUzI1NiIsImtpZCI6InZk--xxx # Token字段ca.crt: 1066 bytesnamespace: 8 bytes 界面自带CPU、内存监控图，只是数据是来源于Metrics Server, 需要部署MetricsServer才能展示，如果后期要部署kube-prometheus 就不需要单独部署Metrics Server，因为它己经集成了 metrics-server github 地址： https://github.com/kubernetes-sigs/metrics-server 在线清单文件部署1kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml 发现老是无限重启，说是就绪性探测和存活性探测有问题，我这里换换镜像以及添加2个参数好了其实根源https TLS问题1234567891011121314151617181920212223242526272829spec: hostNetwork: true serviceAccountName: metrics-server containers: - name: metrics-server image: bitnami/metrics-server:0.4.1 # 可以尝试更换官方镜像 #image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1 imagePullPolicy: IfNotPresent args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-insecure-tls # 禁用https - --kubelet-use-node-status-port - --kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname # 添加地址解析类型 livenessProbe: failureThreshold: 3 httpGet: path: /livez port: https scheme: HTTPS periodSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /readyz port: https scheme: HTTPS periodSeconds: 10 ports: 总结 dashboard只是提供web GUI服务，本身并做认证授权，只是代为拿着账号向kubernetes API进行认证 dashboard 运行于pod, pod代为向kubernetes API进行认证的账号也必须是ServiceAccount账号，不可以是User自然人的属性账号 clusterrolebinding只能绑定clusterrole, rolebinding 即可以绑role,也可以绑clusterrole,口决是： 小绑大降权 Metrics-server用于收集pod内部CPU、内存使用量资源，kube-prometheus项目内部集成此功能，所以部署与否看你需要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes ingress进阶","slug":"kubernetes-ingress","date":"2021-01-12T12:51:41.000Z","updated":"2021-01-14T10:04:01.904Z","comments":true,"path":"2021/01/12/kubernetes-ingress/","link":"","permalink":"http://www.digmyth.com/2021/01/12/kubernetes-ingress/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes rbac","slug":"kubernetes-rbac","date":"2021-01-11T12:51:41.000Z","updated":"2021-01-14T04:50:59.033Z","comments":true,"path":"2021/01/11/kubernetes-rbac/","link":"","permalink":"http://www.digmyth.com/2021/01/11/kubernetes-rbac/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes secret","slug":"kubernetes-secret","date":"2021-01-03T12:51:41.000Z","updated":"2021-01-14T08:47:17.288Z","comments":true,"path":"2021/01/03/kubernetes-secret/","link":"","permalink":"http://www.digmyth.com/2021/01/03/kubernetes-secret/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes configmap","slug":"kubernetes-configmap","date":"2021-01-02T12:51:41.000Z","updated":"2021-01-11T09:55:46.529Z","comments":true,"path":"2021/01/02/kubernetes-configmap/","link":"","permalink":"http://www.digmyth.com/2021/01/02/kubernetes-configmap/","excerpt":"","text":"创建configmap12# kubectl get cm/calico-config -n kube-system -o yaml# kubectl get cm/kube-flannel-cfg -n kube-system -o yaml 12345kubectl create ns cm-nskubectl create cm -hkubectl create cm filebeat-cfg -n cm-ns \\ --from-literal=redis_host=&quot;redis.default.svc.cluster.local&quot; \\ --from-literal=log_level=&quot;Info&quot; 1234567891011121314151617181920212223kubectl get cm/filebeat-cfg -n cm-ns -o yamlapiVersion: v1data: log_level: Info redis_host: redis.default.svc.cluster.localkind: ConfigMapmetadata: creationTimestamp: &quot;2021-01-11T05:58:23Z&quot; managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: &#123;&#125; f:log_level: &#123;&#125; f:redis_host: &#123;&#125; manager: kubectl-create operation: Update time: &quot;2021-01-11T05:58:23Z&quot; name: filebeat-cfg namespace: cm-ns resourceVersion: &quot;573737&quot; uid: b06442dc-90e6-446b-8a3c-f119f26226d4 启一个pod运用configmap1234567891011121314151617181920212223242526root@k8s-m:/data/configmap# cat filebeat-pod.yaml apiVersion: v1kind: Podmetadata: name: filebeat-pod namespace: cm-nsspec: containers: - name: filebeat image: ikubernetes/filebeat:5.6.5-alpine env: - name: REDIS_HOST valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: redis_host # 定义的键名 - name: LOG_LEVEL valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: log_level # 定义的键名root@k8s-m:/data/configmap# kubectl apply -f filebeat-pod.yaml#pod内部是能查到的定义变量的root@k8s-m:/data/configmap# kubectl exec -it pods/filebeat-pod -n cm-ns -- env | grep REDIS_HOSTREDIS_HOST=redis.default.svc.cluster.local 定义2个数据文件123456789101112131415161718root@k8s-m:/data/configmap/nginx# cat server1.conf server &#123; server_name www.first.com; listen 80; location / &#123; root &quot;/html/first&quot;; &#125;&#125;root@k8s-m:/data/configmap/nginx# cat server2.conf server &#123; server_name www.second.com; listen 80; location / &#123; root &quot;/html/second&quot;; &#125;&#125; 创建nginx-cfg1kubectl create cm nginx-cfg --from-file=server1.conf --from-file=server-sec.conf=server2.conf -n cm-ns pod使用nginx-cfg12345678910111213141516171819202122232425262728[root@k8smaster nginx]# cat nginx-pod.yaml apiVersion: v1kind: Podmetadata: name: nginx-pod namespace: cm-nsspec: containers: - name: nginx-t image: nginx volumeMounts: - name: config-vol mountPath: /etc/nginx/conf.d/ volumes: - name: config-vol configMap: name: nginx-cfg items: - key: server1.conf # 定义configmap时的key path: server-first.conf # pod内部的文件名 - key: server-sec.conf # 定义configmap时的key path: server-second.conf # pod内部的文件名[root@k8smaster nginx]# kubectl apply -f nginx-pod.yaml[root@k8smaster nginx]# kubectl exec -it pods/nginx-pod -n cm-ns -- ls /etc/nginx/conf.dserver-first.conf server-second.confkubectl edit cm/nginx-cfg -n cm-ns # 修改能在60s生效 总结configmap也是一种存储卷，特殊的存储卷，用于保存pod内程序变量配置或文件等","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-csi-nfs","slug":"kubernetes-csi-nfs","date":"2021-01-01T13:52:41.000Z","updated":"2021-05-14T08:41:03.215Z","comments":true,"path":"2021/01/01/kubernetes-csi-nfs/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-csi-nfs/","excerpt":"","text":"简介要实现kubernetes中动态创建pv必须先创建StorageClass，每一个StorageClass对应了一个provisioner，kubernetes中内置了很多provisioner，但是很难受的是没有内置的nfs provisioner，对于我们这种没有钱的玩家，nfs是实现后端存储最简单直接的方法，所以不知道为什么k8s不提供，但是没关系有方法实现，k8s允许提供外部的provisioner，而nfs可以使用nfs-client-provisioner项目链接1https://github.com/kubernetes-retired/external-storage/tree/master/nfs-client 创建nfs server1234yum install nfs-utils -y[root@node02 deploy]# cat /etc/exports/csc-nfsdata/ *(rw,sync,no_root_squash)[root@node02 deploy]# 开放防火墙123456789101112vim /etc/nfs.conf[mountd]port=port-number# This adds the -p port-number option to the rpc.mount command line: rpc.mount -p port-number.firewall-cmd --permanent --add-service mountdfirewall-cmd --permanent --add-service rpc-bindfirewall-cmd --permanent --add-service nfsfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/tcpfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/udpfirewall-cmd --reload 配置NFS-Client provisioner,首先clone这个项目1git clone https://github.com/kubernetes-retired/external-storage.git 之后进入nfs-client/deploy/文件夹 可以看到有下面几个文件12345678910cd nfs-client/deploy/[root@nginx1-pro deploy]# ll总用量 28-rw-r--r-- 1 root root 225 9月 3 14:26 class.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 1030 9月 3 13:17 deployment-arm.yaml-rw-r--r-- 1 root root 1040 9月 3 13:30 deployment.yaml ## 需要改自己的nsdrwxr-xr-x 2 root root 214 9月 3 13:32 objects-rw-r--r-- 1 root root 1834 9月 3 13:19 rbac.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 241 9月 3 13:55 test-claim.yaml-rw-r--r-- 1 root root 399 9月 3 13:38 test-pod.yaml 首先你要做的是创建一个独立的命名空间12[root@k8smaster ~]# kubectl create ns csi-nfsnamespace/csi-nfs created 之后修改rbac.yaml和deployment.yaml的namespace为你创建的namespace 修改完成之后我们修改deployment.yaml123456789101112 env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.1.11 - name: NFS_PATH value: /data/kubernetesvolumes: - name: nfs-client-root nfs: server: 192.168.1.11 path: /data/kubernetes 执行rbac 和deploy yaml文件1234567891011121314151617181920212223242526[root@node02 deploy]# kubectl apply -f rbac.yamlserviceaccount/nfs-client-provisioner createdclusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner createdclusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner createdrole.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner createdrolebinding.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner created[root@node02 deploy]#[root@node02 deploy]# kubectl apply -f deployment.yamldeployment.apps/nfs-client-provisioner created[root@node02 deploy]# [root@node02 deploy]# kubectl apply -f class.yaml storageclass.storage.k8s.io/managed-nfs-storage created[root@node02 deploy]#查看cs [root@node02 deploy]# kubectl get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEmanaged-nfs-storage fuseim.pri/ifs Delete Immediate false 20s[root@node02 deploy]# cat class.yamlapiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: managed-nfs-storageprovisioner: fuseim.pri/ifs # or choose another name, must match deployment&apos;s env PROVISIONER_NAME&apos;parameters: archiveOnDelete: &quot;false&quot; provisioner就是刚才deployment中的PROVISIONER_NAME，还有一个比较关键的参数是archiveOnDelete，如果你想在删除了pvc之后还保留数据的话需要把这个参数改为true，不然你删除了pvc同时pv也会删除，然后数据也会丢失1234567kubectl apply class.yamlkubectl apply -f class.yaml很简单，只要pvc有annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot; pvc就能动态的创建出来 尝试创建123456789101112131415161718192021222324[root@node02 deploy]# kubectl apply -f test-claim.yaml [root@node02 deploy]# cat test-claim.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: test-claim annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi[root@node02 deploy]# 查看pv和pvc[root@node02 deploy]# kubectl get pv,pvcNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpersistentvolume/pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX Delete Bound default/test-claim managed-nfs-storage 29mNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpersistentvolumeclaim/test-claim Bound pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX managed-nfs-storage 29m[root@node02 deploy]# 尝试删除pvc，查看pv也会被删除，只不过pv中的数据不会被删除。需要注意的是删除pvc之前要把所使用的pod 删除掉 pending排障如果你部署的kubernetes是v1.20 v1.21.0以上,那么需要修改kube-apiserver.yaml支持selfLink功能 日志查看1/var/log/containers/nfs-client-provisioner-6b4 解决办法1234567891011121314参考： www.orchome.com/10024解决方法是编辑/etc/kubernetes/manifests/kube-apiserver.yaml在这里：spec: containers: - command: - kube-apiserver添加这一行：- --feature-gates=RemoveSelfLink=false然后应用它，即可kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml 总结 参考","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes volumes","slug":"kubernetes-volumes","date":"2021-01-01T12:51:41.000Z","updated":"2021-01-11T09:55:36.757Z","comments":true,"path":"2021/01/01/kubernetes-volumes/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-volumes/","excerpt":"","text":"12# kubectl explain pods.spec.volumes# kubectl explain pods.spec.containers.volumeMounts hostPath 为node节点本地卷1234567891011121314151617181920212223root@k8s-m:/data/volumes# cat 01-volume-demo.yaml apiVersion: v1kind: Podmetadata: name: vol-demo namespace: vol labels: app: vol-demospec: nodeName: k8s-n containers: - name: vol-demo image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: webstore volumes: - name: webstore hostPath: path: /volumes/vol-demo type: DirectoryOrCreateroot@k8s-m:/data/volumes# kubectl apply -f 01-volume-demo.yaml empty 临时存储，pod重启数据丢失12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 02-emptydir.yaml apiVersion: v1kind: Podmetadata: name: vol-emptydir-pod namespace: volspec: volumes: - name: html emptyDir: &#123;&#125; containers: - name: nginx image: nginx:1.14-alpine volumeMounts: - name: html mountPath: /usr/share/nginx/html - name: createpage image: alpine volumeMounts: - name: html mountPath: /html command: [&quot;/bin/sh&quot;,&quot;-c&quot;] args: - while true;do echo $(hostname) $(date) &gt;&gt; /html/index.html; sleep 2; doneroot@k8s-m:/data/volumes# kubectl apply -f 02-emptydir.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESvol-emptydir-pod 2/2 Running 0 2m47s 172.16.234.11 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q http://172.16.234.11vol-emptydir-pod Mon Jan 11 03:30:24 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:26 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:28 UTC 2021 # 正如我们期望的那样，每2秒钟生成一条记录 nfs 存储卷12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 03-nfs-pod.yaml apiVersion: v1kind: Podmetadata: name: liveness-httpget-pod namespace: volspec: containers: - name: liveness-httpget-pod image: nginx imagePullPolicy: IfNotPresent ports: - name: http containerPort: 80 livenessProbe: httpGet: port: http path: /index.html initialDelaySeconds: 1 periodSeconds: 3 volumeMounts: - name: html mountPath: /usr/share/nginx/html/ volumes: - name: html nfs: path: /nginx_share server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 03-nfs-pod.yamlapt install nfs-kernel-serverroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESliveness-httpget-pod 1/1 Running 0 16m 172.16.234.13 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q 172.16.234.13test nginx for nfs vol # 成功 redis Pod挂载nfs类型的卷,实现重建pod数据不丢失1234567891011121314151617181920212223242526272829303132333435363738394041424344root@k8s-m:/data/volumes# cat 04-nfs-redis.yaml apiVersion: v1kind: Podmetadata: name: redis namespace: vol labels: app: redisspec: containers: - name: redis image: redis:5.0.4 ports: - name: redis-port containerPort: 6379 volumeMounts: - name: data mountPath: /data volumes: - name: data nfs: path: /vols/v6 server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESredis 1/1 Running 0 12m 172.16.234.12 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; set name wxqOK127.0.0.1:6379&gt; set age 25OK127.0.0.1:6379&gt; saveOKroot@k8s-m:/data/volumes# kubectl delete -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; get name&quot;wxq&quot; # 挂载卷后数据仍然存在 利用 nfs创建一个pv123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 01-pv-nfs.yaml apiVersion: v1kind: PersistentVolumemetadata: name: test-vol labels: storages: nfsspec: capacity: storage: 2Gi volumeMode: Filesystem accessModes: - ReadWriteMany - ReadWriteOnce - ReadOnlyMany persistentVolumeReclaimPolicy: Retain nfs: server: 192.168.1.10 path: /vols/v7root@k8s-m:/data/volumes/pvc# kubectl apply -f 01-pv-nfs.yaml 创建pvc123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 02-pvc-nfs-yaml apiVersion: v1kind: PersistentVolumeClaimmetadata: name: test-pvc namespace: volspec: accessModes: - ReadWriteOnce volumeMode: Filesystem resources: requests: storage: 1Gi#storageClassName: slow# selector:# matchLabels:# release: &quot;stable&quot;# matchExpressions:# - &#123;key: environment, operator: In, values: [dev]&#125;root@k8s-m:/data/volumes/pvc# kubectl apply -f 02-pvc-nfs-yaml 创建一个pod申请pvc12345678910111213141516171819202122232425262728root@k8s-m:/data/volumes/pvc# cat 03-pod-demo.yaml apiVersion: v1kind: Podmetadata: name: pvc-pod-demo namespace: vol labels: app: pvc-podspec: nodeName: k8s-n containers: - name: pvc-pod image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: testpvc volumes: - name: testpvc persistentVolumeClaim: claimName: test-pvcroot@k8s-m:/data/volumes/pvc# kubectl apply -f 03-pod-demo.yamlroot@k8s-m:/data# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEtest-vol 2Gi RWO,ROX,RWX Retain Bound vol/test-pvc 11mroot@k8s-m:/data# kubectl get pvc -n volNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEtest-pvc Bound test-vol 2Gi RWO,ROX,RWX 6m47s 总结无它，唯手熟而，理解运用更重要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Ubuntu20.04 Run k8s","slug":"Kubernetes-ubuntu20.04","date":"2020-12-30T12:51:41.000Z","updated":"2021-01-11T09:55:23.613Z","comments":true,"path":"2020/12/30/Kubernetes-ubuntu20.04/","link":"","permalink":"http://www.digmyth.com/2020/12/30/Kubernetes-ubuntu20.04/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"ELF日志系统实践","slug":"log_elk_实践","date":"2020-12-15T02:12:36.000Z","updated":"2021-04-19T06:15:27.618Z","comments":true,"path":"2020/12/15/log_elk_实践/","link":"","permalink":"http://www.digmyth.com/2020/12/15/log_elk_实践/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb cluster recovery","slug":"mariadb-cluster-recovery","date":"2020-07-10T01:41:54.000Z","updated":"2020-07-06T10:59:33.024Z","comments":true,"path":"2020/07/10/mariadb-cluster-recovery/","link":"","permalink":"http://www.digmyth.com/2020/07/10/mariadb-cluster-recovery/","excerpt":"","text":"mariadb cluster recovery列几个集群检查命令1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+----------------------------------------------+| Variable_name | Value |+--------------------------+----------------------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306,10.0.0.53:3306 |+--------------------------+----------------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 3 |+--------------------+-------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_state_uuid&apos;;+--------------------------+-----------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------+| wsrep_cluster_state_uuid | 345098abd2-291a-9893-acbd3-30923abcdef9 |+--------------------------+-----------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_local_state_comment&apos;;+---------------------------+--------+| Variable_name | Value |+---------------------------+--------+| wsrep_local_state_comment | Synced |+---------------------------+--------+1 row in set (0.01 sec) 场景一 只是很简单的某节点掉线，重启让其重新加入集群即可1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+-------------------------------+| Variable_name | Value |+--------------------------+-------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306 |+--------------------------+-------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 2 |+--------------------+-------+1 row in set (0.01 sec) 1# systemctl restart mariadb 场景二 唯一有一个幸存节点1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 1 |+--------------------+-------+1 row in set (0.01 sec) 幸存节点刚好优雅关闭正确提交了数据，状态为Primary1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_status&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_cluster_status | Primary |+----------------------+---------+1 row in set (0.01 sec) 哪果是non-Primary状态还要单独恢复幸存节点上执行1MariaDB [(none)]&gt; set global wsrep_provider_options=&apos;pc.bootstrap=YES&apos;; 可是 我们一般不这样做，常规做法是直接指定这个幸存节点的主节点，让其它节点加入集群123# systemctl stop mariadb# galera_new_cluster# systemctl restart mariadb 场景三集群崩溃完全不可用,这也分为2种情况，基于最高seqno值恢复状态一是没有集群UUID, seqno: -1,数据定义语言DDL出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 00000000-0000-0000-0000-000000000000seqno: -1safe_to_bootstrap: 0 状态2是有集群UUID，seqno: -1，事务处理数据时出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: -1safe_to_bootstrap: 0 状态3是有集群UUID，seqno值最高正值123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: 31929safe_to_bootstrap: 1 此时我们认为状态3是OK的，需要修改状态１、２数据库配置文件去掉IP地址配置项1wsrep_cluster_address=&quot;gcomm://&quot; 这样节点就能正常启动了1systemctl restart mariadb 最后再修改配置文件后把这2个节点正常加入集群就好了1wsrep_cluster_address=&quot;gcomm://10.8.8.53,10.8.8.54,10.8.8.55&quot; 最后是基于Last Committed恢复先修改配置文件让服务启起来，入库查看wsrep_last_committed123#systemctl stop mariadb 编辑配置文件去掉IP地址wsrep_cluster_address=&quot;gcomm://&quot;#systemctl start mariadb 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_last_committed&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_last_committed | 319589 |+----------------------+---------+1 row in set (0.01 sec) 找到节点最大值认为就是主节点，然后在这个主节点上1# galera_new_cluster 其它节点加入集群即可","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"openstack-HA","slug":"openstack-HA","date":"2020-03-14T01:41:54.000Z","updated":"2020-03-29T03:13:34.557Z","comments":true,"path":"2020/03/14/openstack-HA/","link":"","permalink":"http://www.digmyth.com/2020/03/14/openstack-HA/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"calico-原理剖析","slug":"calico-原理剖析","date":"2020-03-07T01:42:54.000Z","updated":"2021-01-07T06:05:08.285Z","comments":true,"path":"2020/03/07/calico-原理剖析/","link":"","permalink":"http://www.digmyth.com/2020/03/07/calico-原理剖析/","excerpt":"","text":"arp之calico本质参考戳穿 Calico 的谎言 什么是代理ARP？当 ARP 请求目标跨网段时，网关设备收到此ARP请求会用自己的MAC地址返回给请求者,这就是代理arp. 实现MAC地址代理,最终使得主机能够通信. 知识点： 跨网段通信时会发广播得到网关MAC 之后发出的网络数据包目标MAC是网关的MAC 网关的IP地址不会出现在任何网络包头中 因此，没有人在乎网关地址是否真的存在，只要设备能响应ARP就行了 我这里用了2台linux主机实验，主机A：192.168.1.109 主机B:192.168.1.110主机A：1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.10/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-A ~]#ip netns exec ns0 route -n # 命名空间里的路由Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.10 dev veth0ip route add 10.10.10.20 via 192.168.1.110 dev eth0 主机B:1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.20/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-B ~]# ip netns exec ns0 route -n Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.20 dev veth0ip route add 10.10.10.10 via 192.168.1.109 dev eth0 Linux主机打开路由转发1net.ipv4.ip_forward = 1 网卡开启代理ARP功能1echo 1 &gt; /proc/sys/net/ipv4/conf/veth0/proxy_arp 主机A上网络通信测试12345[root@testarp-A ~]# ip netns exec ns0 ping 10.10.10.20PING 10.10.10.20 (10.10.10.20) 56(84) bytes of data.64 bytes from 10.10.10.20: icmp_seq=1 ttl=62 time=0.951 ms64 bytes from 10.10.10.20: icmp_seq=2 ttl=62 time=0.484 ms64 bytes from 10.10.10.20: icmp_seq=3 ttl=62 time=0.556 ms 1234567[root@testarp-A ~]# tcpdump -nni veth0tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on veth0, link-type EN10MB (Ethernet), capture size 262144 bytes08:18:15.999200 IP 10.10.10.10 &gt; 10.10.10.20: ICMP echo request, id 1486, seq 1, length 6408:18:16.000288 IP 10.10.10.20 &gt; 10.10.10.10: ICMP echo reply, id 1486, seq 1, length 6408:18:21.008712 ARP, Request who-has 10.10.10.20 tell 10.10.10.10, length 2808:18:21.008757 ARP, Reply 10.10.10.20 is-at ee:46:7c:2e:d9:ba, length 28 注意： 这里veth0充当路由角色代理ARP, who is 10.10.10.20 ,返回自己MACee:46:7c:2e:d9:ba来响应. 转发过程分析：1 广播寻找目标IP对应MAC是谁？2 根据路由规则所有数据包都会转发到169.254.1.1，寻找169.254.1.1MAC是谁？2 vet0开启代理ARP进行ARP拦截，返回自己MACee:46:7c:2e:d9:ba给以响应3 封包目标IP为10.10.10.20，MAC为ee:46:7c:2e:d9:ba,发出这样的数据包4 主机A查询本地路由，匹配10.10.10.20 via 192.168.1.110 dev eth0 会把包发送给192.168.1.1105 主机B收到10.10.10.20的包时，匹配本地路由10.10.10.20 dev veth0 scope link,数据包发送到veth0上6 完成通信，回程类似","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"corosync/PacemakerHA","slug":"linux-pacemaker-corosync","date":"2020-02-15T01:42:54.000Z","updated":"2020-03-29T01:27:23.789Z","comments":true,"path":"2020/02/15/linux-pacemaker-corosync/","link":"","permalink":"http://www.digmyth.com/2020/02/15/linux-pacemaker-corosync/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"ingress-nginx 基础","slug":"ingress-nginx","date":"2020-01-20T12:51:41.000Z","updated":"2021-01-14T07:57:51.296Z","comments":true,"path":"2020/01/20/ingress-nginx/","link":"","permalink":"http://www.digmyth.com/2020/01/20/ingress-nginx/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"openvswit_vlan流表","slug":"openvswit_vlan流表","date":"2020-01-01T01:41:54.000Z","updated":"2020-01-13T03:44:37.630Z","comments":true,"path":"2020/01/01/openvswit_vlan流表/","link":"","permalink":"http://www.digmyth.com/2020/01/01/openvswit_vlan流表/","excerpt":"","text":"如果计算节点关闭防火墙，配置文件如下，那么就不会产生bridge桥及相应iptables规则 ml2部份配置文件如下123[securitygroup]#enable_security_group = True#firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver linuxBridge桥接口就会为空12kvm-app-6:~ # brctl show # 为空bridge name bridge id STP enabled interfaces 查看某虚机接口信息123456789kvm-app-6:~ # virsh list Id Name State---------------------------------------------------- 1 instance-00000793 runningkvm-app-6:~ # virsh domiflist instance-00000793Interface Type Source Model MAC-------------------------------------------------------tap790c394d-70 bridge br-int virtio fa:16:3e:1f:11:99 ovs-vsctl show1234567891011121314151617181920212223242526272829303132kvm-app-6:~ # ovs-vsctl show8ba4a76e-8c27-4807-a65a-f05b22a3ef76 Manager &quot;ptcp:6640:127.0.0.1&quot; is_connected: true Bridge br-int Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port int-br-ex Interface int-br-ex type: patch options: &#123;peer=phy-br-ex&#125; Port &quot;tap790c394d-70&quot; tag: 1 Interface &quot;tap790c394d-70&quot; Port br-int Interface br-int type: internal Bridge br-ex Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port phy-br-ex Interface phy-br-ex type: patch options: &#123;peer=int-br-ex&#125; Port br-ex Interface br-ex type: internal Port &quot;bond0&quot; Interface &quot;bond0&quot; ovs_version: &quot;2.7.6&quot; 查看br-int桥接口信息ovs-ofctl show br-int12345678910111213141516171819kvm-app-6:~ # ovs-ofctl show br-intOFPT_FEATURES_REPLY (xid=0x2): dpid:00002a77dbc2860an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(int-br-ex): addr:3e:38:8a:6e:c1:de config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(tap790c394d-70): addr:fe:16:3e:1f:11:99 config: 0 state: 0 current: 10MB-FD COPPER speed: 10 Mbps now, 0 Mbps max LOCAL(br-int): addr:2a:77:db:c2:86:0a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-int流表规则ovs-ofctl dump-flows br-int12345678910111213kvm-app-6:~ # ovs-ofctl dump-flows br-intNXST_FLOW reply (xid=0x4): cookie=0x8372d932b48e5321, duration=5395.262s, table=0, n_packets=0, n_bytes=0, idle_age=5395, priority=10,icmp6,in_port=2,icmp_type=136 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=5395.261s, table=0, n_packets=505, n_bytes=21210, idle_age=7, priority=10,arp,in_port=2 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=7776.549s, table=0, n_packets=366813, n_bytes=36441400, idle_age=5395, priority=2,in_port=1 actions=drop cookie=0x8372d932b48e5321, duration=5395.264s, table=0, n_packets=817, n_bytes=74814, idle_age=4, priority=9,in_port=2 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=5395.379s, table=0, n_packets=840145, n_bytes=83511042, idle_age=0, priority=3,in_port=1,dl_vlan=11 actions=mod_vlan_vid:1,NORMAL cookie=0x8372d932b48e5321, duration=7776.964s, table=0, n_packets=4, n_bytes=320, idle_age=7776, priority=0 actions=NORMAL cookie=0x8372d932b48e5321, duration=7776.965s, table=23, n_packets=0, n_bytes=0, idle_age=7776, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.263s, table=24, n_packets=0, n_bytes=0, idle_age=5395, priority=2,icmp6,in_port=2,icmp_type=136,nd_target=fe80::f816:3eff:fe1f:1199 actions=NORMAL cookie=0x8372d932b48e5321, duration=5395.262s, table=24, n_packets=502, n_bytes=21084, idle_age=7, priority=2,arp,in_port=2,arp_spa=10.8.25.220 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=7776.964s, table=24, n_packets=3, n_bytes=126, idle_age=5357, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.265s, table=25, n_packets=1319, n_bytes=95898, idle_age=4, priority=2,in_port=2,dl_src=fa:16:3e:1f:11:99 actions=NORMAL 查看br-ex交换机接口信息ovs-ofctl show br-ex123456789101112131415161718 kvm-app-6:~ # ovs-ofctl show br-exOFPT_FEATURES_REPLY (xid=0x2): dpid:0000aa081303781an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(bond0): addr:82:01:9b:1b:28:c9 config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(phy-br-ex): addr:c2:06:bb:33:da:7a config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max LOCAL(br-ex): addr:aa:08:13:03:78:1a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-ex流表信息12345kvm-app-6:~ # ovs-ofctl dump-flows br-exNXST_FLOW reply (xid=0x4): cookie=0x90f6220dc9413e6e, duration=5441.562s, table=0, n_packets=1328, n_bytes=96564, idle_age=3, priority=4,in_port=2,dl_vlan=1 actions=mod_vlan_vid:11,NORMAL cookie=0x90f6220dc9413e6e, duration=7822.731s, table=0, n_packets=0, n_bytes=0, idle_age=7822, priority=2,in_port=2 actions=drop cookie=0x90f6220dc9413e6e, duration=7822.733s, table=0, n_packets=1213423, n_bytes=120613616, idle_age=0, priority=0 actions=NORMAL","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"linux disk","slug":"linux-disk","date":"2019-12-15T01:42:54.000Z","updated":"2020-03-24T13:52:16.618Z","comments":true,"path":"2019/12/15/linux-disk/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-disk/","excerpt":"","text":"Ubuntu系统分区信息查看：fdisk /dev/vda1234567891011Command (m for help): pDisk /dev/vda: 60 GiB, 64424509440 bytes, 125829120 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x630fdccbDevice Boot Start End Sectors Size Id Type/dev/vda1 * 2048 1953791 1951744 953M 83 Linux/dev/vda2 1953792 125829119 123875328 59.1G 83 Linux Sart、End、Sectors单位都是扇区， 1扇区=512bytes，那么2扇区就是1KB 通常称为一个block块，那么就有了2sectors=1KB=1 block,可以通过blockdev --getsz /dev/vda得到整块盘扇区数像上面1953791-2048+1=1951744扇,953M=1951744/2/1024KB CentOS差别可能就是 Blocks数显示，上面说了1Block=1KB12345678910Disk /dev/vda: 64.4 GB, 64424509440 bytes, 125829120 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000afe6d Device Boot Start End Blocks Id System/dev/vda1 * 2048 4196351 2097152 83 Linux/dev/vda2 4196352 125829119 60816384 83 Linux 我来验证一下14196351-2048+1得到扇区数，(4196351-2048+1)/2=2097152刚好等于Blocks数，也就是2097152KB=2048MB=2GB 我们再来学习下dd命令1234bs参数代表逻辑块大小，默认单位是扇区，bs=512代表一个扇区，也就是512bytescount参数代表逻辑块的个数或扇区数，那么处理的存储大小就是bs*countskip 表示跳过if 设备的扇区数开始读数据,skip=200代表200个扇区，也就是100KBseek表示跳过of设备的扇区数开始写数据,seek=400代表400个扇区，也就是200KB 那么学了这些有什么用呢？一个裸盘有硬件raid卡信息是不能正常被格式化的，这个raid信息会存在硬盘的最后63个扇区的地方，我们可以用dd复盖掉12snumber=$(($(blockdev --getsz /dev/sda)-63))dd if=/dev/zero of=/dev/sda bs=512 count=63 seek=$snumber 总结： 一个扇区512bytes , 1Block=1KB=2扇区 dd参数的skip针对if设备，seek针对of设备（跳过多少扇区再处理）","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"nmap工具详解","slug":"linux-nmap详解","date":"2019-12-15T01:42:54.000Z","updated":"2019-01-15T09:13:55.828Z","comments":true,"path":"2019/12/15/linux-nmap详解/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-nmap详解/","excerpt":"","text":"1.1 nmap基础在运维过程中有时需要主机存活性探测，一般是namp、tcpdump命令结合使用，相关工具包安装1[root@ ]# yum install nmap tcpdump 列出几种nmap命令语法123-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans-sU: UDP Scan-sP: ping Scan 下面我们在2台主机间探测，一主机发nmap探测，另一主机tcpdump抓包分析 在A主机正常发一个ping包看看正常情况下的icmp包 ping -c 1 10.17.200.36 在B主机抓包发现icmp包有去有回12345[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:08:38.392418 IP 10.17.200.14 &gt; 10.17.200.36: ICMP echo request, id 5220, seq 1, length 6416:08:43.400811 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 可在一台主机临时禁用icmp协议,再用ping将探测不到这台主机1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 1.2 nmap ping探测我们开始nmap ping探测， -n表示不进行DNS解析123456[root@ ]# nmap -n -sP 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:12 CSTNmap scan report for 10.17.200.36Host is up (0.00030s latency).MAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.05 seconds 在B主机探测发现只收到了对方发的请求包，并未回应，但是还是认为这台主机是存活的，这样提高了探测效率1234[root@localhost roles]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:12:28.972321 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 46 1.3 nmapSYN探测我们开始nmap TCP的SYN探测， -n表示不进行DNS解析1234567891011[root@ ]# nmap -n -PE 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:20 CSTNmap scan report for 10.17.200.36Host is up (0.00014s latency).Not shown: 998 closed portsPORT STATE SERVICE22/tcp open ssh445/tcp filtered microsoft-dsMAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 1.33 seconds 在B主机探测发现，A主机对B主机的各服务都发送了TCP SYN包来进行探测123456789101112[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:20:07.124327 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 4616:20:07.148867 IP 10.17.200.14.40911 &gt; 10.17.200.36.rtsp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148882 IP 10.17.200.14.40911 &gt; 10.17.200.36.smtp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148906 IP 10.17.200.14.40911 &gt; 10.17.200.36.domain: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148943 IP 10.17.200.14.40911 &gt; 10.17.200.36.https: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.mysql: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.ssh: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 0信息太多，略过...16:20:12.152833 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 1.4 arping另外补充一下，arping -D可有效检测IP地址冲突问题,如果命令echo $?返回值为0则表示地址冲突，1则表示不冲突.12345[root@ ]# arping -D -c 2 -I ens192 10.17.200.36ARPING 10.17.200.36 from 0.0.0.0 ens192Unicast reply from 10.17.200.36 [00:50:56:B9:21:18] 0.887msSent 1 probes (1 broadcast(s))Received 1 response(s) 1.5 总结 nmap -sP 可进行ping检测 nmap -PE 可进行tcp SYN检测 nmap -n -sP -PE 可进行ping与SYN结合检测,以免漏扫 arping -D 可进行地址冲突检测 &lt;完结&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s_pod资源清单学习1","slug":"k8s_pod1","date":"2019-12-01T12:51:41.000Z","updated":"2020-01-19T09:37:36.257Z","comments":true,"path":"2019/12/01/k8s_pod1/","link":"","permalink":"http://www.digmyth.com/2019/12/01/k8s_pod1/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"udev定义network","slug":"linux-udev","date":"2019-11-15T01:42:54.000Z","updated":"2020-03-29T02:10:23.637Z","comments":true,"path":"2019/11/15/linux-udev/","link":"","permalink":"http://www.digmyth.com/2019/11/15/linux-udev/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"helm部署efk日志系统","slug":"log_helm-efk","date":"2019-10-15T02:42:36.000Z","updated":"2021-03-17T09:56:58.567Z","comments":true,"path":"2019/10/15/log_helm-efk/","link":"","permalink":"http://www.digmyth.com/2019/10/15/log_helm-efk/","excerpt":"","text":"efk 日志系统3大组件elasticsearchfluent-bitkibana helm部署efk日志系统heml.sh 官网https://artifacthub.io/packages/helm/bitnami/elasticsearch 搜索elasticsearch Charts 1234567[root@k8smaster efk]# helm repo add bitnami https://charts.bitnami.com/bitnami&quot;bitnami&quot; has been added to your repositories[root@k8smaster efk]# helm repo listNAME URL loki https://grafana.github.io/loki/chartsstable https://charts.helm.sh/stable bitnami https://charts.bitnami.com/bitnami 12345[root@k8smaster efk]# helm search repo elasticNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ... helm show values bitnami/elasticsearch &gt; es_values.yaml 有人说k8s 中的APP JDK 最好11以上， data.resources +1G = data.heapsize 这个预留一个G给进程使用，其它才给JVM使用性能更佳12345678910111213141516171819202122232425262728293031[root@k8smaster efk]# helm install myes bitnami/elasticsearch -f es_values.yaml -n logsNAME: myesLAST DEPLOYED: Tue Mar 16 10:34:09 2021NAMESPACE: logsSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:------------------------------------------------------------------------------- WARNING Elasticsearch requires some changes in the kernel of the host machine to work as expected. If those values are not set in the underlying operating system, the ES containers fail to boot with ERROR messages. More information about these requirements can be found in the links below: https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html This chart uses a privileged initContainer to change those settings in the Kernel by running: sysctl -w vm.max_map_count=262144 &amp;&amp; sysctl -w fs.file-max=65536** Please be patient while the chart is being deployed ** Elasticsearch can be accessed within the cluster on port 9200 at myes-elasticsearch-coordinating-only.logs.svc.cluster.local To access from outside the cluster execute the following commands: kubectl port-forward --namespace logs svc/myes-elasticsearch-coordinating-only 9200:9200 &amp; curl http://127.0.0.1:9200/ 部署日志采集agent12345678910111213141516[root@k8smaster efk]# helm search repo elasNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ...stable/elastabot 1.2.1 1.1.0 DEPRECATED A Helm chart for Elastabot - a Slack...stable/elastalert 1.5.1 0.2.4 DEPRECATED ElastAlert is a simple framework for...stable/elastic-stack 2.0.6 6 DEPRECATED A Helm chart for ELK stable/elasticsearch 1.32.5 6.8.6 DEPRECATED Flexible and powerful open source, d...stable/elasticsearch-curator 2.2.3 5.7.6 DEPRECATED A Helm chart for Elasticsearch Curator stable/elasticsearch-exporter 3.7.1 1.1.0 DEPRECATED Elasticsearch stats exporter for Pro...stable/fluentd-elasticsearch 2.0.7 2.3.2 DEPRECATED! - A Fluentd Helm chart for Kubernet...bitnami/grafana 5.2.4 7.4.3 Grafana is an open source, feature rich metrics...bitnami/kibana 7.2.3 7.10.2 Kibana is an open source, browser based analyti...stable/apm-server 2.1.7 7.0.0 DEPRECATED The server receives data from the El...stable/dmarc2logstash 1.3.1 1.0.3 DEPRECATED Provides a POP3-polled DMARC XML rep...stable/fluentd 2.5.3 v2.4.0 DEPRECATED A Fluentd Elasticsearch Helm chart f...stable/kibana 3.2.8 6.7.0 DEPRECATED - Kibana is an open source data visu... 1234567891011121314151617181920[root@k8smaster efk]# helm show values bitnami/kibana &gt; kibana_values.yaml[root@k8smaster efk]# vim kibana_values.yaml[root@k8smaster efk]# helm install kibanaui bitnami/kibana -f kibana_values.yaml -n logsNAME: kibanauiLAST DEPLOYED: Tue Mar 16 15:21:01 2021NAMESPACE: logsSTATUS: deployedREVISION: 1NOTES:1. Get the application URL by running these commands: Get the Kibana URL and associate Kibana hostname to your cluster external IP: export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters echo &quot;Kibana URL: http://kibana.local/&quot; echo &quot;$CLUSTER_IP kibana.local&quot; | sudo tee -a /etc/hostsWARNING: Kibana is externally accessible from the cluster but the dashboard does not contain authentication mechanisms. Make sure you follow the authentication guidelines in your Elastic stack.+info https://www.elastic.co/guide/en/elastic-stack-overview/current/setting-up-authentication.htmlWARNING: Rolling tag detected (bitnami/bitnami-shell:10), please note that it is strongly recommended to avoid using rolling tags in a production environment.+info https://docs.bitnami.com/containers/how-to/understand-rolling-tags-containers/ 123456helm repo updatehelm repo list helm search repo fluent-bithelm show values fluent/fluent-bit &gt; fluent-bit-values.yamlhelm install -f fluent-bit-values.yaml -n logshelm list -n logs 总结 helm安装好处是一键安装，坏处是自定义容器内yml配置文件难度极大，如果helm charts提供的原始配置文件里没有(此处不是说修改values.yml值文件),需要重新制作charts部署","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch API","slug":"log_elasticsearch_api","date":"2019-09-15T02:22:36.000Z","updated":"2021-04-19T06:13:15.498Z","comments":true,"path":"2019/09/15/log_elasticsearch_api/","link":"","permalink":"http://www.digmyth.com/2019/09/15/log_elasticsearch_api/","excerpt":"","text":"知识点搜索引擎包括： 索引组件、搜索组件索引组件： 面向数据存储和索引构建搜索组件： 面向用户提供搜索功能以及将用户提供的搜索请求转换成可用的查询语句并通过索引完成查询过程或搜索过程其中一种著名的索引叫做倒排索引 获取数据的组件：工作在pull拉取数据模式， solr/Nutch/grub/ApetureES: 索引index、类型type、文档document、映射mapping 每个索引的分片数量： 5 每个分片也应该有副本： 1用户接口： 9200/tcp集群接口： 9300/tcp 数据类型： string、number、boolean、date、 ES中搜索的数据广义上可被分为2类：12exact: 精确查找，指在原始数据上精确查找full-text: 全文查找，判断文档在多大程度上匹配查询请求，用于评估文档与用户查询请求的相似度 为了完成full-text搜索，ES必须先分析文本并创建出倒排索引，倒排索引中的数据还需要进行“正规化”为标准格式：如单词复数改为单数，助词去掉，这样的分词加正规化的过程即为分析，分析是需要分析器analyzer工作的分析器由3个组件构成： 字符过滤器、分词器、分词过滤器ES内置的分析器有:1234standard analyzer (default analyzer)simple analyzerwhitespace analyzerlanguage analyzer 分析器不仅在创建索引时用到，在构建查询时也会用到并且前后二者的分析器必须一致，否则无法解析 API调用1234567[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/indicesgreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 1628 579.3kb 344kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 14 4.3mb 2.1mbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 3 0 32.9kb 16.4kbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 4 0 48.7kb 27.3kb 12[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/health1618472240 07:37:20 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 123456789101112131415161718[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/health?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;status&quot; : &quot;green&quot;, &quot;timed_out&quot; : false, &quot;number_of_nodes&quot; : 3, &quot;number_of_data_nodes&quot; : 3, &quot;active_primary_shards&quot; : 7, &quot;active_shards&quot; : 14, &quot;relocating_shards&quot; : 0, &quot;initializing_shards&quot; : 0, &quot;unassigned_shards&quot; : 0, &quot;delayed_unassigned_shards&quot; : 0, &quot;number_of_pending_tasks&quot; : 0, &quot;number_of_in_flight_fetch&quot; : 0, &quot;task_max_waiting_in_queue_millis&quot; : 0, &quot;active_shards_percent_as_number&quot; : 100.0&#125; 123456[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/master_node?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;cluster_uuid&quot; : &quot;exgsV0fDSCu826nXkN9w8A&quot;, &quot;master_node&quot; : &quot;WIm1WA75QhSegglRpCn4-Q&quot;&#125; 123[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/nodes?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/stats?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_nodes/stats?pretty 1234[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/pending_tasks?pretty&#123; &quot;tasks&quot; : [ ]&#125; 数据提交1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/1?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 0, &quot;_primary_term&quot; : 1&#125; 1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/2?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, # 索引，没有会自动创建 &quot;_type&quot; : &quot;class1&quot;, # 类型，没有会自动创建 &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 2, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 1&#125; 获取文档数据123456789101112[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/1&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:0,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;2&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:1,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125; 更新文档可以PUT方法覆盖原有文档，也可以局部更新用POST方法调用_update接口1234567891011121314151617181920212223242526272829303132[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X POST http://192.168.1.40:9200/students/class1/2/_update?pretty -d &apos;&#123;&quot;doc&quot;: &#123;&quot;last_name&quot;: &quot;Huang2_222&quot;&#125;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;result&quot; : &quot;noop&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 0, &quot;successful&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2?pretty # 查看更新&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1, &quot;found&quot; : true, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2_222&quot; &#125;&#125; 删除文档1[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/class1/2 查看索引123456789[root@node01 ~]# curl -X GET http://192.168.1.40:9200/_cat/indices?vhealth status index uuid pri rep docs.count docs.deleted store.size pri.store.sizegreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 431 1.3mb 630.3kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open students em-XgwfsSc--wFnCcLC7jg 1 1 2 0 21.5kb 8.6kbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 4 0 43.7kb 21.8kbgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 4 4.2mb 2.1mbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 6 0 75.8kb 40.9kb 删除索引12[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/&#123;&quot;acknowledged&quot;:true&#125; 以上是基于query DSL language,用于实现诸多类型查询向ES发起查询请求的方式有2种：1 通过RestFul request API查询，也称为query string2 通过发送REST request body 进行查询 query string方式查询12345678910111213141516171819202122232425262728293031323334353637383940[root@node01 ~]# curl http://192.168.1.40:9200/students/_search?pretty&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 2, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2&quot; &#125; &#125; ] &#125;&#125; REST request body 方式查询123[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X GET http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&apos; 多索引，多类型查询,一般格式为：http://IP:port/&lt;indices1&gt;,&lt;indices2&gt;/&lt;type1&gt;,&lt;type2&gt;/_search?pretty12curl http://192.168.1.40:9200/_search?pretty # 所有索引查询curl http://192.168.1.40:9200/students1,students2/_search?pretty mappping/analysisES对每一个文档会取得其所有域的所有值，生成一个名为”_all”的域，执行查询时，如果在query_string未指定查询的域，则在_all域上执行查询操作 不指定域查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 指定域精确查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=first_name:&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 查看指定类型的mapping123456789101112131415161718192021222324252627[root@node01 ~]# curl http://192.168.1.40:9200/students/_mapping?pretty&#123; &quot;students&quot; : &#123; &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;first_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;last_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125; &#125; &#125; &#125;&#125; request Body 请求查询 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;term&quot;: &#123;&quot;first_name&quot;:&quot;jing&quot;&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;terms&quot;: &#123;&quot;first_name&quot;:[&quot;jing&quot;,&quot;xx&quot;,&quot;oo&quot;]&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 总结慢慢实践。。。","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch基本使用","slug":"log_elasticsearch-基本使用","date":"2019-08-15T02:42:36.000Z","updated":"2021-04-15T07:13:28.047Z","comments":true,"path":"2019/08/15/log_elasticsearch-基本使用/","link":"","permalink":"http://www.digmyth.com/2019/08/15/log_elasticsearch-基本使用/","excerpt":"","text":"介绍官网： https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-elastic-stack.html elasticsearch: 借住于LuceneAPI 重新封装实现的搜索组件，增加更强大的能力，将Lucene提供的索引组建成shar形式，分片后分布于各节点上从而构建成分布式时时查询组件。 是一个基Lucene实现的开源、分布式、RestFul的全文本搜索引擎，此外，它还是一个分布式实时文档存储，其中每个文档的每个field均是被索引的数据，且可被搜索，也是一个带实时分析功能的分布式搜索引擎，能够扩展至数以百计的节点实时处理PB级的数据 概念 文档只有被索引后才能被索引，这个文档就放在一个叫索引的文件当中。 在Lucene中每一项相当于MYsql表中一行数据，多个项在一起就组成了索引，但是每个索引会尽量存储同类型数据 大索引的多个片分shard散到多个物理节点上去，可成完成读写负载均衡，分片节点挂了所有数据将丢失，但是分布式不应该这样，它还要通过主从副本实现分布解决单点故障问题。 写操作会自动分配到主分片完成写操作，副本分片只有读权限 索引： 文档的集合，类似于表，索引名只能是小写字母 类型(type): 类型是索引内部的逻辑分区，其意义完全取决于用户需求，一个索引内部可以定义一个或多个类型 拥有相同域的文档的预定义，类似于表的表结构，文档是schema free模式自由, 建议一个索引中只存一个类型的文档数据 文档： 是Lucene搜索和索引的原子单位，包含了一个或多个域，是域容器，基于json格式，每个域的组成部份：一个名字和一个或多个值，拥有多个值的域通常称为多值域 映射 (maping): 定义如何切词，指明一个文档中的数据在被存储之前的分析过程该如何执行，原始内容存储为文档之前事先需要分析，映射就 是定义此分析机制该如何实现 例如; 切词、过滤掉某些词、域中内容排序 elasticsearch集群组件： 每一个物理节点必属于且只属于某ES集群 NODE： 运行了单个ES实例的主机即为节点，用于存储数据部份分片、参与集群索引及搜索操作、节点标识靠节点名（默认会生成字串，可自定义） shard分片: 把一个Luence大索引切分为底层物理数据，完成分割存储机制，或说将索引切割成为物理存储组件，但每一个shard都是一个独立且完整的索引，创建索引时，ES默认创建5个副本 shard有2种类型： primary shard/Replicas shard Primary shard 如何切割定义好后不可更改，但是副本数是可以动态更改的 ES工作过程： 通过多播(default)或单播方式工作在9300/TCP查找同一集群的其它节点，并与之建立通信 集群中的所有节点会选举一个主节点负责管理整个集群状态，以及在集群范围内决定各shard分布方式，用户角度没有主从节点，各节点都可接收请求 安装elasticsearch强制要求工作在普通用户模式下，不能root 直接./bin/elasticsearch启动服务，好像rpm安装没有此限制同时启动也有很多限制，否则启动失败 修改系统参数达到启动服务要求1234561 普通用户模式下安装2 安装jdk,要求1.8以上，有人声称1.11以上更佳3 打开文件数限制，包括系统级/etc/security/limits.conf 和ulimit -n 65535用户级4 打开内核参数级限制,临时设置如下命令sysctl -w vm.max_map_count=655350sysctl -w fs.file-max=65536 配置文件修改123456789cat /home/stack/elasticsearch-7.11.2/config/elasticsearch.yml | grep -v ^# | grep -v ^$cluster.name: wxq-esnode.name: node-es3bootstrap.memory_lock: falsenetwork.host: 192.168.1.30discovery.seed_hosts: [&quot;192.168.1.30&quot;,] # 集群模式相应追加主机cluster.initial_master_nodes: [&quot;192.168.1.30&quot;,]http.cors.enabled: true # 方便plugins head插件时跨站请求成功http.cors.allow-origin: &quot;*&quot; head 插件安装安装好后直接访问 http://IP:9100/ 连接地址填入http://es-server:9200/正确1234git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start 1./bin/elasticsearch # 直接启动即可 集群状态 123456green 可用状态red: 不可用yellow: 修复状态ES参与集群事务的端口tcp/9300ES接收请求的端口tcp/9200 API接口使用123456确保集群正常； API接口9200Restful接口API： 4类1 检查集群节点索引健康与否，以及获取其相应状态2 管理集群节点索引及元数据3 执行CRUD操作4 执行高级操作：例如paging 、filtering 12345678910111213所有_cat支持的API操作[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat=^.^=/_cat/allocation/_cat/shards/_cat/shards/&#123;index&#125;/_cat/master/_cat/nodes/_cat/tasks/_cat/indices/_cat/indices/&#123;index&#125;/_cat/segments。。。 v=verbose显示详细信息1234567891011http://192.168.1.30:9200/_cat/nodeshttp://192.168.1.30:9200/_cat/nodes?vhttp://192.168.1.30:9200/_cat/masterhttp://192.168.1.30:9200/_cat/master?v例如：[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?vip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name172.21.0.5 36 98 14 0.22 0.60 1.09 cdfhilmrstw - es02172.21.0.3 28 98 14 0.22 0.60 1.09 cdfhilmrstw * es01172.21.0.4 61 98 14 0.22 0.60 1.09 cdfhilmrstw - es03 help查看某接口支持查询的详细字段12345678[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?helpid | id,nodeId | unique node idpid | p | process idip | i | ip addressport | po | bound transport porthttp_address | http | bound http addressversion | v | es version。。。 查询某接口指定字段1234# curl http://192.168.1.40:9200/_cat/nodes?h=id,pid,ip,port,http_address,version,uptimet_iA 6 172.21.0.5 9300 172.21.0.5:9200 7.12.0 56.8mWIm1 6 172.21.0.3 9300 172.21.0.3:9200 7.12.0 56.8m3bzJ 6 172.21.0.4 9300 172.21.0.4:9200 7.12.0 56.8m health的green状态123# curl http://192.168.1.40:9200/_cat/health?vepoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1618470428 07:07:08 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 总结 带着概念参照官网安装还是挺简单的，练习接口可以了解学习集群及ES的概念","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb-恢复数据","slug":"mariadb-恢复数据","date":"2019-07-25T01:41:54.000Z","updated":"2020-07-08T12:30:31.812Z","comments":true,"path":"2019/07/25/mariadb-恢复数据/","link":"","permalink":"http://www.digmyth.com/2019/07/25/mariadb-恢复数据/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"搜索引擎与Lucene基础","slug":"log_lucene-认识","date":"2019-06-15T02:42:36.000Z","updated":"2021-03-17T09:47:30.627Z","comments":true,"path":"2019/06/15/log_lucene-认识/","link":"","permalink":"http://www.digmyth.com/2019/06/15/log_lucene-认识/","excerpt":"","text":"简单常识：1千万条日志记录存储大小为2G1亿条日志记录 5G8亿条日志记录 40G 程序： 算法+数据结构存储+前端访问接口 开发全文搜索程序： 算法+支持这种场景的特定存储结构海量日志分析： 搜索引擎搜索引擎： 存储时需要有索引链–&gt; 搜索组件（有请求接口有请求返回或展示UI） 收集日志 –&gt; 对收集过来日志检索原始内容–&gt; 构建文档 –&gt;文档分析或切词 –&gt; 建立索引链（创建倒排索引）而SQL的索引： 正排索引 文档数据库： Mongodb、elasticsearch(每一行中每字段文档数据格式各不一样) 著名开源搜索开发库或底层搜索引擎: Lucene添加收集文档，搜索引擎，提供上层搜索接口： Elasticsearch 包含一个或多个域的容器，文档就是由Field、Value组成Lucene没有全局模式：no schema,没有预先定义字段及类型域有很多选项： 索引选项、存储选项、每个域向量使用选项索引选项用于通过倒排索来控制文本是否可被搜索，成为索引中的项才能被搜索： index: ANALYZIED 需要分析或分词并单独构建索引项 index: not_ANALYZIED 不分析或不分词，把整个内容当一个索引项 index: analyzied norms 类似index: ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.Not_analyzied_norms 类似not_ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.NO : 不对此域的值进行索引，因此不能被搜索存储选项: 是否需要存储域的真实值 title: This is a Notebook. –&gt; this notebook 有效信息即可 store.YES: 存储真实值 store.NO: 不存储真实值 (每个项或每个域)向量选项用于在搜索期间控制该文档所有的唯一项都能完全从文档域中检索时使用 文档和域的加权操作： 通过改变某一个文档相对于某一个词的加权因子，对值改大改小可以决定它对用户的重要程序，如竟价排名 加权计算标准：方案很多 搜索：查询Lucene索引时，返回一个有序的scoreDoc对象：查询时Lucene会为每个文档计算出score,API: IndexSearcher: 搜索索引入口 Query及其子类：构建搜索查询语句 QueryParser: 搜索分析后返回结果 TopDocs 某查询分值top10 Lucene的多样化查询： IndexSearcher中的search方法，完成搜索时传入Query实例参数进行，就是告之到底要搜索什么，你键入的搜索关键词分析以后作为Query对象，传递给IndexSearch方法 常用几种查询方法123456789101112131415161718TermQuery： 对索引中特定项进行搜索，Term是索引中的最小索引片段，每个Term包含一个域名和文本值title: This is a Desktitle: Tis is a table索引构建方式： This： （1） (2) Desk： (1) table: (2) TermRangeQuery:索引中每个Term对象上的值都会按照字典编排顺序进行排序，并允许在Lucene TermRangeQuery 提供的范围内进行搜索 大白话就是TermQuery指定一个域中搜索，TermRangeQuery可以指定多个域内搜索 NumericRangeQuery： 只是数值范围内搜索 PrefixQuery： 用于搜索以指定字符串开头的域 BooleanQuery：用于实现组合查询，与或非 and 、or、 not PhraseQuery： 能够跟据位置信息定义文档 WildcardQuery：通配符 FuzzyQuery： 模糊查询 levenshtein处理 总结 Lucene是底层搜索引擎或搜索开发库，基于Lucene库开发有了Elasticsearch存储、搜索引擎系统","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"kubernetes-dashboard-TLS坑","slug":"Kubernetes-dashboard-TLS坑","date":"2019-06-11T12:51:41.000Z","updated":"2019-06-15T15:11:45.437Z","comments":true,"path":"2019/06/11/Kubernetes-dashboard-TLS坑/","link":"","permalink":"http://www.digmyth.com/2019/06/11/Kubernetes-dashboard-TLS坑/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"python-celery-Flask","slug":"python-Celery-Flask","date":"2019-02-10T09:03:01.000Z","updated":"2019-02-21T10:31:24.286Z","comments":true,"path":"2019/02/10/python-Celery-Flask/","link":"","permalink":"http://www.digmyth.com/2019/02/10/python-Celery-Flask/","excerpt":"","text":"一、基本使用Celery是由Python开发的一个简单、灵活、可靠的处理大量任务的分发系统，可以实时处理任务，也可以定时异步处理任务。每次分发任务后得到一个ID，然后根据这个ID查询任务执行情况。 并且celery需要rabbitMQ、Redis等充当broker来进行消息的接收。 安装1pip3 install celery eventlet # windows系统需要eventlet模块 下面我们来快速上手celery编辑s1.py1234567891011#!/usr/bin/env python3from celery import Celerycel = Celery(&apos;xxx&apos;, broker=&quot;redis://192.168.1.40&quot;, backend=&apos;redis://192.168.1.40&apos;)@cel.taskdef f1(x,y): return x+y 然后把s1这个work工作起来，进入命令终端,如果在linux系统，不用添加参数-P eventlet1E:\\pro\\xxx_dir&gt; celery worker -A s1 -l info -P eventlet 编辑s2.py1234567891011121314151617#!/usr/bin/env python3import datetimefrom s1 import f1# 立即执行result = f1.delay(4,6)print(result.id)# 定时执行ctime = datetime.datetime.now()# ctime = datetime.datetime(year=2019,month=2,day=21,hour=14,minute=8)utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp())s10 = datetime.timedelta(seconds=10)ctime_x = utc_time + s10result = f1.apply_async(args=[1,3],eta=ctime_x)print(result.id) 编辑s3.py12345678910111213141516171819202122232425#!/usr/bin/env python3from celery.result import AsyncResultfrom demo1.s1 import celasync = AsyncResult(id=&quot;f43bce52-9503-475e-9d19-4a46ed910a8e&quot;,app=cel)if async.successful(): ret = async.get() # 获取值 #async.forget() # 删除值 print(ret)elif async.failed(): print(&apos;执行失败&apos;)elif async.status == &apos;PENDING&apos;: print(&apos;任务等待中被执行&apos;)elif async.status == &apos;RETRY&apos;: print(&apos;任务异常后正在重试&apos;)elif async.status == &apos;STARTED&apos;: print(&apos;任务已经开始被执行&apos;)else: print(&quot;任务执行失败&quot;)async.revoke() # 取消一个任务，当一个任务正在执行，不能取消async.revoke(terminate=True) # 终止一个任务，当一个任务正在执行，可以被终止 二、多目录结构经过上面快速上手的学习，了解了celery的基本使用，那么重组一下代，形成项目中多目录结构看看相互之间如何调用？ 创建一个celery_tasks的目录，里面一般保存2类文件，其中一个文件名称必须为celery,另一类就是定义task任务的文件，可以有多个。 定义celery_tasks/celery.py文件,如果有多个task任务文件，可以用includ列表包含进来123456789101112131415#!/usr/bin/env python3from celery import Celery# from celery.schedules import crontabcel = Celery(&apos;xxxxxx&apos;, broker=&apos;redis://192.168.1.40:6379&apos;, backend=&apos;redis://192.168.1.40:6379&apos;, include=[&apos;celery_tasks.task1&apos;,) #include=[&apos;celery_tasks.task1&apos;,&apos;celery_tasks.task2&apos;])# 时区cel.conf.timezone = &apos;Asia/Shanghai&apos;# 是否使用UTCcel.conf.enable_utc = False 在多目录结构中，跑celery work时不用指定到文件，指定目录即可1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 定义celery_tasks/task1.py1234567#!/usr/bin/env python3from .celery import cel@cel.taskdef f1(x,y): return x+y 有了celery.py文件和task任务文件，我们就可以在任意地方调用任务了。 比如定义test/exec1.py文件来执行任务123456#!/usr/bin/env python3from celery_tasks.task1 import f1result = f1.delay(4,6)print(result.id) 定义test/exec2.py文件来获取任务执行结果,需要提供任务ID1234567891011#!/usr/bin/env python3from celery_tasks.celery import celfrom celery.result import AsyncResultasync = AsyncResult(id=&quot;be6bb021-da48-46a9-b1bc-94b987f7c8a7&quot;,app=cel)if async.successful(): print(async.get())else: print(&quot;任务执行失败&quot;) 三、Flask中的例用有了上面celery的认识，我们来简单写点代码，看一下在Flask框架中celery是如何使用的？ 定义Flask项目启动文件app.py 写线上代码时是要把任务保存在数据库中的，这里仅作示例就保存在了HISTORY全局变量中了.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/env python3from flask import Flask,request,render_template,redirectfrom celery_tasks.task2 import deployapp = Flask(__name__)HISTORY = []@app.route(&apos;/index&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: return render_template(&apos;index.html&apos;,history=HISTORY)@app.route(&apos;/publish&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def publish(): if request.method == &quot;GET&quot;: return render_template(&apos;publish.html&apos;) else: version = request.form.get(&quot;version&quot;) hosts = request.form.getlist(&quot;hosts&quot;) print(version,hosts) import datetime ctime = datetime.datetime.now() utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp()) ctime_10 = utc_time + datetime.timedelta(seconds=10) result = deploy.apply_async(args=[version,hosts],eta=ctime_10) HISTORY.append(&#123;&quot;version&quot;:version,&quot;hosts&quot;:hosts,&quot;task_id&quot;:result.id&#125;) print(HISTORY) return redirect(&quot;/index&quot;)from celery.result import AsyncResultfrom celery_tasks.celery import cel@app.route(&apos;/check_result&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def check_result(): task_id = request.args.get(&quot;task_id&quot;) async = AsyncResult(id=task_id,app=cel) if async.successful(): result = async.get() print(result) # result.forget() # 将结果删除 return &quot;执行成功&quot; elif async.failed(): return &apos;执行失败&apos; elif async.status == &apos;PENDING&apos;: return &apos;任务等待中被执行&apos; elif async.status == &apos;RETRY&apos;: return &apos;任务异常后正在重试&apos; elif async.status == &apos;STARTED&apos;: return &apos;任务已经开始被执行&apos; else: return &quot;unkown status&quot;@app.route(&apos;/cancel&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def cancel(): task_id = request.args.get(&quot;task_id&quot;) async =AsyncResult(id=task_id,app=cel) async.revoke(terminate=True) for i in HISTORY: if task_id in i.values(): HISTORY.remove(i) return redirect(&quot;/index&quot;)if __name__ == &apos;__main__&apos;: app.run() 定义其中用到的templates/index.html123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;发布系统&lt;/h1&gt;&lt;a href=&quot;/publish&quot;&gt;添加发布任务&lt;/a&gt;&lt;table&gt; &#123;% for row in history %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.task_id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.version &#125;&#125;&lt;/td&gt; &#123;% for host in row.hosts %&#125; &lt;td&gt; &lt;span&gt;&#123;&#123; host &#125;&#125;&lt;/span&gt; &lt;/td&gt; &#123;% endfor %&#125; &lt;td&gt;&lt;a href=&quot;/check_result?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;查看&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/cancel?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;取消&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 定义其中用到的templates/publish.html1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;version&quot; placeholder=&quot;请输入要发布的版本&quot;&gt;&lt;/p&gt; &lt;p&gt; &lt;select name=&quot;hosts&quot; multiple=&quot;multiple&quot;&gt; &lt;option value=&quot;c1.com&quot;&gt;c1.com&lt;/option&gt; &lt;option value=&quot;c2.com&quot;&gt;c2.com&lt;/option&gt; &lt;option value=&quot;c3.com&quot;&gt;c3.com&lt;/option&gt; &lt;/select&gt; &lt;/p&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 定义其中的celery_tasks.task2.py文件,这里的deploy是真正定义任务的地方.12345678#!/usr/bin/env python3from .celery import cel@cel.taskdef deploy(version,hosts): print(version, hosts) # 定义想要执行的任务代码 return &apos;deploy ok&apos; 同样别望了先把work跑起来,再启动Flask1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 四、总结还需要多写代码在项目中总结celery…","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"ansible callback 重写","slug":"ansible-Callback-02","date":"2019-01-12T12:39:12.000Z","updated":"2019-01-13T13:01:21.969Z","comments":true,"path":"2019/01/12/ansible-Callback-02/","link":"","permalink":"http://www.digmyth.com/2019/01/12/ansible-Callback-02/","excerpt":"","text":"1.1 adhoc callback重写adhoc-callback.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象#^#Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)#^# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)#^# 重写CallbackBase父类class AdhocResultsCollector(CallbackBase): def __init__(self, *args, **kwargs): super(AdhocResultsCollector, self).__init__(*args, **kwargs) self.host_ok = &#123;&#125; self.host_unreachable = &#123;&#125; self.host_failed = &#123;&#125; def v2_runner_on_unreachable(self, result): self.host_unreachable[result._host.get_name()] = result def v2_runner_on_ok(self, result, *args, **kwargs): self.host_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.host_failed[result._host.get_name()] = resultcallback = AdhocResultsCollector()passwords = dict()tqm = TaskQueueManager(inventory=myinven, variable_manager=varmanager, loader=loader,options=options, passwords=passwords, stdout_callback=callback )result_status_code = tqm.run(play)print(callback.host_ok.items())result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;)for host,result in callback.host_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.host_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.host_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultprint(json.dumps(result_raw,indent=4)) 1.2 playbook callback重写写入示例playbook文件site.yml12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 编写play_book.py 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;, &apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;, &apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True, )# 重写CallbackBase父类class PlayBookResultsCollector(CallbackBase): CALLBACK_VERSION = 2.0 def __init__(self, *args, **kwargs): super(PlayBookResultsCollector, self).__init__(*args, **kwargs) self.task_ok = &#123;&#125; self.task_skipped = &#123;&#125; self.task_failed = &#123;&#125; self.task_status = &#123;&#125; self.task_unreachable = &#123;&#125; def v2_runner_on_ok(self, result, *args, **kwargs): self.task_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.task_failed[result._host.get_name()] = result def v2_runner_on_unreachable(self, result): self.task_unreachable[result._host.get_name()] = result def v2_runner_on_skipped(self, result): self.task_ok[result._host.get_name()] = result def v2_playbook_on_stats(self, stats): hosts = sorted(stats.processed.keys()) for h in hosts: t = stats.summarize(h) self.task_status[h] = &#123; &quot;ok&quot;:t[&apos;ok&apos;], &quot;changed&quot; : t[&apos;changed&apos;], &quot;unreachable&quot;:t[&apos;unreachable&apos;], &quot;skipped&quot;:t[&apos;skipped&apos;], &quot;failed&quot;:t[&apos;failures&apos;] &#125;# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords )# 把重写的CallbackBase父类加载进playbookcallback = PlayBookResultsCollector()playbook._tqm._stdout_callback = callbackplaybook.run()result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;, skipped = &#123;&#125;, status = &#123;&#125;,)for host,result in callback.task_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.task_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.task_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultfor host,result in callback.task_skipped.items(): result_raw[&apos;skipped&apos;][host] = result._resultfor host, result in callback.task_status.items(): result_raw[&apos;status&apos;][host] = resultprint(json.dumps(result_raw,indent=4)) 执行示例python3 play_book.py 返回类似如下结果12345678910111213141516171819202122232425262728293031323334&#123; &quot;success&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;changed&quot;: true, &quot;end&quot;: &quot;2019-01-14 04:50:06.190607&quot;, &quot;stdout&quot;: &quot;&quot;, &quot;cmd&quot;: &quot;touch /tmp/site.txt&quot;, &quot;rc&quot;: 0, &quot;start&quot;: &quot;2019-01-14 04:50:06.186466&quot;, &quot;stderr&quot;: &quot;&quot;, &quot;delta&quot;: &quot;0:00:00.004141&quot;, &quot;invocation&quot;: &#123; &quot;module_args&quot;: &#123; &quot;creates&quot;: null, &quot;executable&quot;: null, &quot;_uses_shell&quot;: true, ... 略 &#125; &#125;, &#125; &#125;, &quot;failed&quot;: &#123;&#125;, &quot;unreachable&quot;: &#123;&#125;, &quot;skipped&quot;: &#123;&#125;, &quot;status&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;ok&quot;: 2, &quot;changed&quot;: 1, &quot;unreachable&quot;: 0, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 &#125; &#125;&#125; 总结 adhoc重写方法如host_ok,host_failed,host_unreachable playbook重写方法如task_ok,task_failed,task_unreachable,task_skipped,task_status,task_changed 返回如callback.task_ok.items(),其中键为host,值为result对象，result._result得到一个字典类型的详细结果 &lt;&lt; 完结 &gt;&gt;","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"python3下ansible api学习","slug":"ansible-api-01","date":"2019-01-10T12:39:12.000Z","updated":"2019-01-13T12:36:03.633Z","comments":true,"path":"2019/01/10/ansible-api-01/","link":"","permalink":"http://www.digmyth.com/2019/01/10/ansible-api-01/","excerpt":"","text":"1.1 ansible api基础环境说明： python version: python3 ansible version: 2.7.5 inventory file: dir1/inventory/multinode 清单文件定义： dir1/inventory/multinode12345678910[control]192.168.1.6 var1=&quot;ssss&quot; ansible_ssh_user=root ansible_ssh_pass=&apos;123&apos;[nova:children]control[cinder:children]control[glance:children] 一个单一文件进行简单的接口学习: dir1/f1.py1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/env python3import os,sys,jsonfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.plugins.callback import CallbackBaseimport ansible.constants as CBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&quot;dir1/inventory/multinode&quot;)loader = DataLoader()inven = InventoryManager(loader=loader,sources=[source,])# print(inven.get_hosts())inven.add_group(&apos;test_group2&apos;)print(inven.get_groups_dict())inven.add_host(host=&apos;192.168.1.7&apos;,port=22,group=&apos;test_group2&apos;)print(inven.get_groups_dict())host = inven.get_host(hostname=&apos;192.168.1.6&apos;)variableman = VariableManager(loader=loader,inventory=inven)vars = variableman.get_vars(host=host)# print(json.dumps(vars,indent=4))variableman.set_host_variable(host=host,varname=&apos;k1&apos;,value=&apos;v1&apos;) # 局部的x = variableman.get_vars(host=host)print(x[&apos;k1&apos;])print(variableman.__dict__)variableman._extra_vars = &#123;&quot;k2&quot;: &quot;v2&quot;&#125; # 添加全局变量x = variableman.get_vars() # 不传host说明是全局的 执行测试1python3 dir1/f1.py # 输出调用信息对照接口就知道只些方法是干什么的了 1.2 adhoc模式示例学习编辑dir1/adhoc.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)passwords = &#123;&#125;tqm = TaskQueueManager(inventory=myinven,variable_manager=varmanager, loader=loader,options=options,passwords=passwords)result = tqm.run(play) 执行测试1python3 dir1/adhoc.py 输出信息和命令行ansible直接模块运行一样，任务正常执行 1.3 playbook 示例学习编辑dir1/play_book.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords)playbook.run() 用到的site.yml文件示例如下12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 执行测试1python3 play_book.py 输出信息和ansible-playbook命令行输出一样，任务正常执行","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"veth-pair+namespace","slug":"veth-pair+namespace","date":"2019-01-10T01:41:54.000Z","updated":"2021-01-21T09:00:43.702Z","comments":true,"path":"2019/01/10/veth-pair+namespace/","link":"","permalink":"http://www.digmyth.com/2019/01/10/veth-pair+namespace/","excerpt":"","text":"查找对端veth pair12345678root@k8s-m:/data/dashboard# cat /sys/class/net/cali3b4bae3cec1/iflink 4root@k8s-m:/data/dashboard# ethtool -S cali3b4bae3cec1NIC statistics: peer_ifindex: 4 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0 namespace场景参考如下1234567891011121314# ip link add veth-a type veth peer name veth-b # 生成veth pair对，相当于一根网线# ip netns add ns1 # 创建名称空间# ip link set veth-a netns ns1 #将网线A端加入名称容间root@k8s-m:~# ip netns exec ns1 ethtool -S veth-a # veth-a的对端编号16NIC statistics: peer_ifindex: 16 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0root@k8s-m:~# ip netns exec ns1 cat /sys/class/net/veth-a/iflink # veth-a的对端编号1616# ip a # 查看编号16的设备16: veth-b@if17: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether be:ec:d2:fc:64:3f brd ff:ff:ff:ff:ff:ff link-netns ns1 利用ovs实现跨主机通信的简单应用12345678ovs-vsctl add-br ovs0ovs-vsctl add-port ovs0 eth0物理网卡加进ovs可能会断网，解决办法：# ifconfig ovs0 172.16.10.10/24# ifconfig eth0 0.0.0.0.0# route del default# route add default gw 172.16.10.254 dev ovs0# ifconfig ovs0 hw ether $eth0_mac 注意： 完事后放在开机启动项，不然开机失效连不上机","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"OpenVSwitch","slug":"openvswitch","date":"2019-01-08T01:41:54.000Z","updated":"2019-05-26T15:16:23.168Z","comments":true,"path":"2019/01/08/openvswitch/","link":"","permalink":"http://www.digmyth.com/2019/01/08/openvswitch/","excerpt":"","text":"交换机端口查看12345# ovs-vsctl show# ovs-ofctl show# ovs-ofctl show br-int# ovs-ofctl show br-tun# virsh domiflist instance-00000017 open flow流表查看12345678# ovs-ofctl dump-flows br-int# ovs-ofctl dump-flows br-tun# ip netns exec qrouter-c266eb04-0be8-448f-986f-6eef3a9bcdce ifconfig# dpkg-query -S /sbin/brctl# apt-get install bridge-utils# brctl show 添加br-ex网桥：123456# ovs-vsctl add-br br-ex桥加载到物理网口：# ovs-vsctl add-port br-ex eth0添加到不同vlan与端口模式# ovs-vsctl add-port br-ex eth1 tag=100 //设置为access端口# ovs-vsctl add-port br-ex eth2 trunk=200 //设置为trunk端口,允许vlan200通过，默认允许所有vlan直接转发 列出所有桥：123ovs-vsctl list-brovs-vsctl list-ports br-intovs-vsctl port-to-br port_name 列出桥上所接端口123# ovs-vsctl list-ports br-ex# ovs-ofctl dump-ports br-ex# ovs-vsctl list port 根据交换机某个接口名称查端口号12# ovs-vsctl list interface tap0_br | grep &quot;ofport &quot;ofport : 1 流表操作注意： 流量匹配是有顺序的,table0–&gt;table1—&gt;table3–&gt;table4 –&gt;table5…123456789101112# ovs-vsctl add-br vswitch0#发现有一条actions为NORMAL的流表项，这是默认存在的，用以实现交换机的基本动作# ovs-ofctl dump-flows vswitch0cookie=0x0, duration=267197.837s, table=0, n_packets=459, n_bytes=42190, idle_age=387, hard_age=65534, priority=0 actions=NORMAL# ovs-ofctl del-flows vswitch0 # 流表删除后所有流量将被丢弃# ovs-ofctl dump-flows vswitch0# 可以在table0添加类似规则使流量正常转发,没写表名默认table0# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot; 12345#flow优先级越高，会优先匹配,以下规则drop优先，流量被丢弃# ovs-ofctl del-flows br-int# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl add-flow vswitch0 &quot;priority=3,in_port=1,actions=drop&quot; 将table0的规则添加到table1上，发出流量也是不通的，因为流表是有顺序的，table0没有匹配到，流量被丢弃1234567# ovs-ofctl del-flows vswitch0# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl dump-flows vswitch0NXST_FLOW reply (xid=0x4): cookie=0x0, duration=3.485s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=1,in_port=1 actions=output:4 cookie=0x0, duration=3.033s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=2,in_port=4 actions=output:1 现在给table0加上一条将数据包发送到table1处理的flow, 发现流量正常，这就明白了多个table之间是如何协调工作的。1# ovs-ofctl add-flow vswitch0 &quot;table=0,actions=goto_table=1&quot; 组表操作添加一个组表1# ovs-ofctl -O OpenFlow13 add-group vswitch0 &quot;group_id=1,type=select,bucket=resubmit(,1)&quot; 查看组表1# ovs-ofctl -O OpenFlow13 dump-groups vswitch0 在table0中增加两条flow，目的是将数据包发送到group table112# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=1,actions=group:1&quot;# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=4,actions=group:1&quot; 向table1中增加两条flow，真正的数据转发在table1中进行,流量也正常通过12# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot; 虚机挂在网桥上xml格式定义openvswitch网桥，以便于virt-install –network参数指定网桥启动虚机1234567# ovsbr0.xml&lt;network&gt; &lt;name&gt;ovsbr0&lt;/name&gt; &lt;forward mode=&apos;bridge&apos;/&gt; &lt;bridge name=&apos;ovsbr0&apos;/&gt; &lt;virtualport type=&apos;openvswitch&apos;/&gt;&lt;/network&gt; 123virsh net-define ovsbr0.xmlvirsh net-start ovsbr0virsh net-autostart ovsbr0 在安装kvm虚拟机时使用ovsbr012345678910virt-install \\ -n vm-name \\ -r 4096 \\ --disk path=/data/kvm/rhel75-vm1.qcow2,format=qcow2,size=60 \\ --vcpus 4 \\ --noautoconsole \\ --cdrom=/data/kvm/iso/rhel75-x86_64.iso \\ --os-type=linux \\ --network network:ovsbr0 \\ --vnc --vnclisten=0.0.0.0 --vncport=5901 也可以将正在运行的KVM虚拟机的vnet网络接口强制接到ovs网桥上12#virsh dumpxml $vmname|grep vnet 查看某虚拟机在宿主机上对应的网络接口add-port ovsbr0 vnetxx 网桥接口划vlan并配IP命令12ovs-vsctl add-port ovsbr0 tag10 tag=10 -- set interface tag10 type=internalifconfig tag10 192.168.10.10/24 up 1234# ip link命令设置vlan接口命令ip link add link eth0 name eth0.10 type vlan id 10ifconfig eth0.10 192.168.10.33 netmask 255.255.255.0 broadcast 192.168.10.255 uproute add default gw 192.168.10.1 dev eth0.10 总结：这里只是命令总结，并没有什么实验逻辑","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"download technique","slug":"linux-download-technique","date":"2018-12-01T00:48:08.000Z","updated":"2019-05-26T11:37:37.080Z","comments":true,"path":"2018/12/01/linux-download-technique/","link":"","permalink":"http://www.digmyth.com/2018/12/01/linux-download-technique/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-socket-高级篇","slug":"web-socket-02","date":"2018-11-25T12:51:41.000Z","updated":"2018-11-27T02:19:03.844Z","comments":true,"path":"2018/11/25/web-socket-02/","link":"","permalink":"http://www.digmyth.com/2018/11/25/web-socket-02/","excerpt":"","text":"前面我们学习了WebSocket，我们知道客户端要与服务端进行WebSoccket通信，客户端要和服务端握手，握手成功后才能通信。 握手： 客户端发出握手请求，服务端在握手请求中取出“Sec-WebSocket-Key”，把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 如果给定了“Sec-WebSocket-Key”，那么摘要算法代码如下，服务器会把摘要后值返回给客户端完成握手操作。12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 如果我们己经有一个socket server，真的能收到握手信息吗？socker_server.py1234567891011121314#!/usr/bin/env python3import socketconn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)conn.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)conn.bind((&apos;127.0.0.1&apos;,8000))conn.listen(5)client,addr = conn.accept()print(client.recv(8192))print(addr) 如何发送握手请求？方式一：可直接在浏览器console终端下手动发送socket请求，请求中包含握手信息12&gt;var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;)undefined 此时浏览器会报VM44:1 WebSocket connection to &#39;ws://127.0.0.1:8000/xxoo&#39; failed: Connection closed before receiving a handshake response的错，是因为服务器端没有返回摘要后的值，表示没有握手成功。 方式二：直接编写client.html用浏览器运行12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;WebSocket test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;WebSocket study....&lt;/h1&gt; &lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 此时服务器会收到类似b&#39;GET /xxoo HTTP/1.1\\r\\nHost: 127.0.0.1:8000\\r\\nConnection: Upgrade...client_max_window_bits\\r\\n\\r\\n&#39;信息，里面包含“Sec-WebSocket-Key” 如果我们用一个函数手动取出“Sec-WebSocket-Key”，然后手动摘要后把值再手动返回给客户端，这样就握手成功不会报错了。 处理握手信息的函数(get_headers)如下123456789101112131415161718192021def get_headers(data): &quot;&quot;&quot; 将请求头格式化成字典 :param data: :return: &quot;&quot;&quot; header_dict = &#123;&#125; data = str(data, encoding=&apos;utf-8&apos;) for i in data.split(&apos;\\r\\n&apos;): print(i) header, body = data.split(&apos;\\r\\n\\r\\n&apos;, 1) header_list = header.split(&apos;\\r\\n&apos;) for i in range(0, len(header_list)): if i == 0: if len(header_list[i].split(&apos; &apos;)) == 3: header_dict[&apos;method&apos;], header_dict[&apos;url&apos;], header_dict[&apos;protocol&apos;] = header_list[i].split(&apos; &apos;) else: k, v = header_list[i].split(&apos;:&apos;, 1) header_dict[k] = v.strip() return header_dict 把摘要后的值返回给客户端1234567891011121314conn, address = sock.accept()data = conn.recv(1024)headers = get_headers(data) # 提取请求头信息# 对请求头中的sec-websocket-key进行加密response_tpl = &quot;HTTP/1.1 101 Switching Protocols\\r\\n&quot; \\ &quot;Upgrade:websocket\\r\\n&quot; \\ &quot;Connection: Upgrade\\r\\n&quot; \\ &quot;Sec-WebSocket-Accept: %s\\r\\n&quot; \\ &quot;WebSocket-Location: ws://%s%s\\r\\n\\r\\n&quot;magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;value = headers[&apos;Sec-WebSocket-Key&apos;] + magic_stringac = base64.b64encode(hashlib.sha1(value.encode(&apos;utf-8&apos;)).digest())response_str = response_tpl % (ac.decode(&apos;utf-8&apos;), headers[&apos;Host&apos;], headers[&apos;url&apos;])conn.send(bytes(response_str, encoding=&apos;utf-8&apos;)) 摘要后的值返回给客户端后就完成了握手过程，客户端就不会再报连接错误了。 接收客户端发来的数据完成握手操作后就客户端就可以向服务器发送数据了，只需console终端sock.send(&#39;dimyth&#39;) 服务端接收12info = conn.recv(1024)print(info) # 这里是字节 服务器端收到客户端发来的数据，这个数据需要服务器解包，解包过程如下1234567891011121314151617181920payload_len = info[1] &amp; 127if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:]elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:]else: extend_payload_len = None mask = info[2:6] decoded = info[6:]bytes_list = bytearray()for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk)body = str(bytes_list, encoding=&apos;utf-8&apos;)print(body) # 解出真正数据 那么服务器给客户端发送数据要就封包。123456789101112131415161718192021def send_msg(conn, msg_bytes): &quot;&quot;&quot; WebSocket服务端向客户端发送消息 :param conn: 客户端连接到服务器端的socket对象,即： conn,address = socket.accept() :param msg_bytes: 向客户端发送的字节 :return: &quot;&quot;&quot; import struct token = b&quot;\\x81&quot; length = len(msg_bytes) if length &lt; 126: token += struct.pack(&quot;B&quot;, length) elif length &lt;= 0xFFFF: # 65535 token += struct.pack(&quot;!BH&quot;, 126, length) else: token += struct.pack(&quot;!BQ&quot;, 127, length) msg = token + msg_bytes conn.send(msg) return True 对上面BHQ说明一下，B代表1个字节，H代表2个字节，Q代表8个字节 客户端如何收消息呢？1234567891011&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;); sock.onmessage = function (event) &#123; /* 服务器端向客户端发送数据时，自动执行 */ var response = event.data; var newTag = document.createElement(&apos;div&apos;); newTag.innerHTML = response; document.getElementById(&apos;content&apos;).appendChild(newTag); &#125;;&lt;/script&gt;","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"web-socket-基础知识","slug":"web-socket-01","date":"2018-11-06T12:51:41.000Z","updated":"2018-11-25T11:24:51.562Z","comments":true,"path":"2018/11/06/web-socket-01/","link":"","permalink":"http://www.digmyth.com/2018/11/06/web-socket-01/","excerpt":"","text":"WebSocket在什么场景下使用？页面实时展示数据 轮询：setInterval()前端轮询请求，性能低下 长轮询：把请求pending住多少秒后再返回，量大时也损耗服务器性能 WebSocket: 建立socket双向传输数据，高效。 那么什么是WebSocket参考链接 先来看下http协议 http协议： 1 格式：请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接：一次请求，一次响应，然后断开连接。 那么WebSocket协议是怎么样的呢？ WebSocket： 1 格式： 请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接： 创建socket通道后不断开，全双工(full-duplex)通信，可以相互发消息。 WebSocket实现了浏览器与服务器全双工(full-duplex)通信，能主动向浏览器发送消息，但需要浏览器支持websocket封包解包或加密解密。其本质是保持TCP连接，在浏览器和服务端通过Socket进行通信。 WebSocket特性 WebSocket 是独立的、创建在 TCP 上的协议。 Websocket 通过 HTTP/1.1 协议的101状态码进行握手。 为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking） 总结起来：WebSocket是一种在单个TCP连接上进行全双工通信的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。 WebSokcet工作原理首先客户端要验证服务器是否支持websocket协议，能不能一起玩耍？ 客户端发送playload data之前会发送握手字符串，服务器把握手字符串加密后返回给客户端，此时客户端也把字符串按特定算法加密，把客户端加密后的字符串与服务器加密后的字符串进行比较，如果一致则客户端认为服务器支持WebSocket协议通信，可以相互一起玩耍。 握手时的特定算法是什么呢？代码如下12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 能不能一起玩耍，官方术语就是创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）. 不管怎么说，WebSocket允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。 什么？看不懂，一言不合上代码，下面是一个典型的Websocket握手请求. 客户端请求1234567GET / HTTP/1.1Upgrade: websocketConnection: UpgradeHost: example.comOrigin: http://example.com:8002Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==Sec-WebSocket-Version: 13 服务器回应12345HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=Sec-WebSocket-Location: ws://example.com:8002/ 字段说明 Connection必须设置Upgrade，表示客户端希望连接升级。 Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。 Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13. Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是,与Referer不同的是，Origin只包含了协议和主机名称。 服务器解包细节官方WebSocket instructions 注意的是客户端和服务端传输数据时，需要对数据进行封包解包。客户端有 javascript类库实现封包解包，但服务器需要手动实现。 当conn,addr = sk.accept()时，服务器端代码如下12345678910111213141516171819202122info = conn.recv(8096) payload_len = info[1] &amp; 127 if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:] elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:] else: extend_payload_len = None mask = info[2:6] decoded = info[6:] bytes_list = bytearray() for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk) body = str(bytes_list, encoding=&apos;utf-8&apos;) print(body) 要看懂这段代码必须了解websocket解包细节. 当客户端加密发送了socket data数据时，服务端收到数据是这样的. b&#39;\\x81\\x82\\xac\\xde\\xdd\\xf4\\xdc\\xae&#39; 需要对这样的数据解密才能拿到真的数据，跟据第二个字节后7位的值取数据.1234567891011121314151617180 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-------+-+-------------+-------------------------------+|F|R|R|R| opcode|M| Payload len | Extended payload length ||I|S|S|S| (4) |A| (7) | (16/64) ||N|V|V|V| |S| | (if payload len==126/127) || |1|2|3| |K| | |+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +| Extended payload length continued, if payload len == 127 |+ - - - - - - - - - - - - - - - +-------------------------------+| |Masking-key, if MASK set to 1 |+-------------------------------+-------------------------------+| Masking-key (continued) | Payload Data |+-------------------------------- - - - - - - - - - - - - - - - +: Payload Data continued ... :+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +| Payload Data continued ... |+---------------------------------------------------------------+ 1234value = socket_data[1] &amp; 127value &lt;=125 b&apos;\\x81\\x82 \\xac\\xde\\xdd\\xf4\\xdc\\xae&apos; # 数据在第2个节字后value =126 b&apos;\\x81\\x82\\xac\\xde \\xdd\\xf4\\xdc\\xae&apos; # next 16bit(2个字节)，数据在第4个节字后 value =127 xxx... # next 64bit(8个字节), 数据在第10个节字后 其中头32bits为掩码，真正数据还要去掉这4字节，取真正数据真不容易。 好了,WebSocket所有知识都在这里了，慢慢品味知识的韵味。","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"kubernetes-dashboard","slug":"Kubernetes-dashboard","date":"2018-10-01T12:51:41.000Z","updated":"2019-06-15T04:02:25.581Z","comments":true,"path":"2018/10/01/Kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2018/10/01/Kubernetes-dashboard/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"linux dmesg时间戳换算","slug":"linux-dmesg","date":"2018-08-16T01:42:54.000Z","updated":"2021-01-29T09:46:40.249Z","comments":true,"path":"2018/08/16/linux-dmesg/","link":"","permalink":"http://www.digmyth.com/2018/08/16/linux-dmesg/","excerpt":"","text":"dmesg系统内核里的时间戳转换为人类可以看懂的时间 dmesg记录的是自系统开机那刻到出事故时的时间戳 开机时间戳=当时时间戳-机器运行时间戳dmesg_time=开机时间戳+ dmesg记录时间戳再拿着dmesg_time时间戳换算就好了 123456789dmesg_time=`echo &quot;$(date +%s) - $(cat /proc/uptime | cut -f 1 -d&apos; &apos;) + 84679.822059&quot; | bc`echo $dmesg_time/proc/uptime 第一列表示为系统开机时间，根据这个值和当前时间可以获取到dmesg日志中时间发生的时间时间戳的转换为时间[root@site1 ~]# date -d &quot;@$&#123;dmesg_time&#125;&quot; &apos;+%Y-%m-%d %H:%M:%S&apos;2019-01-03 11:10:54","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"cinder多后端逻辑","slug":"cinder-vol-多后端","date":"2018-08-08T01:41:54.000Z","updated":"2019-05-26T12:41:06.912Z","comments":true,"path":"2018/08/08/cinder-vol-多后端/","link":"","permalink":"http://www.digmyth.com/2018/08/08/cinder-vol-多后端/","excerpt":"","text":"cinder配置逻辑123456789101112131415enable_backens=backend1,backend2,backend3[backend1]volume_driver=cinder.xxvolume_backend_name=sata[backend2]volume_driver=cinder.xxvolume_backend_name=ssd[backend3]volume_driver=cinder.xxvolume_backend_name=rbdcinder type-create satacinder type-key sata set volume_backend_name=satacinder create --volume-type sata --display-name vol_stat 20 vmware启用thick配置123456789101、运行命令：cinder type-create thick_volume（注：创建云硬盘类型）2、运行命令：cinder type-key thick_volume set vmware:vmdk_type=thick（注：thick为Vmware使用）3、运行命令：cinder type-key thick_volume set volume_backend_name=fusionstorage_sata3copy（注：指定后端）4、运行命令：glance image-list（注：查看镜像ID）5、运行命令：cinder create --image-id “镜像ID” --volume-type thick_volume --display-name vol-thick 20（注：创建一个20G大小的云硬盘，使用刚刚创建的云硬盘类型）","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"kubernetes-kubeadm","slug":"Kubernetes-kubeadm","date":"2018-08-01T12:51:41.000Z","updated":"2021-05-13T05:42:11.860Z","comments":true,"path":"2018/08/01/Kubernetes-kubeadm/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes-kubeadm/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-入门","slug":"Kubernetes","date":"2018-08-01T12:51:41.000Z","updated":"2018-08-26T04:03:32.956Z","comments":true,"path":"2018/08/01/Kubernetes/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes/","excerpt":"","text":"k8s 的世界12345678910- charts , k8s 的包， 类似 *.rpm 的东西- helm , k8s 的包管理机制，类似 yum 的东西openstack 容器化 ( docker 版本）- kolla-ansible- tripleoopenstack 容器化( k8s 版本）- openstack-helm- kolla-kubernetes openshift中有几种网络端口模式(暴露服务) hostnetworkhostnetwork 就是Docker的host网络，pod直接占用宿主机IP及端口，没什么可说的 hostporthostport 是在单宿主机通过IP+端口来映射容器或pod(-p 参数), 实现外部能访问容器服务或pod服务 nodeportnodeport也是在宿主机通过IP+端口来映射，与hostport不同之处是映射ServiceIP+端口，再转到pod服务 routerrouter是以hostnetwork网络模式跑在宿主机上的容器化haproxy pod, pod IP和端口就是节点的IP和端，对外暴露80、443、1936端口，haproxy中有service query 信息来自于etcd, 再通过service访问到pod服务。 注： router是hostnetwork网络模式就意味着一个节点只能运行一个router","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Openshift-入门","slug":"Openshift","date":"2018-08-01T12:51:41.000Z","updated":"2018-07-29T10:51:12.609Z","comments":true,"path":"2018/08/01/Openshift/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Openshift/","excerpt":"","text":"前言","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Dockerfile-详解","slug":"Dockerfile-详解","date":"2018-08-01T12:51:41.000Z","updated":"2018-10-24T06:18:33.872Z","comments":true,"path":"2018/08/01/Dockerfile-详解/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Dockerfile-详解/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"CentOS 7.x/Mysql limit","slug":"mysql-limit","date":"2018-07-25T01:41:54.000Z","updated":"2018-08-25T06:25:06.410Z","comments":true,"path":"2018/07/25/mysql-limit/","link":"","permalink":"http://www.digmyth.com/2018/07/25/mysql-limit/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"python-08-07-抽象类抽象方法.md","slug":"python-08-07-抽象类抽象方法","date":"2018-06-15T12:39:12.000Z","updated":"2018-12-21T18:24:42.815Z","comments":true,"path":"2018/06/15/python-08-07-抽象类抽象方法/","link":"","permalink":"http://www.digmyth.com/2018/06/15/python-08-07-抽象类抽象方法/","excerpt":"","text":"接口当多个类都有同样的方法，此时可以把相同的方法提练出来放在父类，但对继承父类的子类作约束就要用到接口了。 下面来段伪代码，在其它语言中普遍使用的语法，不适于python,这里主要学习其思想12345678910111213141516interface IFoo(): # 这个叫IFoo接口，约束实现该接口的类必须实现定义的方法 def exec(self):passclass A(IFoo): # 这个叫实现了IFoo接口，接口中的方法必须在当前类实现 def exec(self): return &quot;A.exec&quot;class B(IFoo): def exec(self): return &apos;B.exec&apos;def f1(arg): arg.exec()obj = A()print(f1.obj) 上面就是接口的概念或者用法，下面是用抽象类、抽象方法实现同样功能的原理伪代码123456789101112AbstractClass Foo(): 抽象类，抽象方法(有继承的特性，也有约束的特性) def abstractmethod():passclass A(Foo): def exec(self): return &apos;A.exec&apos; def f1(self): return &quot;A.f1&quot;obj = A()obj.exec() 那么如何用代码实现python抽象类、抽象方法呢？ 要用到from abc import abstractmethod,ABCMeta1234567891011121314151617from abc import abstractmethod,ABCMetaclass IFoo(metaclass=ABCMeta): @abstractmethod def exec(self):pass def f1(self): return &quot;cloud implement really method&quot;class A(IFoo): # 当前类继承了抽象类，当前类必须实现抽象类中的所有抽象方法，其它方法可以不用定义且可以直接继承使用。 def exec(self): return &quot;really method&quot;obj = A()print(obj.exec())print(obj.f1()) 好了， 这个接口或抽象类、抽象方法的学习完结。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Rabbitmq集群","slug":"Rabbitmq","date":"2018-06-08T01:41:54.000Z","updated":"2021-03-03T07:10:17.722Z","comments":true,"path":"2018/06/08/Rabbitmq/","link":"","permalink":"http://www.digmyth.com/2018/06/08/Rabbitmq/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"shell function语法","slug":"shell-func","date":"2018-05-29T01:41:54.000Z","updated":"2018-06-25T02:18:08.139Z","comments":true,"path":"2018/05/29/shell-func/","link":"","permalink":"http://www.digmyth.com/2018/05/29/shell-func/","excerpt":"","text":"Linux shell中函数语法很重要，它能让你写出很漂亮的shell,来看个例子学习下 1234567891011121314151617181920212223242526272829cat /usr/local/bin/show #!/bin/basha=&apos;df -hT&apos;b=&quot;ls&quot;echo_print() &#123; echo -e &quot;\\033[1;32m$1\\033[0m&quot;&#125;exec() &#123; echo_print &quot;$1&quot; $1 echo &quot;&quot;&#125;info () &#123; exec $a exec $b&#125;case &quot;$1&quot; ininfo) info;;*) echo &quot;Usage: show info&quot;;;esac 相当于定制了一个shell命令，运行一下看下效果12345678910111213#[root@wxqnode opt]# show infodfFilesystem 1K-blocks Used Available Use% Mounted on/dev/mapper/centos-root 22001156 1946776 20054380 9% /devtmpfs 2962076 0 2962076 0% /devtmpfs 2973096 0 2973096 0% /dev/shmtmpfs 2973096 33268 2939828 2% /runtmpfs 2973096 0 2973096 0% /sys/fs/cgroup/dev/sda1 1038336 145652 892684 15% /boottmpfs 594620 0 594620 0% /run/user/0lsrestart_cob study venv","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"get namespace","slug":"shell-get-namespace","date":"2018-01-29T01:41:54.000Z","updated":"2019-05-26T11:41:52.484Z","comments":true,"path":"2018/01/29/shell-get-namespace/","link":"","permalink":"http://www.digmyth.com/2018/01/29/shell-get-namespace/","excerpt":"","text":"get namespace shell123456789101112131415161718# read me :please mv this file to ns;use method #ns info#!/bin/bash#echo_print () &#123; echo -e &quot;\\033[32m$1\\033[0m&quot;&#125;nsinfo () &#123;for i in $(ip netns);do echo_print $i;ip netns exec $i ifconfig | grep &quot;inet addr:10&quot; |awk &apos;$1=$1&apos;;echo &apos;&apos; ;done&#125;case &quot;$1&quot; ininfo) nsinfo ;;*) echo_print &quot;Usage: ns info command&quot; ;;esac","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"linux awk","slug":"linux-awk","date":"2018-01-15T02:48:54.000Z","updated":"2021-01-29T09:59:47.621Z","comments":true,"path":"2018/01/15/linux-awk/","link":"","permalink":"http://www.digmyth.com/2018/01/15/linux-awk/","excerpt":"","text":"知识1： awk中,字符串或空串参与运算时会被当作数字0 1234[root@cloud-site mnt]# awk &apos;BEGIN&#123;a=&quot;test&quot;;print a; a=a+1;print a;a++;print a&#125;&apos;test12 知识2：直接引用一个数组中不存在的元素时，awk会自动创建这个元素，并且为其赋值为”空字符串”，同样参与运算时被当作数字0 123[root@cloud-site mnt]# awk &apos;BEGIN&#123;print t[&quot;ip&quot;]; t[&quot;ip&quot;]++;print t[&quot;ip&quot;]&#125;&apos;1 123456789101112示例;[root@cloud-site mnt]# cat test.txtaa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.txt | awk &apos;&#123;A[$1]++&#125;END&#123;for (i in A)&#123; print i,A[i]&#125; &#125;&apos;bb 2cc 2aa 2 示例一123456789101112[root@cloud-site mnt]# cat a.log1|aa|3|45|5|6|7|8|9|2|aa|3|44|5|6|7|8|9|3|aa|3|43|5|6|7|8|9|4|aa|3|44|5|6|7|8|9|5|bb|3|45|5|6|7|8|9|6|bb|3|4 |5|6|7|8|9|[root@cloud-site mnt]# awk -F&apos;|&apos; &apos;&#123;counxxt[$4]++;&#125;END&#123;for (i in counxxt) &#123;print i&quot;|&quot;counxxt[i]&#125;&#125;&apos; a.log44|245|24 |143|1 示例二12345678910111213141516171819202122if 表达式1？那么表达式2 ： 否则 表达式3[root@cloud-site mnt]# cat test.txt aa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.sh#awk &apos;BEGIN &#123;#printf &quot;%s,%5s,%4s\\n&quot;,&quot;IP&quot;,&quot;AVG&quot;,&quot;MAX&quot;#&#125;awk &apos;&#123;A[$1]++;SNF[$1]+=$NF;MAXNF[$1]=($NF&gt;MAXNF[$1]?$NF:MAXNF[$1])&#125;END&#123;for (IP in A) print IP,SNF[IP]/A[IP],MAXNF[IP]&#125;&apos; test.txt[root@cloud-site mnt]# sh test.shbb 57.5 75cc 77 99aa 99.5 100","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"python-django-26-API验证","slug":"python-django-26-API验证","date":"2018-01-06T12:51:41.000Z","updated":"2018-02-12T12:44:12.444Z","comments":true,"path":"2018/01/06/python-django-26-API验证/","link":"","permalink":"http://www.digmyth.com/2018/01/06/python-django-26-API验证/","excerpt":"","text":"前言 验证原理 代码实现 讲解Django api验证，基于Tornado签名Cookie源码 验证原理客户端 服务端和客户端共同存一个字符串，客户端用这个字符串和时间戳算一个md5值，把这个md5和时间戳组成一个字符串在请求头里发送给服务端。 服务端 服务端收到这个字符串，分别取出md5和时间戳，用这个时间戳与自己存的key&#39;也算一个md5`值，这个md5值与客户端发来的md5值作比较。 当然这里还是不够的，比如黑客拿到md5和时间戳呢？ 我们还需要作进一步策略 策略一：发来的时间戳+5秒小于服务器时间戳，认为是非法请求 策略二：基于字符串和时间戳算的md5不等于客户端发来的md5值，认为是非法请求 策略三：5秒钟内的请求作进一步验证，维护一个5秒钟内的合法请求md5值,再来这个md5值的，认为是非法请求。5秒钟失效需要借住memcache redis，它们都自带过期时间。 策略四：如果基于网络原因，黑客的非法请求比客户端的请求先到达服务器，这样只能数据AES加密了。 代码实现客户端发送请求头 123456import timeimport hashlibdef md5(arg): hs = hashlib.md5() hs.update(arg.encode(&quot;utf-8&quot;)) return hs.hexdigest() 12345ctime=time.time()key=&apos;sdgasgsdgsdffsdf&apos;new_key=&quot;%s|%s&quot; %(key,ctime)md5_str = md5(new_key)auth_md5_str=&quot;%s|%s&quot; %(mdr_str,ctime) 发送请求 1requests.get(url=&quot;http://127.0.0.1:8000/test_api/&quot;,headers = &#123;&apos;auth-api&apos;:auth_md5_str&#125;) 服务端 123456789server_float_time = time.time()auth_header_val = requests.META.get(&apos;HTTP_AUTH_API&apos;)client_md5_str,client_ctime=auth_header_val.rsplit(&apos;|&apos;,maxsplit=1)if (client_float_time + 5) &lt; server_float_time : return HttpResponse(&quot;已过期&quot;)server_md5_str != client_md5_str: return HttpResponse(&quot;非法请求&quot;)if visited_keys.get(client_md5_str): return HttpResponse(&quot;来晚了，你是非法的&quot;) &lt;数据加密待续&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Flask-基础","slug":"web-Flask-基础","date":"2018-01-01T12:51:41.000Z","updated":"2018-04-23T07:00:52.290Z","comments":true,"path":"2018/01/01/web-Flask-基础/","link":"","permalink":"http://www.digmyth.com/2018/01/01/web-Flask-基础/","excerpt":"","text":"前言","categories":[{"name":"WebFlask开发","slug":"WebFlask开发","permalink":"http://www.digmyth.com/categories/WebFlask开发/"}],"tags":[]},{"title":"web-Django-25-DjangoAdmin","slug":"web-django-25-DjangoAdmin","date":"2017-12-28T12:37:00.000Z","updated":"2019-01-15T03:53:24.763Z","comments":true,"path":"2017/12/28/web-django-25-DjangoAdmin/","link":"","permalink":"http://www.digmyth.com/2017/12/28/web-django-25-DjangoAdmin/","excerpt":"","text":"目录 DjangoAdmin工作流程 制作启动文件 单例模式应用 博客参考 一 Django admin工作流程1 注册models_class，生成_registry 中model_class 字典1234admin.py注册models_class如models.UserInfofrom django.contrib import adminfrom app01 import modelsadmin.site.register(models.UserInfo) 2 admin.site.urls admin.site.urls循环_registry={}字典生成相应URL12345生成4个URL分别是如下：app01/userinfo/app01/userinfo/add/app01/userinfo/1/change/app01/userinfo/1/delete/ 其中要深入理解URL include原理： url(r’^xx’, “可以是视图函数，也可以是元组”),1234567partterns = [ url(r&apos;^admin&apos;, admin.site.urls), # admin.site.urls 返回形如（[],None,None）的元组. url(r&apos;^backend&apos;, include(&apos;backend.urls&apos;)), # include 同样返回形如（[],None,None）的元组. # 也可以写成形如 include([],None,None) 格式. ] 二 制作stack启动文件 1 创建一个stack 的app 2 settings.py 注册app- &apos;stack.apps.StackConfig&apos;, 3 在stack apps.py文件定义ready方法 stack/apps.py文件ready()方法123456from django.utils.module_loading import autodiscover_modulesclass StackConfig(AppConfig): name = &apos;stack&apos; def ready(self): autodiscover_modules(&quot;xxx&quot;) 4 启动项目时会先在执行所有app下的xxx.py文件. (当然前提是这些app也是settings.py注册好的) 三 单例模式单例模式有很多种实现方式 其中一种：利用模块多次导入时，除第一次外不会真正执行模块代码。 如果模块中有实例化对象操作，那么多次导入也不会真正实例化多个对象，而是同一个实例 如果在一个程序先运行的文件改变了实例数据或属性，后运行的文件导入后读这个实例就会有数据或属性. 示例： 随便定义一个实例化对象的文件stack/service.v1 123456789class StackSite(): def __init__(self): self._registry = &#123;&#125; def register(self,class_name,config_class): self._registry[class_name] = config_class site = StackSite()## 单例 在我们定义的启动文件app01/xxx.py中写入代码(因为会先执行xxx.py) 1234from stack.service import v1v1.site.register(&quot;k1&quot;,&quot;v1&quot;)v1.site.register(&quot;k2&quot;,&quot;v2&quot;)v1.site.name = &apos;wxq&apos; 项目urls.py中写入 from stack.service import v1 print(v1.site._registry) print(v1.site.name) 总结启动项目时，先执行app01/xxx.py,后执行urls.py文件，程序读到了实例的数据并不是重新实例化新对象，这就是单例模式的运用。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-24-Django中间件","slug":"web-django-24-Django中间件","date":"2017-12-26T12:26:37.000Z","updated":"2018-01-18T03:43:22.000Z","comments":true,"path":"2017/12/26/web-django-24-Django中间件/","link":"","permalink":"http://www.digmyth.com/2017/12/26/web-django-24-Django中间件/","excerpt":"","text":"目录 官方解释 Django默认 定义中间件 示例 总结 Django中间件学习 官方解释1234This document explains all middleware components that come with Django.For information on how to use them and how to write your own middleware, see the middleware usage guide.Middleware is a framework of hooks into Django’s request/response processing.It’s a light, low-level “plugin” system for globally altering Django’s input or output. Django 中间件是一个钩进request/response处理过程的框架，轻量且较为底层的插件系统，全局改变Django输入输出。 Django默认12345678910Django默认中间件MIDDLEWARE = [ &apos;django.middleware.security.SecurityMiddleware&apos;, &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, &apos;django.middleware.common.CommonMiddleware&apos;, &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;, &apos;django.contrib.messages.middleware.MessageMiddleware&apos;, &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,] 定义中间件在Django中就表现为一个类.123456789101112m1.process_exception(self, request, exception): print(&quot;m1.process_exception1&quot;)m1.process_requestm2.process_requestm1.process_viewm2.process_viewviews.pym2.process_exceptionm1.process_exceptionm2.process_responsem1.process_response 中间件流1234process_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_response 示例1... 总结：基于Django中间件我们能实现一些功能，这些处理是在请求到来之前或views视图函数处理过后。 process_request可以有返回值，也可以没有返回值。 process_response必须有返回值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-17-ModelForm","slug":"web-django-17-ModelForm","date":"2017-12-20T12:26:37.000Z","updated":"2018-01-18T03:48:11.260Z","comments":true,"path":"2017/12/20/web-django-17-ModelForm/","link":"","permalink":"http://www.digmyth.com/2017/12/20/web-django-17-ModelForm/","excerpt":"","text":"目录 回顾Form ModelForm特性 ModelForm使用 html前端展示 ModelForm简介1 回顾FormForm作用：第一： 用于Form验证第二： 用于生成 html标签，并且可以保留数据（如编辑） 缺点：多表查询时需要手动查出数据在前端渲染，跨表保存数据同样需要手动update() 2 ModelForm特性解决办法，引用ModelForm 1 它可以循环model class字段在前端生成表单或html标签并保留数据 2 调用save()方法自动跨表保存数据。 3 可以自定义models class以外的fields字段,很灵活，如果自定义的字段名与model class字段名重名， 那么model class字段将被重写 4 ModelForm同样可以做数据验证包括钩子函数 5 ModelForm中的fields字段是可以循环的，循环在前端生成不必写 6 当编辑数据时传入instance=obj 可以循环生成表单并且表单有值。 ModelForm适用场景 Form与ModelForm没有谁好谁不好，只是适用场景不同。 ModelForm依赖modelsclass, modelForm必须和models.py在一起。 3 ModelForm使用12345678910111213141516171819from django.forms import Formfrom django.forms import ModelFormfrom django.forms import fieldsfrom django.forms import widgets as fwidgetsfrom app01 import modelsclass TestForm(ModelForm): class Meta: model = models.Book fields = &quot;__all__&quot; # 可以是[&quot;&quot;,&quot;&quot;,] labels = &#123; &apos;title&apos;:&quot;书名&quot;, &quot;price&quot;:&quot;价格&quot;, &#125; error_messages = &#123; &quot;title&quot;:&#123;&quot;requried&quot;:&quot;书名不能为空&quot;,&#125;, &#125; widgets=&#123; &quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;) &#125; 4 html前端展示1234567&lt;form action=&quot;/addbook/&quot; method=&quot;POST&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;% for field in form %&#125; &lt;p&gt;&#123;&#123; field.label &#125;&#125;:&#123;&#123; field &#125;&#125; &#123;&#123; field.errors.0 &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt; 引入bootstrap时，querySet for循环展示:注意时间格式的转换1234567891011121314&lt;div class=&quot;container&quot; style=&quot;width: 700px;margin-top: 50px&quot;&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt;&lt;/thead&gt; &lt;tbody&gt; &#123;% for row in data_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.title &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.price &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"03-GET/POST/ContentType知识","slug":"web-get_post_contentype知识","date":"2017-12-15T12:51:41.000Z","updated":"2018-02-12T09:50:11.623Z","comments":true,"path":"2017/12/15/web-get_post_contentype知识/","link":"","permalink":"http://www.digmyth.com/2017/12/15/web-get_post_contentype知识/","excerpt":"","text":"前言 ContentType知识 requests发送get/post请求分析 requests发送get/post请求示例 表格总结 一、ContentType知识contentType 定义： 客户端告知服务器如何组装数据来发送，服务器那边就必须以相应编码解开。 contentType一般为 application/x-www–form-urlencode12如form就默认enctype=&quot;application/x-www-form-urlencoded&quot;形如b&apos;user=wxq&amp;pwd=123&apos; 组装数据。 Django帮我们默认以enctype=”application/x-www-form-urlencoded”解开后放在request.GET或 request.POST里方便我们取数据。如果是application/json 格式，双引号字符串 {“user”:”wxq”,”pwd”:123}，需自行解数据。 1form文件传送时必须指明enctype=&quot;multipart/form-data&quot; 如果是application/json,就要用相应格式解开后组装数据。application/json 双引号字符串 {“user”:”wxq”,”pwd”:123} request.body 报文元数据12345application/json data: JSON.stringfy(&#123;d&#125;) # 前端以json 格式发数据s=request.body.decode(&quot;utf8&quot;)d=json.loads(s) # 后端以json格式解数据d[&apos;name&apos;] 当ajax处理数据时，后端数据以json格式传过来的，那么前端需手动JSON.parse()反序列化操作， 我们可以添加参数datatype: “JSON” ，添加后就自动反序列化了。 二、 requests发送get/post请求分析分析知识点 分析如何组装数据发送 分析get/post请求组装数据方式的不同 分析get/post方式不同，requests参数写法上的不同 大家都知道请求头之间用\\r\\n分隔，请求头与请求体用\\r\\n\\r\\n分隔。 GET请求头get请求发送数据封装在请求头，形如http://www.baidu.com/?a=1&amp;b=2 get请求发送数据用params,params中的数据会组装在请求头上12requests.get(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;)data=&quot;http GET /index?a=1&amp;b=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&quot; POST请求头post请求发送数据可以像get一样?a=1&amp;b=2封装在请求头，但决大多数情况封装在请求体，形如1data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时可以data传参，数据在请求体里，封装为name=wxq&amp;age=18,请求头ContentType为application/x-www-form-urlencoded12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,data=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时也可以json传参,数据在请求体里，封装为json.dumps({‘name’:’wxq’,’age’:18})后的字符串。请求头ContentType为application/json12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,json=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&#123;&quot;name&quot;: &quot;wxq&quot;, &quot;age&quot;: 18&#125;&quot; 服务器解析当服务器接收到客户端发来的数据，所有的数据会放到request.FILES或request.body里，再跟据ContentType的不同放到相应变量里,如request.POST里是Content-Type:application/x-www-form-urlencoded; charset=UTF-8,也就是data而非json格式发来的数据。 12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 三、requests发送get/post请求示例data传参可以是字典可以是字符串可以是字节可以是文件对象1 requests.request(method=”post”,data=字典)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}1requests.post(url=&quot;xxx&quot;,data=&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;) 2 requests.request(method=”post”,data=字符串)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}12requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq&amp;pwd=123&quot;) # 或requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq;pwd=123&quot;) 基于HTTP本质，上面2种数据最终转为请求体\\r\\n\\r\\nname=wxq&amp;pwd=123 3 手动构建json字符串发送手动加headers={&#39;Content-Type&#39;: &#39;application/json&#39;}1234requests.post( url=&quot;xxx&quot;, data=json.dumps(&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;), headers=&#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;) json传参requests.request(method=”post”,json=…)1) 将json中对应的数据进行序列化成一个字符串，json.dumps(…)2) 然后发送到服务器端的body中3) 并且自动Content-Type是 {‘Content-Type’: ‘application/json’}1234def param_json(): requests.request(method=&apos;POST&apos;, url=&apos;http://127.0.0.1:8000/test/&apos;, json=&#123;&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;水电费&apos;&#125;) json方式传输数据的一种场景Content type: application/x-www-form-urlencode不支持传键所对应的值为字典的字典.1request.post(url=url,data=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 不支持 传键所对应的值为字典的字典,这种情况只能以json方式传送数据12request.post(url=url,json=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 支持Content type: application/json 四、总结 methond 传参 解析为 浏览器显示标识名 GET params ?page=1&amp;k1=v1 Query String Parameter POST data \\r\\n\\r\\nname=wxq&amp;pwd=123 Form Data POST json \\r\\n\\r\\n{“name”:”wxq”,”age”:18}” Request Payload","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"python-spider-基础知识","slug":"python-spider01-基础知识","date":"2017-12-06T12:51:41.000Z","updated":"2018-02-12T11:57:36.272Z","comments":true,"path":"2017/12/06/python-spider01-基础知识/","link":"","permalink":"http://www.digmyth.com/2017/12/06/python-spider01-基础知识/","excerpt":"","text":"前言 爬虫简介 具备技能 爬虫实现 爬虫示例 简介爬虫：利用python模块伪造浏览器行为，读取网页源码，再经过正则匹配取出HTML文本的一系列处理，数据分析称为爬虫 基本内容：123456789- python实现浏览器行为： requests- beautifulsoup4 对HTML内容进行分析- HTTP相关知识： - cookie - csftToken - 请求头：其中ContenType表明什么格式封装的数据，服务器需要用相应格式解数据 请求： 请求头(cookie)/请求体(发送的内容) 响应： 响应头（浏览器读取头数据）/响应体（我们看到的网页或网页源码）- 数据持久化（数据库存储） 具备技能1234567891011性能相关：批量get URL可想而知性能重要性1 线程池，进程池，2 协程coroutine（微线程）： 协程本身没有用，只做切换，具有切换特性,要想性能很高，刚好遇到IO时切换 3 异步非阻塞（如twisted,gevent,asyncio,tornado内部集成） 其中gevent异步模块由2个东西组成: greenlet协程: greenlet就是利用yield实现的协程 libevent: libevent做异步IO库 七牛云进程线程分享 异步非阻塞123遇到IO请求不等待继续执行其它任务,如果IO请求响应内容回来了,自动回调某个函数.异步： 回调（相关于通知机制）非阻塞： 不等待 后面会学到爬虫框架：scrapy1231 内部是twisted实现异步2 写入URL自动下载网页3 自动将下载的网页解析为对象方便我们处理 后面也会学到分布式爬虫组件redis-scrapy 爬虫实现基本模块：12pip3 install requestspip3 install beautifulsoup4 （将网页字符串解析为对象，用于直接取文本内容） 爬虫实现123451 代码发送get请求： 请求头+请求体2 接收返回值： 响应头+响应体（本质字符串）3 获取响应体后进行解析，方便获取文本内容 import requests from bs4 import BeautifulSoup 注意几点：1231 回车时得到token和cookies,如果有token和cookies的话取出来,一般get请求2 提交用户名密码时带上token和cookies,一般post请求,并且取出登录成功后的cookies3 登录后才能看到的网页(前2次请求的cookies都带上) 示例示例这里就不展开了，可以基于这几个站点简单入门 github或汽车之家 抽届点赞 博客园用户名密码密文发送给服务器的情况，其实是利用js三方模块在浏览器端加密再发送的（python rsa模块加密） 知乎，新浪微博这种有图形验证码的网站，需要第三方平台做图像识别（类似滑动验证码这种验证其实是向后台发送鼠标坐标）","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"web-Django-23-Django序列化","slug":"web-django-23-Django序列化","date":"2017-12-01T12:26:37.000Z","updated":"2018-01-18T03:43:21.996Z","comments":true,"path":"2017/12/01/web-django-23-Django序列化/","link":"","permalink":"http://www.digmyth.com/2017/12/01/web-django-23-Django序列化/","excerpt":"","text":"目录 序列化 Django中的序列化操作序列化操作参考ajax学习Django返回前端数据一般为json格式，那么就要数据进行序列化。方法一：Django内置serializers123from django.core import serializersret = models.BookType.objects.all()data = serializers.serialize(&quot;json&quot;, ret) 方法二：json.dumps123456import json #ret = models.BookType.objects.all().values(&apos;caption&apos;)ret = models.BookType.objects.all().values_list(&apos;caption&apos;)ret=list(ret)result = json.dumps(ret,nsure_ascii=False) 方法三：由于json.dumps时无法处理datetime日期，所以可以通过自定义处理器来做扩展12345678910111213import json from datetime import date from datetime import datetime class JsonCustomEncoder(json.JSONEncoder): def default(self, field): if isinstance(field, datetime): return o.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) elif isinstance(field, date): return o.strftime(&apos;%Y-%m-%d&apos;) else: return json.JSONEncoder.default(self, field) # ds = json.dumps(d, cls=JsonCustomEncoder) 有时在前端渲染也需要date:&#39;Y-m-d&#39;处理一下1&lt;p&gt;出版日期&lt;input type=&quot;date&quot; name=&quot;pubdate&quot; value=&quot;&#123;&#123; edit_book.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&quot;&gt;&lt;/p&gt; 如果用到了Form或ModelForm，同样需要widgets处理下时间格式12widgets=&#123;&quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;)","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-21-图片上传","slug":"web-django-21-图片上传","date":"2017-11-21T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/21/web-django-21-图片上传/","link":"","permalink":"http://www.digmyth.com/2017/11/21/web-django-21-图片上传/","excerpt":"","text":"目录 上传文件版本一 上传文件版本二 上传文件版本三 上传文件版本一定义views.py123456789101112def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) else: obj=request.FILES.get(&quot;fff&quot;) # obj.name 文件名 # obj.chunks 文件块 f = open(obj.name,&apos;wb&apos;) for chunk in obj.chunks(): f.write(chunk) f.close() return render(request,&quot;upload.html&quot;) upload.html12345&lt;form action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;p&gt;&lt;input type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt;&lt;/form&gt; 上传文件版本二版本一中form表单上传文件或图片无法做预览，并无法做失败验证及上传文件大小限制，那么就要用到ajax 方式发送。下面学习下ajax方式上传文件。定义views.py12345678910111213def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) elif request.is_ajax(): file_obj= request.FILES.get(&apos;obj&apos;) print(obj) f = open(file_obj.name, &apos;wb&apos;) for chunk in file_obj.chunks(): f.write(chunk) f.close() return HttpResponse(&quot;ok&quot;) else: pass 12345678910111213141516171819202122232425262728293031&lt;h1&gt;ajax形式上传文件&lt;/h1&gt;&lt;input type=&quot;file&quot; id=&quot;f4&quot;/&gt;&lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;btn&quot;&gt; #input的button默认不会有任何事件，除非绑定事件&#123;% csrf_token %&#125;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function () &#123; $(&quot;#btn&quot;).click(function () &#123; var fm=new FormData(); fm.append(&apos;obj&apos;,$(&quot;#f4&quot;)[0].files[0]); fm.append(&apos;csrfmiddlewaretoken&apos;,$.cookie(&apos;csrftoken&apos;)); //自行组数据$(&quot;input[name=&apos;csrfmiddlewaretoken&apos;]&quot;).val()); // fm.append(&apos;file_obj&apos;,document.getElementById(&quot;f4&quot;).files[0]); //document.getElementById(&quot;f4&quot;) # dom对象 // $(&quot;#f4&quot;) # jquery对象 // $(&quot;#f4&quot;)[0] #jquery对象转dom对象 $.ajax(&#123; url:&apos;/upload/&apos;, type:&apos;POST&apos;, data:fm, processData: false, contentType: false, success:function (data) &#123; console.log(data); &#125; &#125;) &#125;) &#125;)&lt;/script&gt; 上传文件版本三版本二中对各种浏览器兼容不好，可以再次改进. 利用form+iframe特性做的，业内都是这么做的，很重要，兼容性非常好。形式上与ajax很像但不是ajax,称伪ajax,后端不能用request.is_ajax()判断请求方式。不得不先来学习下iframe标签12&lt;iframe id=&quot;ifm&quot; src=&quot;http://www.chouti.com&quot;&gt;&lt;/iframe&gt;$(&quot;#ifm&quot;).attr(&apos;src&apos;, &apos;http://www.qq.com&apos;) # 修改iframe src属性但页面不刷新，返回的数据不在整个页面，而在iframe body里，基于这样的特性我们可以上传文件。 当form表单以iframe形式发送数据到后端，后端返回的数据会在iframe body里form 的target属性值要与iframe的name属性值保持一致。12345&lt;form id=&quot;ff1&quot; action=&quot;/upload/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &lt;p&gt;&lt;input onchange=&quot;changeImg();&quot; type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input id=&quot;sb&quot; type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt; &lt;/form&gt;&lt;iframe id=&quot;ifm&quot; name=&quot;ifr&quot; onload=&quot;sucessBack();&quot; &gt;&lt;/iframe&gt; 那么如何取出iframe body里的值呢？1$(&quot;#ifm&quot;).html(); # iframe会重新生成一个子document,有html/head/body,这种方法无法取出。 1$(&quot;#ifm&quot;).find(&apos;body&apos;).html(); # 有这种想法是好的，这种找只会在当前document里找，但是这样的document嵌套递归查找需要一个额外方法处理.contents()后再查找 1$(&quot;#ifm&quot;).contents().find(&apos;body&apos;).html(); # iframe最终正确的方法 文件上传完整版utils.py12345class BaseResponse(): def __init__(self): self.status=False self.data=None self.error=None views.py123456789101112131415161718192021from django.shortcuts import render,HttpResponse,redirectimport os,jsonfrom utils import BaseResponseret=BaseResponse()def upload(request): if request.method == &quot;GET&quot;: return render(request, &quot;upload.html&quot;) else: try: file_obj=request.FILES.get(&apos;fff&apos;) # file_obj.name # file name # file_obj.chunks() #file block file_path = os.path.join(&apos;static&apos;, file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) ret.status=True ret.data=file_path except Exception as e: ret.error=&quot;上传失败&quot; return HttpResponse(json.dumps(ret.__dict__,ensure_ascii=False)) upload.html123456789101112131415161718192021222324252627282930&lt;form id=&quot;sb&quot; action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;file&quot; name=&quot;fff&quot; onchange=&quot;changeImg();&quot;/&gt; &lt;!-- 元素更新时触发onchange事件 --&gt;&#123;# &lt;input type=&quot;submit&quot;&gt;#&#125;&lt;/form&gt;&lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; onload=&quot;successBack();&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt;&lt;div id=&quot;prevImg&quot;&gt;&lt;/div&gt;&lt;!-- 我们这里不是真正的ajax,是没有success回调函数的,上传成功后会返回数据到前端，文本载入会触发onload事件。 --&gt;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function successBack() &#123; var v=$(&quot;#ifr&quot;).contents().find(&quot;body&quot;).html(); var v=JSON.parse(v); if(v.status)&#123; var tag=document.createElement(&apos;img&apos;); tag.src=&quot;/&quot;+v.data; $(&quot;#prevImg&quot;).append(tag); &#125;else &#123; console.log(v.error) &#125; &#125; function changeImg() &#123; $(&quot;#sb&quot;)[0].submit(); // document.getElementById(&apos;sb&apos;).submit(); &#125;&lt;/script&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-20-ajax","slug":"web-django-20-ajax","date":"2017-11-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/20/web-django-20-ajax/","link":"","permalink":"http://www.digmyth.com/2017/11/20/web-django-20-ajax/","excerpt":"","text":"目录 代码例子 代码例子 ajax前端组装数据 ajax涉及的序列化 ajax错误验证 ajax的3种csrf_token Ajax 学习详情参考Ajax 武佩齐博客 这里只是对Ajax学习做一个记录和总结，内容还有很多没有包括。 代码例子普通请求 —&gt; render渲染全部HTMLAjax – -&gt; render生成己经渲染好的局部HTML, 功能单一。Ajax — &gt; HttpResponse(‘data’) 得到原始数据，ajax前端自行展示，定制化强，一般用于提供接口，为别人提供数据。 render和HttpResponse的关系？render:1 模板+数据进行替换2 HttpResponse(数据) HttpResponse:1 HttpResponse(数据) Ajax请求时，响应内容时可以是render和HttpResponse,不要认为只能用HttpResponse. views.py里不能return redirect(&quot;&quot;)跳转是在前端跳转location.href = “http://www.baidu.com&quot; ajax前端组装数据ajax形式发input数据时在前端取数据并组装数据后给后台123ajax取input数据时，可以用data:&#123;&quot;user&quot;:$(&quot;#user&quot;).val(),&quot;pwd&quot;:$(&quot;#pwd&quot;).val()&#125;获取数据，更简单的数据组装方法是加form表单:&lt;form id=&quot;ff&quot;&gt;&lt;input /&gt;&lt;/form&gt;此时取数据可以用：data: $(&quot;#ff&quot;).serialize(), ajax涉及的序列化Django 中Ajax方式获取ORM数据时，涉及序列化操作的5种方法1234567891011121314151617181920212223242526272829303132333435363738394041424344# # 方式一 我们伪造的数据是可以序列化实现展示的# # 模板渲染后生成字符串# # user_list = models.UserInfo.objects.all()# ## # return render(request,&quot;tpl.html&quot;,&#123;&quot;user_list&quot;:user_list&#125;)# user_list = [# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# ]## import json# data = json.dumps(user_list)# return HttpResponse(data)# # 方式二： 这里是失败的， QuerySet不支持Json序列化，经测试失败# user_list = models.UserInfo.objects.all()# import json# return HttpResponse(json.dumps(user_list))# # 方式三 也是成功的,但不常见## user_list = models.UserInfo.objects.all()# from django.core import serializers# data= serializers.serialize(&quot;json&quot;, user_list)# return HttpResponse(data)# 方式四 推荐用法user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data)# 方式五 user_list = models.UserInfo.objects.values_list(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data) Ajax 错误验证123456789101112## 异常判断 import json ret = &#123;&apos;status&apos;:False,&apos;data&apos;:None,&apos;error&apos;:None&#125; try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret[&apos;status&apos;]= True ret[&apos;data&apos;] = user_list except Exception as e: ret[&apos;error&apos;] = &apos;获取数据失败&apos; data = json.dumps(ret) return HttpResponse(data) 或者以类的形式调用更为简洁123456789101112131415161718app01项目下新建utls.pyclass BaseResponse(): def __init__(self): self.status = False self.data = None self.error = Noneviews.py中导入：from app01.utils import BaseResponseret = BaseResponse()try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret.status= True ret.data = user_listexcept Exception as e: ret.error = &apos;获取数据失败&apos; data = json.dumps(ret.__dict__,ensure_ascii=False) # False表示不要中文为变为unicode编码 return HttpResponse(data) 1234var tag.createElement(&quot;a&quot;)tag.innertHTML=&quot;hello&quot;div.append(tag) # &lt;div&gt; &lt;a&gt;hello&lt;/a&gt;&lt;/div&gt; 加在标签里面div.after(tag) # &lt;div&gt;&lt;/div&gt;&lt;a&gt;hello&lt;/a&gt; 加在标签后面 ajax的3种csrf_token方法一： 自己组装数据csrf_token12&#123;% csrf_token %&#125; 会生成带csrfmiddlewaretoken的input标签data:&#123;&apos;csrfmiddlewaretoken&apos;:$(&apos;input[name=&quot;csrfmiddlewaretoken&quot;]&apos;).val()&#125; 方法二：加 form表单后用$(“#form_id”).serialize()方法自动组装数据 121 添加form HTML 标签 &lt;form id=&quot;form_id&quot;&gt;&lt;input /&gt;&lt;/form&gt;2 用data: $(&quot;#form_id&quot;).serialize(),自动组装数据 方法三：自行在cookies里取csrf_token放在请求头里参考1234561 导入jquery.cookie.js: &lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;2 jquery方式操作cookie取值: csrf_token=$.cookie(&apos;csrftoken&apos;) 3 ajax形式添加到请求头里，注意写法是定死的 $.ajax(&#123; header: &#123;&quot;X-CSRFToken&quot;: $.cookie(&apos;csrftoken&apos;)&#125;， )&#125;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"linux nginx基础","slug":"linux-nginx","date":"2017-11-12T01:41:54.000Z","updated":"2018-10-21T11:30:26.599Z","comments":true,"path":"2017/11/12/linux-nginx/","link":"","permalink":"http://www.digmyth.com/2017/11/12/linux-nginx/","excerpt":"","text":"目录 nginx基本介绍 nginx URI优先级 nginx URI优先级第一优先级精确匹配此路径123location = URI &#123;&#125; 第二优先级不使用正则表达式的模糊匹配123location ^~ URI &#123;&#125; 第三优先级可使用正则表达式的模糊匹配123location ~ URI &#123;&#125; 第四优先级匹配当前路径及其子路径123location URI &#123;&#125; 补充 ~ 区分字符大小写匹配 ~* 不区分字符大小写匹配 ! 表过不匹配 !~* 不区分字符大小写非匹配","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux haproxy基础","slug":"haproxy-基础","date":"2017-11-12T01:41:54.000Z","updated":"2018-04-23T06:57:35.510Z","comments":true,"path":"2017/11/12/haproxy-基础/","link":"","permalink":"http://www.digmyth.com/2017/11/12/haproxy-基础/","excerpt":"","text":"目录 haproxy基本介绍 haproxy基础语法 haproxy应用 haproxy基本介绍haproxy基础语法当有多个缓存key/value服务器时，app缓存到服务器1，那么必须到服务器1才能找到缓存。 取模法：key- hash(16进制数值)–这个数值除以服务器数量的余数就是哪台服务器 当有服务器添加或移走这种缓存就失效了 如何解决，是有办法的，那就是改进上面那种方法，称一致性hash算法：consitent hash 有一个环，用32位二进制从0开始计数，环上分布有离散的2^32 点。key hash 后的值除以2^32时取余数，这个余数一定在0到2^32-1范围内，也就是在这个环上那么数据就是存储在余数的下一台服务器上，服务器是离散分布在这样的环上的。缺点：服务器分布可能存在偏斜，也就是可能所有服务器集中在环三分之一处。当存储数据找下一台服务器，那台服务器存储量太大了。 解决办法：使用虚拟节点离散分布在环上来代替物理节点。hadoop前身开源搜索引擎，任何搜索引擎首先是大数据搜索平台，其次才是高性能分析平台。 流式数据存储处理平台：storm spark大数据处理平台。12345678910111213141516nginx:server &#123;&#125;server &#123; proxy_pass: &#125;upstream &#123;&#125;upstream &#123;&#125; haproxy应用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"kolla Pike on CentOS 7.3","slug":"kolla-Pike-on-CentOS7.3","date":"2017-11-09T00:41:54.000Z","updated":"2017-11-08T07:15:16.901Z","comments":true,"path":"2017/11/09/kolla-Pike-on-CentOS7.3/","link":"","permalink":"http://www.digmyth.com/2017/11/09/kolla-Pike-on-CentOS7.3/","excerpt":"","text":"openstack Pike发布很长一段时间了，一直没有时间整理一份在kolla on CentOS7.3 的文档参考：沙克老师单节点ocata安装 环境准备12yum install epel-release yum install axel vim git curl wget lrzsz ansible gcc python-devel docker-ce yum12add docker-ce yum:yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo docker-ce install12install docker-ce# yum install docker-ce docker-ce configuration12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof 编辑 /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker kolla-ansible install github项目 openstack kolla镜像地址 openstack-ansible是用ansible部署openstack用的 ceph-ansible是用ansible部署ceph用的 kolla-ansible是用ansible部署kolla用的，其中openstack+ceph环境均分散在一个一个的docker容器里 安装pike版本 kolla-ansible，pip install 安装方式存在版本问题或非最新代码，这里直接git下载代码安装。12345678910cd /optgit clone https://github.com/openstack/kolla-ansible.gitcd /opt/kolla-ansiblegit branch -avgit checkout remotes/origin/stable/pikecp -r /opt/kolla-ansible/etc/kolla/ /etc/# 安装相关依赖包cd /opt/kolla-ansiblepip install -r requirements.txt 生成密码12cd /opt/kolla-ansible/toolspython generate_passwords.py 安装镜像仓库123456# docker pull registry下载最新pike 容器镜像：http://tarballs.openstack.org/kolla/images/centos-source-registry-pike.tar.gztar xf centos-source-registry-pike.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry eg:1234mkdir /registrytar -zxf /root/docker-registry.tar.gz -C /registrydocker load &lt; /root/registry.tardocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry check docker hub12345curl http://192.168.200.2:4000/v2/_catalog[root@controller01 ~]# curl 192.168.200.2:4000/v2/99cloud/centos-source-memcached/tags/list&#123;&quot;name&quot;:&quot;99cloud/centos-source-memcached&quot;,&quot;tags&quot;:[&quot;4.0.1.1&quot;]&#125;docker pull 192.168.200.2:4000/99cloud/centos-source-memcached:4.0.1.1 ceph disk set1# for i in vdb vdc vdd; do parted /dev/$i -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1; done in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 edit global.yml12edit /etc/kolla/global.yml此处略过。。。 kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient access dashboard1curl http://openstack_VIP/horizon","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"Mysql MGR 集群","slug":"mysql-MGR","date":"2017-11-08T22:41:54.000Z","updated":"2017-11-08T15:18:04.873Z","comments":true,"path":"2017/11/09/mysql-MGR/","link":"","permalink":"http://www.digmyth.com/2017/11/09/mysql-MGR/","excerpt":"","text":"目录 MGR简介 MGR安装 数据库Galera集群的笔记做过了，今天来讲一讲MySQL Group Replication组复制技术。 一 MGR简介MySQL当前存在的三种复制模式有：异步模式、半同步模式和组复制模式。MySQL Group Replication（简称MGR）官方推出的高可用解决方案， 原生复制技术，基于插件的方式工作。 分为以下两种 single primary mode 单主模式只有一个读写，其余都是只读。 multi primary mode多主模式全部可读写 不管组复制单主还是多主的故障切换都无法让应用无感知，需要自主实现。 包含以下特性： 复制管理操作更为自动化。 通过Paxos协议提供数据库集群节点数据强一致性保证。 多主模式所有节点都可读写操作。 解决网络分区导致的脑裂问题，提升复制数据的可靠性。 官方引言1Quite obviously, regardless the mode Group Replication is deployed, it does not handle client-side fail-over. That must be handled by the application itself, connector or a middleware framework such as a proxy or router. 意思就是说MGR内部没有提供一种机制来实现主节点故障切换对应用的无感知。应用的这种故障无感知需要借助外力实现。 组复制存在以下局限性123456789101112131415161. 所有涉及的数据都必须发生在InnoDB存储引擎的表内。2. 所有的表必须有明确的主键定义。3. 网络地址只支持IPv4。4. 需要低延迟，高带宽的网络。5. 目前集群限制最多允许9个节点。6. 必须启用binlog。7. binlog 格式必须是row格式。8. 必须打开gtid模式。9. 复制相关信息必须使用表存储。10.事务写集合（Transaction write set extraction）必须打开。（这个目前与savepoint冲突，这也是导致mysqldump无法备份GR实例的原因）11. log slave updates必须打开。12. binlog的checksum目前不支持。13. 由于事务写集合的干扰，无法使用savepoint。14. SERIALIZABLE 隔离级别目前不支持。15. 对同一个对象，在集群中不同的实例上，并行地执行DDL（哪怕是相互冲突的DDL）是可行的，但会导致数据一致性等方面的错误，目前阶段不支持在多节点同时执行同一对象的DDL。16. 外键的级联约束操作目前的实现并不完全支持，不推荐使用。 二 MGR安装3.1 软件安装官方单库安装官方集群安装 参考链接 :1234https://dev.mysql.com/doc/refman/5.7/en/replace-third-party-yum.html # 禁用第三方源或安装包https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html # 根据您的系统安装相应版本https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html #CentOS7.3安装mysql 5.7https://dev.mysql.com/doc/refman/5.7/en/group-replication.html # mysql Group Replication安装 123# rpm -ivh /opt/mysql57-community-release-el7-11.noarch.rpm# yum install mysql-community-server# systemctl start mysqld 3.2 内置策略说明mysql5.7启动服务后会生成一个随机密码用于临时登录，内置策略强制让你进入数据库后马上更改登录密码，并且有一套密码复杂度管理的策略。我们可以在数据库my.cnf中过滤掉复杂度策略或临时修改全局变量来忽略复杂度。123456789101112131415161718192021mysql&gt; select @@validate_password_length;+----------------------------+| @@validate_password_length |+----------------------------+| 8 |+----------------------------+1 row in set (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec) 或者/etc/my.cnf添加5行策略来忽略掉。12345validate_password_length = 0validate_password_mixed_case_count = 0validate_password_number_count = 0validate_password_policy =0validate_password_special_char_count =0 当然也可以类似以下命令临时全局修改1set global validate_password_special_char_count =0; # 全部设置为0 查询临时密码1# grep &apos;temporary password&apos; /var/log/mysqld.log 马上修改临时密码用以后续操作。123mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;Query OK, 0 rows affected (0.00 sec)#否则收到提示：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 3.3 为复制授权1234567mysql&gt; SET SQL_LOG_BIN=0;mysql&gt; CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; SET SQL_LOG_BIN=1;mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3.4 启动组复制123456789101112mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; Query OK, 0 rows affected (0.02 sec)mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+...| validate_password | ACTIVE | VALIDATE PASSWORD | validate_password.so | GPL || group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+46 rows in set (0.01 sec) 启动复制通道123SET GLOBAL group_replication_bootstrap_group=ON;START GROUP_REPLICATION;SET GLOBAL group_replication_bootstrap_group=OFF; 查看集群成员1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+1 row in set (0.00 sec) 创建测试同步数据1234mysql&gt; CREATE DATABASE test;mysql&gt; USE test;mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);mysql&gt; INSERT INTO t1 VALUES (1, &apos;Luis&apos;); 检查同步数据和Binlog1234567mysql&gt; select * from t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+1 row in set (0.01 sec) mysql&gt; show binlog events;12345678+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 1 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 1 | 150 | || binlog.000001 | 150 | Stop | 1 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec 3.5 加入集群其余节点加入集群1 先定义主配文件与主机hosts2 建立通道授权 123456SET SQL_LOG_BIN=0;CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos; ;GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;SET SQL_LOG_BIN=1;CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3 添加插件1mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; 4 启动复制通道1mysql&gt; START GROUP_REPLICATION; 如果有失败，尝试12mysql&gt; set global validate_password_policy=0; mysql&gt; set global group_replication_allow_local_disjoint_gtids_join=ON; 5 查看集群成员123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | 2863475f-c490-11e7-b93e-fa163ebc6e6c | 172.18.23.8 | 3306 | ONLINE || group_replication_applier | 9c1ded3e-c495-11e7-8c62-fa163ea91040 | 172.18.23.33 | 3306 | ONLINE || group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+3 rows in set (0.01 sec) 6 查看集群中的主节点1234567mysql&gt; SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= &apos;group_replication_primary_member&apos;;+--------------------------------------+| VARIABLE_VALUE |+--------------------------------------+| f2d4456f-c48b-11e7-94f2-fa163e894684 |+--------------------------------------+1 row in set (0.01 sec) 7 binlog123456789mysql&gt; show binlog events;+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 3 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 3 | 150 | || binlog.000001 | 150 | Stop | 3 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec) 8 my.cnf优化项1234max_connections = 4096max_prepared_stmt_count=100000query_cache_type = 1query_cache_size = 10M 9 命令123456789mysql&gt; show full processlist;+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| Id | User | Host | db | Command | Time | State | Info |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| 3 | root | localhost | test | Query | 0 | starting | show full processlist || 11 | system user | | NULL | Connect | 490 | executing | NULL || 14 | system user | | NULL | Connect | 490 | Slave has read all relay log; waiting for more updates | NULL |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+3 rows in set (0.00 sec)","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-22-验证码","slug":"web-django-22-验证码","date":"2017-11-08T12:26:37.000Z","updated":"2018-04-23T07:00:07.330Z","comments":true,"path":"2017/11/08/web-django-22-验证码/","link":"","permalink":"http://www.digmyth.com/2017/11/08/web-django-22-验证码/","excerpt":"","text":"目录 生成验证码 认证验证码 插件认证 生成验证码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108def get_valid_img(request): # 第一步 # f=open(&quot;default.jpg&quot;,&apos;rb&apos;) # data=f.read() # 第二步 # import PIL # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(123, 222, 255)) # f=open(&apos;code.png&apos;,&apos;wb&apos;) # img.save(f,&apos;png&apos;) # f = open(&apos;code.png&apos;, &apos;rb&apos;) # data=f.read() # f.close() # 第三步 # from io import BytesIO # f=BytesIO() # # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(255, 255, 66)) # img.save(f,&quot;png&quot;) # data=f.getvalue() # # 第四步： # # from io import BytesIO # # f = BytesIO() # from PIL import Image, ImageDraw, ImageFont # # # 画字 # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(0, 255, 0)) # draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) # font=ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;,28) # draw.text([15,0],&apos;y&apos;,&quot;red&quot;,font=font) # # img.save(f,&quot;png&quot;) # data=f.getvalue() # 第五步： import random from io import BytesIO from PIL import Image, ImageDraw, ImageFont f = BytesIO() img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))) draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) char_list = [] # # 画字 for i in range(5): char = random.choice([chr(random.randint(65, 90)), str(random.randint(1, 9)), chr(random.randint(97, 122)), ]) font = ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;, 28) draw.text([i * 24, 0], char, (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),font=font) char_list.append(char) # # # ========================= width = 120 height = 30 def rndColor(): &quot;&quot;&quot; 生成随机颜色 :return: &quot;&quot;&quot; return (random.randint(0, 255), random.randint(10, 255), random.randint(64, 255)) # 写干扰点 for i in range(40): draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # # 写干扰圆圈 # for i in range(40): # draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # x = random.randint(0, width) # y = random.randint(0, height) # draw.arc((x, y, x + 4, y + 4), 0, 90, fill=rndColor()) # # # 画干扰线 # for i in range(5): # x1 = random.randint(0, width) # y1 = random.randint(0, height) # x2 = random.randint(0, width) # y2 = random.randint(0, height) # # draw.line((x1, y1, x2, y2), fill=rndColor()) img.save(f, &quot;png&quot;) data = f.getvalue() s = &apos;&apos;.join(char_list) request.session[&quot;valid_code&quot;] = s &apos;&apos;&apos; Dajngo: set_cookie(&quot;sessionId&quot;,&quot;asdsa234asd3sad&quot;) in session表 sessionkey sessiondata asdsa234asd3sad &#123;&quot;valid_code&quot;:s&#125; &apos;&apos;&apos; return HttpResponse(data) 认证验证码注意： 验证码的验证过程也是基于session/cookie,session/cookie知识必备12345678910111213141516171819202122232425262728from PIL import Imagefrom blog.utils import BaseResponsefrom django.contrib import authfrom blog import modelsimport jsonfrom blog.forms import RegFormdef login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.is_ajax(): username=request.POST.get(&quot;username&quot;) password=request.POST.get(&quot;password&quot;) valid=request.POST.get(&quot;valid&quot;) # 输入的验证码 keep_valid = request.session.get(&quot;valid_code&quot;) loginResponse = BaseResponse() if valid.upper() == keep_valid.upper(): user=auth.authenticate(username=username,password=password) # auth模块做认证 if user: loginResponse.user = username auth.login(request,user) # auth模块加session else: loginResponse.error = &quot;用户名或密码错误&quot; else: loginResponse.error=&quot;验证码错误&quot; return HttpResponse(json.dumps(loginResponse.__dict__)) 插件认证这个插件用于拦截机器识别，确定人为登录，使认证系统更加安全等补充… 参考","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"Mysql Galera集群搭建","slug":"mysql-Galera","date":"2017-11-08T01:41:54.000Z","updated":"2017-11-07T13:25:31.456Z","comments":true,"path":"2017/11/08/mysql-Galera/","link":"","permalink":"http://www.digmyth.com/2017/11/08/mysql-Galera/","excerpt":"","text":"目录 wsrep简介 Galera集群搭建 wsrep简介wsrep是writeset replication的简称，是一种API，在底层调用各库实现数据库同步写.通过wsrep协议在全局实现复制,任何一节点都可读写. 基于wsrep协议提供的一种底层复制机制，实现了Galera cluster数据库集群。因此Galera cluster需要特定研发的一个数据库版本,只有支持了特别的研发版本，才能借住于wsrep协议实现复制机制. 多个节点之上有了信息层，上层应用完成高可用，研发时调用信息层所提供的api去开发，并基于这个api去完成集群事务决策，不然就要自行加入中间层称资源管理器crm，如pacemaker galera cluster不是专为数据库提供的，只是一个工作在较为底层能够为你的服务提供数据复制功能的底层组件. mysql只有在研发时调用了galera cluster api写的mysql才能利用galera cluster完成复制,它的复制不再是让其它节点通过读取主节点二进制日志文件在本地重放，而是你指明了复制哪个数据库文件，由galera cluster自己在底层完成同步，mysql本身不感知. 12percona-cluster 版本支持galera clusterMariaDB-cluster 版本支持galera cluster 复制的问题和解决方案:(1) 数据损坏或丢失1234语句或行记录二进制日志，从而在从服务器上重放，重放机制也可能主从不一致的情况硬件故障、软件bug也会有数据损坏或丢失Master: MHA + semi replication(至少有一个从节点接收到了提交的binlog事件才返回成功，也是半同步复制)如果主节点数据损坏或丢失，就必须手动在从节点通过gtid来判断出己经提交的所有应用或事务，然后合并出一个较新的从节点提升为主节点Slave: 重新复制数据即可 (2) 运维部署注意事项：12345关键业务监控重要数据要备份和冗余不能混合使用存储引警MyISM: 不支持事务InnoDB: 支持事务 (3) 设置了不唯一的server ID12不唯一，整个复制集群数据产生错乱，每一个服务节点都不会在本地重放由同一个server ID 所产生的事件会导致重新复制数据 (4) 复制延迟12345需要额外监控工具的辅助自写一些脚本监控从节点有一个落后于主节点的时间判定，这个时间不为0时，尝试重启从节点服务对于从服务器延迟，主节点的事务是可以并发的，往二进制写入是单线程的，有先有后，从服务器重放也是单线程的，从服务器延迟落后也是必然的mysql5.6/mariadb 10以后引入了多线程复制机制，三节点集群可设置wsrep_slave_threads = 4 数据库服务衡量指标12qps : query per second 查询量tps: transaction per second 事务量 Galera集群搭建最新文档请参考Galera 集群官方链接 一 准备工作1 关闭防火墙2 关闭selinux3 同步主机时间4 设置hosts文件 二 MariaDB源在MariaDB 10.1以前需要卸载mariadb包，单独准备MariaDB-Galera-server源来安装MariaDB-Galera-server包例：123456789101112yum list all | grep -i galerayum remove mariadb*yum -y install MariaDB-Galera-server.rpm galera-25.3rpm -ql MariaDB-Galera-serverrpm -qa | grep MariaDB MariaDB-common-10.0.32-1.el7.centos.x86_64 MariaDB-shared-10.0.32-1.el7.centos.x86_64 MariaDB-Galera-server-10.0.32-1.el7.centos.x86_64 MariaDB-client-10.0.32-1.el7.centos.x86_64vim /etc/my.cnf.d/server.cnf[galera]... 而在MariaDB 10.1以后MariaDB-server己经自带Galera集群了，不必单独安装MariaDB-Galera-server包，只需准备如下源 编辑/etc/yum.repos.d/Mariadb.repo1234567# MariaDB 10.2 CentOS repository list - created 2017-11-07 12:07 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 三 软件安装1yum install MariaDB-server MariaDB-client 四 修改配置编辑/etc/my.cnf.d/server.cnf123456789101112[galera]#Mandatory settingswsrep_provider=/usr/lib64/galera/libgalera_smm.so # 可查rpm -ql galera | grep -i smm.sowsrep_cluster_address = &apos;gcomm://172.16.100.67,172.16.100.68,172.16.100.69&apos;wsrep_cluster_name = &apos;cluster&apos;wsrep_node_name = &apos;node1&apos;wsrep_node_address= &apos;172.16.100.67&apos;binlog_format = rowdefault_storage_engine = InnoDBinnodb_autoinc_lock_mode = 2bind-address = 0.0.0.0wsrep_on=ON 五 启动服务任意一个节点启动123/etc/init.d/mysql start --wsrep-new-cluster或service mysql bootstrap或systemctl start mariadb --wsrep-new-cluster 然后在其它节点正常启动即可12systemctl start mariadbMariaDB [(none)]&gt; show status like &apos;%wsrep%&apos;; 简单验证1234567create database mydb;use mydbcreate table tb1 (id int, name char(10));desc tb1;create table tb2 (id int unsigend auto_increment not null primary key, name char(30));insert into tb2(name) values (&apos;hi&apos;, &apos;hello&apos;)select * from tb2; 有关认证及集群检测自行研究1234wsrep_sst_method = xtrabackup-v2wsrep_sst_auth = root:NtEXLlZGF9KeXYUE79e7H8N5C9Vdy0EkHlBfFPtrwsrep_slave_threads = 4wsrep_notify_cmd = /usr/local/bin/wsrep-notify.sh # 注意定义这个脚本","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"ceph-01-运维那事","slug":"ceph-01-运维那事","date":"2017-11-05T01:41:54.000Z","updated":"2017-11-22T08:06:37.975Z","comments":true,"path":"2017/11/05/ceph-01-运维那事/","link":"","permalink":"http://www.digmyth.com/2017/11/05/ceph-01-运维那事/","excerpt":"","text":"待整理ceph运维笔记 12ceph osd set nooutceph osd unset noout 1rbd create wxq --size 1 12345678(ceph-mon)[root@pike-vm /]# rbd info rbd/wxqrbd image &apos;wxq&apos;: size 1024 kB in 1 objects order 22 (4096 kB objects) block_name_prefix: rbd_data.498102ae8944a format: 2 features: layering, exclusive-lock, object-map, fast-diff, deep-flatten flags: 12(ceph-mon)[root@pike-vm /]# ceph osd map rbd rbd_data.498102ae8944aosdmap e183 pool &apos;rbd&apos; (0) object &apos;rbd_data.498102ae8944a&apos; -&gt; pg 0.455bea7d (0.3d) -&gt; up ([1], p1) acting ([1], p1) 123456[root@lab8106 ]#ceph-objectstore-tool \\ --data-path /var/lib/ceph/osd/ceph-1/ \\ --journal-path /var/lib/ceph/osd/ceph-1/journal \\ --pgid 0.3d \\ rbd_data.498102ae8944a remove 12(ceph-mon)[root@pike-vm /]# ceph pg map 8.7d osdmap e183 pg 8.7d (8.7d) -&gt; up [2] acting [2] 12345(ceph-mon)[root@pike-vm /]# ceph pg 8.7d query&#123; &quot;state&quot;: &quot;active+clean&quot;, &quot;snap_trimq&quot;: &quot;[]&quot;,... 1234ceph pg dumpceph osd dumpceph pg map 8.7dceph pg 8.7d list_missing 12ceph pg 4.438 mark_unfound_lost revertceph pg 4.438 mark_unfound_lost delete 12ceph pg repair 0.44ceph osd pool set rbd min_size 1","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"proxy-01-代理","slug":"proxy-01-代理","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:45:24.259Z","comments":true,"path":"2017/10/31/proxy-01-代理/","link":"","permalink":"http://www.digmyth.com/2017/10/31/proxy-01-代理/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"webssh-shellinabox","slug":"linux-shellinabox","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:43:37.447Z","comments":true,"path":"2017/10/31/linux-shellinabox/","link":"","permalink":"http://www.digmyth.com/2017/10/31/linux-shellinabox/","excerpt":"","text":"利用http/https协议网页连接linux服务器，Webssh中最简单最方便的一种,还有GateOne/原生webssh yum安装1yum install shellinabox -y 查看安装文件，主要是主题相关，可以根据其位置自定义主题123456789101112131415161718rpm -ql shellinabox/etc/sysconfig/shellinaboxd/usr/lib/systemd/system/shellinaboxd.service/usr/sbin/shellinaboxd/usr/share/doc/shellinabox-2.20/usr/share/doc/shellinabox-2.20/AUTHORS/usr/share/doc/shellinabox-2.20/NEWS/usr/share/doc/shellinabox-2.20/README/usr/share/doc/shellinabox-2.20/README.Fedora/usr/share/doc/shellinabox-2.20/print-styles.css/usr/share/doc/shellinabox-2.20/shell_in_a_box.js/usr/share/doc/shellinabox-2.20/styles.css/usr/share/man/man1/shellinaboxd.1.gz/usr/share/shellinabox/usr/share/shellinabox/color.css/usr/share/shellinabox/monochrome.css/usr/share/shellinabox/white-on-black.css/var/lib/shellinabox 编辑配置文件/etc/sysconfig/shellinaboxd1OPTS=&quot;--css=/usr/share/shellinabox/white-on-black.css --disable-ssl-menu -s /:SSH:192.168.1.244&quot; 启动服务12systemctl enable shellinaboxd.servicesystemctl start shellinaboxd.service 网页登录服务器 https://192.168.1.244:4200","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-19-auth认证系统","slug":"web-django-19-auth认证系统","date":"2017-10-09T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/10/09/web-django-19-auth认证系统/","link":"","permalink":"http://www.digmyth.com/2017/10/09/web-django-19-auth认证系统/","excerpt":"","text":"目录 auth模块 Django内置补充 auth模块可以基于Cookie/Session自己写登录、注销的用户认证，这里我们学习Django自带的auth模块实现用户的登录、注销认证系统。 模块引入123from django.contrib import auth # 模块引入#from django.contrib.auth.models import User,AbstractUser#from app01 import models 下面2条命令会生成Django默认表，其中有张表auth_user用于存认证用户信息。12python manage.py makemigrationspython manage.py migrate 创建一个超级用户，auth_user可查看1python manage.py createsuperuser 自己写登录系统123456789101112131415161718192021def login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.method==&quot;POST&quot;: username=request.POST.get(&quot;username&quot;) pwd=request.POST.get(&quot;pwd&quot;) user_obj=auth.authenticate(username=username,password=pwd) # 验证 if user_obj: auth.login(request,user_obj) # 写入session return redirect(&quot;/home/&quot;) else: return redirect(&quot;/login/&quot;)def log_out(request): auth.logout(request) #相当于request.session.flush() 去除session return redirect(&quot;/login/&quot;)def home(request): if not request.user_obj.is_authenticated(): # 是否认证过有没写入session return redirect(&quot;/login/&quot;) return render(request,&quot;home.html&quot;) 注意：利用Django自带的表创建用户，不能对Django自带的表直接操作，那怎么创建呢，Django提供一个接口，通过auth模块操作User表.12from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;） 当Django自带User表字段不够用时，可以自己建表继承User表字段，方法:123from django.contrib.auth.models import AbstractUserclass UserInfo(AbstractUser): detail = modoles.CharField(max_length=32) 自建表记得settins.py配置AUTH_USER_MODEL123456789STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS =[ os.path.join(BASE_DIR,&quot;blog&quot;,&quot;static&quot;),]# MEDIA_ROOT=os.path.join(BASE_DIR,&apos;blog&apos;,&apos;media&apos;,&apos;upload&apos;)# MEDIA_URL = &apos;/media/&apos;AUTH_USER_MODEL= &quot;blog.UserInfo&quot; Django 内置补充1234567891011121314151617181920212223242526272829303132333435363738django已经为我们设计好了一个用于此种情况的装饰器：login_requierd()from django.contrib.auth.decorators import login_required @login_requireddef my_view(request): ...若用户没有登录，则会跳转到django默认的 登录URL &apos;/accounts/login/ &apos; (这个值可以在settings文件中通过LOGIN_URL进行修改)。并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。User对象User 对象属性：username， password（必填项）password用哈希算法保存到数据库is_staff ： 用户是否拥有网站的管理权限.is_active ： 是否允许用户登录, 设置为``False``，可以不用删除用户来禁止 用户登录2.1 、is_authenticated()表明是否认证通过并有session,当使用auth模块时，前端`&#123;&#123; request.user &#125;&#125;`可以直接使用不需要后端传入request.user变量。request.user.username 为AnonymousUser或用户名2.2 、创建用户使用 create_user 辅助函数创建用户:from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;）2.3 、check_password(passwd)用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 True2.4 、修改密码使用 set_password() 来修改密码user = User.objects.get(username=&apos;&apos;)user.set_password(password=&apos;&apos;)user.save 简单示例注册：1234567891011121314151617181920def sign_up(request): state = None if request.method == &apos;POST&apos;: password = request.POST.get(&apos;password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) email=request.POST.get(&apos;email&apos;, &apos;&apos;) username = request.POST.get(&apos;username&apos;, &apos;&apos;) if User.objects.filter(username=username): state = &apos;user_exist&apos; else: new_user = User.objects.create_user(username=username, password=password,email=email) new_user.save() return redirect(&apos;/book/&apos;) content = &#123; &apos;state&apos;: state, &apos;user&apos;: None, &#125; return render(request, &apos;sign_up.html&apos;, content) 修改密码：123456789101112131415161718192021222324@login_requireddef set_password(request): user = request.user state = None if request.method == &apos;POST&apos;: old_password = request.POST.get(&apos;old_password&apos;, &apos;&apos;) new_password = request.POST.get(&apos;new_password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) if user.check_password(old_password): if not new_password: state = &apos;empty&apos; elif new_password != repeat_password: state = &apos;repeat_error&apos; else: user.set_password(new_password) user.save() return redirect(&quot;/log_in/&quot;) else: state = &apos;password_error&apos; content = &#123; &apos;user&apos;: user, &apos;state&apos;: state, &#125; return render(request, &apos;set_password.html&apos;, content) 补充原文","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-19-Cookies-Session","slug":"web-django-19-Cookies-Session","date":"2017-10-08T12:26:37.000Z","updated":"2019-01-20T03:34:50.249Z","comments":true,"path":"2017/10/08/web-django-19-Cookies-Session/","link":"","permalink":"http://www.digmyth.com/2017/10/08/web-django-19-Cookies-Session/","excerpt":"","text":"目录 Cookies Session 代码学习 相关配置 总结 Cookies用户第一次请求时，服务器会在浏览器上写入cookies键值对，下一次请求会把这个键值对带上，服务器会验证这个cookies键值对，基于这样的特性cookies可以做登录验证和投票。如果没有cookies时，会先让你做用户登录。 Session所有的用户信息都写入客户端浏览器存在安全问题也不现实，我们把这些信息都写到服务器端，对应一个随机字符串，再把这个随机字符串写入cookies，格式为{“sessionid”:”随机字符串”},问题就得到了解决。 cookies就是能在客户端浏览器写键值对的一种机制，类似’user’:’abc’, 如果写的是’sessionid’:’随机字符串’，那么session就诞生了，服务端再拿到这样的随机字符串，记录信息格式如’随机字符串’:’你想存的敏感信息’ 代码学习Cookies 工作特性：在浏览器F12 network-&gt;cookies中首次请求时可以看到 Response Cookies有写入的键值对，下次再访问时Request Cookies有这个键值对，证明此时浏览器会带着这个键值对发给服务器。可以简单用下面代码测试123456def ck(request): print(request.COOKIES) # cookies会封装在request.COOKIES内 obj = render(request, &quot;ck.html&quot;, &#123;&quot;msg&quot;: &quot;&quot;&#125;) obj.set_cookie(&apos;user&apos;, &apos;wxq&apos;) # 向浏览器写入cookies键值对 return obj 下面用代码描述Cookies、Session各自工作：login.html123456&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/form&gt; views.py视图12345678910111213141516171819202122232425from app01 import modelsdef login(request): if request.method == &quot;GET&quot;: return render(request, &apos;login.html&apos;,&#123;&quot;msg&quot;: &quot;&quot;&#125;) else: u = request.POST.get(&quot;username&quot;) p = request.POST.get(&quot;pwd&quot;) v=models.UserInfo.objects.filter(username=u, pwd=p).exists() if v: # obj.set_cookie(&quot;user&quot;, u,max_age=5) request.session[&quot;user&quot;] = u request.session[&quot;pwd&quot;] = p return redirect(&quot;/home/&quot;) else: return render(request,&quot;login.html&quot;,&#123;&quot;msg&quot;: &quot;用户名或密码错误&quot;&#125;)def home(request): # v = request.COOKIES.get(&quot;user&quot;) v = request.session.get(&quot;user&quot;) if v: return HttpResponse(&quot;登录成功&quot;) else: return redirect(&quot;/login/&quot;) 利用session注销1234567891011def logout(request): &apos;&apos;&apos; obj=HttpResponse(&quot;xxx&quot;) obj.set_cookie(&quot;user&quot;,&quot;name&quot;) # 设置cookie request.COOKIES.get(&quot;user&quot;) # 获取cookie obj.delete_cookie(&apos;user&apos;) # 清除cookie &apos;&apos;&apos; #request.session[&apos;user&apos;] = &apos;wxq&apos; # 设置session #request.session.get(&apos;user&apos;) # 获取session request.session.clear() # 清除session return redirect(&quot;/login/&quot;) Cookies、Session相关配置配置参考 settings.py配置12345678910SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos; # 引擎（默认） SESSION_COOKIE_NAME ＝ &quot;sessionid&quot; # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）SESSION_COOKIE_PATH ＝ &quot;/&quot; # Session的cookie保存的路径（默认）SESSION_COOKIE_DOMAIN = None # Session的cookie保存的域名（默认）SESSION_COOKIE_SECURE = False # 是否Https传输cookie（默认）SESSION_COOKIE_HTTPONLY = True # 是否Session的cookie只支持http传输（默认）SESSION_COOKIE_AGE = 1209600 # Session的cookie失效日期（2周）（默认）SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使得Session过期（默认）SESSION_SAVE_EVERY_REQUEST = True # 是否每次请求都保存Session，默认修改之后才保存（默认） 总结1 cookies是记录在浏览器上的键值对，本身与登录没有任何关系。 cookies信息保存在request.COOKIES.2 session是记录在服务器上的键值对，key是一个随机字符串, session信息保存在request.session字典里的.3 只有Django框架有session 相关的封装,Flask/tornado等其它web框架是没有的，需要自己写Cookies、session.","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(三)","slug":"web-django-orm(三)","date":"2017-09-15T12:51:41.000Z","updated":"2018-01-18T03:45:03.508Z","comments":true,"path":"2017/09/15/web-django-orm(三)/","link":"","permalink":"http://www.digmyth.com/2017/09/15/web-django-orm(三)/","excerpt":"","text":"目录 Orm Shell FQ查询 聚合查询 参考资料官方昊练习一练习二pythoncode 一 Orm Shell pycharm中models我们己经学习过了，这里记录下在linux操作系统中启动Orm Shell需要做的几件事儿. 1 模块导入12345pip3 install pymysqlpycharm中可以在应用目录下__init__.py,也可以在项目目录__init__.py下import pymysqlpymysql.install_as_MySQLdb()但是linux系统里只能在项目目录下 2 models.py的区别1234在建立一对一或一对多关系表时需要位置参数on_delete=models.CASCADE，多对多不需要author=models.OneToOneField(&quot;Author&quot;,on_delete=models.CASCADE)publisher=models.ForeignKey(to=&quot;Publish&quot;,on_delete=models.CASCADE)authors=models.ManyToManyField(&quot;Author&quot;) 3 数据库12345678910DATABASES = &#123;&apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125; &#125; 4 明确指明INSTALLED_APPS123456789 INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;app01.apps.App01Config&apos;, ] 5 启动Orm Shell可以命令行操作orm语句学习了123python3 manage.py shell&gt;&gt;&gt; from app01 import models&gt;&gt;&gt; 6 联表sql示例原始sql语句的一个精典联表操作示例123456789101112131415161718 MariaDB [wxq_db]&gt; select sum(app01_book.price) as bookSumPrice,app01_publish.name -&gt;from app01_book_authors -&gt;left join app01_book -&gt;on app01_book.nid=book_id -&gt;left join app01_author -&gt;on author_id=app01_author.id -&gt;left join app01_publish -&gt;on publisher_id=app01_publish.id -&gt;group by app01_publish.name -&gt;having bookSumPrice &gt; 100 -&gt;order by bookSumPrice desc;+--------------+-----------------+| bookSumPrice | name |+--------------+-----------------+| 176.40 | 工业出版社 || 124.00 | 人民出版社 |+--------------+-----------------+2 rows in set (0.00 sec) 二 FQ查询123456789101112131415161718def FQQuery(request): from django.db.models import F,Q # F查询 # F查询用于自修改或字段比较或一个字段值赋值给另一字段的场景 # ret1=models.Book.objects.filter(comment_num__gt=50) # ret2=models.Book.objects.filter(comment_num__gt=F(&quot;read_num&quot;)*2) # print(ret2) #models.Book.objects.all().update(price=F(&quot;price&quot;)+10) ################################## Q查询 ret3=models.Book.objects.filter(comment_num__gt=50,read_num__gt=50) # 并且 ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100)) # 或者 print(ret3) return HttpResponse(&quot;OK&quot;) F查询总结1234F查询适用场景:场景1： 两个字段间值的比较F(&apos;price&apos;)场景2： 自运算，如F(&apos;price&apos;) + 10 Q查询总结12345# 注意事项：不同顺序的区别，不同放置的区别# 关键字语句放在Q查询的后面，并且只要有(逗号)就是(且)的意思#ret3=models.Book.objects.filter(price__lt=100,(Q(comment_num__gt=100)|Q(read_num__gt=100))) # 有效语句#ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100),price__lt=100) # 有效语句#ret3=models.Book.objects.filter(price__lt=100,Q(comment_num__gt=100)|Q(read_num__gt=100)) # 无效语句 三 聚合查询1234567891011121314151617181920212223242526272829303132def juheQuery(reqeuest): from django.db.models import F,Q,Avg,Count,Sum,Min,Max # 单纯聚合函数 # 计算所有图书的平均价格 # ret=models.Book.objects.all().aggregate(priceSum=Sum(&quot;price&quot;)) # print(ret) # &#123;&apos;priceSum&apos;: Decimal(&apos;2158.00&apos;)&#125; # 统计每一本书的作者个数 # ret2=models.Book.objects.all().annotate(authors_num=Count(&quot;authors&quot;)) # 返回QuerySet # print(ret2) # [book_obj1,book_obj2,book_obj3,book_obj4,....] # # for obj in ret2: # print(obj.nid,obj.title,obj.authors_num) # 查询每一个出版社出版过的所有书籍的总价格 #方式1： # ret3=models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)) # # for obj in ret3: # print(obj.id,obj.name,obj.priceSum) # ret4 = models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)).values(&quot;name&quot;,&quot;priceSum&quot;) # print(ret4) # 方式2： # ret5=models.Book.objects.all().values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&quot;publisher__name&quot;,&quot;priceSum&quot;) # print(ret5) return HttpResponse(&quot;OK&quot;) 实践示例12345In [178]: models.Publish.objects.annotate(priceSum=Sum(&quot;book__price&quot;)).values(&apos;name&apos;,&apos;priceSum&apos;)Out[178]: &lt;QuerySet [&#123;&apos;priceSum&apos;: Decimal(&apos;12.00&apos;), &apos;name&apos;: &apos;人民出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;工业出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;清华版社&apos;&#125;]&gt;In [179]: models.Book.objects.values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&apos;publisher__name&apos;,&apos;priceSum&apos;)Out[179]: &lt;QuerySet [&#123;&apos;publisher__name&apos;: &apos;人民出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;12.00&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;清华版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;工业出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;]&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"ceph-luminous安装","slug":"ceph-luminous安装","date":"2017-09-05T01:41:54.000Z","updated":"2017-11-13T05:12:03.615Z","comments":true,"path":"2017/09/05/ceph-luminous安装/","link":"","permalink":"http://www.digmyth.com/2017/09/05/ceph-luminous安装/","excerpt":"","text":"这里只简单列下luminous12.X 安装，默认存储引警Bluestore及监控界面 1 /etc/hosts解析略2 ntpservers时间同步略3 系统配置123456sed -i &apos;s/SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/configsetenforce 0systemctl stop firewalld systemctl disable firewalldsystemctl stop NetworkManagersystemctl disable NetworkManager 添加yum源123456789[root@cluster-sql ~]# cat ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 4 新建集群123456# mkdir /mnt/cluster# cd /mnt/cluster # yum -y install ceph-deploy# ceph-deploy install --no-adjust-repos node01 node02 node03# ceph-deploy new node01 node02 node03 5 生成原始文件12[root@node01 cluster]# ls /mnt/clusterceph.conf ceph-deploy-ceph.log ceph.mon.keyring 6 根据需要更新原始文件添加需的ceph.conf配置12345678910111213[root@node01 cluster]# cat ceph.conf [global]fsid = d8fa6509-0196-41bc-838e-6226c927e680mon_initial_members = node01, node02, node03mon_host = 192.168.1.10,192.168.1.11,192.168.1.12auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephxmon_allow_pool_delete=true[mgr]mgr modules = dashboard 7 初始化同时推送配置文件1# ceph-deploy mon create-initial 9 推送密钥文件1[root@node01 cluster]# ceph-deploy admin node01 node02 node03 10 查看集群状态12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: 11 添加激活osd磁盘12345[root@node01 cluster]# ceph-deploy osd create --bluestore node01:/dev/sdb node02:/dev/sdb node03:/dev/sdb --zap-disk[root@node01 cluster]# lsceph.bootstrap-mds.keyring ceph.bootstrap-osd.keyring ceph.client.admin.keyring ceph-deploy-ceph.logceph.bootstrap-mgr.keyring ceph.bootstrap-rgw.keyring ceph.conf ceph.mon.keyring 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[root@node01 cluster]# systemctl status ceph-osd@2 # 查看单个osd进程[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN no active mgr clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: ####[root@node01 cluster]# ceph quorum_status --format json-pretty[root@node01 cluster]# ceph osd treeID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 0.14607 root default -3 0.04869 host node01 0 hdd 0.04869 osd.0 up 1.00000 1.00000 -5 0.04869 host node02 1 hdd 0.04869 osd.1 up 1.00000 1.00000 -7 0.04869 host node03 2 hdd 0.04869 osd.2 up 1.00000 1.00000 [root@node01 cluster]# df -hTFilesystem Type Size Used Avail Use% Mounted on/dev/mapper/vg-root xfs 16G 1.7G 14G 11% /devtmpfs devtmpfs 482M 0 482M 0% /devtmpfs tmpfs 493M 0 493M 0% /dev/shmtmpfs tmpfs 493M 6.9M 486M 2% /runtmpfs tmpfs 493M 0 493M 0% /sys/fs/cgroup/dev/sda1 xfs 497M 159M 338M 32% /boot/dev/mapper/vg-data xfs 3.9G 33M 3.9G 1% /datatmpfs tmpfs 99M 0 99M 0% /run/user/0/dev/sdb1 xfs 97M 5.4M 92M 6% /var/lib/ceph/osd/ceph-0[root@node01 cluster]# cat /var/lib/ceph/osd/ceph-0/type bluestore[root@node01 cluster]# parted /dev/sdb printModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 53.7GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name Flags 1 1049kB 106MB 105MB xfs ceph data 2 106MB 53.7GB 53.6GB ceph block 12 配置ceph-mgr1[root@node01 cluster]# ceph-deploy mgr create node01 node02 node03 可以看到己被激活12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: node01(active), standbys: node02, node03 osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 3164 MB used, 146 GB / 149 GB avail pgs: 123456789101112131415[root@node01 cluster]# ceph config-key put mgr/dashboard/server_addr 192.168.1.10set mgr/dashboard/server_addr[root@node01 cluster]# ceph config-key put mgr/dashboard/server_port 7000set mgr/dashboard/server_port[root@node01 cluster]# ceph mgr module enable dashboard[root@node01 cluster]# ceph mgr module ls[ &quot;dashboard&quot;, &quot;restful&quot;, &quot;status&quot;][root@node01 cluster]# netstat -tnlp | grep 7000tcp 0 0 192.168.1.10:7000 0.0.0.0:* LISTEN 34774/ceph-mgr 13 ceph-fs部署123456789101112# ceph-deploy mds create node01 node02 node03# ceph osd pool create cephfs_data &lt;pg_num&gt;# ceph osd pool create cephfs_metadata &lt;pg_num&gt;# ceph fs new cephfs cephfs_metadata cephfs_data(ceph-mds)[root@pike-vm /]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ](ceph-mds)[root@pike-vm /]# ceph fs get cephfsFilesystem &apos;cephfs&apos; (1)fs_name cephfs... 14 cephfs文件系统挂载确保客户端存在/etc/ceph/ceph.client.admin.keyring /etc/ceph/ceph.conf 方法一：12345[root@admin:]# yum install ceph-commonroot@admin:~# ceph-authtool -l /etc/ceph/ceph.client.admin.keyring[client.admin]key = AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg==mount -t ceph 172.16.170.135:6789:/ /mnt/cephdir/ -o name=admin,secret=AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg== 方法二：123456[root@wxq ceph]# yum install ceph-fuse[root@wxq ceph]# ceph-fuse -m 172.18.23.17:6789 /mnt/cephdir/ceph-fuse[25849]: starting ceph clientceph-fuse[25849]: starting fuse[root@wxq ceph]# df -hT | grep fuseceph-fuse fuse.ceph-fuse 135G 116M 135G 1% /mnt/cephdir 总结几点1 ceph quorum_status –format json-pretty 可查看选举详情2 ceph osd pool application enable volumes rbd 标记一个池的应用(cephfs/rbd/rgw),不标记可以使用但集群状态将为warning3 保护机制的存在默认删除池是不允许的12345[root@ceph cluster]# ceph --show-config | grep deletemon_allow_pool_delete = falsemon_fake_pool_delete = falseosd_pool_default_flag_nodelete = falserbd_mirror_delete_retry_interval = 30.000000 需要编辑ceph.conf12[global]mon_allow_pool_delete=true 界面视图","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"kolla on redhat 7.2","slug":"kolla-on-redhat7.2","date":"2017-08-08T01:41:54.000Z","updated":"2017-09-10T16:06:09.587Z","comments":true,"path":"2017/08/08/kolla-on-redhat7.2/","link":"","permalink":"http://www.digmyth.com/2017/08/08/kolla-on-redhat7.2/","excerpt":"","text":"在一次项目中客户要求在redhat 7.2系统安装部署kolla ocata版本，在这种特定要求下还是实践一把的，在此把详细文档做个记录。 1. install wget最小化安装，系统很干净1rpm -ivh ftp://195.220.108.108/linux/centos/7.3.1611/os/x86_64/Packages/wget-1.14-13.el7.x86_64.rpm 2. remove yum of redhat 首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的12rpm -aq|grep yum|xargs rpm -e --nodeps rpm -aq|grep python-iniparse|xargs rpm -e --nodeps 3. install new yum123456wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-3.4.3-132.el7.centos.0.1.noarch.rpmwget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm rpm ivh *.rpm 4. yum sourece configure123456789101112131415161718192021222324252627edit /etc/yum.repos.d/Centos72.repo[base]name=CentOS-$releasever - Basebaseurl=http://vault.centos.org/7.2.1511/os/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updatesbaseurl=http://vault.centos.org/7.2.1511/updates/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[extras]name=CentOS-$releasever - Extrasbaseurl=http://vault.centos.org/7.2.1511/extras//$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[centosplus]name=CentOS-$releasever - Plusbaseurl=http://vault.centos.org/7.2.1511/centosplus//$basearch/gpgcheck=1enabled=0 5. update yum123yum clean allyum updateyum install epel-release axel vim git curl wget net-tools git gcc lrzsz python-devel vsftpd createrepo 6. optimization system123close selinuxclose NetworkManagerclose firewalld 7. add docker yum12345678tee /etc/yum.repos.d/docker.repo &lt;&lt; &apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 8. install docker1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 如果安装很慢，可以挂载ocata_20170420.iso光盘进入目录Packages/d 下面有相应软件包，执行下面命令1yum localinstall docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm docker-engine-1.12.6-1.el7.centos.x86_64.rpm 再执行完成安装1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 9. 配置docker12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof edit /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker:1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker 10. install pip1234yum install python-pippip install -U pip#easy_install -U pip # 或者easy_install工具安装pip install docker-py 11. install kolla-ansible1234# yum install gcc libffi-devel python-devel openssl-devel# pip install kolla-ansible#cp -rf /usr/share/kolla-ansible/etc_examples/kolla/ /etc/# kolla-genpwd 12. install docker registry123456789mount /dev/sr0 /mntdocker load &lt; registry.tarmkdir /opt/registrytar -zxf docker-registry.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry# curl http://172.16.100.100:4000/v2/_catalog# curl http://172.16.100.100:4000/v2/kolla/centos-source-nova-api/tags/list&#123;&quot;name&quot;:&quot;kolla/centos-source-nova-api&quot;,&quot;tags&quot;:[&quot;4.0.0.3&quot;]&#125; 13. ceph disk set123parted /dev/sdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdd -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1 14. in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 15. edit global.yml12edit /etc/kolla/global.yml此处略过。。。 16. kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy 17. cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient 18. access dashboard1curl http://172.16.100.100/horizon 如果在openstack平台虚机中搭建kolla情况下，让其能通过浮动地址访问内部地址的dashboard1iptables -t nat -I PREROUTING -d 172.18.128.244 -p tcp --dport 80 -j DNAT --to 172.16.100.100 1成功访问：http://172.18.128.244 《成功》。。。","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-ganesha-manila","slug":"cephfs-manila","date":"2017-08-05T01:41:54.000Z","updated":"2017-11-16T03:31:22.380Z","comments":true,"path":"2017/08/05/cephfs-manila/","link":"","permalink":"http://www.digmyth.com/2017/08/05/cephfs-manila/","excerpt":"","text":"openstack manila项目最近很活跃，ceph刚好发布luminous版,具说cephfs性能得到很大提升，那么manila 后端存储cephfs找到了着力点，得到在大力发展。这里对manila cephfs实验做下记录。官网链接参考 驱动简介manila cephfs驱动分为两种：一种： cephfs native share相当于租户虚机直接连接cephfs集群，存在安全问题，生产环境中很难推行。 1 ceph-common包安装在manila-share中2 ceph-common/ceph-fuse 软件安装在租户虚机Guest里3 ceph集群与manila-share网络打通4 ceph集群与租户虚机网络打通 二种： cephfs nfs share官网说明1234567891 Pike or later versions of manila.2 Kraken or later versions of Ceph.3 2.5 or later versions of NFS-Ganesha.4 A Ceph cluster with a filesystem configured5 ceph-common package installed in the servers running the manila-share service.6 NFS client installed in the guest.7 Network connectivity between your Ceph cluster’s public network and the servers running the manila-share service.8 Network connectivity between your Ceph cluster’s public network and NFS-Ganesha server.9 Network connectivity between your NFS-Ganesha server and the manila guest. 在cephfs nfs share驱动，借住nfs-Ganesha解决了网络安全性问题，避免ceph public网直接暴露。直观的理解就是Ganesha为协议转换层，FSAL_CEPH把guest vm的NFS协议调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. 安装openstack+ceph跟据官网所说准备一套openstack pike + ceph luminous 环境，安装过程略。。。。 ceph luminous 源12345678[ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 安装nfs-ganesha 需要nfs-ganesha 版本为2.5以上，只能编译安装了,具体[请参考(http://www.digmyth.com/2017/06/05/cephfs-Ganesha/)1234567891011yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -ycd /optgit clone --recursive git://github.com/nfs-ganesha/nfs-ganesha.gitmkdir /opt/build &amp;&amp; cd /opt/buildcmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 配置manila-share必要客户端安装 1234yum instal ceph ceph-fuse ceph-common libcephfs1-devel librgw2-develscp ceph_mon:/etc/ceph/* /etc/ceph #^# 复制相关配置文件``` ceph授权 如下命令会生成manila.keyring文件，一并复制到 manila-share的/etc/ceph目录下123456789101112read -d &apos;&apos; MON_CAPS &lt;&lt; EOFallow r,allow command &quot;auth del&quot;,allow command &quot;auth caps&quot;,allow command &quot;auth get&quot;,allow command &quot;auth get-or-create&quot;EOFceph auth get-or-create client.manila -o manila.keyring \\mds &apos;allow *&apos; \\osd &apos;allow rw&apos; \\mon &quot;$MON_CAPS&quot; 编辑manila-share的/etc/ceph/ceph.conf 添加如下配置1234567...[client.manila]client mount uid = 0client mount gid = 0log file = /var/logs/ceph-client.manila.logadmin socket = /run/ceph/ceph-mon.172.18.23.17.asokkeyring = /etc/ceph/manila.keyring 允许快照支持1ceph mds set allow_new_snaps true --yes-i-really-mean-it 编辑manila-share的/etc/manila/manila.conf 添加如下配置12345678910111213141516[DEFAULT]...enabled_share_backends = generic, cephfsnfs1default_share_type = default_share_typeenabled_share_protocols = NFS,CIFS,CEPHFS[cephfsnfs1]driver_handles_share_servers = Falseshare_backend_name = CEPHFSNFS1share_driver = manila.share.drivers.cephfs.driver.CephFSDrivercephfs_protocol_helper_type = NFScephfs_conf_path = /etc/ceph/ceph.confcephfs_auth_id = manilacephfs_cluster_name = cephcephfs_enable_snapshots = Falsecephfs_ganesha_server_is_remote= Falsecephfs_ganesha_server_ip = 172.18.23.17 # 指明nfs-ganesha服务器位置 验证服务验证12345678910(manila-share)[root@pike-vm /]# manila service-list+----+------------------+--------------------+------+---------+-------+----------------------------+| Id | Binary | Host | Zone | Status | State | Updated_at |+----+------------------+--------------------+------+---------+-------+----------------------------+| 1 | manila-data | pike-vm | nova | enabled | up | 2017-11-15T10:14:37.000000 || 2 | manila-scheduler | pike-vm | nova | enabled | up | 2017-11-15T10:14:38.000000 || 3 | manila-share | pike-vm@generic | nova | enabled | up | 2017-11-15T10:14:40.000000 || 4 | manila-share | pike-vm@cephfsnfs1 | nova | enabled | up | 2017-11-15T10:14:40.000000 |+----+------------------+--------------------+------+---------+-------+----------------------------+ 创建manila实例123manila type-create cephfsnfstype falsemanila type-key cephfsnfstype set vendor_name=Ceph storage_protocol=NFSmanila create --share-type cephfsnfstype --name cephnfsshare1 nfs 1 查看共享路径123456(manila-share)[root@pike-vm /]# manila share-export-location-list cephnfsshare1+--------------------------------------+---------------------------------------------------------------------+-----------+| ID | Path | Preferred |+--------------------------------------+---------------------------------------------------------------------+-----------+| 18cf503a-9357-40e2-925a-53333031a3e6 | 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 | False |+--------------------------------------+---------------------------------------------------------------------+-----------+ 权限管理 1manila access-allow cephnfsshare1 ip 172.24.4.225 guest vm 挂载1mount -t nfs 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 /mnt/nfs/","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-16-Form验证","slug":"web-django-16-Form","date":"2017-07-20T12:26:37.000Z","updated":"2018-01-18T03:41:15.272Z","comments":true,"path":"2017/07/20/web-django-16-Form/","link":"","permalink":"http://www.digmyth.com/2017/07/20/web-django-16-Form/","excerpt":"","text":"目录 基本功能 基本使用 常用字段 常用插件 总结 这篇博客记录Django Form功能的学习，链接请参考Django Form武佩齐权威博客 基本功能 Form验证 生成html标签（保留上次提交的内容） 详细：12345678class TestForm(forms.Form): username = fields.CharField( # 静态字段 required=True, min_length=6, max_length=8, error_messages=&#123;&quot;required&quot;:&quot;用户名不能为空&quot;, &quot;min_length&quot;:&quot;最少6位&quot;&#125;， widget = widgets.TextInput(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # 插件 ) 基本使用模块导入-&gt;类定义-&gt;定义字段-&gt; 定义插件-&gt; 实例化-&gt; 传入前端-&gt;前端渲染12from django import formsfrom django.forms import fields,widgets views.py定义Form类，写出来常用插件用法1234567891011121314151617class TestForm(forms.Form): n1 = fields.CharField( widget = widgets.TextInput() ) n2 = fields.CharField( widget = widgets.PasswordInput() ) n3 = fields.CharField( widget=widgets.Textarea() ) n4 = fields.CharField( widget=widgets.Select(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]) ) 单选多选总结：1 把上面CharField改为ChoiceField就好了，并choices=[]提到前面来2 单选CharField就可以，多选一定记得用ChoicField,并且choices=[]提前 123456789# n5 = fields.CharField( # # 这里是有问题的，CharField只能是字符串，&quot;n5&quot;:[1,3]默认值是一个列表，后端没法接收数据。# widget=widgets.SelectMultiple(choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)])# )n5 = fields.ChoiceField( choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget=widgets.SelectMultiple()) 12345678910111213141516n6 = fields.IntegerField( widget=widgets.RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]))n7 = fields.CharField( # 这里只会生成CheckboxInput标签 &lt;input type=&quot;checkbox&quot; name=&quot;n7&quot; required=&quot;&quot; id=&quot;id_n7&quot;&gt; widget=widgets.CheckboxInput())n8 = fields.ChoiceField( # 真正生成checkbox组写法 choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget = widgets.CheckboxSelectMultiple())n9 = fields.FileField( widget=widgets.FileInput()) 实例化Form类时传入默认值用于前端展示，主要学习文件上传的方法123456789101112131415161718192021222324252627def test(request): if request.method == &quot;GET&quot;: obj = TestForm( initial=&#123;&quot;n1&quot;:&quot;请输入&quot;,&quot;n2&quot;:&quot;xxx&quot;,&quot;n3&quot;:&quot;文本输入&quot;,&quot;n4&quot;:1,&quot;n5&quot;:[1,3], &quot;n6&quot;:2,&quot;n7&quot;:&quot;&quot;,&quot;n8&quot;:[2,3]&#125; ) return render(request, &quot;test.html&quot;,&#123;&quot;obj&quot;:obj&#125;) if request.method == &quot;POST&quot;: # 文件提交保存在request.FILES # obj = TestForm(data=request.POST,files=request.FILES) # if obj.is_valid(): # # obj.cleaned_data[&apos;n9&apos;] 这是上传的文件对象 # #obj.cleaned_data[&apos;n9&apos;].name 这是上传文件名 # files_obj = obj.cleaned_data[&apos;n9&apos;] # f = open(files_obj.name, &apos;wb&apos;) # for chunck in files_obj.chunks(): # f.write(chunck) # f.close() # else: # pass files_obj = request.FILES.get(&quot;n9&quot;) f = open(files_obj.name, &apos;wb&apos;) for chunck in files_obj.chunks(): f.write(chunck) f.close() return redirect(&apos;/test/&apos;) 提交文件需要enctype=&quot;multipart/form-data&quot;测试时忽略其它值用novalidatetest.html12345678910111213&lt;form action=&quot;/test/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;&#123; obj.n1 &#125;&#125; &#123;&#123; obj.n2 &#125;&#125; &#123;&#123; obj.n3 &#125;&#125; &#123;&#123; obj.n4 &#125;&#125; &#123;&#123; obj.n5 &#125;&#125; &#123;&#123; obj.n6 &#125;&#125; &#123;&#123; obj.n7 &#125;&#125; &#123;&#123; obj.n8 &#125;&#125; &#123;&#123; obj.n9 &#125;&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/form&gt; 常用字段123456CharField 字符串 EmailField 字符串（邮箱格式）IntegerField 字符串（整形格式）GenericIPAddressField 字符串（Ip格式）RegexField 字符串（正则自定义）FileField 文件对象 常用插件123456789101112TextInputPasswordInputTextareaFileInput()Select(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;，choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])SelectMultiple(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)]RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])CheckboxInput()CheckboxSelectMultiple() Form问题在前端使用选择标签渲染时，多表foreigh key跨表查询数据源无法实时更新。比如choices的选项可以从数据库中获取，但是由于是静态字段获取的值无法实时更新，那么需要自定义构造方法从而达到此目的。 方法有很多，推荐123456789101112131415161718from django.forms import Formfrom django.forms import widgetsfrom django.forms import fieldsfrom django.core.validators import RegexValidator class MyForm(Form): user = fields.ChoiceField( # choices=((1, &apos;上海&apos;), (2, &apos;北京&apos;),), initial=2, widget=widgets.Select ) def __init__(self, *args, **kwargs): super(MyForm,self).__init__(*args, **kwargs) # self.fields[&apos;user&apos;].widget.choices = ((1, &apos;上海&apos;), (2, &apos;北京&apos;),) # 或 self.fields[&apos;user&apos;].widget.choices = models.Classes.objects.all().value_list(&apos;id&apos;,&apos;caption&apos;) 总结Django Form功能一是验证，功能二是用于生成html标签并且能保留上次提交的内容。注意Form验证读取数据时的数据源实时更新问题，一般我们自定义Form类的构造方法实现。 还有很多要学习的。。。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"基于CentOS 7的PXE装机","slug":"基于CentOS7的PXE装机","date":"2017-07-01T01:41:54.000Z","updated":"2021-01-27T08:35:19.030Z","comments":true,"path":"2017/07/01/基于CentOS7的PXE装机/","link":"","permalink":"http://www.digmyth.com/2017/07/01/基于CentOS7的PXE装机/","excerpt":"","text":"网上各种贴子各种飞总说不到重点，本人表示不喜欢。 基于Centos7PXE装机基本概念 pxe装机依赖几个服务： dhcp/tftp/fileserver dhcp: 为装机分配地址及指明tftp server服务器是谁，下载什么文件 tftp: 提供网络引导文件pxelinux.0及内核文件vmlinuz、initrd.img (具体文件： boot.msg initrd.img pxelinux.0 pxelinux.cfg splash.png vesamenu.c32 vmlinuz) fileserver: 提供安装树输出，一般指yum repository (yum 仓库或yum源) syslinux: 网络引导文件pxelinux.0由syslinux软件包提供 dhcp服务1234yum -y install dhcprpm -ql dhcp/etc/dhcp/dhcpd.conf # 主配置文件/var/lib/dhcpd/dhcpd.leases # 租约文件 12345678910111213141516[root@master ~]# cat /etc/dhcp/dhcpd.conf | grep -v ^# | grep -v ^$option domain-name &quot;digmyth.com&quot;;option domain-name-servers 114.114.114.114;default-lease-time 600;max-lease-time 7200;log-facility local7;subnet 172.16.10.0 netmask 255.255.255.0 &#123; range 172.16.10.20 172.16.10.30; option domain-name-servers 172.16.10.1; option domain-name &quot;digmyth.com&quot;; option routers 172.16.10.254; default-lease-time 600; max-lease-time 7200;&#125;filename &quot;pxelinux.0&quot;; # 定义网络引导文件名next-server 172.16.10.1; # 定义tftp server地址 启动服务123# systemctl start dhcpd[root@master ~]# netstat -unlp | grep 67udp 0 0 0.0.0.0:67 0.0.0.0:* 995/dhcpd syslinux提供引导文件1234准备网络引导文件pxelinux.0 相当于bootloader# yum -y install syslinux[root@master tftpboot]# ll /usr/share/syslinux/pxelinux.0 -rw-r--r--. 1 root root 26764 Nov 6 2016 /usr/share/syslinux/pxelinux.0 tftp server12345# yum -y install tftp tftp-server[root@master ~]# rpm -ql tftp-server/etc/xinetd.d/tftp # 启动文件/usr/sbin/in.tftpd/var/lib/tftpboot # 服务根目录 1234567891011121314# cat /etc/xinetd.d/tftpservice tftp&#123; socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /var/lib/tftpboot disable = no #改为no per_source = 11 cps = 100 2 flags = IPv4&#125; 启动tftp服务1234# cp /usr/share/syslinux/pxelinux.0 /var/lit/tftpboot# systemctl start tftp# tftp localhost&gt; get pxelinux.0 # 测试成功 准备内核及其它相关文件 此时pxe己经能够获得地址并下载pxelinux.0进行网络引导，接下来是下载内核文件vmlinuz、initrd.img继续完成装机。 这里我拿CentOS7.2为例：CentOS-7-x86_64-DVD-1511.iso 12345[root@master ~]# mount -o loop CentOS-7-x86_64-DVD-1511.iso /mntmount: /dev/loop0 is write-protected, mounting read-only[root@master pxeboot]# cd /mnt/images/pxeboot/[root@master pxeboot]# cp vmlinuz /var/lib/tftpboot/[root@master pxeboot]# cp initrd.img /var/lib/tftpboot/ 12345678910111213mkdir /var/lib/tftpboot/pxelinux.cfgcp /mnt/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg /default [root@master pxelinux.cfg]# cat default default vesamenu.c32#default linux # 这里是一个标签，对找后面相应的labeltimeout 600menu title CentOS 7 wxq # 此处定义titlelabel linux menu label ^Install CentOS 7 # 此处定义系统安装时显示版本 kernel vmlinuz append initrd=initrd.img method=http://172.16.10.1/pub/ ks=http://172.16.10.1/pxe/CentOS72.ks# 注意： 如果此处只定义method,那么装机过程将全手动。 此外还有一些额外文件12345[root@master ~]# ls /mnt/isolinux/boot.cat grub.conf isolinux.bin memtest TRANS.TBL vesamenu.c32boot.msg initrd.img isolinux.cfg splash.png upgrade.img vmlinuz[root@master ~]# ll /var/lib/tftpboot/boot.msg initrd.img pxelinux.0 splash.png vesamenu.c32 vmlinuz 定义安装树12345# yum -y install httpd# mkdir /var/www/html/pxe# mkdir /var/www/html/pub# mount --bind /mnt /var/www/html/pub/ # systemctl start httpd 定义ks文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/pxe/CentOS72.ks[root@master pxe]# cat CentOS72.ks#version=DEVEL# System authorization informationinstall# Keyboard layoutskeyboard --vckeymap=us --xlayouts=&apos;us&apos;auth --enableshadow --passalgo=sha512# Use CDROM installation media# Run the Setup Agent on first boot#firstboot --enable# System languagelang en_US.UTF-8url --url=http://172.16.10.1/pub/# Use graphical installgraphical#textselinux --disabledskipxreboot# Network information#network --bootproto=static --device=ens33 --gateway=172.16.10.254 --ip=172.16.10.30 --nameserver=114.114.114.114 --netmask=255.255.255.0 --onboot=on --ipv6=auto --activatenetwork --bootproto=dhcp --device=ens33 --onboot=yes --ipv6=auto --activatenetwork --hostname=digmyth# Root password=123456rootpw --iscrypted $6$6ErC1johQ5LVAYwQ$cGGxb6Q6./SpvXCZs.K39d9LpV/IeFnspUT6mHmsVsARzToRCSsZ4fLxcOh0tYWpt38Yh6JoMzmSEkEtCtMlS/# System servicesservices --disabled=&quot;chronyd&quot;# System timezonetimezone Asia/Shanghai --isUtc --nontp# System bootloader configurationclearpart --all --initlabelbootloader --append=&quot; crashkernel=auto&quot; --location=mbr --boot-drive=sda# Partition clearing information#clearpart --drives=sda --initlabel#clearpart --none --initlabel# Disk partitioning information#ignoredisk --only-use=sda#part pv.735 --fstype=&quot;lvmpv&quot; --ondisk=sda --size=19979#volgroup vg --pesize=4096 pv.735#logvol /boot --fstype=&quot;xfs&quot; --size=500 --name=boot --vgname=vg#logvol / --fstype=&quot;xfs&quot; --size=16000 --name=root --vgname=vg#logvol /data --fstype=&quot;xfs&quot; --size=3000 --name=data --vgname=vg#logvol swap --fstype=&quot;swap&quot; --grow --size=1%packages@^minimal@corekexec-toolsvimnet-toolssysstat%end%posttouch /root/wxq.txt%end%addon com_redhat_kdump --enable --reserve-mb=&apos;auto&apos;%end 上面的装机将进入图形界面手动分区安装 到此完结，可以结合cobbler实现多pxe环境并存。 cobbler 一些概念： distro发行版： 其实就是pxe所说的相应内核文件 profile: 提供pxeboot引导文件、KS文件、安装树（用现有iso镜像mirror/import方式） 是不是很完美 。。。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux java install","slug":"linux-java-install","date":"2017-06-21T03:42:54.000Z","updated":"2021-01-29T10:01:54.393Z","comments":true,"path":"2017/06/21/linux-java-install/","link":"","permalink":"http://www.digmyth.com/2017/06/21/linux-java-install/","excerpt":"","text":"download jdk1.812[root@nodeadm ]# mkdir /usr/local/java[root@nodeadm ]# tar xf jdk-8u181-linux-x64.tar.gz -C /usr/local/java uncompress1234567891011121314151617[root@nodeadm java]# pwd/usr/local/java[root@nodeadm java]# ll jdk1.8.0_181/total 25976drwxr-xr-x 2 root root 4096 Sep 21 08:54 bin-r--r--r-- 1 root root 3244 Sep 21 08:54 COPYRIGHTdrwxr-xr-x 3 root root 132 Sep 21 08:54 include-rw-r--r-- 1 root root 5207314 Sep 21 08:54 javafx-src.zipdrwxr-xr-x 5 root root 185 Sep 21 08:54 jredrwxr-xr-x 5 root root 245 Sep 21 08:54 lib-r--r--r-- 1 root root 40 Sep 21 08:54 LICENSEdrwxr-xr-x 4 root root 47 Sep 21 08:54 man-r--r--r-- 1 root root 159 Sep 21 08:54 README.html-rw-r--r-- 1 root root 424 Sep 21 08:54 release-rw-r--r-- 1 root root 21099920 Sep 21 08:54 src.zip-rw-r--r-- 1 root root 106782 Sep 21 08:54 THIRDPARTYLICENSEREADME-JAVAFX.txt-r--r--r-- 1 root root 154222 Sep 21 08:54 THIRDPARTYLICENSEREADME.txt set java_env123456[root@nodeadm java]# tail -n 5 /etc/profileexport JAVA_HOME=/usr/local/java/jdk1.8.0_181export JRE_HOME=/usr/local/java/jdk1.8.0_181/jreexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 仅作记录","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-11-模板渲染","slug":"web-django-11-模板渲染","date":"2017-06-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/06/20/web-django-11-模板渲染/","link":"","permalink":"http://www.digmyth.com/2017/06/20/web-django-11-模板渲染/","excerpt":"","text":"目录 基本方法 过滤器 标签 Django对template中html的渲染有着一套语法, 基本方法1234567891011return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 过滤器filter内置一些方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 1 add ： 给变量加上相应的值 # # 2 addslashes : 给变量中的引号前加上斜线 # # 3 capfirst : 首字母大写 # # 4 cut ： 从字符串中移除指定的字符 # # 5 date ： 格式化日期字符串 # # 6 default ： 如果值是False,就替换成设置的默认值，否则就是用本来的值 # # 7 default_if_none: 如果值是None，就替换成设置的默认值，否则就使用本来的值#value1=&quot;aBcDe&quot;&#123;&#123; value1|upper &#125;&#125;&lt;br&gt;#value2=5&#123;&#123; value2|add:3 &#125;&#125;&lt;br&gt;#value3=&apos;he llo wo r ld&apos;&#123;&#123; value3|cut:&apos; &apos; &#125;&#125;&lt;br&gt;#import datetime#value4=datetime.datetime.now()&#123;&#123; value4|date:&apos;Y-m-d&apos; &#125;&#125;&lt;br&gt;#value5=[]&#123;&#123; value5|default:&apos;空的&apos; &#125;&#125;&lt;br&gt;#value6=&apos;&lt;a href=&quot;#&quot;&gt;跳转&lt;/a&gt;&apos;&#123;&#123; value6 &#125;&#125;&#123;% autoescape off %&#125; &#123;&#123; value6 &#125;&#125;&#123;% endautoescape %&#125;&#123;&#123; value6|safe &#125;&#125;&lt;br&gt;&#123;&#123; value6|striptags &#125;&#125;#value7=&apos;1234&apos;&#123;&#123; value7|filesizeformat &#125;&#125;&lt;br&gt;&#123;&#123; value7|first &#125;&#125;&lt;br&gt;&#123;&#123; value7|length &#125;&#125;&lt;br&gt;&#123;&#123; value7|slice:&quot;:-1&quot; &#125;&#125;&lt;br&gt;#value8=&apos;http://www.baidu.com/?a=1&amp;b=2&apos;&#123;&#123; value8|urlencode &#125;&#125;&lt;br&gt; value9=&apos;hello I am pythoner&apos; 标签Django 提供的函数: simple_tag 可以有多个参数 filter 只能有2个参数，并且可以做条件语句的条件 自定义过滤器、自定义标签 形如for/if123&#123;% for item in todo_list %&#125; &lt;p&gt;&#123;&#123; forloop.counter &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 自定义标签当内置函数不满足需求时，可自定义filter/simple_tag 1 在Django app中创建目录名心须为templatetags的目录 2 在templatetags下随意定义.py 文件 如my_tag.py12345678910111213141516#!/usr/bin/env python3__author__ = &quot;wxq&quot;from django import templatefrom django.utils.safestring import mark_saferegister = template.Library()# register变量名是固定的，不可以改变@register.filter # 自定义过滤器def multip(x,y): return x*y@register.simple_tag # 自定义标签def multi_tag(x,y,z): return x*y*z 3 使用自定义simple_tag和filter的html文件中导入之前创建的 my_tag.py, 注意格式百分号.1&#123;% load &quot;my_tag&quot; %&#125; 4 使用定义的simple_tag和filter123456# html首行导入&#123;% load my_tag %&#125;&lt;body&gt; &lt;p&gt;&#123;&#123; 10 |add:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; n | multip:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;% multi_tag 10 320 30 %&#125;&lt;/p&gt;&lt;/body&gt; 模板继承123456&#123;% block content %&#125;...&#123;% endblock %&#125;使用模板标签： &#123;% block %&#125; 。 所有的 &#123;% block %&#125; 标签告诉模板引擎，子模板可以重载这些部分。每个&#123;% block %&#125;标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。 总结：1 后端是字典如[“key”]取值，模板里都用.key2 后端是元组或列表如[0]取值，模板里都用.03 后端是函数或类方法用跨号()调用，模板里不加跨号，切记","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(二)","slug":"web-django-orm(二)","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:44:48.308Z","comments":true,"path":"2017/06/15/web-django-orm(二)/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-django-orm(二)/","excerpt":"","text":"目录 一对多查询 多对多查询 查询优化 一对多查询1.1 创建测试数据models.py数据库模型1234567from django.db import modelsclass DePart(models.Model): title=models.CharField(max_length=32)class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(DePart) 创建测试数据12345678models.DePart.objects.create(title=&quot;IT&quot;)models.DePart.objects.create(title=&quot;咨询&quot;)models.DePart.objects.create(title=&quot;公关&quot;)models.UserInfo.objects.create(username=&quot;user1&quot;,pwd=123,dp_id=1)models.UserInfo.objects.create(username=&quot;user2&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user3&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user4&quot;,pwd=456,dp_id=2) 注：12p=models.UserInfo.objects.create(username=&apos;wxq&apos;,pwd=123) # 返回对象本身print(p.username,p.pwd) 1.2 一对多正向查询all() 返回Queryset123v = models.DePart.objects.all()for row in v: print(row.id,row.title,row.userinfo_set.all()) values()返回Queryset1234# values()每一个字典代表一行数据# v = models.UserInfo.objects.values(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)# for row in v:# print(row[&apos;username&apos;],row[&apos;dp__title&apos;]) values_list()返回Queryset1234# values_list()每一个元组代表一行数据v = models.UserInfo.objects.values_list(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)for row in v: print(row[0],row[2]) 1.3 一对多反向查询all()1234567 v=models.DePart.objects.all() for row in v: print(row.id, row.title, row.userinfo_set.all())打印结果：1 IT &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;2 咨询 &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;]&gt;3 公关 &lt;QuerySet []&gt; values()123456789v = models.DePart.objects.values(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[&apos;title&apos;],row[&apos;userinfo__username&apos;],row[&apos;userinfo__dp_id&apos;])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None values_list()123456789v = models.DePart.objects.values_list(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[0],row[1],row[2])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None 1.4 总结正向查询用字段（这里字段是指外键字段） all: 字段+.跨表字段 values: 字段 + __跨表字段 values_list 字段+ __跨表字段反向查询用表名 all: 表名小写+_set values: 表名小写 + __跨表字段 values_list 表名小写+ __跨表字段 总结一句话就是： 正向查询用字段，反向查询用表名 多对多查询2.1 多对多自建表当我们自己建第三张表时，第三张表列数没有限制，更加灵活，更能满足复杂需求1234567表模型class UserGroup(models.Model): caption= models.CharField(max_length=32)class U2G(models.Model): ui = models.ForeignKey(UserInfo) ug = models.ForeignKey(UserGroup) 12345678910111213创建测试数据models.U2G.objects.create(ui_id=1,ug_id=1)models.U2G.objects.create(ui_id=2,ug_id=1)models.U2G.objects.create(ui_id=3,ug_id=2)models.U2G.objects.create(ui_id=4,ug_id=2)v=models.U2G.objects.all()for row in v: print(row.ug.caption,row.ui.username)# 打印结果A组 user1A组 user2B组 user3B组 user4 2.2 多对多非自建多对多关系Django ManyToMany帮我们建第三张表时，我们不能对第三张直接操作，并且第三张只有三列（2张表的分别ForeighKey列，自增ID列）。只能通过如下面的ManyToMany字段间接操作12345678910111213#表模型class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(&quot;DePart&quot;)class UserGroup(models.Model): caption= models.CharField(max_length=32) m = models.ManyToManyField(&quot;UserInfo&quot;)&apos;&apos;&apos;第三张表只有三列id userinfo_id usergroup_id&apos;&apos;&apos;&apos; 添加几个组做如下增删及更新数据操作123456obj = models.UserGroup.objects.filter(id=2).first() #id为2的组是B组print(obj.id,obj.caption,obj.m)obj.m.add(*[1,2]) #ID为1，2的用户加入B组# obj.m.remove(*[1,]) # 删除B组中用户id为1的记录obj.m.clear() # 清除组id为2的所有记录obj.m.set([1,]) # 不管id为2的组有几个用户都清空后把用户id为1的加入B组 2.3 多对多查询学习多对多查询注意：first/get返回对象，filter/all/values/values_list返回QuerySet1234obj=models.UserGroup.objects.filter(id=2).first() # 得到组对象v=obj.m.all() # obj.m表示UserInfo表for row in v: print(row.username, row.dp.title) 123obj=models.UserGroup.objects.filter(id=2).first() # 得到组ID为2的对象v=obj.m.filter(dp__title=&quot;IT&quot;).first() # UserInfo表中查部门为IT的记录print(v.username) # 打印符合条件的username 优化select_related优化12345user_list=models.UserInfo.objects.all() # 这里是1次sql请求for row in user_list: #如果有10条数据,会有10次sql请求 print(row.username,row.dp.title) # 每一次row.dp.title都会跨表查询那么返回结果经历了11次sql请求,做select_related优化后只有2次sql请求,其中1次是跨表请求models.UserInfo.objects.all().select_related(&quot;ForeighKeyname&quot;) #优化方法一 prefetch_related优化,推荐用优化方法二123456789models.UserInfo.objects.all().prefetch_related(&quot;ForeighKeyname&quot;) # 优化方法二prefetch_related可以分解为models.UserInfo.objects.all()一次单表查询取到了ForeighKeyname_id=[1,2,3,4,5] 然后DJango会发起第2次单表查询，models.DePart.objects.filter(id__in = [1,2,3,4,5]) 2次单表查询明显轻量了。#only:只取相应字段，否则性能下降# defer:不取相应字段，否则性能下降models.UserInfo.objects.all().only(&apos;id&apos;,&apos;name&apos;) # 只取哪几列models.UserInfo.objects.all().defer(&apos;id&apos;,&apos;name&apos;) # 不取哪几列 还有更多","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-02-前端html","slug":"web-02-前端html","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:47:19.192Z","comments":true,"path":"2017/06/15/web-02-前端html/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-02-前端html/","excerpt":"","text":"前言单选框提交时以{“gender”:”男”}形式, checked表示默认选中1234&lt;div&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; checked=&quot;checked&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;/&gt;女&lt;/div&gt; 多选框提交时以{“hobby”:”[11,12.13]”}形式，checked表示默认选中123456&lt;div&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;11&quot; checked=&quot;checked&quot; /&gt;乒乓球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;12&quot;/&gt;监球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;13&quot;/&gt;足球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;14&quot;/&gt;排球&lt;/div&gt; 下拉框multiple表示多选，没有multiple表示单选，selected表示默认选中1234567&lt;div&gt; &lt;select name=&quot;city&quot; id=&quot;&quot; multiple&gt; &lt;option value=&quot;北京&quot; selected=&quot;selected&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 提交type=”button” 不能提交表单数据，除非事件绑定type=”submit” 默认事件就是提交表单数据。12345&lt;form&gt; &lt;button&gt;提交&lt;/button&gt; # button标签在form里也会有事件，会提交 &lt;input type=&quot;submit&quot;&gt; # 有事件，也会提交 &lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt; # 没有事件，不会提交&lt;/form&gt; 前端相关概念Jquery学习可参考基本概念： html很骨感. css就是装饰或样式. js 就是让其能动起来, js=javascript，Javascript是一门编程语言，我们用它来编写客户端浏览器脚本 jQuery是一个快速、简洁的JavaScript框架,一种javascript工具库，把我们常用的一些功能进行封装，方便我们调用，极大简化了Javascript编程，提高了开发效率。jQuery设计的宗旨就是“write Less，Do More” Bootstrap是一个开发框架，集成了很多现成的网页格式和网页布局，封装了很多CSS样式和JS代码 Javascipt跟jQuery的区别：jQuery是javascript的一个库，包含多个可重用的函数，用来辅助我们简化javascript开发jQuery能做的javascipt都能做到，而javascript能做的事情，jQuery不一定能做到。 position定位的学习12345position position: relative # 与absolute一起使用 position: absolute #随滚动条滚动而滚动 随滚动条滚动而滚动，并且一直往上找，直到找到一个relative后进行定位 position: fixed # 永远在窗口某位置 引用图标要想用图标有很多种方法方法一：当我们引入了bootstrap.css时，我们可以用它官网的图标https://v3.bootcss.com/components/ 图标名字即类名就可使用了 方法二：fontawesome也有很多图标需要下载font-awesome文件来引入 https://fontawesome.io/icons/ # 每一个图标可点击，点开后能看到引用方法。 方法三：这个也是图标库，方法见官网http://fontawesome.dashgame.com/#basic","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"git 利器","slug":"git-01","date":"2017-06-15T01:42:54.000Z","updated":"2018-08-25T03:35:15.638Z","comments":true,"path":"2017/06/15/git-01/","link":"","permalink":"http://www.digmyth.com/2017/06/15/git-01/","excerpt":"","text":"目录 git建版本库 git别名设置 git基本配置 git基本命令 git分支管理 git创建版本库12git init # 把当前目录变成git可管理的仓库生成的.git目录是用来跟踪管理版本库的,称为git的一个版本库 git别名设置1234为命令设置别名$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch git配置123每台机器自报家门$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 12优先级从高到低是.git/config--&gt; --global --&gt; system 12345全局生效: 配置保存在/etc/gitconfig[root@wxq-srv git_work]# git config --system user.name &quot;wxq&quot;[root@wxq-srv git_work]# cat /etc/gitconfig [user] name = wxq 12345678当前用户所有仓库生效：配置保存在~/.gitconfig[root@wxq-srv git_work]# cat /root/.gitconfig [user] name = wxq email = you@example.com[root@wxq-srv git_work]# git config --global user.name &quot;wxq&quot;[root@wxq-srv git_work]# git config --global user.email &quot;you@example.com&quot; 12345678910只对某仓库生效：配置保存在reponame/.git/config[root@wxq-srv git_work]# git config user.name &quot;wxq1&quot;[root@wxq-srv git_work]# cat .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[user] name = wxq1 基本命令1234567git log # 每一次提交的记录git reset --hard HEAD^ #HEAD表示当前版本，HEAD^^表示上上个版本，依次类推，上100个版本是HEAD~100git reset --hard $commit_id # 回到指定版本git reflog # 只要改变都会在这里记录，用于回到未来的某个版本。git add index.html # 添加更改至state暂存 区git reset HEAD index.html # unstage 退出暂存区git diff HEAD -- readme.txt # 查看当前工作区和版本库有什么不同 放弃修改除了版本回退外，只要未commit之前都可以放弃工作区所做的修改。如果有add 动作，需要先从暂存区回退到工作区git reset HEAD index.html如果没有add动作，可直接放弃修改git checkout -- index.txt或者可以这么理解git checkout -- index.txt 都会从暂存区或版本库(优先从暂存区)恢复到工作区. 分支管理123456查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt; 待续","categories":[{"name":"Git","slug":"Git","permalink":"http://www.digmyth.com/categories/Git/"}],"tags":[]},{"title":"linux_iptables应用","slug":"linux-iptables应用","date":"2017-06-15T01:42:54.000Z","updated":"2018-04-23T06:57:19.754Z","comments":true,"path":"2017/06/15/linux-iptables应用/","link":"","permalink":"http://www.digmyth.com/2017/06/15/linux-iptables应用/","excerpt":"","text":"iptables 规则应用总结防火墙端口重定向规则1iptables -t nat -I PREROUTING -i eth1 -p tcp --dport 80 -j REDIRECT --to 8080 反向代理防火墙规则12iptables -I INPUT -d 123.125.168.130 -i eth0 -p tcp --dport 80 -j ACCEPTiptables -I INPUT -s 10.10.10.0/24 -i eth1 -p tcp --sport 9999 -j ACCEPT 此包为input状态检测可省略12iptables -I OUTPUT -p tcp -o eth1 -s 10.10.10.1 -d 10.10.10.10 --dport 9999 -j ACCEPTiptables -I OUTPUT -p tcp -o eth0 -s 123.125.168.130 --sport 80 -j ACCEPT 目标地址转换：123iptables -t nat -I PREROUTING -i eth0 -d 123.125.168.130 -p tcp --dport 80 -j DNAT --to 10.10.10.10:9999iptables -A FORWARD -d 10.10.10.10 -p tcp --dport 9999 -j ACCEPTiptables -A FORWARD -s 10.10.10.10 -p tcp --sport 9999 -j ACCEPT 如果10.10.10.10机器默认网关不是10.10.10.1或没有指网关,则网关防火墙需如下:有点奇怪的规则1iptables -t nat -I POSTROUTING -d 10.10.10.10 -p tcp --dport 9999 -j SNAT --to 10.10.10.1 源地址转换：12iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j SNAT --to 123.125.168.130iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE 此条开销较大，与上条可二选一12iptables -I FORWARD -s 10.10.10.0/24 -j ACCEPT 注：forward不指网卡，要指也是内网卡iptables -I FORWARD -d 10.10.10.0/24 -j ACCEPT","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Mysql sysbench 压测","slug":"mysql-sysbench","date":"2017-06-10T01:41:54.000Z","updated":"2017-11-10T09:01:54.314Z","comments":true,"path":"2017/06/10/mysql-sysbench/","link":"","permalink":"http://www.digmyth.com/2017/06/10/mysql-sysbench/","excerpt":"","text":"目录 工具安装 执行压测 针对优化 示例结果 数据库指标对于mysql压力测试，大多用sysbench/tpcc-mysql工具。主要针对数据库OLTP（在线事务处理）指标。 12qps : query per second 查询量tps: transaction per second 事务量 工具安装123yum install sysbench -y[root@mysql sysbench]# sysbench --versionsysbench 1.0.9 在sysbench压测时会调用内置lua脚本, 这些脚本为于/etc/share/sysbench目录下12345678910111213141516/usr/share/sysbench[root@mysql sysbench]# lltotal 64-rwxr-xr-x 1 root root 1452 Sep 18 12:29 bulk_insert.lua-rw-r--r-- 1 root root 13762 Sep 18 12:29 oltp_common.lua-rwxr-xr-x 1 root root 1290 Sep 18 12:29 oltp_delete.lua-rwxr-xr-x 1 root root 2018 Sep 18 12:29 oltp_insert.lua-rwxr-xr-x 1 root root 1265 Sep 18 12:29 oltp_point_select.lua-rwxr-xr-x 1 root root 1649 Sep 18 12:29 oltp_read_only.lua-rwxr-xr-x 1 root root 1824 Sep 18 12:29 oltp_read_write.lua-rwxr-xr-x 1 root root 1118 Sep 18 12:29 oltp_update_index.lua-rwxr-xr-x 1 root root 1127 Sep 18 12:29 oltp_update_non_index.lua-rwxr-xr-x 1 root root 1440 Sep 18 12:29 oltp_write_only.lua-rwxr-xr-x 1 root root 1919 Sep 18 12:29 select_random_points.lua-rwxr-xr-x 1 root root 2118 Sep 18 12:29 select_random_ranges.luadrwxr-xr-x 4 root root 4096 Nov 10 02:57 tests 执行压测方便压测时找到内置lua脚本，以下命令都在/etc/share/sysbench目录下执行 在远端连接数据库时，授权1grant all on test.* to root@&apos;%&apos; identified by &apos;123&apos;; 生成压测数据12cd /usr/share/sysbench/sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 prepare 执行压测1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 run 清理压测数据1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 cleanup 优化数据库在压测过程中可能出现一些错误，连接数不够，max_prepared_stmt_count不够，可优化/etc/my.cnf 做适当调整123456789101112max_connections = 4096max_prepared_stmt_count=100000 # 默认16384压测时需调大query_cache_type = 1query_cache_size = 10Mwsrep_slave_threads = 4#wsrep_notify_cmd = /usr/local/bin/wsrep-notify.shmax_connections = 10000key_buffer_size = 64Mmax_heap_table_size = 64Mtmp_table_size = 64Minnodb_buffer_pool_size = 8192M 示例结果1234567891011121314151617181920212223242526272829303132333435Initializing worker threads...Threads started![ 10s ] thds: 300 tps: 198.33 qps: 5741.67 (r/w/o: 4335.25/830.02/576.41) lat (ms,95%): 3706.08 err/s: 81.77 reconn/s: 0.00[ 20s ] thds: 300 tps: 222.61 qps: 6095.90 (r/w/o: 4553.90/924.16/617.84) lat (ms,95%): 4203.93 err/s: 102.31 reconn/s: 0.00[ 30s ] thds: 300 tps: 221.01 qps: 5899.58 (r/w/o: 4399.84/899.83/599.92) lat (ms,95%): 4055.23 err/s: 93.20 reconn/s: 0.00[ 40s ] thds: 300 tps: 198.06 qps: 5400.91 (r/w/o: 4032.79/827.03/541.09) lat (ms,95%): 4683.57 err/s: 89.98 reconn/s: 0.00[ 50s ] thds: 300 tps: 186.14 qps: 5162.76 (r/w/o: 3866.39/783.36/513.00) lat (ms,95%): 5312.73 err/s: 90.12 reconn/s: 0.00[ 60s ] thds: 300 tps: 158.49 qps: 4433.94 (r/w/o: 3325.93/670.45/437.56) lat (ms,95%): 5507.54 err/s: 78.99 reconn/s: 0.00SQL statistics: queries performed: read: 246736 write: 50340 other: 33317 total: 330393 transactions: 12147 (195.34 per sec.) queries: 330393 (5313.17 per sec.) ignored errors: 5477 (88.08 per sec.) reconnects: 0 (0.00 per sec.)General statistics: total time: 62.1815s total number of events: 12147Latency (ms): min: 16.10 avg: 1503.84 max: 14267.54 95th percentile: 4683.57 sum: 18267086.41Threads fairness: events (avg/stddev): 40.4900/6.29 execution time (avg/stddev): 60.8903/0.59","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"KVM introduction","slug":"KVM-introduction","date":"2017-06-08T01:41:54.000Z","updated":"2018-03-30T06:58:49.290Z","comments":true,"path":"2017/06/08/KVM-introduction/","link":"","permalink":"http://www.digmyth.com/2017/06/08/KVM-introduction/","excerpt":"","text":"1. kvm简介kvm as a kernel based virtual machine,现如今较为流行的虚拟化技术，openstack后端就是kvm虚拟化。 2. 模拟与虚拟 模拟： 完全由软件模拟：ring0 ring1 ring2 ring3都需要软件模拟， 底层硬件架构与虚拟机硬件架构可以不同 虚拟： 底层硬件架构与虚机硬件架构必须相同，如cpu平台架构都为x86_64 3.虚拟化分类虚拟化分类无非2种方式： 一种：直接运行于硬件平台–&gt; hypervisor: dom0 如xen ,esxi,这里xen不好理解，装xen不也要安装操作系统后安装xen4软件包么？为什么它也说直接运行在硬件平台，是因为安装完xen4后，切换了xen4的内核来启动，并非原有操作系统内核. 二种：先有host系统，再安装虚拟软件（如vmware station）或统称virtual machine mintor(虚拟机监视器) 如kvm, 虚拟机的cpu,内存通过kvm模块来调用，但IO不行，虚拟机的IO是通过host系统的qemu程序模拟提供的，再由host系统的内核提供IO 那么什么是半虚拟化？ 半虚拟化是要修改内核的，要让虚拟机知道自己运行在虚拟机环境下的，知道的结果是当虚拟机发起cpu指令时不能直接操作硬件，需要发起hypercall调用. 那么什么是完全虚拟化？ 1) 早期BT技术实现加速，binary translation 边运行边翻译,虚机内核就是运行ring1上专用于翻译加速 2) hvm: 硬件辅助虚拟化，需要cpu硬件支持，就是cpu多了ring-1，这样虚拟机直接运行在ring0上，宿主机内核运行在ring-1,ring-1捕获ring0的特权指令直接运行，性能可想而知提高了","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-Ganesha","slug":"cephfs-Ganesha","date":"2017-06-05T01:41:54.000Z","updated":"2017-11-14T09:43:43.912Z","comments":true,"path":"2017/06/05/cephfs-Ganesha/","link":"","permalink":"http://www.digmyth.com/2017/06/05/cephfs-Ganesha/","excerpt":"","text":"nfs-ganesha简介因工作需要调研了cephfs 导为nfs,目前有两种方法： 方法一：内核mount挂载或 ceph-fuse 挂载至NFS server，如/data再正常搭建NFS-server即可。 方法二 : 借用nfs-ganesha协议转换间接存储在cephfs集群中。 nfs-ganesha不仅可以导 cephfs,也可以导RGW.ceph RGW理解: 相当于协议转换层，把符合S3和swift协议的 restFul API 请求转换为rados存储在ceph对象存储中. 换一种说法： Ceph 导出为 NFS，一种通过 RGW，一种通过 CephFS，通过 FSAL 模块 连接到 RGW 或者 CephFS FSAL_RGW 调用 librgw2 将 NFS 协议转义为 S3 协议再通过 RGW 存入到 Ceph 中. FSAL_CEPH 调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. FSAL： File System Abstraction Layer 文件系统抽像层 题外话，openstack项目manila后端存储驱动，其中一种就是Ganesha Driver12345## manila 4驱动Default Driver: 使用 RBD 作为 Manila Service VM 的后端，在 VM 上启动 NFS 实例提供服务Ganesha Driver: 使用 Ganesha 将 CephFS 重新 Reexport 出去Native CephFS Driver: 在 Guest VM 上直接使用原生 CephFS Module 访问VirtFS Driver: 将 CephFS 挂载在 Host 端，VM 通过 VirtFS 访问 nfs-ganesha安装在CentOS7系统中有nfs-ganesha rpm软件包，但没有ceph相关模块，所以我这里是编译安装，把FSAL_RGW 模块/FSAL_CEPH 模块编译进去。 1git clone -b V2.4-stable https://github.com/nfs-ganesha/nfs-ganesha.git --recursive 由于ceph-jewel版本才有libcephfs1-devel软件包，所以这里ganesha客户端 ceph用 jewel版本，服务器ceph版本Luminousceph-jewel源123456789[root@ ganesha]# cat /etc/yum.repos.d/ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/noarch/gpgcheck=0 软件安装12345yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -y 如果需要生成 FSAL_RGW 模块，则在编译选项中添加： -DUSE_FSAL_RGW=ON 如果需要生成 FSAL_CEPH 模块，则在编译选项中添加： -DUSE_FSAL_CEPH=ON 12345mkdir /opt/build/cd /opt/build/cmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 在cmake输出中确保有12345-- USE_FSAL_CEPH = ON-- USE_FSAL_CEPH_MKNOD = OFF-- USE_FSAL_CEPH_SETLK = OFF-- USE_FSAL_CEPH_LL_LOOKUP_ROOT = ON-- USE_FSAL_RGW = ON 确保： – USE_FSAL_CEPH 为 ON,以及 – USE_FSAL_RGW 为 ON。 如果过程中出错，请删除/tmp/build/* 及/tmp/build/CMakeCache.txt重新编译 make install成功输出中有:12&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/rgw.conf&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/ceph.conf 这两个文件就是配置将 RGW 和 CephFS 配置为 nfs-ganesha的配置模板。 nfs-ganesha 配置123456789101112131415161718192021222324252627282930313233cat /etc/ganesha/ganesha.confEXPORT&#123; Export_ID=1; Path = /; Pseudo = /cephfs; Access_Type = RW; NFS_Protocols = 4; Transport_Protocols = TCP; Squash = No_Root_Squash; FSAL &#123; Name = CEPH; &#125;&#125;EXPORT&#123; Export_ID=2; Path = /; Pseudo = /rgw; Access_Type = RW; Squash = No_root_squash; NFS_Protocols = 4; Transport_Protocols = TCP; FSAL &#123; Name = RGW; User_Id = &quot;admin&quot;; Access_Key_Id =&quot;RDS4VW60OA48ZW1HSU61&quot;; Secret_Access_Key = &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;; &#125;&#125;RGW &#123; ceph_conf = &quot;/etc/ceph/ceph.conf&quot;;&#125; 其中Access_Key_Id Secret_Access_Key部份在ceph-rgw中读取123456789101112131415 (ceph-mon)[root@pike-vm /]# radosgw-admin user info --uid=admin&#123; &quot;user_id&quot;: &quot;admin&quot;, &quot;display_name&quot;: &quot;admin&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;admin&quot;, &quot;access_key&quot;: &quot;RDS4VW60OA48ZW1HSU61&quot;, &quot;secret_key&quot;: &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;... 启动nfs-ganesha1ganesha.nfsd -L /var/log/ganesha.log 挂载使用在客户端进行挂载使用：1 安装ceph-common ceph-fuse libcephfs1-devel librgw2-devel2 拷贝ceph.conf配置文件及keyring文件至/etc/ceph3 挂载：mount -t nfs4 {$ganesha-server-ip}:/ /mnt如果出现I/O error,请ceph-fuse -m 172.18.23.17:6789 /mnt 挂载一遍，就是这么神奇，不要问我为什么。。。12[root@-3 mnt]# lsls: reading directory .: Remote I/O error 成功123456[root@-3 cephfs]# ll /mnt/total 1drwxrwxrwx 1 root root 33 Nov 14 08:31 cephfs[root@-3 cephfs]# echo &quot;99cloud new data...&quot; &gt; cephfs.txt [root@-3 cephfs]# cat cephfs.txt cephfs data... 在cephfs集群中我们可以看到客户端写入的数据12345678[root@-3 ~]# ceph-fuse -m 172.18.23.17:6789 /data/ceph-fuse[4579]: starting ceph clientceph-fuse[4579]: starting fuse[root@-3 ~]# cd /data/[root@-3 data]# lscephfs.txt[root@3 data]# cat cephfs.txt cephfs data...","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-02-分页示例","slug":"web-django-03-分页示例","date":"2017-05-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/05/20/web-django-03-分页示例/","link":"","permalink":"http://www.digmyth.com/2017/05/20/web-django-03-分页示例/","excerpt":"","text":"1 django 分页功能app01/views.py Paginator模块的使用123456789101112131415161718192021222324def users(request): from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger user_list = models.UserInfo.objects.all() paginator = Paginator(user_list,10) # paginator.per_page 每页显示条目数量 # paginator.count 数据总个数 # paginator.num_pages 总页数 # paginator.page_range 总页数的索引范围，如(1,10),(1,20) current_page = request.GET.get(&apos;p&apos;) try: page_obj=paginator.page(current_page) except EmptyPage as e: page_obj = paginator.page(1) except PageNotAnInteger as e: page_obj = paginator.page(1) # page_obj.has_next() 是否有下一页 # page_obj.next_page_number() 下一页页码 # page_obj.has_previous() 是否有上一页 # page_obj.previous_page_number() 上一页页码 # page_obj.object_list 分页之后的数据列表 # page_obj.number 当前页 # page_obj.paginator paginator对象 return render(request,&quot;users.html&quot;, &#123;&apos;page_obj&apos;:page_obj&#125;) templates/users.html12345678910111213141516171819&#123;% if page_obj.has_previous %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&#123;% endif %&#125;&#123;% for i in page_obj.paginator.page_range %&#125; &lt;a href=&quot;/users?p=&#123;&#123; i &#125;&#125;&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;&#123;% endfor %&#125;&#123;% if page_obj.has_next %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&#123;% endif %&#125;&lt;span&gt; &lt;a&gt;&#123;&#123; page_obj.number &#125;&#125;/&#123;&#123; page_obj.paginator.num_pages &#125;&#125;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-加密解密加签验签","slug":"python加密解密加签验签","date":"2017-05-15T12:51:41.000Z","updated":"2018-04-23T06:59:41.630Z","comments":true,"path":"2017/05/15/python加密解密加签验签/","link":"","permalink":"http://www.digmyth.com/2017/05/15/python加密解密加签验签/","excerpt":"","text":"python加密解密，加签验签(转)在与第三方服务对接时，加密与解密，加签与验签是这个过程中的关键一步 一般情况下，对接服务中会有两对公私钥。使用对方公钥进行加密，使用自己私钥进行加签。传回来的数据，使用自己的私钥解密，使用对方的公钥验签。 12345678import base64from Crypto.PublicKey import RSAfrom Crypto.Hash import SHAfrom Crypto.Cipher import PKCS1_v1_5from Crypto.Signature import PKCS1_v1_5 as SIGN_PKCSPUB_KEY = RSA.importKey(open(&apos;rsa_public_key.pem&apos;,&apos;r&apos;).read())PRI_KEY = RSA.importKey(open(&apos;rsa_private_key.pem&apos;,&apos;r&apos;).read()) 加密 12345678910def split_data(l, n): for i in range(0, len(l), n): yield l[i: i+n] def encrypt(params): raw = params.encode(&apos;utf-8&apos;) cipher = PKCS1_v1_5.new(PUB_KEY) ＃ 加密超长字节117个字节一加密 content = b&apos;&apos;.join([cipher.encrypt(x) for x in chunks(raw, 117)]) return base64.b64encode(content) 解密123456def decrypt(data): raw = data.encode(&apos;utf-8&apos;) decrypt = PKCS1_v1_5.new(PRI_KEY).decrypt # 解密超长字符128一解密 content = b&apos;&apos;.join(decrypt(x, object()) for x in chunks(raw, 128)) return content.decode() 加签1234def signer(data): signstr = data.encode(&apos;utf-8&apos;) sign = SIGN_PKCS.new(PRI_KEY).sign(SHA.new(signstr)) return base64.b64encode(sign) 验签1234def verify_sign(unsign, raw_sign): # unsign: 签名 # raw_sign: 待验证签名 assert SIGN_PKCS.new(PUB_KEY).verify(SHA.new(unsign.encode(&apos;utf-8&apos;)), raw_sign)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"linux_Suse init","slug":"linux-SUSE-init","date":"2017-05-15T01:42:54.000Z","updated":"2018-09-04T13:15:50.755Z","comments":true,"path":"2017/05/15/linux-SUSE-init/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-SUSE-init/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux_7.X内核升级","slug":"linux-7.x内核升级","date":"2017-05-15T01:42:54.000Z","updated":"2018-08-04T08:38:33.350Z","comments":true,"path":"2017/05/15/linux-7.x内核升级/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-7.x内核升级/","excerpt":"","text":"查看版本12# uname -r3.10.0-693.el7.x86_64 升级内核需要先导入elrepo的key，然后安装elrepo的yum源12345678910111213141516171819202122232425262728293031# rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpmPreparing... ################################# [100%]Updating / installing... 1:elrepo-release-7.0-3.el7.elrepo ################################# [100%]# yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list availableLoaded plugins: fastestmirrorelrepo-kernel | 2.9 kB 00:00:00 elrepo-kernel/primary_db | 1.8 MB 00:00:01 Determining fastest mirrors * elrepo-kernel: mirrors.neusoft.edu.cnAvailable Packageskernel-lt.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-doc.noarch 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-headers.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-ml.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-doc.noarch 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-headers.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelperf.x86_64 4.17.11-1.el7.elrepo elrepo-kernelpython-perf.x86_64 4.17.11-1.el7.elrepo elrepo-kernel 安装你需要的版本12# yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64版本性质：主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 查看内核是否安装完成123456# rpm -qa |grep kernelkernel-tools-3.10.0-693.el7.x86_64kernel-ml-4.17.11-1.el7.elrepo.x86_64kernel-3.10.0-693.el7.x86_64kernel-ml-devel-4.17.11-1.el7.elrepo.x86_64kernel-tools-libs-3.10.0-693.el7.x86_64 查看并修改grub的启动顺序1234# awk -F\\&apos; &apos;$1==&quot;menuentry &quot; &#123;print $2&#125;&apos; /etc/grub2.cfgCentOS Linux (4.17.11-1.el7.elrepo.x86_64) 7 (Core)CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)CentOS Linux (0-rescue-d14171e79a9e4b5da1a69e7348d0f45f) 7 (Core) 注： 最新内核为第一个，故启动项为012345678# vim /etc/default/grubGRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=saved(这里改成0)GRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 生成grub重新创建内核配置并重启12345678910# grub2-mkconfig -o /boot/grub2/grub.cfgGenerating grub configuration file ...Found linux image: /boot/vmlinuz-4.17.11-1.el7.elrepo.x86_64Found initrd image: /boot/initramfs-4.17.11-1.el7.elrepo.x86_64.imgFound linux image: /boot/vmlinuz-3.10.0-693.el7.x86_64Found initrd image: /boot/initramfs-3.10.0-693.el7.x86_64.imgFound linux image: /boot/vmlinuz-0-rescue-d14171e79a9e4b5da1a69e7348d0f45fFound initrd image: /boot/initramfs-0-rescue-d14171e79a9e4b5da1a69e7348d0f45f.imgdone[root@localhost ~]# reboot 确认内核版本12# uname -r4.17.11-1.el7.elrepo.x86_64","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Python 操作mysql","slug":"mysql-pyton操作mysql","date":"2017-04-29T01:41:54.000Z","updated":"2017-11-19T09:00:13.663Z","comments":true,"path":"2017/04/29/mysql-pyton操作mysql/","link":"","permalink":"http://www.digmyth.com/2017/04/29/mysql-pyton操作mysql/","excerpt":"","text":"这里记录下python操作mysql的知识点，详细参见链接 模块安装在python2中使用模块MySQLdb在python3中使用模块pymysql1pip3 install pymysql 基本使用基本操作过程就是 创建连接 创建游标 发送语句 获取数据 事务提交 关闭游标 关闭连接1234567891011121314151617181920212223import pymysql# 创建连接conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;db1&apos;)# 创建游标cursor = conn.cursor()# 发送语句cursor.execute(sqlstatement)cursor.executemany(sqlstatement)# 获取数据cursor.fetchone()cursor.fetchmany(3)cursor.fetchall() # 事务提交，不然无法保存新建或者修改的数据conn.commit() # 关闭游标cursor.close()# 关闭连接conn.close() 基本知识点获取新创建数据自增ID1234567891011import pymysql conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)cursor = conn.cursor()cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;1.1.1.11&quot;,1),(&quot;1.1.1.11&quot;,2)])conn.commit()cursor.close()conn.close() # 获取最新自增IDnew_id = cursor.lastrowid 游标操作1234在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：cursor.scroll(1,mode=&apos;relative&apos;) # 相对当前位置移动cursor.scroll(2,mode=&apos;absolute&apos;) # 相对绝对位置移动 fetch 数据类型关于默认获取的数据是元组类型，如果想要获取字典类型的数据，如下pymysql.cursors.DictCursor：1234567import pymysqlconn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)# 游标设置为字典类型cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)r = cursor.execute(&quot;call p1()&quot;) result = cursor.fetchone() 1234567891011# 执行SQL，并返回受影响行数effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos;&quot;)# 执行SQL，并返回受影响行数#effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot;, (1,)) 这里值得注意的是不能把上面语句替换成下面语句，否则会被sql注入statement=&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot; % 1effect_row = cursor.execute(statement)# 执行SQL，并返回受影响行数#effect_row = cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;172.16.0.1&quot;,1),(&quot;1.1.1.11&quot;,2)]) SQLAlchemySQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果1pip3 install SQLAlchemy SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：12345678910111213MySQL-Python mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; pymysql mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;] MySQL-Connector mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; cx_Oracle oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...] 更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-04-路由分发与别名.md","slug":"web-django-04-路由分发与别名","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/04/20/web-django-04-路由分发与别名/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-04-路由分发与别名/","excerpt":"","text":"目录 别名设置 namespace设置 reverse include本质 Django URLS 路由分发流程己经学习过了，这里了解一下url中的别名设置，reverse反向生成URL，以及include本质如何路由分发的。 别名设置URL有别名name的设置，添加在最后一级分发视图函数的后面1url(r&apos;^login/&apos;, views.login,name=&quot;alias_name&quot;), namespace设置URL有namespace的设置当多个app多级分发时可能存在别名相同,这时就用到namespace来加以区分 namespace添加12url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)), 或url(r&apos;^app01&apos;,([url(&apos;^hosts&apos;,oviews.hosts,name=&quot;nnnn&quot;),],None,&quot;oo&quot;)), reverse用法reverse反向生成url1234from django.urls import reversedef login(request): url = reverse(&quot;namespace1:namespace2:alias_name&quot;) return redirect(url) include本质include原生写法是1url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)) include用于路由下级分发，本质是返回元组，最后一个None表示namespace,也就是形如1url(r&apos;^openstack/&apos;, ([url映射关系，],None,None)) 总结：了解分发基础知识有利于我们后面学习Django admin，如何动态生成URL的代码学习。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-02-基本配置示例","slug":"web-django-02-基本配置示例","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.976Z","comments":true,"path":"2017/04/20/web-django-02-基本配置示例/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-02-基本配置示例/","excerpt":"","text":"1 django安装1pip install django pymysql 2 新建django project1django-admin.py startproject mysite 或用pycharm新建一个项目 3 该项目下创建一个应用1cd mysite &amp;&amp; python manage.py startapp app01 4 配置Djangosettings.py文件确保有下面代码，用于在static目录放置静态1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS= ( os.path.join(BASE_DIR, &apos;static&apos;),) 确保INSTALLED_APPS = []有app01,应用 5 Django mysql配置settings.py文件确保有12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;&#125; app01下 init.py12import pymysqlpymysql.install_as_MySQLdb() 对于初学者建议配置此项，用于打印orm翻译后的sql语后，便于对照学习1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 6 django生成数据models.py12345from django.db import modelsclass UserInfo(models.Model): username = models.CharField(max_length=32) password = models.CharField(max_length=32) email = models.CharField(max_length=32) 12python manage.py makemigrationspython manage.py migrate 7 urls.py定义123456from app01 import viewsurlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;^users/$&apos;, views.users), # url(r&apos;^create_data/&apos;, views.create_data),] 8 views.py定义123456789101112131415from django.shortcuts import render,HttpResponse, redirectfrom app01 import modelsdef create_data(request): for i in range(1,104): models.UserInfo.objects.create( username = &quot;root%s&quot; %i, password = &quot;123&quot;, email = &quot;root%s@qq.com&quot; %i, ) return HttpResponse(&quot;data generate...&quot;)def users(request): user_list = models.UserInfo.objects.all() return render(request,&quot;users.html&quot;, &#123;&apos;user_list &apos;:user_list &#125;) 9 templates/users.html定义12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/bootstrap-3.3.7-dist/css/bootstrap.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;width: 700px; margin: 10px auto&quot;&gt; &lt;h1&gt;用户列表&lt;/h1&gt; &lt;table class=&quot;table table-hover table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; 用户名&lt;/th&gt; &lt;th&gt; 密码&lt;/th&gt; &lt;th&gt;邮箱&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for user in page_obj.object_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; user.username &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.password &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.email &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 10 注意bootstrap应用bootstrap下载链接 11 启动项目运行项目1python manage.py runserver 127.0.0.1:8000","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(一)","slug":"web-django-orm(一)","date":"2017-04-15T12:51:41.000Z","updated":"2018-01-18T03:44:22.364Z","comments":true,"path":"2017/04/15/web-django-orm(一)/","link":"","permalink":"http://www.digmyth.com/2017/04/15/web-django-orm(一)/","excerpt":"","text":"目录 简单介绍 初识ORM 简单介绍声明：ORM原理请参考 一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 初识ORM下面学习下Django里sql操作的基本语法 通过简单设置，可以在logging查看翻译成的sql语句settings.py1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 2.1 创建表12345from django.db import modelsclass UserInfo(models.Model): nid=models.AutoField(primary_key=True) name=models.CharField(max_length=32) pwd = models.CharField(max_length=32) 2.2 操作表123456789101112q = models.UserInfo.objects.all()Queryset = [obj(id,name,pwd), obj(id,name,pwd),obj(id,name,pwd),]q=models.UserInfo.objects.values(&apos;name&apos;,&apos;pwd&apos;)Queryset = [&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123&#125;, &#123;&quot;name&quot;:&quot;user1&quot;,&quot;pwd&quot;:123&#125;, &#123;&#125;] # 字典q = models.UserInfo.objects.value_list(&apos;name&apos;,&apos;pwd&apos;)Queryset = [(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123), (&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123),(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123)]#元组q = models.UserInfo.objects.filter(name=&quot;wxq&quot;)q = models.UserInfo.objects.get(name=&apos;wxq&apos;) # 多个或没有值都会报错q = models.UserInfo.objects.filter(name=&apos;wxq&apos;).first() # 推荐 2.3 操作表的其它方法12345678910111213141516171819202122232425261. all() 返回的是querySet2. filter(id__lt=10, id__gt=1) 并且查， 返回的是querySet3. get() 只有一个值，否则报错， 返回的是对象4. first() 只找第一个值，返回的是对象5. exclude 取反model.Book.objects.exclude(prince=134) 返回querySet6. countmodeles.Book.objects.exclude(prince=134).count() #querySet对象才有.count()调用方法 7. order_by(*field)models.Book.objects.objects.all().order_by(&quot;prince&quot;) 小到大排序models.Book.objects.objects.all().order_by(&quot;-prince&quot;) 大到小排序8.distinct() 提除重复的记录9 values 返回字典querySet集合10 values_list 返回元组querySet集合11 existret = models.Book.objects.all().exist()","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-09-02-网络编程","slug":"python-10-02-网络编程","date":"2017-03-31T14:26:46.000Z","updated":"2018-02-08T09:19:59.999Z","comments":true,"path":"2017/03/31/python-10-02-网络编程/","link":"","permalink":"http://www.digmyth.com/2017/03/31/python-10-02-网络编程/","excerpt":"","text":"目录 socket概念 socket基本使用 socket简单示例 总结 一、socket概念什么是socket ? socket常称为’套接字’，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或应答网络请求。 Unix中一切皆文件，socket是一种特殊的套接字文件，对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。 所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。 对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。 二、socket基本使用服务器端第一步： 创建 套接字对够用123456789import socketsocket.socket(family, type)family AF_INET AF_UNIXtype SOCK_STREAM -------&gt; TCP SOCK_DGRAM -------&gt; UDPconns = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 绑定地址使用套接字对象的 bind方法绑定于地址和端口组成的元组1conns.bind((&apos;ip&apos;,port)) 第三步： 使用套接字的Listen()方法进行监听1conns.listen(10) #等待队列长度 第四步： 进入循环监听状态 使用套接字的accept()方法接收用户连接请求help(tcpconn.accept)1client_sock,client_addr = conns.accept() 编写客户端程序第一步： 创建套接字对象以连接服务器端1client_conn = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 请求连接服务器client_conn.conncet((‘server_ip’, port)) 第三步： 发送数据 1client_conn.send(b&apos;hello world&apos;) 示例server.py1234567891011121314import socketsock = socket.socket()sock.bind((&apos;127.0.0.1&apos;,8000))sock.listen(5)while True: conn,addr = sock.accept() client_data = conn.recv(1024) print(client_data) conn.sendall(&apos;response info from server&apos;) conn.close() client.py1234567891011import socketsk = socket.socket()sk.connect((&apos;127.0.0.1&apos;,8000))sk.sendall(&apos;请求数据&apos;)server_reply = sk.recv(1024)print(server_reply)sk.close() 三、socket简单示例python中网络编程主要有socket/socketserver和异步相关的Twisted/tornado/ socket这里包括自己用select实现的伪异步IO多路复用 2.1 示例一web浏览器和socket_server交互,浏览器将收到服务端返回的数据123456789101112131415161718192021# socket_server.pyimport socketdef handle_process(client): data = client.recv(1024) print(data.decode(&quot;utf-8&quot;)) client.send(b&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;)#一定要先发送合规请求头 client.send(b&apos;hello worldfdds&apos;)def main(): sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM) sock.bind((&apos;127.0.0.1&apos;,8003)) sock.listen(5) while True: conn,addr = sock.accept() handle_process(conn) conn.close()if __name__ == &apos;__main__&apos;: main() 2.2 示例二socket + select 实现IO多路复用1234567891011121314151617181920212223242526272829303132333435363738394041# socket_server.pyimport selectimport socket# 单线程里同时监听多个socket对象，实现了&quot;伪&quot;并发IO操作： IO多路复用sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8001))sk1.listen(5)sk2 = socket.socket()sk2.bind((&apos;127.0.0.1&apos;,8002))sk2.listen(5)inputs = [sk1,sk2]w_inputs = []while True: # IO多路复用： # select: 内部循环，主动查看 # poll: 内部循环，主动查看 # epoll: 非循环， 异步回调或被动通知 r,w,e = select.select(inputs,w_inputs,[],0.05) for obj in r: if obj in [sk1,sk2]: print(&quot;新的连接来了。。&quot;) conn,addr = obj.accept() inputs.append(conn) else: print(&quot;新的数据来了&quot;) try: data=obj.recv(1024) except Exception as e: data = &quot;&quot; if data: # obj.sendall(data) w_inputs.append(obj) else: inputs.remove(obj) w_inputs.remove(obj) obj.close() for obj in w: obj.sendall(b&apos;ok&apos;) w_inputs.remove(obj) 定义2个socket_client 1234567891011# socket_client01.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8001))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 12345678910# socket_client02.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8002))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 测试服务端并发： 先启动socket_server.py,后启动socket_clientx.py 小结：服务端单线程同时监听了多个socket对象，表明实现了并发连接或IO多路复用，但真正实现了并发吗？当并发边连接有IO请求时还是占住了资源,那么在下一个例子中用线程处理IO请求实现真正的IO并发 4.2 示例三select + 线程实现真正的多并发123456789101112131415161718192021222324import selectimport socketimport threadingdef process_request(conn): while True: v = conn.recv(1024) conn.sendall(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\ndownload page ...&apos;) conn.close() break # 任务处理完成后终止这个线程sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8009))sk1.listen(5)inputs = [sk1,]while True: r,w,e = select.select(inputs,[],[],0.05) for obj in r: if obj in [sk1,]: conn,addr = obj.accept() t=threading.Thread(target=process_request,args=(conn,)) t.start() 设计思路可参考 socketserver源代码1234567import socketserverclass MyHandler(socketserver.BaseRequestHandler): def handle(self): pass server = socketserver.ThreadingTCPServer((&apos;127.0.0.1&apos;,8001),MyHandler)server.serve_forever() 4.2 示例四浏览器会自动向服务端请求头的一些数据，process_data()函数对请求头做了结构化处理，同时浏览器请求什么URL，服务端就会返回什么URL, 在此基础上可以用类封装为一个web框架邹形, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import selectimport socketdef process_data(client): data = bytes() while True: try: chunk = client.recv(1024) except Exception as e: chunk = None if not chunk: break data += chunk data_str = str(data, encoding=&quot;utf-8&quot;) header,body = data_str.split(&apos;\\r\\n\\r\\n&apos;,1) header_list = header.split(&apos;\\r\\n&apos;,1) header_dict = &#123;&#125; for line in header_list: value = line.split(&apos;:&apos;, 1) if len(value) == 2: k, v = value header_dict[k] = v else: header_method, header_url, header_protocal = line.split(&quot; &quot;) header_dict[&quot;header_method&quot;] = header_method header_dict[&quot;header_url&quot;] = header_url header_dict[&quot;header_protocal&quot;] = header_protocal return header_dict,bodysock = socket.socket()sock.setblocking(False) # setblocking表示是否设置为阻塞模式,这里是对accept生效sock.bind((&apos;127.0.0.1&apos;,8008))sock.listen(5)# while True:# conn,addr = sock.accept() #setblocking(False)后不阻塞了，有连接就拿连接，没有连接就直接报错# conn.setblocking(False)# conn.recv(1024) # 有数据拿数据，没有数据就直接报错inputs = [sock,]while True: rList,wList,eList = select.select(inputs,[],[],0.05) for client in rList: if client == sock: # 建立新的连接 conn,addr = client.accept() conn.setblocking(False) # 有数据拿数据，没有数据就直接报错 inputs.append(conn) else: header_dict,body=process_data(client) request_url=header_dict[&apos;header_url&apos;] client.send(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\n&apos;) client.send(request_url.encode(&quot;utf-8&quot;)) inputs.remove(client) client.close() 总结对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。掌握socket可读可写状态","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-02-面象对象编程中级","slug":"python-08-02-面象对象编程中级","date":"2017-03-26T13:28:41.000Z","updated":"2018-02-06T09:05:12.632Z","comments":true,"path":"2017/03/26/python-08-02-面象对象编程中级/","link":"","permalink":"http://www.digmyth.com/2017/03/26/python-08-02-面象对象编程中级/","excerpt":"","text":"目录 staticmethod classmethod staticmethod几个魔法方法说明： @classmethod @staticmethod不依赖任何具体的对象来执行类当中是方法，这个方法要么是静态方法， 要么是类方法，要么是属性 12345678910@classmethoddef test_func(cls): # 类方法传入cls参数（类本身） pass@staticmethoddef test_func(): # 静态方法时没有任何变量 passdef test_func(self): # 普通实例方法时传入self参数（实例本身） pass staticmethod语法12345678In [4]: class Foo(object): ...: @staticmethod ...: def spam(x,y,z): # 静态方法时方法定义不写self ...: print(x,y,z) In [5]: In [5]: Foo.spam(1,2,3) # 静态方法属于类的，用类名调用。虽然实例能调用，但不要那样混用,不规范1 2 3 staticmethod用法场景123456789101112131415161718192021In [7]: import timeIn [6]: class Date(object): ...: def __init__(self,year,mon, day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @staticmethod ...: def now(): ...: t = time.localtime() ...: return Date(t.tm_year, t.tm_mon, t.tm_mday) ...: In [8]: d1 = Date(1989, 8,20) # 获得一个对象In [9]: d2 = Date.now() # 这里也能获得一个对象In [10]: d1.dayOut[10]: 20In [11]: d2.dayOut[11]: 12 classmethod@classmethod语法1234567891011In [12]: class C1(object): ....: name = &apos;wxq&apos; ....: @classmethod ....: def test(cls): # 这里需要传入cls, 谁调用谁就是cls ....: print(cls, cls.name) ....: In [14]: C1.test() # 这里cls就是C1&lt;class &apos;__main__.C1&apos;&gt; wxqIn [13]: c = C1() # 正常实例化对象 @classmethod用法场景1234567891011121314151617In [2]: import timeIn [3]: class Date(object): ...: def __init__(self, year, mon,day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @classmethod ...: def now(cls): ...: t = time.localtime() ...: return cls(t.tm_year, t.tm_mon, t.tm_mday) ...: In [4]: d = Date.now()In [5]: print(d.year,d.mon, d.day)2017 3 12 staticmethod与classmethod区别的牛逼之处123456789101112131415161718192021root@ubuntu:~# cat method.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @staticmethod def now(): t = time.localtime() return Date(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 method.py &lt;__main__.Date object at 0x7f5514658940&gt; 上面并没有我们想要的结果分析：e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。也就是return Date(t.tm_year, t.tm_mon, t.tm_mday), 实例print时调Date类的__str__方法，故打印return Date(t.tm_year, t.tm_mon, t.tm_mday)后的内存地址，不会打印EuroDate类中定义的__str__方法 123456789101112131415161718192021root@ubuntu:~# cat goodmethod.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @classmethod def now(cls): t = time.localtime() return cls(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 goodmethod.py year: 2017 mon:3 day:12 这样才是我们想要的结果，好象参悟了点什么分析:e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。这一点和上面是一致的。但此时return cls(t.tm_year, t.tm_mon, t.tm_mday)中的cls不是Date,而是EuroDate,符合谁调谁就是cls的原则。这样实例化e = EuroDate.now()时print(e)就会去调EuroDate中的__str__方法，得到我们想要的结果 小结：staticmethod与classmethod在一定场景中是有区别的。细节参照上面的例子练习","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-06-异常","slug":"python-08-06-异常","date":"2017-03-25T12:39:12.000Z","updated":"2018-02-06T09:07:40.152Z","comments":true,"path":"2017/03/25/python-08-06-异常/","link":"","permalink":"http://www.digmyth.com/2017/03/25/python-08-06-异常/","excerpt":"","text":"目录 1 2 3 12345678910class WxqException(Exception): def __init__(self, msg): self.message = msg def __str__(self): return self.messagetry: raise WxqException(&quot;Game Over!&quot;)except WxqException as e: print(e)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-09-01-进程和线程","slug":"python-09-01-进程和线程","date":"2017-03-20T14:26:37.000Z","updated":"2018-02-07T07:46:27.544Z","comments":true,"path":"2017/03/20/python-09-01-进程和线程/","link":"","permalink":"http://www.digmyth.com/2017/03/20/python-09-01-进程和线程/","excerpt":"","text":"目录 基本概念 进程 线程 协程 总结 基本概念我们都知道现代操作是支持“多任务”的，什么叫“多任务”呢？。简单地说，就是操作系统可以同时运行多个任务。打个比方一边微信一边QQ。 单核cpu是如何执行“多任务”的？简单的说，就是cpu时间分片，同一时间单核cpu只能执行一个任务，cpu计算时间分片到每个任务交替运行，进程切换或上下文切换时间很短，我们无法感知而己。真正并发执行多任务还要靠多核cpu来完成。 并发执行任务方案， 多进程 多线程 多进程+多线程 Python线程有GIL(Global Interpreter Lock), 这种锁在单核cpu单进程里同一时间只能有一个线程被cpu调度。 那么多线程并发就没有用了吗？计算密集型多进程不就解决了IO密集型多线程不就解决了，同一时间只有一个线程调度，其它时间线程处理IO啊 进程，多进程，进程池进程定义: 程序由指令+数据组成，进程就是这样一种描述的实体(process),简单的认为一个任务就是一个进程。 一个进程至少一个线程，进程间相互隔离（数据不共享），一个子进程挂了并不影响程序运行，当然主进程挂了程序也就挂了，进程切换开销较大。 多进程： 用于解决计算密集型作务的多并发。 进程池： 内部维护一个进程序列，当使用时创建一个新的进程放入池中，再从池中取出来使用，当达到进程池个数时，不再创建进程，请求直接从进程池中取出来用，其它请求只能等待直到进程池中有进程可用。 进程示例：12345678910111213from multiprocessing import Processimport timedef task(arg): time.sleep(arg) print(arg)if __name__ == &apos;__main__&apos;: for i in range(10): p = Process(target=task, args=(i,)) # p.daemon=True p.start() p.join(0.5) print(&quot;end&quot;) 进程池与线程池用法一样，细节不展开1from concurrent.futures import ProcessPoolExecutor 进程锁也是和线程锁一样的用法，细节不展开 进程与线程不同的是进程数据不共享，那如何实现数据交互，方法很多rpc,Queue,pipe,自己实现socket也可以实现 ,借住第三方工具，python本身也可以实现，2种方法： Array (基于C语言数据类型) Manager (基于socket) 1234567891011from multiprocessing import Processdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: v = [] for i in range(10): p = Process(target=task,args=(i, v)) #每个进程数据独立存在 p.start() C语言里Array存的元素是定义时定死的，和python 的列表有很大不同。1234567891011from multiprocessing import Process,Arraydef task(num,li): li[num] = 1 print(list(li))if __name__ == &apos;__main__&apos;: v = Array(&apos;i&apos;, 10) #i在c语言是的int，10表示长度 for i in range(10): p = Process(target=task,args=(i, v)) p.start() Manger().list() Manger().dict()12345678910111213from multiprocessing import Process,Array,Managerdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: # dic = Manager().dict() v = Manager().list() for i in range(10): p = Process(target=task,args=(i, v)) p.start() p.join() 线程，多线程，线程池线程定义：一个任务可以再划分为多个小任务，进程内独立执行这些小任务的最小单元。 一个进程可以有多个线程，线程间共享内存数据，一个线程挂了，其它线程也会崩溃，线程切换开销较进程小一些。 多线程： 用于解决IO密集型任务的多并发 线程池： 内部维护一个线程序列. (与进程池同理) 线程示例123456789101112import threadingimport timedef task(arg): time.sleep(1) print(arg)for i in range(5): t = threading.Thread(target=task,args=(i,)) t.setDaemon(False) # 等子线程完成后再结束主线程 t.start() t.join() # 变为串行,一直等 t.join(3) # 变为串行,只等3秒print(&quot;end&quot;) # 先打印主线程的end,再一起打印子线程的i 自定义线程类示例123456789101112131415161718import threadingimport timeclass MyThread(threading.Thread): def __init__(self,target=None,args=(),**kwargs): super(MyThread,self).__init__(target=None,args=(),**kwargs) self.target =target self._args = args def run(self,): return self.target(*self._args)def task(arg): time.sleep(1) print(arg)t = MyThread(target=task, args=(123,))t.run()print(&quot;end&quot;) 线程锁线程共享数据，共同修改一份数据是有问题的，pycharm环境下可能看不出效果，cmd命令行下可以看到数据修改混乱了。123456789101112import threadingimport timev=10def task(arg): global v v-=1 print(v)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 数据修改乱了，就要加锁了：普通锁，递归锁RLock,事件锁、条件锁，互斥锁普通锁 1234567891011import threadingimport timev=10lock = threading.Lock()def task(arg): lock.acquire() # 申请锁 global v v-=1 print(v) lock.release() # 释放锁 普通锁不能开多重没锁，如果是下面这种设置会造成死锁123456# 死锁lock = threading.Lock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 递归锁RLock递归锁RLock可以开多重锁，不会造成死锁123456# 不会死锁lock = threading.RLock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 信号量BoundedSemaphore多个线程同时使用锁，当然这里3个同时修改数据也可能混乱。 12345678910111213141516import threadingimport timev=10lock = threading.BoundedSemaphore(3)def task(arg): lock.acquire() # 申请锁 time.sleep(1) global v v-=1 print(v) lock.release() # 释放锁for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 事件锁条件式批量解锁12345678910111213141516import threadingimport timelock = threading.Event()def task(arg): time.sleep(1) lock.wait() #锁住所有线程 print(arg)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = input(&quot;&gt;&gt;&gt;&quot;) if value == &apos;1&apos;: lock.set() # 解锁 条件锁123456789101112131415161718import threadingimport timelock = threading.Condition()def task(arg): time.sleep(1) lock.acquire() lock.wait() #锁住所有线程 print(&apos;线程&apos;,arg) lock.release()for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = int(input(&quot;&gt;&gt;&gt;&quot;)) lock.acquire() lock.notify(value) # 传几就解几个锁 lock.release() 线程池pool.submit(download,url)取出一个线程执行任务，返回future对象future.add_done_callback(write)future对象有一个add_done_callback方法，传入我们自己写的回调函数write, future对象也会自动传给write回调函数。download 函数的返回值=future.result() 12345678910111213141516171819202122232425import requestsfrom concurrent.futures import ThreadPoolExecutordef write(future): response = future.result() f=open(&apos;xx.txt&apos;,&apos;wb+&apos;) f.write(response.content) f.close()url_list = [ &apos;http://www.baidu.com&apos;, &apos;http://www.digmyth.com&apos;, &apos;http://www.github.com&apos;,]def download(url): response=requests.get(url) print(&quot;得到结果&quot;,url) return responsepool = ThreadPoolExecutor(2)for url in url_list: print(&quot;开始请求：&quot;,url) future=pool.submit(download,url) # 池中取一个连接 # ruture自动传给write调函数:write(future) future.add_done_callback(write) 封装1234567891011121314import requestsfrom concurrent.futures import ThreadPoolExecutordef download(url): response=requests.get(url) return responsedef run(url_list=None): pool = ThreadPoolExecutor(2) for item in url_list: url = item[&apos;url&apos;] callback = item[&apos;callback&apos;] future=pool.submit(download, url) future.add_done_callback(callback) 1234567891011121314151617def f1(future): print(future.result().content)def f2(arg): print(&quot;future&quot;)def f3(future): print(&quot;future&quot;)url_list = [ &#123;&apos;url&apos;:&apos;http://www.baidu.com&apos;,&apos;callback&apos;:f1&#125;, &#123;&apos;url&apos;:&apos;http://www.digmyth.com&apos;,&apos;callback&apos;:f2&#125;, &#123;&apos;url&apos;:&apos;http://www.github.com&apos;,&apos;callback&apos;:f3&#125;,]import nb_threadnb_thread.run(url_list) 协程协程定义： 协程不同于进程，线程对于操作系统可见且是一种资源，协程只是代码层面的来回切换，对于操作系统不可见且并非是一种资源。 1pip3 install greenlet # python中原生协程 单独协程没什么用，结合协程切换特性+IO+select+socket可以编写出牛逼的异步IO模块或异步非阻塞框架 gevent就是基于greenlet+libvent+IO二次加工实现的python异步模块1pip3 instal gevent 示例：和多线程不同，这里是单线程并发IO任务123456789101112import geventimport requestsdef func(url): response = requests.get(url) print(response.url)gevent.joinall([ gevent.spawn(func,&apos;http://www.baidu.com&apos;), gevent.spawn(func,&apos;http://www.digmyth.com&apos;), gevent.spawn(func,&apos;http://www.github.com&apos;),]) 当然我们也可以自己用select来写IO多路复实现并发 总结即使有了多进程多线程或进程池，线程池处理多任务，但如果一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型也只能处理一个任务，无法并发执行。 还好现代操作系统支持异步IO，这是一个很牛逼的东东，单进程单线程模型并发执行任务得以实现。这种称为事件驱动模型，Nginx就是支持异步IO的Web服务器。 单线程的异步编程或异步IO多路复用会是趋势，可以基于事件驱动编写高效的多任务程序。Twisted,Tornado之所以牛逼，就是因为它们的高性能也是基于事件驱动，基于异步IO多路复用。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-Django-01-入门","slug":"web-django-01-入门","date":"2017-03-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.948Z","comments":true,"path":"2017/03/20/web-django-01-入门/","link":"","permalink":"http://www.digmyth.com/2017/03/20/web-django-01-入门/","excerpt":"","text":"目录 什么是WSGI 什么是mvc/mtv模型 orm如何工作 Django安装 一、什么是WSGI对浏览器而言，远端是服务器程序和应用程序，而服务器程序就是socket Server,用于接收用户请求，解析用户请求，响应用户请求，这部份工作永远不变的。可变的是应用程序，那么服务器程序与应用程序解耦偶就有了必要。 接收用户请求，解析用户请求，响应用户请求这些封装为WSGI接口简化开发。 定义web app与web server之间接口解耦规则就是WSGI. Python标准库提供的独立wsgi服务器称为wsgiref 二、什么是mvc/mtv模型init.py: 告诉python它不是一个目录文件夹而是一个包 mvc: model(数据库交互) view(模板) control (业务处理逻辑) mtv: model（数据库交互）view(视图，业务逻辑处理) templates(模板） 注： templates模板可以放在项目下或各个app下 三、orm如何工作一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 自动路由： 反射应用，自定义扩展 四、Django安装安装Djangopip3 install django pika pymysql 查看安装pip3 list 创建一个Django项目cd /optmkdir /opt/templates # 用于整个项目存放模板文件django-admin startproject Mysite #创建一个项目 生成目录结构如下123456789101112/opt/Mysite - Mysite # 还有一个与项目同名的文件夹/opt/Mysite/Mysite，对整个程序进行配置 - __init__.py - settings.py # 配置文件 - urls.py # URL对应关系 - wsgi.py # 遵循WSGI规范，一般使用 uwsgi + nginx - manage.py # /opt/Mysite/manage.py管理Django程序：如下 - python manage.py runserver # 运行程序 - python manage.py startapp xx # 创建app # Django的orm框架 - python manage.py makemigrations - python manage.py migrate 创建一个应用：12345678910cd /opt/Mysitepython manage.py startapp app01生成/opt/Mysite/app01目录结构如下：/opt/Mysite/app01/__init__.py # 说明app01是一个包/opt/Mysite/app01/migrations # django orm框架，修改表结构的操作记录（差异化）/opt/Mysite/app01/admin.py # Django提供的后台管理程序/opt/Mysite/app01/apps.py # 配置当前app/opt/Mysite/app01/models.py # 数据库交互：orm-写指定的类，通过命令可以创建数据库结构/opt/Mysite/app01/views.py # 视图函数，业务逻辑处理/opt/Mysite/app01/test.py # 单元测试 初始练习：12Mysite/Mysite/urls.py (导入from blog import views及编写业务逻辑url(r&apos;^index&apos;,views.index)) ---&gt; 练习各种例子。。。 URLS别名用法：12345url(r&apos;^/login$&apos;, views.login, name=&quot;LOGIN&quot;)那么前端templates中的html代码需要用别名方式，语法如下：&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; 改为&lt;form action=&quot;&#123;% url &apos;LOGIN&apos; %&#125;&quot; mothod=&quot;post&quot;&gt; 1234567891011121314151617181920212223urls url(正则表达式 视图函数，参数，别名）正则这里匹配到的或者说捕获到的数据都是字符串类型，post提交的数据get post都可以向server端发送数据，区别是提交数据的方式不同：格式如下get ?id=2&amp;page=3post 数据在body里 无命名分组 位置参数有命名分组 关键字参数--在函数定义时，只能用命名的key，这一点是要注意的获取登录首页是以GET方法提交 -----GET用户名，密码表单submit时是以POST方式提交 -----POST时间表达：1 时间戳2 字符串3 结构化时间 五、Django生命周期 5.1 路由系统URLS123456789101112131 /index/ -&gt; def index(request)2 /detail-(\\d+)/ -&gt; def detail(request, nid) /detail-(?P&lt;nid&gt;\\d+)/ -&gt; def detail(request,nid)3 /index/ -&gt; def index(request) name=n1 使用别名生成URL： 模板语言： &#123;% url n1 %&#125; -&gt; /index/ 视图函数：（需要导入reverse模块） reverse(name=&quot;n1&quot;) --&gt; /index/ 4 /web/ include(&quot;app01.urls&quot;) 5.2 视图函数1 函数至少一个参数 request2 request12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 注意:form表单提交方法只能是get或post当提交文件时特别注明enctype=&quot;multipart/form-data&quot;12345&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;filename&quot;&gt;&lt;/form&gt; 3 返回方式123HttpResponse()render(request,)redirect() 5.3 ORM操作各数据库操作是一种外对sql api接口的封装 第一层封装：数据库存储最底层是db驱动，对外开放SQL API用于操作数据库 第二层封装：python3 中操作mysql数据库的库为pymysql,是对SQL API之上的一层封装 第三层封装: orm操作是最高级封装，pymsql之上的一层封装 最终：orm翻译成pymsql,pymysql再翻译成sql语句 Django 数据库操作具体语法介绍请参考 5.4 模板引警Django对template中html的渲染有着一套语法,我有专门一篇博客讲解模板渲染语法渲染语法博客参考 1 基本方法12345678910111213return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 2 函数 Django 提供的函数:12simple_tag 可以有多个参数filter 只能有2个参数，并且可以做条件语句的条件","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-08-03-面象对象编程高级","slug":"python-08-03-面象对象编程高级","date":"2017-03-15T14:28:41.000Z","updated":"2018-02-21T04:38:02.994Z","comments":true,"path":"2017/03/15/python-08-03-面象对象编程高级/","link":"","permalink":"http://www.digmyth.com/2017/03/15/python-08-03-面象对象编程高级/","excerpt":"","text":"目录(魔法方法) 类内置方法 构造方法 @property getattr系列 getitem系列 metaclass系列 importlib 字符串形式运行函数 内置方法1234567891 Foo.__name__ 字符串形式的类名2 Foo.__doc__ Foo的文档字符串3 Foo.__bases__ 父类组成的元组4 Foo.__class__ Foo类所在5 Foo.__bases__ Foo的所有父类构成的元组7 Foo.__module__ Foo类所在模块8 obj.__class__ obj对象所在的类 9 dir(Foo)` Foo类所有属性名组成的列表10 Foo.__dict__ Foo类所在属性组成的字典 构造方法12__init__ 构造方法，通过类创建对象时自动触发执行__del__ 析构方法，当对象在内存中被释放时自动触发执行 __str__ __repr__ __call__123__str__ 对象打印时自动触发__repr__ 对象直接回车自动触发（仅供程序员使用）__call__ 对象后面加括号调用时自动触发 @property属性方法把一个类方法变为属性来用12345678910111213141516171819class Dog(object): def __init__(self,name): self.name = name self.__food = None @property def eat(self): print(&quot;%s is eating %s&quot; %(self.name, self.__food)) @eat.setter # 赋值调用属性，调这个方法 def eat(self,food): print(&quot;set to food:&quot;,food) self.__food = food @eat.deleter # 删除属性 def eat(self): del self.__food print(&quot;Delete the finished&quot;)obj=Dog(&apos;w..w&apos;)obj.eat = &quot;fish&quot; # 自动调用@eat.setter赋值obj.eat property 原理就是property类里定义了__get__() __set__() __delete__()方法，是描述符的运用123456定义： 描述符就是将某种特殊类的实例指派给另一个类的属性，__get__ __set__ __delete__实现了 描述符协议，用于property描述符编写。一种调用方式之一： property(fget=None, fset=None, fdel=None, doc=None)__get__(self, instance, owner) #用于访问属性，它返回属性的值__set__(self, instance, value) #将在属性分配操作中调用，不返回任何内容__delete__(self, instance) # 控制删除操作，不返回任何内容 getattr setattr hasattr反射系列用于通过字符串找到函数或方法 示例：1234567891011121314151617181920def func1(self): print(self.name,&apos;say Hi&apos;) return &quot;func1&quot;class Foo(object): def __init__(self): self.name = &apos;wxq&apos; def func2(self): print(self.name) return &quot;method func2&quot;obj = Foo()choice = input(&quot;请输入调用方法名:&quot;)if hasattr(obj,choice): # 实例中有这个方法，执行实例中的方法 func=getattr(obj,choice) func() # 绑定方法自动传入self参数else: # 动态加载函数封装到类中 setattr(obj,choice,func1) func = getattr(obj,choice) func(obj) # 函数时需手动传入self参数 __getattr__ __setattr__ __hasattr__ __delattr__ 进行__dict__拦截一般来讲，obj.name = &#39;wxq&#39;python自动基于self.__dict__赋值取值操作，无需关心，这里只是对这种自动操作进行拦截，用于高级代码重写操,self.xx不存在变量xx时先访问__getattribute__,再访问__getattr__,默认返回None,self.xx存在变量xx时不会访问getattr，直接取出值返回，self.name=’wxq’赋值先访问setattr`方法，没有该方法就用默认内置. 示例一12345678910111213141516171819class Foo(): def __init__(self): pass def __getattribute__(self, item): print(&apos;__getattribute__&apos;) return object.__getattribute__(self,item) def __getattr__(self, item): print(&apos;__getattr__&apos;) return &quot;%s variable don&apos;t exists&quot; % item def __setattr__(self, item, value): print(&apos;__setattr__&apos;) self.__dict__[item] = &apos;test&apos;+valueobj=Foo()obj.name = &apos;wxq&apos;print(obj.name) 打印123__setattr____getattribute__testwxq 示例二： 当没有.xx变量属性时会访问__getattr__方法12345678910111213class Foo(): def __init__(self): pass def __getattr__(self, item): if item == &apos;name&apos;: return &apos;wxq&apos; elif item == &apos;age&apos;: return 25obj = Foo()print(obj.age) 示例三：123456789101112class Foo(): def __init__(self,path=&apos;&apos;): self.path = path def __getattr__(self, item): return Foo(&quot;%s/%s&quot;%(self.path, item)) def __str__(self): return self.pathobj = Foo(&quot;www&quot;).bai.comprint(obj) # 打印 www/bai/com __getitem__ __setitem__ __delitem__用于索引操作，如字典形式：obj[&#39;k1&#39;]如Session设置 request.session[&#39; user_info&#39;] = &#39;user&#39; 1234567891011121314151617181920class Foo(object): def __init__(self,attrs=&#123;&#125;): self.attrs = attrs def __getitem__(self, key): print(&apos;__getitem__&apos;,key) return self.attrs.get(key) def __setitem__(self, key, value): print(&apos;__setitem__&apos;,key,value) self.attrs[key] = value def __delitem__(self, key): print(&apos;__delitem__&apos;,key) del self.attrs[key] print(self.attrs) obj = Foo(&#123;&apos;name&apos;:&apos;wxq&apos;&#125;)obj[&apos;k1&apos;] = &apos;v1&apos; # 设置，自动触发执行 __setitem__print(obj.attrs)print(obj[&apos;k1&apos;]) # 获取值，自动触发执行 __getitem__del obj[&apos;name&apos;] # 触发__delitem__ __new__和 __metaclass____new__与实例化对象相关123456789class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): # 其实是运行了__new__(),不再调用__init__()方法了 print(&quot;Foo __new__&quot;)obj = Foo(&apos;wxq&apos;) # 打印 Foo __new__,这里obj是None 这里可以看出实例化是先运行的__new__()方法，如果__new__()没有返回值，Foo.__init__()就不会运行了，obj也就为None了要想运行Foo.__init__(), 那么__new__()必须有返回值1234567891011class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): print(&quot;Foo __new__&quot;) return object.__new__(cls)obj = Foo(&apos;wxq&apos;)print(obj) 总结实例化过程 看起来__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。 __metaclass__与类的创建相关12print type(f) # 输出：&lt;class &apos;__main__.Foo&apos;&gt; 表示，obj 对象由Foo类创建print type(Foo) # 输出：&lt;type &apos;type&apos;&gt; 表示，Foo类对象由 type 类创建 培析类 的创建过程123456789def func(self): print(&apos;hello fgf&apos;)Foo = type(&apos;Foo&apos;,(object,), &#123;&apos;talk&apos;: func&#125;)# type第一个参数：类名# type第二个参数：当前类的基类# type第三个参数：类的成员f = Foo()f.talk() 12345678910def func(self): print(&quot;hello %s %s&quot;%(self.name,self.age))def __init__(self,name,age): self.name = name self.age = ageFoo = type(&apos;Foo&apos;,(object,),&#123;&apos;func&apos;:func, &apos;__init__&apos;:__init__&#125;) # 用type创建出Foo这个对象（类）f = Foo(&quot;wxq&quot;,25) # 再用Foo对象创建f对象f.func() Metaclass元类创建过程1234567891011121314151617181920212223242526272829#print(globals())class MyType(type): def __init__(self,*args,**kwargs): print(&quot;MyType __init__&quot;,self,*args,**kwargs) def __call__(self, *args, **kwargs): print(&quot;MyType __call__&quot;,self, *args, **kwargs) obj = self.__new__(self) self.__init__(obj, *args, **kwargs) obj.age= 25 return obj def __new__(cls, *args, **kwargs): print(&quot;MyType __new__&quot;,cls, *args, **kwargs) obj = type.__new__(cls, *args, **kwargs) return objclass Foo(object,metaclass=MyType): def __init__(self, name): self.name = name print(&quot;Foo __init__&quot;) def __call__(self, *args, **kwargs): print(&quot;call...&quot;)#print(globals()f = Foo(&quot;test&quot;)print(f.name,f.age) 总结Type创建类过程 前面实例化对象的结论是__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。那么type创建Foo对象(类)也是这个流程，因为是Type实例化Foo类，MyType执行__new__创建Foo,返回给MyType.__init__()执行，当f=Foo() 实例化对象也就是加()调用MyType.__call__()方法,__call__()方法来执行实例化，实例化过程又是执行Foo.__new__()返回给Foo.__init__()，完成实例化。 importlib字符串模块导入123456import importlibx=&apos;scrapy.crawler.CrawlerProcess&apos;model_path,model_name = x.rsplit(&apos;.&apos;,maxsplit=1)md=importlib.import_module(model_path) # 字符串形式模块导入cls=getattr(md,model_name)print(cls) 字符串形式运行函数1 eval(字符串)1234def func(arg): return argeval(&apos;func(&quot;hello wolrd&quot;)&apos;) Tornado编写session组件会用到这个知识点，结合工厂设计模式 2 eval获取函数1234567def f1(arg): print(arg)x=&quot;f1&quot;func=eval(x) # 获取函数func(&quot;wxq&quot;) 3 sys.modules获取函数1234567891011import sysdef process(arg): return argf=&quot;process&quot;func=getattr(sys.modules[__name__], f) # 获取函数ret=func(&apos;hello world&apos;)print(ret) 4 运用类中getattr123456789class Foo(): def f1(self): return &quot;hello world&quot; obj = Foo()x=&quot;f1&quot;func=getattr(obj,x)print(func()) &lt;完结&gt;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-06-01-正则表达式","slug":"python-06-01-正则表达式","date":"2017-03-01T09:03:01.000Z","updated":"2017-02-27T08:36:47.909Z","comments":true,"path":"2017/03/01/python-06-01-正则表达式/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-06-01-正则表达式/","excerpt":"","text":"目录 基础 进阶 re模块 分组 切分字符串 编译compile 贪婪模式匹配 基础元字符：(Meta-Characters)是正则表达式中具有特殊意义的专用字符比如：\\d表示数字 \\s表示空格 \\w表示[a-zA-Z0-9_]大小写字母数字下划线元字符表 链接字符类：又字符集，一组可以匹配[ ]中字符串的字符12345678910111213141516171819202122. # 任意单个字符[] # 集合内[^] # 集合内取反? # 表示前一个字符长度为0或1+ # 表示前一个字符长度为1或1以上* # 表示前一个字符长度为任意，等同于?+的并集&#123;m&#125;&#123;m,n&#125;&#123;0,n&#125;&#123;m,&#125;^$pat1|pat2() # 分组\\b # 嘛意思[0-9] \\d[0-9a-zA-Z_] \\w\\s # 任意空白字符\\nna*? # 这里？使用非贪婪模式（正则表达式默认工作在贪婪模式，尽可能多的去匹配）(*|+|?|&#123;&#125;)?` # 使用非贪婪模式match # 只匹配首项以开头的，与shell中^相同 进阶re模块12345678910111213141516171819202122232425262728293031&gt;&gt;&gt; re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; res = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; print(res)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt; # 没有匹配到打印为None&gt;&gt;&gt; res.group() # 匹配到时用.group()取出匹配结果 &apos;wxq&apos;&gt;&gt;&gt; &quot;I love wxq &quot;.find(&apos;wxq&apos;)7&gt;&gt;&gt; re.search(r&apos;.&apos;, &apos;I love digmyth.com&apos;) # 匹配任意单个字符，所以匹配到&quot;I&quot;&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\.&apos;, &apos;I love digmyth.com&apos;) # 只匹配.需要转义&lt;_sre.SRE_Match object; span=(14, 15), match=&apos;.&apos;&gt;&gt;&gt;&gt; re.search(r&apos;wx.&apos;, &apos;I love wxq.com&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d&apos;, &apos;I love 123 wxq&apos;) # 匹配单个数字&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt; &gt;&gt;&gt; re.search(r&apos;\\d\\d\\d&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;123&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.10&apos;) # 少一位匹配不到&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.100&apos;) # 匹配到&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.100.100&apos;&gt; 12345678910111213141516171819202122232425262728293031323334353637&gt;&gt;&gt; re.search(r&apos;[aeiou]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(3, 4), match=&apos;o&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[aeiouAEIOU]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[a-z]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(2, 3), match=&apos;l&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[2-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(8, 9), match=&apos;2&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[0-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3&#125;c&apos;, &apos;abbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 5), match=&apos;abbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3,10&#125;c&apos;, &apos;abbbbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 7), match=&apos;abbbbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[0-255]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;1&apos;&gt;&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[0-2][0-5][0-5]&apos;, &apos;188&apos;) # 没有匹配到&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[01]\\d\\d|2[0-2]\\d|25[0-5]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;188&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5]))&apos;, &apos;192.168.1.1&apos;) # 只匹配到192&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;192&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5])\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]\\d\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 11), match=&apos;192.168.1.1&apos;&gt; ip地址匹配最终完美写法：12345&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.240.240&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 14), match=&apos;192.168.240.24&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[0-1]?\\d?\\d)&apos;, &apos;192.168.240.240&apos;) # 这个写法完美&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.240.240&apos;&gt; [0-255]表示的是0，1，2后跟上55[0-2][0-5][0-5]只是三个占位上的数字，没有个位，百位这样的区分，当然不能匹配188了 1234567891011121314&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;3&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 重复&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1, 5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 注意没有空格&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1,5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 匹配到了&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; s = &quot;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt;&quot;&gt;&gt;&gt; re.search(r&apos;&lt;.+?&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;&lt;html&gt;&apos;&gt;&gt;&gt;&gt; re.search(r&apos;&lt;.+&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 50), match=&apos;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt; 12345&gt;&gt;&gt; re.findall(r&apos;\\bFishC\\b&apos;, &quot;FishC.com!FishC_com!(FishC)&quot;) # 待续。#^#[&apos;FishC&apos;, &apos;FishC&apos;]&gt;&gt;&gt; &gt;&gt;&gt; re.findall(r&apos;\\w&apos;, &quot;牛X工作室Love_FishC_com!)&quot;)[&apos;牛&apos;, &apos;X&apos;, &apos;工&apos;, &apos;作&apos;, &apos;室&apos;, &apos;L&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;F&apos;, &apos;i&apos;, &apos;s&apos;, &apos;h&apos;, &apos;C&apos;, &apos;_&apos;, &apos;c&apos;, &apos;o&apos;, &apos;m&apos;] re-replace/sub的例子如下字符串的strip方法只能去前后空格、字符串的replace方法是字符替换、re.sub方法也是替换功能。123456789&gt;&gt;&gt; name = &apos; w x q&apos;&gt;&gt;&gt; name.strip()&apos;w x q&apos;&gt;&gt;&gt; name.replace(&apos; &apos;, &apos;&apos;)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos;wxq&apos;, &apos;love&apos;, &apos;I wxq wxq wxq&apos;, count=2)&apos;I love love wxq&apos; 分组eg1:123&gt;&gt;&gt; name = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; name.group() # .group()打印匹配对象&apos;wxq&apos; eg2:12345678910&gt;&gt;&gt; s = &apos;aa bb cc dd &apos;&gt;&gt;&gt; p = re.compile(r&apos;\\w+\\s+\\w+&apos;) # 匹配单词空格单词这样的分组&gt;&gt;&gt; p.findall(s) # 匹配分为了2组[&apos;aa bb&apos;, &apos;cc dd&apos;]&gt;&gt;&gt; p = re.compile(r&apos;(\\w+)\\s+\\w+&apos;) # 只匹配单词空格单词中括号那个单词&gt;&gt;&gt; p.findall(s)[&apos;aa&apos;, &apos;cc&apos;]&gt;&gt;&gt; p = re.compile(r&apos;((\\w+)\\s+\\w+)&apos;) # 先打印外括号，后打印内括号，先后内容组成元组，最后列表呈现&gt;&gt;&gt; p.findall(s)[(&apos;aa bb&apos;, &apos;aa&apos;), (&apos;cc dd&apos;, &apos;cc&apos;)] eg3:12&gt;&gt;&gt; re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;(?P&lt;birthday&gt;[0-9]&#123;4&#125;))&quot;, &quot;371481199306143242&quot;).groupdict()&#123;&apos;province&apos;: &apos;3714&apos;, &apos;birthday&apos;: &apos;1993&apos;, &apos;city&apos;: &apos;811993&apos;&#125; 切分字符串re.split用法split 以至少2个空格为分隔, 两种写法:re.split(r’\\s{2,}’, str)re.split(r’\\s\\s+’，str) 12345&gt;&gt;&gt; import re&gt;&gt;&gt; re.split(r&apos;\\s&#123;2,&#125;&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;) # 以2个空隔分割字符串返回列表[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;]&gt;&gt;&gt; re.split(r&apos;\\s\\s+&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;)[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;] 12345678910111213# cat whodata.txt 17:24:49 up 2:05, 3 users, load average: 0.00, 0.02, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/1 192.168.109.1 15:33 9.00s 0.17s 0.04s python3&gt;&gt;&gt; import re&gt;&gt;&gt; with open(&apos;whodata.txt&apos;, &apos;r&apos;) as f:... for line in f:... res = re.split(&apos;\\s\\s+&apos;, line)... print(res)... [&apos; 17:24:49 up&apos;, &apos;2:05,&apos;, &apos;3 users,&apos;, &apos;load average: 0.00, 0.02, 0.05\\n&apos;][&apos;USER&apos;, &apos;TTY&apos;, &apos;FROM&apos;, &apos;LOGIN@&apos;, &apos;IDLE&apos;, &apos;JCPU&apos;, &apos;PCPU WHAT\\n&apos;][&apos;root&apos;, &apos;pts/1&apos;, &apos;192.168.109.1&apos;, &apos;15:33&apos;, &apos;9.00s&apos;, &apos;0.17s&apos;, &apos;0.04s python3\\n&apos;] eg1:123456789101112&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; p = re.compile(&apos;\\.&apos;)&gt;&gt;&gt; p.split(&apos;www.digmyth.com&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; url = &apos;www.digmyth.com&apos;&gt;&gt;&gt; re.compile(&apos;\\.&apos;).split(url)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; re.sub(&apos;www&apos;, &apos;mail&apos;, url)&apos;mail.digmyth.com&apos;&gt;&gt;&gt; url.split(&apos;.&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;] eg2:123456789&gt;&gt;&gt; import re&gt;&gt;&gt; name = &apos;hello world&apos;&gt;&gt;&gt; str_a, str_b = re.split(r&apos;\\s+&apos;, name)&gt;&gt;&gt; str_a, str_b(&apos;hello&apos;, &apos;world&apos;)&gt;&gt;&gt; str_a&apos;hello&apos;&gt;&gt;&gt; str_b&apos;world&apos; eg3:123456789101112root@ubuntu:~# cat put_split.py #!/usr/bin/env python3import osimport reinput = input(&quot;enter you str: &quot;).strip()cmd, path = re.split(r&apos;\\s+&apos;, input)print(cmd.strip())print(path.strip())root@ubuntu:~# python3 put_split.py enter you str: put /root/demo.txtput/root/demo.txt 编译compile正则表达式工作流程： 检测语法–&gt; 编译–&gt; 匹配当一个正则表达式多次调用时，建议预先编译好，后续直接用于匹配以提高效率 123456789&gt;&gt;&gt; p = re.compile(r&apos;[A-Z]&apos;)&gt;&gt;&gt; type(p)&lt;class &apos;_sre.SRE_Pattern&apos;&gt;&gt;&gt;&gt; p.search(&quot;I Love www.DigMyth.Com&quot;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; p.findall(&quot;I LLove www.DigMyth.Com&quot;)[&apos;I&apos;, &apos;L&apos;, &apos;L&apos;, &apos;D&apos;, &apos;M&apos;, &apos;C&apos;] 贪婪模式匹配","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-07-01-面象对象编程初级","slug":"python-07-01-面象对象编程初级","date":"2017-03-01T00:28:28.000Z","updated":"2018-02-06T09:03:55.804Z","comments":true,"path":"2017/03/01/python-07-01-面象对象编程初级/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-07-01-面象对象编程初级/","excerpt":"","text":"目录 相关概念 创建类和对象 面向对象内置变量 继承、封装、多态 抽象方法 相关概念定义： 面向对象编程(oop=object-oriented programming): 相对于面对过程编程，它只是一种编程范示。 状态和转换这种状态的操作: 状态其实就是数据，转换这种状态的操作其实就是方法 类：将同一种具体的共同特性抽象出来数据：如变量方法：函数：操作变量引用的数据的代码方法是类的组成部份，属性也是在类中定义的, 但数据是在类实例化时赋值的. 对象是类的实例，对象的某个方法的调用理解为对其发消息，或接口调用同一个类的所有对象都能接收相同的消息，也就是同种方法依赖 一个类中的方法操作另一个类的对象聚合 类A的对象包含类B的对象继承：描述特殊或具体与一般性的关系面向对象的模型机制有3原则：封装，继承，多态 类或类成员有数据和方法一个类的行为和接口是通过类的方法来定义的对象是类的实例自定义类—实例化—–对象–对象间的操作—消息传递这里消息就是调用请求 创建类和对象1234567891011121314class Foo(): data=&apos;hello world&apos; #类数据变量作用于所有实例 def __init__(self,name=&apos;default&apos;): # 构造器 self.name = name # 实例变量作用于调用对象或调用实例 def set_score(self,value): # 类方法属性 self.score = value def get_score(self): return self.scoreobj = Foo(&apos;wxq&apos;) obj.set_score(100)print(obj.get_score()) 可以给一个对象添加属性123456class Foo(): data = &apos;default data&apos;obj = Foo()obj.name = &apos;wxq&apos;print(obj.name) 可以把某个方法绑定给一个实例或 一个类，当绑定给类时，这个方法对此类的所有实例都生效方法绑定给一个实例12345678910def set_age(self,age): self.age = age class Foo(): data = &apos;default data&apos; from types import MethodTypeobj.set_age = MethodType(set_age, obj)obj.set_age(20) 方法绑定给一个类12345678910111213from types import MethodTypeclass Foo(): data = &apos;default data&apos;def set_age(self,age): self.age = ageFoo.set_age = MethodType(set_age, Foo)obj = Foo()obj.set_age(23)print(obj.age) 面向对象内置变量1 类变量作用于所有对象或实例2 实例变量作用于调用对象或调用实例3 __init__() 构造器 __del__() 析构器4 Foo.__name__ 字符串形式的类名5 Foo.__doc__ Foo的文档字符串6 Foo.__bases__ Foo的所有父类构成的元组 7Foo.moduleFoo类所在模块 8obj.classobj对象所在的类 9dir(Foo)` Foo类所有属性名组成的列表1[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;data&apos;] 10 Foo.__dict__Foo类的所有属性组成的字典1&#123;&apos;data&apos;: &apos;hello&apos;, &apos;__weakref__&apos;: &lt;attribute &apos;__weakref__&apos; of &apos;Foo&apos; objects&gt;, &apos;__dict__&apos;: &lt;attribute &apos;__dict__&apos; of &apos;Foo&apos; objects&gt;, &apos;__init__&apos;: &lt;function Foo.__init__ at 0x0000000000ABC9D8&gt;, &apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None&#125; 类的继承，封装，多态3特性继承1234567891011121314class Foo(): def f1(self): return self.f2() def f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def f2(self): return &quot;Bar.f2&quot;obj = Bar()obj.f1() # 打印Bar.f2# 描述运行过程:self=obj,没有f1就先调用父类的f1,再找当前类的f2, 不是直接找父类的f2,如果非要找父类的f2,参考下面引藏示例 有时子类直接继承父类，在继承基础上重构子类属性，那么就要用到super()方法用法： super(当前类，self.).__init__()或py3 supuer().__init__() 12345678class Foo(): def __init__(self,*args,**kwargs): passclass Bar(): def __int__(self,name,*args,**kwargs): super(Bar,self).__init__() self.name = name Boolean型判断123456789判断一个类是不是另一个类的子类issubclass(CC,PP)issubclass(PP,object)判断一个实例是不是那个类生成的isinstance(ins1,CC)判断一个实例有没有那个属性值hasattr(ins1,&apos;name&apos;) 12345678from types import FunctionTypeclass Foo(): def f1(self,name): return nameobj = Foo()print(isinstance(Foo.f1,FunctionType)) # Trueprint(isinstance(obj.f1,FunctionType)) # False 封装python数据封装只要写代码就会有，对数据结构化存储; 如1234567class Base(): def __init__(self): self.status = False self.data = None self.errors = Noneobj=Base()obj.status/obj.data/obj.errors # 这就是一种数据封装 封装可以__开头隐藏属性，但在类内部不受限制，外部是无法访问的，当然只是语法变形的隐藏，在名称空间还是能找到的123456789101112131415161718class Foo(): __N = &apos;NN&apos; def __init__(self,name): self.__name = name def __f1(self): # 外部无法直接访问 return self.__name def f2(self): return self.__f1() # 在内部调用不受限制obj = Foo(&apos;wxq&apos;)print(obj.__f1()) # 无法直接调用,直正调用还是可以的obj._Foo__f1()print(obj.f2())obj.__dict__ # &#123;&apos;_Foo__name&apos;: &apos;wxq&apos;&#125;obj.__x = &quot;xx&quot; # 语法隐藏变形是在定义类时，实例化后再__不会变形obj.__xx # 实例化后不会隐藏 继承类时，我们就想调用Foo的f2(),方法很多，这里用一下隐藏实现1234567891011121314 class Foo(): def f1(self): return self.__f2() #变形为 self._Foo__f2 def __f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def __f2(self): # self._Bar__f2 return &quot;Bar.f2&quot;obj = Bar()x=obj.f1() # 打印Foo.f2print(x) 多态python原生就是多态，没什么可说的 123456789101112131415161718192021222324252627class Animal(): def __init__(self,name): self.name = name def talk(self): pass @staticmethod def animal_talk(obj): obj.talk()class Dog(Animal): def talk(self): print(&quot;wang...&quot;)class Cat(Animal): def talk(self): print(&quot;miao miao...&quot;)d=Dog(&apos;dog&apos;)# d.talk()c = Cat(&apos;cat&apos;)# c.talk()Animal.animal_talk(d)Animal.animal_talk(c) 抽象方法抽象方法作用：定义子类必须实现的父类的某些方法使用：12345678910111213141516171819import abcclass Base(metaclass=abc.ABCMeta): @abc.abstractmethod def read(self): pass @abc.abstractmethod def write(self): passclass dev(Base): def read(self): pass def write(self): passobj = dev() 如果子类没有实现父类规定的@abc.abstractmethod装饰的方法就会报错1TypeError: Can&apos;t instantiate abstract class dev with abstract methods read, write","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-02-模块","slug":"python-05-02-模块","date":"2017-02-20T02:09:10.000Z","updated":"2018-01-03T10:57:43.240Z","comments":true,"path":"2017/02/20/python-05-02-模块/","link":"","permalink":"http://www.digmyth.com/2017/02/20/python-05-02-模块/","excerpt":"","text":"目录 相关概念 模块os 模块sys 模块time 模块random 模块pickle 模块json 模块logging 模块paramiko 模块configparser 模块MySQLdb 模块hashlib 模块uuid 模块md5 模块 相关概念 过程编程 , 函数式编程, 模块化编程是一个意思，区别于面向对象编程 面向对象编程好处：（特性: 封装，继承，多态） python程序可以分解成模块，语句，表达式和 对象 程序由模块构成 模块包含语句 语句包含表达式 表达式建立并处理对象表达式是”某事“， 语句是“做某事”即指令语句的特性：它们改变了事物，例如，赋值语句改变了变量，print改变了屏幕输出。 模块导入的使用 123456&gt;&gt;&gt; import platform&gt;&gt;&gt; print(platform.uname())uname_result(system=&apos;Linux&apos;, node=&apos;ubuntu&apos;, release=&apos;4.2.0-35-generic&apos;, version=&apos;#40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016&apos;, machine=&apos;x86_64&apos;, processor=&apos;x86_64&apos;)&gt;&gt;&gt; import platform&gt;&gt;&gt; dir(platform)[&apos;DEV_NULL&apos;, &apos;_UNIXCONFDIR&apos;, &apos;__builtins__&apos; 此处略... ] 模块导入区别 import 导入会形成以模块名同名的名称空间，如果有个方法叫uname(),那么我们调用是print(platform.uname())加上platform名称空间前缀不会冲突 123456&gt;&gt;&gt; import random # 独立名称空间&gt;&gt;&gt; random.choice([3,5,6,7,8,9]) 7&gt;&gt;&gt; from random import choice # 没有独立名称空间，当前有choice方法会覆盖，这就是区别&gt;&gt;&gt; choice([3,5,6,7,8,9])6 from-import是导入指定模块的某些方法和属性，会导入在当前名称空间里，如果当前名称空间也有choice方法，那么会覆盖choice方法。import和from-import是可执行语句，独立可执行片断，可以嵌套在if测试中，或出现在def中，这样在我们满足条件再导入模块。 己知模块查找此模块在系统中的路径，用法module_name.__file__123&gt;&gt;&gt; import random&gt;&gt;&gt; random.__file__&apos;/usr/lib/python3.4/random.py&apos; 反射有一种说法叫反射1 以字符串的形式导入模块2 以字符串的形式调用函数 例子：12345678910111213root@apt:~# cat /usr/local/lib/python2.7/dist-packages/pkg/mysql.py#!/usr/bin/python2.7def count(): return 3306root@apt:~#In [1]: var = &apos;pkg.mysql&apos;In [2]: mode = __import__(var)In [3]: mode.mysql.count()Out[3]: 3306In [4]: func = &apos;count&apos;In [5]: Func = getattr(mode.mysql, func)In [6]: Func()Out[6]: 3306 模块osMore info 详情 模块sys利用sys模块模拟#滚动条12345678import sys,timeIn [111]: for i in range(50): .....: sys.stdout.write(&quot;\\033[32;1m#\\033[0m&quot;) .....: sys.stdout.flush() .....: time.sleep(0.05) .....: ################################################## time模块random模块博客参考 几个有用的方法1234import randomprint(random.randint(1,10)) # 取1-9print(random.randrange(1,20,2)) # 步长为2，意味着取奇数print(random.sample([1,2,3,4,5,6,7,8],3)) # 取一个3个元素的列表[3, 6, 1] 生成随机码(一)123456789checkcode = &apos;&apos;for i in range(4): current=random.randrange(0,4) if current != i: tmp = chr(random.randint(65,90)) else: tmp = random.randint(0,9) checkcode += str(tmp)print(checkcode) 生成随机码(二)1234import string# print(string.ascii_uppercase + string.ascii_lowercase+string.digits)source = string.ascii_uppercase + string.ascii_lowercase+string.digitsprint(&quot;&quot;.join(random.sample(source,4))) pickle模块pickle只是python支持，那么可以序列化python内所有数据类型 在程序运行的过程中，所有的变量都是在内存中,过程中可能改变变量，程序结束，内存变量回收。此时如果没有把修改过的变量存到磁盘上，下次程序运行又是最初的变量，怎么解决这个问题，序列化就派上用场了。 序列化： 把内存中的变量变成可存储可传输的过程称为序列化，pickling反序列化：把变量从序列化对象重新读入内存称为反序列化，unpickling pickle.dump() 序列化入文件pickle.dumps() 序列化为字符串，可赋值pickle.load() 从文件加载pickle.loads() 从字符串加载 1234567891011In [27]: import pickleIn [29]: my_listOut[29]: [0, 2, 4, 6, 8, 10]In [30]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;wb&apos;) # 打开一个文件In [31]: pickle.dump(my_list, pickle_file) # 序列化入这个文件In [32]: pickle_file.close()In [33]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;rb&apos;) # 打开文件In [34]: pickle.load(pickle_file) # 从一个文件加载回来Out[34]: [0, 2, 4, 6, 8, 10] 12345678910111213In [36]: import pickleIn [37]: list1 = [&apos;wxq&apos;, 11, 22,&apos;good&apos;]In [38]: dumpsed = pickle.dumps(list1)In [39]: type(dumpsed)Out[39]: builtins.bytesIn [40]: loadsed = pickle.loads(dumpsed)In [41]: loadsedOut[41]: [&apos;wxq&apos;, 11, 22, &apos;good&apos;]In [42]: type(loadsed)Out[42]: builtins.list json模块json是各语言通用的序列化数据交换格式，只支持序列化数据类型：str int float set dict list tuple JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输，并且可以直接在Web页面中读取，这也是为什么json这么通用的原因。 1234567891011121314import json# d=&#123;&quot;user&quot;:&quot;wxq&quot;&#125;## json_s=(json.dumps(d)) # 这里d是什么不管，json.dumps后是把d 序列化为符合json标准(只支持双引号)的字符串# json.loads(json_s) # json_s必须符合json双引号标准才能反序列化## json.loads(&quot;&#123;&apos;user&apos;:&apos;wxq&apos;&#125;&quot;) # 这里虽然是字符串，但里面是单引号，不符合json标准，会报错的json_s=json.dumps(&#123;&apos;user&apos;:&apos;wxq&apos;&#125;)# 可以看到这里传入的不是标准的(双引号)，但json_dumps后成为字符串&#123;&quot;user&quot;: &quot;wxq&quot;&#125;，是符合json标准(只支持双引号)的字符串。in javascriptJSON.stringfy() # 序列化JSON.parse() # 反序列化 logging模块python的logging模块提供了标准的日志接口，我们来看一下简单用法123456789101112root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;)root@apt:/tmp# python3 log.py WARNING:root:warning messageERROR:root:error message 上面的日志是直接输出，怎么才能让应用程序日志写入文件呢？ 也很简单定义一个log.py的文件12345678910111213root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50log_file = &apos;example.log&apos;logging.basicConfig(filename=log_file,level=logging.INFO)logging.debug(&apos;program debug message ...&apos;)logging.info(&apos;info message&apos;)logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;) 运行一下log.py文件12345root@apt:/tmp# python3 log.pyroot@apt:/tmp# cat example.log INFO:root:info messageWARNING:root:warning messageERROR:root:error message 我们注意到logging.debug信息并没有写入，为什么呢？因为level=logging.INFO定义要写入日志的日志级别，只有达到定义的日志级别才会记录。 但是发现记录的日志太丑了，怎么样才能让打印的日志人性化呢，就需要格式化输出。 格式 说明 %(name)s Logger的名字 %(levelno)s 数字形式的日志级别 %(levelname)s 文本形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名 %(funcName)s 调用日志输出函数的函数名 %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示 %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数 %(asctime)s 字符串形式的当前时间。默认格式是 “2017-02-01 16:49:45,896”。逗号后面的是毫秒 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 %(message)s 用户输出的消息 如果想同时把log打印在屏幕和文件日志里，或者有日志切割的需求，可能要复杂些 logger提供了应用程序可以直接使用的接口； handler将(logger创建的)日志记录发什么方式输出，是屏幕还是文件，或二都都要； filter提供了细度过滤来决定哪些日志不要输出，如密码敏感信息； formatter决定日志记录的最终输出格式。 logger工作原理图 屏幕和文件都输出123456789101112131415161718192021222324252627282930import logging #create loggerlogger = logging.getLogger(&apos;TEST-LOG&apos;)logger.setLevel(logging.DEBUG) # create console handler and set level to debugsh = logging.StreamHandler()sh.setLevel(logging.DEBUG)# create file handler and set level to warningfh = logging.FileHandler(&quot;access.log&quot;)fh.setLevel(logging.WARNING)# create formatterformatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)# add formatter to sh and fhsh.setFormatter(formatter)fh.setFormatter(formatter)# add ch and fh to loggerlogger.addHandler(sh)logger.addHandler(fh)# &apos;application&apos; codelogger.debug(&apos;debug message&apos;)logger.info(&apos;info message&apos;)logger.warn(&apos;warn message&apos;)logger.error(&apos;error message&apos;)logger.critical(&apos;critical message&apos;) 日志切割handlers.RotatingFileHandler：按文件大小切割handlers.TimedRotatingFileHandler： 按时间切割 示例1：1大小切割略 示例2：12345678910111213141516import loggingfrom logging import handlerlogger = logging.getLogger(__name__)log_file = &quot;timelog.log&quot;#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3)fh = handlers.TimedRotatingFileHandler(filename=log_file,when=&quot;S&quot;,interval=5,backupCount=3)formatter = logging.Formatter(&apos;%(asctime)s %(module)s:%(lineno)d %(message)s&apos;)fh.setFormatter(formatter)logger.addHandler(fh)logger.warning(&quot;test1&quot;)logger.warning(&quot;test12&quot;)logger.warning(&quot;test13&quot;)logger.warning(&quot;test14&quot;) 模块paramiko123456789`pycrypto-2.6.1.tar.gz`# 下载安装apt-get install python-devpython setup.py buildpython setup.py installimport Crypto`paramiko-1.10.1.tar.gz` 下载安装python setup.py buildpython setup.py installimport paramiko 模块configparser生成如下example.ini 文件，该如何做呢12345678910111213root@ubuntu:~# cat example.ini[DEFAULT]compression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes[bitbucket.org]user = wxq[topsecret.server.com]host port = 5000forwardx11 = no 编写如下脚本执行 python3 create_example.py即可 12345678910111213141516171819root@ubuntu:~# cat create_example.py #!/usr/bin/env python3#import configparserconfig = configparser.ConfigParser()config[&quot;DEFAULT&quot;] = &#123;&apos;ServerAliveInterval&apos;: &apos;45&apos;, &apos;Compression&apos;: &apos;yes&apos;, &apos;CompressionLevel&apos;: &apos;9&apos;&#125;config[&apos;bitbucket.org&apos;] = &#123;&#125;config[&apos;bitbucket.org&apos;][&apos;User&apos;] = &apos;wxq&apos;config[&apos;topsecret.server.com&apos;] = &#123;&#125;topsecret = config[&apos;topsecret.server.com&apos;]topsecret[&apos;Host Port&apos;] = &apos;5000&apos; # mutates the parsertopsecret[&apos;Forwardx11&apos;] = &apos;no&apos; # same hereconfig[&apos;DEFAULT&apos;][&apos;Forwardx11&apos;] = &apos;yes&apos;with open(&apos;example.ini&apos;, &apos;w&apos;) as configfile: config.write(configfile) 那么有了example.ini 这样的文件，如何读取呢12345678910111213141516171819202122&gt;&gt;&gt; import configparser # 导入模块&gt;&gt;&gt; config = configparser.ConfigParser() # 类实例化&gt;&gt;&gt; config.sections() # 调用类中一个方法[]&gt;&gt;&gt; config.read(&apos;example.ini&apos;) # 文件读入[&apos;example.ini&apos;]&gt;&gt;&gt; config.sections() # 除了[DEFAULT]还有哪些区块，列表呈现[&apos;bitbucket.org&apos;, &apos;topsecret.server.com&apos;]&gt;&gt;&gt; &apos;bitbucket.org&apos; in configTrue&gt;&gt;&gt; config[&apos;bitbucket.org&apos;][&apos;user&apos;] # 指定区块指定字典键对应值&apos;wxq&apos;&gt;&gt;&gt; config[&apos;DEFAULT&apos;][&apos;compression&apos;]&apos;yes&apos;&gt;&gt;&gt; for i in config[&apos;bitbucket.org&apos;]: # 指定区块打印键... print(i) # 注意：包括[DEFAULT]区块的键也在这里呈现... usercompressionserveraliveintervalcompressionlevelforwardx11 123456789&gt;&gt;&gt; d1 = config[&apos;bitbucket.org&apos;] # 指定区块读出其实是一个字典&gt;&gt;&gt; for k,v in d1.items():... print(&quot;%s = %s&quot; % (k,v))... user = wxqcompression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes 12345678910111213141516171819202122232425root@ubuntu:~# cat wxq.txt # 有这么一个文件[section1]k1 = v1k2: v2[section2]k1 = v111&gt;&gt;&gt; import configparser&gt;&gt;&gt; config = configparser.ConfigParser()&gt;&gt;&gt; config.read(&apos;/root/wxq.txt&apos;) # 读入这样的文件[&apos;/root/wxq.txt&apos;]&gt;&gt;&gt; config.sections() # 查看这个文件的区块[&apos;section1&apos;, &apos;section2&apos;]&gt;&gt;&gt; config.items(&apos;section1&apos;) # 查看指定区块的键值对[(&apos;k1&apos;, &apos;v1&apos;), (&apos;k2&apos;, &apos;v2&apos;)]&gt;&gt;&gt; config.options(&apos;section1&apos;) ＃ 只显示指定区块的键[&apos;k1&apos;, &apos;k2&apos;]&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 判断某区块是否存在返回True/FalseFalse&gt;&gt;&gt; config.add_section(&apos;section3&apos;) # 添加一个区块&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 有了这个区块True&gt;&gt;&gt; config.set(&apos;section3&apos;, &apos;k1&apos;, &apos;v1&apos;) ＃ 添加一行配置，也就是设置一个区块的键值对&gt;&gt;&gt; config.write(open(&apos;wxq&apos;, &apos;w&apos;)) 12345678910root@ubuntu:~# cat wxq # 按照上面的写入会生成了一个新文件[section1]k1 = v1k2 = v2[section2]k1 = v111[section3]k1 = v1 123456&gt;&gt;&gt; config.remove_option(&apos;section3&apos;, &apos;k1&apos;) # 删除某键值对True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;))&gt;&gt;&gt; config.remove_section(&apos;section3&apos;) # 删除某区块True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;)) 模块MySQLdbpython连接数据库操作 建立数据库连接 创建游标cursor(用于发送sql语句，获取sql结果，解析返回结果) 关闭游标cursor curname.close() 关闭数据库连接 conname.close() 模块安装apt-get install python-mysqldb查看模块help(‘modules’)加载数据库模块import MySQLdb as mysql 创建连接，会生成一个con.cursor()的类con = mysql.connect(host=’127.0.0.1’,user=’root’,passwd=’dbpass’) 游标类实例化cur = con.cursor() cur.execute 传入一个参数执行sql语句cur.executemany 传入多个参数执行sql语句 cur.fetchall 查询执行后的结果返回所有cur.fetchmany查询执行后的结果返回多个cur.fetchone 查询执行后的结果返回一个游标回滚help(cur.scroll)scroll(self, value, mode=’relative’) cur.scroll(0,mode=’absolute’) hashlib模块用于加密相关操作，3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法123456789import hashlibstr = hashlib.sha1(b&apos;admin123&apos;) # python3中必须bytes格式str.hexdigest()&apos;f865b53623b121fd34ee5426c792e5c33af8c227&apos;str = hashlib.md5(b&apos;admin123&apos;)str.hexdigest()&apos;0192023a7bbd73250516f069df18b500&apos; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import hashlib m = hashlib.md5()m.update(b&quot;Hello&quot;)m.update(b&quot;It&apos;s me&quot;)print(m.digest())m.update(b&quot;It&apos;s been a long time since last time we ...&quot;) print(m.digest()) #2进制格式hashprint(len(m.hexdigest())) #16进制格式hash&apos;&apos;&apos;def digest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of binary data. &quot;&quot;&quot; pass def hexdigest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of hexadecimal digits. &quot;&quot;&quot; pass &apos;&apos;&apos;import hashlib# ######## md5 ########hash = hashlib.md5()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha1 ########hash = hashlib.sha1()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha256 ########hash = hashlib.sha256()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha384 ########hash = hashlib.sha384()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha512 ########hash = hashlib.sha512()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密1234import hmach = hmac.new(b&apos;wxq&apos;)h.update(b&apos;hi&apos;)print(h.hexdigest()) 来个实用例子：注意：bytes只接收ascii的值，字符串为unicode,需转为ascii样的值，比如utf-8 1234567891011121314151617root@wxq:~# cat md5.py #!/usr/bin/env python3import hashlibimport timedef create_md5(): m = hashlib.md5() m.update(bytes(str(time.time()),encoding=&apos;utf-8&apos;)) return m.hexdigest()res = create_md5()print(res)root@wxq:~# python3 md5.py ebd8a4dd680e2e29b1a44b27b2bdd2f7root@wxq:~# python3 md5.py 4e178ffe5eaa58584434d3b519708638 更多关于md5,sha1,sha256等介绍的文章.看这里 模块uuid直接来个例子：12345678910root@wxq:~# cat create_uuid.py #!/usr/bin/env python3import uuiddef create_uuid(): return (str(uuid.uuid1()))res = create_uuid()print(res)root@wxq:~# python3 create_uuid.py 2cad772c-fe7d-11e6-b3db-3a71234db8d2 模块md512345678910111213#password=form.cleaned_data[&apos;password&apos;]from utils import md5form.cleaned_data[&apos;password&apos;]=md5(form.cleaned_data[&apos;password&apos;])app01/utils/md.pyimport hashlibdef md5(text): m = hashlib.md5() m.update(text.encode(&apos;utf-8&apos;)) # python3接收bytes格式，encode后就是bytes return m.hexdigest()if __name__ == &apos;__main__&apos;: text=&apos;123&apos; return md5(text) update可以执行多次，效果一样123m.update(b&quot;hello &quot;)m.update(b&quot;world&quot;)等同于m.update(b&quot;hello world&quot;) 模块模块模块","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-01-列表解析_生成器_迭代器","slug":"python-05-01-列表解析-生成器-迭代器","date":"2017-02-18T02:53:38.000Z","updated":"2018-02-06T05:22:07.452Z","comments":true,"path":"2017/02/18/python-05-01-列表解析-生成器-迭代器/","link":"","permalink":"http://www.digmyth.com/2017/02/18/python-05-01-列表解析-生成器-迭代器/","excerpt":"","text":"目录 列表解析 生成器 迭代器 列表解析什么是列表解析？定义： 基于一个列表生成另外一个列表，或动态生成一个列表。如：12345In [26]: [ i ** 2 for i in range(2,8)] # 对原列表乘以2Out[26]: [4, 9, 16, 25, 36, 49]In [25]: [ i for i in range(1,10) if i % 2 ] # 对原列表取奇数Out[25]: [1, 3, 5, 7, 9] 练习1： 有如下文件123# cat word.txtrender practice inventory indent accelerate,trigger status,wxq. 我们计算word.txt单词个数1234567891011In [29]: f = open(&apos;/root/word.txt&apos;, &apos;r&apos;)In [31]: word_list = [ word for line in f for word in line.split() ]In [36]: print(word_list)[&apos;render&apos;, &apos;practice&apos;, &apos;inventory&apos;, &apos;indent&apos;, &apos;accelerate,&apos;, &apos;trigger&apos;, &apos;status,wxq.&apos;]In [37]: f.seek(0) # 上面读取过文件，指针己然在最后了，这里是把指针移到文件首部Out[37]: 0In [38]: len([ word for line in f for word in line.split() ]) # 计算结果为7Out[38]: 7 我们计算word.txt非空白字符数12345In [37]: f.seek(0) # 把指针移到文件首部Out[37]: 0In [41]: sum([ len(word) for line in f for word in line.split() ])Out[41]: 58 练习2： 打印一个3行5列的矩阵123In [45]: list1 = [ (x+1, y+1) for x in range(3) for y in range(5) ]In [47]: print(list1)[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)] 练习3：123&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()][&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;] 练习4：1234In [61]: L = [&apos;I&apos;, &apos;WILL&apos;, &apos;STUDY&apos;, &apos;HARD&apos;, &apos;PYTHON&apos;]In [62]: [ s.capitalize() for s in L ]Out[62]: [&apos;I&apos;, &apos;Will&apos;, &apos;Study&apos;, &apos;Hard&apos;, &apos;Python&apos;] 生成器列表解析会创建完整列表占用内存，那么有没有一种算法或机制让我们循环使用时推算出后续元素，这样节省了内存空间。定义：这种边循环边计算的机制，称为生成器generator 创建一个生成器，其中一个方法就是把前面的列表解析[] 换成()123456789101112131415161718192021222324In [107]: g = (i for i in range(4))In [108]: gOut[108]: &lt;generator object &lt;genexpr&gt; at 0x7f98a27ba150&gt;In [117]: g.send(None) Out[117]: 0In [118]: g.send(None)Out[118]: 1In [119]: next(g)Out[119]: 2In [120]: next(g)Out[120]: 3In [122]: next(g)---------------------------------------------------------------------------StopIteration Traceback (most recent call last)&lt;ipython-input-122-5f315c5de15b&gt; in &lt;module&gt;()----&gt; 1 next(g)StopIteration: 利用yield创建一个生成器，取出完整元素需要用for 循环来迭代1234567891011In [123]: def genNum(x): .....: i = 0 .....: while i &lt; x: .....: yield i .....: i += 1 In [124]: g = genNum(5)In [136]: for i in g: .....: print(i, end=&apos; &apos;) .....: 0 1 2 3 4 来看一下yield工作细节1234567891011121314151617In [138]: def consumer(): .....: print(&quot;yield starting&quot;) .....: m = yield 5 .....: print(&quot;m_values: %s&quot; % m) .....: n = yield 12 .....: print(&quot;Game over&quot;) .....: In [139]: c = consumer()In [140]: c.send(None)yield startingOut[140]: 5In [141]: c.send(&apos;to be brave&apos;)m_values: to be braveOut[141]: 12 小结: c.send(None)遇到第一个yield停止，在解释器中out yield中的值，在python yield.py却不会. c.send(‘to be brave’)会上次中止处继续，’to be brave’会赋值给yield 5,即m = ‘to be brave’, 遇到第二个yield停止. g.send(None)启动迭代器，遇到第一个yield返回.1234567891011121314151617root@apt:~/script_study# cat yield.py #!/usr/bin/env python3#def h(): print(&quot;yield starting&quot;) m = yield 5 print(&quot;m_values: %s&quot; % m) d = yield 12 print(&apos;Game over&apos;) c = h()# print test infoc.send(None)c.send(&apos;Fighting!&apos;)root@apt:~/script_study# python3 yield.py yield startingm_values: Fighting! 后面协程正是用的这个知识点。 迭代器细心的朋友不难发现生成器可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值为止。 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator 可以直接作用于for循环的对象统称为可迭代对象：Iterable 哪些是可迭代对象呢？或说可作用于for循环呢？有以下几种数据类型： 一类是集合数据类型，如list、tuple、dict、set、str等； 一类是generator，包括生成器和带yield的generator function。 可以使用isinstance()判断一个对象是否是Iterable对象：1234567891011&gt;&gt;&gt; from collections import Iterable&gt;&gt;&gt; isinstance([], Iterable)True&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)True&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable)True&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)True&gt;&gt;&gt; isinstance(100, Iterable)False 可以使用isinstance()判断一个对象是否是Iterator对象：123456789&gt;&gt;&gt; from collections import Iterator&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)True&gt;&gt;&gt; isinstance([], Iterator)False&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)False&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterator)False 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。 把list、dict、str等Iterable变成Iterator可以使用iter()函数：1234&gt;&gt;&gt; isinstance(iter([]), Iterator)True&gt;&gt;&gt; isinstance(iter(&apos;abc&apos;), Iterator)True 为什么list、dict、str等数据类型不是Iterator 呢？ 这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。 Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。 Python的for循环本质上就是通过不断调用next()函数实现的，例如： for x in [1, 2, 3, 4, 5]: pass实际上完全等价于：12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break 总结1234567凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。迭代器：能够作用于next()函数，不断向后返回值，称为迭代器 iter([1,2,3,4])生成器：yield返回，并且可以next(),是一种特殊的迭代器可迭代对象：一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个类的对象就是可迭代对象，可for循环","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-01-开发入门","slug":"web-01-开发入门","date":"2017-02-15T12:51:41.000Z","updated":"2018-01-18T03:54:37.780Z","comments":true,"path":"2017/02/15/web-01-开发入门/","link":"","permalink":"http://www.digmyth.com/2017/02/15/web-01-开发入门/","excerpt":"","text":"前言从现在开始，此时此刻写点web开发和Django 的知识，便于以后查阅学习。廖雪峰老师的博客写得特别好，我也是摘抄参考其内容。廖雪峰老师博客原文 一. HTTP协议简介web历程web开发经历几个阶段1 静态页面: 直接由编辑器生成静态html2 CGI: 交互与动态数据处理出现了CGI（common gateway interface）,由C/C++编写3 脚本语言（ASP/JSP/PHP）: 脚本语言开发效率高，与html结合紧密4 框架：mvc mtv mvvm HTTP协议服务器把网页传给浏览器，实际上就是把网页的html代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议就是HTTP HTML是一种用来定义网页的文本，会HTML就会编写网页http是在网络上传输html的协议，用于浏览器和服务器的通信 Elements显示网页的结构，Network显示浏览器和服务器的通信。我们点Network，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信。 GET / HTTP/1.1： 注：1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐 当浏览器读取到新浪首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给新浪服务器，拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出一个完整的页面。所以我们在Network下面能看到很多额外的HTTP请求。 HTTP请求流程步骤1：浏览器向服务器发送http请求 方法：GET仅请求资源 POST 会附带用户数据body部份 路径; /full/url/path 域名： 步骤2：服务器向浏览器返回HTTP响应 响应代码：200表示成功 3** 表示重定向 4** 表示客户端发送的请求有错误 5** 表示服务器处理错误 响应类型： 由Content-Type指定 通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中 步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2 Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP请求中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源 HTTP协议同时具备极强的扩展性，虽然浏览器请求的是http://www.sina.com.cn/的首页，但是新浪在HTML中可以链入其他服务器的资源，比如&lt;img src=&quot;#url&quot;/&gt;，从而将请求压力分散到各个服务器上，并且一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称WWW。 二. HTML简介HTML是一种用来定义网页的文本，会HTML就会编写网页 。其它前端知识不在这里展开。略。。。 三 . WSGI接口了解了HTTP协议和HTML文档，我们其实就明白了一个Web应用的本质就是：浏览器发送一个HTTP请求；服务器收到请求，生成一个HTML文档；服务器把HTML文档作为HTTP响应的Body发送给浏览器；浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。 所以，最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。 如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。 正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。 这个接口就是WSGI：Web Server Gateway Interface。 WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”：123def application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 上面的application()函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数： environ：一个包含所有HTTP请求信息的dict对象；start_response：一个发送HTTP响应的函数。 在application()函数中，调用：start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])就发送了HTTP响应的Header，注意Header只能发送一次，也就是只能调用一次start_response()函数。start_response()函数接收两个参数，一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示。 通常情况下，都应该把Content-Type头发送给浏览器。其他很多常用的HTTP Header也应该发送。然后，函数的返回值b&#39;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#39;将作为HTTP响应的Body发送给浏览器。 有了WSGI，我们关心的就是如何从environ这个dict对象拿到HTTP请求信息，然后构造HTML，通过start_response()发送Header，最后返回Body。 整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，底层代码不需要我们自己编写，我们只负责在更高层次上考虑如何响应请求就可以了。 不过，等等，这个application()函数怎么调用？如果我们自己调用，两个参数environ和start_response我们没法提供，返回的bytes也没法发给浏览器。 所以application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器，我们可以挑选一个来用。但是现在，我们只想尽快测试一下我们编写的application()函数真的可以把HTML输出到浏览器，所以，要赶紧找一个最简单的WSGI服务器，把我们的Web应用程序跑起来。 好消息是Python内置了一个WSGI服务器，这个模块叫wsgiref，它是用纯Python编写的WSGI服务器的参考实现。所谓“参考实现”是指该实现完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用。 运行WSGI服务我们先编写hello.py，实现Web应用程序的WSGI处理函数：12345# hello.pydef application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 然后，再编写一个server.py，负责启动WSGI服务器，加载application()函数：12345678910111213# server.py# 从wsgiref模块导入:from wsgiref.simple_server import make_server# 导入我们自己编写的application函数:from hello import application# 创建一个服务器，IP地址为空，端口是8000，处理函数是application:httpd = make_server(&apos;&apos;, 8000, application)print(&apos;Serving HTTP on port 8000...&apos;)# 开始监听HTTP请求:httpd.serve_forever()确保以上两个文件在同一个目录下，然后在命令行输入python server.py来启动WSGI服务器：python server.py 执行程序启动 四 web 框架了解了WSGI框架，我们发现：其实一个Web App，就是写一个WSGI的处理函数，针对每个HTTP请求进行响应。 但是如何处理HTTP请求不是问题，问题是如何处理100个不同的URL。方法是一个函数处理一个URL, 我们专注于写业务处理函数，URL和函数对应关系交给web框架完成，这就是 web框架其中一个价值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-04-01-装饰器","slug":"python-04-01-装饰器","date":"2017-02-04T10:08:26.000Z","updated":"2017-03-01T12:12:35.805Z","comments":true,"path":"2017/02/04/python-04-01-装饰器/","link":"","permalink":"http://www.digmyth.com/2017/02/04/python-04-01-装饰器/","excerpt":"","text":"目录 装饰器 Python装饰器，英文decorator, 以被装饰函数作为参数对其装饰。这里会用到函数，我们可以像使用变量一样使用函数，函数有对象一致特性。 函数可以被赋值给其它变量 函数可以内部再定义函数 函数可以作为参数传递给另外一个函数 函数可以直接返回给外层函数 简单函数进行装饰有这么一个函数12def hello(): return &apos;hello world&apos; 我们想在不修改原函数的情况下，让函数返回特定标签1234def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper 我们定义了一个函数maketag(),该函数有一个参数func,这个参数必须是一个函数，内部又定义了一个wrapper()函数，并直接返回给maketag()123&gt;&gt;&gt; hello = maketag(hello) # 将 hello 函数传给 maketag&gt;&gt;&gt; hello()&apos;&lt;h&gt;hello world&lt;/h&gt;&apos; 上面我们把最初hello函数传给maketag()函数并将返回赋值给变量hello,此时调用hello得到我们想要的结果。注意： maketag()返回赋值给hello,hello函数本身还存在，但函数名引用己经变为了maketag返回函数的名称wrapper,不在是原来的hello,验证一下1234567In [6]: a = maketag(hello)In [8]: a.__name__Out[8]: &apos;wrapper&apos;In [9]: hello = maketag(hello)In [10]: hello.__name__Out[10]: &apos;wrapper&apos; 总结一下：为了增强原函数hello的功能定义了一个maketag函数，它接收一个函数作为参数，maketag返回一个新的函数赋值给一个变量hello,然后hello可直接调用。 一般情况下，我们使用装饰器提供的 @ 语法糖（Syntactic Sugar）来简化上面的写法：12345678def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 像上面的情况，可以动态修改函数（或类）功能的函数就是装饰器。本质上，它是一个高阶函数，以被装饰的函数（比如上面的 hello）为参数，并返回一个包装后的函数（比如上面的 wrapper）给被装饰函数（hello）。 单/多个装饰器的使用形式装饰器的一般使用形式如下：12345678@decoratordef func(): pass等价于下面的形式：def func(): passfunc = decorator(func) 装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如：12345678910@decorator_one@decorator_twodef func(): pass等价于：def func(): passfunc = decorator_one(decorator_two(func)) 看下多个装饰器的例子，为了简单起见，下面的例子就不使用带参数的装饰器。1234567891011121314def maketag1(func): def wrapper(): return &apos;&lt;html&gt;&apos; + func() + &apos;&lt;/html&gt;&apos; return wrapper def maketag2(func): def wrapper(): return &apos;&lt;i&gt;&apos; + func() + &apos;&lt;/i&gt;&apos; return wrapper@maketag1@maketag2def hello(): return &apos;hello world&apos; 上面定义了两个装饰器，对 hello 进行装饰，上面的最后几行代码相当于：12345678def hello(): return &apos;hello world&apos; hello = maketag1(maketag2(hello))调用函数 hello：&gt;&gt;&gt; hello() &apos;&lt;html&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/html&gt;&apos; 似乎理解深刻了：当多个装饰器时，离函数定义最近的装饰器先被调用 对带参数的函数进行装饰让被装饰函数带有参数，对前面例子中的 hello() 函数进行改写使其带参数，如下： 12345678910111213def maketag(func): def wrapper(*args, **kwargs): res = func(*args, **kwargs) return &apos;&lt;h&gt;&apos; + res + &apos;&lt;/h&gt;&apos; return wrapper@maketagdef hello(name): return &apos;hello %s&apos; % name @maketagdef hello2(name1=&apos;user1&apos;, name2=&apos;user2&apos;): return &apos;hello %s, %s&apos; % (name1, name2) 由于函数 hello 带参数，因此内嵌包装函数 wrapper 也做了一点改变： 内嵌包装函数的参数传给了 func，即被装饰函数，也就是说内嵌包装函数的参数跟被装饰函数的参数对应，这里使用了 (*args, **kwargs)，是为了适应可变参数。看看使用：1234&gt;&gt;&gt; hello1(&apos;python&apos;)&apos;&lt;h&gt;hello python&lt;/h&gt;&apos;&gt;&gt;&gt; hello2(&apos;python&apos;, &apos;java&apos;)&apos;&lt;h&gt;hello python, java&lt;/h&gt;&apos; 带参数的装饰器装饰器还可以带参数，比如：123456789@decorator(args1, args2)def func(): pass等价于：def func(): passfunc = decorator(args1, args2)(func) 我们想改用标签 &lt;html&gt;...&lt;/html&gt; 是不是要再定义一个装饰器呢？不必，其实我们可以装饰器外层再定义一个函数，将标签作为参数，返回一个装饰器，比如：12345678def outer_decorator(tag): # 外层函数参数传给装饰器 def decorator(func): # 真正的装饰器参数必然是被装饰器函数func def wrapper(*args, **kwargs): # 装饰器内层函数的参数是func的参数 res = func(*args, **kwargs) # 被装饰函数正常调用# return &apos;&lt;&apos; + tag + &apos;&gt;&apos; + res + &apos;&lt;/&apos; + tag + &apos;&gt;&apos; return &apos;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&apos;.format(tag=tag, res=res) return wrapper # 内层函数作返回值返回给装饰器 return decorator # 装饰器本身作为返回值返回给最外层函数 现在，我们可以根据需要生成想要的装饰器了：1234567outer_decorator = outer_decorator(&apos;html&apos;)@outer_decoratordef hello(name): return &apos;hello %s&apos; % name &gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 上面的形式也可以写得更加简洁：123@outer_decorator(&apos;html&apos;) # @语法糖syntactic sugardef hello(name): return &apos;hello, %s&apos; % name 这就是带参数的装饰器，其实就是在装饰器外面多了一层包装，根据不同的参数返回不同的装饰器。 基于类的装饰器前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子：12345678910111213class Deco_C(object): def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): return &apos;&lt;html&gt;&apos; + self.func(*args, **kwargs) + &apos;&lt;/html&gt;&apos;@Deco_Cdef hello(name): return &apos;hello %s&apos; % name&gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 可以看到，类 Deco_C 有两个方法： __init__()：它接收一个函数作为参数，也就是被装饰的函数__call__()：让类对象可调用，就像函数调用一样，在调用被装饰函数时被调用还可以让类装饰器带参数： 123456789101112131415class Tag(object): def __init__(self, tag): self.tag = tag def __call__(self, func): def wrapper(*args, **kwargs): return &quot;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&quot;.format(res=func(*args, **kwargs), tag=self.tag) return wrapper@Tag(&apos;html&apos;)def hello(name): return &apos;hello %s&apos; % name&gt;&gt; hello(&apos;, welcome&apos;)&apos;&lt;html&gt;hello, welcome&lt;/html&gt;&apos; 需要注意的是，如果类装饰器有参数，则 init 接收此参数，而 call 接收 func函数，并多了一层wrapper(*args, **kwargs)来接收func函数的参数。 装饰器的副作用前面提到装饰器有一个瑕疵，就是被装饰函数的函数名称已经不是原来的名称了，回到最开始的例子：12345678def maketagc(func): def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 函数 hello 被 maketag 装饰后，它的函数名称已经改变了：12&gt;&gt;&gt; hello.__name__&apos;wrapper&apos; 为了消除这样的副作用，Python 中的 functool 包提供了一个 wraps 的装饰器：1234567891011121314from functools import wrapsdef maketag(func): @wraps(func) # 加上 wraps 装饰器 def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos;&gt;&gt;&gt; hello.__name__&apos;hello&apos; 小结:本质上，装饰器就是一个有返回函数的高阶函数。装饰器可以动态地修改一个类或函数的功能，通过在原有的类或者函数上包裹一层修饰类或修饰函数实现。事实上，装饰器就是闭包的一种应用，但它比较特别，以被装饰函数为参数，并返回一个函数，赋给被装饰函数，闭包则没这种限制。 装饰器生产化进阶eg1:1234567891011121314def deco(func): def wrapper(x): print(&quot;what ...&quot;) func(x) print(&apos;Game over ...&apos;) return wrapper@decodef show(x): print(x)&gt;&gt;&gt;show(&quot;I am a pythoner&quot;)what ...I am a pythonerGame over ... eg2:","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Mysql 基础篇","slug":"mysql-基础篇","date":"2017-01-29T01:41:54.000Z","updated":"2017-11-19T10:00:09.447Z","comments":true,"path":"2017/01/29/mysql-基础篇/","link":"","permalink":"http://www.digmyth.com/2017/01/29/mysql-基础篇/","excerpt":"","text":"目录 知识扫盲 基础语句 主键、外键 修改表 分组与聚合 连表查询 其它查询 shell终端获取数据 数据库操作无非就是insert`deleteupdateselete,这篇博客对mysql`数据库语句做个总结记录便于学习 知识扫盲 什么是事务： 原子性操作(不可拆分)就是要么全成功，要么全失败。 mysql语句的注释符是 --，在SQL注入或别的场景中语句形如：username=”root” and 1 =1 – and password=’123’很明显 username=&quot;root&quot; and 1 =1将永远成立， and password=’123’ 部份将被注释，这点需要注意。 基础语句基础语句过于简单，这里就简单逻列下。 创建数据库1CREATE DATABASE db1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 创建一张表注意：auto_increment表示自增，primary key 表示id 这列为主键default charset utf8指定默认字符集engine=innodb指定因默认引警 1234create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 插入数据1insert into tb1(name,age) values(&apos;wxq&apos;,20),(&apos;pp&apos;,18); 更改数据1update tb1 set age=25 where name=&apos;wxq&apos;; 删除某条数据1delete from tb1 where id&gt;1; 删除表内所有数据12delete from 表名 # 不会删除自增序列truncate table 表名 # 会删除自增序列，再次插入数据将从0开始，删除更辙底 删除表1drop table tb1 主键12345主键create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 123456组合主键create table tb1( nid int not null, num int not null, primary key(nid,num) ) 外键1constraint fk_任意字符 foreign key (department_id自己字段) references department外面的表(nid外面表的字段) 12345678外键(约束):一对多 create table tb1( id int not null primary key, name char(32) null , age int not null, department_id int not null constraint fk_department_nid foreign key (department_id) references department(nid) ) 双向外键（约束）：多对对创建主机与部门之间的多对多关系12345678910111213141516create table host (id int not null auto_increatement primary key,host char(20) not null );create table department(id int not null auto_increatement primary key,title char(20) not null);create table de_2_host (id int not null auto_increatement primary key,hid int not null,did int not null,constraint fk_hid_host foreign key (hid) references host(id)，constraint fk_did_department foreign key (did) references department(id)) 修改表1234567891011121314151617添加列：alter table 表名 add 列名 类型删除列：alter table 表名 drop column 列名修改列： alter table 表名 modify column 列名 类型; -- 类型 alter table 表名 change 原列名 新列名 类型; -- 列名，类型 添加主键： alter table 表名 add primary key(列名);删除主键： alter table 表名 drop primary key; alter table 表名 modify 列名 int, drop primary key; 添加外键：alter table 从表 add constraint 外键名称（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);删除外键：alter table 表名 drop foreign key 外键名称 修改默认值：ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;删除默认值：ALTER TABLE testalter_tbl ALTER i DROP DEFAULT; 1234show variables like &apos;%char%&apos;; 查看整个mysql字符集show create table migrate_version; 查看表字符集alter table migrate_version character set utf8; 设置表字符集或者如下条：alter table migrate_version default character set utf8 collate utf8_general_ci; 分组与聚合group by - 对列进行聚合 sum(sid),max(sid),min(sid),count(sid) - 聚合条件过滤,having count(sid) &gt; 7 123456789分组 select num from 表 group by num select num,nid from 表 group by num,nid select num,nid from 表 where nid &gt; 10 group by num,nid order nid desc select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid select num from 表 group by num having max(id) &gt; 10 特别的：group by 必须在where之后，order by之前 连表查询示例1234select A.sid,A.sname,B.captionfrom student as A left join class as B on A.class_id = class.cid; left join 表名 on 多出的数据将会出现NULL数据 rigth join 表名 on 相对left 只是表位置变化，其它没有区别 inner join 表名 on 不会出现NULL数据，没有关联的数据将不会显示 1234567891011121314151617181920连表 无对应关系则不显示 select A.num, A.name, B.name from A,B Where A.nid = B.nid 无对应关系则不显示 select A.num, A.name, B.name from A inner join B on A.nid = B.nid A表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A left join B on A.nid = B.nid B表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A right join B on A.nid = B.nid 其它查询12345678910111213141516171819202122232425262728293031323334353637a、条件 select * from 表 where id &gt; 1 and name != &apos;wxq&apos; and num = 12; select * from 表 where id between 5 and 16; select * from 表 where id in (11,22,33) select * from 表 where id not in (11,22,33) select distinct name from 表 where id in (select nid from 表) # distinct重复数所将只显示一条 b、通配符 select * from 表 where name like &apos;wxq%&apos; - wxq开头的所有（多个字符串） select * from 表 where name like &apos;wx_&apos; - wx开头的所有（一个字符） c、限制 select * from 表 limit 5; - 前5行 select * from 表 limit 4,5; - 从第4行开始的5行 select * from 表 limit 5 offset 4 - 从第4行开始的5行 d、排序 select * from 表 order by 列 asc - 根据 “列” 从小到大排列 select * from 表 order by 列 desc - 根据 “列” 从大到小排列 select * from 表 order by 列1 desc,列2 asc - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序 e、组合 组合，自动处理重合 select nickname from A union select name from B 组合，不处理重合 select nickname from A union all select name from B shell终端获取数据下面介绍在shell终端获取mysql的几种方法 用法一：123456[root@mysql ~]# mysql -p123 -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+---------------+-------+| Variable_name | Value |+---------------+-------+| Uptime | 8025 |+---------------+-------+ 用法二：1234[root@mysql ~]# mysql -p123 -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+--------+------+| Uptime | 8029 |+--------+------+ 用法三：12[root@mysql ~]# mysql -p123 -s -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;Uptime 8037 用法四：12[root@mysql ~]# echo &quot;show global status where variable_name=&apos;uptime&apos;;&quot; | mysql -N -p123Uptime 8072 123456789# echo &quot;show databases;&quot; | mysql -h 127.0.0.1 -uroot -A -p123 | tail -n +2 | head -n 2 -A 表示不自动rehash tail -n +2 表示从第二行开始打印 head -n 2表示打印前2行# echo &quot;use nova01 ; show tables;&quot; | mysql -uroot -padmin# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock -e &quot;use nova01;show tables;&quot;# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock \\ -e &quot;grant all on *.* to user1@&apos;localhost&apos; identified by \\&quot;user1\\&quot;;&quot;","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"shell getopts语法","slug":"shell-getopts语法","date":"2017-01-29T01:41:54.000Z","updated":"2018-04-23T06:58:29.638Z","comments":true,"path":"2017/01/29/shell-getopts语法/","link":"","permalink":"http://www.digmyth.com/2017/01/29/shell-getopts语法/","excerpt":"","text":"Linux shell中getopts语法是一个很高级的语法，它能让你写出很漂亮的shell,来看个例子学习下 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu:~# cat getopts.sh #!/bin/bash# a: b: c: 表示脚本运行时接受选项&lt;-a options_1&gt; &lt;-b options_2&gt; &lt;-c options_3&gt;# first: 表示友好， 给出错误选项时尽量少的打印错误信息# OPTARG 表示选项给的值# OPTIND 表示选项指针（下一位）# 比如：(-a 指针为2) (-a a1 -b 指针为4) (-a a1 -b b1 -c c1指针为7)while getopts &quot;:a:b:c:&quot; OPT;docase $OPT in a) echo &quot;a is OPTARG: $OPTARG&quot; echo &quot;a is OPTIND: $OPTIND&quot; ;; b) echo &quot;b is OPTARG: $OPTARG&quot; echo &quot;b is OPTIND: $OPTIND&quot; ;; c) echo &quot;c is OPTARG: $OPTARG&quot; echo &quot;c is OPTIND: $OPTIND&quot; ;; *) echo &quot;Usage: $0 [-a arg1] [-b arg2] [-c arg3]&quot;esacdoneshift $(($OPTIND-1))echo &quot;\\$1 is: $1&quot;root@ubuntu:~# bash getopts.sh -a a1 -b b1 -c c1 test.sha is OPTARG: a1a is OPTIND: 3b is OPTARG: b1b is OPTIND: 5c is OPTARG: c1c is OPTIND: 7$1 is: test.sh","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"python-03-02-函数","slug":"python-03-02-函数","date":"2017-01-23T12:42:06.000Z","updated":"2017-02-20T10:41:23.378Z","comments":true,"path":"2017/01/23/python-03-02-函数/","link":"","permalink":"http://www.digmyth.com/2017/01/23/python-03-02-函数/","excerpt":"","text":"目录 函数概念 普通函数 匿名函数 递归函数 闭包 高阶函数 函数概念什么是函数 函数是python为了代码最大程度地重用和最小化代码冗余而提供的基本程序结构 函数是一种设计工具，它能让程序员将复杂的程序逻辑分解为可管理的部件 函数用于将相关功能打包并参数化，一个函数可以当参数传给变量或另一个函数 python自带有许多内置函数 在python有4种函数表现形式：1234全局函数： 定义在模块中局部函数：嵌套于其它函数中lambda函数：表达式，可以出现在任意表达式可以出现的地方(又称匿名函名)方法：定义在类中与特定数据类型关联的函数，并且只能与数据类型关联一起使用. 函数语法 函数代码表现12def functionName(parameters): 函数主体代码 相关概念def 是一个可执行语句,因此可以出现在任意语句可以出现的地方，甚至可以嵌套于其它if/while语句中def 创建了一个对象并将其赋值给一个变量名，也就是函数名return 用于返回结果对象,其为可选,无return语句时函数自动返回None对象,多个返回值时用逗号分隔，并组合为元组形式返回一个对象def 语句运行之后可以在程序中通过函数后附加括号的形式进行调用 普通函数函数传参内置函数官方 详解More info 动我试试 Built-in Functions abs() dict() help() main() setattr() all() dir() hex() next() slice() any() divmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod() bin() eval() int() open() str() bool() exec() isinstance() ord () sum() bytearray() filter() issubclass() pow() super() bytes() float() iter() print() tuple() callable() format() len() property() type() chr() frozenset() list() range() vars() classmethod() getattr() locals() repr() zip() compile() globals() map() reversed() __import__() complex() hasattr() max() round() delattr() hash() memoryview() set() 拿几个作下说明：123456789101112131415ASCII编码表查询：ord(&apos;a&apos;) 字符在编码表中的数字表示chr(97) 数字在编码表中的字符表示global() 查看全局变量locals() 查看局部变量vars() 无参数时等于locals(), 有参数时vars(a) == a.__dict__ (__dict__一个对象的属性)eval() 把字符串形式的表达式解析并扫行exec() 把字符串形式的代码解析并执行compile()把文件的代码加载进来，按 eval, exec方式解析并执行# 以字符串的形式导入模块, 后面模块章节也会讲到__import__()用法mode = &apos;module_name&apos;__import__(mode) 123456789101112131415161718192021222324all()与any()区别：all:传入一个可迭代对象，对其中每个元素求bool(x),所有返回True,则返回Tru迭代对象为空时返回True，注意是为空如[]，不是空元素如[&apos;&apos;]any:传入一个可迭代对象，对其中每个元素求bool(x),任意一个返回True，则返回True迭代对象为空时，返回Falsedef all(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True. &quot;&quot;&quot; passdef any(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for any x in the iterable. If the iterable is empty, return False. &quot;&quot;&quot; pass 匿名函数123In [31]: f = (lambda x,y,z=10: x+y+z) # 匿名函数也支持默认参数 In [32]: f(4,9)Out[32]: 23 123456In [56]: L = [ (lambda x: x*2),(lambda y: y*3) ] # 匿名函数可以出现在任意表达式可以出现的地方In [56]: for i in L: ....: print(i(4)) ....: 812 递归函数定义： 一个函数的自我循环调用称为递归 阶乘 123456&gt;&gt;&gt; def fact(x):... if x &lt;= 1: return 1... else: return x * fact(x-1)... &gt;&gt;&gt; fact(4)24 汉诺塔汉诺塔： 是一个传说，大概意思就是说把一个柱子上的盘子通过第二根柱子移到第三根柱子上。。未完。。。 123456789101112131415161718192021root@ubuntu:~# cat hanoi.py #!/usr/bin/env python3def move(n, a, b, c): if n == 1: print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) else: move(n-1, a, c, b) print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) move(n-1, b, a, c)n = int(input(&quot;input: &quot;))move(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)root@ubuntu:~# python3 hanoi.py input: 3move A --&gt; Cmove A --&gt; Bmove C --&gt; Bmove A --&gt; Cmove B --&gt; Amove B --&gt; Cmove A --&gt; C 斐波那契数列 123456789101112131415161718root@ubuntu:~# cat fibonacci.py #!/usr/bin/env python3def fibonacci(): a = b = 1 yield a yield b while True: a, b = b, a+b yield bfor num in fibonacci(): if num &gt; 100: break print(num, end=&apos; &apos;)print()root@ubuntu:~# python3 fibonacci.py 1 1 2 3 5 8 13 21 34 55 89 闭包python闭包：lexical closure函数及相关环境所构成的整体, 或者说一个函数(内层函数)和它所处的环境(外层函数)所构成的整体称为python闭包在这种情况下内层函数会记住外层函数的变量，在外层函数返回时内层函数依然可以调用 eg1123456789101112131415In [123]: def f1(x): .....: def f2(y): .....: return y ** x .....: return f2 # 内层函数直接返回 .....: In [124]: f = f1(3) # f1为f2提供运行环境，记住外部变量In [125]: f Out[125]: &lt;function __main__.f1.&lt;locals&gt;.f2&gt;In [126]: f(4)Out[126]: 64In [127]: f(5)Out[127]: 125 以上例子用匿名函数lambda简写成如下12345678In [129]: def f1(x): .....: return lambda y: y ** x .....: In [131]: f = f1(3)In [132]: f(6)Out[132]: 216 高阶函数定义： 一个函数当参数传递给另一个函数，我们就称这样的函数为高阶函数.装饰器/函数闭包: 是有返回函数的高阶函数，是高阶函数的特例 高阶函数 用法说明 map(func,seq1,seq2) 将函数func作用于给定序列(s)的每个元素，并用一个列表来提供返回值，如果func为None,func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组列表 reduce(func, seq, init) 将二元函数作用于seq序列的元素，每次携带一对(先前的结果以及下一个序列无素)，连续地将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为一个单一的返回值，如果初始值init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素 filter(func,seq) 调用一个布尔函数func来迭代遍历每个seq中的元素，返回一个使func返回值为True的元素组成的序列 map()map()将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回 一个序列时1234567In [143]: def f(x): .....: return x ** 2In [144]: res = map(f, [1,2,3,4]) # 根据说明这里返回结果是一个Iterator惰性序列In [145]: list(res) # 惰性序列需要通过list()函数让它把整个序列都计算出来并返回一个listOut[145]: [1, 4, 9, 16] 二个序列时每一次同时依次取一个序列的一个值，两个序列就有2个值，那么用传入的函数作用于这2个值返回一个值,最后这些值再以列表显现。1234567In [140]: def f(x,y): return y ** xIn [141]: res = map(f, [1,2,3], [4,5,6])In [142]: list(res)Out[142]: [4, 25, 216] reduce()python3中reduce函数在functools模块里,用时需要先导入 从初始值开始，对序列折叠123456In [39]: from functools import reduceIn [50]: def add(x,y): ....: return x+y ....: In [52]: reduce(add, [1,2,3], 10) # 10为初始值Out[52]: 16 如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：123456&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])13579 这个例子本身没多大用处，但是考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()就可以写出把str转换为int的函数： 123456789&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; def char2num(s):... return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]...&gt;&gt;&gt; reduce(fn, map(char2num, &apos;13579&apos;))13579 整理成一个str2int的函数就是：12345678from functools import reducedef str2int(s): def fn(x, y): return x * 10 + y def char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s] return reduce(fn, map(char2num, s)) 还可以用lambda函数进一步简化成：1234567from functools import reducedef char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]def str2int(s): return reduce(lambda x, y: x * 10 + y, map(char2num, s)) 也就是说，假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数. filter()Python内建的filter()函数用于过滤序列。filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。 例如，在一个list中，删掉偶数，只保留奇数，可以这么写：12345def is_odd(n): return n % 2 == 1list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))# 结果: [1, 5, 9, 15] 把一个序列中的空字符串删掉，可以这么写：12345def not_empty(s): return s and s.strip()list(filter(not_empty, [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, None, &apos;C&apos;, &apos; &apos;]))# 结果: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;] 可见filter()这个高阶函数，关键在于正确实现一个“筛选”函数, 这个函数必须是一个二元函数，返回True 或 False的函数 注意到filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。 用filter求素数 计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单： 首先，列出从2开始的所有自然数，构造一个序列： 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, … 取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：取新序列的第一个数5，然后用5把序列的5的倍数筛掉：不断筛下去，就可以得到所有的素数。 用Python来实现这个算法，可以先构造一个从3开始的奇数序列：12345def _odd_iter(): n = 1 while True: n = n + 2 yield n 注意这是一个生成器，并且是一个无限序列。 然后定义一个筛选函数：12def _not_divisible(n): return lambda x: x % n != 0 最后，定义一个生成器，不断返回下一个素数：1234567def primes(): yield 2 it = _odd_iter() # 初始序列 while True: n = next(it) # 返回序列的第一个数 yield n it = filter(_not_divisible(n), it) # 构造新序列 这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。 由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：123456# 打印1000以内的素数:for n in primes(): if n &lt; 1000: print(n) else: break 小结： filter()的作用是从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。 sorted()sorted()高阶函数用于排序 sorted()语法12sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order. 先来看一个例子：123456&gt;&gt;&gt; list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]&gt;&gt;&gt; sorted(list1, key=lambda x: x[&apos;age&apos;], reverse=False) [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] 这个例子也可以写成：12345678910In [174]: def f1(x): .....: return x[&quot;age&quot;] .....: In [175]: list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]In [176]: sorted(list1, key=f1)Out[176]: [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] list1这样的迭代对象取出一个值（一个一个的字典）给key函数处理后的结果作为排序依据，而后返回另一个排续后的对象. 列表自身有个sort()方法，和sorted()有什么区别呢？ 来看个例子：123456789101112In [66]: list1Out[66]: [1, 2, 3, 4, 5]In [67]: list1.sort() # sort()方法是在原有列表上排序，这是与sorted()高阶函数的区别In [68]: list1Out[68]: [1, 2, 3, 4, 5]In [69]: list1.sort(reverse=True) # reverse表示逆序In [70]: list1 Out[70]: [5, 4, 3, 2, 1] 区别就是sorted()会生成新的对象，而列表sort()不会，如下是按字母排序的例子：12In [173]: sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], key=str.lower)Out[173]: [&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-03-01-IO","slug":"python-03-01-IO","date":"2017-01-19T18:12:36.000Z","updated":"2017-02-20T10:30:30.882Z","comments":true,"path":"2017/01/20/python-03-01-IO/","link":"","permalink":"http://www.digmyth.com/2017/01/20/python-03-01-IO/","excerpt":"","text":"目录 文件对象 OS 对象 IO 编程文件对象文件对象用于访问系统文件的接口，文件系统是计算机存储数据，组织数据的方式。计算机文件是存储在设备中的一段数据流，归属于文件系统管理之下。是计算机中由OS管理的具有名字的存储区域，对Linux而言，文件可以被看作字节序列。 序列化的对象才能存储的文件系统中，非字节序列化的数据不能存储在文件系统中的。 文件对象接口不仅用于访问普通文件，还可以访问套接字文件，管道文件。在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。 open(name[,mode[,bufsize]]) 返回的是一个文件对象。这里三个参数分别表示文件名，文件打开模式和缓冲区大小 bufsize:定义输出缓存12340 表示无输出缓存,禁用缓冲1 表示使用缓冲，只缓冲一行数据负数表示使用系统默认设置2+之后的正数表示使用指定大小缓冲 open(‘/var/log/message’, ‘r’)简单模式，首次打开的文件指针于文件首部r: 只读w: 新建文件或文件首部覆盖写入。a: 尾部追加，即打开时指针处于文件尾部 在模式后使用+表示同时支输入输出操作r+ w+ a+ 在模式后附加 b 表示二进制方式打开rb wb+ 创建一个文件对象123&gt;&gt; f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [3]: type(f)Out[3]: _io.TextIOWrapper 只读模式打开一个不存在文件是不可以的1234567In [1]: f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)---------------------------------------------------------------------------FileNotFoundError Traceback (most recent call last)&lt;ipython-input-1-07bb2dbd474f&gt; in &lt;module&gt;()----&gt; 1 f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)FileNotFoundError: [Errno 2] No such file or directory: &apos;/tmp/abc&apos; 以写模式打开一个不存在文件，这个文件会自动被创建12345678In [3]: import osIn [7]: os.path.isfile(&apos;/tmp/f1&apos;)Out[7]: FalseIn [8]: f = open(&apos;/tmp/f1&apos;, &apos;w+&apos;)In [9]: os.path.isfile(&apos;/tmp/f1&apos;)Out[9]: True 查看一个文件的描述符，描述符是一个很小的数字表示，0表示标准输入，1表示标准输出，2表示标准错误输出它们所使用的描述符12In [20]: f.fileno()Out[20]: 8 f.readline() 读文件一行数据f.readlines() 读文件指针处至尾部所有数据包括行结束符\\n，一行为一个对象，然后多行多个对象组成一个列表 返回指针在当前文件中的位置，表示在多少个字节的位置。12In [23]: f.tell()Out[23]: 597 f.seek(offset, whence) offset:表示偏移多少个字节，whence表示从 多少节字数开始偏移。下面表示回到文件首部：12In [37]: f.seek(0)Out[37]: 0 f.read() 读取给定字节123456In [44]: f.seek(0)Out[44]: 0In [45]: f.read(10)Out[45]: &apos;# /etc/fst&apos;In [46]: f.tell()Out[46]: 10 12345678910In [57]: f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [58]: f.name #返回文件名Out[58]: &apos;/etc/fstab&apos;In [59]: f.closed #返回是否关闭文件Out[59]: FalseIn [60]: f.close() #关闭文件In [61]: f.closedOut[61]: True 操作完毕会自动关闭文件对象12with open(&apos;/root/wxq.txt&apos;,&apos;w+&apos;) as f: f.write(&apos;hello world!\\n&apos;) OS 对象一些方法123456789101112131415161718192021os.path 跟文件路径相关 basename() 路径基名 dirname() 路径目录名 join() split() 返回dirname(), basename()元组 splitext() 返回(filename, extension_name)元组 信息： getatime() getctime() getmtime() getsize() 获取文件大小查询： exists() 指定文件是否存在 isabs() 指定路径是否为绝对路径 isdir() 是否为目录 isfile() 是否为文件 islink() 是否为符号链接 ismount() 是否为挂载点 samefile() 两个路径是否指向了同一个文件 __file__属性 在上面的glabals()中有一个file属性，其中保存的是程序运行的相对路径，如python3 ../py3_training/test/yy.py，则路径为../py3_training/test/yy.py在pycharm中为什么又变成了绝对路径了呢，不要认为是pycharm做了封装，是因为pycharm运行路径永远从c:\\开始，这样看不出效果 要获取程序绝对路径os.path.abspath(file)应用举例：12345678910import osimport sysbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))print(base_dir)sys.path.append(base_dir)from core import mainif __name__ == &apos;__main__&apos;: main.run() 来几个小练习，似乎参悟了1234567891011121314&gt;&gt;&gt; import os&gt;&gt;&gt; os.path.split(&apos;/root/wxq.txt&apos;)(&apos;/root&apos;, &apos;wxq.txt&apos;)&gt;&gt;&gt; os.path.splitext(&apos;/root/wxq.txt&apos;)(&apos;/root/wxq&apos;, &apos;.txt&apos;)&gt;&gt;&gt; os.path.dirname(&apos;/root/wxq.txt&apos;)&apos;/root&apos;&gt;&gt;&gt; os.path.basename(&apos;/root/wxq.txt&apos;)&apos;wxq.txt&apos;&gt;&gt;&gt; dir, file_name = os.path.split(&apos;/root/wxq.txt&apos;)&gt;&gt;&gt; dir&apos;/root&apos;&gt;&gt;&gt; file_name&apos;wxq.txt&apos;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_02_流程控制/枚举","slug":"python-02-流程控制_枚举","date":"2017-01-15T05:03:41.000Z","updated":"2017-02-22T04:09:53.601Z","comments":true,"path":"2017/01/15/python-02-流程控制_枚举/","link":"","permalink":"http://www.digmyth.com/2017/01/15/python-02-流程控制_枚举/","excerpt":"","text":"目录 流程控制 三元表达式 枚举类 流程控制ifif 玩猜数字游戏123456789101112131415#!/usr/bin/env python3i = 0try_num = 3AGE = 27while i &lt; try_num: enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) i += 1 else: print(&quot;too smaller&quot;) i+=1 if成绩查询12345678910111213141516171819#!/usr/bin/env python3__author__ = &quot;wxq&quot;enter_score = int(input(&quot;enter your score :&quot;).strip())if enter_score &lt;=100 and enter_score &gt;=0: if enter_score &gt;=90: print(&quot;A&quot;) elif enter_score &gt;=80: print(&quot;B&quot;) elif enter_score &gt;=70: print(&quot;C&quot;) elif enter_score &gt;= 60: print(&quot;D&quot;) else: print(&quot;you are too low&quot;)else: print(&quot;invalid score&quot;) while这里主要注意与shell中的区别，python里while后有else, 即while语句正常执行完后才执行else中的语句，否则不会执行。1234567891011i = 0while i &lt;3: if i &gt;=2: break print(i) i += 1else: print(&apos;end&apos;) #结果01 来个小练习12345678910111213count1 = 0while True: if count1 == 10000000: break count1 += 1print(&quot;cost&quot;, time.time() - t1_start, count1)t2_start = time.time()count2 = 0while count2 &lt; 10000000: count2 += 1print(&quot;cose&quot;, time.time() - t2_start, count2) for 很懒什么也没有留下…1234567891011121314151617181920count = 3AGE = 27for i in range(100): if i &gt;3: enter=input(&quot;are you want to keep trying ....&quot;).strip() if enter == &quot;y&quot;: count = 0 else: break enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) else: print(&quot;too smaller&quot;) count +=1 continue/breakcontinue结束本次循环，提前进入下一轮循环break 直接终止循环 1234567891011121314151617181920212223242526272829#!/usr/bin/env python3__author__ = &quot;wangxiaoqiang&quot;for i in range(10): if i == 5: for j in range(10): if j == 8: break print(&quot;inner loop&quot;,j) continue print(&quot;loop&quot;,i)结果：loop 0loop 1loop 2loop 3loop 4inner loop 0inner loop 1inner loop 2inner loop 3inner loop 4inner loop 5inner loop 6inner loop 7loop 6loop 7loop 8loop 9 三元表达式三元表达式很简单， 这里来几个小例子就明白了 条件满足为1，否则为False12n [44]: 1 if True else FalseOut[44]: 1 成员关系判断，条件满足为True, 否则为False12345In [53]: True if 1 in [1,2,3] else FalseOut[53]: TrueIn [54]: True if 0 in [1,2,3] else FalseOut[54]: False 12345In [45]: a = 10In [46]: b = 15In [47]: a if a&gt;b else bOut[47]: 15 枚举类枚举 enumerate, 在用到index和value对应关系时能用到enumerate函数，参数为可遍历对象（字符串，列表等），返回多个元组123456789101112In [3]: for i in enumerate(&apos;abc&apos;): ...: print(i) ...: (0, &apos;a&apos;)(1, &apos;b&apos;)(2, &apos;c&apos;)In [43]: for index,i in enumerate(&apos;abc&apos;, 10): ....: print(index,i) ....: 10 a11 b12 c 1234In [4]: a = enumerate(&apos;abc&apos;)In [5]: list(a)Out[5]: [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] 1234567891011121314151617181920In [6]: import stringIn [7]: s = string.ascii_uppercaseIn [8]: E = enumerate(s)In [9]: sOut[9]: &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;In [10]: list(E)Out[10]: [(0, &apos;A&apos;), (1, &apos;B&apos;),此处略...In [11]: for i in E: ....: print(i, end=&apos; &apos;) ....: In [12]: E = enumerate(s)In [13]: for i in E: print(i, end=&apos; &apos;) ....: (0, &apos;A&apos;) (1, &apos;B&apos;) (2, &apos;C&apos;) (3, &apos;D&apos;) (4, &apos;E&apos;) (5, &apos;F&apos;) (6, &apos;G&apos;) (7, &apos;H&apos;) (8, &apos;I&apos;) (9, &apos;J&apos;) (10, &apos;K&apos;) (11, &apos;L&apos;) (12, &apos;M&apos;) (13, &apos;N&apos;) (14, &apos;O&apos;) (15, &apos;P&apos;) (16, &apos;Q&apos;) (17, &apos;R&apos;) (18, &apos;S&apos;) (19, &apos;T&apos;) (20, &apos;U&apos;) (21, &apos;V&apos;) (22, &apos;W&apos;) (23, &apos;X&apos;) (24, &apos;Y&apos;) (25, &apos;Z&apos;) 枚举类用法int 常量默认从1开始，我们来看个例子 1234567891011121314151617181920212223242526272829In [16]: from enum import EnumIn [17]: Month = Enum(&apos;Month&apos;, (&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;))In [19]: print(Month.January)Month.JanuaryIn [20]: print(Month[&apos;January&apos;])Month.JanuaryIn [21]: print(Month[&apos;January&apos;].value)1In [22]: print(Month(4))Month.AprilIn [24]: for name, members in Month.__members__.items(): print(&quot;%s =&gt; %s =&gt; %s&quot; % (name, members, members.value)) ....: January =&gt; Month.January =&gt; 1February =&gt; Month.February =&gt; 2March =&gt; Month.March =&gt; 3April =&gt; Month.April =&gt; 4May =&gt; Month.May =&gt; 5June =&gt; Month.June =&gt; 6July =&gt; Month.July =&gt; 7August =&gt; Month.August =&gt; 8September =&gt; Month.September =&gt; 9October =&gt; Month.October =&gt; 10November =&gt; Month.November =&gt; 11December =&gt; Month.December =&gt; 12 自定义枚举类（自定义int常量从0开始）@unique帮助我们检查没有重复值 12345678910111213141516171819202122232425262728293031323334353637In [29]: from enum import Enum, uniqueIn [30]: @unique ....: class Myday(Enum): ....: Sun = 0 ....: Mon = 1 ....: Tue = 2 ....: Wed = 3 ....: Thu = 4 ....: Fri = 5 ....: Sat = 6 ....: In [31]: Myday.FriOut[31]: &lt;Myday.Fri: 5&gt;In [32]: print(Myday.Fri)Myday.FriIn [33]: print(Myday.Fri.value)5In [34]: print(Myday[&apos;Fri&apos;])Myday.FriIn [35]: print(Myday(5))Myday.FriIn [37]: for name, members in Myday.__members__.items(): ....: print(&quot;%s, %s, %s&quot; % (name, members, members.value)) ....: Sun, Myday.Sun, 0Mon, Myday.Mon, 1Tue, Myday.Tue, 2Wed, Myday.Wed, 3Thu, Myday.Thu, 4Fri, Myday.Fri, 5Sat, Myday.Sat, 6","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇下","slug":"python-01-基础篇下","date":"2017-01-09T02:37:13.000Z","updated":"2018-04-27T05:01:04.973Z","comments":true,"path":"2017/01/09/python-01-基础篇下/","link":"","permalink":"http://www.digmyth.com/2017/01/09/python-01-基础篇下/","excerpt":"","text":"目录 位运算 程序编码 用户交互 第四节 位运算123456位运算：&amp;与 ： 同位都为1则为1|或 ： 同位有1则为1^异或: 同位相异为1，相同为0&lt;&lt;n左移位： 左移n位(保留左位),右边补n个0&gt;&gt;n右移位： 右移n位(去掉右位),左边补n个0 &amp;运算:都为11234001100010111111100110001` |运算：或为1123001100010111111101111111 ^运算：相异为1123110011010111111110110010 &lt;&lt;3左移位：左边110保留121101000111010001000 &gt;&gt;3右移位：右边001不保留121101000100011010 第五节 程序编码bytes、str 区别python3 中bytes、str是有区别的 bytes/str的区别：bytes 是byte的序列，而str是unicode 序列 bytes并不能存储中文，需要先定义成str类型后encode()编码 之间的转换是编码，解码完成。 方式： b1 = str1.encode()/ b1.decode() 网络传输中都是用的bytes类型二进制进行传输（socket编程发送必须bytes类型） b（bytes）只能接收ASCII 的值 python3与大多数软件运行在内存中都是unicode编码 b表示方法(bytes)只能接收ASCII的值, 直接传的中文为字符串 unicode编码，一个unicode两个字节，一个汉字两个字节。 1234&gt;&gt;&gt; b1 = b&apos;hello world&apos; # bytes只能接收ASCII样的值&gt;&gt;&gt; b2 = b&apos;你好&apos; File &quot;&lt;stdin&gt;&quot;, line 1SyntaxError: bytes can only contain ASCII literal characters. 将中文转换为bytes (转为ASCII里面能支持的格式，默认为utf-8)123456&gt;&gt;&gt; b2 = &apos;你好&apos;.encode(&apos;utf-8&apos;)&gt;&gt;&gt; b3 = bytes(&apos;你好&apos;, encoding=&apos;utf-8&apos;)&gt;&gt;&gt; type(b2)&lt;class &apos;bytes&apos;&gt;&gt;&gt;&gt; b2b&apos;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd&apos; 看看下面的转换是否能领悟点什么12345678910&gt;&gt;&gt; test_str = &apos;你是最好的！&apos;&gt;&gt;&gt; test_b = test_str.encode() # 不指定时默认encode()成utf-8&gt;&gt;&gt; test_bb&apos;\\xe4\\xbd\\xa0\\xe6\\x98\\xaf\\xe6\\x9c\\x80\\xe5\\xa5\\xbd\\xe7\\x9a\\x84\\xef\\xbc\\x81&apos;&gt;&gt;&gt; for i in test_b:... print(i, end=&apos; &apos;)228 189 160 230 152 175 230 156 128 229 165 189 231 154 132 239 188 129&gt;&gt;&gt; for i in test_str:... print(i, end=&apos; &apos;)你 是 最 好 的 ！ 1234567891011121314root@ubuntu:~# cat utf-8.txt 我是最好的！root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt ϒˇخºõģ¡root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt &gt; gbk.txtroot@ubuntu:~# cat gbk.txtϒˇخºõģ¡&gt;&gt;&gt; f = open(&apos;gbk.txt&apos;, &apos;rb&apos;)&gt;&gt;&gt; test = f.read()&gt;&gt;&gt; testb&apos;\\xce\\xd2\\xca\\xc7\\xd7\\xee\\xba\\xc3\\xb5\\xc4\\xa3\\xa1\\n&apos;&gt;&gt;&gt; test.decode(&apos;gbk&apos;)&apos;我是最好的！\\n&apos;&gt;&gt;&gt; f.close() 编码总结编码过程： 任意unicode到bytes的过程解码过程： bytes到unicode的过程12345678910pycharm默认以UTF-8存数据到硬盘(unicode to UTF-8) 一个编码过程python3默认以UTF-8读数据到内存（UTF-8 to unicode） 一个解码过程#coding:utf-8 也是指明了用什么编码读数据到内存,一个解码过程#这里open虽然文件是UTF8存的，此时要以utf8读, utf8 to unicode， 是一个解码过程with open(&quot;test.txt&quot;,&apos;r&apos;,encoding=&apos;utf8&apos;) as f: f.read() python3字符串就是unicode, 任意unicode只要编码后就是bytes&apos;你好&apos;.encode(&apos;utf8&apos;) 第六节 用户交互for python2.xname = raw_input(“What is your name:”)for python3.xname = input(“What is your name:”)eg: 想要输入密码时不可见，可以利用getpass模块的getpass()方法12345678root@apt:/mnt# cat getp.py #!/usr/bin/env python3import getpasspwd = getpass.getpass(\"请输入密码：\")print(pwd)root@apt:/mnt# python3 getp.py 请输入密码：123","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇上","slug":"python-01-基础篇上","date":"2017-01-08T02:37:13.000Z","updated":"2018-04-27T04:57:42.337Z","comments":true,"path":"2017/01/08/python-01-基础篇上/","link":"","permalink":"http://www.digmyth.com/2017/01/08/python-01-基础篇上/","excerpt":"","text":"目录 python简介 python变量 数据类型 第一节 简介Python 简介 Python 安装More info: 官网 Python第一个程序斐波那契数列： 123456789# Python 3: Fibonacci series up to n&gt;&gt;&gt; def fib(n):&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; while a &lt; n:&gt;&gt;&gt; print(a, end=&apos; &apos;)&gt;&gt;&gt; a, b = b, a+b&gt;&gt;&gt; print()&gt;&gt;&gt; fib(1000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Python 注释单行注释：#多行注释：英文三引号 ‘’’‘’’say somethig‘’’有种特殊的用法,此时并非注释123456789101112131415161718192021root@apt:/mnt/proper# cat people_info.py #!/usr/bin/env python3name = input(\"your name: \").strip()age = input(\"your age: \").strip()salary = input(\"your money: \").strip()info = ''' -------- day day up ------------ name: %s age: %s salary: %s''' % (name, age, salary)print(info)root@apt:/mnt/proper# python3 people_info.py your name: wxq your age: 18your money: 5000 -------- day day up ------------ name: wxq age: 18 salary: 5000 Python代码长相123456789101112131415#!/usr/bin/env python3 # (1)程序起始行&quot;this is a test module&quot; # (2)模块文档(文档字符串)import os # (3)模块导入import sysdebug = True # (4)全局变量定义class FooClass(object): # (5)类定义 &quot;Foo class&quot; passdef func(*args, **kwargs): # (6)函数定义 &quot;test function&quot; foo = FooClass() if debug: print(&quot;run test()&quot;)if __name__ == &apos;__main__&apos;: # (7)主程序 func() 第二节 变量2.1 变量规范变量： 字母，数字，下划线且不能以数字开头，并系统己经引用的关键字不能为变量名关键字[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’,‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]1234In [2]: name = \"wxq\"In [3]: print(name)wxq 2.2 变量标准eg: age_of_name = ‘wxq’ #习惯上 AGE_OF_NAME = &quot;XX&quot; #常量 Age_Of_Name = &quot;XX&quot; #驼峰体 Age_of_name = &quot;xx&quot; #类名 第三节 数据类型3.1 数字int(整型)long(长整型) python3 中己经没有了float(浮点型)complex(复数) 3.2 布尔值True 1False 0 3.3 字符串不可变类型字符串常用功能：字符串拼接 join()方法： 用于指定字符把序列中的每一个元素连接起来1234In [11]: str = '_'In [12]: seq = ('a', 'b', 'c')In [13]: str.join(seq)Out[13]: 'a_b_c' 移除前后空白分割len()长度index()索引split()切片格式化输出% 格式化输出%s 字符串%d 数字%f 符点%r 原生字符串，不会对\\n \\t进行转换123In [5]: name = 'wxq'In [6]: print(\"hello, %s\" % name)hello, wxq 1234# 字符串.center()方法+颜色格式化输出In [22]: print(&quot;\\033[32;1m%s\\033[0m&quot; % &quot;wxq&quot;.center(50, &apos;-&apos;))-----------------------wxq------------------------ format 格式化输出12In [7]: \"&lt;&#123;tag&#125;&gt;&#123;str&#125;&lt;/&#123;tag&#125;&gt;\".format(tag='b', str='hello world')Out[7]: '&lt;b&gt;hello world&lt;/b&gt;' 3.4 列表可变类型name = [‘hello’, ‘world’]通过下标访问列表中元素，下标从0开始计数12345In [9]: name[0]Out[9]: 'hello'In [10]: name[-1]Out[10]: 'world' 列表常用操作：切片：取出多个元素追加插入修改删除扩展 3.5 字典python支持dictionary,采用key-value存储方式，在存放时根据key算出value的存放位置，这样取的时候根据key直接拿到value，这也说明了为什么字典查找速度比列表快的原因。 由于dict根据key来计算value的存储位置，就决定了dict的key必须是不可变对象，利于每次计算相同的key得出的相同的结果，这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变. 12345678910111213141516171819In [2]: dict_test = &#123;&#125;In [3]: for i in range(4): ...: k = &apos;f%s&apos; % (i+1) ...: v = &apos;v%s&apos; % i ...: dict_test[k] = v ...: In [4]: dict_testOut[4]: &#123;&apos;f1&apos;: &apos;v0&apos;, &apos;f2&apos;: &apos;v1&apos;, &apos;f3&apos;: &apos;v2&apos;, &apos;f4&apos;: &apos;v3&apos;&#125;In [5]: dict_test.get(&apos;f4&apos;)Out[5]: &apos;v3&apos;In [6]: for k,v in dict_test.items(): ...: print(k,v) ...: (&apos;f1&apos;, &apos;v0&apos;)(&apos;f2&apos;, &apos;v1&apos;)(&apos;f3&apos;, &apos;v2&apos;)(&apos;f4&apos;, &apos;v3&apos;) 3.6 元组3.7 集合可变集合集合：一组无序排列的可哈希的值，集合没有特定语法格式，使用工厂函数创建。支持： 支持集合关系测试：并集 支持成员关系测试：in /not in/迭代不支持： 索引,元素获取，切片 集合创建12345678&gt;&gt;&gt; set1 = set([1,2,3]) # 用set创建&gt;&gt;&gt; set1 &#123;1, 2, 3&#125;&gt;&gt;&gt; s1 = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125; # 或用&#123;&#125;创建&gt;&gt;&gt; s1&#123;&apos;b&apos;, &apos;c&apos;, &apos;a&apos;&#125;&gt;&gt;&gt; type(s1)&lt;class &apos;set&apos;&gt; 项目 描述 符号表示 len(s1) 返回s1项的长度 len(s1) s1.copy 制作s1的副本 s1.difference(s2) 求差集，返回所有在s1中，但不在s2中的项 s1 - s2 s1.intersection(s2) 求交集，返回所有同时在s1 s2中的项 s1 &amp; s2 s1.union(s2) 求并集，返回所有在s1或s2中的项 s1 l s2(竖线) s1.symmetric_differencee(s2) 求对称差集，返回所有在s1或s2中，但又不同时在s1 s2中的项，即并集减交集 s1 ^ s2 s1.isdisjoin(s2) 如果s1 s2没有相同项，则返回True s1.issubset(s2) 如果s1是s2的一个子集，则返回True s1.issuperset(s2) 如果s1是s2的一个父集，则返回True max(s1) 求最大值 max(s1) min(s1) 求最小值 min(s1) 3.8 集合forzent()可变集合","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"PyCharm基本使用-01","slug":"PyCharm基本使用-01","date":"2017-01-05T02:37:13.000Z","updated":"2018-04-23T06:58:15.230Z","comments":true,"path":"2017/01/05/PyCharm基本使用-01/","link":"","permalink":"http://www.digmyth.com/2017/01/05/PyCharm基本使用-01/","excerpt":"","text":"入门More info: 参考官网 下载123456789101112131415161718192021222324252627282930313233343536373839404142434445464748491 在Pycharm为你的python项目配置python解释器 Project当前项目名为&gt;&gt;Project Interpreter &gt;&gt; add Local2 在Pycharm下创建Python 文件，Python模块 File&gt;&gt;New&gt;&gt;Python file File &gt;&gt; New &gt;&gt; Python Package3 使用Pycharm安装python 三方模块 Project 当前项目名&gt;&gt; Project Interpreter &gt;&gt; 点击右侧绿色小加号4 Pycharm基本设置，例如不使用tab, tab=4空格，字体，字体颜色，主题，脚本设置，显示行号等， 如何导出入导入自定义设置 1 不使用tab,tab=4空格：Editor&gt;&gt;Code Style&gt;&gt;python 2 字体，字体颜色：Editor&gt; Color&amp;Fronts &gt;&gt; python 3 关闭自动更新：Apperance&amp; Behavior &gt; System Setting &gt;&gt; Updates 4 脚本关设置: Editor&gt;&gt; File and Code Templates &gt;&gt; Python Script 注：其它类似 5 显示行号： Editor&gt;&gt; Geratal &gt;&gt; Apperance &gt;&gt; Show Line number 注：2016.2默认显示行号 6 右侧坚线是PEP8的代码规范，提示一行不要超过120个字符 7 导出，导入你自定义的配置：File &gt;&gt; Export Settings, Import Settings5 常用快捷键，例如复制当前行，删除当前行，批量注释，缩进，查找和替换 1 常用快捷键的查询和配置：Keymap 1 Ctrl + D : 复制当前行 2 Ctrl + E : 删除当前行 3 Ctrl + Enter 快捷换行 4 Ctrl + / 快捷注释，（选中多行后可以批量注释） 5 Tab: 缩进当前行（选中多行后可以批量缩进） 6 Shift + Tab : 取消缩进（选中多行后可以批量取消缩进） 7 Ctrl + F: 查找 8 Ctrl + H : 替换 9 批量注释：ctrl + ?6 Pycharm安装插件，例如Markdown supprot,数据库支持插件等 1 Plugins &gt; Browse reposltories (下方三个按钮中间寻个)&gt;&gt; 搜索 markdown supprot &gt; Install 2 右上解View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览7 Git配置 ？ 1 需要本地安装好git 2 Version control &gt; git 3 配置了git等版本控制系统之后，可以很方便的diff查看文件的不同8 常用操作指南，例如复制文件路径，在文件管理中打开，快速定位，查看模块结构视图，tab批量换space ,TODO的使用 ， Debug的使用， 1 复制文件路径: 左侧文件列表右键选中的文 件&gt; Copy Path 2 在文件管理器中打开：右键选中的文件&gt;&gt;往下找到show In Explorer 3 快速定位： Ctrl + 某些内键模块之后，点击在源文件中展开 4 查看结构： IDE左侧边栏Structure 查看当前项目的结构 5 tab 批量换space: Editor &gt; Convert Indents 6 Todo的使用： #todo要记录的事情 7 tab页上右键 &gt;&gt; Move Right (Down) , 把当前Tab 页移到窗口右边（下边），方便对比 8 文件中右键 &gt;&gt;Local History 能够查看文件修改前后对比 9 IDE右下解能看到一些有用的信息，光标当前在第几行的基本几个字符，当前回车换行，当前编码类型 ， 当前git 分支 10 IDE 右侧边栏&gt;&gt; Database9 如何去掉烦人的波浪线？PEP8是什么？ 完","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"博客声明","slug":"declare","date":"2017-01-01T00:47:02.000Z","updated":"2018-04-23T05:58:42.174Z","comments":true,"path":"2017/01/01/declare/","link":"","permalink":"http://www.digmyth.com/2017/01/01/declare/","excerpt":"","text":". 公告 本博客属个人所有，不涉及商业用途，本人保留追究其法律责任的权利。本博客为个人随笔所写，内容大多取自网络或个人经验，包括老男孩、马哥、廖雪峰、林海峰、小甲鱼及Python开发者，纯为个人学习记录所用.按金庸武侠秘籍上说就是本博客纯属虚构，如有雷同，纯属巧合.. 如涉及版权问题及时联系作者 wxqnote@163.com","categories":[{"name":"声明","slug":"声明","permalink":"http://www.digmyth.com/categories/声明/"}],"tags":[]},{"title":"为什么写博客","slug":"为什么写博客","date":"2017-01-01T00:08:08.000Z","updated":"2018-04-23T05:56:37.662Z","comments":true,"path":"2017/01/01/为什么写博客/","link":"","permalink":"http://www.digmyth.com/2017/01/01/为什么写博客/","excerpt":"","text":". 关于作者欢迎大家来到个人博客,我来自成都无疑不幸与万幸是北漂IT engineer ! 尤如www.digmyth.com,一个想要遆造神话却总在路上的人。 . 一个选择至于为什么写博客，有很多原因, 一段时间，一个心境，一段经历，一个情怀。在一个适当的时间做适当的事，想要做的事，没有目的，如半夜突然起来想写下一段话，转身安然入睡。 . 认知时间时间对年轻人来说太快了，2016年己远去，2017年己来临,刚好2017年1月1日,此时成立博客也许是天时地利。各大互联网产品创业思路一是提供服务优化它人时间如知识产品，二是让它人上瘾拖住它的时间如微信朋友圈。会在不知不觉中时间己去，套用罗振宇跨年演讲上的一句话，有时你什么错都没有，你就是老了。可能是因为身处互联网圈的原因，信息发展太快着时让人有种焦虑感,让人很着急，告别了过去却抓不到未来。此时我要做的就是脚踏实地做自己正在做的事情，就会让自己很充实. . 共鸣共勉欲望勃发节奏飞速的当下，如果不能够保持淡定和从容，不具有宠辱不惊的修养，就很难拥有一颗平常恬淡的心境。更无法在纷乱中理清头绪，认清自我，认清形势，找准坐标，在反思中沉淀，在沉淀中积累,才不会迷失方向,才不会迷失自我。 越是浮躁越是保持淡定，越是功利越是要适度恬静.焦虑和躁动不仅会折损你的心智，更会戕害你的身体，经过了不平凡不寻常的年头，度过了最艰难的岁月,再大的风险和考验都可以轻轻的付之一笑.有定力的人才有希望，告别2016，迎来2017，善待自己，给自己的心灵除除尘，给自己的灵魂洗洗礼, 给自己多些淡定和从容. . 记录点滴记录一个想要遆造神话却总在路上的人的点滴，代表曾经来过，有些事我做过。。。","categories":[{"name":"生活","slug":"生活","permalink":"http://www.digmyth.com/categories/生活/"}],"tags":[]}]}