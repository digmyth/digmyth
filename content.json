{"meta":{"title":"Welcome to wxq's Blog created in 2017-01-01","subtitle":null,"description":null,"author":"wxq","url":"http://www.digmyth.com"},"pages":[],"posts":[{"title":"mongodb-01集群","slug":"mongodb-01集群","date":"2021-05-10T01:41:54.000Z","updated":"2021-06-10T09:14:24.081Z","comments":true,"path":"2021/05/10/mongodb-01集群/","link":"","permalink":"http://www.digmyth.com/2021/05/10/mongodb-01集群/","excerpt":"","text":"在mongodb集群中，只有主节点可以读写，其它节点可以提升为主节点后才能读写，从节点只能读安装mongo数据库12345678[root@node03 ~]# cat /etc/yum.repos.d/mongo.repo [mongodb-org-4.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.4.ascyum install -y mongodb-org 修改配置文件参与集群配置123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@node03 ~]# cat /etc/mongod.conf # mongod.conf# for documentation of all options, see:# http://docs.mongodb.org/manual/reference/configuration-options/# where to write logging data.systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log# Where and how to store data.storage: dbPath: /var/lib/mongo journal: enabled: true# engine:# wiredTiger:# how the process runsprocessManagement: fork: true # fork and run in background pidFilePath: /var/run/mongodb/mongod.pid # location of pidfile timeZoneInfo: /usr/share/zoneinfo# network interfacesnet: port: 27017 bindIp: 0.0.0.0 # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.#security:#operationProfiling:replication: # 开启复制集 replSetName: wxqset#sharding:## Enterprise-Only Options#auditLog:#snmp: 复制集集群基本步骤12345678910111 集群所有节点修改配置文件replSetName: testSet 并启动mongod2 在需要作为主节点的机器上 rs.initiate() 初始化配置3 在主节点上添加从节点 rs.add(&quot;192.168.1.10:27017&quot;)4 在从节点机器设置 rs.secondaryOk()， 用一些命令测试验证集群正常工作rs.status() show dbs;5 在从节点机器上添加数据测试验证同步情况 use db01; for (i=1;i&lt;=10000;i++) db.students.insert(&#123;name: &quot;student&quot;+i,age:(i%120),address:&quot;BJ&quot;&#125;)6 从节点进行查询验证 use db01; db.students.find().count() db.getCollectionNames() 查看集群状态123rs.help()rs.status()rs.conf() 以上三节点集群配置，如果在你的集群中资源较少并且其中一台主机不想参与集群复制，出于节省资源目的，那么可以让第三个节点成为Arbiter仲裁节点，因为偶数节点复制情况下，脑裂情况下无法选举出主节点。 那么在上面集群基础上踢除一个节点出来作为Arbiter仲裁节点在集群主节点上面执行踢除操作1rs.remove(&quot;10.10.10.30:27017&quot;) 回到仲裁节点1234[root@node03 ~]# cat /etc/mongod.conf | grep dbPath dbPath: /var/lib/mongo[root@node03 ~]# rm -rf /var/lib/mongo/*[root@node03 ~]# systemctl start mongod 再次回到主节点添加仲裁节点，并且可以在2个复制节点间主从切换测试了 123rs.addArb(&quot;10.10.10.30:27017&quot;)rs.status()rs.stepDown() # 降级为从节点 手动调整优先级触发选举，优先级高会变为主节点, 需要在主节点上操作 12345rs.conf() # 查看各节点IDcfg=rs.conf()cfg.members[ID].priority=8rs.reconfig(cfg)rs.isMaster() 总结什么情况下会触发选举1 副本集初始化时rs.initial()2 从节点联系不到主节点时3 主节点收到rs.stepDown()命令时（主节点下线）4 某从节点有更高的优先级且己经满足成为主节点的所有条件5 主节点己经联系不到副本集的多数方","categories":[{"name":"Mongodb","slug":"Mongodb","permalink":"http://www.digmyth.com/categories/Mongodb/"}],"tags":[]},{"title":"Ubuntu k8s for  docker","slug":"kubernetes-ubuntu-docker","date":"2021-04-28T12:21:41.000Z","updated":"2021-05-13T05:42:46.392Z","comments":true,"path":"2021/04/28/kubernetes-ubuntu-docker/","link":"","permalink":"http://www.digmyth.com/2021/04/28/kubernetes-ubuntu-docker/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"consul 基本使用","slug":"consul-01","date":"2021-03-25T01:38:08.000Z","updated":"2021-05-20T06:12:29.114Z","comments":true,"path":"2021/03/25/consul-01/","link":"","permalink":"http://www.digmyth.com/2021/03/25/consul-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"sysctl TCP优化","slug":"linux-sysctl","date":"2021-03-15T01:43:54.000Z","updated":"2021-04-15T05:37:59.492Z","comments":true,"path":"2021/03/15/linux-sysctl/","link":"","permalink":"http://www.digmyth.com/2021/03/15/linux-sysctl/","excerpt":"","text":"内核参数优化1234567891011echo 2048 &gt; /proc/sys/net/core/somaxconn 每一个端口最大的监听队列的长度echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled 关闭透明页功能vm.max_map_count=655350 限制一个进程可以拥有的VMA(虚拟内存区域)的数量fs.file-max = 65536 同时修改vim /etc/security/limits.conf* soft nofile 65536* hard nofile 65536* soft nproc 65535* hard nproc 65535* soft memlock unlimited* hard memlock unlimited 每保持一个TCP连接，进程就要创建一个文件对象，约占内存3.3KB，4GB内存可以维持长达100万条长连接，客户端发送数据的话，还得为TCP对象开启接收缓冲区，这就增大了内存开销, Linux系统里，系统级、用户级、进程级都有最大打开文件数限制 系统级： 当前系统可以打开的文件数，通过fs.file-max参数修改 用户级： 指定用 户可以打开的数量，通过/etc/security/limits.conf 进程级： 单个进程可以打开的数量，通过fs.nr_open参数修改 1234为每一个TCP连接Socket分配的最少字节数或说是接收缓冲区，默认4K，最大可设8MBnet.ipv4.tcp_rmem = 4096(为TCP连接分配的最少字节数) 87380 8388608net.core.rmem_default = 2129922net.core.rmem_max = 8388608 123net.ipv4.tcp_wmem= 4096(发送缓存区最小值，默认4K) 65536 8388608net.core.wmem_default = 212992net.core.wmem_max = 8388608 1ss -n | grep ESTAB |wc -l TCP活动连接数统计 12345678910111213[root@node03 ~]# slabtop 关注dentry/filp/TCP/sock_node_cache指标 Active / Total Objects (% used) : 3721737 / 4145714 (89.8%) Active / Total Slabs (% used) : 125168 / 125168 (100.0%) Active / Total Caches (% used) : 95 / 131 (72.5%) Active / Total Size (% used) : 821348.16K / 878889.63K (93.5%) Minimum / Average / Maximum Object : 0.01K / 0.21K / 8.00K OBJS ACTIVE USE OBJ SIZE SLABS OBJ/SLAB CACHE SIZE NAME 1928862 1578283 81% 0.10K 49458 39 197832K buffer_head448077 447905 99% 0.19K 21337 21 85348K dentry （指标1）298544 297412 99% 1.00K 18659 16 298544K filp（指标2）288966 288966 100% 0.04K 2833 102 11332K TCP（指标3）233070 233070 100% 0.12K 6855 34 27420K sock_node_cache（指标4） 总结慢慢积累吧","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s基于GitlabJenkinsCICD实现","slug":"kubernetes-gitlab-jenkins-CI","date":"2021-02-21T02:51:41.000Z","updated":"2021-04-24T14:10:25.467Z","comments":true,"path":"2021/02/21/kubernetes-gitlab-jenkins-CI/","link":"","permalink":"http://www.digmyth.com/2021/02/21/kubernetes-gitlab-jenkins-CI/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"calico bug","slug":"kubernetes-calico-bug","date":"2021-02-13T07:51:41.000Z","updated":"2021-03-02T08:15:51.878Z","comments":true,"path":"2021/02/13/kubernetes-calico-bug/","link":"","permalink":"http://www.digmyth.com/2021/02/13/kubernetes-calico-bug/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"prometheus","slug":"prometheus-01","date":"2021-01-25T00:48:08.000Z","updated":"2021-01-27T03:00:54.371Z","comments":true,"path":"2021/01/25/prometheus-01/","link":"","permalink":"http://www.digmyth.com/2021/01/25/prometheus-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"kubernetes dashboard","slug":"kubernetes-dashboard","date":"2021-01-15T12:51:41.000Z","updated":"2021-01-22T03:48:33.336Z","comments":true,"path":"2021/01/15/kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2021/01/15/kubernetes-dashboard/","excerpt":"","text":"重新疏理k8s dashboard安装github地址：https://github.com/kubernetes/dashboard 在线dashboard2.1 deployment清单文件1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml 默认type为ClusterIp即只能看到Service地址，需要穿透集群边界让外部进行访问方式有ingress、NodePort、外部LoadBalance、pod HostPort端口转发、pod HostNetwork 等方式，这里采用最简单的NodePort 修改recommended.yaml清单文件123456789101112131415kind: ServiceapiVersion: v1metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboardspec: ports: - nodePort: 30443 port: 443 targetPort: 8443 selector: k8s-app: kubernetes-dashboard type: NodePort 或者跑起来后再直接修改svc/kubernetes-dashboard1kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard # type: NodePort 按你的需要添加单独的NameSpace12345678root@k8s-m:/data/dashboard# kubectl create namespace admin-ns --dry-run=client -o yamlapiVersion: v1kind: Namespacemetadata: creationTimestamp: null name: admin-nsspec: &#123;&#125;status: &#123;&#125; 按你的需要添加kubernetes-dashboard123456789root@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-nsserviceaccount/superadmin createdroot@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-ns --dry-run=client -o yamlapiVersion: v1kind: ServiceAccountmetadata: creationTimestamp: null name: superadmin namespace: admin-ns 创建一个clusterrolebinding,让内置的集群管理员角色--clusterrole=cluster-admin与刚创建的serviceaccount绑定1234567891011121314root@k8s-m:/data/dashboard# kubectl create clusterrolebinding superadmin --clusterrole=cluster-admin --serviceaccount=admin-ns:superadmin --dry-run=client -o yamlapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: creationTimestamp: null name: superadminroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: superadmin namespace: admin-ns 获取Token登录1234567891011121314151617181920212223root@k8s-m:/data/dashboard# kubectl describe sa/superadmin -n admin-nsName: superadminNamespace: admin-nsLabels: &lt;none&gt;Annotations: &lt;none&gt;Image pull secrets: &lt;none&gt;Mountable secrets: superadmin-token-gtrj5Tokens: superadmin-token-gtrj5Events: &lt;none&gt;root@k8s-m:/data/dashboard# kubectl describe secret/superadmin-token-gtrj5 -n admin-nsName: superadmin-token-gtrj5Namespace: admin-nsLabels: &lt;none&gt;Annotations: kubernetes.io/service-account.name: superadmin kubernetes.io/service-account.uid: 339d914d-3ae8-440a-a590-4a304400ef17Type: kubernetes.io/service-account-tokenData====token: eyJhbGciOiJSUzI1NiIsImtpZCI6InZk--xxx # Token字段ca.crt: 1066 bytesnamespace: 8 bytes 界面自带CPU、内存监控图，只是数据是来源于Metrics Server, 需要部署MetricsServer才能展示，如果后期要部署kube-prometheus 就不需要单独部署Metrics Server，因为它己经集成了 metrics-server github 地址： https://github.com/kubernetes-sigs/metrics-server 在线清单文件部署1kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml 发现老是无限重启，说是就绪性探测和存活性探测有问题，我这里换换镜像以及添加2个参数好了其实根源https TLS问题1234567891011121314151617181920212223242526272829spec: hostNetwork: true serviceAccountName: metrics-server containers: - name: metrics-server image: bitnami/metrics-server:0.4.1 # 可以尝试更换官方镜像 #image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1 imagePullPolicy: IfNotPresent args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-insecure-tls # 禁用https - --kubelet-use-node-status-port - --kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname # 添加地址解析类型 livenessProbe: failureThreshold: 3 httpGet: path: /livez port: https scheme: HTTPS periodSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /readyz port: https scheme: HTTPS periodSeconds: 10 ports: 总结 dashboard只是提供web GUI服务，本身并做认证授权，只是代为拿着账号向kubernetes API进行认证 dashboard 运行于pod, pod代为向kubernetes API进行认证的账号也必须是ServiceAccount账号，不可以是User自然人的属性账号 clusterrolebinding只能绑定clusterrole, rolebinding 即可以绑role,也可以绑clusterrole,口决是： 小绑大降权 Metrics-server用于收集pod内部CPU、内存使用量资源，kube-prometheus项目内部集成此功能，所以部署与否看你需要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes ingress进阶","slug":"kubernetes-ingress","date":"2021-01-12T12:51:41.000Z","updated":"2021-01-14T10:04:01.904Z","comments":true,"path":"2021/01/12/kubernetes-ingress/","link":"","permalink":"http://www.digmyth.com/2021/01/12/kubernetes-ingress/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes rbac","slug":"kubernetes-rbac","date":"2021-01-11T12:51:41.000Z","updated":"2021-01-14T04:50:59.033Z","comments":true,"path":"2021/01/11/kubernetes-rbac/","link":"","permalink":"http://www.digmyth.com/2021/01/11/kubernetes-rbac/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes secret","slug":"kubernetes-secret","date":"2021-01-03T12:51:41.000Z","updated":"2021-01-14T08:47:17.288Z","comments":true,"path":"2021/01/03/kubernetes-secret/","link":"","permalink":"http://www.digmyth.com/2021/01/03/kubernetes-secret/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes configmap","slug":"kubernetes-configmap","date":"2021-01-02T12:51:41.000Z","updated":"2021-01-11T09:55:46.529Z","comments":true,"path":"2021/01/02/kubernetes-configmap/","link":"","permalink":"http://www.digmyth.com/2021/01/02/kubernetes-configmap/","excerpt":"","text":"创建configmap12# kubectl get cm/calico-config -n kube-system -o yaml# kubectl get cm/kube-flannel-cfg -n kube-system -o yaml 12345kubectl create ns cm-nskubectl create cm -hkubectl create cm filebeat-cfg -n cm-ns \\ --from-literal=redis_host=&quot;redis.default.svc.cluster.local&quot; \\ --from-literal=log_level=&quot;Info&quot; 1234567891011121314151617181920212223kubectl get cm/filebeat-cfg -n cm-ns -o yamlapiVersion: v1data: log_level: Info redis_host: redis.default.svc.cluster.localkind: ConfigMapmetadata: creationTimestamp: &quot;2021-01-11T05:58:23Z&quot; managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: &#123;&#125; f:log_level: &#123;&#125; f:redis_host: &#123;&#125; manager: kubectl-create operation: Update time: &quot;2021-01-11T05:58:23Z&quot; name: filebeat-cfg namespace: cm-ns resourceVersion: &quot;573737&quot; uid: b06442dc-90e6-446b-8a3c-f119f26226d4 启一个pod运用configmap1234567891011121314151617181920212223242526root@k8s-m:/data/configmap# cat filebeat-pod.yaml apiVersion: v1kind: Podmetadata: name: filebeat-pod namespace: cm-nsspec: containers: - name: filebeat image: ikubernetes/filebeat:5.6.5-alpine env: - name: REDIS_HOST valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: redis_host # 定义的键名 - name: LOG_LEVEL valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: log_level # 定义的键名root@k8s-m:/data/configmap# kubectl apply -f filebeat-pod.yaml#pod内部是能查到的定义变量的root@k8s-m:/data/configmap# kubectl exec -it pods/filebeat-pod -n cm-ns -- env | grep REDIS_HOSTREDIS_HOST=redis.default.svc.cluster.local 定义2个数据文件123456789101112131415161718root@k8s-m:/data/configmap/nginx# cat server1.conf server &#123; server_name www.first.com; listen 80; location / &#123; root &quot;/html/first&quot;; &#125;&#125;root@k8s-m:/data/configmap/nginx# cat server2.conf server &#123; server_name www.second.com; listen 80; location / &#123; root &quot;/html/second&quot;; &#125;&#125; 创建nginx-cfg1kubectl create cm nginx-cfg --from-file=server1.conf --from-file=server-sec.conf=server2.conf -n cm-ns pod使用nginx-cfg12345678910111213141516171819202122232425262728[root@k8smaster nginx]# cat nginx-pod.yaml apiVersion: v1kind: Podmetadata: name: nginx-pod namespace: cm-nsspec: containers: - name: nginx-t image: nginx volumeMounts: - name: config-vol mountPath: /etc/nginx/conf.d/ volumes: - name: config-vol configMap: name: nginx-cfg items: - key: server1.conf # 定义configmap时的key path: server-first.conf # pod内部的文件名 - key: server-sec.conf # 定义configmap时的key path: server-second.conf # pod内部的文件名[root@k8smaster nginx]# kubectl apply -f nginx-pod.yaml[root@k8smaster nginx]# kubectl exec -it pods/nginx-pod -n cm-ns -- ls /etc/nginx/conf.dserver-first.conf server-second.confkubectl edit cm/nginx-cfg -n cm-ns # 修改能在60s生效 总结configmap也是一种存储卷，特殊的存储卷，用于保存pod内程序变量配置或文件等","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-csi-nfs","slug":"kubernetes-csi-nfs","date":"2021-01-01T13:52:41.000Z","updated":"2021-05-14T08:41:03.215Z","comments":true,"path":"2021/01/01/kubernetes-csi-nfs/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-csi-nfs/","excerpt":"","text":"简介要实现kubernetes中动态创建pv必须先创建StorageClass，每一个StorageClass对应了一个provisioner，kubernetes中内置了很多provisioner，但是很难受的是没有内置的nfs provisioner，对于我们这种没有钱的玩家，nfs是实现后端存储最简单直接的方法，所以不知道为什么k8s不提供，但是没关系有方法实现，k8s允许提供外部的provisioner，而nfs可以使用nfs-client-provisioner项目链接1https://github.com/kubernetes-retired/external-storage/tree/master/nfs-client 创建nfs server1234yum install nfs-utils -y[root@node02 deploy]# cat /etc/exports/csc-nfsdata/ *(rw,sync,no_root_squash)[root@node02 deploy]# 开放防火墙123456789101112vim /etc/nfs.conf[mountd]port=port-number# This adds the -p port-number option to the rpc.mount command line: rpc.mount -p port-number.firewall-cmd --permanent --add-service mountdfirewall-cmd --permanent --add-service rpc-bindfirewall-cmd --permanent --add-service nfsfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/tcpfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/udpfirewall-cmd --reload 配置NFS-Client provisioner,首先clone这个项目1git clone https://github.com/kubernetes-retired/external-storage.git 之后进入nfs-client/deploy/文件夹 可以看到有下面几个文件12345678910cd nfs-client/deploy/[root@nginx1-pro deploy]# ll总用量 28-rw-r--r-- 1 root root 225 9月 3 14:26 class.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 1030 9月 3 13:17 deployment-arm.yaml-rw-r--r-- 1 root root 1040 9月 3 13:30 deployment.yaml ## 需要改自己的nsdrwxr-xr-x 2 root root 214 9月 3 13:32 objects-rw-r--r-- 1 root root 1834 9月 3 13:19 rbac.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 241 9月 3 13:55 test-claim.yaml-rw-r--r-- 1 root root 399 9月 3 13:38 test-pod.yaml 首先你要做的是创建一个独立的命名空间12[root@k8smaster ~]# kubectl create ns csi-nfsnamespace/csi-nfs created 之后修改rbac.yaml和deployment.yaml的namespace为你创建的namespace 修改完成之后我们修改deployment.yaml123456789101112 env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.1.11 - name: NFS_PATH value: /data/kubernetesvolumes: - name: nfs-client-root nfs: server: 192.168.1.11 path: /data/kubernetes 执行rbac 和deploy yaml文件1234567891011121314151617181920212223242526[root@node02 deploy]# kubectl apply -f rbac.yamlserviceaccount/nfs-client-provisioner createdclusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner createdclusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner createdrole.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner createdrolebinding.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner created[root@node02 deploy]#[root@node02 deploy]# kubectl apply -f deployment.yamldeployment.apps/nfs-client-provisioner created[root@node02 deploy]# [root@node02 deploy]# kubectl apply -f class.yaml storageclass.storage.k8s.io/managed-nfs-storage created[root@node02 deploy]#查看cs [root@node02 deploy]# kubectl get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEmanaged-nfs-storage fuseim.pri/ifs Delete Immediate false 20s[root@node02 deploy]# cat class.yamlapiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: managed-nfs-storageprovisioner: fuseim.pri/ifs # or choose another name, must match deployment&apos;s env PROVISIONER_NAME&apos;parameters: archiveOnDelete: &quot;false&quot; provisioner就是刚才deployment中的PROVISIONER_NAME，还有一个比较关键的参数是archiveOnDelete，如果你想在删除了pvc之后还保留数据的话需要把这个参数改为true，不然你删除了pvc同时pv也会删除，然后数据也会丢失1234567kubectl apply class.yamlkubectl apply -f class.yaml很简单，只要pvc有annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot; pvc就能动态的创建出来 尝试创建123456789101112131415161718192021222324[root@node02 deploy]# kubectl apply -f test-claim.yaml [root@node02 deploy]# cat test-claim.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: test-claim annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi[root@node02 deploy]# 查看pv和pvc[root@node02 deploy]# kubectl get pv,pvcNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpersistentvolume/pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX Delete Bound default/test-claim managed-nfs-storage 29mNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpersistentvolumeclaim/test-claim Bound pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX managed-nfs-storage 29m[root@node02 deploy]# 尝试删除pvc，查看pv也会被删除，只不过pv中的数据不会被删除。需要注意的是删除pvc之前要把所使用的pod 删除掉 pending排障如果你部署的kubernetes是v1.20 v1.21.0以上,那么需要修改kube-apiserver.yaml支持selfLink功能 日志查看1/var/log/containers/nfs-client-provisioner-6b4 解决办法1234567891011121314参考： www.orchome.com/10024解决方法是编辑/etc/kubernetes/manifests/kube-apiserver.yaml在这里：spec: containers: - command: - kube-apiserver添加这一行：- --feature-gates=RemoveSelfLink=false然后应用它，即可kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml 总结 参考","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes volumes","slug":"kubernetes-volumes","date":"2021-01-01T12:51:41.000Z","updated":"2021-01-11T09:55:36.757Z","comments":true,"path":"2021/01/01/kubernetes-volumes/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-volumes/","excerpt":"","text":"12# kubectl explain pods.spec.volumes# kubectl explain pods.spec.containers.volumeMounts hostPath 为node节点本地卷1234567891011121314151617181920212223root@k8s-m:/data/volumes# cat 01-volume-demo.yaml apiVersion: v1kind: Podmetadata: name: vol-demo namespace: vol labels: app: vol-demospec: nodeName: k8s-n containers: - name: vol-demo image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: webstore volumes: - name: webstore hostPath: path: /volumes/vol-demo type: DirectoryOrCreateroot@k8s-m:/data/volumes# kubectl apply -f 01-volume-demo.yaml empty 临时存储，pod重启数据丢失12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 02-emptydir.yaml apiVersion: v1kind: Podmetadata: name: vol-emptydir-pod namespace: volspec: volumes: - name: html emptyDir: &#123;&#125; containers: - name: nginx image: nginx:1.14-alpine volumeMounts: - name: html mountPath: /usr/share/nginx/html - name: createpage image: alpine volumeMounts: - name: html mountPath: /html command: [&quot;/bin/sh&quot;,&quot;-c&quot;] args: - while true;do echo $(hostname) $(date) &gt;&gt; /html/index.html; sleep 2; doneroot@k8s-m:/data/volumes# kubectl apply -f 02-emptydir.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESvol-emptydir-pod 2/2 Running 0 2m47s 172.16.234.11 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q http://172.16.234.11vol-emptydir-pod Mon Jan 11 03:30:24 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:26 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:28 UTC 2021 # 正如我们期望的那样，每2秒钟生成一条记录 nfs 存储卷12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 03-nfs-pod.yaml apiVersion: v1kind: Podmetadata: name: liveness-httpget-pod namespace: volspec: containers: - name: liveness-httpget-pod image: nginx imagePullPolicy: IfNotPresent ports: - name: http containerPort: 80 livenessProbe: httpGet: port: http path: /index.html initialDelaySeconds: 1 periodSeconds: 3 volumeMounts: - name: html mountPath: /usr/share/nginx/html/ volumes: - name: html nfs: path: /nginx_share server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 03-nfs-pod.yamlapt install nfs-kernel-serverroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESliveness-httpget-pod 1/1 Running 0 16m 172.16.234.13 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q 172.16.234.13test nginx for nfs vol # 成功 redis Pod挂载nfs类型的卷,实现重建pod数据不丢失1234567891011121314151617181920212223242526272829303132333435363738394041424344root@k8s-m:/data/volumes# cat 04-nfs-redis.yaml apiVersion: v1kind: Podmetadata: name: redis namespace: vol labels: app: redisspec: containers: - name: redis image: redis:5.0.4 ports: - name: redis-port containerPort: 6379 volumeMounts: - name: data mountPath: /data volumes: - name: data nfs: path: /vols/v6 server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESredis 1/1 Running 0 12m 172.16.234.12 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; set name wxqOK127.0.0.1:6379&gt; set age 25OK127.0.0.1:6379&gt; saveOKroot@k8s-m:/data/volumes# kubectl delete -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; get name&quot;wxq&quot; # 挂载卷后数据仍然存在 利用 nfs创建一个pv123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 01-pv-nfs.yaml apiVersion: v1kind: PersistentVolumemetadata: name: test-vol labels: storages: nfsspec: capacity: storage: 2Gi volumeMode: Filesystem accessModes: - ReadWriteMany - ReadWriteOnce - ReadOnlyMany persistentVolumeReclaimPolicy: Retain nfs: server: 192.168.1.10 path: /vols/v7root@k8s-m:/data/volumes/pvc# kubectl apply -f 01-pv-nfs.yaml 创建pvc123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 02-pvc-nfs-yaml apiVersion: v1kind: PersistentVolumeClaimmetadata: name: test-pvc namespace: volspec: accessModes: - ReadWriteOnce volumeMode: Filesystem resources: requests: storage: 1Gi#storageClassName: slow# selector:# matchLabels:# release: &quot;stable&quot;# matchExpressions:# - &#123;key: environment, operator: In, values: [dev]&#125;root@k8s-m:/data/volumes/pvc# kubectl apply -f 02-pvc-nfs-yaml 创建一个pod申请pvc12345678910111213141516171819202122232425262728root@k8s-m:/data/volumes/pvc# cat 03-pod-demo.yaml apiVersion: v1kind: Podmetadata: name: pvc-pod-demo namespace: vol labels: app: pvc-podspec: nodeName: k8s-n containers: - name: pvc-pod image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: testpvc volumes: - name: testpvc persistentVolumeClaim: claimName: test-pvcroot@k8s-m:/data/volumes/pvc# kubectl apply -f 03-pod-demo.yamlroot@k8s-m:/data# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEtest-vol 2Gi RWO,ROX,RWX Retain Bound vol/test-pvc 11mroot@k8s-m:/data# kubectl get pvc -n volNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEtest-pvc Bound test-vol 2Gi RWO,ROX,RWX 6m47s 总结无它，唯手熟而，理解运用更重要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Ubuntu20.04 Run k8s","slug":"Kubernetes-ubuntu20.04","date":"2020-12-30T12:51:41.000Z","updated":"2021-01-11T09:55:23.613Z","comments":true,"path":"2020/12/30/Kubernetes-ubuntu20.04/","link":"","permalink":"http://www.digmyth.com/2020/12/30/Kubernetes-ubuntu20.04/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"ELF日志系统实践","slug":"log_elk_实践","date":"2020-12-15T02:12:36.000Z","updated":"2021-04-19T06:15:27.618Z","comments":true,"path":"2020/12/15/log_elk_实践/","link":"","permalink":"http://www.digmyth.com/2020/12/15/log_elk_实践/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb cluster recovery","slug":"mariadb-cluster-recovery","date":"2020-07-10T01:41:54.000Z","updated":"2020-07-06T10:59:33.024Z","comments":true,"path":"2020/07/10/mariadb-cluster-recovery/","link":"","permalink":"http://www.digmyth.com/2020/07/10/mariadb-cluster-recovery/","excerpt":"","text":"mariadb cluster recovery列几个集群检查命令1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+----------------------------------------------+| Variable_name | Value |+--------------------------+----------------------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306,10.0.0.53:3306 |+--------------------------+----------------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 3 |+--------------------+-------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_state_uuid&apos;;+--------------------------+-----------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------+| wsrep_cluster_state_uuid | 345098abd2-291a-9893-acbd3-30923abcdef9 |+--------------------------+-----------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_local_state_comment&apos;;+---------------------------+--------+| Variable_name | Value |+---------------------------+--------+| wsrep_local_state_comment | Synced |+---------------------------+--------+1 row in set (0.01 sec) 场景一 只是很简单的某节点掉线，重启让其重新加入集群即可1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+-------------------------------+| Variable_name | Value |+--------------------------+-------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306 |+--------------------------+-------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 2 |+--------------------+-------+1 row in set (0.01 sec) 1# systemctl restart mariadb 场景二 唯一有一个幸存节点1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 1 |+--------------------+-------+1 row in set (0.01 sec) 幸存节点刚好优雅关闭正确提交了数据，状态为Primary1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_status&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_cluster_status | Primary |+----------------------+---------+1 row in set (0.01 sec) 哪果是non-Primary状态还要单独恢复幸存节点上执行1MariaDB [(none)]&gt; set global wsrep_provider_options=&apos;pc.bootstrap=YES&apos;; 可是 我们一般不这样做，常规做法是直接指定这个幸存节点的主节点，让其它节点加入集群123# systemctl stop mariadb# galera_new_cluster# systemctl restart mariadb 场景三集群崩溃完全不可用,这也分为2种情况，基于最高seqno值恢复状态一是没有集群UUID, seqno: -1,数据定义语言DDL出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 00000000-0000-0000-0000-000000000000seqno: -1safe_to_bootstrap: 0 状态2是有集群UUID，seqno: -1，事务处理数据时出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: -1safe_to_bootstrap: 0 状态3是有集群UUID，seqno值最高正值123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: 31929safe_to_bootstrap: 1 此时我们认为状态3是OK的，需要修改状态１、２数据库配置文件去掉IP地址配置项1wsrep_cluster_address=&quot;gcomm://&quot; 这样节点就能正常启动了1systemctl restart mariadb 最后再修改配置文件后把这2个节点正常加入集群就好了1wsrep_cluster_address=&quot;gcomm://10.8.8.53,10.8.8.54,10.8.8.55&quot; 最后是基于Last Committed恢复先修改配置文件让服务启起来，入库查看wsrep_last_committed123#systemctl stop mariadb 编辑配置文件去掉IP地址wsrep_cluster_address=&quot;gcomm://&quot;#systemctl start mariadb 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_last_committed&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_last_committed | 319589 |+----------------------+---------+1 row in set (0.01 sec) 找到节点最大值认为就是主节点，然后在这个主节点上1# galera_new_cluster 其它节点加入集群即可","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"openstack-HA","slug":"openstack-HA","date":"2020-03-14T01:41:54.000Z","updated":"2020-03-29T03:13:34.557Z","comments":true,"path":"2020/03/14/openstack-HA/","link":"","permalink":"http://www.digmyth.com/2020/03/14/openstack-HA/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"calico-原理剖析","slug":"calico-原理剖析","date":"2020-03-07T01:42:54.000Z","updated":"2021-01-07T06:05:08.285Z","comments":true,"path":"2020/03/07/calico-原理剖析/","link":"","permalink":"http://www.digmyth.com/2020/03/07/calico-原理剖析/","excerpt":"","text":"arp之calico本质参考戳穿 Calico 的谎言 什么是代理ARP？当 ARP 请求目标跨网段时，网关设备收到此ARP请求会用自己的MAC地址返回给请求者,这就是代理arp. 实现MAC地址代理,最终使得主机能够通信. 知识点： 跨网段通信时会发广播得到网关MAC 之后发出的网络数据包目标MAC是网关的MAC 网关的IP地址不会出现在任何网络包头中 因此，没有人在乎网关地址是否真的存在，只要设备能响应ARP就行了 我这里用了2台linux主机实验，主机A：192.168.1.109 主机B:192.168.1.110主机A：1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.10/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-A ~]#ip netns exec ns0 route -n # 命名空间里的路由Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.10 dev veth0ip route add 10.10.10.20 via 192.168.1.110 dev eth0 主机B:1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.20/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-B ~]# ip netns exec ns0 route -n Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.20 dev veth0ip route add 10.10.10.10 via 192.168.1.109 dev eth0 Linux主机打开路由转发1net.ipv4.ip_forward = 1 网卡开启代理ARP功能1echo 1 &gt; /proc/sys/net/ipv4/conf/veth0/proxy_arp 主机A上网络通信测试12345[root@testarp-A ~]# ip netns exec ns0 ping 10.10.10.20PING 10.10.10.20 (10.10.10.20) 56(84) bytes of data.64 bytes from 10.10.10.20: icmp_seq=1 ttl=62 time=0.951 ms64 bytes from 10.10.10.20: icmp_seq=2 ttl=62 time=0.484 ms64 bytes from 10.10.10.20: icmp_seq=3 ttl=62 time=0.556 ms 1234567[root@testarp-A ~]# tcpdump -nni veth0tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on veth0, link-type EN10MB (Ethernet), capture size 262144 bytes08:18:15.999200 IP 10.10.10.10 &gt; 10.10.10.20: ICMP echo request, id 1486, seq 1, length 6408:18:16.000288 IP 10.10.10.20 &gt; 10.10.10.10: ICMP echo reply, id 1486, seq 1, length 6408:18:21.008712 ARP, Request who-has 10.10.10.20 tell 10.10.10.10, length 2808:18:21.008757 ARP, Reply 10.10.10.20 is-at ee:46:7c:2e:d9:ba, length 28 注意： 这里veth0充当路由角色代理ARP, who is 10.10.10.20 ,返回自己MACee:46:7c:2e:d9:ba来响应. 转发过程分析：1 广播寻找目标IP对应MAC是谁？2 根据路由规则所有数据包都会转发到169.254.1.1，寻找169.254.1.1MAC是谁？2 vet0开启代理ARP进行ARP拦截，返回自己MACee:46:7c:2e:d9:ba给以响应3 封包目标IP为10.10.10.20，MAC为ee:46:7c:2e:d9:ba,发出这样的数据包4 主机A查询本地路由，匹配10.10.10.20 via 192.168.1.110 dev eth0 会把包发送给192.168.1.1105 主机B收到10.10.10.20的包时，匹配本地路由10.10.10.20 dev veth0 scope link,数据包发送到veth0上6 完成通信，回程类似","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"corosync/PacemakerHA","slug":"linux-pacemaker-corosync","date":"2020-02-15T01:42:54.000Z","updated":"2020-03-29T01:27:23.789Z","comments":true,"path":"2020/02/15/linux-pacemaker-corosync/","link":"","permalink":"http://www.digmyth.com/2020/02/15/linux-pacemaker-corosync/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"ingress-nginx 基础","slug":"ingress-nginx","date":"2020-01-20T12:51:41.000Z","updated":"2021-01-14T07:57:51.296Z","comments":true,"path":"2020/01/20/ingress-nginx/","link":"","permalink":"http://www.digmyth.com/2020/01/20/ingress-nginx/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"openvswit_vlan流表","slug":"openvswit_vlan流表","date":"2020-01-01T01:41:54.000Z","updated":"2020-01-13T03:44:37.630Z","comments":true,"path":"2020/01/01/openvswit_vlan流表/","link":"","permalink":"http://www.digmyth.com/2020/01/01/openvswit_vlan流表/","excerpt":"","text":"如果计算节点关闭防火墙，配置文件如下，那么就不会产生bridge桥及相应iptables规则 ml2部份配置文件如下123[securitygroup]#enable_security_group = True#firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver linuxBridge桥接口就会为空12kvm-app-6:~ # brctl show # 为空bridge name bridge id STP enabled interfaces 查看某虚机接口信息123456789kvm-app-6:~ # virsh list Id Name State---------------------------------------------------- 1 instance-00000793 runningkvm-app-6:~ # virsh domiflist instance-00000793Interface Type Source Model MAC-------------------------------------------------------tap790c394d-70 bridge br-int virtio fa:16:3e:1f:11:99 ovs-vsctl show1234567891011121314151617181920212223242526272829303132kvm-app-6:~ # ovs-vsctl show8ba4a76e-8c27-4807-a65a-f05b22a3ef76 Manager &quot;ptcp:6640:127.0.0.1&quot; is_connected: true Bridge br-int Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port int-br-ex Interface int-br-ex type: patch options: &#123;peer=phy-br-ex&#125; Port &quot;tap790c394d-70&quot; tag: 1 Interface &quot;tap790c394d-70&quot; Port br-int Interface br-int type: internal Bridge br-ex Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port phy-br-ex Interface phy-br-ex type: patch options: &#123;peer=int-br-ex&#125; Port br-ex Interface br-ex type: internal Port &quot;bond0&quot; Interface &quot;bond0&quot; ovs_version: &quot;2.7.6&quot; 查看br-int桥接口信息ovs-ofctl show br-int12345678910111213141516171819kvm-app-6:~ # ovs-ofctl show br-intOFPT_FEATURES_REPLY (xid=0x2): dpid:00002a77dbc2860an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(int-br-ex): addr:3e:38:8a:6e:c1:de config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(tap790c394d-70): addr:fe:16:3e:1f:11:99 config: 0 state: 0 current: 10MB-FD COPPER speed: 10 Mbps now, 0 Mbps max LOCAL(br-int): addr:2a:77:db:c2:86:0a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-int流表规则ovs-ofctl dump-flows br-int12345678910111213kvm-app-6:~ # ovs-ofctl dump-flows br-intNXST_FLOW reply (xid=0x4): cookie=0x8372d932b48e5321, duration=5395.262s, table=0, n_packets=0, n_bytes=0, idle_age=5395, priority=10,icmp6,in_port=2,icmp_type=136 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=5395.261s, table=0, n_packets=505, n_bytes=21210, idle_age=7, priority=10,arp,in_port=2 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=7776.549s, table=0, n_packets=366813, n_bytes=36441400, idle_age=5395, priority=2,in_port=1 actions=drop cookie=0x8372d932b48e5321, duration=5395.264s, table=0, n_packets=817, n_bytes=74814, idle_age=4, priority=9,in_port=2 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=5395.379s, table=0, n_packets=840145, n_bytes=83511042, idle_age=0, priority=3,in_port=1,dl_vlan=11 actions=mod_vlan_vid:1,NORMAL cookie=0x8372d932b48e5321, duration=7776.964s, table=0, n_packets=4, n_bytes=320, idle_age=7776, priority=0 actions=NORMAL cookie=0x8372d932b48e5321, duration=7776.965s, table=23, n_packets=0, n_bytes=0, idle_age=7776, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.263s, table=24, n_packets=0, n_bytes=0, idle_age=5395, priority=2,icmp6,in_port=2,icmp_type=136,nd_target=fe80::f816:3eff:fe1f:1199 actions=NORMAL cookie=0x8372d932b48e5321, duration=5395.262s, table=24, n_packets=502, n_bytes=21084, idle_age=7, priority=2,arp,in_port=2,arp_spa=10.8.25.220 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=7776.964s, table=24, n_packets=3, n_bytes=126, idle_age=5357, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.265s, table=25, n_packets=1319, n_bytes=95898, idle_age=4, priority=2,in_port=2,dl_src=fa:16:3e:1f:11:99 actions=NORMAL 查看br-ex交换机接口信息ovs-ofctl show br-ex123456789101112131415161718 kvm-app-6:~ # ovs-ofctl show br-exOFPT_FEATURES_REPLY (xid=0x2): dpid:0000aa081303781an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(bond0): addr:82:01:9b:1b:28:c9 config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(phy-br-ex): addr:c2:06:bb:33:da:7a config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max LOCAL(br-ex): addr:aa:08:13:03:78:1a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-ex流表信息12345kvm-app-6:~ # ovs-ofctl dump-flows br-exNXST_FLOW reply (xid=0x4): cookie=0x90f6220dc9413e6e, duration=5441.562s, table=0, n_packets=1328, n_bytes=96564, idle_age=3, priority=4,in_port=2,dl_vlan=1 actions=mod_vlan_vid:11,NORMAL cookie=0x90f6220dc9413e6e, duration=7822.731s, table=0, n_packets=0, n_bytes=0, idle_age=7822, priority=2,in_port=2 actions=drop cookie=0x90f6220dc9413e6e, duration=7822.733s, table=0, n_packets=1213423, n_bytes=120613616, idle_age=0, priority=0 actions=NORMAL","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"linux disk","slug":"linux-disk","date":"2019-12-15T01:42:54.000Z","updated":"2020-03-24T13:52:16.618Z","comments":true,"path":"2019/12/15/linux-disk/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-disk/","excerpt":"","text":"Ubuntu系统分区信息查看：fdisk /dev/vda1234567891011Command (m for help): pDisk /dev/vda: 60 GiB, 64424509440 bytes, 125829120 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x630fdccbDevice Boot Start End Sectors Size Id Type/dev/vda1 * 2048 1953791 1951744 953M 83 Linux/dev/vda2 1953792 125829119 123875328 59.1G 83 Linux Sart、End、Sectors单位都是扇区， 1扇区=512bytes，那么2扇区就是1KB 通常称为一个block块，那么就有了2sectors=1KB=1 block,可以通过blockdev --getsz /dev/vda得到整块盘扇区数像上面1953791-2048+1=1951744扇,953M=1951744/2/1024KB CentOS差别可能就是 Blocks数显示，上面说了1Block=1KB12345678910Disk /dev/vda: 64.4 GB, 64424509440 bytes, 125829120 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000afe6d Device Boot Start End Blocks Id System/dev/vda1 * 2048 4196351 2097152 83 Linux/dev/vda2 4196352 125829119 60816384 83 Linux 我来验证一下14196351-2048+1得到扇区数，(4196351-2048+1)/2=2097152刚好等于Blocks数，也就是2097152KB=2048MB=2GB 我们再来学习下dd命令1234bs参数代表逻辑块大小，默认单位是扇区，bs=512代表一个扇区，也就是512bytescount参数代表逻辑块的个数或扇区数，那么处理的存储大小就是bs*countskip 表示跳过if 设备的扇区数开始读数据,skip=200代表200个扇区，也就是100KBseek表示跳过of设备的扇区数开始写数据,seek=400代表400个扇区，也就是200KB 那么学了这些有什么用呢？一个裸盘有硬件raid卡信息是不能正常被格式化的，这个raid信息会存在硬盘的最后63个扇区的地方，我们可以用dd复盖掉12snumber=$(($(blockdev --getsz /dev/sda)-63))dd if=/dev/zero of=/dev/sda bs=512 count=63 seek=$snumber 总结： 一个扇区512bytes , 1Block=1KB=2扇区 dd参数的skip针对if设备，seek针对of设备（跳过多少扇区再处理）","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"nmap工具详解","slug":"linux-nmap详解","date":"2019-12-15T01:42:54.000Z","updated":"2019-01-15T09:13:55.828Z","comments":true,"path":"2019/12/15/linux-nmap详解/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-nmap详解/","excerpt":"","text":"1.1 nmap基础在运维过程中有时需要主机存活性探测，一般是namp、tcpdump命令结合使用，相关工具包安装1[root@ ]# yum install nmap tcpdump 列出几种nmap命令语法123-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans-sU: UDP Scan-sP: ping Scan 下面我们在2台主机间探测，一主机发nmap探测，另一主机tcpdump抓包分析 在A主机正常发一个ping包看看正常情况下的icmp包 ping -c 1 10.17.200.36 在B主机抓包发现icmp包有去有回12345[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:08:38.392418 IP 10.17.200.14 &gt; 10.17.200.36: ICMP echo request, id 5220, seq 1, length 6416:08:43.400811 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 可在一台主机临时禁用icmp协议,再用ping将探测不到这台主机1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 1.2 nmap ping探测我们开始nmap ping探测， -n表示不进行DNS解析123456[root@ ]# nmap -n -sP 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:12 CSTNmap scan report for 10.17.200.36Host is up (0.00030s latency).MAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.05 seconds 在B主机探测发现只收到了对方发的请求包，并未回应，但是还是认为这台主机是存活的，这样提高了探测效率1234[root@localhost roles]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:12:28.972321 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 46 1.3 nmapSYN探测我们开始nmap TCP的SYN探测， -n表示不进行DNS解析1234567891011[root@ ]# nmap -n -PE 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:20 CSTNmap scan report for 10.17.200.36Host is up (0.00014s latency).Not shown: 998 closed portsPORT STATE SERVICE22/tcp open ssh445/tcp filtered microsoft-dsMAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 1.33 seconds 在B主机探测发现，A主机对B主机的各服务都发送了TCP SYN包来进行探测123456789101112[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:20:07.124327 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 4616:20:07.148867 IP 10.17.200.14.40911 &gt; 10.17.200.36.rtsp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148882 IP 10.17.200.14.40911 &gt; 10.17.200.36.smtp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148906 IP 10.17.200.14.40911 &gt; 10.17.200.36.domain: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148943 IP 10.17.200.14.40911 &gt; 10.17.200.36.https: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.mysql: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.ssh: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 0信息太多，略过...16:20:12.152833 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 1.4 arping另外补充一下，arping -D可有效检测IP地址冲突问题,如果命令echo $?返回值为0则表示地址冲突，1则表示不冲突.12345[root@ ]# arping -D -c 2 -I ens192 10.17.200.36ARPING 10.17.200.36 from 0.0.0.0 ens192Unicast reply from 10.17.200.36 [00:50:56:B9:21:18] 0.887msSent 1 probes (1 broadcast(s))Received 1 response(s) 1.5 总结 nmap -sP 可进行ping检测 nmap -PE 可进行tcp SYN检测 nmap -n -sP -PE 可进行ping与SYN结合检测,以免漏扫 arping -D 可进行地址冲突检测 &lt;完结&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s_pod资源清单学习1","slug":"k8s_pod1","date":"2019-12-01T12:51:41.000Z","updated":"2020-01-19T09:37:36.257Z","comments":true,"path":"2019/12/01/k8s_pod1/","link":"","permalink":"http://www.digmyth.com/2019/12/01/k8s_pod1/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"udev定义network","slug":"linux-udev","date":"2019-11-15T01:42:54.000Z","updated":"2020-03-29T02:10:23.637Z","comments":true,"path":"2019/11/15/linux-udev/","link":"","permalink":"http://www.digmyth.com/2019/11/15/linux-udev/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"helm部署efk日志系统","slug":"log_helm-efk","date":"2019-10-15T02:42:36.000Z","updated":"2021-03-17T09:56:58.567Z","comments":true,"path":"2019/10/15/log_helm-efk/","link":"","permalink":"http://www.digmyth.com/2019/10/15/log_helm-efk/","excerpt":"","text":"efk 日志系统3大组件elasticsearchfluent-bitkibana helm部署efk日志系统heml.sh 官网https://artifacthub.io/packages/helm/bitnami/elasticsearch 搜索elasticsearch Charts 1234567[root@k8smaster efk]# helm repo add bitnami https://charts.bitnami.com/bitnami&quot;bitnami&quot; has been added to your repositories[root@k8smaster efk]# helm repo listNAME URL loki https://grafana.github.io/loki/chartsstable https://charts.helm.sh/stable bitnami https://charts.bitnami.com/bitnami 12345[root@k8smaster efk]# helm search repo elasticNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ... helm show values bitnami/elasticsearch &gt; es_values.yaml 有人说k8s 中的APP JDK 最好11以上， data.resources +1G = data.heapsize 这个预留一个G给进程使用，其它才给JVM使用性能更佳12345678910111213141516171819202122232425262728293031[root@k8smaster efk]# helm install myes bitnami/elasticsearch -f es_values.yaml -n logsNAME: myesLAST DEPLOYED: Tue Mar 16 10:34:09 2021NAMESPACE: logsSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:------------------------------------------------------------------------------- WARNING Elasticsearch requires some changes in the kernel of the host machine to work as expected. If those values are not set in the underlying operating system, the ES containers fail to boot with ERROR messages. More information about these requirements can be found in the links below: https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html This chart uses a privileged initContainer to change those settings in the Kernel by running: sysctl -w vm.max_map_count=262144 &amp;&amp; sysctl -w fs.file-max=65536** Please be patient while the chart is being deployed ** Elasticsearch can be accessed within the cluster on port 9200 at myes-elasticsearch-coordinating-only.logs.svc.cluster.local To access from outside the cluster execute the following commands: kubectl port-forward --namespace logs svc/myes-elasticsearch-coordinating-only 9200:9200 &amp; curl http://127.0.0.1:9200/ 部署日志采集agent12345678910111213141516[root@k8smaster efk]# helm search repo elasNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ...stable/elastabot 1.2.1 1.1.0 DEPRECATED A Helm chart for Elastabot - a Slack...stable/elastalert 1.5.1 0.2.4 DEPRECATED ElastAlert is a simple framework for...stable/elastic-stack 2.0.6 6 DEPRECATED A Helm chart for ELK stable/elasticsearch 1.32.5 6.8.6 DEPRECATED Flexible and powerful open source, d...stable/elasticsearch-curator 2.2.3 5.7.6 DEPRECATED A Helm chart for Elasticsearch Curator stable/elasticsearch-exporter 3.7.1 1.1.0 DEPRECATED Elasticsearch stats exporter for Pro...stable/fluentd-elasticsearch 2.0.7 2.3.2 DEPRECATED! - A Fluentd Helm chart for Kubernet...bitnami/grafana 5.2.4 7.4.3 Grafana is an open source, feature rich metrics...bitnami/kibana 7.2.3 7.10.2 Kibana is an open source, browser based analyti...stable/apm-server 2.1.7 7.0.0 DEPRECATED The server receives data from the El...stable/dmarc2logstash 1.3.1 1.0.3 DEPRECATED Provides a POP3-polled DMARC XML rep...stable/fluentd 2.5.3 v2.4.0 DEPRECATED A Fluentd Elasticsearch Helm chart f...stable/kibana 3.2.8 6.7.0 DEPRECATED - Kibana is an open source data visu... 1234567891011121314151617181920[root@k8smaster efk]# helm show values bitnami/kibana &gt; kibana_values.yaml[root@k8smaster efk]# vim kibana_values.yaml[root@k8smaster efk]# helm install kibanaui bitnami/kibana -f kibana_values.yaml -n logsNAME: kibanauiLAST DEPLOYED: Tue Mar 16 15:21:01 2021NAMESPACE: logsSTATUS: deployedREVISION: 1NOTES:1. Get the application URL by running these commands: Get the Kibana URL and associate Kibana hostname to your cluster external IP: export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters echo &quot;Kibana URL: http://kibana.local/&quot; echo &quot;$CLUSTER_IP kibana.local&quot; | sudo tee -a /etc/hostsWARNING: Kibana is externally accessible from the cluster but the dashboard does not contain authentication mechanisms. Make sure you follow the authentication guidelines in your Elastic stack.+info https://www.elastic.co/guide/en/elastic-stack-overview/current/setting-up-authentication.htmlWARNING: Rolling tag detected (bitnami/bitnami-shell:10), please note that it is strongly recommended to avoid using rolling tags in a production environment.+info https://docs.bitnami.com/containers/how-to/understand-rolling-tags-containers/ 123456helm repo updatehelm repo list helm search repo fluent-bithelm show values fluent/fluent-bit &gt; fluent-bit-values.yamlhelm install -f fluent-bit-values.yaml -n logshelm list -n logs 总结 helm安装好处是一键安装，坏处是自定义容器内yml配置文件难度极大，如果helm charts提供的原始配置文件里没有(此处不是说修改values.yml值文件),需要重新制作charts部署","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch API","slug":"log_elasticsearch_api","date":"2019-09-15T02:22:36.000Z","updated":"2021-04-19T06:13:15.498Z","comments":true,"path":"2019/09/15/log_elasticsearch_api/","link":"","permalink":"http://www.digmyth.com/2019/09/15/log_elasticsearch_api/","excerpt":"","text":"知识点搜索引擎包括： 索引组件、搜索组件索引组件： 面向数据存储和索引构建搜索组件： 面向用户提供搜索功能以及将用户提供的搜索请求转换成可用的查询语句并通过索引完成查询过程或搜索过程其中一种著名的索引叫做倒排索引 获取数据的组件：工作在pull拉取数据模式， solr/Nutch/grub/ApetureES: 索引index、类型type、文档document、映射mapping 每个索引的分片数量： 5 每个分片也应该有副本： 1用户接口： 9200/tcp集群接口： 9300/tcp 数据类型： string、number、boolean、date、 ES中搜索的数据广义上可被分为2类：12exact: 精确查找，指在原始数据上精确查找full-text: 全文查找，判断文档在多大程度上匹配查询请求，用于评估文档与用户查询请求的相似度 为了完成full-text搜索，ES必须先分析文本并创建出倒排索引，倒排索引中的数据还需要进行“正规化”为标准格式：如单词复数改为单数，助词去掉，这样的分词加正规化的过程即为分析，分析是需要分析器analyzer工作的分析器由3个组件构成： 字符过滤器、分词器、分词过滤器ES内置的分析器有:1234standard analyzer (default analyzer)simple analyzerwhitespace analyzerlanguage analyzer 分析器不仅在创建索引时用到，在构建查询时也会用到并且前后二者的分析器必须一致，否则无法解析 API调用1234567[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/indicesgreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 1628 579.3kb 344kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 14 4.3mb 2.1mbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 3 0 32.9kb 16.4kbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 4 0 48.7kb 27.3kb 12[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/health1618472240 07:37:20 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 123456789101112131415161718[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/health?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;status&quot; : &quot;green&quot;, &quot;timed_out&quot; : false, &quot;number_of_nodes&quot; : 3, &quot;number_of_data_nodes&quot; : 3, &quot;active_primary_shards&quot; : 7, &quot;active_shards&quot; : 14, &quot;relocating_shards&quot; : 0, &quot;initializing_shards&quot; : 0, &quot;unassigned_shards&quot; : 0, &quot;delayed_unassigned_shards&quot; : 0, &quot;number_of_pending_tasks&quot; : 0, &quot;number_of_in_flight_fetch&quot; : 0, &quot;task_max_waiting_in_queue_millis&quot; : 0, &quot;active_shards_percent_as_number&quot; : 100.0&#125; 123456[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/master_node?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;cluster_uuid&quot; : &quot;exgsV0fDSCu826nXkN9w8A&quot;, &quot;master_node&quot; : &quot;WIm1WA75QhSegglRpCn4-Q&quot;&#125; 123[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/nodes?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/stats?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_nodes/stats?pretty 1234[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/pending_tasks?pretty&#123; &quot;tasks&quot; : [ ]&#125; 数据提交1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/1?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 0, &quot;_primary_term&quot; : 1&#125; 1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/2?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, # 索引，没有会自动创建 &quot;_type&quot; : &quot;class1&quot;, # 类型，没有会自动创建 &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 2, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 1&#125; 获取文档数据123456789101112[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/1&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:0,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;2&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:1,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125; 更新文档可以PUT方法覆盖原有文档，也可以局部更新用POST方法调用_update接口1234567891011121314151617181920212223242526272829303132[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X POST http://192.168.1.40:9200/students/class1/2/_update?pretty -d &apos;&#123;&quot;doc&quot;: &#123;&quot;last_name&quot;: &quot;Huang2_222&quot;&#125;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;result&quot; : &quot;noop&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 0, &quot;successful&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2?pretty # 查看更新&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1, &quot;found&quot; : true, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2_222&quot; &#125;&#125; 删除文档1[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/class1/2 查看索引123456789[root@node01 ~]# curl -X GET http://192.168.1.40:9200/_cat/indices?vhealth status index uuid pri rep docs.count docs.deleted store.size pri.store.sizegreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 431 1.3mb 630.3kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open students em-XgwfsSc--wFnCcLC7jg 1 1 2 0 21.5kb 8.6kbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 4 0 43.7kb 21.8kbgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 4 4.2mb 2.1mbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 6 0 75.8kb 40.9kb 删除索引12[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/&#123;&quot;acknowledged&quot;:true&#125; 以上是基于query DSL language,用于实现诸多类型查询向ES发起查询请求的方式有2种：1 通过RestFul request API查询，也称为query string2 通过发送REST request body 进行查询 query string方式查询12345678910111213141516171819202122232425262728293031323334353637383940[root@node01 ~]# curl http://192.168.1.40:9200/students/_search?pretty&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 2, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2&quot; &#125; &#125; ] &#125;&#125; REST request body 方式查询123[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X GET http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&apos; 多索引，多类型查询,一般格式为：http://IP:port/&lt;indices1&gt;,&lt;indices2&gt;/&lt;type1&gt;,&lt;type2&gt;/_search?pretty12curl http://192.168.1.40:9200/_search?pretty # 所有索引查询curl http://192.168.1.40:9200/students1,students2/_search?pretty mappping/analysisES对每一个文档会取得其所有域的所有值，生成一个名为”_all”的域，执行查询时，如果在query_string未指定查询的域，则在_all域上执行查询操作 不指定域查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 指定域精确查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=first_name:&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 查看指定类型的mapping123456789101112131415161718192021222324252627[root@node01 ~]# curl http://192.168.1.40:9200/students/_mapping?pretty&#123; &quot;students&quot; : &#123; &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;first_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;last_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125; &#125; &#125; &#125;&#125; request Body 请求查询 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;term&quot;: &#123;&quot;first_name&quot;:&quot;jing&quot;&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;terms&quot;: &#123;&quot;first_name&quot;:[&quot;jing&quot;,&quot;xx&quot;,&quot;oo&quot;]&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 总结慢慢实践。。。","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch基本使用","slug":"log_elasticsearch-基本使用","date":"2019-08-15T02:42:36.000Z","updated":"2021-04-15T07:13:28.047Z","comments":true,"path":"2019/08/15/log_elasticsearch-基本使用/","link":"","permalink":"http://www.digmyth.com/2019/08/15/log_elasticsearch-基本使用/","excerpt":"","text":"介绍官网： https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-elastic-stack.html elasticsearch: 借住于LuceneAPI 重新封装实现的搜索组件，增加更强大的能力，将Lucene提供的索引组建成shar形式，分片后分布于各节点上从而构建成分布式时时查询组件。 是一个基Lucene实现的开源、分布式、RestFul的全文本搜索引擎，此外，它还是一个分布式实时文档存储，其中每个文档的每个field均是被索引的数据，且可被搜索，也是一个带实时分析功能的分布式搜索引擎，能够扩展至数以百计的节点实时处理PB级的数据 概念 文档只有被索引后才能被索引，这个文档就放在一个叫索引的文件当中。 在Lucene中每一项相当于MYsql表中一行数据，多个项在一起就组成了索引，但是每个索引会尽量存储同类型数据 大索引的多个片分shard散到多个物理节点上去，可成完成读写负载均衡，分片节点挂了所有数据将丢失，但是分布式不应该这样，它还要通过主从副本实现分布解决单点故障问题。 写操作会自动分配到主分片完成写操作，副本分片只有读权限 索引： 文档的集合，类似于表，索引名只能是小写字母 类型(type): 类型是索引内部的逻辑分区，其意义完全取决于用户需求，一个索引内部可以定义一个或多个类型 拥有相同域的文档的预定义，类似于表的表结构，文档是schema free模式自由, 建议一个索引中只存一个类型的文档数据 文档： 是Lucene搜索和索引的原子单位，包含了一个或多个域，是域容器，基于json格式，每个域的组成部份：一个名字和一个或多个值，拥有多个值的域通常称为多值域 映射 (maping): 定义如何切词，指明一个文档中的数据在被存储之前的分析过程该如何执行，原始内容存储为文档之前事先需要分析，映射就 是定义此分析机制该如何实现 例如; 切词、过滤掉某些词、域中内容排序 elasticsearch集群组件： 每一个物理节点必属于且只属于某ES集群 NODE： 运行了单个ES实例的主机即为节点，用于存储数据部份分片、参与集群索引及搜索操作、节点标识靠节点名（默认会生成字串，可自定义） shard分片: 把一个Luence大索引切分为底层物理数据，完成分割存储机制，或说将索引切割成为物理存储组件，但每一个shard都是一个独立且完整的索引，创建索引时，ES默认创建5个副本 shard有2种类型： primary shard/Replicas shard Primary shard 如何切割定义好后不可更改，但是副本数是可以动态更改的 ES工作过程： 通过多播(default)或单播方式工作在9300/TCP查找同一集群的其它节点，并与之建立通信 集群中的所有节点会选举一个主节点负责管理整个集群状态，以及在集群范围内决定各shard分布方式，用户角度没有主从节点，各节点都可接收请求 安装elasticsearch强制要求工作在普通用户模式下，不能root 直接./bin/elasticsearch启动服务，好像rpm安装没有此限制同时启动也有很多限制，否则启动失败 修改系统参数达到启动服务要求1234561 普通用户模式下安装2 安装jdk,要求1.8以上，有人声称1.11以上更佳3 打开文件数限制，包括系统级/etc/security/limits.conf 和ulimit -n 65535用户级4 打开内核参数级限制,临时设置如下命令sysctl -w vm.max_map_count=655350sysctl -w fs.file-max=65536 配置文件修改123456789cat /home/stack/elasticsearch-7.11.2/config/elasticsearch.yml | grep -v ^# | grep -v ^$cluster.name: wxq-esnode.name: node-es3bootstrap.memory_lock: falsenetwork.host: 192.168.1.30discovery.seed_hosts: [&quot;192.168.1.30&quot;,] # 集群模式相应追加主机cluster.initial_master_nodes: [&quot;192.168.1.30&quot;,]http.cors.enabled: true # 方便plugins head插件时跨站请求成功http.cors.allow-origin: &quot;*&quot; head 插件安装安装好后直接访问 http://IP:9100/ 连接地址填入http://es-server:9200/正确1234git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start 1./bin/elasticsearch # 直接启动即可 集群状态 123456green 可用状态red: 不可用yellow: 修复状态ES参与集群事务的端口tcp/9300ES接收请求的端口tcp/9200 API接口使用123456确保集群正常； API接口9200Restful接口API： 4类1 检查集群节点索引健康与否，以及获取其相应状态2 管理集群节点索引及元数据3 执行CRUD操作4 执行高级操作：例如paging 、filtering 12345678910111213所有_cat支持的API操作[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat=^.^=/_cat/allocation/_cat/shards/_cat/shards/&#123;index&#125;/_cat/master/_cat/nodes/_cat/tasks/_cat/indices/_cat/indices/&#123;index&#125;/_cat/segments。。。 v=verbose显示详细信息1234567891011http://192.168.1.30:9200/_cat/nodeshttp://192.168.1.30:9200/_cat/nodes?vhttp://192.168.1.30:9200/_cat/masterhttp://192.168.1.30:9200/_cat/master?v例如：[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?vip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name172.21.0.5 36 98 14 0.22 0.60 1.09 cdfhilmrstw - es02172.21.0.3 28 98 14 0.22 0.60 1.09 cdfhilmrstw * es01172.21.0.4 61 98 14 0.22 0.60 1.09 cdfhilmrstw - es03 help查看某接口支持查询的详细字段12345678[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?helpid | id,nodeId | unique node idpid | p | process idip | i | ip addressport | po | bound transport porthttp_address | http | bound http addressversion | v | es version。。。 查询某接口指定字段1234# curl http://192.168.1.40:9200/_cat/nodes?h=id,pid,ip,port,http_address,version,uptimet_iA 6 172.21.0.5 9300 172.21.0.5:9200 7.12.0 56.8mWIm1 6 172.21.0.3 9300 172.21.0.3:9200 7.12.0 56.8m3bzJ 6 172.21.0.4 9300 172.21.0.4:9200 7.12.0 56.8m health的green状态123# curl http://192.168.1.40:9200/_cat/health?vepoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1618470428 07:07:08 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 总结 带着概念参照官网安装还是挺简单的，练习接口可以了解学习集群及ES的概念","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb-恢复数据","slug":"mariadb-恢复数据","date":"2019-07-25T01:41:54.000Z","updated":"2020-07-08T12:30:31.812Z","comments":true,"path":"2019/07/25/mariadb-恢复数据/","link":"","permalink":"http://www.digmyth.com/2019/07/25/mariadb-恢复数据/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"搜索引擎与Lucene基础","slug":"log_lucene-认识","date":"2019-06-15T02:42:36.000Z","updated":"2021-03-17T09:47:30.627Z","comments":true,"path":"2019/06/15/log_lucene-认识/","link":"","permalink":"http://www.digmyth.com/2019/06/15/log_lucene-认识/","excerpt":"","text":"简单常识：1千万条日志记录存储大小为2G1亿条日志记录 5G8亿条日志记录 40G 程序： 算法+数据结构存储+前端访问接口 开发全文搜索程序： 算法+支持这种场景的特定存储结构海量日志分析： 搜索引擎搜索引擎： 存储时需要有索引链–&gt; 搜索组件（有请求接口有请求返回或展示UI） 收集日志 –&gt; 对收集过来日志检索原始内容–&gt; 构建文档 –&gt;文档分析或切词 –&gt; 建立索引链（创建倒排索引）而SQL的索引： 正排索引 文档数据库： Mongodb、elasticsearch(每一行中每字段文档数据格式各不一样) 著名开源搜索开发库或底层搜索引擎: Lucene添加收集文档，搜索引擎，提供上层搜索接口： Elasticsearch 包含一个或多个域的容器，文档就是由Field、Value组成Lucene没有全局模式：no schema,没有预先定义字段及类型域有很多选项： 索引选项、存储选项、每个域向量使用选项索引选项用于通过倒排索来控制文本是否可被搜索，成为索引中的项才能被搜索： index: ANALYZIED 需要分析或分词并单独构建索引项 index: not_ANALYZIED 不分析或不分词，把整个内容当一个索引项 index: analyzied norms 类似index: ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.Not_analyzied_norms 类似not_ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.NO : 不对此域的值进行索引，因此不能被搜索存储选项: 是否需要存储域的真实值 title: This is a Notebook. –&gt; this notebook 有效信息即可 store.YES: 存储真实值 store.NO: 不存储真实值 (每个项或每个域)向量选项用于在搜索期间控制该文档所有的唯一项都能完全从文档域中检索时使用 文档和域的加权操作： 通过改变某一个文档相对于某一个词的加权因子，对值改大改小可以决定它对用户的重要程序，如竟价排名 加权计算标准：方案很多 搜索：查询Lucene索引时，返回一个有序的scoreDoc对象：查询时Lucene会为每个文档计算出score,API: IndexSearcher: 搜索索引入口 Query及其子类：构建搜索查询语句 QueryParser: 搜索分析后返回结果 TopDocs 某查询分值top10 Lucene的多样化查询： IndexSearcher中的search方法，完成搜索时传入Query实例参数进行，就是告之到底要搜索什么，你键入的搜索关键词分析以后作为Query对象，传递给IndexSearch方法 常用几种查询方法123456789101112131415161718TermQuery： 对索引中特定项进行搜索，Term是索引中的最小索引片段，每个Term包含一个域名和文本值title: This is a Desktitle: Tis is a table索引构建方式： This： （1） (2) Desk： (1) table: (2) TermRangeQuery:索引中每个Term对象上的值都会按照字典编排顺序进行排序，并允许在Lucene TermRangeQuery 提供的范围内进行搜索 大白话就是TermQuery指定一个域中搜索，TermRangeQuery可以指定多个域内搜索 NumericRangeQuery： 只是数值范围内搜索 PrefixQuery： 用于搜索以指定字符串开头的域 BooleanQuery：用于实现组合查询，与或非 and 、or、 not PhraseQuery： 能够跟据位置信息定义文档 WildcardQuery：通配符 FuzzyQuery： 模糊查询 levenshtein处理 总结 Lucene是底层搜索引擎或搜索开发库，基于Lucene库开发有了Elasticsearch存储、搜索引擎系统","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"kubernetes-dashboard-TLS坑","slug":"Kubernetes-dashboard-TLS坑","date":"2019-06-11T12:51:41.000Z","updated":"2019-06-15T15:11:45.437Z","comments":true,"path":"2019/06/11/Kubernetes-dashboard-TLS坑/","link":"","permalink":"http://www.digmyth.com/2019/06/11/Kubernetes-dashboard-TLS坑/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"python-celery-Flask","slug":"python-Celery-Flask","date":"2019-02-10T09:03:01.000Z","updated":"2019-02-21T10:31:24.286Z","comments":true,"path":"2019/02/10/python-Celery-Flask/","link":"","permalink":"http://www.digmyth.com/2019/02/10/python-Celery-Flask/","excerpt":"","text":"一、基本使用Celery是由Python开发的一个简单、灵活、可靠的处理大量任务的分发系统，可以实时处理任务，也可以定时异步处理任务。每次分发任务后得到一个ID，然后根据这个ID查询任务执行情况。 并且celery需要rabbitMQ、Redis等充当broker来进行消息的接收。 安装1pip3 install celery eventlet # windows系统需要eventlet模块 下面我们来快速上手celery编辑s1.py1234567891011#!/usr/bin/env python3from celery import Celerycel = Celery(&apos;xxx&apos;, broker=&quot;redis://192.168.1.40&quot;, backend=&apos;redis://192.168.1.40&apos;)@cel.taskdef f1(x,y): return x+y 然后把s1这个work工作起来，进入命令终端,如果在linux系统，不用添加参数-P eventlet1E:\\pro\\xxx_dir&gt; celery worker -A s1 -l info -P eventlet 编辑s2.py1234567891011121314151617#!/usr/bin/env python3import datetimefrom s1 import f1# 立即执行result = f1.delay(4,6)print(result.id)# 定时执行ctime = datetime.datetime.now()# ctime = datetime.datetime(year=2019,month=2,day=21,hour=14,minute=8)utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp())s10 = datetime.timedelta(seconds=10)ctime_x = utc_time + s10result = f1.apply_async(args=[1,3],eta=ctime_x)print(result.id) 编辑s3.py12345678910111213141516171819202122232425#!/usr/bin/env python3from celery.result import AsyncResultfrom demo1.s1 import celasync = AsyncResult(id=&quot;f43bce52-9503-475e-9d19-4a46ed910a8e&quot;,app=cel)if async.successful(): ret = async.get() # 获取值 #async.forget() # 删除值 print(ret)elif async.failed(): print(&apos;执行失败&apos;)elif async.status == &apos;PENDING&apos;: print(&apos;任务等待中被执行&apos;)elif async.status == &apos;RETRY&apos;: print(&apos;任务异常后正在重试&apos;)elif async.status == &apos;STARTED&apos;: print(&apos;任务已经开始被执行&apos;)else: print(&quot;任务执行失败&quot;)async.revoke() # 取消一个任务，当一个任务正在执行，不能取消async.revoke(terminate=True) # 终止一个任务，当一个任务正在执行，可以被终止 二、多目录结构经过上面快速上手的学习，了解了celery的基本使用，那么重组一下代，形成项目中多目录结构看看相互之间如何调用？ 创建一个celery_tasks的目录，里面一般保存2类文件，其中一个文件名称必须为celery,另一类就是定义task任务的文件，可以有多个。 定义celery_tasks/celery.py文件,如果有多个task任务文件，可以用includ列表包含进来123456789101112131415#!/usr/bin/env python3from celery import Celery# from celery.schedules import crontabcel = Celery(&apos;xxxxxx&apos;, broker=&apos;redis://192.168.1.40:6379&apos;, backend=&apos;redis://192.168.1.40:6379&apos;, include=[&apos;celery_tasks.task1&apos;,) #include=[&apos;celery_tasks.task1&apos;,&apos;celery_tasks.task2&apos;])# 时区cel.conf.timezone = &apos;Asia/Shanghai&apos;# 是否使用UTCcel.conf.enable_utc = False 在多目录结构中，跑celery work时不用指定到文件，指定目录即可1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 定义celery_tasks/task1.py1234567#!/usr/bin/env python3from .celery import cel@cel.taskdef f1(x,y): return x+y 有了celery.py文件和task任务文件，我们就可以在任意地方调用任务了。 比如定义test/exec1.py文件来执行任务123456#!/usr/bin/env python3from celery_tasks.task1 import f1result = f1.delay(4,6)print(result.id) 定义test/exec2.py文件来获取任务执行结果,需要提供任务ID1234567891011#!/usr/bin/env python3from celery_tasks.celery import celfrom celery.result import AsyncResultasync = AsyncResult(id=&quot;be6bb021-da48-46a9-b1bc-94b987f7c8a7&quot;,app=cel)if async.successful(): print(async.get())else: print(&quot;任务执行失败&quot;) 三、Flask中的例用有了上面celery的认识，我们来简单写点代码，看一下在Flask框架中celery是如何使用的？ 定义Flask项目启动文件app.py 写线上代码时是要把任务保存在数据库中的，这里仅作示例就保存在了HISTORY全局变量中了.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/env python3from flask import Flask,request,render_template,redirectfrom celery_tasks.task2 import deployapp = Flask(__name__)HISTORY = []@app.route(&apos;/index&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: return render_template(&apos;index.html&apos;,history=HISTORY)@app.route(&apos;/publish&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def publish(): if request.method == &quot;GET&quot;: return render_template(&apos;publish.html&apos;) else: version = request.form.get(&quot;version&quot;) hosts = request.form.getlist(&quot;hosts&quot;) print(version,hosts) import datetime ctime = datetime.datetime.now() utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp()) ctime_10 = utc_time + datetime.timedelta(seconds=10) result = deploy.apply_async(args=[version,hosts],eta=ctime_10) HISTORY.append(&#123;&quot;version&quot;:version,&quot;hosts&quot;:hosts,&quot;task_id&quot;:result.id&#125;) print(HISTORY) return redirect(&quot;/index&quot;)from celery.result import AsyncResultfrom celery_tasks.celery import cel@app.route(&apos;/check_result&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def check_result(): task_id = request.args.get(&quot;task_id&quot;) async = AsyncResult(id=task_id,app=cel) if async.successful(): result = async.get() print(result) # result.forget() # 将结果删除 return &quot;执行成功&quot; elif async.failed(): return &apos;执行失败&apos; elif async.status == &apos;PENDING&apos;: return &apos;任务等待中被执行&apos; elif async.status == &apos;RETRY&apos;: return &apos;任务异常后正在重试&apos; elif async.status == &apos;STARTED&apos;: return &apos;任务已经开始被执行&apos; else: return &quot;unkown status&quot;@app.route(&apos;/cancel&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def cancel(): task_id = request.args.get(&quot;task_id&quot;) async =AsyncResult(id=task_id,app=cel) async.revoke(terminate=True) for i in HISTORY: if task_id in i.values(): HISTORY.remove(i) return redirect(&quot;/index&quot;)if __name__ == &apos;__main__&apos;: app.run() 定义其中用到的templates/index.html123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;发布系统&lt;/h1&gt;&lt;a href=&quot;/publish&quot;&gt;添加发布任务&lt;/a&gt;&lt;table&gt; &#123;% for row in history %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.task_id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.version &#125;&#125;&lt;/td&gt; &#123;% for host in row.hosts %&#125; &lt;td&gt; &lt;span&gt;&#123;&#123; host &#125;&#125;&lt;/span&gt; &lt;/td&gt; &#123;% endfor %&#125; &lt;td&gt;&lt;a href=&quot;/check_result?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;查看&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/cancel?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;取消&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 定义其中用到的templates/publish.html1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;version&quot; placeholder=&quot;请输入要发布的版本&quot;&gt;&lt;/p&gt; &lt;p&gt; &lt;select name=&quot;hosts&quot; multiple=&quot;multiple&quot;&gt; &lt;option value=&quot;c1.com&quot;&gt;c1.com&lt;/option&gt; &lt;option value=&quot;c2.com&quot;&gt;c2.com&lt;/option&gt; &lt;option value=&quot;c3.com&quot;&gt;c3.com&lt;/option&gt; &lt;/select&gt; &lt;/p&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 定义其中的celery_tasks.task2.py文件,这里的deploy是真正定义任务的地方.12345678#!/usr/bin/env python3from .celery import cel@cel.taskdef deploy(version,hosts): print(version, hosts) # 定义想要执行的任务代码 return &apos;deploy ok&apos; 同样别望了先把work跑起来,再启动Flask1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 四、总结还需要多写代码在项目中总结celery…","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"ansible callback 重写","slug":"ansible-Callback-02","date":"2019-01-12T12:39:12.000Z","updated":"2019-01-13T13:01:21.969Z","comments":true,"path":"2019/01/12/ansible-Callback-02/","link":"","permalink":"http://www.digmyth.com/2019/01/12/ansible-Callback-02/","excerpt":"","text":"1.1 adhoc callback重写adhoc-callback.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象#^#Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)#^# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)#^# 重写CallbackBase父类class AdhocResultsCollector(CallbackBase): def __init__(self, *args, **kwargs): super(AdhocResultsCollector, self).__init__(*args, **kwargs) self.host_ok = &#123;&#125; self.host_unreachable = &#123;&#125; self.host_failed = &#123;&#125; def v2_runner_on_unreachable(self, result): self.host_unreachable[result._host.get_name()] = result def v2_runner_on_ok(self, result, *args, **kwargs): self.host_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.host_failed[result._host.get_name()] = resultcallback = AdhocResultsCollector()passwords = dict()tqm = TaskQueueManager(inventory=myinven, variable_manager=varmanager, loader=loader,options=options, passwords=passwords, stdout_callback=callback )result_status_code = tqm.run(play)print(callback.host_ok.items())result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;)for host,result in callback.host_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.host_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.host_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultprint(json.dumps(result_raw,indent=4)) 1.2 playbook callback重写写入示例playbook文件site.yml12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 编写play_book.py 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;, &apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;, &apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True, )# 重写CallbackBase父类class PlayBookResultsCollector(CallbackBase): CALLBACK_VERSION = 2.0 def __init__(self, *args, **kwargs): super(PlayBookResultsCollector, self).__init__(*args, **kwargs) self.task_ok = &#123;&#125; self.task_skipped = &#123;&#125; self.task_failed = &#123;&#125; self.task_status = &#123;&#125; self.task_unreachable = &#123;&#125; def v2_runner_on_ok(self, result, *args, **kwargs): self.task_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.task_failed[result._host.get_name()] = result def v2_runner_on_unreachable(self, result): self.task_unreachable[result._host.get_name()] = result def v2_runner_on_skipped(self, result): self.task_ok[result._host.get_name()] = result def v2_playbook_on_stats(self, stats): hosts = sorted(stats.processed.keys()) for h in hosts: t = stats.summarize(h) self.task_status[h] = &#123; &quot;ok&quot;:t[&apos;ok&apos;], &quot;changed&quot; : t[&apos;changed&apos;], &quot;unreachable&quot;:t[&apos;unreachable&apos;], &quot;skipped&quot;:t[&apos;skipped&apos;], &quot;failed&quot;:t[&apos;failures&apos;] &#125;# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords )# 把重写的CallbackBase父类加载进playbookcallback = PlayBookResultsCollector()playbook._tqm._stdout_callback = callbackplaybook.run()result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;, skipped = &#123;&#125;, status = &#123;&#125;,)for host,result in callback.task_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.task_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.task_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultfor host,result in callback.task_skipped.items(): result_raw[&apos;skipped&apos;][host] = result._resultfor host, result in callback.task_status.items(): result_raw[&apos;status&apos;][host] = resultprint(json.dumps(result_raw,indent=4)) 执行示例python3 play_book.py 返回类似如下结果12345678910111213141516171819202122232425262728293031323334&#123; &quot;success&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;changed&quot;: true, &quot;end&quot;: &quot;2019-01-14 04:50:06.190607&quot;, &quot;stdout&quot;: &quot;&quot;, &quot;cmd&quot;: &quot;touch /tmp/site.txt&quot;, &quot;rc&quot;: 0, &quot;start&quot;: &quot;2019-01-14 04:50:06.186466&quot;, &quot;stderr&quot;: &quot;&quot;, &quot;delta&quot;: &quot;0:00:00.004141&quot;, &quot;invocation&quot;: &#123; &quot;module_args&quot;: &#123; &quot;creates&quot;: null, &quot;executable&quot;: null, &quot;_uses_shell&quot;: true, ... 略 &#125; &#125;, &#125; &#125;, &quot;failed&quot;: &#123;&#125;, &quot;unreachable&quot;: &#123;&#125;, &quot;skipped&quot;: &#123;&#125;, &quot;status&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;ok&quot;: 2, &quot;changed&quot;: 1, &quot;unreachable&quot;: 0, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 &#125; &#125;&#125; 总结 adhoc重写方法如host_ok,host_failed,host_unreachable playbook重写方法如task_ok,task_failed,task_unreachable,task_skipped,task_status,task_changed 返回如callback.task_ok.items(),其中键为host,值为result对象，result._result得到一个字典类型的详细结果 &lt;&lt; 完结 &gt;&gt;","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"python3下ansible api学习","slug":"ansible-api-01","date":"2019-01-10T12:39:12.000Z","updated":"2019-01-13T12:36:03.633Z","comments":true,"path":"2019/01/10/ansible-api-01/","link":"","permalink":"http://www.digmyth.com/2019/01/10/ansible-api-01/","excerpt":"","text":"1.1 ansible api基础环境说明： python version: python3 ansible version: 2.7.5 inventory file: dir1/inventory/multinode 清单文件定义： dir1/inventory/multinode12345678910[control]192.168.1.6 var1=&quot;ssss&quot; ansible_ssh_user=root ansible_ssh_pass=&apos;123&apos;[nova:children]control[cinder:children]control[glance:children] 一个单一文件进行简单的接口学习: dir1/f1.py1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/env python3import os,sys,jsonfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.plugins.callback import CallbackBaseimport ansible.constants as CBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&quot;dir1/inventory/multinode&quot;)loader = DataLoader()inven = InventoryManager(loader=loader,sources=[source,])# print(inven.get_hosts())inven.add_group(&apos;test_group2&apos;)print(inven.get_groups_dict())inven.add_host(host=&apos;192.168.1.7&apos;,port=22,group=&apos;test_group2&apos;)print(inven.get_groups_dict())host = inven.get_host(hostname=&apos;192.168.1.6&apos;)variableman = VariableManager(loader=loader,inventory=inven)vars = variableman.get_vars(host=host)# print(json.dumps(vars,indent=4))variableman.set_host_variable(host=host,varname=&apos;k1&apos;,value=&apos;v1&apos;) # 局部的x = variableman.get_vars(host=host)print(x[&apos;k1&apos;])print(variableman.__dict__)variableman._extra_vars = &#123;&quot;k2&quot;: &quot;v2&quot;&#125; # 添加全局变量x = variableman.get_vars() # 不传host说明是全局的 执行测试1python3 dir1/f1.py # 输出调用信息对照接口就知道只些方法是干什么的了 1.2 adhoc模式示例学习编辑dir1/adhoc.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)passwords = &#123;&#125;tqm = TaskQueueManager(inventory=myinven,variable_manager=varmanager, loader=loader,options=options,passwords=passwords)result = tqm.run(play) 执行测试1python3 dir1/adhoc.py 输出信息和命令行ansible直接模块运行一样，任务正常执行 1.3 playbook 示例学习编辑dir1/play_book.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords)playbook.run() 用到的site.yml文件示例如下12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 执行测试1python3 play_book.py 输出信息和ansible-playbook命令行输出一样，任务正常执行","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"veth-pair+namespace","slug":"veth-pair+namespace","date":"2019-01-10T01:41:54.000Z","updated":"2021-01-21T09:00:43.702Z","comments":true,"path":"2019/01/10/veth-pair+namespace/","link":"","permalink":"http://www.digmyth.com/2019/01/10/veth-pair+namespace/","excerpt":"","text":"查找对端veth pair12345678root@k8s-m:/data/dashboard# cat /sys/class/net/cali3b4bae3cec1/iflink 4root@k8s-m:/data/dashboard# ethtool -S cali3b4bae3cec1NIC statistics: peer_ifindex: 4 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0 namespace场景参考如下1234567891011121314# ip link add veth-a type veth peer name veth-b # 生成veth pair对，相当于一根网线# ip netns add ns1 # 创建名称空间# ip link set veth-a netns ns1 #将网线A端加入名称容间root@k8s-m:~# ip netns exec ns1 ethtool -S veth-a # veth-a的对端编号16NIC statistics: peer_ifindex: 16 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0root@k8s-m:~# ip netns exec ns1 cat /sys/class/net/veth-a/iflink # veth-a的对端编号1616# ip a # 查看编号16的设备16: veth-b@if17: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether be:ec:d2:fc:64:3f brd ff:ff:ff:ff:ff:ff link-netns ns1 利用ovs实现跨主机通信的简单应用12345678ovs-vsctl add-br ovs0ovs-vsctl add-port ovs0 eth0物理网卡加进ovs可能会断网，解决办法：# ifconfig ovs0 172.16.10.10/24# ifconfig eth0 0.0.0.0.0# route del default# route add default gw 172.16.10.254 dev ovs0# ifconfig ovs0 hw ether $eth0_mac 注意： 完事后放在开机启动项，不然开机失效连不上机","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"OpenVSwitch","slug":"openvswitch","date":"2019-01-08T01:41:54.000Z","updated":"2019-05-26T15:16:23.168Z","comments":true,"path":"2019/01/08/openvswitch/","link":"","permalink":"http://www.digmyth.com/2019/01/08/openvswitch/","excerpt":"","text":"交换机端口查看12345# ovs-vsctl show# ovs-ofctl show# ovs-ofctl show br-int# ovs-ofctl show br-tun# virsh domiflist instance-00000017 open flow流表查看12345678# ovs-ofctl dump-flows br-int# ovs-ofctl dump-flows br-tun# ip netns exec qrouter-c266eb04-0be8-448f-986f-6eef3a9bcdce ifconfig# dpkg-query -S /sbin/brctl# apt-get install bridge-utils# brctl show 添加br-ex网桥：123456# ovs-vsctl add-br br-ex桥加载到物理网口：# ovs-vsctl add-port br-ex eth0添加到不同vlan与端口模式# ovs-vsctl add-port br-ex eth1 tag=100 //设置为access端口# ovs-vsctl add-port br-ex eth2 trunk=200 //设置为trunk端口,允许vlan200通过，默认允许所有vlan直接转发 列出所有桥：123ovs-vsctl list-brovs-vsctl list-ports br-intovs-vsctl port-to-br port_name 列出桥上所接端口123# ovs-vsctl list-ports br-ex# ovs-ofctl dump-ports br-ex# ovs-vsctl list port 根据交换机某个接口名称查端口号12# ovs-vsctl list interface tap0_br | grep &quot;ofport &quot;ofport : 1 流表操作注意： 流量匹配是有顺序的,table0–&gt;table1—&gt;table3–&gt;table4 –&gt;table5…123456789101112# ovs-vsctl add-br vswitch0#发现有一条actions为NORMAL的流表项，这是默认存在的，用以实现交换机的基本动作# ovs-ofctl dump-flows vswitch0cookie=0x0, duration=267197.837s, table=0, n_packets=459, n_bytes=42190, idle_age=387, hard_age=65534, priority=0 actions=NORMAL# ovs-ofctl del-flows vswitch0 # 流表删除后所有流量将被丢弃# ovs-ofctl dump-flows vswitch0# 可以在table0添加类似规则使流量正常转发,没写表名默认table0# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot; 12345#flow优先级越高，会优先匹配,以下规则drop优先，流量被丢弃# ovs-ofctl del-flows br-int# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl add-flow vswitch0 &quot;priority=3,in_port=1,actions=drop&quot; 将table0的规则添加到table1上，发出流量也是不通的，因为流表是有顺序的，table0没有匹配到，流量被丢弃1234567# ovs-ofctl del-flows vswitch0# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl dump-flows vswitch0NXST_FLOW reply (xid=0x4): cookie=0x0, duration=3.485s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=1,in_port=1 actions=output:4 cookie=0x0, duration=3.033s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=2,in_port=4 actions=output:1 现在给table0加上一条将数据包发送到table1处理的flow, 发现流量正常，这就明白了多个table之间是如何协调工作的。1# ovs-ofctl add-flow vswitch0 &quot;table=0,actions=goto_table=1&quot; 组表操作添加一个组表1# ovs-ofctl -O OpenFlow13 add-group vswitch0 &quot;group_id=1,type=select,bucket=resubmit(,1)&quot; 查看组表1# ovs-ofctl -O OpenFlow13 dump-groups vswitch0 在table0中增加两条flow，目的是将数据包发送到group table112# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=1,actions=group:1&quot;# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=4,actions=group:1&quot; 向table1中增加两条flow，真正的数据转发在table1中进行,流量也正常通过12# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot; 虚机挂在网桥上xml格式定义openvswitch网桥，以便于virt-install –network参数指定网桥启动虚机1234567# ovsbr0.xml&lt;network&gt; &lt;name&gt;ovsbr0&lt;/name&gt; &lt;forward mode=&apos;bridge&apos;/&gt; &lt;bridge name=&apos;ovsbr0&apos;/&gt; &lt;virtualport type=&apos;openvswitch&apos;/&gt;&lt;/network&gt; 123virsh net-define ovsbr0.xmlvirsh net-start ovsbr0virsh net-autostart ovsbr0 在安装kvm虚拟机时使用ovsbr012345678910virt-install \\ -n vm-name \\ -r 4096 \\ --disk path=/data/kvm/rhel75-vm1.qcow2,format=qcow2,size=60 \\ --vcpus 4 \\ --noautoconsole \\ --cdrom=/data/kvm/iso/rhel75-x86_64.iso \\ --os-type=linux \\ --network network:ovsbr0 \\ --vnc --vnclisten=0.0.0.0 --vncport=5901 也可以将正在运行的KVM虚拟机的vnet网络接口强制接到ovs网桥上12#virsh dumpxml $vmname|grep vnet 查看某虚拟机在宿主机上对应的网络接口add-port ovsbr0 vnetxx 网桥接口划vlan并配IP命令12ovs-vsctl add-port ovsbr0 tag10 tag=10 -- set interface tag10 type=internalifconfig tag10 192.168.10.10/24 up 1234# ip link命令设置vlan接口命令ip link add link eth0 name eth0.10 type vlan id 10ifconfig eth0.10 192.168.10.33 netmask 255.255.255.0 broadcast 192.168.10.255 uproute add default gw 192.168.10.1 dev eth0.10 总结：这里只是命令总结，并没有什么实验逻辑","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"download technique","slug":"linux-download-technique","date":"2018-12-01T00:48:08.000Z","updated":"2019-05-26T11:37:37.080Z","comments":true,"path":"2018/12/01/linux-download-technique/","link":"","permalink":"http://www.digmyth.com/2018/12/01/linux-download-technique/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-socket-高级篇","slug":"web-socket-02","date":"2018-11-25T12:51:41.000Z","updated":"2018-11-27T02:19:03.844Z","comments":true,"path":"2018/11/25/web-socket-02/","link":"","permalink":"http://www.digmyth.com/2018/11/25/web-socket-02/","excerpt":"","text":"前面我们学习了WebSocket，我们知道客户端要与服务端进行WebSoccket通信，客户端要和服务端握手，握手成功后才能通信。 握手： 客户端发出握手请求，服务端在握手请求中取出“Sec-WebSocket-Key”，把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 如果给定了“Sec-WebSocket-Key”，那么摘要算法代码如下，服务器会把摘要后值返回给客户端完成握手操作。12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 如果我们己经有一个socket server，真的能收到握手信息吗？socker_server.py1234567891011121314#!/usr/bin/env python3import socketconn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)conn.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)conn.bind((&apos;127.0.0.1&apos;,8000))conn.listen(5)client,addr = conn.accept()print(client.recv(8192))print(addr) 如何发送握手请求？方式一：可直接在浏览器console终端下手动发送socket请求，请求中包含握手信息12&gt;var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;)undefined 此时浏览器会报VM44:1 WebSocket connection to &#39;ws://127.0.0.1:8000/xxoo&#39; failed: Connection closed before receiving a handshake response的错，是因为服务器端没有返回摘要后的值，表示没有握手成功。 方式二：直接编写client.html用浏览器运行12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;WebSocket test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;WebSocket study....&lt;/h1&gt; &lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 此时服务器会收到类似b&#39;GET /xxoo HTTP/1.1\\r\\nHost: 127.0.0.1:8000\\r\\nConnection: Upgrade...client_max_window_bits\\r\\n\\r\\n&#39;信息，里面包含“Sec-WebSocket-Key” 如果我们用一个函数手动取出“Sec-WebSocket-Key”，然后手动摘要后把值再手动返回给客户端，这样就握手成功不会报错了。 处理握手信息的函数(get_headers)如下123456789101112131415161718192021def get_headers(data): &quot;&quot;&quot; 将请求头格式化成字典 :param data: :return: &quot;&quot;&quot; header_dict = &#123;&#125; data = str(data, encoding=&apos;utf-8&apos;) for i in data.split(&apos;\\r\\n&apos;): print(i) header, body = data.split(&apos;\\r\\n\\r\\n&apos;, 1) header_list = header.split(&apos;\\r\\n&apos;) for i in range(0, len(header_list)): if i == 0: if len(header_list[i].split(&apos; &apos;)) == 3: header_dict[&apos;method&apos;], header_dict[&apos;url&apos;], header_dict[&apos;protocol&apos;] = header_list[i].split(&apos; &apos;) else: k, v = header_list[i].split(&apos;:&apos;, 1) header_dict[k] = v.strip() return header_dict 把摘要后的值返回给客户端1234567891011121314conn, address = sock.accept()data = conn.recv(1024)headers = get_headers(data) # 提取请求头信息# 对请求头中的sec-websocket-key进行加密response_tpl = &quot;HTTP/1.1 101 Switching Protocols\\r\\n&quot; \\ &quot;Upgrade:websocket\\r\\n&quot; \\ &quot;Connection: Upgrade\\r\\n&quot; \\ &quot;Sec-WebSocket-Accept: %s\\r\\n&quot; \\ &quot;WebSocket-Location: ws://%s%s\\r\\n\\r\\n&quot;magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;value = headers[&apos;Sec-WebSocket-Key&apos;] + magic_stringac = base64.b64encode(hashlib.sha1(value.encode(&apos;utf-8&apos;)).digest())response_str = response_tpl % (ac.decode(&apos;utf-8&apos;), headers[&apos;Host&apos;], headers[&apos;url&apos;])conn.send(bytes(response_str, encoding=&apos;utf-8&apos;)) 摘要后的值返回给客户端后就完成了握手过程，客户端就不会再报连接错误了。 接收客户端发来的数据完成握手操作后就客户端就可以向服务器发送数据了，只需console终端sock.send(&#39;dimyth&#39;) 服务端接收12info = conn.recv(1024)print(info) # 这里是字节 服务器端收到客户端发来的数据，这个数据需要服务器解包，解包过程如下1234567891011121314151617181920payload_len = info[1] &amp; 127if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:]elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:]else: extend_payload_len = None mask = info[2:6] decoded = info[6:]bytes_list = bytearray()for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk)body = str(bytes_list, encoding=&apos;utf-8&apos;)print(body) # 解出真正数据 那么服务器给客户端发送数据要就封包。123456789101112131415161718192021def send_msg(conn, msg_bytes): &quot;&quot;&quot; WebSocket服务端向客户端发送消息 :param conn: 客户端连接到服务器端的socket对象,即： conn,address = socket.accept() :param msg_bytes: 向客户端发送的字节 :return: &quot;&quot;&quot; import struct token = b&quot;\\x81&quot; length = len(msg_bytes) if length &lt; 126: token += struct.pack(&quot;B&quot;, length) elif length &lt;= 0xFFFF: # 65535 token += struct.pack(&quot;!BH&quot;, 126, length) else: token += struct.pack(&quot;!BQ&quot;, 127, length) msg = token + msg_bytes conn.send(msg) return True 对上面BHQ说明一下，B代表1个字节，H代表2个字节，Q代表8个字节 客户端如何收消息呢？1234567891011&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;); sock.onmessage = function (event) &#123; /* 服务器端向客户端发送数据时，自动执行 */ var response = event.data; var newTag = document.createElement(&apos;div&apos;); newTag.innerHTML = response; document.getElementById(&apos;content&apos;).appendChild(newTag); &#125;;&lt;/script&gt;","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"web-socket-基础知识","slug":"web-socket-01","date":"2018-11-06T12:51:41.000Z","updated":"2018-11-25T11:24:51.562Z","comments":true,"path":"2018/11/06/web-socket-01/","link":"","permalink":"http://www.digmyth.com/2018/11/06/web-socket-01/","excerpt":"","text":"WebSocket在什么场景下使用？页面实时展示数据 轮询：setInterval()前端轮询请求，性能低下 长轮询：把请求pending住多少秒后再返回，量大时也损耗服务器性能 WebSocket: 建立socket双向传输数据，高效。 那么什么是WebSocket参考链接 先来看下http协议 http协议： 1 格式：请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接：一次请求，一次响应，然后断开连接。 那么WebSocket协议是怎么样的呢？ WebSocket： 1 格式： 请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接： 创建socket通道后不断开，全双工(full-duplex)通信，可以相互发消息。 WebSocket实现了浏览器与服务器全双工(full-duplex)通信，能主动向浏览器发送消息，但需要浏览器支持websocket封包解包或加密解密。其本质是保持TCP连接，在浏览器和服务端通过Socket进行通信。 WebSocket特性 WebSocket 是独立的、创建在 TCP 上的协议。 Websocket 通过 HTTP/1.1 协议的101状态码进行握手。 为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking） 总结起来：WebSocket是一种在单个TCP连接上进行全双工通信的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。 WebSokcet工作原理首先客户端要验证服务器是否支持websocket协议，能不能一起玩耍？ 客户端发送playload data之前会发送握手字符串，服务器把握手字符串加密后返回给客户端，此时客户端也把字符串按特定算法加密，把客户端加密后的字符串与服务器加密后的字符串进行比较，如果一致则客户端认为服务器支持WebSocket协议通信，可以相互一起玩耍。 握手时的特定算法是什么呢？代码如下12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 能不能一起玩耍，官方术语就是创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）. 不管怎么说，WebSocket允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。 什么？看不懂，一言不合上代码，下面是一个典型的Websocket握手请求. 客户端请求1234567GET / HTTP/1.1Upgrade: websocketConnection: UpgradeHost: example.comOrigin: http://example.com:8002Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==Sec-WebSocket-Version: 13 服务器回应12345HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=Sec-WebSocket-Location: ws://example.com:8002/ 字段说明 Connection必须设置Upgrade，表示客户端希望连接升级。 Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。 Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13. Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是,与Referer不同的是，Origin只包含了协议和主机名称。 服务器解包细节官方WebSocket instructions 注意的是客户端和服务端传输数据时，需要对数据进行封包解包。客户端有 javascript类库实现封包解包，但服务器需要手动实现。 当conn,addr = sk.accept()时，服务器端代码如下12345678910111213141516171819202122info = conn.recv(8096) payload_len = info[1] &amp; 127 if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:] elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:] else: extend_payload_len = None mask = info[2:6] decoded = info[6:] bytes_list = bytearray() for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk) body = str(bytes_list, encoding=&apos;utf-8&apos;) print(body) 要看懂这段代码必须了解websocket解包细节. 当客户端加密发送了socket data数据时，服务端收到数据是这样的. b&#39;\\x81\\x82\\xac\\xde\\xdd\\xf4\\xdc\\xae&#39; 需要对这样的数据解密才能拿到真的数据，跟据第二个字节后7位的值取数据.1234567891011121314151617180 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-------+-+-------------+-------------------------------+|F|R|R|R| opcode|M| Payload len | Extended payload length ||I|S|S|S| (4) |A| (7) | (16/64) ||N|V|V|V| |S| | (if payload len==126/127) || |1|2|3| |K| | |+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +| Extended payload length continued, if payload len == 127 |+ - - - - - - - - - - - - - - - +-------------------------------+| |Masking-key, if MASK set to 1 |+-------------------------------+-------------------------------+| Masking-key (continued) | Payload Data |+-------------------------------- - - - - - - - - - - - - - - - +: Payload Data continued ... :+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +| Payload Data continued ... |+---------------------------------------------------------------+ 1234value = socket_data[1] &amp; 127value &lt;=125 b&apos;\\x81\\x82 \\xac\\xde\\xdd\\xf4\\xdc\\xae&apos; # 数据在第2个节字后value =126 b&apos;\\x81\\x82\\xac\\xde \\xdd\\xf4\\xdc\\xae&apos; # next 16bit(2个字节)，数据在第4个节字后 value =127 xxx... # next 64bit(8个字节), 数据在第10个节字后 其中头32bits为掩码，真正数据还要去掉这4字节，取真正数据真不容易。 好了,WebSocket所有知识都在这里了，慢慢品味知识的韵味。","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"kubernetes-dashboard","slug":"Kubernetes-dashboard","date":"2018-10-01T12:51:41.000Z","updated":"2019-06-15T04:02:25.581Z","comments":true,"path":"2018/10/01/Kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2018/10/01/Kubernetes-dashboard/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"linux dmesg时间戳换算","slug":"linux-dmesg","date":"2018-08-16T01:42:54.000Z","updated":"2021-01-29T09:46:40.249Z","comments":true,"path":"2018/08/16/linux-dmesg/","link":"","permalink":"http://www.digmyth.com/2018/08/16/linux-dmesg/","excerpt":"","text":"dmesg系统内核里的时间戳转换为人类可以看懂的时间 dmesg记录的是自系统开机那刻到出事故时的时间戳 开机时间戳=当时时间戳-机器运行时间戳dmesg_time=开机时间戳+ dmesg记录时间戳再拿着dmesg_time时间戳换算就好了 123456789dmesg_time=`echo &quot;$(date +%s) - $(cat /proc/uptime | cut -f 1 -d&apos; &apos;) + 84679.822059&quot; | bc`echo $dmesg_time/proc/uptime 第一列表示为系统开机时间，根据这个值和当前时间可以获取到dmesg日志中时间发生的时间时间戳的转换为时间[root@site1 ~]# date -d &quot;@$&#123;dmesg_time&#125;&quot; &apos;+%Y-%m-%d %H:%M:%S&apos;2019-01-03 11:10:54","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"cinder多后端逻辑","slug":"cinder-vol-多后端","date":"2018-08-08T01:41:54.000Z","updated":"2019-05-26T12:41:06.912Z","comments":true,"path":"2018/08/08/cinder-vol-多后端/","link":"","permalink":"http://www.digmyth.com/2018/08/08/cinder-vol-多后端/","excerpt":"","text":"cinder配置逻辑123456789101112131415enable_backens=backend1,backend2,backend3[backend1]volume_driver=cinder.xxvolume_backend_name=sata[backend2]volume_driver=cinder.xxvolume_backend_name=ssd[backend3]volume_driver=cinder.xxvolume_backend_name=rbdcinder type-create satacinder type-key sata set volume_backend_name=satacinder create --volume-type sata --display-name vol_stat 20 vmware启用thick配置123456789101、运行命令：cinder type-create thick_volume（注：创建云硬盘类型）2、运行命令：cinder type-key thick_volume set vmware:vmdk_type=thick（注：thick为Vmware使用）3、运行命令：cinder type-key thick_volume set volume_backend_name=fusionstorage_sata3copy（注：指定后端）4、运行命令：glance image-list（注：查看镜像ID）5、运行命令：cinder create --image-id “镜像ID” --volume-type thick_volume --display-name vol-thick 20（注：创建一个20G大小的云硬盘，使用刚刚创建的云硬盘类型）","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"kubernetes-入门","slug":"Kubernetes","date":"2018-08-01T12:51:41.000Z","updated":"2018-08-26T04:03:32.956Z","comments":true,"path":"2018/08/01/Kubernetes/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes/","excerpt":"","text":"k8s 的世界12345678910- charts , k8s 的包， 类似 *.rpm 的东西- helm , k8s 的包管理机制，类似 yum 的东西openstack 容器化 ( docker 版本）- kolla-ansible- tripleoopenstack 容器化( k8s 版本）- openstack-helm- kolla-kubernetes openshift中有几种网络端口模式(暴露服务) hostnetworkhostnetwork 就是Docker的host网络，pod直接占用宿主机IP及端口，没什么可说的 hostporthostport 是在单宿主机通过IP+端口来映射容器或pod(-p 参数), 实现外部能访问容器服务或pod服务 nodeportnodeport也是在宿主机通过IP+端口来映射，与hostport不同之处是映射ServiceIP+端口，再转到pod服务 routerrouter是以hostnetwork网络模式跑在宿主机上的容器化haproxy pod, pod IP和端口就是节点的IP和端，对外暴露80、443、1936端口，haproxy中有service query 信息来自于etcd, 再通过service访问到pod服务。 注： router是hostnetwork网络模式就意味着一个节点只能运行一个router","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Dockerfile-详解","slug":"Dockerfile-详解","date":"2018-08-01T12:51:41.000Z","updated":"2018-10-24T06:18:33.872Z","comments":true,"path":"2018/08/01/Dockerfile-详解/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Dockerfile-详解/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-kubeadm","slug":"Kubernetes-kubeadm","date":"2018-08-01T12:51:41.000Z","updated":"2021-05-13T05:42:11.860Z","comments":true,"path":"2018/08/01/Kubernetes-kubeadm/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes-kubeadm/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Openshift-入门","slug":"Openshift","date":"2018-08-01T12:51:41.000Z","updated":"2018-07-29T10:51:12.609Z","comments":true,"path":"2018/08/01/Openshift/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Openshift/","excerpt":"","text":"前言","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"CentOS 7.x/Mysql limit","slug":"mysql-limit","date":"2018-07-25T01:41:54.000Z","updated":"2018-08-25T06:25:06.410Z","comments":true,"path":"2018/07/25/mysql-limit/","link":"","permalink":"http://www.digmyth.com/2018/07/25/mysql-limit/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"python-08-07-抽象类抽象方法.md","slug":"python-08-07-抽象类抽象方法","date":"2018-06-15T12:39:12.000Z","updated":"2018-12-21T18:24:42.815Z","comments":true,"path":"2018/06/15/python-08-07-抽象类抽象方法/","link":"","permalink":"http://www.digmyth.com/2018/06/15/python-08-07-抽象类抽象方法/","excerpt":"","text":"接口当多个类都有同样的方法，此时可以把相同的方法提练出来放在父类，但对继承父类的子类作约束就要用到接口了。 下面来段伪代码，在其它语言中普遍使用的语法，不适于python,这里主要学习其思想12345678910111213141516interface IFoo(): # 这个叫IFoo接口，约束实现该接口的类必须实现定义的方法 def exec(self):passclass A(IFoo): # 这个叫实现了IFoo接口，接口中的方法必须在当前类实现 def exec(self): return &quot;A.exec&quot;class B(IFoo): def exec(self): return &apos;B.exec&apos;def f1(arg): arg.exec()obj = A()print(f1.obj) 上面就是接口的概念或者用法，下面是用抽象类、抽象方法实现同样功能的原理伪代码123456789101112AbstractClass Foo(): 抽象类，抽象方法(有继承的特性，也有约束的特性) def abstractmethod():passclass A(Foo): def exec(self): return &apos;A.exec&apos; def f1(self): return &quot;A.f1&quot;obj = A()obj.exec() 那么如何用代码实现python抽象类、抽象方法呢？ 要用到from abc import abstractmethod,ABCMeta1234567891011121314151617from abc import abstractmethod,ABCMetaclass IFoo(metaclass=ABCMeta): @abstractmethod def exec(self):pass def f1(self): return &quot;cloud implement really method&quot;class A(IFoo): # 当前类继承了抽象类，当前类必须实现抽象类中的所有抽象方法，其它方法可以不用定义且可以直接继承使用。 def exec(self): return &quot;really method&quot;obj = A()print(obj.exec())print(obj.f1()) 好了， 这个接口或抽象类、抽象方法的学习完结。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Rabbitmq集群","slug":"Rabbitmq","date":"2018-06-08T01:41:54.000Z","updated":"2021-03-03T07:10:17.722Z","comments":true,"path":"2018/06/08/Rabbitmq/","link":"","permalink":"http://www.digmyth.com/2018/06/08/Rabbitmq/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"shell function语法","slug":"shell-func","date":"2018-05-29T01:41:54.000Z","updated":"2018-06-25T02:18:08.139Z","comments":true,"path":"2018/05/29/shell-func/","link":"","permalink":"http://www.digmyth.com/2018/05/29/shell-func/","excerpt":"","text":"Linux shell中函数语法很重要，它能让你写出很漂亮的shell,来看个例子学习下 1234567891011121314151617181920212223242526272829cat /usr/local/bin/show #!/bin/basha=&apos;df -hT&apos;b=&quot;ls&quot;echo_print() &#123; echo -e &quot;\\033[1;32m$1\\033[0m&quot;&#125;exec() &#123; echo_print &quot;$1&quot; $1 echo &quot;&quot;&#125;info () &#123; exec $a exec $b&#125;case &quot;$1&quot; ininfo) info;;*) echo &quot;Usage: show info&quot;;;esac 相当于定制了一个shell命令，运行一下看下效果12345678910111213#[root@wxqnode opt]# show infodfFilesystem 1K-blocks Used Available Use% Mounted on/dev/mapper/centos-root 22001156 1946776 20054380 9% /devtmpfs 2962076 0 2962076 0% /devtmpfs 2973096 0 2973096 0% /dev/shmtmpfs 2973096 33268 2939828 2% /runtmpfs 2973096 0 2973096 0% /sys/fs/cgroup/dev/sda1 1038336 145652 892684 15% /boottmpfs 594620 0 594620 0% /run/user/0lsrestart_cob study venv","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"get namespace","slug":"shell-get-namespace","date":"2018-01-29T01:41:54.000Z","updated":"2019-05-26T11:41:52.484Z","comments":true,"path":"2018/01/29/shell-get-namespace/","link":"","permalink":"http://www.digmyth.com/2018/01/29/shell-get-namespace/","excerpt":"","text":"get namespace shell123456789101112131415161718# read me :please mv this file to ns;use method #ns info#!/bin/bash#echo_print () &#123; echo -e &quot;\\033[32m$1\\033[0m&quot;&#125;nsinfo () &#123;for i in $(ip netns);do echo_print $i;ip netns exec $i ifconfig | grep &quot;inet addr:10&quot; |awk &apos;$1=$1&apos;;echo &apos;&apos; ;done&#125;case &quot;$1&quot; ininfo) nsinfo ;;*) echo_print &quot;Usage: ns info command&quot; ;;esac","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"linux awk","slug":"linux-awk","date":"2018-01-15T02:48:54.000Z","updated":"2021-01-29T09:59:47.621Z","comments":true,"path":"2018/01/15/linux-awk/","link":"","permalink":"http://www.digmyth.com/2018/01/15/linux-awk/","excerpt":"","text":"知识1： awk中,字符串或空串参与运算时会被当作数字0 1234[root@cloud-site mnt]# awk &apos;BEGIN&#123;a=&quot;test&quot;;print a; a=a+1;print a;a++;print a&#125;&apos;test12 知识2：直接引用一个数组中不存在的元素时，awk会自动创建这个元素，并且为其赋值为”空字符串”，同样参与运算时被当作数字0 123[root@cloud-site mnt]# awk &apos;BEGIN&#123;print t[&quot;ip&quot;]; t[&quot;ip&quot;]++;print t[&quot;ip&quot;]&#125;&apos;1 123456789101112示例;[root@cloud-site mnt]# cat test.txtaa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.txt | awk &apos;&#123;A[$1]++&#125;END&#123;for (i in A)&#123; print i,A[i]&#125; &#125;&apos;bb 2cc 2aa 2 示例一123456789101112[root@cloud-site mnt]# cat a.log1|aa|3|45|5|6|7|8|9|2|aa|3|44|5|6|7|8|9|3|aa|3|43|5|6|7|8|9|4|aa|3|44|5|6|7|8|9|5|bb|3|45|5|6|7|8|9|6|bb|3|4 |5|6|7|8|9|[root@cloud-site mnt]# awk -F&apos;|&apos; &apos;&#123;counxxt[$4]++;&#125;END&#123;for (i in counxxt) &#123;print i&quot;|&quot;counxxt[i]&#125;&#125;&apos; a.log44|245|24 |143|1 示例二12345678910111213141516171819202122if 表达式1？那么表达式2 ： 否则 表达式3[root@cloud-site mnt]# cat test.txt aa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.sh#awk &apos;BEGIN &#123;#printf &quot;%s,%5s,%4s\\n&quot;,&quot;IP&quot;,&quot;AVG&quot;,&quot;MAX&quot;#&#125;awk &apos;&#123;A[$1]++;SNF[$1]+=$NF;MAXNF[$1]=($NF&gt;MAXNF[$1]?$NF:MAXNF[$1])&#125;END&#123;for (IP in A) print IP,SNF[IP]/A[IP],MAXNF[IP]&#125;&apos; test.txt[root@cloud-site mnt]# sh test.shbb 57.5 75cc 77 99aa 99.5 100","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"python-django-26-API验证","slug":"python-django-26-API验证","date":"2018-01-06T12:51:41.000Z","updated":"2018-02-12T12:44:12.444Z","comments":true,"path":"2018/01/06/python-django-26-API验证/","link":"","permalink":"http://www.digmyth.com/2018/01/06/python-django-26-API验证/","excerpt":"","text":"前言 验证原理 代码实现 讲解Django api验证，基于Tornado签名Cookie源码 验证原理客户端 服务端和客户端共同存一个字符串，客户端用这个字符串和时间戳算一个md5值，把这个md5和时间戳组成一个字符串在请求头里发送给服务端。 服务端 服务端收到这个字符串，分别取出md5和时间戳，用这个时间戳与自己存的key&#39;也算一个md5`值，这个md5值与客户端发来的md5值作比较。 当然这里还是不够的，比如黑客拿到md5和时间戳呢？ 我们还需要作进一步策略 策略一：发来的时间戳+5秒小于服务器时间戳，认为是非法请求 策略二：基于字符串和时间戳算的md5不等于客户端发来的md5值，认为是非法请求 策略三：5秒钟内的请求作进一步验证，维护一个5秒钟内的合法请求md5值,再来这个md5值的，认为是非法请求。5秒钟失效需要借住memcache redis，它们都自带过期时间。 策略四：如果基于网络原因，黑客的非法请求比客户端的请求先到达服务器，这样只能数据AES加密了。 代码实现客户端发送请求头 123456import timeimport hashlibdef md5(arg): hs = hashlib.md5() hs.update(arg.encode(&quot;utf-8&quot;)) return hs.hexdigest() 12345ctime=time.time()key=&apos;sdgasgsdgsdffsdf&apos;new_key=&quot;%s|%s&quot; %(key,ctime)md5_str = md5(new_key)auth_md5_str=&quot;%s|%s&quot; %(mdr_str,ctime) 发送请求 1requests.get(url=&quot;http://127.0.0.1:8000/test_api/&quot;,headers = &#123;&apos;auth-api&apos;:auth_md5_str&#125;) 服务端 123456789server_float_time = time.time()auth_header_val = requests.META.get(&apos;HTTP_AUTH_API&apos;)client_md5_str,client_ctime=auth_header_val.rsplit(&apos;|&apos;,maxsplit=1)if (client_float_time + 5) &lt; server_float_time : return HttpResponse(&quot;已过期&quot;)server_md5_str != client_md5_str: return HttpResponse(&quot;非法请求&quot;)if visited_keys.get(client_md5_str): return HttpResponse(&quot;来晚了，你是非法的&quot;) &lt;数据加密待续&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Flask-基础","slug":"web-Flask-基础","date":"2018-01-01T12:51:41.000Z","updated":"2018-04-23T07:00:52.290Z","comments":true,"path":"2018/01/01/web-Flask-基础/","link":"","permalink":"http://www.digmyth.com/2018/01/01/web-Flask-基础/","excerpt":"","text":"前言","categories":[{"name":"WebFlask开发","slug":"WebFlask开发","permalink":"http://www.digmyth.com/categories/WebFlask开发/"}],"tags":[]},{"title":"web-Django-25-DjangoAdmin","slug":"web-django-25-DjangoAdmin","date":"2017-12-28T12:37:00.000Z","updated":"2019-01-15T03:53:24.763Z","comments":true,"path":"2017/12/28/web-django-25-DjangoAdmin/","link":"","permalink":"http://www.digmyth.com/2017/12/28/web-django-25-DjangoAdmin/","excerpt":"","text":"目录 DjangoAdmin工作流程 制作启动文件 单例模式应用 博客参考 一 Django admin工作流程1 注册models_class，生成_registry 中model_class 字典1234admin.py注册models_class如models.UserInfofrom django.contrib import adminfrom app01 import modelsadmin.site.register(models.UserInfo) 2 admin.site.urls admin.site.urls循环_registry={}字典生成相应URL12345生成4个URL分别是如下：app01/userinfo/app01/userinfo/add/app01/userinfo/1/change/app01/userinfo/1/delete/ 其中要深入理解URL include原理： url(r’^xx’, “可以是视图函数，也可以是元组”),1234567partterns = [ url(r&apos;^admin&apos;, admin.site.urls), # admin.site.urls 返回形如（[],None,None）的元组. url(r&apos;^backend&apos;, include(&apos;backend.urls&apos;)), # include 同样返回形如（[],None,None）的元组. # 也可以写成形如 include([],None,None) 格式. ] 二 制作stack启动文件 1 创建一个stack 的app 2 settings.py 注册app- &apos;stack.apps.StackConfig&apos;, 3 在stack apps.py文件定义ready方法 stack/apps.py文件ready()方法123456from django.utils.module_loading import autodiscover_modulesclass StackConfig(AppConfig): name = &apos;stack&apos; def ready(self): autodiscover_modules(&quot;xxx&quot;) 4 启动项目时会先在执行所有app下的xxx.py文件. (当然前提是这些app也是settings.py注册好的) 三 单例模式单例模式有很多种实现方式 其中一种：利用模块多次导入时，除第一次外不会真正执行模块代码。 如果模块中有实例化对象操作，那么多次导入也不会真正实例化多个对象，而是同一个实例 如果在一个程序先运行的文件改变了实例数据或属性，后运行的文件导入后读这个实例就会有数据或属性. 示例： 随便定义一个实例化对象的文件stack/service.v1 123456789class StackSite(): def __init__(self): self._registry = &#123;&#125; def register(self,class_name,config_class): self._registry[class_name] = config_class site = StackSite()## 单例 在我们定义的启动文件app01/xxx.py中写入代码(因为会先执行xxx.py) 1234from stack.service import v1v1.site.register(&quot;k1&quot;,&quot;v1&quot;)v1.site.register(&quot;k2&quot;,&quot;v2&quot;)v1.site.name = &apos;wxq&apos; 项目urls.py中写入 from stack.service import v1 print(v1.site._registry) print(v1.site.name) 总结启动项目时，先执行app01/xxx.py,后执行urls.py文件，程序读到了实例的数据并不是重新实例化新对象，这就是单例模式的运用。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-24-Django中间件","slug":"web-django-24-Django中间件","date":"2017-12-26T12:26:37.000Z","updated":"2018-01-18T03:43:22.000Z","comments":true,"path":"2017/12/26/web-django-24-Django中间件/","link":"","permalink":"http://www.digmyth.com/2017/12/26/web-django-24-Django中间件/","excerpt":"","text":"目录 官方解释 Django默认 定义中间件 示例 总结 Django中间件学习 官方解释1234This document explains all middleware components that come with Django.For information on how to use them and how to write your own middleware, see the middleware usage guide.Middleware is a framework of hooks into Django’s request/response processing.It’s a light, low-level “plugin” system for globally altering Django’s input or output. Django 中间件是一个钩进request/response处理过程的框架，轻量且较为底层的插件系统，全局改变Django输入输出。 Django默认12345678910Django默认中间件MIDDLEWARE = [ &apos;django.middleware.security.SecurityMiddleware&apos;, &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, &apos;django.middleware.common.CommonMiddleware&apos;, &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;, &apos;django.contrib.messages.middleware.MessageMiddleware&apos;, &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,] 定义中间件在Django中就表现为一个类.123456789101112m1.process_exception(self, request, exception): print(&quot;m1.process_exception1&quot;)m1.process_requestm2.process_requestm1.process_viewm2.process_viewviews.pym2.process_exceptionm1.process_exceptionm2.process_responsem1.process_response 中间件流1234process_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_response 示例1... 总结：基于Django中间件我们能实现一些功能，这些处理是在请求到来之前或views视图函数处理过后。 process_request可以有返回值，也可以没有返回值。 process_response必须有返回值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-17-ModelForm","slug":"web-django-17-ModelForm","date":"2017-12-20T12:26:37.000Z","updated":"2018-01-18T03:48:11.260Z","comments":true,"path":"2017/12/20/web-django-17-ModelForm/","link":"","permalink":"http://www.digmyth.com/2017/12/20/web-django-17-ModelForm/","excerpt":"","text":"目录 回顾Form ModelForm特性 ModelForm使用 html前端展示 ModelForm简介1 回顾FormForm作用：第一： 用于Form验证第二： 用于生成 html标签，并且可以保留数据（如编辑） 缺点：多表查询时需要手动查出数据在前端渲染，跨表保存数据同样需要手动update() 2 ModelForm特性解决办法，引用ModelForm 1 它可以循环model class字段在前端生成表单或html标签并保留数据 2 调用save()方法自动跨表保存数据。 3 可以自定义models class以外的fields字段,很灵活，如果自定义的字段名与model class字段名重名， 那么model class字段将被重写 4 ModelForm同样可以做数据验证包括钩子函数 5 ModelForm中的fields字段是可以循环的，循环在前端生成不必写 6 当编辑数据时传入instance=obj 可以循环生成表单并且表单有值。 ModelForm适用场景 Form与ModelForm没有谁好谁不好，只是适用场景不同。 ModelForm依赖modelsclass, modelForm必须和models.py在一起。 3 ModelForm使用12345678910111213141516171819from django.forms import Formfrom django.forms import ModelFormfrom django.forms import fieldsfrom django.forms import widgets as fwidgetsfrom app01 import modelsclass TestForm(ModelForm): class Meta: model = models.Book fields = &quot;__all__&quot; # 可以是[&quot;&quot;,&quot;&quot;,] labels = &#123; &apos;title&apos;:&quot;书名&quot;, &quot;price&quot;:&quot;价格&quot;, &#125; error_messages = &#123; &quot;title&quot;:&#123;&quot;requried&quot;:&quot;书名不能为空&quot;,&#125;, &#125; widgets=&#123; &quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;) &#125; 4 html前端展示1234567&lt;form action=&quot;/addbook/&quot; method=&quot;POST&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;% for field in form %&#125; &lt;p&gt;&#123;&#123; field.label &#125;&#125;:&#123;&#123; field &#125;&#125; &#123;&#123; field.errors.0 &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt; 引入bootstrap时，querySet for循环展示:注意时间格式的转换1234567891011121314&lt;div class=&quot;container&quot; style=&quot;width: 700px;margin-top: 50px&quot;&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt;&lt;/thead&gt; &lt;tbody&gt; &#123;% for row in data_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.title &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.price &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"03-GET/POST/ContentType知识","slug":"web-get_post_contentype知识","date":"2017-12-15T12:51:41.000Z","updated":"2018-02-12T09:50:11.623Z","comments":true,"path":"2017/12/15/web-get_post_contentype知识/","link":"","permalink":"http://www.digmyth.com/2017/12/15/web-get_post_contentype知识/","excerpt":"","text":"前言 ContentType知识 requests发送get/post请求分析 requests发送get/post请求示例 表格总结 一、ContentType知识contentType 定义： 客户端告知服务器如何组装数据来发送，服务器那边就必须以相应编码解开。 contentType一般为 application/x-www–form-urlencode12如form就默认enctype=&quot;application/x-www-form-urlencoded&quot;形如b&apos;user=wxq&amp;pwd=123&apos; 组装数据。 Django帮我们默认以enctype=”application/x-www-form-urlencoded”解开后放在request.GET或 request.POST里方便我们取数据。如果是application/json 格式，双引号字符串 {“user”:”wxq”,”pwd”:123}，需自行解数据。 1form文件传送时必须指明enctype=&quot;multipart/form-data&quot; 如果是application/json,就要用相应格式解开后组装数据。application/json 双引号字符串 {“user”:”wxq”,”pwd”:123} request.body 报文元数据12345application/json data: JSON.stringfy(&#123;d&#125;) # 前端以json 格式发数据s=request.body.decode(&quot;utf8&quot;)d=json.loads(s) # 后端以json格式解数据d[&apos;name&apos;] 当ajax处理数据时，后端数据以json格式传过来的，那么前端需手动JSON.parse()反序列化操作， 我们可以添加参数datatype: “JSON” ，添加后就自动反序列化了。 二、 requests发送get/post请求分析分析知识点 分析如何组装数据发送 分析get/post请求组装数据方式的不同 分析get/post方式不同，requests参数写法上的不同 大家都知道请求头之间用\\r\\n分隔，请求头与请求体用\\r\\n\\r\\n分隔。 GET请求头get请求发送数据封装在请求头，形如http://www.baidu.com/?a=1&amp;b=2 get请求发送数据用params,params中的数据会组装在请求头上12requests.get(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;)data=&quot;http GET /index?a=1&amp;b=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&quot; POST请求头post请求发送数据可以像get一样?a=1&amp;b=2封装在请求头，但决大多数情况封装在请求体，形如1data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时可以data传参，数据在请求体里，封装为name=wxq&amp;age=18,请求头ContentType为application/x-www-form-urlencoded12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,data=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时也可以json传参,数据在请求体里，封装为json.dumps({‘name’:’wxq’,’age’:18})后的字符串。请求头ContentType为application/json12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,json=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&#123;&quot;name&quot;: &quot;wxq&quot;, &quot;age&quot;: 18&#125;&quot; 服务器解析当服务器接收到客户端发来的数据，所有的数据会放到request.FILES或request.body里，再跟据ContentType的不同放到相应变量里,如request.POST里是Content-Type:application/x-www-form-urlencoded; charset=UTF-8,也就是data而非json格式发来的数据。 12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 三、requests发送get/post请求示例data传参可以是字典可以是字符串可以是字节可以是文件对象1 requests.request(method=”post”,data=字典)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}1requests.post(url=&quot;xxx&quot;,data=&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;) 2 requests.request(method=”post”,data=字符串)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}12requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq&amp;pwd=123&quot;) # 或requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq;pwd=123&quot;) 基于HTTP本质，上面2种数据最终转为请求体\\r\\n\\r\\nname=wxq&amp;pwd=123 3 手动构建json字符串发送手动加headers={&#39;Content-Type&#39;: &#39;application/json&#39;}1234requests.post( url=&quot;xxx&quot;, data=json.dumps(&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;), headers=&#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;) json传参requests.request(method=”post”,json=…)1) 将json中对应的数据进行序列化成一个字符串，json.dumps(…)2) 然后发送到服务器端的body中3) 并且自动Content-Type是 {‘Content-Type’: ‘application/json’}1234def param_json(): requests.request(method=&apos;POST&apos;, url=&apos;http://127.0.0.1:8000/test/&apos;, json=&#123;&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;水电费&apos;&#125;) json方式传输数据的一种场景Content type: application/x-www-form-urlencode不支持传键所对应的值为字典的字典.1request.post(url=url,data=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 不支持 传键所对应的值为字典的字典,这种情况只能以json方式传送数据12request.post(url=url,json=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 支持Content type: application/json 四、总结 methond 传参 解析为 浏览器显示标识名 GET params ?page=1&amp;k1=v1 Query String Parameter POST data \\r\\n\\r\\nname=wxq&amp;pwd=123 Form Data POST json \\r\\n\\r\\n{“name”:”wxq”,”age”:18}” Request Payload","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"python-spider-基础知识","slug":"python-spider01-基础知识","date":"2017-12-06T12:51:41.000Z","updated":"2018-02-12T11:57:36.272Z","comments":true,"path":"2017/12/06/python-spider01-基础知识/","link":"","permalink":"http://www.digmyth.com/2017/12/06/python-spider01-基础知识/","excerpt":"","text":"前言 爬虫简介 具备技能 爬虫实现 爬虫示例 简介爬虫：利用python模块伪造浏览器行为，读取网页源码，再经过正则匹配取出HTML文本的一系列处理，数据分析称为爬虫 基本内容：123456789- python实现浏览器行为： requests- beautifulsoup4 对HTML内容进行分析- HTTP相关知识： - cookie - csftToken - 请求头：其中ContenType表明什么格式封装的数据，服务器需要用相应格式解数据 请求： 请求头(cookie)/请求体(发送的内容) 响应： 响应头（浏览器读取头数据）/响应体（我们看到的网页或网页源码）- 数据持久化（数据库存储） 具备技能1234567891011性能相关：批量get URL可想而知性能重要性1 线程池，进程池，2 协程coroutine（微线程）： 协程本身没有用，只做切换，具有切换特性,要想性能很高，刚好遇到IO时切换 3 异步非阻塞（如twisted,gevent,asyncio,tornado内部集成） 其中gevent异步模块由2个东西组成: greenlet协程: greenlet就是利用yield实现的协程 libevent: libevent做异步IO库 七牛云进程线程分享 异步非阻塞123遇到IO请求不等待继续执行其它任务,如果IO请求响应内容回来了,自动回调某个函数.异步： 回调（相关于通知机制）非阻塞： 不等待 后面会学到爬虫框架：scrapy1231 内部是twisted实现异步2 写入URL自动下载网页3 自动将下载的网页解析为对象方便我们处理 后面也会学到分布式爬虫组件redis-scrapy 爬虫实现基本模块：12pip3 install requestspip3 install beautifulsoup4 （将网页字符串解析为对象，用于直接取文本内容） 爬虫实现123451 代码发送get请求： 请求头+请求体2 接收返回值： 响应头+响应体（本质字符串）3 获取响应体后进行解析，方便获取文本内容 import requests from bs4 import BeautifulSoup 注意几点：1231 回车时得到token和cookies,如果有token和cookies的话取出来,一般get请求2 提交用户名密码时带上token和cookies,一般post请求,并且取出登录成功后的cookies3 登录后才能看到的网页(前2次请求的cookies都带上) 示例示例这里就不展开了，可以基于这几个站点简单入门 github或汽车之家 抽届点赞 博客园用户名密码密文发送给服务器的情况，其实是利用js三方模块在浏览器端加密再发送的（python rsa模块加密） 知乎，新浪微博这种有图形验证码的网站，需要第三方平台做图像识别（类似滑动验证码这种验证其实是向后台发送鼠标坐标）","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"web-Django-23-Django序列化","slug":"web-django-23-Django序列化","date":"2017-12-01T12:26:37.000Z","updated":"2018-01-18T03:43:21.996Z","comments":true,"path":"2017/12/01/web-django-23-Django序列化/","link":"","permalink":"http://www.digmyth.com/2017/12/01/web-django-23-Django序列化/","excerpt":"","text":"目录 序列化 Django中的序列化操作序列化操作参考ajax学习Django返回前端数据一般为json格式，那么就要数据进行序列化。方法一：Django内置serializers123from django.core import serializersret = models.BookType.objects.all()data = serializers.serialize(&quot;json&quot;, ret) 方法二：json.dumps123456import json #ret = models.BookType.objects.all().values(&apos;caption&apos;)ret = models.BookType.objects.all().values_list(&apos;caption&apos;)ret=list(ret)result = json.dumps(ret,nsure_ascii=False) 方法三：由于json.dumps时无法处理datetime日期，所以可以通过自定义处理器来做扩展12345678910111213import json from datetime import date from datetime import datetime class JsonCustomEncoder(json.JSONEncoder): def default(self, field): if isinstance(field, datetime): return o.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) elif isinstance(field, date): return o.strftime(&apos;%Y-%m-%d&apos;) else: return json.JSONEncoder.default(self, field) # ds = json.dumps(d, cls=JsonCustomEncoder) 有时在前端渲染也需要date:&#39;Y-m-d&#39;处理一下1&lt;p&gt;出版日期&lt;input type=&quot;date&quot; name=&quot;pubdate&quot; value=&quot;&#123;&#123; edit_book.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&quot;&gt;&lt;/p&gt; 如果用到了Form或ModelForm，同样需要widgets处理下时间格式12widgets=&#123;&quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;)","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-21-图片上传","slug":"web-django-21-图片上传","date":"2017-11-21T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/21/web-django-21-图片上传/","link":"","permalink":"http://www.digmyth.com/2017/11/21/web-django-21-图片上传/","excerpt":"","text":"目录 上传文件版本一 上传文件版本二 上传文件版本三 上传文件版本一定义views.py123456789101112def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) else: obj=request.FILES.get(&quot;fff&quot;) # obj.name 文件名 # obj.chunks 文件块 f = open(obj.name,&apos;wb&apos;) for chunk in obj.chunks(): f.write(chunk) f.close() return render(request,&quot;upload.html&quot;) upload.html12345&lt;form action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;p&gt;&lt;input type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt;&lt;/form&gt; 上传文件版本二版本一中form表单上传文件或图片无法做预览，并无法做失败验证及上传文件大小限制，那么就要用到ajax 方式发送。下面学习下ajax方式上传文件。定义views.py12345678910111213def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) elif request.is_ajax(): file_obj= request.FILES.get(&apos;obj&apos;) print(obj) f = open(file_obj.name, &apos;wb&apos;) for chunk in file_obj.chunks(): f.write(chunk) f.close() return HttpResponse(&quot;ok&quot;) else: pass 12345678910111213141516171819202122232425262728293031&lt;h1&gt;ajax形式上传文件&lt;/h1&gt;&lt;input type=&quot;file&quot; id=&quot;f4&quot;/&gt;&lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;btn&quot;&gt; #input的button默认不会有任何事件，除非绑定事件&#123;% csrf_token %&#125;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function () &#123; $(&quot;#btn&quot;).click(function () &#123; var fm=new FormData(); fm.append(&apos;obj&apos;,$(&quot;#f4&quot;)[0].files[0]); fm.append(&apos;csrfmiddlewaretoken&apos;,$.cookie(&apos;csrftoken&apos;)); //自行组数据$(&quot;input[name=&apos;csrfmiddlewaretoken&apos;]&quot;).val()); // fm.append(&apos;file_obj&apos;,document.getElementById(&quot;f4&quot;).files[0]); //document.getElementById(&quot;f4&quot;) # dom对象 // $(&quot;#f4&quot;) # jquery对象 // $(&quot;#f4&quot;)[0] #jquery对象转dom对象 $.ajax(&#123; url:&apos;/upload/&apos;, type:&apos;POST&apos;, data:fm, processData: false, contentType: false, success:function (data) &#123; console.log(data); &#125; &#125;) &#125;) &#125;)&lt;/script&gt; 上传文件版本三版本二中对各种浏览器兼容不好，可以再次改进. 利用form+iframe特性做的，业内都是这么做的，很重要，兼容性非常好。形式上与ajax很像但不是ajax,称伪ajax,后端不能用request.is_ajax()判断请求方式。不得不先来学习下iframe标签12&lt;iframe id=&quot;ifm&quot; src=&quot;http://www.chouti.com&quot;&gt;&lt;/iframe&gt;$(&quot;#ifm&quot;).attr(&apos;src&apos;, &apos;http://www.qq.com&apos;) # 修改iframe src属性但页面不刷新，返回的数据不在整个页面，而在iframe body里，基于这样的特性我们可以上传文件。 当form表单以iframe形式发送数据到后端，后端返回的数据会在iframe body里form 的target属性值要与iframe的name属性值保持一致。12345&lt;form id=&quot;ff1&quot; action=&quot;/upload/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &lt;p&gt;&lt;input onchange=&quot;changeImg();&quot; type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input id=&quot;sb&quot; type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt; &lt;/form&gt;&lt;iframe id=&quot;ifm&quot; name=&quot;ifr&quot; onload=&quot;sucessBack();&quot; &gt;&lt;/iframe&gt; 那么如何取出iframe body里的值呢？1$(&quot;#ifm&quot;).html(); # iframe会重新生成一个子document,有html/head/body,这种方法无法取出。 1$(&quot;#ifm&quot;).find(&apos;body&apos;).html(); # 有这种想法是好的，这种找只会在当前document里找，但是这样的document嵌套递归查找需要一个额外方法处理.contents()后再查找 1$(&quot;#ifm&quot;).contents().find(&apos;body&apos;).html(); # iframe最终正确的方法 文件上传完整版utils.py12345class BaseResponse(): def __init__(self): self.status=False self.data=None self.error=None views.py123456789101112131415161718192021from django.shortcuts import render,HttpResponse,redirectimport os,jsonfrom utils import BaseResponseret=BaseResponse()def upload(request): if request.method == &quot;GET&quot;: return render(request, &quot;upload.html&quot;) else: try: file_obj=request.FILES.get(&apos;fff&apos;) # file_obj.name # file name # file_obj.chunks() #file block file_path = os.path.join(&apos;static&apos;, file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) ret.status=True ret.data=file_path except Exception as e: ret.error=&quot;上传失败&quot; return HttpResponse(json.dumps(ret.__dict__,ensure_ascii=False)) upload.html123456789101112131415161718192021222324252627282930&lt;form id=&quot;sb&quot; action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;file&quot; name=&quot;fff&quot; onchange=&quot;changeImg();&quot;/&gt; &lt;!-- 元素更新时触发onchange事件 --&gt;&#123;# &lt;input type=&quot;submit&quot;&gt;#&#125;&lt;/form&gt;&lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; onload=&quot;successBack();&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt;&lt;div id=&quot;prevImg&quot;&gt;&lt;/div&gt;&lt;!-- 我们这里不是真正的ajax,是没有success回调函数的,上传成功后会返回数据到前端，文本载入会触发onload事件。 --&gt;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function successBack() &#123; var v=$(&quot;#ifr&quot;).contents().find(&quot;body&quot;).html(); var v=JSON.parse(v); if(v.status)&#123; var tag=document.createElement(&apos;img&apos;); tag.src=&quot;/&quot;+v.data; $(&quot;#prevImg&quot;).append(tag); &#125;else &#123; console.log(v.error) &#125; &#125; function changeImg() &#123; $(&quot;#sb&quot;)[0].submit(); // document.getElementById(&apos;sb&apos;).submit(); &#125;&lt;/script&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-20-ajax","slug":"web-django-20-ajax","date":"2017-11-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/20/web-django-20-ajax/","link":"","permalink":"http://www.digmyth.com/2017/11/20/web-django-20-ajax/","excerpt":"","text":"目录 代码例子 代码例子 ajax前端组装数据 ajax涉及的序列化 ajax错误验证 ajax的3种csrf_token Ajax 学习详情参考Ajax 武佩齐博客 这里只是对Ajax学习做一个记录和总结，内容还有很多没有包括。 代码例子普通请求 —&gt; render渲染全部HTMLAjax – -&gt; render生成己经渲染好的局部HTML, 功能单一。Ajax — &gt; HttpResponse(‘data’) 得到原始数据，ajax前端自行展示，定制化强，一般用于提供接口，为别人提供数据。 render和HttpResponse的关系？render:1 模板+数据进行替换2 HttpResponse(数据) HttpResponse:1 HttpResponse(数据) Ajax请求时，响应内容时可以是render和HttpResponse,不要认为只能用HttpResponse. views.py里不能return redirect(&quot;&quot;)跳转是在前端跳转location.href = “http://www.baidu.com&quot; ajax前端组装数据ajax形式发input数据时在前端取数据并组装数据后给后台123ajax取input数据时，可以用data:&#123;&quot;user&quot;:$(&quot;#user&quot;).val(),&quot;pwd&quot;:$(&quot;#pwd&quot;).val()&#125;获取数据，更简单的数据组装方法是加form表单:&lt;form id=&quot;ff&quot;&gt;&lt;input /&gt;&lt;/form&gt;此时取数据可以用：data: $(&quot;#ff&quot;).serialize(), ajax涉及的序列化Django 中Ajax方式获取ORM数据时，涉及序列化操作的5种方法1234567891011121314151617181920212223242526272829303132333435363738394041424344# # 方式一 我们伪造的数据是可以序列化实现展示的# # 模板渲染后生成字符串# # user_list = models.UserInfo.objects.all()# ## # return render(request,&quot;tpl.html&quot;,&#123;&quot;user_list&quot;:user_list&#125;)# user_list = [# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# ]## import json# data = json.dumps(user_list)# return HttpResponse(data)# # 方式二： 这里是失败的， QuerySet不支持Json序列化，经测试失败# user_list = models.UserInfo.objects.all()# import json# return HttpResponse(json.dumps(user_list))# # 方式三 也是成功的,但不常见## user_list = models.UserInfo.objects.all()# from django.core import serializers# data= serializers.serialize(&quot;json&quot;, user_list)# return HttpResponse(data)# 方式四 推荐用法user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data)# 方式五 user_list = models.UserInfo.objects.values_list(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data) Ajax 错误验证123456789101112## 异常判断 import json ret = &#123;&apos;status&apos;:False,&apos;data&apos;:None,&apos;error&apos;:None&#125; try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret[&apos;status&apos;]= True ret[&apos;data&apos;] = user_list except Exception as e: ret[&apos;error&apos;] = &apos;获取数据失败&apos; data = json.dumps(ret) return HttpResponse(data) 或者以类的形式调用更为简洁123456789101112131415161718app01项目下新建utls.pyclass BaseResponse(): def __init__(self): self.status = False self.data = None self.error = Noneviews.py中导入：from app01.utils import BaseResponseret = BaseResponse()try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret.status= True ret.data = user_listexcept Exception as e: ret.error = &apos;获取数据失败&apos; data = json.dumps(ret.__dict__,ensure_ascii=False) # False表示不要中文为变为unicode编码 return HttpResponse(data) 1234var tag.createElement(&quot;a&quot;)tag.innertHTML=&quot;hello&quot;div.append(tag) # &lt;div&gt; &lt;a&gt;hello&lt;/a&gt;&lt;/div&gt; 加在标签里面div.after(tag) # &lt;div&gt;&lt;/div&gt;&lt;a&gt;hello&lt;/a&gt; 加在标签后面 ajax的3种csrf_token方法一： 自己组装数据csrf_token12&#123;% csrf_token %&#125; 会生成带csrfmiddlewaretoken的input标签data:&#123;&apos;csrfmiddlewaretoken&apos;:$(&apos;input[name=&quot;csrfmiddlewaretoken&quot;]&apos;).val()&#125; 方法二：加 form表单后用$(“#form_id”).serialize()方法自动组装数据 121 添加form HTML 标签 &lt;form id=&quot;form_id&quot;&gt;&lt;input /&gt;&lt;/form&gt;2 用data: $(&quot;#form_id&quot;).serialize(),自动组装数据 方法三：自行在cookies里取csrf_token放在请求头里参考1234561 导入jquery.cookie.js: &lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;2 jquery方式操作cookie取值: csrf_token=$.cookie(&apos;csrftoken&apos;) 3 ajax形式添加到请求头里，注意写法是定死的 $.ajax(&#123; header: &#123;&quot;X-CSRFToken&quot;: $.cookie(&apos;csrftoken&apos;)&#125;， )&#125;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"linux haproxy基础","slug":"haproxy-基础","date":"2017-11-12T01:41:54.000Z","updated":"2018-04-23T06:57:35.510Z","comments":true,"path":"2017/11/12/haproxy-基础/","link":"","permalink":"http://www.digmyth.com/2017/11/12/haproxy-基础/","excerpt":"","text":"目录 haproxy基本介绍 haproxy基础语法 haproxy应用 haproxy基本介绍haproxy基础语法当有多个缓存key/value服务器时，app缓存到服务器1，那么必须到服务器1才能找到缓存。 取模法：key- hash(16进制数值)–这个数值除以服务器数量的余数就是哪台服务器 当有服务器添加或移走这种缓存就失效了 如何解决，是有办法的，那就是改进上面那种方法，称一致性hash算法：consitent hash 有一个环，用32位二进制从0开始计数，环上分布有离散的2^32 点。key hash 后的值除以2^32时取余数，这个余数一定在0到2^32-1范围内，也就是在这个环上那么数据就是存储在余数的下一台服务器上，服务器是离散分布在这样的环上的。缺点：服务器分布可能存在偏斜，也就是可能所有服务器集中在环三分之一处。当存储数据找下一台服务器，那台服务器存储量太大了。 解决办法：使用虚拟节点离散分布在环上来代替物理节点。hadoop前身开源搜索引擎，任何搜索引擎首先是大数据搜索平台，其次才是高性能分析平台。 流式数据存储处理平台：storm spark大数据处理平台。12345678910111213141516nginx:server &#123;&#125;server &#123; proxy_pass: &#125;upstream &#123;&#125;upstream &#123;&#125; haproxy应用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux nginx基础","slug":"linux-nginx","date":"2017-11-12T01:41:54.000Z","updated":"2018-10-21T11:30:26.599Z","comments":true,"path":"2017/11/12/linux-nginx/","link":"","permalink":"http://www.digmyth.com/2017/11/12/linux-nginx/","excerpt":"","text":"目录 nginx基本介绍 nginx URI优先级 nginx URI优先级第一优先级精确匹配此路径123location = URI &#123;&#125; 第二优先级不使用正则表达式的模糊匹配123location ^~ URI &#123;&#125; 第三优先级可使用正则表达式的模糊匹配123location ~ URI &#123;&#125; 第四优先级匹配当前路径及其子路径123location URI &#123;&#125; 补充 ~ 区分字符大小写匹配 ~* 不区分字符大小写匹配 ! 表过不匹配 !~* 不区分字符大小写非匹配","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"kolla Pike on CentOS 7.3","slug":"kolla-Pike-on-CentOS7.3","date":"2017-11-09T00:41:54.000Z","updated":"2017-11-08T07:15:16.901Z","comments":true,"path":"2017/11/09/kolla-Pike-on-CentOS7.3/","link":"","permalink":"http://www.digmyth.com/2017/11/09/kolla-Pike-on-CentOS7.3/","excerpt":"","text":"openstack Pike发布很长一段时间了，一直没有时间整理一份在kolla on CentOS7.3 的文档参考：沙克老师单节点ocata安装 环境准备12yum install epel-release yum install axel vim git curl wget lrzsz ansible gcc python-devel docker-ce yum12add docker-ce yum:yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo docker-ce install12install docker-ce# yum install docker-ce docker-ce configuration12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof 编辑 /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker kolla-ansible install github项目 openstack kolla镜像地址 openstack-ansible是用ansible部署openstack用的 ceph-ansible是用ansible部署ceph用的 kolla-ansible是用ansible部署kolla用的，其中openstack+ceph环境均分散在一个一个的docker容器里 安装pike版本 kolla-ansible，pip install 安装方式存在版本问题或非最新代码，这里直接git下载代码安装。12345678910cd /optgit clone https://github.com/openstack/kolla-ansible.gitcd /opt/kolla-ansiblegit branch -avgit checkout remotes/origin/stable/pikecp -r /opt/kolla-ansible/etc/kolla/ /etc/# 安装相关依赖包cd /opt/kolla-ansiblepip install -r requirements.txt 生成密码12cd /opt/kolla-ansible/toolspython generate_passwords.py 安装镜像仓库123456# docker pull registry下载最新pike 容器镜像：http://tarballs.openstack.org/kolla/images/centos-source-registry-pike.tar.gztar xf centos-source-registry-pike.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry eg:1234mkdir /registrytar -zxf /root/docker-registry.tar.gz -C /registrydocker load &lt; /root/registry.tardocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry check docker hub12345curl http://192.168.200.2:4000/v2/_catalog[root@controller01 ~]# curl 192.168.200.2:4000/v2/99cloud/centos-source-memcached/tags/list&#123;&quot;name&quot;:&quot;99cloud/centos-source-memcached&quot;,&quot;tags&quot;:[&quot;4.0.1.1&quot;]&#125;docker pull 192.168.200.2:4000/99cloud/centos-source-memcached:4.0.1.1 ceph disk set1# for i in vdb vdc vdd; do parted /dev/$i -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1; done in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 edit global.yml12edit /etc/kolla/global.yml此处略过。。。 kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient access dashboard1curl http://openstack_VIP/horizon","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"Mysql MGR 集群","slug":"mysql-MGR","date":"2017-11-08T22:41:54.000Z","updated":"2017-11-08T15:18:04.873Z","comments":true,"path":"2017/11/09/mysql-MGR/","link":"","permalink":"http://www.digmyth.com/2017/11/09/mysql-MGR/","excerpt":"","text":"目录 MGR简介 MGR安装 数据库Galera集群的笔记做过了，今天来讲一讲MySQL Group Replication组复制技术。 一 MGR简介MySQL当前存在的三种复制模式有：异步模式、半同步模式和组复制模式。MySQL Group Replication（简称MGR）官方推出的高可用解决方案， 原生复制技术，基于插件的方式工作。 分为以下两种 single primary mode 单主模式只有一个读写，其余都是只读。 multi primary mode多主模式全部可读写 不管组复制单主还是多主的故障切换都无法让应用无感知，需要自主实现。 包含以下特性： 复制管理操作更为自动化。 通过Paxos协议提供数据库集群节点数据强一致性保证。 多主模式所有节点都可读写操作。 解决网络分区导致的脑裂问题，提升复制数据的可靠性。 官方引言1Quite obviously, regardless the mode Group Replication is deployed, it does not handle client-side fail-over. That must be handled by the application itself, connector or a middleware framework such as a proxy or router. 意思就是说MGR内部没有提供一种机制来实现主节点故障切换对应用的无感知。应用的这种故障无感知需要借助外力实现。 组复制存在以下局限性123456789101112131415161. 所有涉及的数据都必须发生在InnoDB存储引擎的表内。2. 所有的表必须有明确的主键定义。3. 网络地址只支持IPv4。4. 需要低延迟，高带宽的网络。5. 目前集群限制最多允许9个节点。6. 必须启用binlog。7. binlog 格式必须是row格式。8. 必须打开gtid模式。9. 复制相关信息必须使用表存储。10.事务写集合（Transaction write set extraction）必须打开。（这个目前与savepoint冲突，这也是导致mysqldump无法备份GR实例的原因）11. log slave updates必须打开。12. binlog的checksum目前不支持。13. 由于事务写集合的干扰，无法使用savepoint。14. SERIALIZABLE 隔离级别目前不支持。15. 对同一个对象，在集群中不同的实例上，并行地执行DDL（哪怕是相互冲突的DDL）是可行的，但会导致数据一致性等方面的错误，目前阶段不支持在多节点同时执行同一对象的DDL。16. 外键的级联约束操作目前的实现并不完全支持，不推荐使用。 二 MGR安装3.1 软件安装官方单库安装官方集群安装 参考链接 :1234https://dev.mysql.com/doc/refman/5.7/en/replace-third-party-yum.html # 禁用第三方源或安装包https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html # 根据您的系统安装相应版本https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html #CentOS7.3安装mysql 5.7https://dev.mysql.com/doc/refman/5.7/en/group-replication.html # mysql Group Replication安装 123# rpm -ivh /opt/mysql57-community-release-el7-11.noarch.rpm# yum install mysql-community-server# systemctl start mysqld 3.2 内置策略说明mysql5.7启动服务后会生成一个随机密码用于临时登录，内置策略强制让你进入数据库后马上更改登录密码，并且有一套密码复杂度管理的策略。我们可以在数据库my.cnf中过滤掉复杂度策略或临时修改全局变量来忽略复杂度。123456789101112131415161718192021mysql&gt; select @@validate_password_length;+----------------------------+| @@validate_password_length |+----------------------------+| 8 |+----------------------------+1 row in set (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec) 或者/etc/my.cnf添加5行策略来忽略掉。12345validate_password_length = 0validate_password_mixed_case_count = 0validate_password_number_count = 0validate_password_policy =0validate_password_special_char_count =0 当然也可以类似以下命令临时全局修改1set global validate_password_special_char_count =0; # 全部设置为0 查询临时密码1# grep &apos;temporary password&apos; /var/log/mysqld.log 马上修改临时密码用以后续操作。123mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;Query OK, 0 rows affected (0.00 sec)#否则收到提示：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 3.3 为复制授权1234567mysql&gt; SET SQL_LOG_BIN=0;mysql&gt; CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; SET SQL_LOG_BIN=1;mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3.4 启动组复制123456789101112mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; Query OK, 0 rows affected (0.02 sec)mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+...| validate_password | ACTIVE | VALIDATE PASSWORD | validate_password.so | GPL || group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+46 rows in set (0.01 sec) 启动复制通道123SET GLOBAL group_replication_bootstrap_group=ON;START GROUP_REPLICATION;SET GLOBAL group_replication_bootstrap_group=OFF; 查看集群成员1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+1 row in set (0.00 sec) 创建测试同步数据1234mysql&gt; CREATE DATABASE test;mysql&gt; USE test;mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);mysql&gt; INSERT INTO t1 VALUES (1, &apos;Luis&apos;); 检查同步数据和Binlog1234567mysql&gt; select * from t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+1 row in set (0.01 sec) mysql&gt; show binlog events;12345678+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 1 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 1 | 150 | || binlog.000001 | 150 | Stop | 1 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec 3.5 加入集群其余节点加入集群1 先定义主配文件与主机hosts2 建立通道授权 123456SET SQL_LOG_BIN=0;CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos; ;GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;SET SQL_LOG_BIN=1;CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3 添加插件1mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; 4 启动复制通道1mysql&gt; START GROUP_REPLICATION; 如果有失败，尝试12mysql&gt; set global validate_password_policy=0; mysql&gt; set global group_replication_allow_local_disjoint_gtids_join=ON; 5 查看集群成员123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | 2863475f-c490-11e7-b93e-fa163ebc6e6c | 172.18.23.8 | 3306 | ONLINE || group_replication_applier | 9c1ded3e-c495-11e7-8c62-fa163ea91040 | 172.18.23.33 | 3306 | ONLINE || group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+3 rows in set (0.01 sec) 6 查看集群中的主节点1234567mysql&gt; SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= &apos;group_replication_primary_member&apos;;+--------------------------------------+| VARIABLE_VALUE |+--------------------------------------+| f2d4456f-c48b-11e7-94f2-fa163e894684 |+--------------------------------------+1 row in set (0.01 sec) 7 binlog123456789mysql&gt; show binlog events;+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 3 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 3 | 150 | || binlog.000001 | 150 | Stop | 3 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec) 8 my.cnf优化项1234max_connections = 4096max_prepared_stmt_count=100000query_cache_type = 1query_cache_size = 10M 9 命令123456789mysql&gt; show full processlist;+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| Id | User | Host | db | Command | Time | State | Info |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| 3 | root | localhost | test | Query | 0 | starting | show full processlist || 11 | system user | | NULL | Connect | 490 | executing | NULL || 14 | system user | | NULL | Connect | 490 | Slave has read all relay log; waiting for more updates | NULL |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+3 rows in set (0.00 sec)","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-22-验证码","slug":"web-django-22-验证码","date":"2017-11-08T12:26:37.000Z","updated":"2018-04-23T07:00:07.330Z","comments":true,"path":"2017/11/08/web-django-22-验证码/","link":"","permalink":"http://www.digmyth.com/2017/11/08/web-django-22-验证码/","excerpt":"","text":"目录 生成验证码 认证验证码 插件认证 生成验证码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108def get_valid_img(request): # 第一步 # f=open(&quot;default.jpg&quot;,&apos;rb&apos;) # data=f.read() # 第二步 # import PIL # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(123, 222, 255)) # f=open(&apos;code.png&apos;,&apos;wb&apos;) # img.save(f,&apos;png&apos;) # f = open(&apos;code.png&apos;, &apos;rb&apos;) # data=f.read() # f.close() # 第三步 # from io import BytesIO # f=BytesIO() # # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(255, 255, 66)) # img.save(f,&quot;png&quot;) # data=f.getvalue() # # 第四步： # # from io import BytesIO # # f = BytesIO() # from PIL import Image, ImageDraw, ImageFont # # # 画字 # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(0, 255, 0)) # draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) # font=ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;,28) # draw.text([15,0],&apos;y&apos;,&quot;red&quot;,font=font) # # img.save(f,&quot;png&quot;) # data=f.getvalue() # 第五步： import random from io import BytesIO from PIL import Image, ImageDraw, ImageFont f = BytesIO() img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))) draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) char_list = [] # # 画字 for i in range(5): char = random.choice([chr(random.randint(65, 90)), str(random.randint(1, 9)), chr(random.randint(97, 122)), ]) font = ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;, 28) draw.text([i * 24, 0], char, (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),font=font) char_list.append(char) # # # ========================= width = 120 height = 30 def rndColor(): &quot;&quot;&quot; 生成随机颜色 :return: &quot;&quot;&quot; return (random.randint(0, 255), random.randint(10, 255), random.randint(64, 255)) # 写干扰点 for i in range(40): draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # # 写干扰圆圈 # for i in range(40): # draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # x = random.randint(0, width) # y = random.randint(0, height) # draw.arc((x, y, x + 4, y + 4), 0, 90, fill=rndColor()) # # # 画干扰线 # for i in range(5): # x1 = random.randint(0, width) # y1 = random.randint(0, height) # x2 = random.randint(0, width) # y2 = random.randint(0, height) # # draw.line((x1, y1, x2, y2), fill=rndColor()) img.save(f, &quot;png&quot;) data = f.getvalue() s = &apos;&apos;.join(char_list) request.session[&quot;valid_code&quot;] = s &apos;&apos;&apos; Dajngo: set_cookie(&quot;sessionId&quot;,&quot;asdsa234asd3sad&quot;) in session表 sessionkey sessiondata asdsa234asd3sad &#123;&quot;valid_code&quot;:s&#125; &apos;&apos;&apos; return HttpResponse(data) 认证验证码注意： 验证码的验证过程也是基于session/cookie,session/cookie知识必备12345678910111213141516171819202122232425262728from PIL import Imagefrom blog.utils import BaseResponsefrom django.contrib import authfrom blog import modelsimport jsonfrom blog.forms import RegFormdef login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.is_ajax(): username=request.POST.get(&quot;username&quot;) password=request.POST.get(&quot;password&quot;) valid=request.POST.get(&quot;valid&quot;) # 输入的验证码 keep_valid = request.session.get(&quot;valid_code&quot;) loginResponse = BaseResponse() if valid.upper() == keep_valid.upper(): user=auth.authenticate(username=username,password=password) # auth模块做认证 if user: loginResponse.user = username auth.login(request,user) # auth模块加session else: loginResponse.error = &quot;用户名或密码错误&quot; else: loginResponse.error=&quot;验证码错误&quot; return HttpResponse(json.dumps(loginResponse.__dict__)) 插件认证这个插件用于拦截机器识别，确定人为登录，使认证系统更加安全等补充… 参考","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"Mysql Galera集群搭建","slug":"mysql-Galera","date":"2017-11-08T01:41:54.000Z","updated":"2017-11-07T13:25:31.456Z","comments":true,"path":"2017/11/08/mysql-Galera/","link":"","permalink":"http://www.digmyth.com/2017/11/08/mysql-Galera/","excerpt":"","text":"目录 wsrep简介 Galera集群搭建 wsrep简介wsrep是writeset replication的简称，是一种API，在底层调用各库实现数据库同步写.通过wsrep协议在全局实现复制,任何一节点都可读写. 基于wsrep协议提供的一种底层复制机制，实现了Galera cluster数据库集群。因此Galera cluster需要特定研发的一个数据库版本,只有支持了特别的研发版本，才能借住于wsrep协议实现复制机制. 多个节点之上有了信息层，上层应用完成高可用，研发时调用信息层所提供的api去开发，并基于这个api去完成集群事务决策，不然就要自行加入中间层称资源管理器crm，如pacemaker galera cluster不是专为数据库提供的，只是一个工作在较为底层能够为你的服务提供数据复制功能的底层组件. mysql只有在研发时调用了galera cluster api写的mysql才能利用galera cluster完成复制,它的复制不再是让其它节点通过读取主节点二进制日志文件在本地重放，而是你指明了复制哪个数据库文件，由galera cluster自己在底层完成同步，mysql本身不感知. 12percona-cluster 版本支持galera clusterMariaDB-cluster 版本支持galera cluster 复制的问题和解决方案:(1) 数据损坏或丢失1234语句或行记录二进制日志，从而在从服务器上重放，重放机制也可能主从不一致的情况硬件故障、软件bug也会有数据损坏或丢失Master: MHA + semi replication(至少有一个从节点接收到了提交的binlog事件才返回成功，也是半同步复制)如果主节点数据损坏或丢失，就必须手动在从节点通过gtid来判断出己经提交的所有应用或事务，然后合并出一个较新的从节点提升为主节点Slave: 重新复制数据即可 (2) 运维部署注意事项：12345关键业务监控重要数据要备份和冗余不能混合使用存储引警MyISM: 不支持事务InnoDB: 支持事务 (3) 设置了不唯一的server ID12不唯一，整个复制集群数据产生错乱，每一个服务节点都不会在本地重放由同一个server ID 所产生的事件会导致重新复制数据 (4) 复制延迟12345需要额外监控工具的辅助自写一些脚本监控从节点有一个落后于主节点的时间判定，这个时间不为0时，尝试重启从节点服务对于从服务器延迟，主节点的事务是可以并发的，往二进制写入是单线程的，有先有后，从服务器重放也是单线程的，从服务器延迟落后也是必然的mysql5.6/mariadb 10以后引入了多线程复制机制，三节点集群可设置wsrep_slave_threads = 4 数据库服务衡量指标12qps : query per second 查询量tps: transaction per second 事务量 Galera集群搭建最新文档请参考Galera 集群官方链接 一 准备工作1 关闭防火墙2 关闭selinux3 同步主机时间4 设置hosts文件 二 MariaDB源在MariaDB 10.1以前需要卸载mariadb包，单独准备MariaDB-Galera-server源来安装MariaDB-Galera-server包例：123456789101112yum list all | grep -i galerayum remove mariadb*yum -y install MariaDB-Galera-server.rpm galera-25.3rpm -ql MariaDB-Galera-serverrpm -qa | grep MariaDB MariaDB-common-10.0.32-1.el7.centos.x86_64 MariaDB-shared-10.0.32-1.el7.centos.x86_64 MariaDB-Galera-server-10.0.32-1.el7.centos.x86_64 MariaDB-client-10.0.32-1.el7.centos.x86_64vim /etc/my.cnf.d/server.cnf[galera]... 而在MariaDB 10.1以后MariaDB-server己经自带Galera集群了，不必单独安装MariaDB-Galera-server包，只需准备如下源 编辑/etc/yum.repos.d/Mariadb.repo1234567# MariaDB 10.2 CentOS repository list - created 2017-11-07 12:07 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 三 软件安装1yum install MariaDB-server MariaDB-client 四 修改配置编辑/etc/my.cnf.d/server.cnf123456789101112[galera]#Mandatory settingswsrep_provider=/usr/lib64/galera/libgalera_smm.so # 可查rpm -ql galera | grep -i smm.sowsrep_cluster_address = &apos;gcomm://172.16.100.67,172.16.100.68,172.16.100.69&apos;wsrep_cluster_name = &apos;cluster&apos;wsrep_node_name = &apos;node1&apos;wsrep_node_address= &apos;172.16.100.67&apos;binlog_format = rowdefault_storage_engine = InnoDBinnodb_autoinc_lock_mode = 2bind-address = 0.0.0.0wsrep_on=ON 五 启动服务任意一个节点启动123/etc/init.d/mysql start --wsrep-new-cluster或service mysql bootstrap或systemctl start mariadb --wsrep-new-cluster 然后在其它节点正常启动即可12systemctl start mariadbMariaDB [(none)]&gt; show status like &apos;%wsrep%&apos;; 简单验证1234567create database mydb;use mydbcreate table tb1 (id int, name char(10));desc tb1;create table tb2 (id int unsigend auto_increment not null primary key, name char(30));insert into tb2(name) values (&apos;hi&apos;, &apos;hello&apos;)select * from tb2; 有关认证及集群检测自行研究1234wsrep_sst_method = xtrabackup-v2wsrep_sst_auth = root:NtEXLlZGF9KeXYUE79e7H8N5C9Vdy0EkHlBfFPtrwsrep_slave_threads = 4wsrep_notify_cmd = /usr/local/bin/wsrep-notify.sh # 注意定义这个脚本","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"ceph-01-运维那事","slug":"ceph-01-运维那事","date":"2017-11-05T01:41:54.000Z","updated":"2017-11-22T08:06:37.975Z","comments":true,"path":"2017/11/05/ceph-01-运维那事/","link":"","permalink":"http://www.digmyth.com/2017/11/05/ceph-01-运维那事/","excerpt":"","text":"待整理ceph运维笔记 12ceph osd set nooutceph osd unset noout 1rbd create wxq --size 1 12345678(ceph-mon)[root@pike-vm /]# rbd info rbd/wxqrbd image &apos;wxq&apos;: size 1024 kB in 1 objects order 22 (4096 kB objects) block_name_prefix: rbd_data.498102ae8944a format: 2 features: layering, exclusive-lock, object-map, fast-diff, deep-flatten flags: 12(ceph-mon)[root@pike-vm /]# ceph osd map rbd rbd_data.498102ae8944aosdmap e183 pool &apos;rbd&apos; (0) object &apos;rbd_data.498102ae8944a&apos; -&gt; pg 0.455bea7d (0.3d) -&gt; up ([1], p1) acting ([1], p1) 123456[root@lab8106 ]#ceph-objectstore-tool \\ --data-path /var/lib/ceph/osd/ceph-1/ \\ --journal-path /var/lib/ceph/osd/ceph-1/journal \\ --pgid 0.3d \\ rbd_data.498102ae8944a remove 12(ceph-mon)[root@pike-vm /]# ceph pg map 8.7d osdmap e183 pg 8.7d (8.7d) -&gt; up [2] acting [2] 12345(ceph-mon)[root@pike-vm /]# ceph pg 8.7d query&#123; &quot;state&quot;: &quot;active+clean&quot;, &quot;snap_trimq&quot;: &quot;[]&quot;,... 1234ceph pg dumpceph osd dumpceph pg map 8.7dceph pg 8.7d list_missing 12ceph pg 4.438 mark_unfound_lost revertceph pg 4.438 mark_unfound_lost delete 12ceph pg repair 0.44ceph osd pool set rbd min_size 1","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"proxy-01-代理","slug":"proxy-01-代理","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:45:24.259Z","comments":true,"path":"2017/10/31/proxy-01-代理/","link":"","permalink":"http://www.digmyth.com/2017/10/31/proxy-01-代理/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"webssh-shellinabox","slug":"linux-shellinabox","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:43:37.447Z","comments":true,"path":"2017/10/31/linux-shellinabox/","link":"","permalink":"http://www.digmyth.com/2017/10/31/linux-shellinabox/","excerpt":"","text":"利用http/https协议网页连接linux服务器，Webssh中最简单最方便的一种,还有GateOne/原生webssh yum安装1yum install shellinabox -y 查看安装文件，主要是主题相关，可以根据其位置自定义主题123456789101112131415161718rpm -ql shellinabox/etc/sysconfig/shellinaboxd/usr/lib/systemd/system/shellinaboxd.service/usr/sbin/shellinaboxd/usr/share/doc/shellinabox-2.20/usr/share/doc/shellinabox-2.20/AUTHORS/usr/share/doc/shellinabox-2.20/NEWS/usr/share/doc/shellinabox-2.20/README/usr/share/doc/shellinabox-2.20/README.Fedora/usr/share/doc/shellinabox-2.20/print-styles.css/usr/share/doc/shellinabox-2.20/shell_in_a_box.js/usr/share/doc/shellinabox-2.20/styles.css/usr/share/man/man1/shellinaboxd.1.gz/usr/share/shellinabox/usr/share/shellinabox/color.css/usr/share/shellinabox/monochrome.css/usr/share/shellinabox/white-on-black.css/var/lib/shellinabox 编辑配置文件/etc/sysconfig/shellinaboxd1OPTS=&quot;--css=/usr/share/shellinabox/white-on-black.css --disable-ssl-menu -s /:SSH:192.168.1.244&quot; 启动服务12systemctl enable shellinaboxd.servicesystemctl start shellinaboxd.service 网页登录服务器 https://192.168.1.244:4200","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-19-auth认证系统","slug":"web-django-19-auth认证系统","date":"2017-10-09T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/10/09/web-django-19-auth认证系统/","link":"","permalink":"http://www.digmyth.com/2017/10/09/web-django-19-auth认证系统/","excerpt":"","text":"目录 auth模块 Django内置补充 auth模块可以基于Cookie/Session自己写登录、注销的用户认证，这里我们学习Django自带的auth模块实现用户的登录、注销认证系统。 模块引入123from django.contrib import auth # 模块引入#from django.contrib.auth.models import User,AbstractUser#from app01 import models 下面2条命令会生成Django默认表，其中有张表auth_user用于存认证用户信息。12python manage.py makemigrationspython manage.py migrate 创建一个超级用户，auth_user可查看1python manage.py createsuperuser 自己写登录系统123456789101112131415161718192021def login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.method==&quot;POST&quot;: username=request.POST.get(&quot;username&quot;) pwd=request.POST.get(&quot;pwd&quot;) user_obj=auth.authenticate(username=username,password=pwd) # 验证 if user_obj: auth.login(request,user_obj) # 写入session return redirect(&quot;/home/&quot;) else: return redirect(&quot;/login/&quot;)def log_out(request): auth.logout(request) #相当于request.session.flush() 去除session return redirect(&quot;/login/&quot;)def home(request): if not request.user_obj.is_authenticated(): # 是否认证过有没写入session return redirect(&quot;/login/&quot;) return render(request,&quot;home.html&quot;) 注意：利用Django自带的表创建用户，不能对Django自带的表直接操作，那怎么创建呢，Django提供一个接口，通过auth模块操作User表.12from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;） 当Django自带User表字段不够用时，可以自己建表继承User表字段，方法:123from django.contrib.auth.models import AbstractUserclass UserInfo(AbstractUser): detail = modoles.CharField(max_length=32) 自建表记得settins.py配置AUTH_USER_MODEL123456789STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS =[ os.path.join(BASE_DIR,&quot;blog&quot;,&quot;static&quot;),]# MEDIA_ROOT=os.path.join(BASE_DIR,&apos;blog&apos;,&apos;media&apos;,&apos;upload&apos;)# MEDIA_URL = &apos;/media/&apos;AUTH_USER_MODEL= &quot;blog.UserInfo&quot; Django 内置补充1234567891011121314151617181920212223242526272829303132333435363738django已经为我们设计好了一个用于此种情况的装饰器：login_requierd()from django.contrib.auth.decorators import login_required @login_requireddef my_view(request): ...若用户没有登录，则会跳转到django默认的 登录URL &apos;/accounts/login/ &apos; (这个值可以在settings文件中通过LOGIN_URL进行修改)。并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。User对象User 对象属性：username， password（必填项）password用哈希算法保存到数据库is_staff ： 用户是否拥有网站的管理权限.is_active ： 是否允许用户登录, 设置为``False``，可以不用删除用户来禁止 用户登录2.1 、is_authenticated()表明是否认证通过并有session,当使用auth模块时，前端`&#123;&#123; request.user &#125;&#125;`可以直接使用不需要后端传入request.user变量。request.user.username 为AnonymousUser或用户名2.2 、创建用户使用 create_user 辅助函数创建用户:from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;）2.3 、check_password(passwd)用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 True2.4 、修改密码使用 set_password() 来修改密码user = User.objects.get(username=&apos;&apos;)user.set_password(password=&apos;&apos;)user.save 简单示例注册：1234567891011121314151617181920def sign_up(request): state = None if request.method == &apos;POST&apos;: password = request.POST.get(&apos;password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) email=request.POST.get(&apos;email&apos;, &apos;&apos;) username = request.POST.get(&apos;username&apos;, &apos;&apos;) if User.objects.filter(username=username): state = &apos;user_exist&apos; else: new_user = User.objects.create_user(username=username, password=password,email=email) new_user.save() return redirect(&apos;/book/&apos;) content = &#123; &apos;state&apos;: state, &apos;user&apos;: None, &#125; return render(request, &apos;sign_up.html&apos;, content) 修改密码：123456789101112131415161718192021222324@login_requireddef set_password(request): user = request.user state = None if request.method == &apos;POST&apos;: old_password = request.POST.get(&apos;old_password&apos;, &apos;&apos;) new_password = request.POST.get(&apos;new_password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) if user.check_password(old_password): if not new_password: state = &apos;empty&apos; elif new_password != repeat_password: state = &apos;repeat_error&apos; else: user.set_password(new_password) user.save() return redirect(&quot;/log_in/&quot;) else: state = &apos;password_error&apos; content = &#123; &apos;user&apos;: user, &apos;state&apos;: state, &#125; return render(request, &apos;set_password.html&apos;, content) 补充原文","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-19-Cookies-Session","slug":"web-django-19-Cookies-Session","date":"2017-10-08T12:26:37.000Z","updated":"2019-01-20T03:34:50.249Z","comments":true,"path":"2017/10/08/web-django-19-Cookies-Session/","link":"","permalink":"http://www.digmyth.com/2017/10/08/web-django-19-Cookies-Session/","excerpt":"","text":"目录 Cookies Session 代码学习 相关配置 总结 Cookies用户第一次请求时，服务器会在浏览器上写入cookies键值对，下一次请求会把这个键值对带上，服务器会验证这个cookies键值对，基于这样的特性cookies可以做登录验证和投票。如果没有cookies时，会先让你做用户登录。 Session所有的用户信息都写入客户端浏览器存在安全问题也不现实，我们把这些信息都写到服务器端，对应一个随机字符串，再把这个随机字符串写入cookies，格式为{“sessionid”:”随机字符串”},问题就得到了解决。 cookies就是能在客户端浏览器写键值对的一种机制，类似’user’:’abc’, 如果写的是’sessionid’:’随机字符串’，那么session就诞生了，服务端再拿到这样的随机字符串，记录信息格式如’随机字符串’:’你想存的敏感信息’ 代码学习Cookies 工作特性：在浏览器F12 network-&gt;cookies中首次请求时可以看到 Response Cookies有写入的键值对，下次再访问时Request Cookies有这个键值对，证明此时浏览器会带着这个键值对发给服务器。可以简单用下面代码测试123456def ck(request): print(request.COOKIES) # cookies会封装在request.COOKIES内 obj = render(request, &quot;ck.html&quot;, &#123;&quot;msg&quot;: &quot;&quot;&#125;) obj.set_cookie(&apos;user&apos;, &apos;wxq&apos;) # 向浏览器写入cookies键值对 return obj 下面用代码描述Cookies、Session各自工作：login.html123456&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/form&gt; views.py视图12345678910111213141516171819202122232425from app01 import modelsdef login(request): if request.method == &quot;GET&quot;: return render(request, &apos;login.html&apos;,&#123;&quot;msg&quot;: &quot;&quot;&#125;) else: u = request.POST.get(&quot;username&quot;) p = request.POST.get(&quot;pwd&quot;) v=models.UserInfo.objects.filter(username=u, pwd=p).exists() if v: # obj.set_cookie(&quot;user&quot;, u,max_age=5) request.session[&quot;user&quot;] = u request.session[&quot;pwd&quot;] = p return redirect(&quot;/home/&quot;) else: return render(request,&quot;login.html&quot;,&#123;&quot;msg&quot;: &quot;用户名或密码错误&quot;&#125;)def home(request): # v = request.COOKIES.get(&quot;user&quot;) v = request.session.get(&quot;user&quot;) if v: return HttpResponse(&quot;登录成功&quot;) else: return redirect(&quot;/login/&quot;) 利用session注销1234567891011def logout(request): &apos;&apos;&apos; obj=HttpResponse(&quot;xxx&quot;) obj.set_cookie(&quot;user&quot;,&quot;name&quot;) # 设置cookie request.COOKIES.get(&quot;user&quot;) # 获取cookie obj.delete_cookie(&apos;user&apos;) # 清除cookie &apos;&apos;&apos; #request.session[&apos;user&apos;] = &apos;wxq&apos; # 设置session #request.session.get(&apos;user&apos;) # 获取session request.session.clear() # 清除session return redirect(&quot;/login/&quot;) Cookies、Session相关配置配置参考 settings.py配置12345678910SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos; # 引擎（默认） SESSION_COOKIE_NAME ＝ &quot;sessionid&quot; # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）SESSION_COOKIE_PATH ＝ &quot;/&quot; # Session的cookie保存的路径（默认）SESSION_COOKIE_DOMAIN = None # Session的cookie保存的域名（默认）SESSION_COOKIE_SECURE = False # 是否Https传输cookie（默认）SESSION_COOKIE_HTTPONLY = True # 是否Session的cookie只支持http传输（默认）SESSION_COOKIE_AGE = 1209600 # Session的cookie失效日期（2周）（默认）SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使得Session过期（默认）SESSION_SAVE_EVERY_REQUEST = True # 是否每次请求都保存Session，默认修改之后才保存（默认） 总结1 cookies是记录在浏览器上的键值对，本身与登录没有任何关系。 cookies信息保存在request.COOKIES.2 session是记录在服务器上的键值对，key是一个随机字符串, session信息保存在request.session字典里的.3 只有Django框架有session 相关的封装,Flask/tornado等其它web框架是没有的，需要自己写Cookies、session.","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(三)","slug":"web-django-orm(三)","date":"2017-09-15T12:51:41.000Z","updated":"2018-01-18T03:45:03.508Z","comments":true,"path":"2017/09/15/web-django-orm(三)/","link":"","permalink":"http://www.digmyth.com/2017/09/15/web-django-orm(三)/","excerpt":"","text":"目录 Orm Shell FQ查询 聚合查询 参考资料官方昊练习一练习二pythoncode 一 Orm Shell pycharm中models我们己经学习过了，这里记录下在linux操作系统中启动Orm Shell需要做的几件事儿. 1 模块导入12345pip3 install pymysqlpycharm中可以在应用目录下__init__.py,也可以在项目目录__init__.py下import pymysqlpymysql.install_as_MySQLdb()但是linux系统里只能在项目目录下 2 models.py的区别1234在建立一对一或一对多关系表时需要位置参数on_delete=models.CASCADE，多对多不需要author=models.OneToOneField(&quot;Author&quot;,on_delete=models.CASCADE)publisher=models.ForeignKey(to=&quot;Publish&quot;,on_delete=models.CASCADE)authors=models.ManyToManyField(&quot;Author&quot;) 3 数据库12345678910DATABASES = &#123;&apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125; &#125; 4 明确指明INSTALLED_APPS123456789 INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;app01.apps.App01Config&apos;, ] 5 启动Orm Shell可以命令行操作orm语句学习了123python3 manage.py shell&gt;&gt;&gt; from app01 import models&gt;&gt;&gt; 6 联表sql示例原始sql语句的一个精典联表操作示例123456789101112131415161718 MariaDB [wxq_db]&gt; select sum(app01_book.price) as bookSumPrice,app01_publish.name -&gt;from app01_book_authors -&gt;left join app01_book -&gt;on app01_book.nid=book_id -&gt;left join app01_author -&gt;on author_id=app01_author.id -&gt;left join app01_publish -&gt;on publisher_id=app01_publish.id -&gt;group by app01_publish.name -&gt;having bookSumPrice &gt; 100 -&gt;order by bookSumPrice desc;+--------------+-----------------+| bookSumPrice | name |+--------------+-----------------+| 176.40 | 工业出版社 || 124.00 | 人民出版社 |+--------------+-----------------+2 rows in set (0.00 sec) 二 FQ查询123456789101112131415161718def FQQuery(request): from django.db.models import F,Q # F查询 # F查询用于自修改或字段比较或一个字段值赋值给另一字段的场景 # ret1=models.Book.objects.filter(comment_num__gt=50) # ret2=models.Book.objects.filter(comment_num__gt=F(&quot;read_num&quot;)*2) # print(ret2) #models.Book.objects.all().update(price=F(&quot;price&quot;)+10) ################################## Q查询 ret3=models.Book.objects.filter(comment_num__gt=50,read_num__gt=50) # 并且 ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100)) # 或者 print(ret3) return HttpResponse(&quot;OK&quot;) F查询总结1234F查询适用场景:场景1： 两个字段间值的比较F(&apos;price&apos;)场景2： 自运算，如F(&apos;price&apos;) + 10 Q查询总结12345# 注意事项：不同顺序的区别，不同放置的区别# 关键字语句放在Q查询的后面，并且只要有(逗号)就是(且)的意思#ret3=models.Book.objects.filter(price__lt=100,(Q(comment_num__gt=100)|Q(read_num__gt=100))) # 有效语句#ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100),price__lt=100) # 有效语句#ret3=models.Book.objects.filter(price__lt=100,Q(comment_num__gt=100)|Q(read_num__gt=100)) # 无效语句 三 聚合查询1234567891011121314151617181920212223242526272829303132def juheQuery(reqeuest): from django.db.models import F,Q,Avg,Count,Sum,Min,Max # 单纯聚合函数 # 计算所有图书的平均价格 # ret=models.Book.objects.all().aggregate(priceSum=Sum(&quot;price&quot;)) # print(ret) # &#123;&apos;priceSum&apos;: Decimal(&apos;2158.00&apos;)&#125; # 统计每一本书的作者个数 # ret2=models.Book.objects.all().annotate(authors_num=Count(&quot;authors&quot;)) # 返回QuerySet # print(ret2) # [book_obj1,book_obj2,book_obj3,book_obj4,....] # # for obj in ret2: # print(obj.nid,obj.title,obj.authors_num) # 查询每一个出版社出版过的所有书籍的总价格 #方式1： # ret3=models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)) # # for obj in ret3: # print(obj.id,obj.name,obj.priceSum) # ret4 = models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)).values(&quot;name&quot;,&quot;priceSum&quot;) # print(ret4) # 方式2： # ret5=models.Book.objects.all().values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&quot;publisher__name&quot;,&quot;priceSum&quot;) # print(ret5) return HttpResponse(&quot;OK&quot;) 实践示例12345In [178]: models.Publish.objects.annotate(priceSum=Sum(&quot;book__price&quot;)).values(&apos;name&apos;,&apos;priceSum&apos;)Out[178]: &lt;QuerySet [&#123;&apos;priceSum&apos;: Decimal(&apos;12.00&apos;), &apos;name&apos;: &apos;人民出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;工业出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;清华版社&apos;&#125;]&gt;In [179]: models.Book.objects.values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&apos;publisher__name&apos;,&apos;priceSum&apos;)Out[179]: &lt;QuerySet [&#123;&apos;publisher__name&apos;: &apos;人民出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;12.00&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;清华版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;工业出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;]&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"ceph-luminous安装","slug":"ceph-luminous安装","date":"2017-09-05T01:41:54.000Z","updated":"2017-11-13T05:12:03.615Z","comments":true,"path":"2017/09/05/ceph-luminous安装/","link":"","permalink":"http://www.digmyth.com/2017/09/05/ceph-luminous安装/","excerpt":"","text":"这里只简单列下luminous12.X 安装，默认存储引警Bluestore及监控界面 1 /etc/hosts解析略2 ntpservers时间同步略3 系统配置123456sed -i &apos;s/SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/configsetenforce 0systemctl stop firewalld systemctl disable firewalldsystemctl stop NetworkManagersystemctl disable NetworkManager 添加yum源123456789[root@cluster-sql ~]# cat ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 4 新建集群123456# mkdir /mnt/cluster# cd /mnt/cluster # yum -y install ceph-deploy# ceph-deploy install --no-adjust-repos node01 node02 node03# ceph-deploy new node01 node02 node03 5 生成原始文件12[root@node01 cluster]# ls /mnt/clusterceph.conf ceph-deploy-ceph.log ceph.mon.keyring 6 根据需要更新原始文件添加需的ceph.conf配置12345678910111213[root@node01 cluster]# cat ceph.conf [global]fsid = d8fa6509-0196-41bc-838e-6226c927e680mon_initial_members = node01, node02, node03mon_host = 192.168.1.10,192.168.1.11,192.168.1.12auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephxmon_allow_pool_delete=true[mgr]mgr modules = dashboard 7 初始化同时推送配置文件1# ceph-deploy mon create-initial 9 推送密钥文件1[root@node01 cluster]# ceph-deploy admin node01 node02 node03 10 查看集群状态12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: 11 添加激活osd磁盘12345[root@node01 cluster]# ceph-deploy osd create --bluestore node01:/dev/sdb node02:/dev/sdb node03:/dev/sdb --zap-disk[root@node01 cluster]# lsceph.bootstrap-mds.keyring ceph.bootstrap-osd.keyring ceph.client.admin.keyring ceph-deploy-ceph.logceph.bootstrap-mgr.keyring ceph.bootstrap-rgw.keyring ceph.conf ceph.mon.keyring 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[root@node01 cluster]# systemctl status ceph-osd@2 # 查看单个osd进程[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN no active mgr clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: ####[root@node01 cluster]# ceph quorum_status --format json-pretty[root@node01 cluster]# ceph osd treeID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 0.14607 root default -3 0.04869 host node01 0 hdd 0.04869 osd.0 up 1.00000 1.00000 -5 0.04869 host node02 1 hdd 0.04869 osd.1 up 1.00000 1.00000 -7 0.04869 host node03 2 hdd 0.04869 osd.2 up 1.00000 1.00000 [root@node01 cluster]# df -hTFilesystem Type Size Used Avail Use% Mounted on/dev/mapper/vg-root xfs 16G 1.7G 14G 11% /devtmpfs devtmpfs 482M 0 482M 0% /devtmpfs tmpfs 493M 0 493M 0% /dev/shmtmpfs tmpfs 493M 6.9M 486M 2% /runtmpfs tmpfs 493M 0 493M 0% /sys/fs/cgroup/dev/sda1 xfs 497M 159M 338M 32% /boot/dev/mapper/vg-data xfs 3.9G 33M 3.9G 1% /datatmpfs tmpfs 99M 0 99M 0% /run/user/0/dev/sdb1 xfs 97M 5.4M 92M 6% /var/lib/ceph/osd/ceph-0[root@node01 cluster]# cat /var/lib/ceph/osd/ceph-0/type bluestore[root@node01 cluster]# parted /dev/sdb printModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 53.7GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name Flags 1 1049kB 106MB 105MB xfs ceph data 2 106MB 53.7GB 53.6GB ceph block 12 配置ceph-mgr1[root@node01 cluster]# ceph-deploy mgr create node01 node02 node03 可以看到己被激活12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: node01(active), standbys: node02, node03 osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 3164 MB used, 146 GB / 149 GB avail pgs: 123456789101112131415[root@node01 cluster]# ceph config-key put mgr/dashboard/server_addr 192.168.1.10set mgr/dashboard/server_addr[root@node01 cluster]# ceph config-key put mgr/dashboard/server_port 7000set mgr/dashboard/server_port[root@node01 cluster]# ceph mgr module enable dashboard[root@node01 cluster]# ceph mgr module ls[ &quot;dashboard&quot;, &quot;restful&quot;, &quot;status&quot;][root@node01 cluster]# netstat -tnlp | grep 7000tcp 0 0 192.168.1.10:7000 0.0.0.0:* LISTEN 34774/ceph-mgr 13 ceph-fs部署123456789101112# ceph-deploy mds create node01 node02 node03# ceph osd pool create cephfs_data &lt;pg_num&gt;# ceph osd pool create cephfs_metadata &lt;pg_num&gt;# ceph fs new cephfs cephfs_metadata cephfs_data(ceph-mds)[root@pike-vm /]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ](ceph-mds)[root@pike-vm /]# ceph fs get cephfsFilesystem &apos;cephfs&apos; (1)fs_name cephfs... 14 cephfs文件系统挂载确保客户端存在/etc/ceph/ceph.client.admin.keyring /etc/ceph/ceph.conf 方法一：12345[root@admin:]# yum install ceph-commonroot@admin:~# ceph-authtool -l /etc/ceph/ceph.client.admin.keyring[client.admin]key = AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg==mount -t ceph 172.16.170.135:6789:/ /mnt/cephdir/ -o name=admin,secret=AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg== 方法二：123456[root@wxq ceph]# yum install ceph-fuse[root@wxq ceph]# ceph-fuse -m 172.18.23.17:6789 /mnt/cephdir/ceph-fuse[25849]: starting ceph clientceph-fuse[25849]: starting fuse[root@wxq ceph]# df -hT | grep fuseceph-fuse fuse.ceph-fuse 135G 116M 135G 1% /mnt/cephdir 总结几点1 ceph quorum_status –format json-pretty 可查看选举详情2 ceph osd pool application enable volumes rbd 标记一个池的应用(cephfs/rbd/rgw),不标记可以使用但集群状态将为warning3 保护机制的存在默认删除池是不允许的12345[root@ceph cluster]# ceph --show-config | grep deletemon_allow_pool_delete = falsemon_fake_pool_delete = falseosd_pool_default_flag_nodelete = falserbd_mirror_delete_retry_interval = 30.000000 需要编辑ceph.conf12[global]mon_allow_pool_delete=true 界面视图","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"kolla on redhat 7.2","slug":"kolla-on-redhat7.2","date":"2017-08-08T01:41:54.000Z","updated":"2017-09-10T16:06:09.587Z","comments":true,"path":"2017/08/08/kolla-on-redhat7.2/","link":"","permalink":"http://www.digmyth.com/2017/08/08/kolla-on-redhat7.2/","excerpt":"","text":"在一次项目中客户要求在redhat 7.2系统安装部署kolla ocata版本，在这种特定要求下还是实践一把的，在此把详细文档做个记录。 1. install wget最小化安装，系统很干净1rpm -ivh ftp://195.220.108.108/linux/centos/7.3.1611/os/x86_64/Packages/wget-1.14-13.el7.x86_64.rpm 2. remove yum of redhat 首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的12rpm -aq|grep yum|xargs rpm -e --nodeps rpm -aq|grep python-iniparse|xargs rpm -e --nodeps 3. install new yum123456wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-3.4.3-132.el7.centos.0.1.noarch.rpmwget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm rpm ivh *.rpm 4. yum sourece configure123456789101112131415161718192021222324252627edit /etc/yum.repos.d/Centos72.repo[base]name=CentOS-$releasever - Basebaseurl=http://vault.centos.org/7.2.1511/os/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updatesbaseurl=http://vault.centos.org/7.2.1511/updates/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[extras]name=CentOS-$releasever - Extrasbaseurl=http://vault.centos.org/7.2.1511/extras//$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[centosplus]name=CentOS-$releasever - Plusbaseurl=http://vault.centos.org/7.2.1511/centosplus//$basearch/gpgcheck=1enabled=0 5. update yum123yum clean allyum updateyum install epel-release axel vim git curl wget net-tools git gcc lrzsz python-devel vsftpd createrepo 6. optimization system123close selinuxclose NetworkManagerclose firewalld 7. add docker yum12345678tee /etc/yum.repos.d/docker.repo &lt;&lt; &apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 8. install docker1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 如果安装很慢，可以挂载ocata_20170420.iso光盘进入目录Packages/d 下面有相应软件包，执行下面命令1yum localinstall docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm docker-engine-1.12.6-1.el7.centos.x86_64.rpm 再执行完成安装1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 9. 配置docker12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof edit /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker:1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker 10. install pip1234yum install python-pippip install -U pip#easy_install -U pip # 或者easy_install工具安装pip install docker-py 11. install kolla-ansible1234# yum install gcc libffi-devel python-devel openssl-devel# pip install kolla-ansible#cp -rf /usr/share/kolla-ansible/etc_examples/kolla/ /etc/# kolla-genpwd 12. install docker registry123456789mount /dev/sr0 /mntdocker load &lt; registry.tarmkdir /opt/registrytar -zxf docker-registry.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry# curl http://172.16.100.100:4000/v2/_catalog# curl http://172.16.100.100:4000/v2/kolla/centos-source-nova-api/tags/list&#123;&quot;name&quot;:&quot;kolla/centos-source-nova-api&quot;,&quot;tags&quot;:[&quot;4.0.0.3&quot;]&#125; 13. ceph disk set123parted /dev/sdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdd -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1 14. in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 15. edit global.yml12edit /etc/kolla/global.yml此处略过。。。 16. kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy 17. cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient 18. access dashboard1curl http://172.16.100.100/horizon 如果在openstack平台虚机中搭建kolla情况下，让其能通过浮动地址访问内部地址的dashboard1iptables -t nat -I PREROUTING -d 172.18.128.244 -p tcp --dport 80 -j DNAT --to 172.16.100.100 1成功访问：http://172.18.128.244 《成功》。。。","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-ganesha-manila","slug":"cephfs-manila","date":"2017-08-05T01:41:54.000Z","updated":"2017-11-16T03:31:22.380Z","comments":true,"path":"2017/08/05/cephfs-manila/","link":"","permalink":"http://www.digmyth.com/2017/08/05/cephfs-manila/","excerpt":"","text":"openstack manila项目最近很活跃，ceph刚好发布luminous版,具说cephfs性能得到很大提升，那么manila 后端存储cephfs找到了着力点，得到在大力发展。这里对manila cephfs实验做下记录。官网链接参考 驱动简介manila cephfs驱动分为两种：一种： cephfs native share相当于租户虚机直接连接cephfs集群，存在安全问题，生产环境中很难推行。 1 ceph-common包安装在manila-share中2 ceph-common/ceph-fuse 软件安装在租户虚机Guest里3 ceph集群与manila-share网络打通4 ceph集群与租户虚机网络打通 二种： cephfs nfs share官网说明1234567891 Pike or later versions of manila.2 Kraken or later versions of Ceph.3 2.5 or later versions of NFS-Ganesha.4 A Ceph cluster with a filesystem configured5 ceph-common package installed in the servers running the manila-share service.6 NFS client installed in the guest.7 Network connectivity between your Ceph cluster’s public network and the servers running the manila-share service.8 Network connectivity between your Ceph cluster’s public network and NFS-Ganesha server.9 Network connectivity between your NFS-Ganesha server and the manila guest. 在cephfs nfs share驱动，借住nfs-Ganesha解决了网络安全性问题，避免ceph public网直接暴露。直观的理解就是Ganesha为协议转换层，FSAL_CEPH把guest vm的NFS协议调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. 安装openstack+ceph跟据官网所说准备一套openstack pike + ceph luminous 环境，安装过程略。。。。 ceph luminous 源12345678[ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 安装nfs-ganesha 需要nfs-ganesha 版本为2.5以上，只能编译安装了,具体[请参考(http://www.digmyth.com/2017/06/05/cephfs-Ganesha/)1234567891011yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -ycd /optgit clone --recursive git://github.com/nfs-ganesha/nfs-ganesha.gitmkdir /opt/build &amp;&amp; cd /opt/buildcmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 配置manila-share必要客户端安装 1234yum instal ceph ceph-fuse ceph-common libcephfs1-devel librgw2-develscp ceph_mon:/etc/ceph/* /etc/ceph #^# 复制相关配置文件``` ceph授权 如下命令会生成manila.keyring文件，一并复制到 manila-share的/etc/ceph目录下123456789101112read -d &apos;&apos; MON_CAPS &lt;&lt; EOFallow r,allow command &quot;auth del&quot;,allow command &quot;auth caps&quot;,allow command &quot;auth get&quot;,allow command &quot;auth get-or-create&quot;EOFceph auth get-or-create client.manila -o manila.keyring \\mds &apos;allow *&apos; \\osd &apos;allow rw&apos; \\mon &quot;$MON_CAPS&quot; 编辑manila-share的/etc/ceph/ceph.conf 添加如下配置1234567...[client.manila]client mount uid = 0client mount gid = 0log file = /var/logs/ceph-client.manila.logadmin socket = /run/ceph/ceph-mon.172.18.23.17.asokkeyring = /etc/ceph/manila.keyring 允许快照支持1ceph mds set allow_new_snaps true --yes-i-really-mean-it 编辑manila-share的/etc/manila/manila.conf 添加如下配置12345678910111213141516[DEFAULT]...enabled_share_backends = generic, cephfsnfs1default_share_type = default_share_typeenabled_share_protocols = NFS,CIFS,CEPHFS[cephfsnfs1]driver_handles_share_servers = Falseshare_backend_name = CEPHFSNFS1share_driver = manila.share.drivers.cephfs.driver.CephFSDrivercephfs_protocol_helper_type = NFScephfs_conf_path = /etc/ceph/ceph.confcephfs_auth_id = manilacephfs_cluster_name = cephcephfs_enable_snapshots = Falsecephfs_ganesha_server_is_remote= Falsecephfs_ganesha_server_ip = 172.18.23.17 # 指明nfs-ganesha服务器位置 验证服务验证12345678910(manila-share)[root@pike-vm /]# manila service-list+----+------------------+--------------------+------+---------+-------+----------------------------+| Id | Binary | Host | Zone | Status | State | Updated_at |+----+------------------+--------------------+------+---------+-------+----------------------------+| 1 | manila-data | pike-vm | nova | enabled | up | 2017-11-15T10:14:37.000000 || 2 | manila-scheduler | pike-vm | nova | enabled | up | 2017-11-15T10:14:38.000000 || 3 | manila-share | pike-vm@generic | nova | enabled | up | 2017-11-15T10:14:40.000000 || 4 | manila-share | pike-vm@cephfsnfs1 | nova | enabled | up | 2017-11-15T10:14:40.000000 |+----+------------------+--------------------+------+---------+-------+----------------------------+ 创建manila实例123manila type-create cephfsnfstype falsemanila type-key cephfsnfstype set vendor_name=Ceph storage_protocol=NFSmanila create --share-type cephfsnfstype --name cephnfsshare1 nfs 1 查看共享路径123456(manila-share)[root@pike-vm /]# manila share-export-location-list cephnfsshare1+--------------------------------------+---------------------------------------------------------------------+-----------+| ID | Path | Preferred |+--------------------------------------+---------------------------------------------------------------------+-----------+| 18cf503a-9357-40e2-925a-53333031a3e6 | 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 | False |+--------------------------------------+---------------------------------------------------------------------+-----------+ 权限管理 1manila access-allow cephnfsshare1 ip 172.24.4.225 guest vm 挂载1mount -t nfs 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 /mnt/nfs/","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-16-Form验证","slug":"web-django-16-Form","date":"2017-07-20T12:26:37.000Z","updated":"2018-01-18T03:41:15.272Z","comments":true,"path":"2017/07/20/web-django-16-Form/","link":"","permalink":"http://www.digmyth.com/2017/07/20/web-django-16-Form/","excerpt":"","text":"目录 基本功能 基本使用 常用字段 常用插件 总结 这篇博客记录Django Form功能的学习，链接请参考Django Form武佩齐权威博客 基本功能 Form验证 生成html标签（保留上次提交的内容） 详细：12345678class TestForm(forms.Form): username = fields.CharField( # 静态字段 required=True, min_length=6, max_length=8, error_messages=&#123;&quot;required&quot;:&quot;用户名不能为空&quot;, &quot;min_length&quot;:&quot;最少6位&quot;&#125;， widget = widgets.TextInput(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # 插件 ) 基本使用模块导入-&gt;类定义-&gt;定义字段-&gt; 定义插件-&gt; 实例化-&gt; 传入前端-&gt;前端渲染12from django import formsfrom django.forms import fields,widgets views.py定义Form类，写出来常用插件用法1234567891011121314151617class TestForm(forms.Form): n1 = fields.CharField( widget = widgets.TextInput() ) n2 = fields.CharField( widget = widgets.PasswordInput() ) n3 = fields.CharField( widget=widgets.Textarea() ) n4 = fields.CharField( widget=widgets.Select(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]) ) 单选多选总结：1 把上面CharField改为ChoiceField就好了，并choices=[]提到前面来2 单选CharField就可以，多选一定记得用ChoicField,并且choices=[]提前 123456789# n5 = fields.CharField( # # 这里是有问题的，CharField只能是字符串，&quot;n5&quot;:[1,3]默认值是一个列表，后端没法接收数据。# widget=widgets.SelectMultiple(choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)])# )n5 = fields.ChoiceField( choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget=widgets.SelectMultiple()) 12345678910111213141516n6 = fields.IntegerField( widget=widgets.RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]))n7 = fields.CharField( # 这里只会生成CheckboxInput标签 &lt;input type=&quot;checkbox&quot; name=&quot;n7&quot; required=&quot;&quot; id=&quot;id_n7&quot;&gt; widget=widgets.CheckboxInput())n8 = fields.ChoiceField( # 真正生成checkbox组写法 choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget = widgets.CheckboxSelectMultiple())n9 = fields.FileField( widget=widgets.FileInput()) 实例化Form类时传入默认值用于前端展示，主要学习文件上传的方法123456789101112131415161718192021222324252627def test(request): if request.method == &quot;GET&quot;: obj = TestForm( initial=&#123;&quot;n1&quot;:&quot;请输入&quot;,&quot;n2&quot;:&quot;xxx&quot;,&quot;n3&quot;:&quot;文本输入&quot;,&quot;n4&quot;:1,&quot;n5&quot;:[1,3], &quot;n6&quot;:2,&quot;n7&quot;:&quot;&quot;,&quot;n8&quot;:[2,3]&#125; ) return render(request, &quot;test.html&quot;,&#123;&quot;obj&quot;:obj&#125;) if request.method == &quot;POST&quot;: # 文件提交保存在request.FILES # obj = TestForm(data=request.POST,files=request.FILES) # if obj.is_valid(): # # obj.cleaned_data[&apos;n9&apos;] 这是上传的文件对象 # #obj.cleaned_data[&apos;n9&apos;].name 这是上传文件名 # files_obj = obj.cleaned_data[&apos;n9&apos;] # f = open(files_obj.name, &apos;wb&apos;) # for chunck in files_obj.chunks(): # f.write(chunck) # f.close() # else: # pass files_obj = request.FILES.get(&quot;n9&quot;) f = open(files_obj.name, &apos;wb&apos;) for chunck in files_obj.chunks(): f.write(chunck) f.close() return redirect(&apos;/test/&apos;) 提交文件需要enctype=&quot;multipart/form-data&quot;测试时忽略其它值用novalidatetest.html12345678910111213&lt;form action=&quot;/test/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;&#123; obj.n1 &#125;&#125; &#123;&#123; obj.n2 &#125;&#125; &#123;&#123; obj.n3 &#125;&#125; &#123;&#123; obj.n4 &#125;&#125; &#123;&#123; obj.n5 &#125;&#125; &#123;&#123; obj.n6 &#125;&#125; &#123;&#123; obj.n7 &#125;&#125; &#123;&#123; obj.n8 &#125;&#125; &#123;&#123; obj.n9 &#125;&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/form&gt; 常用字段123456CharField 字符串 EmailField 字符串（邮箱格式）IntegerField 字符串（整形格式）GenericIPAddressField 字符串（Ip格式）RegexField 字符串（正则自定义）FileField 文件对象 常用插件123456789101112TextInputPasswordInputTextareaFileInput()Select(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;，choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])SelectMultiple(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)]RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])CheckboxInput()CheckboxSelectMultiple() Form问题在前端使用选择标签渲染时，多表foreigh key跨表查询数据源无法实时更新。比如choices的选项可以从数据库中获取，但是由于是静态字段获取的值无法实时更新，那么需要自定义构造方法从而达到此目的。 方法有很多，推荐123456789101112131415161718from django.forms import Formfrom django.forms import widgetsfrom django.forms import fieldsfrom django.core.validators import RegexValidator class MyForm(Form): user = fields.ChoiceField( # choices=((1, &apos;上海&apos;), (2, &apos;北京&apos;),), initial=2, widget=widgets.Select ) def __init__(self, *args, **kwargs): super(MyForm,self).__init__(*args, **kwargs) # self.fields[&apos;user&apos;].widget.choices = ((1, &apos;上海&apos;), (2, &apos;北京&apos;),) # 或 self.fields[&apos;user&apos;].widget.choices = models.Classes.objects.all().value_list(&apos;id&apos;,&apos;caption&apos;) 总结Django Form功能一是验证，功能二是用于生成html标签并且能保留上次提交的内容。注意Form验证读取数据时的数据源实时更新问题，一般我们自定义Form类的构造方法实现。 还有很多要学习的。。。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"基于CentOS 7的PXE装机","slug":"基于CentOS7的PXE装机","date":"2017-07-01T01:41:54.000Z","updated":"2021-01-27T08:35:19.030Z","comments":true,"path":"2017/07/01/基于CentOS7的PXE装机/","link":"","permalink":"http://www.digmyth.com/2017/07/01/基于CentOS7的PXE装机/","excerpt":"","text":"网上各种贴子各种飞总说不到重点，本人表示不喜欢。 基于Centos7PXE装机基本概念 pxe装机依赖几个服务： dhcp/tftp/fileserver dhcp: 为装机分配地址及指明tftp server服务器是谁，下载什么文件 tftp: 提供网络引导文件pxelinux.0及内核文件vmlinuz、initrd.img (具体文件： boot.msg initrd.img pxelinux.0 pxelinux.cfg splash.png vesamenu.c32 vmlinuz) fileserver: 提供安装树输出，一般指yum repository (yum 仓库或yum源) syslinux: 网络引导文件pxelinux.0由syslinux软件包提供 dhcp服务1234yum -y install dhcprpm -ql dhcp/etc/dhcp/dhcpd.conf # 主配置文件/var/lib/dhcpd/dhcpd.leases # 租约文件 12345678910111213141516[root@master ~]# cat /etc/dhcp/dhcpd.conf | grep -v ^# | grep -v ^$option domain-name &quot;digmyth.com&quot;;option domain-name-servers 114.114.114.114;default-lease-time 600;max-lease-time 7200;log-facility local7;subnet 172.16.10.0 netmask 255.255.255.0 &#123; range 172.16.10.20 172.16.10.30; option domain-name-servers 172.16.10.1; option domain-name &quot;digmyth.com&quot;; option routers 172.16.10.254; default-lease-time 600; max-lease-time 7200;&#125;filename &quot;pxelinux.0&quot;; # 定义网络引导文件名next-server 172.16.10.1; # 定义tftp server地址 启动服务123# systemctl start dhcpd[root@master ~]# netstat -unlp | grep 67udp 0 0 0.0.0.0:67 0.0.0.0:* 995/dhcpd syslinux提供引导文件1234准备网络引导文件pxelinux.0 相当于bootloader# yum -y install syslinux[root@master tftpboot]# ll /usr/share/syslinux/pxelinux.0 -rw-r--r--. 1 root root 26764 Nov 6 2016 /usr/share/syslinux/pxelinux.0 tftp server12345# yum -y install tftp tftp-server[root@master ~]# rpm -ql tftp-server/etc/xinetd.d/tftp # 启动文件/usr/sbin/in.tftpd/var/lib/tftpboot # 服务根目录 1234567891011121314# cat /etc/xinetd.d/tftpservice tftp&#123; socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /var/lib/tftpboot disable = no #改为no per_source = 11 cps = 100 2 flags = IPv4&#125; 启动tftp服务1234# cp /usr/share/syslinux/pxelinux.0 /var/lit/tftpboot# systemctl start tftp# tftp localhost&gt; get pxelinux.0 # 测试成功 准备内核及其它相关文件 此时pxe己经能够获得地址并下载pxelinux.0进行网络引导，接下来是下载内核文件vmlinuz、initrd.img继续完成装机。 这里我拿CentOS7.2为例：CentOS-7-x86_64-DVD-1511.iso 12345[root@master ~]# mount -o loop CentOS-7-x86_64-DVD-1511.iso /mntmount: /dev/loop0 is write-protected, mounting read-only[root@master pxeboot]# cd /mnt/images/pxeboot/[root@master pxeboot]# cp vmlinuz /var/lib/tftpboot/[root@master pxeboot]# cp initrd.img /var/lib/tftpboot/ 12345678910111213mkdir /var/lib/tftpboot/pxelinux.cfgcp /mnt/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg /default [root@master pxelinux.cfg]# cat default default vesamenu.c32#default linux # 这里是一个标签，对找后面相应的labeltimeout 600menu title CentOS 7 wxq # 此处定义titlelabel linux menu label ^Install CentOS 7 # 此处定义系统安装时显示版本 kernel vmlinuz append initrd=initrd.img method=http://172.16.10.1/pub/ ks=http://172.16.10.1/pxe/CentOS72.ks# 注意： 如果此处只定义method,那么装机过程将全手动。 此外还有一些额外文件12345[root@master ~]# ls /mnt/isolinux/boot.cat grub.conf isolinux.bin memtest TRANS.TBL vesamenu.c32boot.msg initrd.img isolinux.cfg splash.png upgrade.img vmlinuz[root@master ~]# ll /var/lib/tftpboot/boot.msg initrd.img pxelinux.0 splash.png vesamenu.c32 vmlinuz 定义安装树12345# yum -y install httpd# mkdir /var/www/html/pxe# mkdir /var/www/html/pub# mount --bind /mnt /var/www/html/pub/ # systemctl start httpd 定义ks文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/pxe/CentOS72.ks[root@master pxe]# cat CentOS72.ks#version=DEVEL# System authorization informationinstall# Keyboard layoutskeyboard --vckeymap=us --xlayouts=&apos;us&apos;auth --enableshadow --passalgo=sha512# Use CDROM installation media# Run the Setup Agent on first boot#firstboot --enable# System languagelang en_US.UTF-8url --url=http://172.16.10.1/pub/# Use graphical installgraphical#textselinux --disabledskipxreboot# Network information#network --bootproto=static --device=ens33 --gateway=172.16.10.254 --ip=172.16.10.30 --nameserver=114.114.114.114 --netmask=255.255.255.0 --onboot=on --ipv6=auto --activatenetwork --bootproto=dhcp --device=ens33 --onboot=yes --ipv6=auto --activatenetwork --hostname=digmyth# Root password=123456rootpw --iscrypted $6$6ErC1johQ5LVAYwQ$cGGxb6Q6./SpvXCZs.K39d9LpV/IeFnspUT6mHmsVsARzToRCSsZ4fLxcOh0tYWpt38Yh6JoMzmSEkEtCtMlS/# System servicesservices --disabled=&quot;chronyd&quot;# System timezonetimezone Asia/Shanghai --isUtc --nontp# System bootloader configurationclearpart --all --initlabelbootloader --append=&quot; crashkernel=auto&quot; --location=mbr --boot-drive=sda# Partition clearing information#clearpart --drives=sda --initlabel#clearpart --none --initlabel# Disk partitioning information#ignoredisk --only-use=sda#part pv.735 --fstype=&quot;lvmpv&quot; --ondisk=sda --size=19979#volgroup vg --pesize=4096 pv.735#logvol /boot --fstype=&quot;xfs&quot; --size=500 --name=boot --vgname=vg#logvol / --fstype=&quot;xfs&quot; --size=16000 --name=root --vgname=vg#logvol /data --fstype=&quot;xfs&quot; --size=3000 --name=data --vgname=vg#logvol swap --fstype=&quot;swap&quot; --grow --size=1%packages@^minimal@corekexec-toolsvimnet-toolssysstat%end%posttouch /root/wxq.txt%end%addon com_redhat_kdump --enable --reserve-mb=&apos;auto&apos;%end 上面的装机将进入图形界面手动分区安装 到此完结，可以结合cobbler实现多pxe环境并存。 cobbler 一些概念： distro发行版： 其实就是pxe所说的相应内核文件 profile: 提供pxeboot引导文件、KS文件、安装树（用现有iso镜像mirror/import方式） 是不是很完美 。。。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux java install","slug":"linux-java-install","date":"2017-06-21T03:42:54.000Z","updated":"2021-01-29T10:01:54.393Z","comments":true,"path":"2017/06/21/linux-java-install/","link":"","permalink":"http://www.digmyth.com/2017/06/21/linux-java-install/","excerpt":"","text":"download jdk1.812[root@nodeadm ]# mkdir /usr/local/java[root@nodeadm ]# tar xf jdk-8u181-linux-x64.tar.gz -C /usr/local/java uncompress1234567891011121314151617[root@nodeadm java]# pwd/usr/local/java[root@nodeadm java]# ll jdk1.8.0_181/total 25976drwxr-xr-x 2 root root 4096 Sep 21 08:54 bin-r--r--r-- 1 root root 3244 Sep 21 08:54 COPYRIGHTdrwxr-xr-x 3 root root 132 Sep 21 08:54 include-rw-r--r-- 1 root root 5207314 Sep 21 08:54 javafx-src.zipdrwxr-xr-x 5 root root 185 Sep 21 08:54 jredrwxr-xr-x 5 root root 245 Sep 21 08:54 lib-r--r--r-- 1 root root 40 Sep 21 08:54 LICENSEdrwxr-xr-x 4 root root 47 Sep 21 08:54 man-r--r--r-- 1 root root 159 Sep 21 08:54 README.html-rw-r--r-- 1 root root 424 Sep 21 08:54 release-rw-r--r-- 1 root root 21099920 Sep 21 08:54 src.zip-rw-r--r-- 1 root root 106782 Sep 21 08:54 THIRDPARTYLICENSEREADME-JAVAFX.txt-r--r--r-- 1 root root 154222 Sep 21 08:54 THIRDPARTYLICENSEREADME.txt set java_env123456[root@nodeadm java]# tail -n 5 /etc/profileexport JAVA_HOME=/usr/local/java/jdk1.8.0_181export JRE_HOME=/usr/local/java/jdk1.8.0_181/jreexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 仅作记录","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-11-模板渲染","slug":"web-django-11-模板渲染","date":"2017-06-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/06/20/web-django-11-模板渲染/","link":"","permalink":"http://www.digmyth.com/2017/06/20/web-django-11-模板渲染/","excerpt":"","text":"目录 基本方法 过滤器 标签 Django对template中html的渲染有着一套语法, 基本方法1234567891011return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 过滤器filter内置一些方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 1 add ： 给变量加上相应的值 # # 2 addslashes : 给变量中的引号前加上斜线 # # 3 capfirst : 首字母大写 # # 4 cut ： 从字符串中移除指定的字符 # # 5 date ： 格式化日期字符串 # # 6 default ： 如果值是False,就替换成设置的默认值，否则就是用本来的值 # # 7 default_if_none: 如果值是None，就替换成设置的默认值，否则就使用本来的值#value1=&quot;aBcDe&quot;&#123;&#123; value1|upper &#125;&#125;&lt;br&gt;#value2=5&#123;&#123; value2|add:3 &#125;&#125;&lt;br&gt;#value3=&apos;he llo wo r ld&apos;&#123;&#123; value3|cut:&apos; &apos; &#125;&#125;&lt;br&gt;#import datetime#value4=datetime.datetime.now()&#123;&#123; value4|date:&apos;Y-m-d&apos; &#125;&#125;&lt;br&gt;#value5=[]&#123;&#123; value5|default:&apos;空的&apos; &#125;&#125;&lt;br&gt;#value6=&apos;&lt;a href=&quot;#&quot;&gt;跳转&lt;/a&gt;&apos;&#123;&#123; value6 &#125;&#125;&#123;% autoescape off %&#125; &#123;&#123; value6 &#125;&#125;&#123;% endautoescape %&#125;&#123;&#123; value6|safe &#125;&#125;&lt;br&gt;&#123;&#123; value6|striptags &#125;&#125;#value7=&apos;1234&apos;&#123;&#123; value7|filesizeformat &#125;&#125;&lt;br&gt;&#123;&#123; value7|first &#125;&#125;&lt;br&gt;&#123;&#123; value7|length &#125;&#125;&lt;br&gt;&#123;&#123; value7|slice:&quot;:-1&quot; &#125;&#125;&lt;br&gt;#value8=&apos;http://www.baidu.com/?a=1&amp;b=2&apos;&#123;&#123; value8|urlencode &#125;&#125;&lt;br&gt; value9=&apos;hello I am pythoner&apos; 标签Django 提供的函数: simple_tag 可以有多个参数 filter 只能有2个参数，并且可以做条件语句的条件 自定义过滤器、自定义标签 形如for/if123&#123;% for item in todo_list %&#125; &lt;p&gt;&#123;&#123; forloop.counter &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 自定义标签当内置函数不满足需求时，可自定义filter/simple_tag 1 在Django app中创建目录名心须为templatetags的目录 2 在templatetags下随意定义.py 文件 如my_tag.py12345678910111213141516#!/usr/bin/env python3__author__ = &quot;wxq&quot;from django import templatefrom django.utils.safestring import mark_saferegister = template.Library()# register变量名是固定的，不可以改变@register.filter # 自定义过滤器def multip(x,y): return x*y@register.simple_tag # 自定义标签def multi_tag(x,y,z): return x*y*z 3 使用自定义simple_tag和filter的html文件中导入之前创建的 my_tag.py, 注意格式百分号.1&#123;% load &quot;my_tag&quot; %&#125; 4 使用定义的simple_tag和filter123456# html首行导入&#123;% load my_tag %&#125;&lt;body&gt; &lt;p&gt;&#123;&#123; 10 |add:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; n | multip:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;% multi_tag 10 320 30 %&#125;&lt;/p&gt;&lt;/body&gt; 模板继承123456&#123;% block content %&#125;...&#123;% endblock %&#125;使用模板标签： &#123;% block %&#125; 。 所有的 &#123;% block %&#125; 标签告诉模板引擎，子模板可以重载这些部分。每个&#123;% block %&#125;标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。 总结：1 后端是字典如[“key”]取值，模板里都用.key2 后端是元组或列表如[0]取值，模板里都用.03 后端是函数或类方法用跨号()调用，模板里不加跨号，切记","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-02-前端html","slug":"web-02-前端html","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:47:19.192Z","comments":true,"path":"2017/06/15/web-02-前端html/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-02-前端html/","excerpt":"","text":"前言单选框提交时以{“gender”:”男”}形式, checked表示默认选中1234&lt;div&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; checked=&quot;checked&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;/&gt;女&lt;/div&gt; 多选框提交时以{“hobby”:”[11,12.13]”}形式，checked表示默认选中123456&lt;div&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;11&quot; checked=&quot;checked&quot; /&gt;乒乓球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;12&quot;/&gt;监球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;13&quot;/&gt;足球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;14&quot;/&gt;排球&lt;/div&gt; 下拉框multiple表示多选，没有multiple表示单选，selected表示默认选中1234567&lt;div&gt; &lt;select name=&quot;city&quot; id=&quot;&quot; multiple&gt; &lt;option value=&quot;北京&quot; selected=&quot;selected&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 提交type=”button” 不能提交表单数据，除非事件绑定type=”submit” 默认事件就是提交表单数据。12345&lt;form&gt; &lt;button&gt;提交&lt;/button&gt; # button标签在form里也会有事件，会提交 &lt;input type=&quot;submit&quot;&gt; # 有事件，也会提交 &lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt; # 没有事件，不会提交&lt;/form&gt; 前端相关概念Jquery学习可参考基本概念： html很骨感. css就是装饰或样式. js 就是让其能动起来, js=javascript，Javascript是一门编程语言，我们用它来编写客户端浏览器脚本 jQuery是一个快速、简洁的JavaScript框架,一种javascript工具库，把我们常用的一些功能进行封装，方便我们调用，极大简化了Javascript编程，提高了开发效率。jQuery设计的宗旨就是“write Less，Do More” Bootstrap是一个开发框架，集成了很多现成的网页格式和网页布局，封装了很多CSS样式和JS代码 Javascipt跟jQuery的区别：jQuery是javascript的一个库，包含多个可重用的函数，用来辅助我们简化javascript开发jQuery能做的javascipt都能做到，而javascript能做的事情，jQuery不一定能做到。 position定位的学习12345position position: relative # 与absolute一起使用 position: absolute #随滚动条滚动而滚动 随滚动条滚动而滚动，并且一直往上找，直到找到一个relative后进行定位 position: fixed # 永远在窗口某位置 引用图标要想用图标有很多种方法方法一：当我们引入了bootstrap.css时，我们可以用它官网的图标https://v3.bootcss.com/components/ 图标名字即类名就可使用了 方法二：fontawesome也有很多图标需要下载font-awesome文件来引入 https://fontawesome.io/icons/ # 每一个图标可点击，点开后能看到引用方法。 方法三：这个也是图标库，方法见官网http://fontawesome.dashgame.com/#basic","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(二)","slug":"web-django-orm(二)","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:44:48.308Z","comments":true,"path":"2017/06/15/web-django-orm(二)/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-django-orm(二)/","excerpt":"","text":"目录 一对多查询 多对多查询 查询优化 一对多查询1.1 创建测试数据models.py数据库模型1234567from django.db import modelsclass DePart(models.Model): title=models.CharField(max_length=32)class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(DePart) 创建测试数据12345678models.DePart.objects.create(title=&quot;IT&quot;)models.DePart.objects.create(title=&quot;咨询&quot;)models.DePart.objects.create(title=&quot;公关&quot;)models.UserInfo.objects.create(username=&quot;user1&quot;,pwd=123,dp_id=1)models.UserInfo.objects.create(username=&quot;user2&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user3&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user4&quot;,pwd=456,dp_id=2) 注：12p=models.UserInfo.objects.create(username=&apos;wxq&apos;,pwd=123) # 返回对象本身print(p.username,p.pwd) 1.2 一对多正向查询all() 返回Queryset123v = models.DePart.objects.all()for row in v: print(row.id,row.title,row.userinfo_set.all()) values()返回Queryset1234# values()每一个字典代表一行数据# v = models.UserInfo.objects.values(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)# for row in v:# print(row[&apos;username&apos;],row[&apos;dp__title&apos;]) values_list()返回Queryset1234# values_list()每一个元组代表一行数据v = models.UserInfo.objects.values_list(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)for row in v: print(row[0],row[2]) 1.3 一对多反向查询all()1234567 v=models.DePart.objects.all() for row in v: print(row.id, row.title, row.userinfo_set.all())打印结果：1 IT &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;2 咨询 &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;]&gt;3 公关 &lt;QuerySet []&gt; values()123456789v = models.DePart.objects.values(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[&apos;title&apos;],row[&apos;userinfo__username&apos;],row[&apos;userinfo__dp_id&apos;])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None values_list()123456789v = models.DePart.objects.values_list(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[0],row[1],row[2])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None 1.4 总结正向查询用字段（这里字段是指外键字段） all: 字段+.跨表字段 values: 字段 + __跨表字段 values_list 字段+ __跨表字段反向查询用表名 all: 表名小写+_set values: 表名小写 + __跨表字段 values_list 表名小写+ __跨表字段 总结一句话就是： 正向查询用字段，反向查询用表名 多对多查询2.1 多对多自建表当我们自己建第三张表时，第三张表列数没有限制，更加灵活，更能满足复杂需求1234567表模型class UserGroup(models.Model): caption= models.CharField(max_length=32)class U2G(models.Model): ui = models.ForeignKey(UserInfo) ug = models.ForeignKey(UserGroup) 12345678910111213创建测试数据models.U2G.objects.create(ui_id=1,ug_id=1)models.U2G.objects.create(ui_id=2,ug_id=1)models.U2G.objects.create(ui_id=3,ug_id=2)models.U2G.objects.create(ui_id=4,ug_id=2)v=models.U2G.objects.all()for row in v: print(row.ug.caption,row.ui.username)# 打印结果A组 user1A组 user2B组 user3B组 user4 2.2 多对多非自建多对多关系Django ManyToMany帮我们建第三张表时，我们不能对第三张直接操作，并且第三张只有三列（2张表的分别ForeighKey列，自增ID列）。只能通过如下面的ManyToMany字段间接操作12345678910111213#表模型class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(&quot;DePart&quot;)class UserGroup(models.Model): caption= models.CharField(max_length=32) m = models.ManyToManyField(&quot;UserInfo&quot;)&apos;&apos;&apos;第三张表只有三列id userinfo_id usergroup_id&apos;&apos;&apos;&apos; 添加几个组做如下增删及更新数据操作123456obj = models.UserGroup.objects.filter(id=2).first() #id为2的组是B组print(obj.id,obj.caption,obj.m)obj.m.add(*[1,2]) #ID为1，2的用户加入B组# obj.m.remove(*[1,]) # 删除B组中用户id为1的记录obj.m.clear() # 清除组id为2的所有记录obj.m.set([1,]) # 不管id为2的组有几个用户都清空后把用户id为1的加入B组 2.3 多对多查询学习多对多查询注意：first/get返回对象，filter/all/values/values_list返回QuerySet1234obj=models.UserGroup.objects.filter(id=2).first() # 得到组对象v=obj.m.all() # obj.m表示UserInfo表for row in v: print(row.username, row.dp.title) 123obj=models.UserGroup.objects.filter(id=2).first() # 得到组ID为2的对象v=obj.m.filter(dp__title=&quot;IT&quot;).first() # UserInfo表中查部门为IT的记录print(v.username) # 打印符合条件的username 优化select_related优化12345user_list=models.UserInfo.objects.all() # 这里是1次sql请求for row in user_list: #如果有10条数据,会有10次sql请求 print(row.username,row.dp.title) # 每一次row.dp.title都会跨表查询那么返回结果经历了11次sql请求,做select_related优化后只有2次sql请求,其中1次是跨表请求models.UserInfo.objects.all().select_related(&quot;ForeighKeyname&quot;) #优化方法一 prefetch_related优化,推荐用优化方法二123456789models.UserInfo.objects.all().prefetch_related(&quot;ForeighKeyname&quot;) # 优化方法二prefetch_related可以分解为models.UserInfo.objects.all()一次单表查询取到了ForeighKeyname_id=[1,2,3,4,5] 然后DJango会发起第2次单表查询，models.DePart.objects.filter(id__in = [1,2,3,4,5]) 2次单表查询明显轻量了。#only:只取相应字段，否则性能下降# defer:不取相应字段，否则性能下降models.UserInfo.objects.all().only(&apos;id&apos;,&apos;name&apos;) # 只取哪几列models.UserInfo.objects.all().defer(&apos;id&apos;,&apos;name&apos;) # 不取哪几列 还有更多","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"git 利器","slug":"git-01","date":"2017-06-15T01:42:54.000Z","updated":"2018-08-25T03:35:15.638Z","comments":true,"path":"2017/06/15/git-01/","link":"","permalink":"http://www.digmyth.com/2017/06/15/git-01/","excerpt":"","text":"目录 git建版本库 git别名设置 git基本配置 git基本命令 git分支管理 git创建版本库12git init # 把当前目录变成git可管理的仓库生成的.git目录是用来跟踪管理版本库的,称为git的一个版本库 git别名设置1234为命令设置别名$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch git配置123每台机器自报家门$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 12优先级从高到低是.git/config--&gt; --global --&gt; system 12345全局生效: 配置保存在/etc/gitconfig[root@wxq-srv git_work]# git config --system user.name &quot;wxq&quot;[root@wxq-srv git_work]# cat /etc/gitconfig [user] name = wxq 12345678当前用户所有仓库生效：配置保存在~/.gitconfig[root@wxq-srv git_work]# cat /root/.gitconfig [user] name = wxq email = you@example.com[root@wxq-srv git_work]# git config --global user.name &quot;wxq&quot;[root@wxq-srv git_work]# git config --global user.email &quot;you@example.com&quot; 12345678910只对某仓库生效：配置保存在reponame/.git/config[root@wxq-srv git_work]# git config user.name &quot;wxq1&quot;[root@wxq-srv git_work]# cat .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[user] name = wxq1 基本命令1234567git log # 每一次提交的记录git reset --hard HEAD^ #HEAD表示当前版本，HEAD^^表示上上个版本，依次类推，上100个版本是HEAD~100git reset --hard $commit_id # 回到指定版本git reflog # 只要改变都会在这里记录，用于回到未来的某个版本。git add index.html # 添加更改至state暂存 区git reset HEAD index.html # unstage 退出暂存区git diff HEAD -- readme.txt # 查看当前工作区和版本库有什么不同 放弃修改除了版本回退外，只要未commit之前都可以放弃工作区所做的修改。如果有add 动作，需要先从暂存区回退到工作区git reset HEAD index.html如果没有add动作，可直接放弃修改git checkout -- index.txt或者可以这么理解git checkout -- index.txt 都会从暂存区或版本库(优先从暂存区)恢复到工作区. 分支管理123456查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt; 待续","categories":[{"name":"Git","slug":"Git","permalink":"http://www.digmyth.com/categories/Git/"}],"tags":[]},{"title":"linux_iptables应用","slug":"linux-iptables应用","date":"2017-06-15T01:42:54.000Z","updated":"2018-04-23T06:57:19.754Z","comments":true,"path":"2017/06/15/linux-iptables应用/","link":"","permalink":"http://www.digmyth.com/2017/06/15/linux-iptables应用/","excerpt":"","text":"iptables 规则应用总结防火墙端口重定向规则1iptables -t nat -I PREROUTING -i eth1 -p tcp --dport 80 -j REDIRECT --to 8080 反向代理防火墙规则12iptables -I INPUT -d 123.125.168.130 -i eth0 -p tcp --dport 80 -j ACCEPTiptables -I INPUT -s 10.10.10.0/24 -i eth1 -p tcp --sport 9999 -j ACCEPT 此包为input状态检测可省略12iptables -I OUTPUT -p tcp -o eth1 -s 10.10.10.1 -d 10.10.10.10 --dport 9999 -j ACCEPTiptables -I OUTPUT -p tcp -o eth0 -s 123.125.168.130 --sport 80 -j ACCEPT 目标地址转换：123iptables -t nat -I PREROUTING -i eth0 -d 123.125.168.130 -p tcp --dport 80 -j DNAT --to 10.10.10.10:9999iptables -A FORWARD -d 10.10.10.10 -p tcp --dport 9999 -j ACCEPTiptables -A FORWARD -s 10.10.10.10 -p tcp --sport 9999 -j ACCEPT 如果10.10.10.10机器默认网关不是10.10.10.1或没有指网关,则网关防火墙需如下:有点奇怪的规则1iptables -t nat -I POSTROUTING -d 10.10.10.10 -p tcp --dport 9999 -j SNAT --to 10.10.10.1 源地址转换：12iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j SNAT --to 123.125.168.130iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE 此条开销较大，与上条可二选一12iptables -I FORWARD -s 10.10.10.0/24 -j ACCEPT 注：forward不指网卡，要指也是内网卡iptables -I FORWARD -d 10.10.10.0/24 -j ACCEPT","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Mysql sysbench 压测","slug":"mysql-sysbench","date":"2017-06-10T01:41:54.000Z","updated":"2017-11-10T09:01:54.314Z","comments":true,"path":"2017/06/10/mysql-sysbench/","link":"","permalink":"http://www.digmyth.com/2017/06/10/mysql-sysbench/","excerpt":"","text":"目录 工具安装 执行压测 针对优化 示例结果 数据库指标对于mysql压力测试，大多用sysbench/tpcc-mysql工具。主要针对数据库OLTP（在线事务处理）指标。 12qps : query per second 查询量tps: transaction per second 事务量 工具安装123yum install sysbench -y[root@mysql sysbench]# sysbench --versionsysbench 1.0.9 在sysbench压测时会调用内置lua脚本, 这些脚本为于/etc/share/sysbench目录下12345678910111213141516/usr/share/sysbench[root@mysql sysbench]# lltotal 64-rwxr-xr-x 1 root root 1452 Sep 18 12:29 bulk_insert.lua-rw-r--r-- 1 root root 13762 Sep 18 12:29 oltp_common.lua-rwxr-xr-x 1 root root 1290 Sep 18 12:29 oltp_delete.lua-rwxr-xr-x 1 root root 2018 Sep 18 12:29 oltp_insert.lua-rwxr-xr-x 1 root root 1265 Sep 18 12:29 oltp_point_select.lua-rwxr-xr-x 1 root root 1649 Sep 18 12:29 oltp_read_only.lua-rwxr-xr-x 1 root root 1824 Sep 18 12:29 oltp_read_write.lua-rwxr-xr-x 1 root root 1118 Sep 18 12:29 oltp_update_index.lua-rwxr-xr-x 1 root root 1127 Sep 18 12:29 oltp_update_non_index.lua-rwxr-xr-x 1 root root 1440 Sep 18 12:29 oltp_write_only.lua-rwxr-xr-x 1 root root 1919 Sep 18 12:29 select_random_points.lua-rwxr-xr-x 1 root root 2118 Sep 18 12:29 select_random_ranges.luadrwxr-xr-x 4 root root 4096 Nov 10 02:57 tests 执行压测方便压测时找到内置lua脚本，以下命令都在/etc/share/sysbench目录下执行 在远端连接数据库时，授权1grant all on test.* to root@&apos;%&apos; identified by &apos;123&apos;; 生成压测数据12cd /usr/share/sysbench/sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 prepare 执行压测1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 run 清理压测数据1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 cleanup 优化数据库在压测过程中可能出现一些错误，连接数不够，max_prepared_stmt_count不够，可优化/etc/my.cnf 做适当调整123456789101112max_connections = 4096max_prepared_stmt_count=100000 # 默认16384压测时需调大query_cache_type = 1query_cache_size = 10Mwsrep_slave_threads = 4#wsrep_notify_cmd = /usr/local/bin/wsrep-notify.shmax_connections = 10000key_buffer_size = 64Mmax_heap_table_size = 64Mtmp_table_size = 64Minnodb_buffer_pool_size = 8192M 示例结果1234567891011121314151617181920212223242526272829303132333435Initializing worker threads...Threads started![ 10s ] thds: 300 tps: 198.33 qps: 5741.67 (r/w/o: 4335.25/830.02/576.41) lat (ms,95%): 3706.08 err/s: 81.77 reconn/s: 0.00[ 20s ] thds: 300 tps: 222.61 qps: 6095.90 (r/w/o: 4553.90/924.16/617.84) lat (ms,95%): 4203.93 err/s: 102.31 reconn/s: 0.00[ 30s ] thds: 300 tps: 221.01 qps: 5899.58 (r/w/o: 4399.84/899.83/599.92) lat (ms,95%): 4055.23 err/s: 93.20 reconn/s: 0.00[ 40s ] thds: 300 tps: 198.06 qps: 5400.91 (r/w/o: 4032.79/827.03/541.09) lat (ms,95%): 4683.57 err/s: 89.98 reconn/s: 0.00[ 50s ] thds: 300 tps: 186.14 qps: 5162.76 (r/w/o: 3866.39/783.36/513.00) lat (ms,95%): 5312.73 err/s: 90.12 reconn/s: 0.00[ 60s ] thds: 300 tps: 158.49 qps: 4433.94 (r/w/o: 3325.93/670.45/437.56) lat (ms,95%): 5507.54 err/s: 78.99 reconn/s: 0.00SQL statistics: queries performed: read: 246736 write: 50340 other: 33317 total: 330393 transactions: 12147 (195.34 per sec.) queries: 330393 (5313.17 per sec.) ignored errors: 5477 (88.08 per sec.) reconnects: 0 (0.00 per sec.)General statistics: total time: 62.1815s total number of events: 12147Latency (ms): min: 16.10 avg: 1503.84 max: 14267.54 95th percentile: 4683.57 sum: 18267086.41Threads fairness: events (avg/stddev): 40.4900/6.29 execution time (avg/stddev): 60.8903/0.59","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"KVM introduction","slug":"KVM-introduction","date":"2017-06-08T01:41:54.000Z","updated":"2018-03-30T06:58:49.290Z","comments":true,"path":"2017/06/08/KVM-introduction/","link":"","permalink":"http://www.digmyth.com/2017/06/08/KVM-introduction/","excerpt":"","text":"1. kvm简介kvm as a kernel based virtual machine,现如今较为流行的虚拟化技术，openstack后端就是kvm虚拟化。 2. 模拟与虚拟 模拟： 完全由软件模拟：ring0 ring1 ring2 ring3都需要软件模拟， 底层硬件架构与虚拟机硬件架构可以不同 虚拟： 底层硬件架构与虚机硬件架构必须相同，如cpu平台架构都为x86_64 3.虚拟化分类虚拟化分类无非2种方式： 一种：直接运行于硬件平台–&gt; hypervisor: dom0 如xen ,esxi,这里xen不好理解，装xen不也要安装操作系统后安装xen4软件包么？为什么它也说直接运行在硬件平台，是因为安装完xen4后，切换了xen4的内核来启动，并非原有操作系统内核. 二种：先有host系统，再安装虚拟软件（如vmware station）或统称virtual machine mintor(虚拟机监视器) 如kvm, 虚拟机的cpu,内存通过kvm模块来调用，但IO不行，虚拟机的IO是通过host系统的qemu程序模拟提供的，再由host系统的内核提供IO 那么什么是半虚拟化？ 半虚拟化是要修改内核的，要让虚拟机知道自己运行在虚拟机环境下的，知道的结果是当虚拟机发起cpu指令时不能直接操作硬件，需要发起hypercall调用. 那么什么是完全虚拟化？ 1) 早期BT技术实现加速，binary translation 边运行边翻译,虚机内核就是运行ring1上专用于翻译加速 2) hvm: 硬件辅助虚拟化，需要cpu硬件支持，就是cpu多了ring-1，这样虚拟机直接运行在ring0上，宿主机内核运行在ring-1,ring-1捕获ring0的特权指令直接运行，性能可想而知提高了","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-Ganesha","slug":"cephfs-Ganesha","date":"2017-06-05T01:41:54.000Z","updated":"2017-11-14T09:43:43.912Z","comments":true,"path":"2017/06/05/cephfs-Ganesha/","link":"","permalink":"http://www.digmyth.com/2017/06/05/cephfs-Ganesha/","excerpt":"","text":"nfs-ganesha简介因工作需要调研了cephfs 导为nfs,目前有两种方法： 方法一：内核mount挂载或 ceph-fuse 挂载至NFS server，如/data再正常搭建NFS-server即可。 方法二 : 借用nfs-ganesha协议转换间接存储在cephfs集群中。 nfs-ganesha不仅可以导 cephfs,也可以导RGW.ceph RGW理解: 相当于协议转换层，把符合S3和swift协议的 restFul API 请求转换为rados存储在ceph对象存储中. 换一种说法： Ceph 导出为 NFS，一种通过 RGW，一种通过 CephFS，通过 FSAL 模块 连接到 RGW 或者 CephFS FSAL_RGW 调用 librgw2 将 NFS 协议转义为 S3 协议再通过 RGW 存入到 Ceph 中. FSAL_CEPH 调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. FSAL： File System Abstraction Layer 文件系统抽像层 题外话，openstack项目manila后端存储驱动，其中一种就是Ganesha Driver12345## manila 4驱动Default Driver: 使用 RBD 作为 Manila Service VM 的后端，在 VM 上启动 NFS 实例提供服务Ganesha Driver: 使用 Ganesha 将 CephFS 重新 Reexport 出去Native CephFS Driver: 在 Guest VM 上直接使用原生 CephFS Module 访问VirtFS Driver: 将 CephFS 挂载在 Host 端，VM 通过 VirtFS 访问 nfs-ganesha安装在CentOS7系统中有nfs-ganesha rpm软件包，但没有ceph相关模块，所以我这里是编译安装，把FSAL_RGW 模块/FSAL_CEPH 模块编译进去。 1git clone -b V2.4-stable https://github.com/nfs-ganesha/nfs-ganesha.git --recursive 由于ceph-jewel版本才有libcephfs1-devel软件包，所以这里ganesha客户端 ceph用 jewel版本，服务器ceph版本Luminousceph-jewel源123456789[root@ ganesha]# cat /etc/yum.repos.d/ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/noarch/gpgcheck=0 软件安装12345yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -y 如果需要生成 FSAL_RGW 模块，则在编译选项中添加： -DUSE_FSAL_RGW=ON 如果需要生成 FSAL_CEPH 模块，则在编译选项中添加： -DUSE_FSAL_CEPH=ON 12345mkdir /opt/build/cd /opt/build/cmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 在cmake输出中确保有12345-- USE_FSAL_CEPH = ON-- USE_FSAL_CEPH_MKNOD = OFF-- USE_FSAL_CEPH_SETLK = OFF-- USE_FSAL_CEPH_LL_LOOKUP_ROOT = ON-- USE_FSAL_RGW = ON 确保： – USE_FSAL_CEPH 为 ON,以及 – USE_FSAL_RGW 为 ON。 如果过程中出错，请删除/tmp/build/* 及/tmp/build/CMakeCache.txt重新编译 make install成功输出中有:12&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/rgw.conf&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/ceph.conf 这两个文件就是配置将 RGW 和 CephFS 配置为 nfs-ganesha的配置模板。 nfs-ganesha 配置123456789101112131415161718192021222324252627282930313233cat /etc/ganesha/ganesha.confEXPORT&#123; Export_ID=1; Path = /; Pseudo = /cephfs; Access_Type = RW; NFS_Protocols = 4; Transport_Protocols = TCP; Squash = No_Root_Squash; FSAL &#123; Name = CEPH; &#125;&#125;EXPORT&#123; Export_ID=2; Path = /; Pseudo = /rgw; Access_Type = RW; Squash = No_root_squash; NFS_Protocols = 4; Transport_Protocols = TCP; FSAL &#123; Name = RGW; User_Id = &quot;admin&quot;; Access_Key_Id =&quot;RDS4VW60OA48ZW1HSU61&quot;; Secret_Access_Key = &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;; &#125;&#125;RGW &#123; ceph_conf = &quot;/etc/ceph/ceph.conf&quot;;&#125; 其中Access_Key_Id Secret_Access_Key部份在ceph-rgw中读取123456789101112131415 (ceph-mon)[root@pike-vm /]# radosgw-admin user info --uid=admin&#123; &quot;user_id&quot;: &quot;admin&quot;, &quot;display_name&quot;: &quot;admin&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;admin&quot;, &quot;access_key&quot;: &quot;RDS4VW60OA48ZW1HSU61&quot;, &quot;secret_key&quot;: &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;... 启动nfs-ganesha1ganesha.nfsd -L /var/log/ganesha.log 挂载使用在客户端进行挂载使用：1 安装ceph-common ceph-fuse libcephfs1-devel librgw2-devel2 拷贝ceph.conf配置文件及keyring文件至/etc/ceph3 挂载：mount -t nfs4 {$ganesha-server-ip}:/ /mnt如果出现I/O error,请ceph-fuse -m 172.18.23.17:6789 /mnt 挂载一遍，就是这么神奇，不要问我为什么。。。12[root@-3 mnt]# lsls: reading directory .: Remote I/O error 成功123456[root@-3 cephfs]# ll /mnt/total 1drwxrwxrwx 1 root root 33 Nov 14 08:31 cephfs[root@-3 cephfs]# echo &quot;99cloud new data...&quot; &gt; cephfs.txt [root@-3 cephfs]# cat cephfs.txt cephfs data... 在cephfs集群中我们可以看到客户端写入的数据12345678[root@-3 ~]# ceph-fuse -m 172.18.23.17:6789 /data/ceph-fuse[4579]: starting ceph clientceph-fuse[4579]: starting fuse[root@-3 ~]# cd /data/[root@-3 data]# lscephfs.txt[root@3 data]# cat cephfs.txt cephfs data...","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-02-分页示例","slug":"web-django-03-分页示例","date":"2017-05-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/05/20/web-django-03-分页示例/","link":"","permalink":"http://www.digmyth.com/2017/05/20/web-django-03-分页示例/","excerpt":"","text":"1 django 分页功能app01/views.py Paginator模块的使用123456789101112131415161718192021222324def users(request): from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger user_list = models.UserInfo.objects.all() paginator = Paginator(user_list,10) # paginator.per_page 每页显示条目数量 # paginator.count 数据总个数 # paginator.num_pages 总页数 # paginator.page_range 总页数的索引范围，如(1,10),(1,20) current_page = request.GET.get(&apos;p&apos;) try: page_obj=paginator.page(current_page) except EmptyPage as e: page_obj = paginator.page(1) except PageNotAnInteger as e: page_obj = paginator.page(1) # page_obj.has_next() 是否有下一页 # page_obj.next_page_number() 下一页页码 # page_obj.has_previous() 是否有上一页 # page_obj.previous_page_number() 上一页页码 # page_obj.object_list 分页之后的数据列表 # page_obj.number 当前页 # page_obj.paginator paginator对象 return render(request,&quot;users.html&quot;, &#123;&apos;page_obj&apos;:page_obj&#125;) templates/users.html12345678910111213141516171819&#123;% if page_obj.has_previous %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&#123;% endif %&#125;&#123;% for i in page_obj.paginator.page_range %&#125; &lt;a href=&quot;/users?p=&#123;&#123; i &#125;&#125;&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;&#123;% endfor %&#125;&#123;% if page_obj.has_next %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&#123;% endif %&#125;&lt;span&gt; &lt;a&gt;&#123;&#123; page_obj.number &#125;&#125;/&#123;&#123; page_obj.paginator.num_pages &#125;&#125;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-加密解密加签验签","slug":"python加密解密加签验签","date":"2017-05-15T12:51:41.000Z","updated":"2018-04-23T06:59:41.630Z","comments":true,"path":"2017/05/15/python加密解密加签验签/","link":"","permalink":"http://www.digmyth.com/2017/05/15/python加密解密加签验签/","excerpt":"","text":"python加密解密，加签验签(转)在与第三方服务对接时，加密与解密，加签与验签是这个过程中的关键一步 一般情况下，对接服务中会有两对公私钥。使用对方公钥进行加密，使用自己私钥进行加签。传回来的数据，使用自己的私钥解密，使用对方的公钥验签。 12345678import base64from Crypto.PublicKey import RSAfrom Crypto.Hash import SHAfrom Crypto.Cipher import PKCS1_v1_5from Crypto.Signature import PKCS1_v1_5 as SIGN_PKCSPUB_KEY = RSA.importKey(open(&apos;rsa_public_key.pem&apos;,&apos;r&apos;).read())PRI_KEY = RSA.importKey(open(&apos;rsa_private_key.pem&apos;,&apos;r&apos;).read()) 加密 12345678910def split_data(l, n): for i in range(0, len(l), n): yield l[i: i+n] def encrypt(params): raw = params.encode(&apos;utf-8&apos;) cipher = PKCS1_v1_5.new(PUB_KEY) ＃ 加密超长字节117个字节一加密 content = b&apos;&apos;.join([cipher.encrypt(x) for x in chunks(raw, 117)]) return base64.b64encode(content) 解密123456def decrypt(data): raw = data.encode(&apos;utf-8&apos;) decrypt = PKCS1_v1_5.new(PRI_KEY).decrypt # 解密超长字符128一解密 content = b&apos;&apos;.join(decrypt(x, object()) for x in chunks(raw, 128)) return content.decode() 加签1234def signer(data): signstr = data.encode(&apos;utf-8&apos;) sign = SIGN_PKCS.new(PRI_KEY).sign(SHA.new(signstr)) return base64.b64encode(sign) 验签1234def verify_sign(unsign, raw_sign): # unsign: 签名 # raw_sign: 待验证签名 assert SIGN_PKCS.new(PUB_KEY).verify(SHA.new(unsign.encode(&apos;utf-8&apos;)), raw_sign)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"linux_Suse init","slug":"linux-SUSE-init","date":"2017-05-15T01:42:54.000Z","updated":"2018-09-04T13:15:50.755Z","comments":true,"path":"2017/05/15/linux-SUSE-init/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-SUSE-init/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux_7.X内核升级","slug":"linux-7.x内核升级","date":"2017-05-15T01:42:54.000Z","updated":"2018-08-04T08:38:33.350Z","comments":true,"path":"2017/05/15/linux-7.x内核升级/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-7.x内核升级/","excerpt":"","text":"查看版本12# uname -r3.10.0-693.el7.x86_64 升级内核需要先导入elrepo的key，然后安装elrepo的yum源12345678910111213141516171819202122232425262728293031# rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpmPreparing... ################################# [100%]Updating / installing... 1:elrepo-release-7.0-3.el7.elrepo ################################# [100%]# yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list availableLoaded plugins: fastestmirrorelrepo-kernel | 2.9 kB 00:00:00 elrepo-kernel/primary_db | 1.8 MB 00:00:01 Determining fastest mirrors * elrepo-kernel: mirrors.neusoft.edu.cnAvailable Packageskernel-lt.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-doc.noarch 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-headers.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-ml.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-doc.noarch 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-headers.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelperf.x86_64 4.17.11-1.el7.elrepo elrepo-kernelpython-perf.x86_64 4.17.11-1.el7.elrepo elrepo-kernel 安装你需要的版本12# yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64版本性质：主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 查看内核是否安装完成123456# rpm -qa |grep kernelkernel-tools-3.10.0-693.el7.x86_64kernel-ml-4.17.11-1.el7.elrepo.x86_64kernel-3.10.0-693.el7.x86_64kernel-ml-devel-4.17.11-1.el7.elrepo.x86_64kernel-tools-libs-3.10.0-693.el7.x86_64 查看并修改grub的启动顺序1234# awk -F\\&apos; &apos;$1==&quot;menuentry &quot; &#123;print $2&#125;&apos; /etc/grub2.cfgCentOS Linux (4.17.11-1.el7.elrepo.x86_64) 7 (Core)CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)CentOS Linux (0-rescue-d14171e79a9e4b5da1a69e7348d0f45f) 7 (Core) 注： 最新内核为第一个，故启动项为012345678# vim /etc/default/grubGRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=saved(这里改成0)GRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 生成grub重新创建内核配置并重启12345678910# grub2-mkconfig -o /boot/grub2/grub.cfgGenerating grub configuration file ...Found linux image: /boot/vmlinuz-4.17.11-1.el7.elrepo.x86_64Found initrd image: /boot/initramfs-4.17.11-1.el7.elrepo.x86_64.imgFound linux image: /boot/vmlinuz-3.10.0-693.el7.x86_64Found initrd image: /boot/initramfs-3.10.0-693.el7.x86_64.imgFound linux image: /boot/vmlinuz-0-rescue-d14171e79a9e4b5da1a69e7348d0f45fFound initrd image: /boot/initramfs-0-rescue-d14171e79a9e4b5da1a69e7348d0f45f.imgdone[root@localhost ~]# reboot 确认内核版本12# uname -r4.17.11-1.el7.elrepo.x86_64","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Python 操作mysql","slug":"mysql-pyton操作mysql","date":"2017-04-29T01:41:54.000Z","updated":"2017-11-19T09:00:13.663Z","comments":true,"path":"2017/04/29/mysql-pyton操作mysql/","link":"","permalink":"http://www.digmyth.com/2017/04/29/mysql-pyton操作mysql/","excerpt":"","text":"这里记录下python操作mysql的知识点，详细参见链接 模块安装在python2中使用模块MySQLdb在python3中使用模块pymysql1pip3 install pymysql 基本使用基本操作过程就是 创建连接 创建游标 发送语句 获取数据 事务提交 关闭游标 关闭连接1234567891011121314151617181920212223import pymysql# 创建连接conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;db1&apos;)# 创建游标cursor = conn.cursor()# 发送语句cursor.execute(sqlstatement)cursor.executemany(sqlstatement)# 获取数据cursor.fetchone()cursor.fetchmany(3)cursor.fetchall() # 事务提交，不然无法保存新建或者修改的数据conn.commit() # 关闭游标cursor.close()# 关闭连接conn.close() 基本知识点获取新创建数据自增ID1234567891011import pymysql conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)cursor = conn.cursor()cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;1.1.1.11&quot;,1),(&quot;1.1.1.11&quot;,2)])conn.commit()cursor.close()conn.close() # 获取最新自增IDnew_id = cursor.lastrowid 游标操作1234在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：cursor.scroll(1,mode=&apos;relative&apos;) # 相对当前位置移动cursor.scroll(2,mode=&apos;absolute&apos;) # 相对绝对位置移动 fetch 数据类型关于默认获取的数据是元组类型，如果想要获取字典类型的数据，如下pymysql.cursors.DictCursor：1234567import pymysqlconn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)# 游标设置为字典类型cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)r = cursor.execute(&quot;call p1()&quot;) result = cursor.fetchone() 1234567891011# 执行SQL，并返回受影响行数effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos;&quot;)# 执行SQL，并返回受影响行数#effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot;, (1,)) 这里值得注意的是不能把上面语句替换成下面语句，否则会被sql注入statement=&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot; % 1effect_row = cursor.execute(statement)# 执行SQL，并返回受影响行数#effect_row = cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;172.16.0.1&quot;,1),(&quot;1.1.1.11&quot;,2)]) SQLAlchemySQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果1pip3 install SQLAlchemy SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：12345678910111213MySQL-Python mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; pymysql mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;] MySQL-Connector mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; cx_Oracle oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...] 更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-02-基本配置示例","slug":"web-django-02-基本配置示例","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.976Z","comments":true,"path":"2017/04/20/web-django-02-基本配置示例/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-02-基本配置示例/","excerpt":"","text":"1 django安装1pip install django pymysql 2 新建django project1django-admin.py startproject mysite 或用pycharm新建一个项目 3 该项目下创建一个应用1cd mysite &amp;&amp; python manage.py startapp app01 4 配置Djangosettings.py文件确保有下面代码，用于在static目录放置静态1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS= ( os.path.join(BASE_DIR, &apos;static&apos;),) 确保INSTALLED_APPS = []有app01,应用 5 Django mysql配置settings.py文件确保有12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;&#125; app01下 init.py12import pymysqlpymysql.install_as_MySQLdb() 对于初学者建议配置此项，用于打印orm翻译后的sql语后，便于对照学习1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 6 django生成数据models.py12345from django.db import modelsclass UserInfo(models.Model): username = models.CharField(max_length=32) password = models.CharField(max_length=32) email = models.CharField(max_length=32) 12python manage.py makemigrationspython manage.py migrate 7 urls.py定义123456from app01 import viewsurlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;^users/$&apos;, views.users), # url(r&apos;^create_data/&apos;, views.create_data),] 8 views.py定义123456789101112131415from django.shortcuts import render,HttpResponse, redirectfrom app01 import modelsdef create_data(request): for i in range(1,104): models.UserInfo.objects.create( username = &quot;root%s&quot; %i, password = &quot;123&quot;, email = &quot;root%s@qq.com&quot; %i, ) return HttpResponse(&quot;data generate...&quot;)def users(request): user_list = models.UserInfo.objects.all() return render(request,&quot;users.html&quot;, &#123;&apos;user_list &apos;:user_list &#125;) 9 templates/users.html定义12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/bootstrap-3.3.7-dist/css/bootstrap.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;width: 700px; margin: 10px auto&quot;&gt; &lt;h1&gt;用户列表&lt;/h1&gt; &lt;table class=&quot;table table-hover table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; 用户名&lt;/th&gt; &lt;th&gt; 密码&lt;/th&gt; &lt;th&gt;邮箱&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for user in page_obj.object_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; user.username &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.password &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.email &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 10 注意bootstrap应用bootstrap下载链接 11 启动项目运行项目1python manage.py runserver 127.0.0.1:8000","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-04-路由分发与别名.md","slug":"web-django-04-路由分发与别名","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/04/20/web-django-04-路由分发与别名/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-04-路由分发与别名/","excerpt":"","text":"目录 别名设置 namespace设置 reverse include本质 Django URLS 路由分发流程己经学习过了，这里了解一下url中的别名设置，reverse反向生成URL，以及include本质如何路由分发的。 别名设置URL有别名name的设置，添加在最后一级分发视图函数的后面1url(r&apos;^login/&apos;, views.login,name=&quot;alias_name&quot;), namespace设置URL有namespace的设置当多个app多级分发时可能存在别名相同,这时就用到namespace来加以区分 namespace添加12url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)), 或url(r&apos;^app01&apos;,([url(&apos;^hosts&apos;,oviews.hosts,name=&quot;nnnn&quot;),],None,&quot;oo&quot;)), reverse用法reverse反向生成url1234from django.urls import reversedef login(request): url = reverse(&quot;namespace1:namespace2:alias_name&quot;) return redirect(url) include本质include原生写法是1url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)) include用于路由下级分发，本质是返回元组，最后一个None表示namespace,也就是形如1url(r&apos;^openstack/&apos;, ([url映射关系，],None,None)) 总结：了解分发基础知识有利于我们后面学习Django admin，如何动态生成URL的代码学习。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(一)","slug":"web-django-orm(一)","date":"2017-04-15T12:51:41.000Z","updated":"2018-01-18T03:44:22.364Z","comments":true,"path":"2017/04/15/web-django-orm(一)/","link":"","permalink":"http://www.digmyth.com/2017/04/15/web-django-orm(一)/","excerpt":"","text":"目录 简单介绍 初识ORM 简单介绍声明：ORM原理请参考 一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 初识ORM下面学习下Django里sql操作的基本语法 通过简单设置，可以在logging查看翻译成的sql语句settings.py1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 2.1 创建表12345from django.db import modelsclass UserInfo(models.Model): nid=models.AutoField(primary_key=True) name=models.CharField(max_length=32) pwd = models.CharField(max_length=32) 2.2 操作表123456789101112q = models.UserInfo.objects.all()Queryset = [obj(id,name,pwd), obj(id,name,pwd),obj(id,name,pwd),]q=models.UserInfo.objects.values(&apos;name&apos;,&apos;pwd&apos;)Queryset = [&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123&#125;, &#123;&quot;name&quot;:&quot;user1&quot;,&quot;pwd&quot;:123&#125;, &#123;&#125;] # 字典q = models.UserInfo.objects.value_list(&apos;name&apos;,&apos;pwd&apos;)Queryset = [(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123), (&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123),(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123)]#元组q = models.UserInfo.objects.filter(name=&quot;wxq&quot;)q = models.UserInfo.objects.get(name=&apos;wxq&apos;) # 多个或没有值都会报错q = models.UserInfo.objects.filter(name=&apos;wxq&apos;).first() # 推荐 2.3 操作表的其它方法12345678910111213141516171819202122232425261. all() 返回的是querySet2. filter(id__lt=10, id__gt=1) 并且查， 返回的是querySet3. get() 只有一个值，否则报错， 返回的是对象4. first() 只找第一个值，返回的是对象5. exclude 取反model.Book.objects.exclude(prince=134) 返回querySet6. countmodeles.Book.objects.exclude(prince=134).count() #querySet对象才有.count()调用方法 7. order_by(*field)models.Book.objects.objects.all().order_by(&quot;prince&quot;) 小到大排序models.Book.objects.objects.all().order_by(&quot;-prince&quot;) 大到小排序8.distinct() 提除重复的记录9 values 返回字典querySet集合10 values_list 返回元组querySet集合11 existret = models.Book.objects.all().exist()","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-09-02-网络编程","slug":"python-10-02-网络编程","date":"2017-03-31T14:26:46.000Z","updated":"2018-02-08T09:19:59.999Z","comments":true,"path":"2017/03/31/python-10-02-网络编程/","link":"","permalink":"http://www.digmyth.com/2017/03/31/python-10-02-网络编程/","excerpt":"","text":"目录 socket概念 socket基本使用 socket简单示例 总结 一、socket概念什么是socket ? socket常称为’套接字’，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或应答网络请求。 Unix中一切皆文件，socket是一种特殊的套接字文件，对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。 所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。 对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。 二、socket基本使用服务器端第一步： 创建 套接字对够用123456789import socketsocket.socket(family, type)family AF_INET AF_UNIXtype SOCK_STREAM -------&gt; TCP SOCK_DGRAM -------&gt; UDPconns = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 绑定地址使用套接字对象的 bind方法绑定于地址和端口组成的元组1conns.bind((&apos;ip&apos;,port)) 第三步： 使用套接字的Listen()方法进行监听1conns.listen(10) #等待队列长度 第四步： 进入循环监听状态 使用套接字的accept()方法接收用户连接请求help(tcpconn.accept)1client_sock,client_addr = conns.accept() 编写客户端程序第一步： 创建套接字对象以连接服务器端1client_conn = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 请求连接服务器client_conn.conncet((‘server_ip’, port)) 第三步： 发送数据 1client_conn.send(b&apos;hello world&apos;) 示例server.py1234567891011121314import socketsock = socket.socket()sock.bind((&apos;127.0.0.1&apos;,8000))sock.listen(5)while True: conn,addr = sock.accept() client_data = conn.recv(1024) print(client_data) conn.sendall(&apos;response info from server&apos;) conn.close() client.py1234567891011import socketsk = socket.socket()sk.connect((&apos;127.0.0.1&apos;,8000))sk.sendall(&apos;请求数据&apos;)server_reply = sk.recv(1024)print(server_reply)sk.close() 三、socket简单示例python中网络编程主要有socket/socketserver和异步相关的Twisted/tornado/ socket这里包括自己用select实现的伪异步IO多路复用 2.1 示例一web浏览器和socket_server交互,浏览器将收到服务端返回的数据123456789101112131415161718192021# socket_server.pyimport socketdef handle_process(client): data = client.recv(1024) print(data.decode(&quot;utf-8&quot;)) client.send(b&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;)#一定要先发送合规请求头 client.send(b&apos;hello worldfdds&apos;)def main(): sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM) sock.bind((&apos;127.0.0.1&apos;,8003)) sock.listen(5) while True: conn,addr = sock.accept() handle_process(conn) conn.close()if __name__ == &apos;__main__&apos;: main() 2.2 示例二socket + select 实现IO多路复用1234567891011121314151617181920212223242526272829303132333435363738394041# socket_server.pyimport selectimport socket# 单线程里同时监听多个socket对象，实现了&quot;伪&quot;并发IO操作： IO多路复用sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8001))sk1.listen(5)sk2 = socket.socket()sk2.bind((&apos;127.0.0.1&apos;,8002))sk2.listen(5)inputs = [sk1,sk2]w_inputs = []while True: # IO多路复用： # select: 内部循环，主动查看 # poll: 内部循环，主动查看 # epoll: 非循环， 异步回调或被动通知 r,w,e = select.select(inputs,w_inputs,[],0.05) for obj in r: if obj in [sk1,sk2]: print(&quot;新的连接来了。。&quot;) conn,addr = obj.accept() inputs.append(conn) else: print(&quot;新的数据来了&quot;) try: data=obj.recv(1024) except Exception as e: data = &quot;&quot; if data: # obj.sendall(data) w_inputs.append(obj) else: inputs.remove(obj) w_inputs.remove(obj) obj.close() for obj in w: obj.sendall(b&apos;ok&apos;) w_inputs.remove(obj) 定义2个socket_client 1234567891011# socket_client01.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8001))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 12345678910# socket_client02.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8002))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 测试服务端并发： 先启动socket_server.py,后启动socket_clientx.py 小结：服务端单线程同时监听了多个socket对象，表明实现了并发连接或IO多路复用，但真正实现了并发吗？当并发边连接有IO请求时还是占住了资源,那么在下一个例子中用线程处理IO请求实现真正的IO并发 4.2 示例三select + 线程实现真正的多并发123456789101112131415161718192021222324import selectimport socketimport threadingdef process_request(conn): while True: v = conn.recv(1024) conn.sendall(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\ndownload page ...&apos;) conn.close() break # 任务处理完成后终止这个线程sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8009))sk1.listen(5)inputs = [sk1,]while True: r,w,e = select.select(inputs,[],[],0.05) for obj in r: if obj in [sk1,]: conn,addr = obj.accept() t=threading.Thread(target=process_request,args=(conn,)) t.start() 设计思路可参考 socketserver源代码1234567import socketserverclass MyHandler(socketserver.BaseRequestHandler): def handle(self): pass server = socketserver.ThreadingTCPServer((&apos;127.0.0.1&apos;,8001),MyHandler)server.serve_forever() 4.2 示例四浏览器会自动向服务端请求头的一些数据，process_data()函数对请求头做了结构化处理，同时浏览器请求什么URL，服务端就会返回什么URL, 在此基础上可以用类封装为一个web框架邹形, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import selectimport socketdef process_data(client): data = bytes() while True: try: chunk = client.recv(1024) except Exception as e: chunk = None if not chunk: break data += chunk data_str = str(data, encoding=&quot;utf-8&quot;) header,body = data_str.split(&apos;\\r\\n\\r\\n&apos;,1) header_list = header.split(&apos;\\r\\n&apos;,1) header_dict = &#123;&#125; for line in header_list: value = line.split(&apos;:&apos;, 1) if len(value) == 2: k, v = value header_dict[k] = v else: header_method, header_url, header_protocal = line.split(&quot; &quot;) header_dict[&quot;header_method&quot;] = header_method header_dict[&quot;header_url&quot;] = header_url header_dict[&quot;header_protocal&quot;] = header_protocal return header_dict,bodysock = socket.socket()sock.setblocking(False) # setblocking表示是否设置为阻塞模式,这里是对accept生效sock.bind((&apos;127.0.0.1&apos;,8008))sock.listen(5)# while True:# conn,addr = sock.accept() #setblocking(False)后不阻塞了，有连接就拿连接，没有连接就直接报错# conn.setblocking(False)# conn.recv(1024) # 有数据拿数据，没有数据就直接报错inputs = [sock,]while True: rList,wList,eList = select.select(inputs,[],[],0.05) for client in rList: if client == sock: # 建立新的连接 conn,addr = client.accept() conn.setblocking(False) # 有数据拿数据，没有数据就直接报错 inputs.append(conn) else: header_dict,body=process_data(client) request_url=header_dict[&apos;header_url&apos;] client.send(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\n&apos;) client.send(request_url.encode(&quot;utf-8&quot;)) inputs.remove(client) client.close() 总结对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。掌握socket可读可写状态","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-02-面象对象编程中级","slug":"python-08-02-面象对象编程中级","date":"2017-03-26T13:28:41.000Z","updated":"2018-02-06T09:05:12.632Z","comments":true,"path":"2017/03/26/python-08-02-面象对象编程中级/","link":"","permalink":"http://www.digmyth.com/2017/03/26/python-08-02-面象对象编程中级/","excerpt":"","text":"目录 staticmethod classmethod staticmethod几个魔法方法说明： @classmethod @staticmethod不依赖任何具体的对象来执行类当中是方法，这个方法要么是静态方法， 要么是类方法，要么是属性 12345678910@classmethoddef test_func(cls): # 类方法传入cls参数（类本身） pass@staticmethoddef test_func(): # 静态方法时没有任何变量 passdef test_func(self): # 普通实例方法时传入self参数（实例本身） pass staticmethod语法12345678In [4]: class Foo(object): ...: @staticmethod ...: def spam(x,y,z): # 静态方法时方法定义不写self ...: print(x,y,z) In [5]: In [5]: Foo.spam(1,2,3) # 静态方法属于类的，用类名调用。虽然实例能调用，但不要那样混用,不规范1 2 3 staticmethod用法场景123456789101112131415161718192021In [7]: import timeIn [6]: class Date(object): ...: def __init__(self,year,mon, day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @staticmethod ...: def now(): ...: t = time.localtime() ...: return Date(t.tm_year, t.tm_mon, t.tm_mday) ...: In [8]: d1 = Date(1989, 8,20) # 获得一个对象In [9]: d2 = Date.now() # 这里也能获得一个对象In [10]: d1.dayOut[10]: 20In [11]: d2.dayOut[11]: 12 classmethod@classmethod语法1234567891011In [12]: class C1(object): ....: name = &apos;wxq&apos; ....: @classmethod ....: def test(cls): # 这里需要传入cls, 谁调用谁就是cls ....: print(cls, cls.name) ....: In [14]: C1.test() # 这里cls就是C1&lt;class &apos;__main__.C1&apos;&gt; wxqIn [13]: c = C1() # 正常实例化对象 @classmethod用法场景1234567891011121314151617In [2]: import timeIn [3]: class Date(object): ...: def __init__(self, year, mon,day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @classmethod ...: def now(cls): ...: t = time.localtime() ...: return cls(t.tm_year, t.tm_mon, t.tm_mday) ...: In [4]: d = Date.now()In [5]: print(d.year,d.mon, d.day)2017 3 12 staticmethod与classmethod区别的牛逼之处123456789101112131415161718192021root@ubuntu:~# cat method.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @staticmethod def now(): t = time.localtime() return Date(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 method.py &lt;__main__.Date object at 0x7f5514658940&gt; 上面并没有我们想要的结果分析：e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。也就是return Date(t.tm_year, t.tm_mon, t.tm_mday), 实例print时调Date类的__str__方法，故打印return Date(t.tm_year, t.tm_mon, t.tm_mday)后的内存地址，不会打印EuroDate类中定义的__str__方法 123456789101112131415161718192021root@ubuntu:~# cat goodmethod.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @classmethod def now(cls): t = time.localtime() return cls(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 goodmethod.py year: 2017 mon:3 day:12 这样才是我们想要的结果，好象参悟了点什么分析:e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。这一点和上面是一致的。但此时return cls(t.tm_year, t.tm_mon, t.tm_mday)中的cls不是Date,而是EuroDate,符合谁调谁就是cls的原则。这样实例化e = EuroDate.now()时print(e)就会去调EuroDate中的__str__方法，得到我们想要的结果 小结：staticmethod与classmethod在一定场景中是有区别的。细节参照上面的例子练习","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-06-异常","slug":"python-08-06-异常","date":"2017-03-25T12:39:12.000Z","updated":"2018-02-06T09:07:40.152Z","comments":true,"path":"2017/03/25/python-08-06-异常/","link":"","permalink":"http://www.digmyth.com/2017/03/25/python-08-06-异常/","excerpt":"","text":"目录 1 2 3 12345678910class WxqException(Exception): def __init__(self, msg): self.message = msg def __str__(self): return self.messagetry: raise WxqException(&quot;Game Over!&quot;)except WxqException as e: print(e)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-09-01-进程和线程","slug":"python-09-01-进程和线程","date":"2017-03-20T14:26:37.000Z","updated":"2018-02-07T07:46:27.544Z","comments":true,"path":"2017/03/20/python-09-01-进程和线程/","link":"","permalink":"http://www.digmyth.com/2017/03/20/python-09-01-进程和线程/","excerpt":"","text":"目录 基本概念 进程 线程 协程 总结 基本概念我们都知道现代操作是支持“多任务”的，什么叫“多任务”呢？。简单地说，就是操作系统可以同时运行多个任务。打个比方一边微信一边QQ。 单核cpu是如何执行“多任务”的？简单的说，就是cpu时间分片，同一时间单核cpu只能执行一个任务，cpu计算时间分片到每个任务交替运行，进程切换或上下文切换时间很短，我们无法感知而己。真正并发执行多任务还要靠多核cpu来完成。 并发执行任务方案， 多进程 多线程 多进程+多线程 Python线程有GIL(Global Interpreter Lock), 这种锁在单核cpu单进程里同一时间只能有一个线程被cpu调度。 那么多线程并发就没有用了吗？计算密集型多进程不就解决了IO密集型多线程不就解决了，同一时间只有一个线程调度，其它时间线程处理IO啊 进程，多进程，进程池进程定义: 程序由指令+数据组成，进程就是这样一种描述的实体(process),简单的认为一个任务就是一个进程。 一个进程至少一个线程，进程间相互隔离（数据不共享），一个子进程挂了并不影响程序运行，当然主进程挂了程序也就挂了，进程切换开销较大。 多进程： 用于解决计算密集型作务的多并发。 进程池： 内部维护一个进程序列，当使用时创建一个新的进程放入池中，再从池中取出来使用，当达到进程池个数时，不再创建进程，请求直接从进程池中取出来用，其它请求只能等待直到进程池中有进程可用。 进程示例：12345678910111213from multiprocessing import Processimport timedef task(arg): time.sleep(arg) print(arg)if __name__ == &apos;__main__&apos;: for i in range(10): p = Process(target=task, args=(i,)) # p.daemon=True p.start() p.join(0.5) print(&quot;end&quot;) 进程池与线程池用法一样，细节不展开1from concurrent.futures import ProcessPoolExecutor 进程锁也是和线程锁一样的用法，细节不展开 进程与线程不同的是进程数据不共享，那如何实现数据交互，方法很多rpc,Queue,pipe,自己实现socket也可以实现 ,借住第三方工具，python本身也可以实现，2种方法： Array (基于C语言数据类型) Manager (基于socket) 1234567891011from multiprocessing import Processdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: v = [] for i in range(10): p = Process(target=task,args=(i, v)) #每个进程数据独立存在 p.start() C语言里Array存的元素是定义时定死的，和python 的列表有很大不同。1234567891011from multiprocessing import Process,Arraydef task(num,li): li[num] = 1 print(list(li))if __name__ == &apos;__main__&apos;: v = Array(&apos;i&apos;, 10) #i在c语言是的int，10表示长度 for i in range(10): p = Process(target=task,args=(i, v)) p.start() Manger().list() Manger().dict()12345678910111213from multiprocessing import Process,Array,Managerdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: # dic = Manager().dict() v = Manager().list() for i in range(10): p = Process(target=task,args=(i, v)) p.start() p.join() 线程，多线程，线程池线程定义：一个任务可以再划分为多个小任务，进程内独立执行这些小任务的最小单元。 一个进程可以有多个线程，线程间共享内存数据，一个线程挂了，其它线程也会崩溃，线程切换开销较进程小一些。 多线程： 用于解决IO密集型任务的多并发 线程池： 内部维护一个线程序列. (与进程池同理) 线程示例123456789101112import threadingimport timedef task(arg): time.sleep(1) print(arg)for i in range(5): t = threading.Thread(target=task,args=(i,)) t.setDaemon(False) # 等子线程完成后再结束主线程 t.start() t.join() # 变为串行,一直等 t.join(3) # 变为串行,只等3秒print(&quot;end&quot;) # 先打印主线程的end,再一起打印子线程的i 自定义线程类示例123456789101112131415161718import threadingimport timeclass MyThread(threading.Thread): def __init__(self,target=None,args=(),**kwargs): super(MyThread,self).__init__(target=None,args=(),**kwargs) self.target =target self._args = args def run(self,): return self.target(*self._args)def task(arg): time.sleep(1) print(arg)t = MyThread(target=task, args=(123,))t.run()print(&quot;end&quot;) 线程锁线程共享数据，共同修改一份数据是有问题的，pycharm环境下可能看不出效果，cmd命令行下可以看到数据修改混乱了。123456789101112import threadingimport timev=10def task(arg): global v v-=1 print(v)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 数据修改乱了，就要加锁了：普通锁，递归锁RLock,事件锁、条件锁，互斥锁普通锁 1234567891011import threadingimport timev=10lock = threading.Lock()def task(arg): lock.acquire() # 申请锁 global v v-=1 print(v) lock.release() # 释放锁 普通锁不能开多重没锁，如果是下面这种设置会造成死锁123456# 死锁lock = threading.Lock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 递归锁RLock递归锁RLock可以开多重锁，不会造成死锁123456# 不会死锁lock = threading.RLock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 信号量BoundedSemaphore多个线程同时使用锁，当然这里3个同时修改数据也可能混乱。 12345678910111213141516import threadingimport timev=10lock = threading.BoundedSemaphore(3)def task(arg): lock.acquire() # 申请锁 time.sleep(1) global v v-=1 print(v) lock.release() # 释放锁for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 事件锁条件式批量解锁12345678910111213141516import threadingimport timelock = threading.Event()def task(arg): time.sleep(1) lock.wait() #锁住所有线程 print(arg)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = input(&quot;&gt;&gt;&gt;&quot;) if value == &apos;1&apos;: lock.set() # 解锁 条件锁123456789101112131415161718import threadingimport timelock = threading.Condition()def task(arg): time.sleep(1) lock.acquire() lock.wait() #锁住所有线程 print(&apos;线程&apos;,arg) lock.release()for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = int(input(&quot;&gt;&gt;&gt;&quot;)) lock.acquire() lock.notify(value) # 传几就解几个锁 lock.release() 线程池pool.submit(download,url)取出一个线程执行任务，返回future对象future.add_done_callback(write)future对象有一个add_done_callback方法，传入我们自己写的回调函数write, future对象也会自动传给write回调函数。download 函数的返回值=future.result() 12345678910111213141516171819202122232425import requestsfrom concurrent.futures import ThreadPoolExecutordef write(future): response = future.result() f=open(&apos;xx.txt&apos;,&apos;wb+&apos;) f.write(response.content) f.close()url_list = [ &apos;http://www.baidu.com&apos;, &apos;http://www.digmyth.com&apos;, &apos;http://www.github.com&apos;,]def download(url): response=requests.get(url) print(&quot;得到结果&quot;,url) return responsepool = ThreadPoolExecutor(2)for url in url_list: print(&quot;开始请求：&quot;,url) future=pool.submit(download,url) # 池中取一个连接 # ruture自动传给write调函数:write(future) future.add_done_callback(write) 封装1234567891011121314import requestsfrom concurrent.futures import ThreadPoolExecutordef download(url): response=requests.get(url) return responsedef run(url_list=None): pool = ThreadPoolExecutor(2) for item in url_list: url = item[&apos;url&apos;] callback = item[&apos;callback&apos;] future=pool.submit(download, url) future.add_done_callback(callback) 1234567891011121314151617def f1(future): print(future.result().content)def f2(arg): print(&quot;future&quot;)def f3(future): print(&quot;future&quot;)url_list = [ &#123;&apos;url&apos;:&apos;http://www.baidu.com&apos;,&apos;callback&apos;:f1&#125;, &#123;&apos;url&apos;:&apos;http://www.digmyth.com&apos;,&apos;callback&apos;:f2&#125;, &#123;&apos;url&apos;:&apos;http://www.github.com&apos;,&apos;callback&apos;:f3&#125;,]import nb_threadnb_thread.run(url_list) 协程协程定义： 协程不同于进程，线程对于操作系统可见且是一种资源，协程只是代码层面的来回切换，对于操作系统不可见且并非是一种资源。 1pip3 install greenlet # python中原生协程 单独协程没什么用，结合协程切换特性+IO+select+socket可以编写出牛逼的异步IO模块或异步非阻塞框架 gevent就是基于greenlet+libvent+IO二次加工实现的python异步模块1pip3 instal gevent 示例：和多线程不同，这里是单线程并发IO任务123456789101112import geventimport requestsdef func(url): response = requests.get(url) print(response.url)gevent.joinall([ gevent.spawn(func,&apos;http://www.baidu.com&apos;), gevent.spawn(func,&apos;http://www.digmyth.com&apos;), gevent.spawn(func,&apos;http://www.github.com&apos;),]) 当然我们也可以自己用select来写IO多路复实现并发 总结即使有了多进程多线程或进程池，线程池处理多任务，但如果一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型也只能处理一个任务，无法并发执行。 还好现代操作系统支持异步IO，这是一个很牛逼的东东，单进程单线程模型并发执行任务得以实现。这种称为事件驱动模型，Nginx就是支持异步IO的Web服务器。 单线程的异步编程或异步IO多路复用会是趋势，可以基于事件驱动编写高效的多任务程序。Twisted,Tornado之所以牛逼，就是因为它们的高性能也是基于事件驱动，基于异步IO多路复用。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-Django-01-入门","slug":"web-django-01-入门","date":"2017-03-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.948Z","comments":true,"path":"2017/03/20/web-django-01-入门/","link":"","permalink":"http://www.digmyth.com/2017/03/20/web-django-01-入门/","excerpt":"","text":"目录 什么是WSGI 什么是mvc/mtv模型 orm如何工作 Django安装 一、什么是WSGI对浏览器而言，远端是服务器程序和应用程序，而服务器程序就是socket Server,用于接收用户请求，解析用户请求，响应用户请求，这部份工作永远不变的。可变的是应用程序，那么服务器程序与应用程序解耦偶就有了必要。 接收用户请求，解析用户请求，响应用户请求这些封装为WSGI接口简化开发。 定义web app与web server之间接口解耦规则就是WSGI. Python标准库提供的独立wsgi服务器称为wsgiref 二、什么是mvc/mtv模型init.py: 告诉python它不是一个目录文件夹而是一个包 mvc: model(数据库交互) view(模板) control (业务处理逻辑) mtv: model（数据库交互）view(视图，业务逻辑处理) templates(模板） 注： templates模板可以放在项目下或各个app下 三、orm如何工作一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 自动路由： 反射应用，自定义扩展 四、Django安装安装Djangopip3 install django pika pymysql 查看安装pip3 list 创建一个Django项目cd /optmkdir /opt/templates # 用于整个项目存放模板文件django-admin startproject Mysite #创建一个项目 生成目录结构如下123456789101112/opt/Mysite - Mysite # 还有一个与项目同名的文件夹/opt/Mysite/Mysite，对整个程序进行配置 - __init__.py - settings.py # 配置文件 - urls.py # URL对应关系 - wsgi.py # 遵循WSGI规范，一般使用 uwsgi + nginx - manage.py # /opt/Mysite/manage.py管理Django程序：如下 - python manage.py runserver # 运行程序 - python manage.py startapp xx # 创建app # Django的orm框架 - python manage.py makemigrations - python manage.py migrate 创建一个应用：12345678910cd /opt/Mysitepython manage.py startapp app01生成/opt/Mysite/app01目录结构如下：/opt/Mysite/app01/__init__.py # 说明app01是一个包/opt/Mysite/app01/migrations # django orm框架，修改表结构的操作记录（差异化）/opt/Mysite/app01/admin.py # Django提供的后台管理程序/opt/Mysite/app01/apps.py # 配置当前app/opt/Mysite/app01/models.py # 数据库交互：orm-写指定的类，通过命令可以创建数据库结构/opt/Mysite/app01/views.py # 视图函数，业务逻辑处理/opt/Mysite/app01/test.py # 单元测试 初始练习：12Mysite/Mysite/urls.py (导入from blog import views及编写业务逻辑url(r&apos;^index&apos;,views.index)) ---&gt; 练习各种例子。。。 URLS别名用法：12345url(r&apos;^/login$&apos;, views.login, name=&quot;LOGIN&quot;)那么前端templates中的html代码需要用别名方式，语法如下：&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; 改为&lt;form action=&quot;&#123;% url &apos;LOGIN&apos; %&#125;&quot; mothod=&quot;post&quot;&gt; 1234567891011121314151617181920212223urls url(正则表达式 视图函数，参数，别名）正则这里匹配到的或者说捕获到的数据都是字符串类型，post提交的数据get post都可以向server端发送数据，区别是提交数据的方式不同：格式如下get ?id=2&amp;page=3post 数据在body里 无命名分组 位置参数有命名分组 关键字参数--在函数定义时，只能用命名的key，这一点是要注意的获取登录首页是以GET方法提交 -----GET用户名，密码表单submit时是以POST方式提交 -----POST时间表达：1 时间戳2 字符串3 结构化时间 五、Django生命周期 5.1 路由系统URLS123456789101112131 /index/ -&gt; def index(request)2 /detail-(\\d+)/ -&gt; def detail(request, nid) /detail-(?P&lt;nid&gt;\\d+)/ -&gt; def detail(request,nid)3 /index/ -&gt; def index(request) name=n1 使用别名生成URL： 模板语言： &#123;% url n1 %&#125; -&gt; /index/ 视图函数：（需要导入reverse模块） reverse(name=&quot;n1&quot;) --&gt; /index/ 4 /web/ include(&quot;app01.urls&quot;) 5.2 视图函数1 函数至少一个参数 request2 request12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 注意:form表单提交方法只能是get或post当提交文件时特别注明enctype=&quot;multipart/form-data&quot;12345&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;filename&quot;&gt;&lt;/form&gt; 3 返回方式123HttpResponse()render(request,)redirect() 5.3 ORM操作各数据库操作是一种外对sql api接口的封装 第一层封装：数据库存储最底层是db驱动，对外开放SQL API用于操作数据库 第二层封装：python3 中操作mysql数据库的库为pymysql,是对SQL API之上的一层封装 第三层封装: orm操作是最高级封装，pymsql之上的一层封装 最终：orm翻译成pymsql,pymysql再翻译成sql语句 Django 数据库操作具体语法介绍请参考 5.4 模板引警Django对template中html的渲染有着一套语法,我有专门一篇博客讲解模板渲染语法渲染语法博客参考 1 基本方法12345678910111213return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 2 函数 Django 提供的函数:12simple_tag 可以有多个参数filter 只能有2个参数，并且可以做条件语句的条件","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-08-03-面象对象编程高级","slug":"python-08-03-面象对象编程高级","date":"2017-03-15T14:28:41.000Z","updated":"2018-02-21T04:38:02.994Z","comments":true,"path":"2017/03/15/python-08-03-面象对象编程高级/","link":"","permalink":"http://www.digmyth.com/2017/03/15/python-08-03-面象对象编程高级/","excerpt":"","text":"目录(魔法方法) 类内置方法 构造方法 @property getattr系列 getitem系列 metaclass系列 importlib 字符串形式运行函数 内置方法1234567891 Foo.__name__ 字符串形式的类名2 Foo.__doc__ Foo的文档字符串3 Foo.__bases__ 父类组成的元组4 Foo.__class__ Foo类所在5 Foo.__bases__ Foo的所有父类构成的元组7 Foo.__module__ Foo类所在模块8 obj.__class__ obj对象所在的类 9 dir(Foo)` Foo类所有属性名组成的列表10 Foo.__dict__ Foo类所在属性组成的字典 构造方法12__init__ 构造方法，通过类创建对象时自动触发执行__del__ 析构方法，当对象在内存中被释放时自动触发执行 __str__ __repr__ __call__123__str__ 对象打印时自动触发__repr__ 对象直接回车自动触发（仅供程序员使用）__call__ 对象后面加括号调用时自动触发 @property属性方法把一个类方法变为属性来用12345678910111213141516171819class Dog(object): def __init__(self,name): self.name = name self.__food = None @property def eat(self): print(&quot;%s is eating %s&quot; %(self.name, self.__food)) @eat.setter # 赋值调用属性，调这个方法 def eat(self,food): print(&quot;set to food:&quot;,food) self.__food = food @eat.deleter # 删除属性 def eat(self): del self.__food print(&quot;Delete the finished&quot;)obj=Dog(&apos;w..w&apos;)obj.eat = &quot;fish&quot; # 自动调用@eat.setter赋值obj.eat property 原理就是property类里定义了__get__() __set__() __delete__()方法，是描述符的运用123456定义： 描述符就是将某种特殊类的实例指派给另一个类的属性，__get__ __set__ __delete__实现了 描述符协议，用于property描述符编写。一种调用方式之一： property(fget=None, fset=None, fdel=None, doc=None)__get__(self, instance, owner) #用于访问属性，它返回属性的值__set__(self, instance, value) #将在属性分配操作中调用，不返回任何内容__delete__(self, instance) # 控制删除操作，不返回任何内容 getattr setattr hasattr反射系列用于通过字符串找到函数或方法 示例：1234567891011121314151617181920def func1(self): print(self.name,&apos;say Hi&apos;) return &quot;func1&quot;class Foo(object): def __init__(self): self.name = &apos;wxq&apos; def func2(self): print(self.name) return &quot;method func2&quot;obj = Foo()choice = input(&quot;请输入调用方法名:&quot;)if hasattr(obj,choice): # 实例中有这个方法，执行实例中的方法 func=getattr(obj,choice) func() # 绑定方法自动传入self参数else: # 动态加载函数封装到类中 setattr(obj,choice,func1) func = getattr(obj,choice) func(obj) # 函数时需手动传入self参数 __getattr__ __setattr__ __hasattr__ __delattr__ 进行__dict__拦截一般来讲，obj.name = &#39;wxq&#39;python自动基于self.__dict__赋值取值操作，无需关心，这里只是对这种自动操作进行拦截，用于高级代码重写操,self.xx不存在变量xx时先访问__getattribute__,再访问__getattr__,默认返回None,self.xx存在变量xx时不会访问getattr，直接取出值返回，self.name=’wxq’赋值先访问setattr`方法，没有该方法就用默认内置. 示例一12345678910111213141516171819class Foo(): def __init__(self): pass def __getattribute__(self, item): print(&apos;__getattribute__&apos;) return object.__getattribute__(self,item) def __getattr__(self, item): print(&apos;__getattr__&apos;) return &quot;%s variable don&apos;t exists&quot; % item def __setattr__(self, item, value): print(&apos;__setattr__&apos;) self.__dict__[item] = &apos;test&apos;+valueobj=Foo()obj.name = &apos;wxq&apos;print(obj.name) 打印123__setattr____getattribute__testwxq 示例二： 当没有.xx变量属性时会访问__getattr__方法12345678910111213class Foo(): def __init__(self): pass def __getattr__(self, item): if item == &apos;name&apos;: return &apos;wxq&apos; elif item == &apos;age&apos;: return 25obj = Foo()print(obj.age) 示例三：123456789101112class Foo(): def __init__(self,path=&apos;&apos;): self.path = path def __getattr__(self, item): return Foo(&quot;%s/%s&quot;%(self.path, item)) def __str__(self): return self.pathobj = Foo(&quot;www&quot;).bai.comprint(obj) # 打印 www/bai/com __getitem__ __setitem__ __delitem__用于索引操作，如字典形式：obj[&#39;k1&#39;]如Session设置 request.session[&#39; user_info&#39;] = &#39;user&#39; 1234567891011121314151617181920class Foo(object): def __init__(self,attrs=&#123;&#125;): self.attrs = attrs def __getitem__(self, key): print(&apos;__getitem__&apos;,key) return self.attrs.get(key) def __setitem__(self, key, value): print(&apos;__setitem__&apos;,key,value) self.attrs[key] = value def __delitem__(self, key): print(&apos;__delitem__&apos;,key) del self.attrs[key] print(self.attrs) obj = Foo(&#123;&apos;name&apos;:&apos;wxq&apos;&#125;)obj[&apos;k1&apos;] = &apos;v1&apos; # 设置，自动触发执行 __setitem__print(obj.attrs)print(obj[&apos;k1&apos;]) # 获取值，自动触发执行 __getitem__del obj[&apos;name&apos;] # 触发__delitem__ __new__和 __metaclass____new__与实例化对象相关123456789class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): # 其实是运行了__new__(),不再调用__init__()方法了 print(&quot;Foo __new__&quot;)obj = Foo(&apos;wxq&apos;) # 打印 Foo __new__,这里obj是None 这里可以看出实例化是先运行的__new__()方法，如果__new__()没有返回值，Foo.__init__()就不会运行了，obj也就为None了要想运行Foo.__init__(), 那么__new__()必须有返回值1234567891011class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): print(&quot;Foo __new__&quot;) return object.__new__(cls)obj = Foo(&apos;wxq&apos;)print(obj) 总结实例化过程 看起来__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。 __metaclass__与类的创建相关12print type(f) # 输出：&lt;class &apos;__main__.Foo&apos;&gt; 表示，obj 对象由Foo类创建print type(Foo) # 输出：&lt;type &apos;type&apos;&gt; 表示，Foo类对象由 type 类创建 培析类 的创建过程123456789def func(self): print(&apos;hello fgf&apos;)Foo = type(&apos;Foo&apos;,(object,), &#123;&apos;talk&apos;: func&#125;)# type第一个参数：类名# type第二个参数：当前类的基类# type第三个参数：类的成员f = Foo()f.talk() 12345678910def func(self): print(&quot;hello %s %s&quot;%(self.name,self.age))def __init__(self,name,age): self.name = name self.age = ageFoo = type(&apos;Foo&apos;,(object,),&#123;&apos;func&apos;:func, &apos;__init__&apos;:__init__&#125;) # 用type创建出Foo这个对象（类）f = Foo(&quot;wxq&quot;,25) # 再用Foo对象创建f对象f.func() Metaclass元类创建过程1234567891011121314151617181920212223242526272829#print(globals())class MyType(type): def __init__(self,*args,**kwargs): print(&quot;MyType __init__&quot;,self,*args,**kwargs) def __call__(self, *args, **kwargs): print(&quot;MyType __call__&quot;,self, *args, **kwargs) obj = self.__new__(self) self.__init__(obj, *args, **kwargs) obj.age= 25 return obj def __new__(cls, *args, **kwargs): print(&quot;MyType __new__&quot;,cls, *args, **kwargs) obj = type.__new__(cls, *args, **kwargs) return objclass Foo(object,metaclass=MyType): def __init__(self, name): self.name = name print(&quot;Foo __init__&quot;) def __call__(self, *args, **kwargs): print(&quot;call...&quot;)#print(globals()f = Foo(&quot;test&quot;)print(f.name,f.age) 总结Type创建类过程 前面实例化对象的结论是__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。那么type创建Foo对象(类)也是这个流程，因为是Type实例化Foo类，MyType执行__new__创建Foo,返回给MyType.__init__()执行，当f=Foo() 实例化对象也就是加()调用MyType.__call__()方法,__call__()方法来执行实例化，实例化过程又是执行Foo.__new__()返回给Foo.__init__()，完成实例化。 importlib字符串模块导入123456import importlibx=&apos;scrapy.crawler.CrawlerProcess&apos;model_path,model_name = x.rsplit(&apos;.&apos;,maxsplit=1)md=importlib.import_module(model_path) # 字符串形式模块导入cls=getattr(md,model_name)print(cls) 字符串形式运行函数1 eval(字符串)1234def func(arg): return argeval(&apos;func(&quot;hello wolrd&quot;)&apos;) Tornado编写session组件会用到这个知识点，结合工厂设计模式 2 eval获取函数1234567def f1(arg): print(arg)x=&quot;f1&quot;func=eval(x) # 获取函数func(&quot;wxq&quot;) 3 sys.modules获取函数1234567891011import sysdef process(arg): return argf=&quot;process&quot;func=getattr(sys.modules[__name__], f) # 获取函数ret=func(&apos;hello world&apos;)print(ret) 4 运用类中getattr123456789class Foo(): def f1(self): return &quot;hello world&quot; obj = Foo()x=&quot;f1&quot;func=getattr(obj,x)print(func()) &lt;完结&gt;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-06-01-正则表达式","slug":"python-06-01-正则表达式","date":"2017-03-01T09:03:01.000Z","updated":"2017-02-27T08:36:47.909Z","comments":true,"path":"2017/03/01/python-06-01-正则表达式/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-06-01-正则表达式/","excerpt":"","text":"目录 基础 进阶 re模块 分组 切分字符串 编译compile 贪婪模式匹配 基础元字符：(Meta-Characters)是正则表达式中具有特殊意义的专用字符比如：\\d表示数字 \\s表示空格 \\w表示[a-zA-Z0-9_]大小写字母数字下划线元字符表 链接字符类：又字符集，一组可以匹配[ ]中字符串的字符12345678910111213141516171819202122. # 任意单个字符[] # 集合内[^] # 集合内取反? # 表示前一个字符长度为0或1+ # 表示前一个字符长度为1或1以上* # 表示前一个字符长度为任意，等同于?+的并集&#123;m&#125;&#123;m,n&#125;&#123;0,n&#125;&#123;m,&#125;^$pat1|pat2() # 分组\\b # 嘛意思[0-9] \\d[0-9a-zA-Z_] \\w\\s # 任意空白字符\\nna*? # 这里？使用非贪婪模式（正则表达式默认工作在贪婪模式，尽可能多的去匹配）(*|+|?|&#123;&#125;)?` # 使用非贪婪模式match # 只匹配首项以开头的，与shell中^相同 进阶re模块12345678910111213141516171819202122232425262728293031&gt;&gt;&gt; re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; res = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; print(res)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt; # 没有匹配到打印为None&gt;&gt;&gt; res.group() # 匹配到时用.group()取出匹配结果 &apos;wxq&apos;&gt;&gt;&gt; &quot;I love wxq &quot;.find(&apos;wxq&apos;)7&gt;&gt;&gt; re.search(r&apos;.&apos;, &apos;I love digmyth.com&apos;) # 匹配任意单个字符，所以匹配到&quot;I&quot;&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\.&apos;, &apos;I love digmyth.com&apos;) # 只匹配.需要转义&lt;_sre.SRE_Match object; span=(14, 15), match=&apos;.&apos;&gt;&gt;&gt;&gt; re.search(r&apos;wx.&apos;, &apos;I love wxq.com&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d&apos;, &apos;I love 123 wxq&apos;) # 匹配单个数字&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt; &gt;&gt;&gt; re.search(r&apos;\\d\\d\\d&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;123&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.10&apos;) # 少一位匹配不到&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.100&apos;) # 匹配到&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.100.100&apos;&gt; 12345678910111213141516171819202122232425262728293031323334353637&gt;&gt;&gt; re.search(r&apos;[aeiou]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(3, 4), match=&apos;o&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[aeiouAEIOU]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[a-z]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(2, 3), match=&apos;l&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[2-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(8, 9), match=&apos;2&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[0-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3&#125;c&apos;, &apos;abbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 5), match=&apos;abbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3,10&#125;c&apos;, &apos;abbbbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 7), match=&apos;abbbbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[0-255]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;1&apos;&gt;&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[0-2][0-5][0-5]&apos;, &apos;188&apos;) # 没有匹配到&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[01]\\d\\d|2[0-2]\\d|25[0-5]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;188&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5]))&apos;, &apos;192.168.1.1&apos;) # 只匹配到192&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;192&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5])\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]\\d\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 11), match=&apos;192.168.1.1&apos;&gt; ip地址匹配最终完美写法：12345&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.240.240&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 14), match=&apos;192.168.240.24&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[0-1]?\\d?\\d)&apos;, &apos;192.168.240.240&apos;) # 这个写法完美&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.240.240&apos;&gt; [0-255]表示的是0，1，2后跟上55[0-2][0-5][0-5]只是三个占位上的数字，没有个位，百位这样的区分，当然不能匹配188了 1234567891011121314&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;3&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 重复&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1, 5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 注意没有空格&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1,5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 匹配到了&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; s = &quot;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt;&quot;&gt;&gt;&gt; re.search(r&apos;&lt;.+?&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;&lt;html&gt;&apos;&gt;&gt;&gt;&gt; re.search(r&apos;&lt;.+&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 50), match=&apos;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt; 12345&gt;&gt;&gt; re.findall(r&apos;\\bFishC\\b&apos;, &quot;FishC.com!FishC_com!(FishC)&quot;) # 待续。#^#[&apos;FishC&apos;, &apos;FishC&apos;]&gt;&gt;&gt; &gt;&gt;&gt; re.findall(r&apos;\\w&apos;, &quot;牛X工作室Love_FishC_com!)&quot;)[&apos;牛&apos;, &apos;X&apos;, &apos;工&apos;, &apos;作&apos;, &apos;室&apos;, &apos;L&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;F&apos;, &apos;i&apos;, &apos;s&apos;, &apos;h&apos;, &apos;C&apos;, &apos;_&apos;, &apos;c&apos;, &apos;o&apos;, &apos;m&apos;] re-replace/sub的例子如下字符串的strip方法只能去前后空格、字符串的replace方法是字符替换、re.sub方法也是替换功能。123456789&gt;&gt;&gt; name = &apos; w x q&apos;&gt;&gt;&gt; name.strip()&apos;w x q&apos;&gt;&gt;&gt; name.replace(&apos; &apos;, &apos;&apos;)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos;wxq&apos;, &apos;love&apos;, &apos;I wxq wxq wxq&apos;, count=2)&apos;I love love wxq&apos; 分组eg1:123&gt;&gt;&gt; name = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; name.group() # .group()打印匹配对象&apos;wxq&apos; eg2:12345678910&gt;&gt;&gt; s = &apos;aa bb cc dd &apos;&gt;&gt;&gt; p = re.compile(r&apos;\\w+\\s+\\w+&apos;) # 匹配单词空格单词这样的分组&gt;&gt;&gt; p.findall(s) # 匹配分为了2组[&apos;aa bb&apos;, &apos;cc dd&apos;]&gt;&gt;&gt; p = re.compile(r&apos;(\\w+)\\s+\\w+&apos;) # 只匹配单词空格单词中括号那个单词&gt;&gt;&gt; p.findall(s)[&apos;aa&apos;, &apos;cc&apos;]&gt;&gt;&gt; p = re.compile(r&apos;((\\w+)\\s+\\w+)&apos;) # 先打印外括号，后打印内括号，先后内容组成元组，最后列表呈现&gt;&gt;&gt; p.findall(s)[(&apos;aa bb&apos;, &apos;aa&apos;), (&apos;cc dd&apos;, &apos;cc&apos;)] eg3:12&gt;&gt;&gt; re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;(?P&lt;birthday&gt;[0-9]&#123;4&#125;))&quot;, &quot;371481199306143242&quot;).groupdict()&#123;&apos;province&apos;: &apos;3714&apos;, &apos;birthday&apos;: &apos;1993&apos;, &apos;city&apos;: &apos;811993&apos;&#125; 切分字符串re.split用法split 以至少2个空格为分隔, 两种写法:re.split(r’\\s{2,}’, str)re.split(r’\\s\\s+’，str) 12345&gt;&gt;&gt; import re&gt;&gt;&gt; re.split(r&apos;\\s&#123;2,&#125;&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;) # 以2个空隔分割字符串返回列表[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;]&gt;&gt;&gt; re.split(r&apos;\\s\\s+&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;)[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;] 12345678910111213# cat whodata.txt 17:24:49 up 2:05, 3 users, load average: 0.00, 0.02, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/1 192.168.109.1 15:33 9.00s 0.17s 0.04s python3&gt;&gt;&gt; import re&gt;&gt;&gt; with open(&apos;whodata.txt&apos;, &apos;r&apos;) as f:... for line in f:... res = re.split(&apos;\\s\\s+&apos;, line)... print(res)... [&apos; 17:24:49 up&apos;, &apos;2:05,&apos;, &apos;3 users,&apos;, &apos;load average: 0.00, 0.02, 0.05\\n&apos;][&apos;USER&apos;, &apos;TTY&apos;, &apos;FROM&apos;, &apos;LOGIN@&apos;, &apos;IDLE&apos;, &apos;JCPU&apos;, &apos;PCPU WHAT\\n&apos;][&apos;root&apos;, &apos;pts/1&apos;, &apos;192.168.109.1&apos;, &apos;15:33&apos;, &apos;9.00s&apos;, &apos;0.17s&apos;, &apos;0.04s python3\\n&apos;] eg1:123456789101112&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; p = re.compile(&apos;\\.&apos;)&gt;&gt;&gt; p.split(&apos;www.digmyth.com&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; url = &apos;www.digmyth.com&apos;&gt;&gt;&gt; re.compile(&apos;\\.&apos;).split(url)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; re.sub(&apos;www&apos;, &apos;mail&apos;, url)&apos;mail.digmyth.com&apos;&gt;&gt;&gt; url.split(&apos;.&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;] eg2:123456789&gt;&gt;&gt; import re&gt;&gt;&gt; name = &apos;hello world&apos;&gt;&gt;&gt; str_a, str_b = re.split(r&apos;\\s+&apos;, name)&gt;&gt;&gt; str_a, str_b(&apos;hello&apos;, &apos;world&apos;)&gt;&gt;&gt; str_a&apos;hello&apos;&gt;&gt;&gt; str_b&apos;world&apos; eg3:123456789101112root@ubuntu:~# cat put_split.py #!/usr/bin/env python3import osimport reinput = input(&quot;enter you str: &quot;).strip()cmd, path = re.split(r&apos;\\s+&apos;, input)print(cmd.strip())print(path.strip())root@ubuntu:~# python3 put_split.py enter you str: put /root/demo.txtput/root/demo.txt 编译compile正则表达式工作流程： 检测语法–&gt; 编译–&gt; 匹配当一个正则表达式多次调用时，建议预先编译好，后续直接用于匹配以提高效率 123456789&gt;&gt;&gt; p = re.compile(r&apos;[A-Z]&apos;)&gt;&gt;&gt; type(p)&lt;class &apos;_sre.SRE_Pattern&apos;&gt;&gt;&gt;&gt; p.search(&quot;I Love www.DigMyth.Com&quot;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; p.findall(&quot;I LLove www.DigMyth.Com&quot;)[&apos;I&apos;, &apos;L&apos;, &apos;L&apos;, &apos;D&apos;, &apos;M&apos;, &apos;C&apos;] 贪婪模式匹配","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-07-01-面象对象编程初级","slug":"python-07-01-面象对象编程初级","date":"2017-03-01T00:28:28.000Z","updated":"2018-02-06T09:03:55.804Z","comments":true,"path":"2017/03/01/python-07-01-面象对象编程初级/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-07-01-面象对象编程初级/","excerpt":"","text":"目录 相关概念 创建类和对象 面向对象内置变量 继承、封装、多态 抽象方法 相关概念定义： 面向对象编程(oop=object-oriented programming): 相对于面对过程编程，它只是一种编程范示。 状态和转换这种状态的操作: 状态其实就是数据，转换这种状态的操作其实就是方法 类：将同一种具体的共同特性抽象出来数据：如变量方法：函数：操作变量引用的数据的代码方法是类的组成部份，属性也是在类中定义的, 但数据是在类实例化时赋值的. 对象是类的实例，对象的某个方法的调用理解为对其发消息，或接口调用同一个类的所有对象都能接收相同的消息，也就是同种方法依赖 一个类中的方法操作另一个类的对象聚合 类A的对象包含类B的对象继承：描述特殊或具体与一般性的关系面向对象的模型机制有3原则：封装，继承，多态 类或类成员有数据和方法一个类的行为和接口是通过类的方法来定义的对象是类的实例自定义类—实例化—–对象–对象间的操作—消息传递这里消息就是调用请求 创建类和对象1234567891011121314class Foo(): data=&apos;hello world&apos; #类数据变量作用于所有实例 def __init__(self,name=&apos;default&apos;): # 构造器 self.name = name # 实例变量作用于调用对象或调用实例 def set_score(self,value): # 类方法属性 self.score = value def get_score(self): return self.scoreobj = Foo(&apos;wxq&apos;) obj.set_score(100)print(obj.get_score()) 可以给一个对象添加属性123456class Foo(): data = &apos;default data&apos;obj = Foo()obj.name = &apos;wxq&apos;print(obj.name) 可以把某个方法绑定给一个实例或 一个类，当绑定给类时，这个方法对此类的所有实例都生效方法绑定给一个实例12345678910def set_age(self,age): self.age = age class Foo(): data = &apos;default data&apos; from types import MethodTypeobj.set_age = MethodType(set_age, obj)obj.set_age(20) 方法绑定给一个类12345678910111213from types import MethodTypeclass Foo(): data = &apos;default data&apos;def set_age(self,age): self.age = ageFoo.set_age = MethodType(set_age, Foo)obj = Foo()obj.set_age(23)print(obj.age) 面向对象内置变量1 类变量作用于所有对象或实例2 实例变量作用于调用对象或调用实例3 __init__() 构造器 __del__() 析构器4 Foo.__name__ 字符串形式的类名5 Foo.__doc__ Foo的文档字符串6 Foo.__bases__ Foo的所有父类构成的元组 7Foo.moduleFoo类所在模块 8obj.classobj对象所在的类 9dir(Foo)` Foo类所有属性名组成的列表1[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;data&apos;] 10 Foo.__dict__Foo类的所有属性组成的字典1&#123;&apos;data&apos;: &apos;hello&apos;, &apos;__weakref__&apos;: &lt;attribute &apos;__weakref__&apos; of &apos;Foo&apos; objects&gt;, &apos;__dict__&apos;: &lt;attribute &apos;__dict__&apos; of &apos;Foo&apos; objects&gt;, &apos;__init__&apos;: &lt;function Foo.__init__ at 0x0000000000ABC9D8&gt;, &apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None&#125; 类的继承，封装，多态3特性继承1234567891011121314class Foo(): def f1(self): return self.f2() def f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def f2(self): return &quot;Bar.f2&quot;obj = Bar()obj.f1() # 打印Bar.f2# 描述运行过程:self=obj,没有f1就先调用父类的f1,再找当前类的f2, 不是直接找父类的f2,如果非要找父类的f2,参考下面引藏示例 有时子类直接继承父类，在继承基础上重构子类属性，那么就要用到super()方法用法： super(当前类，self.).__init__()或py3 supuer().__init__() 12345678class Foo(): def __init__(self,*args,**kwargs): passclass Bar(): def __int__(self,name,*args,**kwargs): super(Bar,self).__init__() self.name = name Boolean型判断123456789判断一个类是不是另一个类的子类issubclass(CC,PP)issubclass(PP,object)判断一个实例是不是那个类生成的isinstance(ins1,CC)判断一个实例有没有那个属性值hasattr(ins1,&apos;name&apos;) 12345678from types import FunctionTypeclass Foo(): def f1(self,name): return nameobj = Foo()print(isinstance(Foo.f1,FunctionType)) # Trueprint(isinstance(obj.f1,FunctionType)) # False 封装python数据封装只要写代码就会有，对数据结构化存储; 如1234567class Base(): def __init__(self): self.status = False self.data = None self.errors = Noneobj=Base()obj.status/obj.data/obj.errors # 这就是一种数据封装 封装可以__开头隐藏属性，但在类内部不受限制，外部是无法访问的，当然只是语法变形的隐藏，在名称空间还是能找到的123456789101112131415161718class Foo(): __N = &apos;NN&apos; def __init__(self,name): self.__name = name def __f1(self): # 外部无法直接访问 return self.__name def f2(self): return self.__f1() # 在内部调用不受限制obj = Foo(&apos;wxq&apos;)print(obj.__f1()) # 无法直接调用,直正调用还是可以的obj._Foo__f1()print(obj.f2())obj.__dict__ # &#123;&apos;_Foo__name&apos;: &apos;wxq&apos;&#125;obj.__x = &quot;xx&quot; # 语法隐藏变形是在定义类时，实例化后再__不会变形obj.__xx # 实例化后不会隐藏 继承类时，我们就想调用Foo的f2(),方法很多，这里用一下隐藏实现1234567891011121314 class Foo(): def f1(self): return self.__f2() #变形为 self._Foo__f2 def __f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def __f2(self): # self._Bar__f2 return &quot;Bar.f2&quot;obj = Bar()x=obj.f1() # 打印Foo.f2print(x) 多态python原生就是多态，没什么可说的 123456789101112131415161718192021222324252627class Animal(): def __init__(self,name): self.name = name def talk(self): pass @staticmethod def animal_talk(obj): obj.talk()class Dog(Animal): def talk(self): print(&quot;wang...&quot;)class Cat(Animal): def talk(self): print(&quot;miao miao...&quot;)d=Dog(&apos;dog&apos;)# d.talk()c = Cat(&apos;cat&apos;)# c.talk()Animal.animal_talk(d)Animal.animal_talk(c) 抽象方法抽象方法作用：定义子类必须实现的父类的某些方法使用：12345678910111213141516171819import abcclass Base(metaclass=abc.ABCMeta): @abc.abstractmethod def read(self): pass @abc.abstractmethod def write(self): passclass dev(Base): def read(self): pass def write(self): passobj = dev() 如果子类没有实现父类规定的@abc.abstractmethod装饰的方法就会报错1TypeError: Can&apos;t instantiate abstract class dev with abstract methods read, write","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-02-模块","slug":"python-05-02-模块","date":"2017-02-20T02:09:10.000Z","updated":"2018-01-03T10:57:43.240Z","comments":true,"path":"2017/02/20/python-05-02-模块/","link":"","permalink":"http://www.digmyth.com/2017/02/20/python-05-02-模块/","excerpt":"","text":"目录 相关概念 模块os 模块sys 模块time 模块random 模块pickle 模块json 模块logging 模块paramiko 模块configparser 模块MySQLdb 模块hashlib 模块uuid 模块md5 模块 相关概念 过程编程 , 函数式编程, 模块化编程是一个意思，区别于面向对象编程 面向对象编程好处：（特性: 封装，继承，多态） python程序可以分解成模块，语句，表达式和 对象 程序由模块构成 模块包含语句 语句包含表达式 表达式建立并处理对象表达式是”某事“， 语句是“做某事”即指令语句的特性：它们改变了事物，例如，赋值语句改变了变量，print改变了屏幕输出。 模块导入的使用 123456&gt;&gt;&gt; import platform&gt;&gt;&gt; print(platform.uname())uname_result(system=&apos;Linux&apos;, node=&apos;ubuntu&apos;, release=&apos;4.2.0-35-generic&apos;, version=&apos;#40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016&apos;, machine=&apos;x86_64&apos;, processor=&apos;x86_64&apos;)&gt;&gt;&gt; import platform&gt;&gt;&gt; dir(platform)[&apos;DEV_NULL&apos;, &apos;_UNIXCONFDIR&apos;, &apos;__builtins__&apos; 此处略... ] 模块导入区别 import 导入会形成以模块名同名的名称空间，如果有个方法叫uname(),那么我们调用是print(platform.uname())加上platform名称空间前缀不会冲突 123456&gt;&gt;&gt; import random # 独立名称空间&gt;&gt;&gt; random.choice([3,5,6,7,8,9]) 7&gt;&gt;&gt; from random import choice # 没有独立名称空间，当前有choice方法会覆盖，这就是区别&gt;&gt;&gt; choice([3,5,6,7,8,9])6 from-import是导入指定模块的某些方法和属性，会导入在当前名称空间里，如果当前名称空间也有choice方法，那么会覆盖choice方法。import和from-import是可执行语句，独立可执行片断，可以嵌套在if测试中，或出现在def中，这样在我们满足条件再导入模块。 己知模块查找此模块在系统中的路径，用法module_name.__file__123&gt;&gt;&gt; import random&gt;&gt;&gt; random.__file__&apos;/usr/lib/python3.4/random.py&apos; 反射有一种说法叫反射1 以字符串的形式导入模块2 以字符串的形式调用函数 例子：12345678910111213root@apt:~# cat /usr/local/lib/python2.7/dist-packages/pkg/mysql.py#!/usr/bin/python2.7def count(): return 3306root@apt:~#In [1]: var = &apos;pkg.mysql&apos;In [2]: mode = __import__(var)In [3]: mode.mysql.count()Out[3]: 3306In [4]: func = &apos;count&apos;In [5]: Func = getattr(mode.mysql, func)In [6]: Func()Out[6]: 3306 模块osMore info 详情 模块sys利用sys模块模拟#滚动条12345678import sys,timeIn [111]: for i in range(50): .....: sys.stdout.write(&quot;\\033[32;1m#\\033[0m&quot;) .....: sys.stdout.flush() .....: time.sleep(0.05) .....: ################################################## time模块random模块博客参考 几个有用的方法1234import randomprint(random.randint(1,10)) # 取1-9print(random.randrange(1,20,2)) # 步长为2，意味着取奇数print(random.sample([1,2,3,4,5,6,7,8],3)) # 取一个3个元素的列表[3, 6, 1] 生成随机码(一)123456789checkcode = &apos;&apos;for i in range(4): current=random.randrange(0,4) if current != i: tmp = chr(random.randint(65,90)) else: tmp = random.randint(0,9) checkcode += str(tmp)print(checkcode) 生成随机码(二)1234import string# print(string.ascii_uppercase + string.ascii_lowercase+string.digits)source = string.ascii_uppercase + string.ascii_lowercase+string.digitsprint(&quot;&quot;.join(random.sample(source,4))) pickle模块pickle只是python支持，那么可以序列化python内所有数据类型 在程序运行的过程中，所有的变量都是在内存中,过程中可能改变变量，程序结束，内存变量回收。此时如果没有把修改过的变量存到磁盘上，下次程序运行又是最初的变量，怎么解决这个问题，序列化就派上用场了。 序列化： 把内存中的变量变成可存储可传输的过程称为序列化，pickling反序列化：把变量从序列化对象重新读入内存称为反序列化，unpickling pickle.dump() 序列化入文件pickle.dumps() 序列化为字符串，可赋值pickle.load() 从文件加载pickle.loads() 从字符串加载 1234567891011In [27]: import pickleIn [29]: my_listOut[29]: [0, 2, 4, 6, 8, 10]In [30]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;wb&apos;) # 打开一个文件In [31]: pickle.dump(my_list, pickle_file) # 序列化入这个文件In [32]: pickle_file.close()In [33]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;rb&apos;) # 打开文件In [34]: pickle.load(pickle_file) # 从一个文件加载回来Out[34]: [0, 2, 4, 6, 8, 10] 12345678910111213In [36]: import pickleIn [37]: list1 = [&apos;wxq&apos;, 11, 22,&apos;good&apos;]In [38]: dumpsed = pickle.dumps(list1)In [39]: type(dumpsed)Out[39]: builtins.bytesIn [40]: loadsed = pickle.loads(dumpsed)In [41]: loadsedOut[41]: [&apos;wxq&apos;, 11, 22, &apos;good&apos;]In [42]: type(loadsed)Out[42]: builtins.list json模块json是各语言通用的序列化数据交换格式，只支持序列化数据类型：str int float set dict list tuple JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输，并且可以直接在Web页面中读取，这也是为什么json这么通用的原因。 1234567891011121314import json# d=&#123;&quot;user&quot;:&quot;wxq&quot;&#125;## json_s=(json.dumps(d)) # 这里d是什么不管，json.dumps后是把d 序列化为符合json标准(只支持双引号)的字符串# json.loads(json_s) # json_s必须符合json双引号标准才能反序列化## json.loads(&quot;&#123;&apos;user&apos;:&apos;wxq&apos;&#125;&quot;) # 这里虽然是字符串，但里面是单引号，不符合json标准，会报错的json_s=json.dumps(&#123;&apos;user&apos;:&apos;wxq&apos;&#125;)# 可以看到这里传入的不是标准的(双引号)，但json_dumps后成为字符串&#123;&quot;user&quot;: &quot;wxq&quot;&#125;，是符合json标准(只支持双引号)的字符串。in javascriptJSON.stringfy() # 序列化JSON.parse() # 反序列化 logging模块python的logging模块提供了标准的日志接口，我们来看一下简单用法123456789101112root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;)root@apt:/tmp# python3 log.py WARNING:root:warning messageERROR:root:error message 上面的日志是直接输出，怎么才能让应用程序日志写入文件呢？ 也很简单定义一个log.py的文件12345678910111213root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50log_file = &apos;example.log&apos;logging.basicConfig(filename=log_file,level=logging.INFO)logging.debug(&apos;program debug message ...&apos;)logging.info(&apos;info message&apos;)logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;) 运行一下log.py文件12345root@apt:/tmp# python3 log.pyroot@apt:/tmp# cat example.log INFO:root:info messageWARNING:root:warning messageERROR:root:error message 我们注意到logging.debug信息并没有写入，为什么呢？因为level=logging.INFO定义要写入日志的日志级别，只有达到定义的日志级别才会记录。 但是发现记录的日志太丑了，怎么样才能让打印的日志人性化呢，就需要格式化输出。 格式 说明 %(name)s Logger的名字 %(levelno)s 数字形式的日志级别 %(levelname)s 文本形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名 %(funcName)s 调用日志输出函数的函数名 %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示 %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数 %(asctime)s 字符串形式的当前时间。默认格式是 “2017-02-01 16:49:45,896”。逗号后面的是毫秒 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 %(message)s 用户输出的消息 如果想同时把log打印在屏幕和文件日志里，或者有日志切割的需求，可能要复杂些 logger提供了应用程序可以直接使用的接口； handler将(logger创建的)日志记录发什么方式输出，是屏幕还是文件，或二都都要； filter提供了细度过滤来决定哪些日志不要输出，如密码敏感信息； formatter决定日志记录的最终输出格式。 logger工作原理图 屏幕和文件都输出123456789101112131415161718192021222324252627282930import logging #create loggerlogger = logging.getLogger(&apos;TEST-LOG&apos;)logger.setLevel(logging.DEBUG) # create console handler and set level to debugsh = logging.StreamHandler()sh.setLevel(logging.DEBUG)# create file handler and set level to warningfh = logging.FileHandler(&quot;access.log&quot;)fh.setLevel(logging.WARNING)# create formatterformatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)# add formatter to sh and fhsh.setFormatter(formatter)fh.setFormatter(formatter)# add ch and fh to loggerlogger.addHandler(sh)logger.addHandler(fh)# &apos;application&apos; codelogger.debug(&apos;debug message&apos;)logger.info(&apos;info message&apos;)logger.warn(&apos;warn message&apos;)logger.error(&apos;error message&apos;)logger.critical(&apos;critical message&apos;) 日志切割handlers.RotatingFileHandler：按文件大小切割handlers.TimedRotatingFileHandler： 按时间切割 示例1：1大小切割略 示例2：12345678910111213141516import loggingfrom logging import handlerlogger = logging.getLogger(__name__)log_file = &quot;timelog.log&quot;#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3)fh = handlers.TimedRotatingFileHandler(filename=log_file,when=&quot;S&quot;,interval=5,backupCount=3)formatter = logging.Formatter(&apos;%(asctime)s %(module)s:%(lineno)d %(message)s&apos;)fh.setFormatter(formatter)logger.addHandler(fh)logger.warning(&quot;test1&quot;)logger.warning(&quot;test12&quot;)logger.warning(&quot;test13&quot;)logger.warning(&quot;test14&quot;) 模块paramiko123456789`pycrypto-2.6.1.tar.gz`# 下载安装apt-get install python-devpython setup.py buildpython setup.py installimport Crypto`paramiko-1.10.1.tar.gz` 下载安装python setup.py buildpython setup.py installimport paramiko 模块configparser生成如下example.ini 文件，该如何做呢12345678910111213root@ubuntu:~# cat example.ini[DEFAULT]compression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes[bitbucket.org]user = wxq[topsecret.server.com]host port = 5000forwardx11 = no 编写如下脚本执行 python3 create_example.py即可 12345678910111213141516171819root@ubuntu:~# cat create_example.py #!/usr/bin/env python3#import configparserconfig = configparser.ConfigParser()config[&quot;DEFAULT&quot;] = &#123;&apos;ServerAliveInterval&apos;: &apos;45&apos;, &apos;Compression&apos;: &apos;yes&apos;, &apos;CompressionLevel&apos;: &apos;9&apos;&#125;config[&apos;bitbucket.org&apos;] = &#123;&#125;config[&apos;bitbucket.org&apos;][&apos;User&apos;] = &apos;wxq&apos;config[&apos;topsecret.server.com&apos;] = &#123;&#125;topsecret = config[&apos;topsecret.server.com&apos;]topsecret[&apos;Host Port&apos;] = &apos;5000&apos; # mutates the parsertopsecret[&apos;Forwardx11&apos;] = &apos;no&apos; # same hereconfig[&apos;DEFAULT&apos;][&apos;Forwardx11&apos;] = &apos;yes&apos;with open(&apos;example.ini&apos;, &apos;w&apos;) as configfile: config.write(configfile) 那么有了example.ini 这样的文件，如何读取呢12345678910111213141516171819202122&gt;&gt;&gt; import configparser # 导入模块&gt;&gt;&gt; config = configparser.ConfigParser() # 类实例化&gt;&gt;&gt; config.sections() # 调用类中一个方法[]&gt;&gt;&gt; config.read(&apos;example.ini&apos;) # 文件读入[&apos;example.ini&apos;]&gt;&gt;&gt; config.sections() # 除了[DEFAULT]还有哪些区块，列表呈现[&apos;bitbucket.org&apos;, &apos;topsecret.server.com&apos;]&gt;&gt;&gt; &apos;bitbucket.org&apos; in configTrue&gt;&gt;&gt; config[&apos;bitbucket.org&apos;][&apos;user&apos;] # 指定区块指定字典键对应值&apos;wxq&apos;&gt;&gt;&gt; config[&apos;DEFAULT&apos;][&apos;compression&apos;]&apos;yes&apos;&gt;&gt;&gt; for i in config[&apos;bitbucket.org&apos;]: # 指定区块打印键... print(i) # 注意：包括[DEFAULT]区块的键也在这里呈现... usercompressionserveraliveintervalcompressionlevelforwardx11 123456789&gt;&gt;&gt; d1 = config[&apos;bitbucket.org&apos;] # 指定区块读出其实是一个字典&gt;&gt;&gt; for k,v in d1.items():... print(&quot;%s = %s&quot; % (k,v))... user = wxqcompression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes 12345678910111213141516171819202122232425root@ubuntu:~# cat wxq.txt # 有这么一个文件[section1]k1 = v1k2: v2[section2]k1 = v111&gt;&gt;&gt; import configparser&gt;&gt;&gt; config = configparser.ConfigParser()&gt;&gt;&gt; config.read(&apos;/root/wxq.txt&apos;) # 读入这样的文件[&apos;/root/wxq.txt&apos;]&gt;&gt;&gt; config.sections() # 查看这个文件的区块[&apos;section1&apos;, &apos;section2&apos;]&gt;&gt;&gt; config.items(&apos;section1&apos;) # 查看指定区块的键值对[(&apos;k1&apos;, &apos;v1&apos;), (&apos;k2&apos;, &apos;v2&apos;)]&gt;&gt;&gt; config.options(&apos;section1&apos;) ＃ 只显示指定区块的键[&apos;k1&apos;, &apos;k2&apos;]&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 判断某区块是否存在返回True/FalseFalse&gt;&gt;&gt; config.add_section(&apos;section3&apos;) # 添加一个区块&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 有了这个区块True&gt;&gt;&gt; config.set(&apos;section3&apos;, &apos;k1&apos;, &apos;v1&apos;) ＃ 添加一行配置，也就是设置一个区块的键值对&gt;&gt;&gt; config.write(open(&apos;wxq&apos;, &apos;w&apos;)) 12345678910root@ubuntu:~# cat wxq # 按照上面的写入会生成了一个新文件[section1]k1 = v1k2 = v2[section2]k1 = v111[section3]k1 = v1 123456&gt;&gt;&gt; config.remove_option(&apos;section3&apos;, &apos;k1&apos;) # 删除某键值对True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;))&gt;&gt;&gt; config.remove_section(&apos;section3&apos;) # 删除某区块True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;)) 模块MySQLdbpython连接数据库操作 建立数据库连接 创建游标cursor(用于发送sql语句，获取sql结果，解析返回结果) 关闭游标cursor curname.close() 关闭数据库连接 conname.close() 模块安装apt-get install python-mysqldb查看模块help(‘modules’)加载数据库模块import MySQLdb as mysql 创建连接，会生成一个con.cursor()的类con = mysql.connect(host=’127.0.0.1’,user=’root’,passwd=’dbpass’) 游标类实例化cur = con.cursor() cur.execute 传入一个参数执行sql语句cur.executemany 传入多个参数执行sql语句 cur.fetchall 查询执行后的结果返回所有cur.fetchmany查询执行后的结果返回多个cur.fetchone 查询执行后的结果返回一个游标回滚help(cur.scroll)scroll(self, value, mode=’relative’) cur.scroll(0,mode=’absolute’) hashlib模块用于加密相关操作，3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法123456789import hashlibstr = hashlib.sha1(b&apos;admin123&apos;) # python3中必须bytes格式str.hexdigest()&apos;f865b53623b121fd34ee5426c792e5c33af8c227&apos;str = hashlib.md5(b&apos;admin123&apos;)str.hexdigest()&apos;0192023a7bbd73250516f069df18b500&apos; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import hashlib m = hashlib.md5()m.update(b&quot;Hello&quot;)m.update(b&quot;It&apos;s me&quot;)print(m.digest())m.update(b&quot;It&apos;s been a long time since last time we ...&quot;) print(m.digest()) #2进制格式hashprint(len(m.hexdigest())) #16进制格式hash&apos;&apos;&apos;def digest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of binary data. &quot;&quot;&quot; pass def hexdigest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of hexadecimal digits. &quot;&quot;&quot; pass &apos;&apos;&apos;import hashlib# ######## md5 ########hash = hashlib.md5()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha1 ########hash = hashlib.sha1()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha256 ########hash = hashlib.sha256()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha384 ########hash = hashlib.sha384()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha512 ########hash = hashlib.sha512()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密1234import hmach = hmac.new(b&apos;wxq&apos;)h.update(b&apos;hi&apos;)print(h.hexdigest()) 来个实用例子：注意：bytes只接收ascii的值，字符串为unicode,需转为ascii样的值，比如utf-8 1234567891011121314151617root@wxq:~# cat md5.py #!/usr/bin/env python3import hashlibimport timedef create_md5(): m = hashlib.md5() m.update(bytes(str(time.time()),encoding=&apos;utf-8&apos;)) return m.hexdigest()res = create_md5()print(res)root@wxq:~# python3 md5.py ebd8a4dd680e2e29b1a44b27b2bdd2f7root@wxq:~# python3 md5.py 4e178ffe5eaa58584434d3b519708638 更多关于md5,sha1,sha256等介绍的文章.看这里 模块uuid直接来个例子：12345678910root@wxq:~# cat create_uuid.py #!/usr/bin/env python3import uuiddef create_uuid(): return (str(uuid.uuid1()))res = create_uuid()print(res)root@wxq:~# python3 create_uuid.py 2cad772c-fe7d-11e6-b3db-3a71234db8d2 模块md512345678910111213#password=form.cleaned_data[&apos;password&apos;]from utils import md5form.cleaned_data[&apos;password&apos;]=md5(form.cleaned_data[&apos;password&apos;])app01/utils/md.pyimport hashlibdef md5(text): m = hashlib.md5() m.update(text.encode(&apos;utf-8&apos;)) # python3接收bytes格式，encode后就是bytes return m.hexdigest()if __name__ == &apos;__main__&apos;: text=&apos;123&apos; return md5(text) update可以执行多次，效果一样123m.update(b&quot;hello &quot;)m.update(b&quot;world&quot;)等同于m.update(b&quot;hello world&quot;) 模块模块模块","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-01-列表解析_生成器_迭代器","slug":"python-05-01-列表解析-生成器-迭代器","date":"2017-02-18T02:53:38.000Z","updated":"2018-02-06T05:22:07.452Z","comments":true,"path":"2017/02/18/python-05-01-列表解析-生成器-迭代器/","link":"","permalink":"http://www.digmyth.com/2017/02/18/python-05-01-列表解析-生成器-迭代器/","excerpt":"","text":"目录 列表解析 生成器 迭代器 列表解析什么是列表解析？定义： 基于一个列表生成另外一个列表，或动态生成一个列表。如：12345In [26]: [ i ** 2 for i in range(2,8)] # 对原列表乘以2Out[26]: [4, 9, 16, 25, 36, 49]In [25]: [ i for i in range(1,10) if i % 2 ] # 对原列表取奇数Out[25]: [1, 3, 5, 7, 9] 练习1： 有如下文件123# cat word.txtrender practice inventory indent accelerate,trigger status,wxq. 我们计算word.txt单词个数1234567891011In [29]: f = open(&apos;/root/word.txt&apos;, &apos;r&apos;)In [31]: word_list = [ word for line in f for word in line.split() ]In [36]: print(word_list)[&apos;render&apos;, &apos;practice&apos;, &apos;inventory&apos;, &apos;indent&apos;, &apos;accelerate,&apos;, &apos;trigger&apos;, &apos;status,wxq.&apos;]In [37]: f.seek(0) # 上面读取过文件，指针己然在最后了，这里是把指针移到文件首部Out[37]: 0In [38]: len([ word for line in f for word in line.split() ]) # 计算结果为7Out[38]: 7 我们计算word.txt非空白字符数12345In [37]: f.seek(0) # 把指针移到文件首部Out[37]: 0In [41]: sum([ len(word) for line in f for word in line.split() ])Out[41]: 58 练习2： 打印一个3行5列的矩阵123In [45]: list1 = [ (x+1, y+1) for x in range(3) for y in range(5) ]In [47]: print(list1)[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)] 练习3：123&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()][&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;] 练习4：1234In [61]: L = [&apos;I&apos;, &apos;WILL&apos;, &apos;STUDY&apos;, &apos;HARD&apos;, &apos;PYTHON&apos;]In [62]: [ s.capitalize() for s in L ]Out[62]: [&apos;I&apos;, &apos;Will&apos;, &apos;Study&apos;, &apos;Hard&apos;, &apos;Python&apos;] 生成器列表解析会创建完整列表占用内存，那么有没有一种算法或机制让我们循环使用时推算出后续元素，这样节省了内存空间。定义：这种边循环边计算的机制，称为生成器generator 创建一个生成器，其中一个方法就是把前面的列表解析[] 换成()123456789101112131415161718192021222324In [107]: g = (i for i in range(4))In [108]: gOut[108]: &lt;generator object &lt;genexpr&gt; at 0x7f98a27ba150&gt;In [117]: g.send(None) Out[117]: 0In [118]: g.send(None)Out[118]: 1In [119]: next(g)Out[119]: 2In [120]: next(g)Out[120]: 3In [122]: next(g)---------------------------------------------------------------------------StopIteration Traceback (most recent call last)&lt;ipython-input-122-5f315c5de15b&gt; in &lt;module&gt;()----&gt; 1 next(g)StopIteration: 利用yield创建一个生成器，取出完整元素需要用for 循环来迭代1234567891011In [123]: def genNum(x): .....: i = 0 .....: while i &lt; x: .....: yield i .....: i += 1 In [124]: g = genNum(5)In [136]: for i in g: .....: print(i, end=&apos; &apos;) .....: 0 1 2 3 4 来看一下yield工作细节1234567891011121314151617In [138]: def consumer(): .....: print(&quot;yield starting&quot;) .....: m = yield 5 .....: print(&quot;m_values: %s&quot; % m) .....: n = yield 12 .....: print(&quot;Game over&quot;) .....: In [139]: c = consumer()In [140]: c.send(None)yield startingOut[140]: 5In [141]: c.send(&apos;to be brave&apos;)m_values: to be braveOut[141]: 12 小结: c.send(None)遇到第一个yield停止，在解释器中out yield中的值，在python yield.py却不会. c.send(‘to be brave’)会上次中止处继续，’to be brave’会赋值给yield 5,即m = ‘to be brave’, 遇到第二个yield停止. g.send(None)启动迭代器，遇到第一个yield返回.1234567891011121314151617root@apt:~/script_study# cat yield.py #!/usr/bin/env python3#def h(): print(&quot;yield starting&quot;) m = yield 5 print(&quot;m_values: %s&quot; % m) d = yield 12 print(&apos;Game over&apos;) c = h()# print test infoc.send(None)c.send(&apos;Fighting!&apos;)root@apt:~/script_study# python3 yield.py yield startingm_values: Fighting! 后面协程正是用的这个知识点。 迭代器细心的朋友不难发现生成器可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值为止。 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator 可以直接作用于for循环的对象统称为可迭代对象：Iterable 哪些是可迭代对象呢？或说可作用于for循环呢？有以下几种数据类型： 一类是集合数据类型，如list、tuple、dict、set、str等； 一类是generator，包括生成器和带yield的generator function。 可以使用isinstance()判断一个对象是否是Iterable对象：1234567891011&gt;&gt;&gt; from collections import Iterable&gt;&gt;&gt; isinstance([], Iterable)True&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)True&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable)True&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)True&gt;&gt;&gt; isinstance(100, Iterable)False 可以使用isinstance()判断一个对象是否是Iterator对象：123456789&gt;&gt;&gt; from collections import Iterator&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)True&gt;&gt;&gt; isinstance([], Iterator)False&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)False&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterator)False 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。 把list、dict、str等Iterable变成Iterator可以使用iter()函数：1234&gt;&gt;&gt; isinstance(iter([]), Iterator)True&gt;&gt;&gt; isinstance(iter(&apos;abc&apos;), Iterator)True 为什么list、dict、str等数据类型不是Iterator 呢？ 这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。 Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。 Python的for循环本质上就是通过不断调用next()函数实现的，例如： for x in [1, 2, 3, 4, 5]: pass实际上完全等价于：12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break 总结1234567凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。迭代器：能够作用于next()函数，不断向后返回值，称为迭代器 iter([1,2,3,4])生成器：yield返回，并且可以next(),是一种特殊的迭代器可迭代对象：一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个类的对象就是可迭代对象，可for循环","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-01-开发入门","slug":"web-01-开发入门","date":"2017-02-15T12:51:41.000Z","updated":"2018-01-18T03:54:37.780Z","comments":true,"path":"2017/02/15/web-01-开发入门/","link":"","permalink":"http://www.digmyth.com/2017/02/15/web-01-开发入门/","excerpt":"","text":"前言从现在开始，此时此刻写点web开发和Django 的知识，便于以后查阅学习。廖雪峰老师的博客写得特别好，我也是摘抄参考其内容。廖雪峰老师博客原文 一. HTTP协议简介web历程web开发经历几个阶段1 静态页面: 直接由编辑器生成静态html2 CGI: 交互与动态数据处理出现了CGI（common gateway interface）,由C/C++编写3 脚本语言（ASP/JSP/PHP）: 脚本语言开发效率高，与html结合紧密4 框架：mvc mtv mvvm HTTP协议服务器把网页传给浏览器，实际上就是把网页的html代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议就是HTTP HTML是一种用来定义网页的文本，会HTML就会编写网页http是在网络上传输html的协议，用于浏览器和服务器的通信 Elements显示网页的结构，Network显示浏览器和服务器的通信。我们点Network，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信。 GET / HTTP/1.1： 注：1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐 当浏览器读取到新浪首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给新浪服务器，拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出一个完整的页面。所以我们在Network下面能看到很多额外的HTTP请求。 HTTP请求流程步骤1：浏览器向服务器发送http请求 方法：GET仅请求资源 POST 会附带用户数据body部份 路径; /full/url/path 域名： 步骤2：服务器向浏览器返回HTTP响应 响应代码：200表示成功 3** 表示重定向 4** 表示客户端发送的请求有错误 5** 表示服务器处理错误 响应类型： 由Content-Type指定 通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中 步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2 Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP请求中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源 HTTP协议同时具备极强的扩展性，虽然浏览器请求的是http://www.sina.com.cn/的首页，但是新浪在HTML中可以链入其他服务器的资源，比如&lt;img src=&quot;#url&quot;/&gt;，从而将请求压力分散到各个服务器上，并且一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称WWW。 二. HTML简介HTML是一种用来定义网页的文本，会HTML就会编写网页 。其它前端知识不在这里展开。略。。。 三 . WSGI接口了解了HTTP协议和HTML文档，我们其实就明白了一个Web应用的本质就是：浏览器发送一个HTTP请求；服务器收到请求，生成一个HTML文档；服务器把HTML文档作为HTTP响应的Body发送给浏览器；浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。 所以，最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。 如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。 正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。 这个接口就是WSGI：Web Server Gateway Interface。 WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”：123def application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 上面的application()函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数： environ：一个包含所有HTTP请求信息的dict对象；start_response：一个发送HTTP响应的函数。 在application()函数中，调用：start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])就发送了HTTP响应的Header，注意Header只能发送一次，也就是只能调用一次start_response()函数。start_response()函数接收两个参数，一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示。 通常情况下，都应该把Content-Type头发送给浏览器。其他很多常用的HTTP Header也应该发送。然后，函数的返回值b&#39;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#39;将作为HTTP响应的Body发送给浏览器。 有了WSGI，我们关心的就是如何从environ这个dict对象拿到HTTP请求信息，然后构造HTML，通过start_response()发送Header，最后返回Body。 整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，底层代码不需要我们自己编写，我们只负责在更高层次上考虑如何响应请求就可以了。 不过，等等，这个application()函数怎么调用？如果我们自己调用，两个参数environ和start_response我们没法提供，返回的bytes也没法发给浏览器。 所以application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器，我们可以挑选一个来用。但是现在，我们只想尽快测试一下我们编写的application()函数真的可以把HTML输出到浏览器，所以，要赶紧找一个最简单的WSGI服务器，把我们的Web应用程序跑起来。 好消息是Python内置了一个WSGI服务器，这个模块叫wsgiref，它是用纯Python编写的WSGI服务器的参考实现。所谓“参考实现”是指该实现完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用。 运行WSGI服务我们先编写hello.py，实现Web应用程序的WSGI处理函数：12345# hello.pydef application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 然后，再编写一个server.py，负责启动WSGI服务器，加载application()函数：12345678910111213# server.py# 从wsgiref模块导入:from wsgiref.simple_server import make_server# 导入我们自己编写的application函数:from hello import application# 创建一个服务器，IP地址为空，端口是8000，处理函数是application:httpd = make_server(&apos;&apos;, 8000, application)print(&apos;Serving HTTP on port 8000...&apos;)# 开始监听HTTP请求:httpd.serve_forever()确保以上两个文件在同一个目录下，然后在命令行输入python server.py来启动WSGI服务器：python server.py 执行程序启动 四 web 框架了解了WSGI框架，我们发现：其实一个Web App，就是写一个WSGI的处理函数，针对每个HTTP请求进行响应。 但是如何处理HTTP请求不是问题，问题是如何处理100个不同的URL。方法是一个函数处理一个URL, 我们专注于写业务处理函数，URL和函数对应关系交给web框架完成，这就是 web框架其中一个价值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-04-01-装饰器","slug":"python-04-01-装饰器","date":"2017-02-04T10:08:26.000Z","updated":"2017-03-01T12:12:35.805Z","comments":true,"path":"2017/02/04/python-04-01-装饰器/","link":"","permalink":"http://www.digmyth.com/2017/02/04/python-04-01-装饰器/","excerpt":"","text":"目录 装饰器 Python装饰器，英文decorator, 以被装饰函数作为参数对其装饰。这里会用到函数，我们可以像使用变量一样使用函数，函数有对象一致特性。 函数可以被赋值给其它变量 函数可以内部再定义函数 函数可以作为参数传递给另外一个函数 函数可以直接返回给外层函数 简单函数进行装饰有这么一个函数12def hello(): return &apos;hello world&apos; 我们想在不修改原函数的情况下，让函数返回特定标签1234def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper 我们定义了一个函数maketag(),该函数有一个参数func,这个参数必须是一个函数，内部又定义了一个wrapper()函数，并直接返回给maketag()123&gt;&gt;&gt; hello = maketag(hello) # 将 hello 函数传给 maketag&gt;&gt;&gt; hello()&apos;&lt;h&gt;hello world&lt;/h&gt;&apos; 上面我们把最初hello函数传给maketag()函数并将返回赋值给变量hello,此时调用hello得到我们想要的结果。注意： maketag()返回赋值给hello,hello函数本身还存在，但函数名引用己经变为了maketag返回函数的名称wrapper,不在是原来的hello,验证一下1234567In [6]: a = maketag(hello)In [8]: a.__name__Out[8]: &apos;wrapper&apos;In [9]: hello = maketag(hello)In [10]: hello.__name__Out[10]: &apos;wrapper&apos; 总结一下：为了增强原函数hello的功能定义了一个maketag函数，它接收一个函数作为参数，maketag返回一个新的函数赋值给一个变量hello,然后hello可直接调用。 一般情况下，我们使用装饰器提供的 @ 语法糖（Syntactic Sugar）来简化上面的写法：12345678def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 像上面的情况，可以动态修改函数（或类）功能的函数就是装饰器。本质上，它是一个高阶函数，以被装饰的函数（比如上面的 hello）为参数，并返回一个包装后的函数（比如上面的 wrapper）给被装饰函数（hello）。 单/多个装饰器的使用形式装饰器的一般使用形式如下：12345678@decoratordef func(): pass等价于下面的形式：def func(): passfunc = decorator(func) 装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如：12345678910@decorator_one@decorator_twodef func(): pass等价于：def func(): passfunc = decorator_one(decorator_two(func)) 看下多个装饰器的例子，为了简单起见，下面的例子就不使用带参数的装饰器。1234567891011121314def maketag1(func): def wrapper(): return &apos;&lt;html&gt;&apos; + func() + &apos;&lt;/html&gt;&apos; return wrapper def maketag2(func): def wrapper(): return &apos;&lt;i&gt;&apos; + func() + &apos;&lt;/i&gt;&apos; return wrapper@maketag1@maketag2def hello(): return &apos;hello world&apos; 上面定义了两个装饰器，对 hello 进行装饰，上面的最后几行代码相当于：12345678def hello(): return &apos;hello world&apos; hello = maketag1(maketag2(hello))调用函数 hello：&gt;&gt;&gt; hello() &apos;&lt;html&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/html&gt;&apos; 似乎理解深刻了：当多个装饰器时，离函数定义最近的装饰器先被调用 对带参数的函数进行装饰让被装饰函数带有参数，对前面例子中的 hello() 函数进行改写使其带参数，如下： 12345678910111213def maketag(func): def wrapper(*args, **kwargs): res = func(*args, **kwargs) return &apos;&lt;h&gt;&apos; + res + &apos;&lt;/h&gt;&apos; return wrapper@maketagdef hello(name): return &apos;hello %s&apos; % name @maketagdef hello2(name1=&apos;user1&apos;, name2=&apos;user2&apos;): return &apos;hello %s, %s&apos; % (name1, name2) 由于函数 hello 带参数，因此内嵌包装函数 wrapper 也做了一点改变： 内嵌包装函数的参数传给了 func，即被装饰函数，也就是说内嵌包装函数的参数跟被装饰函数的参数对应，这里使用了 (*args, **kwargs)，是为了适应可变参数。看看使用：1234&gt;&gt;&gt; hello1(&apos;python&apos;)&apos;&lt;h&gt;hello python&lt;/h&gt;&apos;&gt;&gt;&gt; hello2(&apos;python&apos;, &apos;java&apos;)&apos;&lt;h&gt;hello python, java&lt;/h&gt;&apos; 带参数的装饰器装饰器还可以带参数，比如：123456789@decorator(args1, args2)def func(): pass等价于：def func(): passfunc = decorator(args1, args2)(func) 我们想改用标签 &lt;html&gt;...&lt;/html&gt; 是不是要再定义一个装饰器呢？不必，其实我们可以装饰器外层再定义一个函数，将标签作为参数，返回一个装饰器，比如：12345678def outer_decorator(tag): # 外层函数参数传给装饰器 def decorator(func): # 真正的装饰器参数必然是被装饰器函数func def wrapper(*args, **kwargs): # 装饰器内层函数的参数是func的参数 res = func(*args, **kwargs) # 被装饰函数正常调用# return &apos;&lt;&apos; + tag + &apos;&gt;&apos; + res + &apos;&lt;/&apos; + tag + &apos;&gt;&apos; return &apos;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&apos;.format(tag=tag, res=res) return wrapper # 内层函数作返回值返回给装饰器 return decorator # 装饰器本身作为返回值返回给最外层函数 现在，我们可以根据需要生成想要的装饰器了：1234567outer_decorator = outer_decorator(&apos;html&apos;)@outer_decoratordef hello(name): return &apos;hello %s&apos; % name &gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 上面的形式也可以写得更加简洁：123@outer_decorator(&apos;html&apos;) # @语法糖syntactic sugardef hello(name): return &apos;hello, %s&apos; % name 这就是带参数的装饰器，其实就是在装饰器外面多了一层包装，根据不同的参数返回不同的装饰器。 基于类的装饰器前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子：12345678910111213class Deco_C(object): def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): return &apos;&lt;html&gt;&apos; + self.func(*args, **kwargs) + &apos;&lt;/html&gt;&apos;@Deco_Cdef hello(name): return &apos;hello %s&apos; % name&gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 可以看到，类 Deco_C 有两个方法： __init__()：它接收一个函数作为参数，也就是被装饰的函数__call__()：让类对象可调用，就像函数调用一样，在调用被装饰函数时被调用还可以让类装饰器带参数： 123456789101112131415class Tag(object): def __init__(self, tag): self.tag = tag def __call__(self, func): def wrapper(*args, **kwargs): return &quot;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&quot;.format(res=func(*args, **kwargs), tag=self.tag) return wrapper@Tag(&apos;html&apos;)def hello(name): return &apos;hello %s&apos; % name&gt;&gt; hello(&apos;, welcome&apos;)&apos;&lt;html&gt;hello, welcome&lt;/html&gt;&apos; 需要注意的是，如果类装饰器有参数，则 init 接收此参数，而 call 接收 func函数，并多了一层wrapper(*args, **kwargs)来接收func函数的参数。 装饰器的副作用前面提到装饰器有一个瑕疵，就是被装饰函数的函数名称已经不是原来的名称了，回到最开始的例子：12345678def maketagc(func): def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 函数 hello 被 maketag 装饰后，它的函数名称已经改变了：12&gt;&gt;&gt; hello.__name__&apos;wrapper&apos; 为了消除这样的副作用，Python 中的 functool 包提供了一个 wraps 的装饰器：1234567891011121314from functools import wrapsdef maketag(func): @wraps(func) # 加上 wraps 装饰器 def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos;&gt;&gt;&gt; hello.__name__&apos;hello&apos; 小结:本质上，装饰器就是一个有返回函数的高阶函数。装饰器可以动态地修改一个类或函数的功能，通过在原有的类或者函数上包裹一层修饰类或修饰函数实现。事实上，装饰器就是闭包的一种应用，但它比较特别，以被装饰函数为参数，并返回一个函数，赋给被装饰函数，闭包则没这种限制。 装饰器生产化进阶eg1:1234567891011121314def deco(func): def wrapper(x): print(&quot;what ...&quot;) func(x) print(&apos;Game over ...&apos;) return wrapper@decodef show(x): print(x)&gt;&gt;&gt;show(&quot;I am a pythoner&quot;)what ...I am a pythonerGame over ... eg2:","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Mysql 基础篇","slug":"mysql-基础篇","date":"2017-01-29T01:41:54.000Z","updated":"2017-11-19T10:00:09.447Z","comments":true,"path":"2017/01/29/mysql-基础篇/","link":"","permalink":"http://www.digmyth.com/2017/01/29/mysql-基础篇/","excerpt":"","text":"目录 知识扫盲 基础语句 主键、外键 修改表 分组与聚合 连表查询 其它查询 shell终端获取数据 数据库操作无非就是insert`deleteupdateselete,这篇博客对mysql`数据库语句做个总结记录便于学习 知识扫盲 什么是事务： 原子性操作(不可拆分)就是要么全成功，要么全失败。 mysql语句的注释符是 --，在SQL注入或别的场景中语句形如：username=”root” and 1 =1 – and password=’123’很明显 username=&quot;root&quot; and 1 =1将永远成立， and password=’123’ 部份将被注释，这点需要注意。 基础语句基础语句过于简单，这里就简单逻列下。 创建数据库1CREATE DATABASE db1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 创建一张表注意：auto_increment表示自增，primary key 表示id 这列为主键default charset utf8指定默认字符集engine=innodb指定因默认引警 1234create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 插入数据1insert into tb1(name,age) values(&apos;wxq&apos;,20),(&apos;pp&apos;,18); 更改数据1update tb1 set age=25 where name=&apos;wxq&apos;; 删除某条数据1delete from tb1 where id&gt;1; 删除表内所有数据12delete from 表名 # 不会删除自增序列truncate table 表名 # 会删除自增序列，再次插入数据将从0开始，删除更辙底 删除表1drop table tb1 主键12345主键create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 123456组合主键create table tb1( nid int not null, num int not null, primary key(nid,num) ) 外键1constraint fk_任意字符 foreign key (department_id自己字段) references department外面的表(nid外面表的字段) 12345678外键(约束):一对多 create table tb1( id int not null primary key, name char(32) null , age int not null, department_id int not null constraint fk_department_nid foreign key (department_id) references department(nid) ) 双向外键（约束）：多对对创建主机与部门之间的多对多关系12345678910111213141516create table host (id int not null auto_increatement primary key,host char(20) not null );create table department(id int not null auto_increatement primary key,title char(20) not null);create table de_2_host (id int not null auto_increatement primary key,hid int not null,did int not null,constraint fk_hid_host foreign key (hid) references host(id)，constraint fk_did_department foreign key (did) references department(id)) 修改表1234567891011121314151617添加列：alter table 表名 add 列名 类型删除列：alter table 表名 drop column 列名修改列： alter table 表名 modify column 列名 类型; -- 类型 alter table 表名 change 原列名 新列名 类型; -- 列名，类型 添加主键： alter table 表名 add primary key(列名);删除主键： alter table 表名 drop primary key; alter table 表名 modify 列名 int, drop primary key; 添加外键：alter table 从表 add constraint 外键名称（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);删除外键：alter table 表名 drop foreign key 外键名称 修改默认值：ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;删除默认值：ALTER TABLE testalter_tbl ALTER i DROP DEFAULT; 1234show variables like &apos;%char%&apos;; 查看整个mysql字符集show create table migrate_version; 查看表字符集alter table migrate_version character set utf8; 设置表字符集或者如下条：alter table migrate_version default character set utf8 collate utf8_general_ci; 分组与聚合group by - 对列进行聚合 sum(sid),max(sid),min(sid),count(sid) - 聚合条件过滤,having count(sid) &gt; 7 123456789分组 select num from 表 group by num select num,nid from 表 group by num,nid select num,nid from 表 where nid &gt; 10 group by num,nid order nid desc select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid select num from 表 group by num having max(id) &gt; 10 特别的：group by 必须在where之后，order by之前 连表查询示例1234select A.sid,A.sname,B.captionfrom student as A left join class as B on A.class_id = class.cid; left join 表名 on 多出的数据将会出现NULL数据 rigth join 表名 on 相对left 只是表位置变化，其它没有区别 inner join 表名 on 不会出现NULL数据，没有关联的数据将不会显示 1234567891011121314151617181920连表 无对应关系则不显示 select A.num, A.name, B.name from A,B Where A.nid = B.nid 无对应关系则不显示 select A.num, A.name, B.name from A inner join B on A.nid = B.nid A表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A left join B on A.nid = B.nid B表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A right join B on A.nid = B.nid 其它查询12345678910111213141516171819202122232425262728293031323334353637a、条件 select * from 表 where id &gt; 1 and name != &apos;wxq&apos; and num = 12; select * from 表 where id between 5 and 16; select * from 表 where id in (11,22,33) select * from 表 where id not in (11,22,33) select distinct name from 表 where id in (select nid from 表) # distinct重复数所将只显示一条 b、通配符 select * from 表 where name like &apos;wxq%&apos; - wxq开头的所有（多个字符串） select * from 表 where name like &apos;wx_&apos; - wx开头的所有（一个字符） c、限制 select * from 表 limit 5; - 前5行 select * from 表 limit 4,5; - 从第4行开始的5行 select * from 表 limit 5 offset 4 - 从第4行开始的5行 d、排序 select * from 表 order by 列 asc - 根据 “列” 从小到大排列 select * from 表 order by 列 desc - 根据 “列” 从大到小排列 select * from 表 order by 列1 desc,列2 asc - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序 e、组合 组合，自动处理重合 select nickname from A union select name from B 组合，不处理重合 select nickname from A union all select name from B shell终端获取数据下面介绍在shell终端获取mysql的几种方法 用法一：123456[root@mysql ~]# mysql -p123 -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+---------------+-------+| Variable_name | Value |+---------------+-------+| Uptime | 8025 |+---------------+-------+ 用法二：1234[root@mysql ~]# mysql -p123 -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+--------+------+| Uptime | 8029 |+--------+------+ 用法三：12[root@mysql ~]# mysql -p123 -s -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;Uptime 8037 用法四：12[root@mysql ~]# echo &quot;show global status where variable_name=&apos;uptime&apos;;&quot; | mysql -N -p123Uptime 8072 123456789# echo &quot;show databases;&quot; | mysql -h 127.0.0.1 -uroot -A -p123 | tail -n +2 | head -n 2 -A 表示不自动rehash tail -n +2 表示从第二行开始打印 head -n 2表示打印前2行# echo &quot;use nova01 ; show tables;&quot; | mysql -uroot -padmin# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock -e &quot;use nova01;show tables;&quot;# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock \\ -e &quot;grant all on *.* to user1@&apos;localhost&apos; identified by \\&quot;user1\\&quot;;&quot;","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"shell getopts语法","slug":"shell-getopts语法","date":"2017-01-29T01:41:54.000Z","updated":"2018-04-23T06:58:29.638Z","comments":true,"path":"2017/01/29/shell-getopts语法/","link":"","permalink":"http://www.digmyth.com/2017/01/29/shell-getopts语法/","excerpt":"","text":"Linux shell中getopts语法是一个很高级的语法，它能让你写出很漂亮的shell,来看个例子学习下 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu:~# cat getopts.sh #!/bin/bash# a: b: c: 表示脚本运行时接受选项&lt;-a options_1&gt; &lt;-b options_2&gt; &lt;-c options_3&gt;# first: 表示友好， 给出错误选项时尽量少的打印错误信息# OPTARG 表示选项给的值# OPTIND 表示选项指针（下一位）# 比如：(-a 指针为2) (-a a1 -b 指针为4) (-a a1 -b b1 -c c1指针为7)while getopts &quot;:a:b:c:&quot; OPT;docase $OPT in a) echo &quot;a is OPTARG: $OPTARG&quot; echo &quot;a is OPTIND: $OPTIND&quot; ;; b) echo &quot;b is OPTARG: $OPTARG&quot; echo &quot;b is OPTIND: $OPTIND&quot; ;; c) echo &quot;c is OPTARG: $OPTARG&quot; echo &quot;c is OPTIND: $OPTIND&quot; ;; *) echo &quot;Usage: $0 [-a arg1] [-b arg2] [-c arg3]&quot;esacdoneshift $(($OPTIND-1))echo &quot;\\$1 is: $1&quot;root@ubuntu:~# bash getopts.sh -a a1 -b b1 -c c1 test.sha is OPTARG: a1a is OPTIND: 3b is OPTARG: b1b is OPTIND: 5c is OPTARG: c1c is OPTIND: 7$1 is: test.sh","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"python-03-02-函数","slug":"python-03-02-函数","date":"2017-01-23T12:42:06.000Z","updated":"2017-02-20T10:41:23.378Z","comments":true,"path":"2017/01/23/python-03-02-函数/","link":"","permalink":"http://www.digmyth.com/2017/01/23/python-03-02-函数/","excerpt":"","text":"目录 函数概念 普通函数 匿名函数 递归函数 闭包 高阶函数 函数概念什么是函数 函数是python为了代码最大程度地重用和最小化代码冗余而提供的基本程序结构 函数是一种设计工具，它能让程序员将复杂的程序逻辑分解为可管理的部件 函数用于将相关功能打包并参数化，一个函数可以当参数传给变量或另一个函数 python自带有许多内置函数 在python有4种函数表现形式：1234全局函数： 定义在模块中局部函数：嵌套于其它函数中lambda函数：表达式，可以出现在任意表达式可以出现的地方(又称匿名函名)方法：定义在类中与特定数据类型关联的函数，并且只能与数据类型关联一起使用. 函数语法 函数代码表现12def functionName(parameters): 函数主体代码 相关概念def 是一个可执行语句,因此可以出现在任意语句可以出现的地方，甚至可以嵌套于其它if/while语句中def 创建了一个对象并将其赋值给一个变量名，也就是函数名return 用于返回结果对象,其为可选,无return语句时函数自动返回None对象,多个返回值时用逗号分隔，并组合为元组形式返回一个对象def 语句运行之后可以在程序中通过函数后附加括号的形式进行调用 普通函数函数传参内置函数官方 详解More info 动我试试 Built-in Functions abs() dict() help() main() setattr() all() dir() hex() next() slice() any() divmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod() bin() eval() int() open() str() bool() exec() isinstance() ord () sum() bytearray() filter() issubclass() pow() super() bytes() float() iter() print() tuple() callable() format() len() property() type() chr() frozenset() list() range() vars() classmethod() getattr() locals() repr() zip() compile() globals() map() reversed() __import__() complex() hasattr() max() round() delattr() hash() memoryview() set() 拿几个作下说明：123456789101112131415ASCII编码表查询：ord(&apos;a&apos;) 字符在编码表中的数字表示chr(97) 数字在编码表中的字符表示global() 查看全局变量locals() 查看局部变量vars() 无参数时等于locals(), 有参数时vars(a) == a.__dict__ (__dict__一个对象的属性)eval() 把字符串形式的表达式解析并扫行exec() 把字符串形式的代码解析并执行compile()把文件的代码加载进来，按 eval, exec方式解析并执行# 以字符串的形式导入模块, 后面模块章节也会讲到__import__()用法mode = &apos;module_name&apos;__import__(mode) 123456789101112131415161718192021222324all()与any()区别：all:传入一个可迭代对象，对其中每个元素求bool(x),所有返回True,则返回Tru迭代对象为空时返回True，注意是为空如[]，不是空元素如[&apos;&apos;]any:传入一个可迭代对象，对其中每个元素求bool(x),任意一个返回True，则返回True迭代对象为空时，返回Falsedef all(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True. &quot;&quot;&quot; passdef any(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for any x in the iterable. If the iterable is empty, return False. &quot;&quot;&quot; pass 匿名函数123In [31]: f = (lambda x,y,z=10: x+y+z) # 匿名函数也支持默认参数 In [32]: f(4,9)Out[32]: 23 123456In [56]: L = [ (lambda x: x*2),(lambda y: y*3) ] # 匿名函数可以出现在任意表达式可以出现的地方In [56]: for i in L: ....: print(i(4)) ....: 812 递归函数定义： 一个函数的自我循环调用称为递归 阶乘 123456&gt;&gt;&gt; def fact(x):... if x &lt;= 1: return 1... else: return x * fact(x-1)... &gt;&gt;&gt; fact(4)24 汉诺塔汉诺塔： 是一个传说，大概意思就是说把一个柱子上的盘子通过第二根柱子移到第三根柱子上。。未完。。。 123456789101112131415161718192021root@ubuntu:~# cat hanoi.py #!/usr/bin/env python3def move(n, a, b, c): if n == 1: print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) else: move(n-1, a, c, b) print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) move(n-1, b, a, c)n = int(input(&quot;input: &quot;))move(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)root@ubuntu:~# python3 hanoi.py input: 3move A --&gt; Cmove A --&gt; Bmove C --&gt; Bmove A --&gt; Cmove B --&gt; Amove B --&gt; Cmove A --&gt; C 斐波那契数列 123456789101112131415161718root@ubuntu:~# cat fibonacci.py #!/usr/bin/env python3def fibonacci(): a = b = 1 yield a yield b while True: a, b = b, a+b yield bfor num in fibonacci(): if num &gt; 100: break print(num, end=&apos; &apos;)print()root@ubuntu:~# python3 fibonacci.py 1 1 2 3 5 8 13 21 34 55 89 闭包python闭包：lexical closure函数及相关环境所构成的整体, 或者说一个函数(内层函数)和它所处的环境(外层函数)所构成的整体称为python闭包在这种情况下内层函数会记住外层函数的变量，在外层函数返回时内层函数依然可以调用 eg1123456789101112131415In [123]: def f1(x): .....: def f2(y): .....: return y ** x .....: return f2 # 内层函数直接返回 .....: In [124]: f = f1(3) # f1为f2提供运行环境，记住外部变量In [125]: f Out[125]: &lt;function __main__.f1.&lt;locals&gt;.f2&gt;In [126]: f(4)Out[126]: 64In [127]: f(5)Out[127]: 125 以上例子用匿名函数lambda简写成如下12345678In [129]: def f1(x): .....: return lambda y: y ** x .....: In [131]: f = f1(3)In [132]: f(6)Out[132]: 216 高阶函数定义： 一个函数当参数传递给另一个函数，我们就称这样的函数为高阶函数.装饰器/函数闭包: 是有返回函数的高阶函数，是高阶函数的特例 高阶函数 用法说明 map(func,seq1,seq2) 将函数func作用于给定序列(s)的每个元素，并用一个列表来提供返回值，如果func为None,func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组列表 reduce(func, seq, init) 将二元函数作用于seq序列的元素，每次携带一对(先前的结果以及下一个序列无素)，连续地将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为一个单一的返回值，如果初始值init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素 filter(func,seq) 调用一个布尔函数func来迭代遍历每个seq中的元素，返回一个使func返回值为True的元素组成的序列 map()map()将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回 一个序列时1234567In [143]: def f(x): .....: return x ** 2In [144]: res = map(f, [1,2,3,4]) # 根据说明这里返回结果是一个Iterator惰性序列In [145]: list(res) # 惰性序列需要通过list()函数让它把整个序列都计算出来并返回一个listOut[145]: [1, 4, 9, 16] 二个序列时每一次同时依次取一个序列的一个值，两个序列就有2个值，那么用传入的函数作用于这2个值返回一个值,最后这些值再以列表显现。1234567In [140]: def f(x,y): return y ** xIn [141]: res = map(f, [1,2,3], [4,5,6])In [142]: list(res)Out[142]: [4, 25, 216] reduce()python3中reduce函数在functools模块里,用时需要先导入 从初始值开始，对序列折叠123456In [39]: from functools import reduceIn [50]: def add(x,y): ....: return x+y ....: In [52]: reduce(add, [1,2,3], 10) # 10为初始值Out[52]: 16 如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：123456&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])13579 这个例子本身没多大用处，但是考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()就可以写出把str转换为int的函数： 123456789&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; def char2num(s):... return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]...&gt;&gt;&gt; reduce(fn, map(char2num, &apos;13579&apos;))13579 整理成一个str2int的函数就是：12345678from functools import reducedef str2int(s): def fn(x, y): return x * 10 + y def char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s] return reduce(fn, map(char2num, s)) 还可以用lambda函数进一步简化成：1234567from functools import reducedef char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]def str2int(s): return reduce(lambda x, y: x * 10 + y, map(char2num, s)) 也就是说，假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数. filter()Python内建的filter()函数用于过滤序列。filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。 例如，在一个list中，删掉偶数，只保留奇数，可以这么写：12345def is_odd(n): return n % 2 == 1list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))# 结果: [1, 5, 9, 15] 把一个序列中的空字符串删掉，可以这么写：12345def not_empty(s): return s and s.strip()list(filter(not_empty, [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, None, &apos;C&apos;, &apos; &apos;]))# 结果: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;] 可见filter()这个高阶函数，关键在于正确实现一个“筛选”函数, 这个函数必须是一个二元函数，返回True 或 False的函数 注意到filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。 用filter求素数 计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单： 首先，列出从2开始的所有自然数，构造一个序列： 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, … 取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：取新序列的第一个数5，然后用5把序列的5的倍数筛掉：不断筛下去，就可以得到所有的素数。 用Python来实现这个算法，可以先构造一个从3开始的奇数序列：12345def _odd_iter(): n = 1 while True: n = n + 2 yield n 注意这是一个生成器，并且是一个无限序列。 然后定义一个筛选函数：12def _not_divisible(n): return lambda x: x % n != 0 最后，定义一个生成器，不断返回下一个素数：1234567def primes(): yield 2 it = _odd_iter() # 初始序列 while True: n = next(it) # 返回序列的第一个数 yield n it = filter(_not_divisible(n), it) # 构造新序列 这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。 由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：123456# 打印1000以内的素数:for n in primes(): if n &lt; 1000: print(n) else: break 小结： filter()的作用是从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。 sorted()sorted()高阶函数用于排序 sorted()语法12sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order. 先来看一个例子：123456&gt;&gt;&gt; list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]&gt;&gt;&gt; sorted(list1, key=lambda x: x[&apos;age&apos;], reverse=False) [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] 这个例子也可以写成：12345678910In [174]: def f1(x): .....: return x[&quot;age&quot;] .....: In [175]: list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]In [176]: sorted(list1, key=f1)Out[176]: [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] list1这样的迭代对象取出一个值（一个一个的字典）给key函数处理后的结果作为排序依据，而后返回另一个排续后的对象. 列表自身有个sort()方法，和sorted()有什么区别呢？ 来看个例子：123456789101112In [66]: list1Out[66]: [1, 2, 3, 4, 5]In [67]: list1.sort() # sort()方法是在原有列表上排序，这是与sorted()高阶函数的区别In [68]: list1Out[68]: [1, 2, 3, 4, 5]In [69]: list1.sort(reverse=True) # reverse表示逆序In [70]: list1 Out[70]: [5, 4, 3, 2, 1] 区别就是sorted()会生成新的对象，而列表sort()不会，如下是按字母排序的例子：12In [173]: sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], key=str.lower)Out[173]: [&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-03-01-IO","slug":"python-03-01-IO","date":"2017-01-19T18:12:36.000Z","updated":"2017-02-20T10:30:30.882Z","comments":true,"path":"2017/01/20/python-03-01-IO/","link":"","permalink":"http://www.digmyth.com/2017/01/20/python-03-01-IO/","excerpt":"","text":"目录 文件对象 OS 对象 IO 编程文件对象文件对象用于访问系统文件的接口，文件系统是计算机存储数据，组织数据的方式。计算机文件是存储在设备中的一段数据流，归属于文件系统管理之下。是计算机中由OS管理的具有名字的存储区域，对Linux而言，文件可以被看作字节序列。 序列化的对象才能存储的文件系统中，非字节序列化的数据不能存储在文件系统中的。 文件对象接口不仅用于访问普通文件，还可以访问套接字文件，管道文件。在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。 open(name[,mode[,bufsize]]) 返回的是一个文件对象。这里三个参数分别表示文件名，文件打开模式和缓冲区大小 bufsize:定义输出缓存12340 表示无输出缓存,禁用缓冲1 表示使用缓冲，只缓冲一行数据负数表示使用系统默认设置2+之后的正数表示使用指定大小缓冲 open(‘/var/log/message’, ‘r’)简单模式，首次打开的文件指针于文件首部r: 只读w: 新建文件或文件首部覆盖写入。a: 尾部追加，即打开时指针处于文件尾部 在模式后使用+表示同时支输入输出操作r+ w+ a+ 在模式后附加 b 表示二进制方式打开rb wb+ 创建一个文件对象123&gt;&gt; f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [3]: type(f)Out[3]: _io.TextIOWrapper 只读模式打开一个不存在文件是不可以的1234567In [1]: f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)---------------------------------------------------------------------------FileNotFoundError Traceback (most recent call last)&lt;ipython-input-1-07bb2dbd474f&gt; in &lt;module&gt;()----&gt; 1 f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)FileNotFoundError: [Errno 2] No such file or directory: &apos;/tmp/abc&apos; 以写模式打开一个不存在文件，这个文件会自动被创建12345678In [3]: import osIn [7]: os.path.isfile(&apos;/tmp/f1&apos;)Out[7]: FalseIn [8]: f = open(&apos;/tmp/f1&apos;, &apos;w+&apos;)In [9]: os.path.isfile(&apos;/tmp/f1&apos;)Out[9]: True 查看一个文件的描述符，描述符是一个很小的数字表示，0表示标准输入，1表示标准输出，2表示标准错误输出它们所使用的描述符12In [20]: f.fileno()Out[20]: 8 f.readline() 读文件一行数据f.readlines() 读文件指针处至尾部所有数据包括行结束符\\n，一行为一个对象，然后多行多个对象组成一个列表 返回指针在当前文件中的位置，表示在多少个字节的位置。12In [23]: f.tell()Out[23]: 597 f.seek(offset, whence) offset:表示偏移多少个字节，whence表示从 多少节字数开始偏移。下面表示回到文件首部：12In [37]: f.seek(0)Out[37]: 0 f.read() 读取给定字节123456In [44]: f.seek(0)Out[44]: 0In [45]: f.read(10)Out[45]: &apos;# /etc/fst&apos;In [46]: f.tell()Out[46]: 10 12345678910In [57]: f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [58]: f.name #返回文件名Out[58]: &apos;/etc/fstab&apos;In [59]: f.closed #返回是否关闭文件Out[59]: FalseIn [60]: f.close() #关闭文件In [61]: f.closedOut[61]: True 操作完毕会自动关闭文件对象12with open(&apos;/root/wxq.txt&apos;,&apos;w+&apos;) as f: f.write(&apos;hello world!\\n&apos;) OS 对象一些方法123456789101112131415161718192021os.path 跟文件路径相关 basename() 路径基名 dirname() 路径目录名 join() split() 返回dirname(), basename()元组 splitext() 返回(filename, extension_name)元组 信息： getatime() getctime() getmtime() getsize() 获取文件大小查询： exists() 指定文件是否存在 isabs() 指定路径是否为绝对路径 isdir() 是否为目录 isfile() 是否为文件 islink() 是否为符号链接 ismount() 是否为挂载点 samefile() 两个路径是否指向了同一个文件 __file__属性 在上面的glabals()中有一个file属性，其中保存的是程序运行的相对路径，如python3 ../py3_training/test/yy.py，则路径为../py3_training/test/yy.py在pycharm中为什么又变成了绝对路径了呢，不要认为是pycharm做了封装，是因为pycharm运行路径永远从c:\\开始，这样看不出效果 要获取程序绝对路径os.path.abspath(file)应用举例：12345678910import osimport sysbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))print(base_dir)sys.path.append(base_dir)from core import mainif __name__ == &apos;__main__&apos;: main.run() 来几个小练习，似乎参悟了1234567891011121314&gt;&gt;&gt; import os&gt;&gt;&gt; os.path.split(&apos;/root/wxq.txt&apos;)(&apos;/root&apos;, &apos;wxq.txt&apos;)&gt;&gt;&gt; os.path.splitext(&apos;/root/wxq.txt&apos;)(&apos;/root/wxq&apos;, &apos;.txt&apos;)&gt;&gt;&gt; os.path.dirname(&apos;/root/wxq.txt&apos;)&apos;/root&apos;&gt;&gt;&gt; os.path.basename(&apos;/root/wxq.txt&apos;)&apos;wxq.txt&apos;&gt;&gt;&gt; dir, file_name = os.path.split(&apos;/root/wxq.txt&apos;)&gt;&gt;&gt; dir&apos;/root&apos;&gt;&gt;&gt; file_name&apos;wxq.txt&apos;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_02_流程控制/枚举","slug":"python-02-流程控制_枚举","date":"2017-01-15T05:03:41.000Z","updated":"2017-02-22T04:09:53.601Z","comments":true,"path":"2017/01/15/python-02-流程控制_枚举/","link":"","permalink":"http://www.digmyth.com/2017/01/15/python-02-流程控制_枚举/","excerpt":"","text":"目录 流程控制 三元表达式 枚举类 流程控制ifif 玩猜数字游戏123456789101112131415#!/usr/bin/env python3i = 0try_num = 3AGE = 27while i &lt; try_num: enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) i += 1 else: print(&quot;too smaller&quot;) i+=1 if成绩查询12345678910111213141516171819#!/usr/bin/env python3__author__ = &quot;wxq&quot;enter_score = int(input(&quot;enter your score :&quot;).strip())if enter_score &lt;=100 and enter_score &gt;=0: if enter_score &gt;=90: print(&quot;A&quot;) elif enter_score &gt;=80: print(&quot;B&quot;) elif enter_score &gt;=70: print(&quot;C&quot;) elif enter_score &gt;= 60: print(&quot;D&quot;) else: print(&quot;you are too low&quot;)else: print(&quot;invalid score&quot;) while这里主要注意与shell中的区别，python里while后有else, 即while语句正常执行完后才执行else中的语句，否则不会执行。1234567891011i = 0while i &lt;3: if i &gt;=2: break print(i) i += 1else: print(&apos;end&apos;) #结果01 来个小练习12345678910111213count1 = 0while True: if count1 == 10000000: break count1 += 1print(&quot;cost&quot;, time.time() - t1_start, count1)t2_start = time.time()count2 = 0while count2 &lt; 10000000: count2 += 1print(&quot;cose&quot;, time.time() - t2_start, count2) for 很懒什么也没有留下…1234567891011121314151617181920count = 3AGE = 27for i in range(100): if i &gt;3: enter=input(&quot;are you want to keep trying ....&quot;).strip() if enter == &quot;y&quot;: count = 0 else: break enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) else: print(&quot;too smaller&quot;) count +=1 continue/breakcontinue结束本次循环，提前进入下一轮循环break 直接终止循环 1234567891011121314151617181920212223242526272829#!/usr/bin/env python3__author__ = &quot;wangxiaoqiang&quot;for i in range(10): if i == 5: for j in range(10): if j == 8: break print(&quot;inner loop&quot;,j) continue print(&quot;loop&quot;,i)结果：loop 0loop 1loop 2loop 3loop 4inner loop 0inner loop 1inner loop 2inner loop 3inner loop 4inner loop 5inner loop 6inner loop 7loop 6loop 7loop 8loop 9 三元表达式三元表达式很简单， 这里来几个小例子就明白了 条件满足为1，否则为False12n [44]: 1 if True else FalseOut[44]: 1 成员关系判断，条件满足为True, 否则为False12345In [53]: True if 1 in [1,2,3] else FalseOut[53]: TrueIn [54]: True if 0 in [1,2,3] else FalseOut[54]: False 12345In [45]: a = 10In [46]: b = 15In [47]: a if a&gt;b else bOut[47]: 15 枚举类枚举 enumerate, 在用到index和value对应关系时能用到enumerate函数，参数为可遍历对象（字符串，列表等），返回多个元组123456789101112In [3]: for i in enumerate(&apos;abc&apos;): ...: print(i) ...: (0, &apos;a&apos;)(1, &apos;b&apos;)(2, &apos;c&apos;)In [43]: for index,i in enumerate(&apos;abc&apos;, 10): ....: print(index,i) ....: 10 a11 b12 c 1234In [4]: a = enumerate(&apos;abc&apos;)In [5]: list(a)Out[5]: [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] 1234567891011121314151617181920In [6]: import stringIn [7]: s = string.ascii_uppercaseIn [8]: E = enumerate(s)In [9]: sOut[9]: &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;In [10]: list(E)Out[10]: [(0, &apos;A&apos;), (1, &apos;B&apos;),此处略...In [11]: for i in E: ....: print(i, end=&apos; &apos;) ....: In [12]: E = enumerate(s)In [13]: for i in E: print(i, end=&apos; &apos;) ....: (0, &apos;A&apos;) (1, &apos;B&apos;) (2, &apos;C&apos;) (3, &apos;D&apos;) (4, &apos;E&apos;) (5, &apos;F&apos;) (6, &apos;G&apos;) (7, &apos;H&apos;) (8, &apos;I&apos;) (9, &apos;J&apos;) (10, &apos;K&apos;) (11, &apos;L&apos;) (12, &apos;M&apos;) (13, &apos;N&apos;) (14, &apos;O&apos;) (15, &apos;P&apos;) (16, &apos;Q&apos;) (17, &apos;R&apos;) (18, &apos;S&apos;) (19, &apos;T&apos;) (20, &apos;U&apos;) (21, &apos;V&apos;) (22, &apos;W&apos;) (23, &apos;X&apos;) (24, &apos;Y&apos;) (25, &apos;Z&apos;) 枚举类用法int 常量默认从1开始，我们来看个例子 1234567891011121314151617181920212223242526272829In [16]: from enum import EnumIn [17]: Month = Enum(&apos;Month&apos;, (&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;))In [19]: print(Month.January)Month.JanuaryIn [20]: print(Month[&apos;January&apos;])Month.JanuaryIn [21]: print(Month[&apos;January&apos;].value)1In [22]: print(Month(4))Month.AprilIn [24]: for name, members in Month.__members__.items(): print(&quot;%s =&gt; %s =&gt; %s&quot; % (name, members, members.value)) ....: January =&gt; Month.January =&gt; 1February =&gt; Month.February =&gt; 2March =&gt; Month.March =&gt; 3April =&gt; Month.April =&gt; 4May =&gt; Month.May =&gt; 5June =&gt; Month.June =&gt; 6July =&gt; Month.July =&gt; 7August =&gt; Month.August =&gt; 8September =&gt; Month.September =&gt; 9October =&gt; Month.October =&gt; 10November =&gt; Month.November =&gt; 11December =&gt; Month.December =&gt; 12 自定义枚举类（自定义int常量从0开始）@unique帮助我们检查没有重复值 12345678910111213141516171819202122232425262728293031323334353637In [29]: from enum import Enum, uniqueIn [30]: @unique ....: class Myday(Enum): ....: Sun = 0 ....: Mon = 1 ....: Tue = 2 ....: Wed = 3 ....: Thu = 4 ....: Fri = 5 ....: Sat = 6 ....: In [31]: Myday.FriOut[31]: &lt;Myday.Fri: 5&gt;In [32]: print(Myday.Fri)Myday.FriIn [33]: print(Myday.Fri.value)5In [34]: print(Myday[&apos;Fri&apos;])Myday.FriIn [35]: print(Myday(5))Myday.FriIn [37]: for name, members in Myday.__members__.items(): ....: print(&quot;%s, %s, %s&quot; % (name, members, members.value)) ....: Sun, Myday.Sun, 0Mon, Myday.Mon, 1Tue, Myday.Tue, 2Wed, Myday.Wed, 3Thu, Myday.Thu, 4Fri, Myday.Fri, 5Sat, Myday.Sat, 6","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇下","slug":"python-01-基础篇下","date":"2017-01-09T02:37:13.000Z","updated":"2018-04-27T05:01:04.973Z","comments":true,"path":"2017/01/09/python-01-基础篇下/","link":"","permalink":"http://www.digmyth.com/2017/01/09/python-01-基础篇下/","excerpt":"","text":"目录 位运算 程序编码 用户交互 第四节 位运算123456位运算：&amp;与 ： 同位都为1则为1|或 ： 同位有1则为1^异或: 同位相异为1，相同为0&lt;&lt;n左移位： 左移n位(保留左位),右边补n个0&gt;&gt;n右移位： 右移n位(去掉右位),左边补n个0 &amp;运算:都为11234001100010111111100110001` |运算：或为1123001100010111111101111111 ^运算：相异为1123110011010111111110110010 &lt;&lt;3左移位：左边110保留121101000111010001000 &gt;&gt;3右移位：右边001不保留121101000100011010 第五节 程序编码bytes、str 区别python3 中bytes、str是有区别的 bytes/str的区别：bytes 是byte的序列，而str是unicode 序列 bytes并不能存储中文，需要先定义成str类型后encode()编码 之间的转换是编码，解码完成。 方式： b1 = str1.encode()/ b1.decode() 网络传输中都是用的bytes类型二进制进行传输（socket编程发送必须bytes类型） b（bytes）只能接收ASCII 的值 python3与大多数软件运行在内存中都是unicode编码 b表示方法(bytes)只能接收ASCII的值, 直接传的中文为字符串 unicode编码，一个unicode两个字节，一个汉字两个字节。 1234&gt;&gt;&gt; b1 = b&apos;hello world&apos; # bytes只能接收ASCII样的值&gt;&gt;&gt; b2 = b&apos;你好&apos; File &quot;&lt;stdin&gt;&quot;, line 1SyntaxError: bytes can only contain ASCII literal characters. 将中文转换为bytes (转为ASCII里面能支持的格式，默认为utf-8)123456&gt;&gt;&gt; b2 = &apos;你好&apos;.encode(&apos;utf-8&apos;)&gt;&gt;&gt; b3 = bytes(&apos;你好&apos;, encoding=&apos;utf-8&apos;)&gt;&gt;&gt; type(b2)&lt;class &apos;bytes&apos;&gt;&gt;&gt;&gt; b2b&apos;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd&apos; 看看下面的转换是否能领悟点什么12345678910&gt;&gt;&gt; test_str = &apos;你是最好的！&apos;&gt;&gt;&gt; test_b = test_str.encode() # 不指定时默认encode()成utf-8&gt;&gt;&gt; test_bb&apos;\\xe4\\xbd\\xa0\\xe6\\x98\\xaf\\xe6\\x9c\\x80\\xe5\\xa5\\xbd\\xe7\\x9a\\x84\\xef\\xbc\\x81&apos;&gt;&gt;&gt; for i in test_b:... print(i, end=&apos; &apos;)228 189 160 230 152 175 230 156 128 229 165 189 231 154 132 239 188 129&gt;&gt;&gt; for i in test_str:... print(i, end=&apos; &apos;)你 是 最 好 的 ！ 1234567891011121314root@ubuntu:~# cat utf-8.txt 我是最好的！root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt ϒˇخºõģ¡root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt &gt; gbk.txtroot@ubuntu:~# cat gbk.txtϒˇخºõģ¡&gt;&gt;&gt; f = open(&apos;gbk.txt&apos;, &apos;rb&apos;)&gt;&gt;&gt; test = f.read()&gt;&gt;&gt; testb&apos;\\xce\\xd2\\xca\\xc7\\xd7\\xee\\xba\\xc3\\xb5\\xc4\\xa3\\xa1\\n&apos;&gt;&gt;&gt; test.decode(&apos;gbk&apos;)&apos;我是最好的！\\n&apos;&gt;&gt;&gt; f.close() 编码总结编码过程： 任意unicode到bytes的过程解码过程： bytes到unicode的过程12345678910pycharm默认以UTF-8存数据到硬盘(unicode to UTF-8) 一个编码过程python3默认以UTF-8读数据到内存（UTF-8 to unicode） 一个解码过程#coding:utf-8 也是指明了用什么编码读数据到内存,一个解码过程#这里open虽然文件是UTF8存的，此时要以utf8读, utf8 to unicode， 是一个解码过程with open(&quot;test.txt&quot;,&apos;r&apos;,encoding=&apos;utf8&apos;) as f: f.read() python3字符串就是unicode, 任意unicode只要编码后就是bytes&apos;你好&apos;.encode(&apos;utf8&apos;) 第六节 用户交互for python2.xname = raw_input(“What is your name:”)for python3.xname = input(“What is your name:”)eg: 想要输入密码时不可见，可以利用getpass模块的getpass()方法12345678root@apt:/mnt# cat getp.py #!/usr/bin/env python3import getpasspwd = getpass.getpass(\"请输入密码：\")print(pwd)root@apt:/mnt# python3 getp.py 请输入密码：123","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇上","slug":"python-01-基础篇上","date":"2017-01-08T02:37:13.000Z","updated":"2018-04-27T04:57:42.337Z","comments":true,"path":"2017/01/08/python-01-基础篇上/","link":"","permalink":"http://www.digmyth.com/2017/01/08/python-01-基础篇上/","excerpt":"","text":"目录 python简介 python变量 数据类型 第一节 简介Python 简介 Python 安装More info: 官网 Python第一个程序斐波那契数列： 123456789# Python 3: Fibonacci series up to n&gt;&gt;&gt; def fib(n):&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; while a &lt; n:&gt;&gt;&gt; print(a, end=&apos; &apos;)&gt;&gt;&gt; a, b = b, a+b&gt;&gt;&gt; print()&gt;&gt;&gt; fib(1000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Python 注释单行注释：#多行注释：英文三引号 ‘’’‘’’say somethig‘’’有种特殊的用法,此时并非注释123456789101112131415161718192021root@apt:/mnt/proper# cat people_info.py #!/usr/bin/env python3name = input(\"your name: \").strip()age = input(\"your age: \").strip()salary = input(\"your money: \").strip()info = ''' -------- day day up ------------ name: %s age: %s salary: %s''' % (name, age, salary)print(info)root@apt:/mnt/proper# python3 people_info.py your name: wxq your age: 18your money: 5000 -------- day day up ------------ name: wxq age: 18 salary: 5000 Python代码长相123456789101112131415#!/usr/bin/env python3 # (1)程序起始行&quot;this is a test module&quot; # (2)模块文档(文档字符串)import os # (3)模块导入import sysdebug = True # (4)全局变量定义class FooClass(object): # (5)类定义 &quot;Foo class&quot; passdef func(*args, **kwargs): # (6)函数定义 &quot;test function&quot; foo = FooClass() if debug: print(&quot;run test()&quot;)if __name__ == &apos;__main__&apos;: # (7)主程序 func() 第二节 变量2.1 变量规范变量： 字母，数字，下划线且不能以数字开头，并系统己经引用的关键字不能为变量名关键字[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’,‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]1234In [2]: name = \"wxq\"In [3]: print(name)wxq 2.2 变量标准eg: age_of_name = ‘wxq’ #习惯上 AGE_OF_NAME = &quot;XX&quot; #常量 Age_Of_Name = &quot;XX&quot; #驼峰体 Age_of_name = &quot;xx&quot; #类名 第三节 数据类型3.1 数字int(整型)long(长整型) python3 中己经没有了float(浮点型)complex(复数) 3.2 布尔值True 1False 0 3.3 字符串不可变类型字符串常用功能：字符串拼接 join()方法： 用于指定字符把序列中的每一个元素连接起来1234In [11]: str = '_'In [12]: seq = ('a', 'b', 'c')In [13]: str.join(seq)Out[13]: 'a_b_c' 移除前后空白分割len()长度index()索引split()切片格式化输出% 格式化输出%s 字符串%d 数字%f 符点%r 原生字符串，不会对\\n \\t进行转换123In [5]: name = 'wxq'In [6]: print(\"hello, %s\" % name)hello, wxq 1234# 字符串.center()方法+颜色格式化输出In [22]: print(&quot;\\033[32;1m%s\\033[0m&quot; % &quot;wxq&quot;.center(50, &apos;-&apos;))-----------------------wxq------------------------ format 格式化输出12In [7]: \"&lt;&#123;tag&#125;&gt;&#123;str&#125;&lt;/&#123;tag&#125;&gt;\".format(tag='b', str='hello world')Out[7]: '&lt;b&gt;hello world&lt;/b&gt;' 3.4 列表可变类型name = [‘hello’, ‘world’]通过下标访问列表中元素，下标从0开始计数12345In [9]: name[0]Out[9]: 'hello'In [10]: name[-1]Out[10]: 'world' 列表常用操作：切片：取出多个元素追加插入修改删除扩展 3.5 字典python支持dictionary,采用key-value存储方式，在存放时根据key算出value的存放位置，这样取的时候根据key直接拿到value，这也说明了为什么字典查找速度比列表快的原因。 由于dict根据key来计算value的存储位置，就决定了dict的key必须是不可变对象，利于每次计算相同的key得出的相同的结果，这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变. 12345678910111213141516171819In [2]: dict_test = &#123;&#125;In [3]: for i in range(4): ...: k = &apos;f%s&apos; % (i+1) ...: v = &apos;v%s&apos; % i ...: dict_test[k] = v ...: In [4]: dict_testOut[4]: &#123;&apos;f1&apos;: &apos;v0&apos;, &apos;f2&apos;: &apos;v1&apos;, &apos;f3&apos;: &apos;v2&apos;, &apos;f4&apos;: &apos;v3&apos;&#125;In [5]: dict_test.get(&apos;f4&apos;)Out[5]: &apos;v3&apos;In [6]: for k,v in dict_test.items(): ...: print(k,v) ...: (&apos;f1&apos;, &apos;v0&apos;)(&apos;f2&apos;, &apos;v1&apos;)(&apos;f3&apos;, &apos;v2&apos;)(&apos;f4&apos;, &apos;v3&apos;) 3.6 元组3.7 集合可变集合集合：一组无序排列的可哈希的值，集合没有特定语法格式，使用工厂函数创建。支持： 支持集合关系测试：并集 支持成员关系测试：in /not in/迭代不支持： 索引,元素获取，切片 集合创建12345678&gt;&gt;&gt; set1 = set([1,2,3]) # 用set创建&gt;&gt;&gt; set1 &#123;1, 2, 3&#125;&gt;&gt;&gt; s1 = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125; # 或用&#123;&#125;创建&gt;&gt;&gt; s1&#123;&apos;b&apos;, &apos;c&apos;, &apos;a&apos;&#125;&gt;&gt;&gt; type(s1)&lt;class &apos;set&apos;&gt; 项目 描述 符号表示 len(s1) 返回s1项的长度 len(s1) s1.copy 制作s1的副本 s1.difference(s2) 求差集，返回所有在s1中，但不在s2中的项 s1 - s2 s1.intersection(s2) 求交集，返回所有同时在s1 s2中的项 s1 &amp; s2 s1.union(s2) 求并集，返回所有在s1或s2中的项 s1 l s2(竖线) s1.symmetric_differencee(s2) 求对称差集，返回所有在s1或s2中，但又不同时在s1 s2中的项，即并集减交集 s1 ^ s2 s1.isdisjoin(s2) 如果s1 s2没有相同项，则返回True s1.issubset(s2) 如果s1是s2的一个子集，则返回True s1.issuperset(s2) 如果s1是s2的一个父集，则返回True max(s1) 求最大值 max(s1) min(s1) 求最小值 min(s1) 3.8 集合forzent()可变集合","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"PyCharm基本使用-01","slug":"PyCharm基本使用-01","date":"2017-01-05T02:37:13.000Z","updated":"2018-04-23T06:58:15.230Z","comments":true,"path":"2017/01/05/PyCharm基本使用-01/","link":"","permalink":"http://www.digmyth.com/2017/01/05/PyCharm基本使用-01/","excerpt":"","text":"入门More info: 参考官网 下载123456789101112131415161718192021222324252627282930313233343536373839404142434445464748491 在Pycharm为你的python项目配置python解释器 Project当前项目名为&gt;&gt;Project Interpreter &gt;&gt; add Local2 在Pycharm下创建Python 文件，Python模块 File&gt;&gt;New&gt;&gt;Python file File &gt;&gt; New &gt;&gt; Python Package3 使用Pycharm安装python 三方模块 Project 当前项目名&gt;&gt; Project Interpreter &gt;&gt; 点击右侧绿色小加号4 Pycharm基本设置，例如不使用tab, tab=4空格，字体，字体颜色，主题，脚本设置，显示行号等， 如何导出入导入自定义设置 1 不使用tab,tab=4空格：Editor&gt;&gt;Code Style&gt;&gt;python 2 字体，字体颜色：Editor&gt; Color&amp;Fronts &gt;&gt; python 3 关闭自动更新：Apperance&amp; Behavior &gt; System Setting &gt;&gt; Updates 4 脚本关设置: Editor&gt;&gt; File and Code Templates &gt;&gt; Python Script 注：其它类似 5 显示行号： Editor&gt;&gt; Geratal &gt;&gt; Apperance &gt;&gt; Show Line number 注：2016.2默认显示行号 6 右侧坚线是PEP8的代码规范，提示一行不要超过120个字符 7 导出，导入你自定义的配置：File &gt;&gt; Export Settings, Import Settings5 常用快捷键，例如复制当前行，删除当前行，批量注释，缩进，查找和替换 1 常用快捷键的查询和配置：Keymap 1 Ctrl + D : 复制当前行 2 Ctrl + E : 删除当前行 3 Ctrl + Enter 快捷换行 4 Ctrl + / 快捷注释，（选中多行后可以批量注释） 5 Tab: 缩进当前行（选中多行后可以批量缩进） 6 Shift + Tab : 取消缩进（选中多行后可以批量取消缩进） 7 Ctrl + F: 查找 8 Ctrl + H : 替换 9 批量注释：ctrl + ?6 Pycharm安装插件，例如Markdown supprot,数据库支持插件等 1 Plugins &gt; Browse reposltories (下方三个按钮中间寻个)&gt;&gt; 搜索 markdown supprot &gt; Install 2 右上解View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览7 Git配置 ？ 1 需要本地安装好git 2 Version control &gt; git 3 配置了git等版本控制系统之后，可以很方便的diff查看文件的不同8 常用操作指南，例如复制文件路径，在文件管理中打开，快速定位，查看模块结构视图，tab批量换space ,TODO的使用 ， Debug的使用， 1 复制文件路径: 左侧文件列表右键选中的文 件&gt; Copy Path 2 在文件管理器中打开：右键选中的文件&gt;&gt;往下找到show In Explorer 3 快速定位： Ctrl + 某些内键模块之后，点击在源文件中展开 4 查看结构： IDE左侧边栏Structure 查看当前项目的结构 5 tab 批量换space: Editor &gt; Convert Indents 6 Todo的使用： #todo要记录的事情 7 tab页上右键 &gt;&gt; Move Right (Down) , 把当前Tab 页移到窗口右边（下边），方便对比 8 文件中右键 &gt;&gt;Local History 能够查看文件修改前后对比 9 IDE右下解能看到一些有用的信息，光标当前在第几行的基本几个字符，当前回车换行，当前编码类型 ， 当前git 分支 10 IDE 右侧边栏&gt;&gt; Database9 如何去掉烦人的波浪线？PEP8是什么？ 完","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"博客声明","slug":"declare","date":"2017-01-01T00:47:02.000Z","updated":"2018-04-23T05:58:42.174Z","comments":true,"path":"2017/01/01/declare/","link":"","permalink":"http://www.digmyth.com/2017/01/01/declare/","excerpt":"","text":". 公告 本博客属个人所有，不涉及商业用途，本人保留追究其法律责任的权利。本博客为个人随笔所写，内容大多取自网络或个人经验，包括老男孩、马哥、廖雪峰、林海峰、小甲鱼及Python开发者，纯为个人学习记录所用.按金庸武侠秘籍上说就是本博客纯属虚构，如有雷同，纯属巧合.. 如涉及版权问题及时联系作者 wxqnote@163.com","categories":[{"name":"声明","slug":"声明","permalink":"http://www.digmyth.com/categories/声明/"}],"tags":[]},{"title":"为什么写博客","slug":"为什么写博客","date":"2017-01-01T00:08:08.000Z","updated":"2018-04-23T05:56:37.662Z","comments":true,"path":"2017/01/01/为什么写博客/","link":"","permalink":"http://www.digmyth.com/2017/01/01/为什么写博客/","excerpt":"","text":". 关于作者欢迎大家来到个人博客,我来自成都无疑不幸与万幸是北漂IT engineer ! 尤如www.digmyth.com,一个想要遆造神话却总在路上的人。 . 一个选择至于为什么写博客，有很多原因, 一段时间，一个心境，一段经历，一个情怀。在一个适当的时间做适当的事，想要做的事，没有目的，如半夜突然起来想写下一段话，转身安然入睡。 . 认知时间时间对年轻人来说太快了，2016年己远去，2017年己来临,刚好2017年1月1日,此时成立博客也许是天时地利。各大互联网产品创业思路一是提供服务优化它人时间如知识产品，二是让它人上瘾拖住它的时间如微信朋友圈。会在不知不觉中时间己去，套用罗振宇跨年演讲上的一句话，有时你什么错都没有，你就是老了。可能是因为身处互联网圈的原因，信息发展太快着时让人有种焦虑感,让人很着急，告别了过去却抓不到未来。此时我要做的就是脚踏实地做自己正在做的事情，就会让自己很充实. . 共鸣共勉欲望勃发节奏飞速的当下，如果不能够保持淡定和从容，不具有宠辱不惊的修养，就很难拥有一颗平常恬淡的心境。更无法在纷乱中理清头绪，认清自我，认清形势，找准坐标，在反思中沉淀，在沉淀中积累,才不会迷失方向,才不会迷失自我。 越是浮躁越是保持淡定，越是功利越是要适度恬静.焦虑和躁动不仅会折损你的心智，更会戕害你的身体，经过了不平凡不寻常的年头，度过了最艰难的岁月,再大的风险和考验都可以轻轻的付之一笑.有定力的人才有希望，告别2016，迎来2017，善待自己，给自己的心灵除除尘，给自己的灵魂洗洗礼, 给自己多些淡定和从容. . 记录点滴记录一个想要遆造神话却总在路上的人的点滴，代表曾经来过，有些事我做过。。。","categories":[{"name":"生活","slug":"生活","permalink":"http://www.digmyth.com/categories/生活/"}],"tags":[]}]}