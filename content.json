{"meta":{"title":"Welcome to wxq's Blog created in 2017-01-01","subtitle":null,"description":null,"author":"wxq","url":"http://www.digmyth.com"},"pages":[],"posts":[{"title":"sysctl TCP优化","slug":"linux-sysctl","date":"2021-03-15T01:43:54.000Z","updated":"2021-04-15T05:37:59.492Z","comments":true,"path":"2021/03/15/linux-sysctl/","link":"","permalink":"http://www.digmyth.com/2021/03/15/linux-sysctl/","excerpt":"","text":"内核参数优化1234567891011echo 2048 &gt; /proc/sys/net/core/somaxconn 每一个端口最大的监听队列的长度echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled 关闭透明页功能vm.max_map_count=655350 限制一个进程可以拥有的VMA(虚拟内存区域)的数量fs.file-max = 65536 同时修改vim /etc/security/limits.conf* soft nofile 65536* hard nofile 65536* soft nproc 65535* hard nproc 65535* soft memlock unlimited* hard memlock unlimited 每保持一个TCP连接，进程就要创建一个文件对象，约占内存3.3KB，4GB内存可以维持长达100万条长连接，客户端发送数据的话，还得为TCP对象开启接收缓冲区，这就增大了内存开销, Linux系统里，系统级、用户级、进程级都有最大打开文件数限制 系统级： 当前系统可以打开的文件数，通过fs.file-max参数修改 用户级： 指定用 户可以打开的数量，通过/etc/security/limits.conf 进程级： 单个进程可以打开的数量，通过fs.nr_open参数修改 1234为每一个TCP连接Socket分配的最少字节数或说是接收缓冲区，默认4K，最大可设8MBnet.ipv4.tcp_rmem = 4096(为TCP连接分配的最少字节数) 87380 8388608net.core.rmem_default = 2129922net.core.rmem_max = 8388608 123net.ipv4.tcp_wmem= 4096(发送缓存区最小值，默认4K) 65536 8388608net.core.wmem_default = 212992net.core.wmem_max = 8388608 1ss -n | grep ESTAB |wc -l TCP活动连接数统计 12345678910111213[root@node03 ~]# slabtop 关注dentry/filp/TCP/sock_node_cache指标 Active / Total Objects (% used) : 3721737 / 4145714 (89.8%) Active / Total Slabs (% used) : 125168 / 125168 (100.0%) Active / Total Caches (% used) : 95 / 131 (72.5%) Active / Total Size (% used) : 821348.16K / 878889.63K (93.5%) Minimum / Average / Maximum Object : 0.01K / 0.21K / 8.00K OBJS ACTIVE USE OBJ SIZE SLABS OBJ/SLAB CACHE SIZE NAME 1928862 1578283 81% 0.10K 49458 39 197832K buffer_head448077 447905 99% 0.19K 21337 21 85348K dentry （指标1）298544 297412 99% 1.00K 18659 16 298544K filp（指标2）288966 288966 100% 0.04K 2833 102 11332K TCP（指标3）233070 233070 100% 0.12K 6855 34 27420K sock_node_cache（指标4） 总结慢慢积累吧","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s基于GitlabJenkinsCICD实现","slug":"kubernetes-gitlab-jenkins-CI","date":"2021-02-21T02:51:41.000Z","updated":"2021-04-24T14:10:25.467Z","comments":true,"path":"2021/02/21/kubernetes-gitlab-jenkins-CI/","link":"","permalink":"http://www.digmyth.com/2021/02/21/kubernetes-gitlab-jenkins-CI/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 U2FsdGVkX19TPUqjLrgj4yWauslEyR760maWZfdg8APUprZmoBZOFEzYEFGq/eJheI7LBrffguvECmsb8HLwSBPjDXgmup/7RCOhzxOZn01Td7mAtFPNrvD3EVmo330BdrqmUJZg2dYsvGphrG+RsQ+gPRg93MqCAiyF9DdBZHdHFTtebKoF4qeinwZIJXnLoh4v7H4axduebP9tRgpEv1dVyyGgOeKleYC/4/A1FaE75y4jbHr6QttM23FW9jH5wFXYd63HDleXIU4DyLs9Llbit1KGqvu+riqcj3Z2R+Qj6/2tEi0yy8YA0ktVPOWdf+67CaqfZj+6sshNMADpq3t+RqZU4yjJgRoroJSQpMG3zfpmTrIS/TTjnsFb484fGBVrAP5PAl3NYGFCA2yA9Rz12W34IgFRCj8Cvh5lg5Vy3PClsfbhoJCbdyYUstsetOAdH6HkEWqxhvmOamCl53oST4E7V9jQa2IH7OgOo2FmQptzHaDvsinKtmTBV7ou+XzVZ1o12/SW/FdkqIH750Mwb73q8a7lmnEeb8uxUw33ZsqEGxY5pRJ2vAhwxIHyeN6mbrR98sM757/IJYZlk9/GNXSsQ63T66W8jTHexPZIryTHH8haQGcUCt7ZyioaeNT9m6J05Jp7W91ZcHbiJmL80AjiSt+05Idnle4wnB2KEL1FAAdqHQq18uaS/6R6QYhVdOrt1ZbYv6cIG+rFQjkYd0tfiG7IpUdnDZKnQZSr0JSVWlQ9E6LUC8VcIVPQ8KtWMwwNb13L6wLgKpmh2SWJ+klhcKA8g2anCKr1d6E0DFkQ0mknjyQQM7z287Nt+xVtG63ymn7F1eXXWqIObRegW8uoeIWLEXaRVM1Kc3yMcNHdaSpANXAeY+VEkQkF6SgpnMAzMy0U0925WRNg61jljj9r2J1nilP64snnk1kvoDSa0bZzkAXQ/5bxmEbkO1qe5e/fHIT3cv+Y+pDN0xl2N2NISTrxQgYudgg2TbfWjyafA7gJjIoyiw3CI8KuHI/LaMlIkgLjAriqr+PAcNLpTRSQYgU8Q15BbskbXmk8ViY6qCwDEopLpC1uAqZ0f71H5oQM5SEeQWkaq+Ri0vJy5LwgmbvLeeKldKGFBAOGzK+p8oh6wy2Pl2NBOYVccLvMCo7V+eY+BS8b0fqFFD/4/Wy/dgr62Ef1NfEHpY/rU0C27TOOt9ypDpJ8sQLFdtbTZ5Vt5HDgwXLqHeFwb+pk4b4JsQDA2B+CpV6JeH774dlF4o9udqt5sCXBSy5yclUJV79E8yFlPT8NClqbtAG4DF8rpOBbj694hlbYspdbmOO21F8bZ4dmZfFHwZPGnH8SbUZ6OiBGe5n/1txlahrLBXUH/sQRcPc+nGBqVAtakG932ESoyx7dAZb/S8WX+Aw6aelo1OscnQbQ4HPyz2Qca/Qsb3rPui7yQpd08C//gmAsByNntfC2hd8JWGklSSe9pnh3K06xIUrc1FsKJhOrVKO1LmD7O9tYhTl6zeGwZeAmsQhI18zZ9snnDSP7MJuf2iK2Yevsh/MCfzndxahyiqM9/tZP1Ps4Z0Z4UYlThU5X7GFm6YJzdca8896SMhHGUIxXXoVDJgN8DKQDN71Tc+VcIPhsXv4t6YvMaXK9prb1Yck5OoA74Tq1/k6CYv4v1r+H/0MtjwuPKKhmhECqfvFgTr5HyLu7oUUL7nqM10H21Rpmld4f9xdgE5FhF8nZt8DgWnz0m/mL1VOaYqUIPvYt+ItkuIwlFdsVWL2zkxgoDJdFp4OgCSFNhoz5Q1J5d1b2TCgNlD5WnyogcjqByd4YnEtjv2ztDy7h+28ZPhV38utL2Sp5OJ5sPMfjDGH+f4vgjs+TeH73xjrIUBfWlU2Aa4iLHdrGdgciK6ZFNw5qAs1neFyVTK3FCN25zFkY59r3pYJI6GGGbbFPSvRne2mpz/EHlBoslHGqZS4lta2F/W677wlT/RMmhhhO3fXkfDKHo0q0avLuc6rTavrN1mPeUp/1969hp/SIka3Smm4hSFqEsmTQRNJey9rJY6wnb7gOyaYVWmwY4BOSctHonES0dr/2/VyMi5DJO15dr5OUZH2mzTet6cK/6Xcrt8BpX7KaF1xpe2nWgu5ZkRAIiNuiPm7qoqVicTqQLZtOi4kO8B2r5pYob3V+wGT3UTfdZk446v7CmrL8eNyfrWJDmIZ+XFbYHZUEdErB9gz7uVL2hBmpm4vMPrNP0Nxsq/TIClrZaRf2b3pAnWvv1QpamJ9dfh1qbC7O65X8TLmP0qtzVTwlitAu5oZyHtf02sN+lhqgPJMf2dbJezNTqJQ4PxSHVvw59BkvInQhKLfL6XqlPtUwHQXPhccqklL2GH4j9eEu8JViq/9N/S80DPUaVBzu+H7S49x5IzIBGUtKOxf69kvgxFzTPHuArdxaSN8wIuI26XEG9TEiuiRzSOkjyVGaiw5rB1rN9b77FkHiq8trAnH3R1yWqUJLv2cJ7dSNS0W/9nEBCLbC/HzDMmFhsZu6Rkp+iJIDy7wEPOkiYsEDBYI+y7Sj6LyeS5fSazwQgdGwLcopk0sIyPsbbdIvSSDMBrsNipLS3pyLYVXn3NZP7gAuwXx5ojz/5E5zTgWC9MwkmfSWr+gj+N+6aGCB2eqjc1Am1CdzsnVpMjdwN5ZjG9iQzLU6440mPe0hT6jZpmQKqQAm5hlI7AqVA1hRzTo1lTkeus4rllX6uETdsrV3Yj0biOlFxkod0Dr0xmBDpWSjyWqhN9XizNJSHQ568UAecEpMP1ZWucwOyLHGBmBmdRKSCiPT2CuDPeogoZ8DTYTYcYh3euFl05SKx1nYUa5FZb9YFNbQj9FHAxrucL8SpbeVImk259QES+IU+VN4Y06S2Nuy/3S5H+qa++tAA+5aAViyL7me1RkRbm4hLTF+npLpbHEDJ0BbHvgNtoebTTox2DLKD0Rplod9r11yhGz3o2d6rB2T2T3wwTPCqcA0SZ1sR8HabwDY4E4RfbdHy5v05zZU4Ig78AJqGOdKrOFflCIEZEKfycQmHI3sSM7888E4LWc9j//+PW9sIkxQPOc0eQrETU+t+m4XjRVcHiB6EFec+V/g/Jg9kVmmnna+fx3iD3UPoA2b7iK5b9LJTw+KbXw+F6xH+sY1IoqkNMepQ6ZMCGjJMzEsqeVLpQZ4KYwWW7KzgQL/j6DUzKVSkD2NrmsAgnJjFqxp0ofs7s0t31PnP2tdkGji10/Y/iY30Yblb/AxdmwRgKNmFohRM58ZDPT1nWkbJJkMih4Ks5yQZITx/P3WIhFSrrN3jpgrcc93UX8tW72J5a/pn0/tlai/M8GVRIec+6Ia9jc7EjhEMi35iUPb8LesWLC8JUkSAkMS9YWqf9uTerob4Xw+KDNg1hkoxbH5Zf7CIhuSZdYWvF8wAPrntKaYuT4eYiOuHEQMPHxk/s6uS2Cz6MP6t6mdtxV6Zygolr6xtKsuWGf0WLRcnywGH8nAn1qgHtbbGX2tx58XMD+6FrXdyHL2RXJplNYnGm/nZO+H8cIrmQltTXbNNDTH5/VKrfHKb95xUYZpHUgThsXEXsoqTU5Ov3uKqVr2+tuk9hs2eanofTGgAMchw3o3UZh1rz6a5MQsJ7PiMSi40i9msCL2/P3jRBOY51gOzM6ZNIlwe6hZQAEzR7CdzevzLYtCqJ32YUD9K4KgyUgzqukxaUguSSBzL4USuU1xTKXzIQMSMTu2VlCFW69947aKmKBldPEJ2tJfijIm2frVMBYVlHYu9bRy3uZacugjS1OXGIaycjtc/BQOf9JUP7dNJ/pWjjZNDLHDWhgwmHQ2TGGjv/b5cwLqIbqqqyeAUrauvihRxRn+zbYBrc1R9HtmmztNgLDf7/EuN3IanxMeFIlb3FqXe/7rPE4u0HUMxy2ygpvR50n2ht3+SA8E9HAdXIW2+bj7Eh2trWaxX2FkHoPAkjxajV5BEYMHKPh6zcJCHDdu7ZHPCSqUSPPsT+1rBFBYGhwkpRqd+doXzYAKPvJxAAuj5DcXH625F4GzpvYR9YbMOl1Cu2a2YBzswohKCM4QEpB2bUXK3cnQWx+pzHYroMrIN9xBGXal1J0P3msAd1FzWPHK/9hZULEDINfqc6l79td49WIMpigJou9mZ0g5t5S5UX39gnmhZY19DJ5mHUiwmdsKJynTm93x1Uo6JIBcAw4vcxGfwh7AXfcJJcSnmRaibXNEhM9UWOs6ZPmqYCWG6jG4UwsBLfJf7gkmpSUd7i7YMBtHPPNqDJEwErCiqlHqEmsAtGYp6WCzjYOFKj2KpSKsC0ImYYErMalI78/QWtz9jL1ZEyXgVVYtXfneIai2RLaRbvS04LqljriGHLvnyZVlC3O2K9aTMebZL08OOnhMHWQB3JYJ1KTvCmJswi20WYqd7KF2zeMftpfXXYtZrFsk1+J3uqfVlg2xrWQO3VVumJ882Q4Jqd4vBqz8JceSub6DPmCDvmUUYNGBOInbtxT7pqVb/MMX3mgI+nSiUvIGPJQZfkiSa1e8DOn7GcKoNnytqqGHaYAFbbslNRJZPaKZAH5fYqziLNou5lJcHTF7zLHZuQ5dr7rcIpX7jKC4DCxbAaymAX++EHJkrFcSKRoL84S8I7L4tlVXGw7hqGbmce5vhHCUtJhd3jeInDhwe7/JgNyRr/8qI+2Aa0/bNJ0w8/ZcU0li9D04o08PjH9GTbIs7NCoY3pDibmYbNl6GQbm4lyLg8lBCvG7AbAjU+o8b5gQnfi1U13DwTx/uCbp2UKFr4XZEF9kRh/UdFfakwJq+4D3q3kliAPRb4/j3ypcOg/L2Jx8lFlamcY6nbBwdb4MN/K1w4zP9nyM4cpuuIAJ/xAz4kjQNN4+hyuvEhcbwbXeXeH6dklb+/HVkuII1rS86g/pHhML7pPpZSupvKVKkm11mTQ+oDSWQOBQgKkonZdeN1Ajsetk1lIXB7sB9HIQ4Weyc+dJ3Gnr3ssB4rpxXEbdNfyJgHItdhJIsPt4y6RixaoQR+7fx+Km8qZW7aCIN83FMT3HLJk3vCXhkdfzfv0psGmjXWFOxaQx0I8+hoi+LAPcaghEWNu+JzYMf0XlOwBd2pG7DvuTVqc+G7GnjjftrLrFwtEMmHMtygcKVrHITz5xKW02iNv2tvNQPgT5uWqwNDBKzzJ2HTqv/eLk90r34ms3F1i5vK4geV1oyQd1Lwn/P2O5Fx1F5iqjSDTwrQxRxUCoN1sQpp9O8SE44qtKzdXvIVGEbD2GOCM9MYS7Fmi5ERyybA0TZ8M3+bsO7MDypGuxN8Rr2kP74Kioly0r0RsSetCnC6meeKymK8j4/Q8fb7281dcKCerXpjzr7P7CiVYsQ3oEsoldI+VWnX05qK3FyC7L0QEdP3bykgmET/omJRKYt1+/9Jla2pznbOTl1nQjFUxdCc7LKf/PFweGAqA1KWQbFD5pe97Xyp9KxhN9SuozrfH8/hQ90jKBHryb4jWJPuUOzbghhtdiN6T4vQBVqNew8MrZicsw8DNMHCOkZ02FzQ1SfpxZFQ6AWfrQuM6YuBEXs978SdyjVyU7rSIX8izhiFbJEofIViGe0F+OMBDV3cstdK270sWvf+tu1CxW5m7IxFI3nBTv4b7vrpJ52is5m4Yvjf0EaZLose30fDQQqpON9pOkpDWZ0divXXCGJPBEDmi9wYn9kkTpv9naQsSiv7pvyEjMNiMSbtLIcAd3sOG8XeOsJh0ndjUAgrabQ6tgQRl5JXn0LEjnL/Hs8b19SQV6CQUdikBMhRxv0CdpllpnP3fHF57aqtGonUkbmNAf28S5ygTjWDNInyQT93R7/FN4qBqiNgbzjmW6rMvg53M1ZHKYVFVi9PEPp0AE16q9g4AMyc/arB1L1WlVx2p9VpUX5mMYv1xfr14IBA0yidw5S/KhJVwyZUm/bFEswcy73kV0rdo9rvB6Meey50FB5MkIKTsJgGyWwVankWBDI/QID1ihYTDUEhqeBqcuukswk6Tx/nWUV+i3JoeFO+sE9drp5aC/uJDXoWBCDvwEToIwwNyfRhlrXLX0lQLWXiEhQ5eTzZH3ZTWEaD0GGk0+KaVSC8veo1T4Jf7/6Sd6Pya2yC92vZuZtyP/7DoPeb5BDrj07Ngp9MOc3SJh5u1e0JIWtXeNPQm3WFfoLOZTZY6mMOcVp0bGB7YHBIbmvL0uxnRzejarWbvva2kB6zw/iNwWxK1ZN8kELMqfVz17J7vfG5/Nl7RpI54R3xcf8LBw/lR2emHRHgekyBtyLQAtQGLqCvC6lvg0V1FBPWzt3BrysG5+pZGoYazUGnJVfCShTyX6SwH+cPk97bdJA6AcKba8pQrsZEe9Yw36w63zNKdB5w1+KdHswL4YxGLuAk8leSCOLvPVbnrcUdZpQAW61IEPbAv2cDeTTOl0KT/4669OA/lg4A5skVUGvcnYQdHnOmsiz3JiMivICEPQ+Uq0wKt1ec9xB1tC1gsHN6T8S2dWFoOuTgLSCI3C69Vhkmxn1bPejw3YwbcXCXhExArtdHU5K6hdpN5CmgYvlk6jEUd73BmkA7io9IUEbIgtcgO6Pg2QdKb7DiYn2Q5UiShAulz2zwaBNrhjPW9Un+/NwObqRo9jLNQ+3gLoOSkPaof/HT56TCDGKmxVm01Xo/6DzU/ac6woYIKefBg+xRqeSKetar0qD3El10XkTaDv70Z0FO8M6pgdshff9PSitkjS/67DFSnpjMhDntZ9peUwKeK2CC/6TAp5YklQcoS5QU0KXeASuY2glyGPq0B9RsYg9jpBJd1v7ovwpsM8TFemQOYeZg41pLblxDpTOmBYXmKDUxZzg2lAdgP7a4UnyqejJyCNlkjsKivsTxfk3Mi3g2sx1S+bmovRzS9B8vq9ddTljW1tQ7UJ4s4xHkdn/HfH5KzH9f9x/Wh1219ihx+SdmZeJ6649EUzGtTPPlIriMUszGgcjr5J2CQPHlf1gQBx5xTHrC9ldtuuCyRPc4fLzX+vd2045hDaMmGmV9y4InNgRF9LKBPGcB9JJyvYGjjOFmEzHsJM9lPsuIucfMLak3wy7HD+reX5X1ASNQM0Rdpy//PxbzCeDkY821iYCc/37tWaSP7giPMFHQYTCriVZL93edMSDlIqqAuLiCYrPDZgKtOPtQESLFy/aJCjWhItUV05vxwFhQz5REuMhDtylNilRLnLZZkQ2ptZve0qBEca+txX6yexUcGWkjBdzXCTTxCk9yVlsK7gSqkKe8VE5Ng6lt9YI5uxWStsG/d01mJLF6zDoojZAVt/xiyf8gUPDqOOWz+3OYi7iuHLzuLiytpd3eOQ59FhOMGEpamX6mk7BghcA3Jdn+zcsisXUCZqs0tSJ+G/2rI5srFm8qGQqlRfIJnU2iBQr3r8THQ7FHK/nHmrMumRey0wSOvuFYPGGMTo9hiAuNlwEagwK40IOY4lzbuBiJvtSntis3QhhS/jBSyWRNMVb23x3JYJfVytvXJcc0iz8Xld16TylfHhujzKpCfukYkAva4OxnARVS7kn2scdnZEtSLkLCRhiRUbggPhDtEAGvP2JeunbVkJ9bWfJq9lGBECiqash1SbPhUhW9BVMewqb5CTQ3r6IXS+CmjaK4ciVtrD4uVEpEAklV658t6NFsz6yoHZj9O1Klq+7Zb5zjp3rJuHjlbqq0ooK67r7/FmO9Fp5iCk0EbOThklylOD/AwhpQ8sGuN9ziFqkUU3zph6mchBpL56UIBT1RqocIwP46OnEegzR32TGJUNJG20bc3j4VXs66/iXWZT6xRHeEn6Pb+Wzkb18jr0F+QnCsjuP7dcXJTQ1JMubQISu2VG4eKlaXfe5XVtI+g8CJ+akVI/Zx2/G0d2+Qy3eV02bvh+Z7amZs2Zushh/ZpjoeTqdeyIdgj9WQ8E6K+DbCHdjTf4ImRvt5UwZ2u0FxW7f/ZOXo8gKxqvErfPm5TK7/krzmQqb0S6luWSkj4rLcZYBo0uZ2RlJr1LCf6TbGiT46+FBs+R4z0eWy6J2OGROp10TfWGHQ0Y33pAj0hytSGwSVlRz+s5yLixHrZZABPhBQnT1db+YTQSJn5O9t1Lo1g8zSFln3ymJS9Q53FNqU8jvCpbfnWAUpdKBWXN8gc3NdDQNyG/7BY2Z9gDl+Px1Vvz4zjPISzvTkWzAX3FUFFRUvcBlndZIBYig5pbPN9Z7YraxtkO4OqniAX/fQSKTdySOCJ70XbQpj0k2V8TG4xkWcMOU3wfnTo9a2fDaZcbcyNS+geWsAYG2/8uyEUqbpqjl7Y4KMNvdllH4j1t9l0WSv1KYdvyTQEqOZD3w045PWafUf415OTJMm/gyYdA/sNc5tE26VvXg7Tu4KOJz8rTiO36lP2G6GiGCAIrLeXlE1w9EpwdlCoZGxoHVH0oX7QCE3BsCTl0HnvkY6UKNbD1+GwnY3x919xpQIGcQ9wLAVABx5BIFB8QHBQBVkfDHxWDSnxJAhGFrr/geFTZ64pk5vZ9a+/tZHjqmQ8xUGxwoqUbwq5sB14T2+1Qy+ltj7LqDXPuTMoeHquZ8hUigOF3D8OD1r55RAz07dTvY3uQxPH+l/AoLtO+fHCt7PvTrVQIekC/AXafUMoVSzc3IpP+VW6Cx0oLYX35XyzAaZ7ys93SAaRdq+z91ESZGOdLSqCpTdP79ah74KmhrPsD9hQooK2cVteTeuY3c4UX45/Hq/Jq4HBDokHhnvbZPBnzOCwHfsd5jjWVfVA0MEkOIekjtxkQBYFyuyHecRM10pYbXXt7sEuNQebY1loJU0dtKr0Q4gEz+rrdED9BZEswk/+UKONWngaun7MAwkk22Ia6NlL5EhcxnlMDun4fC/IggNtcJqD93oPs6dlx0bbi9CLG323PHjdmco48QgCuU2NIu10MqYNdOehMcFh8RAh51GiOm36Jcc81Lg+b7wMlQCw3LmyzczpGX6GQms2QJ4MvVgEAEAPd8TTCi3ImP1pDc2baopgr2EwZJ+vu9ckFwOfjOcjmlqzKEHHJt7JNl2oUmJr+sguxYnGbbt+2r1u5jPXFo3s9rVYqs5QoToO2dxLwCN0FDfSpPBiR+FEgE/qadDYCDp5OarzQecq+u1FmSs49tEEz4jdWl6Y64hZwl8n/Q37+uKN3/jUi/YPVbIt0LSPMTwH6I/Atqveyro4OCAZtGrU7bKLIUXr555cL0+AX+0TXxMdGS3LW2t9cXBp8QrSeo+nyBovaGnKI68i3a/U+iV0KCAIl1eJajuTJQu4B0weWTpYP57UgERd2tsPBKNKzglWjFaFoYbsv85NVisU7+wOPJ9e0+rwYP8UBxnUHarOt2i6EC2DZUv4kokT2chR4/wotzD8ad99FoOB1WuV+2iS/NYh5YJdfsjSIUaRok0qLSQpZ9aEHzmAz6nBpazAOM7jTMHOeq7eDA8gy4V95s9KtwGrqKS0bzGU6Z8zQ2JGf72tIogGCcUnBt2yBR9XJCDVxPEldfd0+0F2LL2uPqT29ihr/YAyl2A0gQMp0mfQyhaqFu/av05tI6jjiH7kwbUqHhWaEFa4R4xnQj62HFCnpv0RDMjuzbwzt+HdCqBrP0dOi8EvRhAEcTYXnqlUkC9drCr+sdbdglBRK1corFu3/Azb8XdjkR+MtkQcdrrGszkaLk9chgrKZuk/GKuitUEiigtPvQBxFzvZaJB+qdtQChQJkBn0tj9qPiOGIdRGlG2kgzYzJV2VboeAM5XdURIciUO8qRnaz34kuBOl6yMTMSsI1rV/kyvH1v87dB9Dq/aQU1q+4SPlLh5sZYRP59DK0cBsBIC6jDv1KwsJZ5zEZkd2Db0pygVi141OMZ70dUyXwJAAAC/wcEQbIl16twTaMUpWkN2UwxNuoLXThOJ0lMrQ0M2y7H1lI3wf8DDzSDKHZn7EOcdRiPc5dm7VHTI0to87N/zLdv0DXDDDGJo6h5SdzjtTNgJZqFEStoootTP3ysCu9idbB4FL8LHaw066Irf5J14FKy4uxkVXPo6yLsAGQrUT2OCURWWaEUq8WX2Alj593XBy83f2F0MxbUKaVA3VhzZiZ/hSi6zUFMsAgsxdp0lFPEYEWdWve28ScT/Xz1yIZ4pB6bExbuPeve6H8KwstyRyjWouLMx90UWodAgHuCkpJrs1s+HB9cJVZFlbcAFstJTCtjm4iiIRt1kB7SXC/mV/PuEnK5XNoDwRm8muasb8n1vzB07yhNxovKe1QIF6gyA3bzLHj16FNjQTSpk+YlHk/A8/sk2DVfZSzDC4hXcZcamf4RvRtnIh2qvfj11CLs3DzF63+c41/RfeUOTLpgxWYdB5WgREEmzXOoVw+SZWROQYZNgYHmNMvNXZZMlCL9f/6dAUSj/L8F7KN5x1zWSYa3OikyhKkIUsnJKjpIoa7GHfuqHlXINWirO3dWD9pLj6UsanU0ch4slkJpfe1T3xBQ013cP+CMetcAZpIufRGGgiULHBGjPda1vSHnrIOMtj+DKVpVkOMK2I1LgFIcJgpKBpqFETl4fM/9032XB63qGvUanjrwSybXYaLVn1+71EsgDQeUycwD2lazWkqkaGf5moS+XIC4Xpb9NqKyrzAKmRBSfNVzBur3QqB0FKkAl4voSZa5FwV6Uwc4Fvos7l6DniXtPEOpRs+3HVsQFOrNPaq202u2A2vVAY2GTvuKKdQWoOBpS5X1i8UYH2xeU+5Ke390ud/b/gum495PQwwlskva6262L2rYpoumceupjOBOsGvB2M9AUl7PPD0lpETRR2BfROP/5tck+46/lGimgIcF0lGZW2AOhl/iZQ4B++ngThVkSVN0UiOToWxCG5yMBi27Dhf/jxqcU3Ykf+EoFelovwqmVVevDHJ58onOmcGdhmmXn9haj0NV5N4uKoKLsAFdS38vNpxcotmg60qM3G0m8T33YmOpLKAq/SZ6TA9YKcklL4uZEX5Zexd2avp5QHfkQN1E8YT0v6KXeOtNeoEOKLNgPmTRtnVl3q5sb3FLhD+iN1IikqVgq9dd2Ycj0uYS9nigjwpFNsHwNGeU59nmveBXbpTGT56YQJutZkG4fPrawOYTqH2pAYhPjnXF4XHQ9nd47VWqbQlNXypMqxu65VDY+shkKfe54j9DpMZbXyxtQCXf/kgd8uyW72jpi3UPU6WjfX6H0BCuciTkNPl9gsoEV5oHy7fPQQE5qUfSnf5l/3J0KlzAQxmkeiYEoITFXV9gmui/FnmaF8d6maGoa9Zdce4BZmm1T37PfKUhLKUelQMTOGYX3tAC/kbHGB9hQN7VTu69f7E/jsowBEdQ8Kv0xqV4aaXt9gvD2FXSBaQ6bzV7TLGHtkcMtyoI7nTwZfnUMoYmaaMHlh27Xzig95BKkTexAshjde0Qu1fXt9t0zvYAa6OC90M5pvQonmX+iQZ4WuvQms0IM5GZmpDXIAcSzn0vIGQMReTTtiBqc6iCK+rbU43/mxRaLU4NJB2daSUQ//P70PxXaj5UAo1+UyVPyizHutR3WzDwO3MrOynUPz/3wMRD6nfc/ztnEnEWHmIYgRCQQ4OjqGaHsTEr/TBLBvjex9XaF7jgzynoZeJyyOkOpaqI8XB9yHc1EK9L2ZkIP7lrP+rPUoX0FsRylOpUgWlDow3FypVqYC0N8UO9JntDPkCoGjZUeG3CeZIRuIAI441EMuP2lMWJfgXIXsaL2z6E0pZs6d0U35ris0yaAjdAZBrOp4W5/yIko/o0DNMr0BdoGliZGWM2qfss0s5TOhCFEe5LILRELp34vDBq/8G0vMmTr/ISS9nk7sXTA8vY7wCX0rRDdNxeFrgUSkjXH7qj2aw6XRmgdf+30k2Xy5gnAeO5EcZC942a8Nj+eky2T2FHCbWYsMqx33F+8QJKb63ACw8O04SuyKZm5rBFpOiBgr1pnw+DS9P/wSfSP01mD56OIvoQi2pI/B+aKfX9MzkPBq1tSpdxLhbZlcib26anOe73ULDukiIKEfPOURYsmLSj4lWhLdb90n/u7VIQjhoE34JQtvmCS64DEAmvJGTaFztUFASVAVxHkjEqxgsVpBxGU08uf/YKxGQfYBI14Rco9o/cU4fYkfD5SPaPuN3yQJcMNFR3PvtwOxW01gfGcDXFMKGIlstcJ50ICcEQeMdqTC4GrqsmgJD0E6MG0mmSufcY5UJ0ikxRaodjmBkDRdelJbDgMg/OWAY4oyFaQ64bxb1Al3BZi2FmP3RZV14hUv0l82iBdwOyhJ5Ngqo0F7McndvjM5pMMnk+FstQe0RPSA6XjkqCuLH/Pnuldr0siBmrvpEWzxryobz+Sy5BZQRFbE92DdoCG7IYd5QgxOYLgpgDLA7IFf7WWa99zMjqDL1/Lb/K04UkvSex6z7WHkilg2Nr8KvPXwKJ1aeKneW4SVcm/7rFhiI3reibqFkVeeYkkTr76ktdBBay4quyBgTEerumKNS5zED9xG3bksUu5BXSsW0yCujrJUCXXGljH3lVU0AgqzgjamNjfp/nMC8UjUE0QeTDVeixDNgXjcZPUkansYTsCFRH66XbncPIa6OmNVbcN8eMk73fcxJD94NpSq40sDKOC9162jtqSPAxmBV/EvBY2/BDfpgGRN168Hx91VaLlGCgRRg86dV4u/iAILqOV8GPtdXsuMXzgujstaIarSkGYO/2OWwu6v0BajIijhTpgccZgDa+Ex98f+rdmQ6L2PrOB1FRfMyCVnyEEiJhl26lgSfuzobAGLzgFd7NL089l/4GjlkefCKFxsx2OA1VSQ2NEHajH363DgvkTFiiwOf1c3Tb3x7nb5SzYRoYRtKa9EWA6St1TSLd7aCiI5mW1I3k21qOnAqU6OZS3UNEebdHkhDnDpMYhMrHkTBm1Gb+8RWfPIeH2Jz4LR6UmzbVuKoH1/CgtX501zP0+pwDgoXWExTDz+7MCam6PVo0jhSGRRUuZRiEMTHaVmIpBqfQlYinEt39Xdq6im+hon13tnd1EwFApKzOwBBhb7FMRv5BFTe0stmLDyAh/0jSxKmxbmwqSeytgeYP/8o47TeYnRZtQrXbH9pADciyTjTBNyOGIbL0eKgtC6Jm9/FNBY+klbAnAOSgYh8PDvrFbV8VFjQ8RKJEnPoZxUx6z2eJv1g2dJ4igug5abF8X4Tn3Hhhfy35GQzIf8dbePM/1927e2nbnVmBkUbqp6Vs6dG/8Adud9U2CSwMYrzZG3YpQE0W8LzUXTAfkk5jX2lOAr9gmgvfpVuKCA7yKswLrAdEfbJU4SAn25WQk5Mz/GXKS1nC4gNuSbkszzo+5dp+t9LDlBW1/ygRLilalta9WifQ7JPiXMUwozcDqxldmZ9Ke3JX2U8DNpZ5Fo29siD0Sk/2Yf7EtQJ6HQRL5/WD9YXruea9q/vLxd3c2/j/pS0xLqABjYS1jh/i6XsmAN3xuKza1bOOvAg1+j8mXdNnli7X5t7NCpDJ+J/MyHkNSGpJzYENeiuBJ2+CIcReUA4YUbXTakdu7cIgcxVV1PFfjHf4QWobcl3a9jq7ig/u1J2aW2tmSjWOGuP8r97L97F2azjDh1bHLpgNrqGMy84C5uOKOhAMsY32ICR4iLz7by/S56Y6yJgMPf8/z5YxJwVN5+H0Pd4ne+qr1k5PwT86Xg6bKIE317CgsG+2Zo9P5VfL0yZ5g4i9kyLZj5fmzduym+LFHdfO1sKSkPaXam6sQp4iphxfzoDuRTNF/7vYCuB9NMPW3XHEgqJW7Z7l7C5LKcmiPFfYgoz37gWeKhMeumrmI6uKHXF+rvHWAEruv87dHYgJ/+zxSQ3fgtaEq5xVk6sJWUAF2g+pVPMy56cAjomkqXDQFfrD0l7PALYam37QYilnGQTjK/Lha1G/1MISvsl7N3t0wC/EWvrGnHkcDQzOcChQUsHckNYD/vvKY303nltwmTOEF7/GYAo79ZR49JCPA6nQa8Y/W9Nu1+OjnxtXaB3pHL9Vo2CsS9MnSO6LkEl+v3i8VPU9vZvvOWohIifsPrqaXntmRNEZgTe4dgvDyVjKNzEQ53lGGG/3SQ3xCVRFWGIeLfZBVyNspTo0Q2Pzq/WB5mbz9FntYhOo0azeIk+FIYYFHxTfljiYEz9JrGkTmGgJA6cBVAYzNYKl0rq57wZYjrWKiaP0XvnVwabNx1adn988klTfxv+0/dnEhS9pIZC+QmV3Ek/qiy6Vv8zjMAzW8PrJE+TPJATCgyNaP1fM2rACzOjdh91pm2RoKFRBKNnTRlARVDABeYZDTCYAWAeUE0wore0Xchjq09jQoH0UR2zt1ypKEXbSRg/HdfMUlD8KfSmYhJ9QtmxrcNiZnvt/CWSL5LtTRqrQoHxNxBvuhKWE4uJED5NzsQWKPUQMHxZv9FE+l6fKokuhyKkTtT+eEuHGjgiDvNhoB9hZ7YVv2TpV8VdvHqF0tEqdmtfiAXpC73h/d89svrJMFTdXLVKy+YMIEVD6aRfd7+6HAeaGfOLTRL01p7UnVN6eVxp5MAIyTx+laO/mhjXx3bW1oN1/Z0oKIC+HlbDFqZZKbvjzSamRHVOfzmJbGiFUnmoJDKx+O/N8/WePg3kSUw8uawXMpYdbgh8f/zIYVeAqo8s76KGgaZFC6/JHtCSmDmqQCzjF05832q8Mt40IBSH0O+4kDqoHydR0PvYeYaL0Oww/Sz35Oxv7EByBUeVPTnTCs7AZ6Zvdf+prifFiDKB4riQ044Z1ayCYsUDF2LPMrj+S7zh0OvayYz8mo1q6R7iaJdJVNHWFsQHYtl9ohNtLnGoRgNcodeIjtbTHCOc9zrtL9Fy2q78FahXg6pDbkJYpxepRPe7qTB6rtM6xt9SSi+nBCSaZjutGiSS9SdakcAd4EkLzDraPHRYPwbhiYoHs3rv7gV0bb4o8mhvDgthdvQLs7SO9R04wFhD3lCMbTUXXOReu2nVInFDFHIGmHe5WmBVcw+bmUIUwBQWxkSR4oEPvDy86KfYPoay6aNlrSp+X/dNOfGinKGXMZ3Dbki5cxlaALMGDXTC5kfbtvaeYtoVDfp+dQ38ESKG0Ic9l6tH/yaXZhEYXkX96nuW2e308kjZH3HbXS9JvUlEXW2+Xf/dQNMUp/kTBj5HeNBbGRo241/LoQLoCVU0px5EYMZm5SZmFiUCcOVVgZ3drXgA0JJwVx2kMkFnjgB1mC/S5xm5QZ8k+B+T/shPWrGycU8eCX0zHhbSoMm3rY0ojqpUdDS1qGRGzyUFiEUOH/jCNaXqp7QP2QsOjT3N+kRRKKm1anMh/+3HCBdPRoPyQeqIyyIIicnUKXlJhlxOP/DMtda0Y2JRVLAvTzfP1PMiLlw1SKzs+Z0IT5i3TQs5ilyIjd/QaL1OA5UtcnoNPwXWFK7Zo5j9gCU0Ejx+RhvCF/paloYTDrkBv608PROMf7OZnBU7AF5YsGB9BfedtFkr9dIPw/VPZkQXk9vnwYgWAtoodGf3mW2fprrSNONF7GuvMaJsjvWBGIaBrVEBzSEUBOOwbkbtEGa1L1M1gttvd1mgG1UoRl0AMV2taQ4zZGneUakVAj57ch5HvrrUbRqvOIYZ6NISiONjBlbpUnQvgvduNyXgSbbaZtNJpA89BWOL830otZ8KK2MgPexbhkIUjwhXbx61i33VVHScRP6HpsyGIy3q87Xwff7zjg2AJ8Y+VIFX7kxSfc77Jd99ncI32Cv8QXNUZoDM1aAyyNzwYN/AJjdu1SFa7G4hyNU1gEmsP/HlzHIvdjGrW0gCemJbeSGcN393iuhBaX27RG026iZYpToyjf1qQZB2Hc8ylVlcsQPguZQYwRG+0KhcSKUkI8mlBt9kFq2wZ6F5vLQUfLLlyUXQUmgVI4Vlk7eoXULgAybomGEkyAY5jbtwXDPbJL95qsxjwSUlYbXEM9AxUBUOItrwxjzIB0NuVCICtilhdEtW71DhqbqoPB2z+I1QgzUvza0ws+tKgBwQNvfxnvu4j2IclFptWq6PiilE/9Q8JvGAjnZ5+ex+XJgajNMJjYbX+9tFFH11kCIqE1d1NCzOCsqyQyllSHzCocuh/Kv/49M8rzwIuU8bzuTxFS23p1toMsN5R6R5ZqP9LCnCUPh+vNAekZikbMSJARTnjhPlqMl9iCghLeOQZcPnMbXzYxv+RY5ShimsmNGbDmGyU3ESBx9WhNYOP5vu54OjOwbsClJ9/uIUYRb6lRcWlZTtC8tBeMp/jdNhgLnyfsPCl2m29zcczsK9GwjWhmRFasE/cOmXmqfkCG9A7Ee4nDHXEzya2UAbeO3LcsTE3qdsERvZaFVdaao63m/2fYs3fl3BcjKDiekAgphtu7fcca/7/WCaJVxNpltb+nVbIoYLZOd4Ft6qCA2HtbTU/O+a1sIGRo3KA2teaTa+YFmGTfd6ir46z+wBY2rthkoZ9tjAhLu24mvBQHNZZMETe0/gHFYiEdyCg/D1Mq1z6E9uRz5Slkw3xPzfw0RwJPK2Y6sciGyeAg56uMu6dntX5mWWQp7YJnL1s41KBl2XGVA4qkJf3PcH1NsPRpyMV7EpbegOI7/1h+qPlH8EE4NpLX45D5gnT68JBBw/SNTHnjMzr4BjNFaSqgDlOqYti4wj8RiHCd4DdPeWjHmJ71lk+Sd0H+aLMyh5AMvLGpRhCf7evFgHYlrCj5sr2XmAe5gZfvA9/B2jQpbAkMqVscQC6hCdtCNTC9m0ahP0GEJScgZyaLt8q9iGF6XFOQXGaZne/4LduyE0sWswuidzKq9k4oN0YYqM56/ZF4AFioaEJ1TPLteD0VRGE6Q532SlVDDTns+JHp9iJQtpvthWyP8GFqkSDCyQ1Yj+k5yDgrtJSX1YcAZp1j61ClkHNTT2/C8U3gAdPVpM3uE5/s4dWeUF089EJlCTxHRxH7RZkJZdvPV5fuNdY8TtKFbn8A8zgFohxIhYn6X371QyEb+18zDICjl6VBT0l60OQSdfuQptS1w/JJn6atNfGQfI4BArn1B6xHuDTZjRQdM12hdzWsYdJbr+1Nn2oa5orq4ZDRcJDPc57z/WoppjVE1gD9SkvMlWurXeLMfeAkmGALQp7L8CwYw8yCwpMgW6L0OtYMLQv+JfiR/uBinPOzNFwJG5r7zlYw+T+x6jlXgBxcswP4oB0FevGVX6odcBzu+RwH1KiSMRtuFm3QfBw56hRm74DM0xyi9RA0LEOoayEtAFDHn7SXld4EPtI5bw/5QCJ7KFpeLrhRPS5wR6Bf6YEBz0hYx48+5Q9AX3sA1G3tFFC7gFEP3OYlKVc51qljXL9N2FJdVJSQwspy8YDCfdf5yTbfA6NFGnP8YW5QrCusnIraH8pqPcHDh+ReXPXVRUwA8dUr3kv/uZnJ7rinbDiJaiuznlSYtqzY2TJdns8bdlT1ArSN6593WlKwKZ7hIDWtQBw4kJwXqZVjmE9QoYs2b1wcWix4TnGgqVOPA+SWnWmg84kNwdqrySNa13Dejyr2OKXpypUgSvnYs620OKCmtZbSdmCIsYg2p60KTN/N1Ye6pYBXGZ4FCqlQSmQZLqfi6bos0ortgkHMSbNW900vnIMH12A+QvBjzt7KDx5wAgmOH8ngjnMibGe9jrwmpHDPjwAwdNesFFi12Asjnt674/YRN/gKIKh85Ek2YDPXndEEnvhF3DIfIdo67Db2GK8oRFqPGKOsQDTdU1kF8YrWL6zJJbdYDpSBoG1sjMMuzSHp2uG+RLU1W9FfWGv1H8zMA3D6H2BuG4hWRCxiQbiBlmc0dOVoAllh1GR87/J4jjMiNzRnBMPXkrPQ7/pWu/mEVPboSTGSpWtZ7/OmEI5oSA2qgAC5h8CLWr96348biyTa/rvHZsZJNbsR6DeUrIahCNtbYz87D8W7ySpKM1+LNNOcUkxbA8Y/1R76emgSui2d1TEXiaShssLf7vdKFaDTenlpP5m6SRQWiZTnr9PU0uVg9zr8LeNjkCtoii4uZOSCH8em4gL8TaCEnAqUrr4LEojleMZAMq02wnVe76EArKfUD9NnCWtqW7u1Ad18ZJYfreq58d1u1fnCmJb0E80qb8j24B5ar/r5rzNkV0fgz7dZwSEk6NM7MEb9PRUzr1kxjZCsBjj915IndwxejbqL8GVci86pFmll+RgJTTesj+xxCqGxJ94KRboWbr6VV9f6q0Kqwj4WfFCRdSwW085Ab19xsCSEVRD8+YgEvQm/vHiQZKwg2HnOs98nqE0WlXoWivO+UbqPIeVgsT10TPoElk7LwiA3adsEWxmfiNU//2YBsBWcD2be8Ch3CZdwSzyhK/cEVqApYEkO4raMYxRj6y1rnVdVpg4dXcjAvgvmxYMWbDfZvv+5dqzfoUcLfXIn0SnBWiaB1m7MX8nK3fYyesJeAldgFN6YkeZ4FUirjeJsWwIAKV5RMjVwgiRl3xVYO6cA+CDVY4rP1WV85L0YZv1pIZAc5r14YvtWAcSbpvL+oRsT0doLiGJEhNATmxHquebneyO6mKjXkx0eF/cnrrT5NmdOzWqKOgemKxonUpTQx82SIUACduUMABjg1Q8s/xAGKR71VxZVDW0dQySb4YRsM+eLrLtsvFKRTCP65OiRk1OcBJKM9Kr70piySVXfZGt+4nUyV/ZdE8eg2f5Rcze1OAYEttNqDde+bfka/mXE6F1b5y+GYFHHhHX8WTmmpIEEAMqaVEW2SN7ZnMEFaPaZRRto6DkdjWyeZii0Iz/sYm40UYpijl5O+A/68OYjNOpML1ih+XsG2L+i1zPVy1nOO2eOvkaP7/ilROGP5EKRdelGXRI/TxmqNRmdF8feUTRduVR0N9zymqdNUZZ2GGyJfJsAw4su84Ap0W+ml7vK8/eUM1Qn1NJ/E+wjbNuslPTk3WhMy7IJyRyl6DhgccXOXN6JN/WCzJyIKebcEk+ed9RHq4h9Ak0HeO2P6i0TMJjqmbVZTf9zyY4xo1FouAuZ9gEKy8ROBXwpJE8sdWSc8LlGARnfHRtvStEmIk2G5pWb+GXokPG7UvK4r9lLpAL16wLoJWAlcsukBI3zma9M0/TJnQrAjIRr5B+hpS7VRQBvaW2WQyC2NI/AHEIBPAevXVdwF5w4YBL21hLHoyzUeCzGGBv0T2/GSxs3OTUX/TTcYZrJxbRBK3/yVAq+/iBt3DSiOESwtgxKXn0qcgvvvb1RvGEDop2gVEQRYLKlIrp5BTCVrOa1PwC0Rz4nApm/5SFD3esvrF88JP6Fogf8MxNoTU9/RzzjS3EgLwE951894PxyyBhnyh8QELjgELB1iLglA9s8Jzb57k0u4FVG1ZYeI7xfrYmOuJJ5NmWW+tTfBH617vLSOJ3moO7utbMwL/Vfhx3fc7EQ0wlUoYSSrmwTGJjZhsIlLccKmfn3S7hcTo9wbNbxvaiIpFChc0cbWq+hnVpYuybyjEV2wEqY8xlhUxw+ICGTCHxZU4Mu+d05JZLnQjriCBwSIIsWALMMX8NV69a3i10Sy/08cUe0+FST8jH+DMYAlie45WppAwKnZjjU5Vd8mQyTB1qc21WzZTwiH8MmAwkV3jhyYx6p4ZFq18WapjGuuNqMTWWlGWk2tIA3urGZ5dDLNFsxs+469EQb2lIqoj4Wi9ZiMOo5YmSrtR/Yo6nt7+LkZHE6zSEk+K/NVObusXHGWChplhpfBN7AcMg1kjl9jMRBuWvzteJrsdJsJvJR9snBgWGt5bCQzwLkAjkiKTmIa3izqBDn/bNv+DUX7s//lCmmNdyEoufP48C4VpXR4VZklJTdZC8oFcCm3hEIZ9bMhv/smL+BvTCy/jA1c/XNuElVE+13kpo4XTcSS3D90tfRgY514Go/EnaHfE/zqy/CshQsZK65sGiej22BAQAj2v6p+hp9PZ7ufvBsaWgRT/Ysna7tAA99fhcqtb3F1Ksbb/CQhy4i+TadIKYQ1VNJLrqydhkDChwG5TL5l75qUeTQ3UUse+OMrJ6LOar3kiyzkWe+oCEDZ6L3K+J13jYHgRXjdsr7fWKdqeloNLZghl60fTViOip1FDfoIJaLfpR+NHSTBaksXFGDLrjJ/cOmxaAlGSVRJk+AyVEIznQuMkONITivHb4DPXFMYDRdJ3xi9tYyFIQ0ZdwUivtASwAd95QOa3WRyWXHiUfvlJnw4o6EkgvmdpMPoO/0EhK9ooVv+h/KOCW4cbrIQZLljKOnuj7PHR53lU/WnFOrHl4gWdmxwQhtGUFmn+sTGOF03kkHWJTJo4e8JD1Hw3P8XSSgwbWLcvumwWxyGGXoGDaJU3m+dFhIREB2q1BCFy64Yzs6u+eZ7BFE2lkwVGwryqYk27SeEOPpK/tOdho+5dmKzTqf/T/8I+ZAz88abAocILn9Fpj5Latm6CzGqsub3t0iFryeFLIDcsVa7AYbs4a85buBz5/TbjNKCAwWGIBawoVyrJGTi5OLb1lTnROoSxYvNajWFpzxYMv3fXloV6Vk5mTGiVE39c57naK4NZYtmgvajptzPFMmoE2mzc4WC6YEdIGnwgSnt0NlSkPGmxssqZlYDh6KTUwfQ+zuwSuEO2Z9S1R924/Kcnbtm12uqvJ5tZ4ms+paNJpWzAmY79pPFgPSbWTt5u+IOBQD3z7Rl2uyjGHnwIsJZbfkvhp3X4NWe1C3RbyIFPyGX/fYY7opEkAthE9B72w/EuvSReEMWziMZNTfHCQuSOCzd6z4nfo5xdH+Ru0j5mNrhLX1AiARD7M8QWN7jK87L2xbgzjuVdG4BVUxCMzImJ5J2F5cCeTNiNXLIOZhJ/tNZmyD13mpl0cEwo63O4YPibwFOvnI8G+qDySDXAIsO1cqi0SLcQ39bvHNPjDGTKXDMUmxtZHeHLLfFtTLJM+4SE5q+9YWMMLP/u7I/qeu3wUe3eQ/nFkGw1gjB62VVbeo8KpMuJE3oDGwjzWTcvOwaSPm9n4dCqRTJI5VpfZdOjEyBq9ESnWepzZ+XMKbqCHTWUXOlkJP5Q6Nj4h2C/v0sjEkp+bhrahN1rKxwuEqj7uOeM9VyZ75ecOzYG++nuGDHUAXkUOlFKwWGt4ukxfBLzDOE8YPHNoIBFHm54DtKAr3h4v3e+lMO6oP+k3iqRbxmjGP2ATApzSJiq1K6OQ1LijGfwQekeRGkgqVpTZ0vNNfUYewaL+hKEpBXRDkpACwPs09M2yhVftB3MI+TvfO6VBB4D6TzEj0IpLAbepwI4mMYp+QlnBJ9EnUp7S7SXZ1zVnEIUa4dNy6eOvz1nhpI0fz1STYgc5iXXl+/0sDKj7QEfeeJnLtH4zvJElIwUnkf98aSp2YI2oemdoNfDQm5sCGym511Bbx0f/N7h7hkZ0V5r49SQQytxawSyeYetF38UnTrhftxuyQ/j1526LwP1maAFdi4+aNv31MXQvdPsa1HU9eRlPpZ0o+zp2TSu+i3fMruYQb4M5QSTp8vJHSni+Z1vZWvdPick5iyv/te+8odtYSc7YMyVoo3I/fWjjphbMUlH2bDOgb3AJ2dPIA/BgGVEhBmSODuA5K/yb/BWLbSZADxPgQVbESyYlWU8/lVu3Z6b1iSsBouV7rEqXbuIsWyf9cBwuIgHOFvUTCwPIfevsqIs2XiokCtyoATPfCw2eEpxSzAb3lsprCzC/15cg1PGA/F86G22m9pj53Ds6CVNmaedHy+xSFiBal5plOQCMIioaOnzuSwWge6qM1xjqb+C1pDEaLK8LtRtBrsdrF9SqLrtGlX+JNKSyuDpRzGGfofLfOuJ2ixsA9VhSwI3BZr6RvRCj9/jePBOVt8bsoggbk7Shk1HBPdbKzKnid6lJZOrwhN5co8pJBw6ZHNJ+O71qKwHAaUUuw0SLIfn9LgaqRW4uyGVXGiaOP+VaaByyQ38lU4ceXa4vCUVOtjZSBKsFJfw9voraOCArQshPUSiX58X2Xy/bSClppWe8uBsVJFFQd+Lte2e5b8co0b0/zVdfROy7RD/6B5yDEA8x+mybk8OrlipZVyb+lynuDXTlYH63HJUbFcUVVcKOwhWGimtnQdxTIMBLF0bEh9S7E/cLa/veYk5eZpYo7+ty73YCHxwLX7FAH2MMfmNaMyIvnPTgDubLgUjRjpcPr1222WMdX+PO5vt0iJyw7odVGPqEwXXKl9GcOLop+STzY2nDWUWHOSGp7qIvGSUN2WP3vr1yaflm5FHdj77LX2fpDhZEqSsEAHUp6PqW1A/KHebIfPs8n8Cwizxd9ToFh0YalJJ4BbkAoxh8YxBa+aickI426zw9afzkp99dy1neEm+CDbUqSChZBgD2epCZWAPhVdt4MzPUCZ833+3P3dwThZDQS9MZXR2xcU399OBr0Js3kvVZ+psu4vTuiUpczBRE/acluzS6ghiU/6R1gKDp5KKl0D146rhKMSY5h3egPivs9UHhD8Oe4yb5QrrTAgGMAD7ZPxSmx8igoQsNzTE96DqP1MB/kTFNU4kiBQQ44nrQ2MOM6/qVXNSkRADysrG77ypyyiRFTdow9J78+A0iUhT61KD/L840BlTuuoU8RNX5d7lzjZD8jSkLnNeXRnx3/BdMfv5t74Qaz38AgNERcGk2Dx37/ffqQJVHxvnoalnG7CSJjeAY1fxQoFNzJ6z7fDH8a22G0IvGMnOs4pS1TYNA9PE512BuwfjqzDxHSMDww5A+JnmUSp8nifbAmBWbQwCOTrVNfJ6ty8hRWavESM1kbcQt5Xp3rWpCa2iw6+nJ2DzWUUPrePkS257GgZc/4F4GwDDvQClwbfkvWVYkiv+HnAhBK+d1EaYRMrumT8YlzrUvHwOz02OQ1TdRvQDN7qT7DoOellubtcFohJeet+1eJ76SOkUNEqZl3wbXsXtCWKPQGbyftpG8FeNromkLyDm/9h8dVLhP44Zjsan/O0b2wy6cEwZm1uIfEjD5moK6XDoJKm2yZ4S02q8szJknGW1IefKTHLMzhJWq3m6XXK8pLz6uRso+JJgrE9nVKsadHRpsgSWwuwJjKAnk4h7d2ZSp9YCVrln7X+Pimi4tA1xolFYj1aO0MtRp6xQ7DOAlCLwBZUXtbBmnJqAB5D5BdPnRavLZztaw2vqMkl+T5OS3Ok95mtzXURKYGIAke1mGxlNykc96XJ49xnvahVK1cMc4pjWw0buV0xnGO/LiucVuJOMEdh09Fb4+jpidozfZR1N3oRgz9flywNHCZp6O9YCnEmpO3e2qLpD37kPyYRfIyGZhdOnn1L61H6l7jzbhXPSKJs5n6voUbFKDUujl3WslGfyP8WykhkMJLhlsyI29UZenZP6UqbU4ytyspPTvvGY1Z6ahHl/BvDMplfEVIZdA1YUqxA+ih6tt/GljU5mrCb6tld+gSBa8UF5JQEum1oKGRWKV6ibFEJoDvdJ8zw4SccMfI4uKVLwRM3uR9ekjqLnBzVD2qYWTIkiE3KU9RXwdrQdfc8w+uajT7zJYBJSx+FNHLFGsORAayVEtKOlVEUmAW9qQN2IqX4ZLauIF0S5hU25hdAEsvpBmiDI6zxGEDua1MdBFS8My99g6DabwpXvsU1E9LLpcEO5wG8U3BY1speghAADHhto8j5/xUvuQFJQX8NcGr3f2Jdef6jGe1ZB0TyJTEsqtV5GlquMuuPYCeUOpnEdMhN0BWwYG1/z3crlhoV1sBXrCBwTf4ZV6YsRzLu9EGiNBIa3Y4yeTDOCM5eDw1Yr6B+M88Pf/kN7TcqpOa/8nkp76+ZYpI3qAExhcI8aerZTX+RGzcl3UC/Av8HngTJoQpW7AzzMQNkJT6oAtsFuu0QHqvmAfgnopVsZIkfrZHJQFqjLzO9Dso2gk9o5ZUTsMpPZZi5b0WcfvdH4t51GWt+wrfekG5YaoFeACDWhcjLb++CeistRFfmW8gqeq+SwrKHQllEi+vuy2cjU3OlO7GIVzZjqxTFIJZGNYRK42zmzaUJCgZCnGVQwfsSqQE8pDXbFwK5hPLTLx4trSd3LhLl6jCLLjZa3e7QMIDbY4+YOD410grq/GPSjSJEmkCqkBK79e7D8jsrsRHBZbEAiP5CpnSjPSuMeNcx73WypyP8ki+14gSJUK8a+nNu+MrRyExMBeJ//dpPgzammiQ0Z+U2Tf8wEMOX2sbP0RJQwssTnxBYwHmseDnq/QzdZ9I4vlLx6le/1OAVaciIhp9Ex8DegaoczlP7kJUPUUgxbLzq0jyMp094F1D+atUEhY/R/vNh2exv3YHBTGTE70N810Vg86W+oc8bbITXWpvUUMehjjcF+9/4xsMIra82F8AKbg4YWTlaCLh+T5pSa5JG/a76zEsza4d1AEIOvgljNRSCH3Yu1D+BBfRCkjEkZkQTTR7DQoU8H0jtln3TD5iMGPKdRsP+HR7dAeF2vh8XUV6v8TPSVOw9ThhEayVZsDDfc703lfOWGjRAp2y4d4+hbDFdRJkPuLQKMAeBHEwqr/L+R0VgdjLMoBtLPgXJlB6sBqXIAxzRqclYYdIztzF1FhzPApNZnuPxSoASzeZ5ARVcWzVieBImfxoYsM07Y4sWdEkgabRMmUfnRTp8EFqd4oEhyFAshDF2PAcBoiRbk1sFJBr51iSF+jDujumXz8N9sFIT0iQXHNW5oGC1dnutsjdUV/UM6a/BoU+LmoXR2ux+Y1KuaEhbq4M+sTf4C8XaXsSCBiubE6cK4fN4lDd4F0A+tYANp6RUFsEfZmBTH38r74pAnYsNbDDVvkSAB6h3NmfMV29VNRRftdrd2YVY9yF3Bny6k5uh/W99+DkRAcURjnXtcu33O/txEGfYrMv8o3zvzOq6U84VcYySkmgJwWG6LORIdUYZTcztzxb3/Y3b13A+t+kem68J4XAGydoMm+P3tIvSTU1bMUPqTZIKemcW2oLsM0rf3XaZcfHeyH/W6qIH6AbRnAb45eCwImc9FXK77/15aF46Rc/8T8EK21ThtWWbsMTDRcQJb4OGcuNAlIvCzO6g3ZhAOW4xmF3I7QNBINx1XiLg/9qNKpK/3rzvY9u/smWvCeEvXofehHs325xCFTqWcBxC+v9z2lVO3mLUoIDoFdycF9ITnYPJFlF6sXGE+UjIFUEjZbcmERp7bQOqjZqa/ibY/5OY0CceLt1SlRW5sPGjAWn5pLexsGzk1WG/eWgcUk8LUpI0dG2P13obQ8FMFi3IWnDb6hwgKhGGS81Gvvw++whvWTocaEgjY1vbr1yrKRsTLv7Qi3b6UDSCg30M4BL8DD8IPUS3aEzYhUzZwnj0X2u6f+QaRLeUAyJ40I3Xor0jl6wWo+6mQ6xrkkmA4ypMVOw+mmjknafjX2Tq+4z/ylxXSBvYL9PHhQHbusMKvzacFQV/hZ6HmccSQt5NZdjNA/u2OXz2Spcql7M6JAFPJJK3XK+F4afts69aes0/Ym8iacHxk4/HtXa3JhnHRaFbkOH16ffbxehJIWRrz+xfgzck35eBKaJ/QOrhOlA/yeC+r73MvNGtfgQFzKkfNyy+3+7+ziBFho7vdXOon5bcyVzlnGYjRQJ2yrE6KsEy6/JUrNKSR9vAZsTonlg0ZALrAgNJwrVdbNdMQu9d80QyJFr64UGD3zPWXBiTvbGVz/38ZFyhxcNbK/T7LebEKdfH24Te1TNUkEZExXPC3/vQgYlRoD68jVHHvzHnuee6lrRzf035Q9Blko1Y15nzfw0YjSwHrF5HRnex2HcsSR0mvwWAuAaWD84jpKlM9dVZy92QoZDybd6jUdnF9cy5uP1qsctMpQS1ydg/5PIbe53ZP8QisjG5rxM7k22UoU3rvfvuvakTqaqEb2EEA5dzFcGsPVBuQC8TvoBmF0OxYtL2kmTrokmKbbV38YE+lL/x9+/l0Wwc+HqnHwdmuuWtl7YTRXQQdKZUpqhsj45v2rCmZQB0v6uteG6ZJPg1LnokbIADaFpVJYFpeVX9h+1LlZOFBx08zhXlPIZhPBmrsiWt+OQMv1/sO2irqId8Uo9h2aOJVPsCBo2PBXW8fdBX0iFodCFgHzdIjXSuzJkfnf9GSK1xOMiyYnEm2U0XN9qEaaXFJvTaONyEyaxIl7+wFHdJUTS5WhfzOptGGNjOCnvnBZWPgQFWEydPzKfGY7smzP/5e+vFjIVObR9dM3qKeQVsnzFy/mmYTH7KbjzaF6V5MC5Haq/HFN0jYTLWzU/jkldELoItjJOwwmMHD+COOIzWXRnOuLiIHgIbQO+oe0RPDNvtSs85kFtmETdyLAdaNb6JNwntKyvJQp+LQEdzBXBo/DmQlctKuCIxvhZ1GLcB7S5HocAmNaiZzN9RHmc2FsvBp8y/kQuLoi1B9CY9V4yRO+G98+yA/d2YTeLyv4BCpFnw8SKYmlWDJBqFlaJSWqc8eWYcpkRRKtekOCy/Q7WB9rMl0Y9n8q43GMxdwQ45IQd0x+d+dLOrvxDORfhwx9r2n1OEwkyChhyGNk0LmEH+5//DoteCV5dJTewgbA5ZLHPoYR2eaVucNFZ90lBxmr+o2ARWgZl3IHBZBenZACIRpLYNXiKDzXY7klmaJbF57yW4qzENRGgHZ235b6ThlJeRXv5NF6eH612I2NXAvPjazWPhDkshBqziNBpGFzL8/BfODDLU5Z7kbgjvVB743YJfv1ez9u7jIpdETTDVn/uMZa/GTIJw7m18uhYStU8KqsvgV1iz/1mHb033NxqPApI8AnN9aNOLY2LAKSE9xJr+gvt+U9j8rDw7pGzWLqimN4UuNLOjClJgAtrVKmxeaII8TPINLTX7DTAZoHxR83NT2iKDP1i/ITTWr89zDCcW1fS32M/Fp+EJAcFKfpkx9WO2GWIU9LkIifYB9UU6Tbutfcla1h/aRACAT4wreBXtWtXB4THdGHXsfZIs6DUExsmO5CzasXW0GUmbWgf9v+dSgXy0XLjB0VejdtYm7LYijpKcrSMTXyNXtCKSV2lof2XVgmevCk25nK1g2S+CwVJlgTi7JU6AxEi90tp5R/FvoePyAxV2odJ8NcLMG8/1VxTWHf2Ra6HDYFtHFUVRFbYm+et+7zuFooQzWrGeXNSmPTe8O//Ymnd0zguoSlTQb/gk0paUbT9W0jHLIKXjnFjFYLQhjYYeE1QzcIwLgbv6aVinhhViTDUZRuuoFVhESU10zKLVeaWhcdaMMik0vvmsIZRXs1awLVilJWKhdJfslaeCyqECrSYNii4E7InduiQ6UdqK3Pj0kL3FA3JqEubpO3QYuxZDdjN4M+U3YRTPSs5yLgeY32FVsy0aOQ+y81/J/s0S8xP3L2KPwv8LXPrsJc7s8oZVhJJAM4S92Env+SsaJwM+IpTu018MS+wYVotlLHiNQ3Kfvq14G0jk1vknWNrj1J35WtNs3FvoaihYHUj3EBt06Jzp+oKyU9ULY5cCE+73dpXbxrRCx3SBuJJ7pai5YbjYLMiBvG5RJfVGlHADi53uQxMNP+7JcHC1GprOw5Rtn0UzV7tXyhogXImYExW/RZiBVwOttd7SMIBjWJ8XpRmBh+sd3wruWgsV3mePZ6nQ0WFrR1M5Vwp11xNtGMfrtvmxI4lquFHup1PGi1HxoUFTKVTxXsGQ/3gom8vg0m37WGMsGfn/hBU/DJcsmj6r0VNeDR1wswmMJn+aozVExDYY4vAvmPlb8b4G6anUJDJJyUmLGyEgs8c0xQ6ZEZTDB0T6YOaff4SMuHWXEcjHY/9AyZRs8Zddt4h1YatXYAKg5oVvH+63X2ylsJClrPwr2wBqsL9pSGiXIzvgrsaWJY5ezYzUe8m1iw0MHscC0eLp76oZaqQwPEOuCGRcttqjonT5Qccd5nULqOIw5aU7tLG8ccE+qlQ/1H8zPVzrkiXZEy42+e2/RuZtbKx8Tnc9GvUQQ0sZ7ySehYfNSf/KpQy1t9sDlxMs7lowmIroDfw++EDSQrPGSnQUS6VhItFn3YJkMfF9hgCu/iGT7x9t6k4vcKcc1kyGVb42ZSkVvuIIyCUNJjsum/nsiXbEMU9veQ1L79U12He70Y8bTGvU8vR65F9mfxiOkj1egjC76holaPdi1fOqdraYRvBPvP9P/nqyOfxCYfk0HrTyeoHsdLEEwDsRAGyAJti6xhUEPoH+1EotebmqPWEvngOzYABamxXKm4R7O5HemeKSPHbcVgySs++zudLwBdpwgnZ5mqkfu6Tb4BbLgKcUFmPxyVY++5K/aeziTeMi781kkh8N2lVudfXSJzW10hGuT2ENbHQ9bIskagh9ls7e6nCGfNpgi/Rql/AsuOGn/D/eYlmtnVYiKzf8Ssz3+LV418UR64SfRh+B5AwtHyMoqvVJMvJUoMrsvHzXXQYU9Y8zjq74IcHeQITT6AqejBhinvX38k89yXn0YURkRRCtKqKLe+SmCP7bUJdQ0YoPfYHnWgYz9hj0i/DXjYZfUXd3+jNPkeW8XP+TamgtW8a++iAbgCrp/LGEPg78/BFsqOo3hik6pExFLAiXH2jPVpFGfYJLk5jKmNC1NdRhKrnszwE63uxxNmgqNCU4pY35OTy6H1RRTjkbSRfbyU8VBGcrfETreyyfEQviuCSsFnnLlAY3JjZSGeHiFwOk2gYOqNRgPKWYmUSzYlLUHdGZNYe8VYP8r/SLvBAj/ggMcLkt4xFUUTwIP4ujZ1S8JZmSZ5L0G8FpUVdTwo+g3AQJlCylBj2QesGU7eTpPsrSW1bjPufr+3i26j5ajL8OCE15wkrpZiYGOTLDoOqBbIbyd4z5tpmrOiXT0LKD9yUgIX3xvg1BPqnYkmAOCtsvsh1kNpBqGOEfsffDjyAN61GLWNKBywmU/SPJ1Ye/OVejBmr7O0giCo/XMKy7Xwrpzdn8EirouBYWXjBzpHIWSDfpgeV/EUnfaKneHOI/umQreZEgHlBcwScBRhJV1QhqJLugrqvzquualy9cDn/0OhF94VVy0KUdv1DT3cyNkSUqj9aUvUARSQAvC//NhB4tp/1TLB3OH7SJlXu8yQ+X3sJHhA34G65KFCorLcpavwNqSrT1P+chKHqN9652x4taTgNwYwdTm3el6im4tDYy5d8f/hfIcgPvcUpDONqLx82mVzdTkt3HH7YE7t20WSk0DVIaEHVh1dYldvIVg7C+HgtEGZ/be/KGzXQbiBgsdcexXkE0KMcqQwoAeCFU3uGUtNvpjc9rSJ2U/g5b5VfzBeGr6foWMlYebDBu/97mGocepRnKanOvOVqyBh7q5bMxMAZ5iuKtMoXBiEixg0seAQ3+YCRd1sUbMp0a0ApP6xg6O97cYT4TCYDrR2oXvp9s/nPpKut6zgW0PdtU40nt5s7Wf0LrLFyTIOfcwlE9QkUtEg1pGc52InPoSKuvGuDUBMOR+v9f9ySoTqvlFjwkcUvLtq9HI2LdlAg/RMrTVMFu3bsP51hc3zLjyEySFf+dlK5VCCtMBLL033E65HEg/PnWzcYMJfyZ+1zsAYX84It9oMzDSoy6kZA186wJrU+1bOB7kEJEi6r0ZNWEJeS9637ZEknDx16gR/suDO6f4cG3Tj9y1hJPmf8/g+245iX0gVEwHY3yieo4fgr3f9s6Hhuyzsl8BryOq/1n7Qbe+GhpOYtrbRWJxk3W4sPEOWWh0SR+A1YpsQjIbKX2oXn8DUuPt94K0S3QOdjC7AunuShathMFJMF/1h9rqLn1pdzqp0Cr03DF0hurSjPLBJvfsz8Cc9yDF9M0NkZYCrdXXaNF84sDH1WinlX8PF0/5MdsNWdo721BfYE/dMisnO9qI8dWOJ+MscoiUHTI8bz8oRa9Ks2fIXy5cWBocAedzAQsktjrESOKfVvZu3iYSeNMKU0SFj/LJEkep8M83o1hJza7rrqlhUHkx+ZU+j8N14Auc8mjv8EXM1BRYztBHk2dRxqwg5tGVq+SzRcz5Xj9p7o2w32fpiJPiMyJ6xGtYUlsoPbgQKz+r1WqbTYvUKf1YTIw/QndFO7B8VXVAes6mQUFjDHKewjw92uUHJgo85YZ4OVjAJ3t6TX7B5V/+pUyLtlQKaGCaH/gOt0TPyhgGKwmpNV/Egp8e325qHQENq9n6uuHtgY38v8I0fwx/C2YIO1wWLY6ktgIiS9jRVj92LND+OPYZc7DUxuVxosg265Y4XZwW6YvSmynMdNiKf5wOs9w4k9aZdfxUtwfw5Ng3keubnDp8dLrIQTNHwZlG76TNfG80KHivDg8okhvjniNrMPJGFMUB8UGHGmkHJ5aflPFR9s2VH/FRgfh7nd8EYqSj6oee155roXh+YduxmA6XgBMiy4wB/Kha9ZkOZdxEL7pXtGNgm4sylIKIfWBSXM4lq+w3hqXQDNRcf71lOkEUtEn1AucJgGHCu6ExitAH/cvZx4uTVjiDUkDUFgkDjE8SrLefcWCx28L043lhRno98Cgdd2rMNbkuESeEGHkuY4DRzYmqqTAJrD68b0aCb6npgIJJSrYr7jkSaqvHMOCTLBTf83Wp84j7w6O3eMraPUehCfHntVH92BrNJMMsgL5KBY2qPvWX7ocSF1oSY2fm1XtRFK0txwA1dGgMAkblG2Gh4kSKk60/Q4Cs0w6nBW55JEvaxyaLmrDQ4a3nqyM6SzZSptWgoUNFttN262xXO080OlkLrTBjEqoNpO/WUi32n+icR31Mqqiuz1sCVWH1biD3uRzADRlMWENq7S8cgxZ7zBgFU1DNETDAoowpmhiZQPBhkbVjvhVizVULO0wS1UUEPMtZStU+kBi68nbUzcNHtDglyfL6EsAxpupNxABNwtl0F9Cgn55VY7xTaN39ul3vxQ7z39dGVyXs/RZxh2dOrzQoQ4jL3ZLBc8Nr+TMsCrjXOaM7hUoKfSG8Oedk22QRD7sQ0K6mVIQ+6n8tLR7TMvc2M2fHV/Kb4dhfXzTlkexuKPcRp16hok7Sq/Ne3Gbp5SKL/zw+hOLkq59DTClitDJMWGwLOfjWyoc71cqPO/ufN0rivk3uccBZm2smc0/dKD0Ta4uj1q6Jwu/WuZPTll8SNos+hGckTrWWVljeZXLVjKk0acrg6efxXiqjRRJT+1IDJHWmneqJMPPQWN4gsKGP7AruE0t/7yF8I5lfLEj/zsxv5Gifl3stLyIrhZ98tW4hnxGu2ZmRqTQE9de7lExVSpAVK0pCwacye+aYwAbXkRU9pVK7Nmks6dTSC1ICW/xJ9R5+cjM0nR1/wePn/e9m04Dv4XwlEtGPsMU5XvndWpiPIfBjixW/nQ0SYD61MwwrPxoItOtibVVa74Q+El2Nl/fJKWiXzQs58mofsUHYv/oUIOqAxytcRE+0xnZ2LrWlAxKyOO5+t81VB/HY/WYo7H9Qj3Dem8zStB7HYMVo0DoGUMop4Y2Wj+mhySS977d7U5FF4DlDBx6WpgdIfMPXUmBv4ifl8ooRhax6nFStbivWjVLUeuxqLweA+KsWBaZQ2iOOVpr0VDrMmhG3t9OwkaIdHK8bnDAkYRV6Dj7sqX5LkJyscjc2XQW32SPDnzeSESwUsbEAxjVnZ9tmpx5IEQeeZUbva8mqN0KT5PZ7cWx1GQRDhRsDTnkcL9MC7/7oK4S4o57gqjkxPSNrXxi6Zcf0EoT8QYJCweT8D/xqCFBuTxJwHLlUolxYFNkGdUC9tuARVFka3CJLtR7Alt1zcBprkit7krKOlmwiTU70IG2Iiivtqy2lyCNCRMQ/z7eKLo+LW8r3lqLw4YP70WGS/Os3oE5GpEEhV825vrA8VaDJVZHk7s7JweqAbAiDB4/3GBLx3FU/F1qQJkHd2MryWPP8bC6moK1iyJMe9qHJPnUvvc49Tq9TRQzBX3sBg2MR1f8aycm//u5sxOK7YhW0n8XpVvp2Vpn2lZ7f/0MKl/jrPocFVKbydt6xYEiHsqNrgvPwR/4OViWeiPuEu+vLwLOAnjfb37Jsi9a3eAi23upTJqQ8CMWtJmBxdmxiCi+jplUSXWFineh7aTNRtsyxOMKcjFLSAN/1s4NfCDcAG8HLUc2etFh3DQDypW4aEF7xDIAggZ5sqcI6mXfnsQt6lWkxNijUevInUlASmEKcR6CreiZbU57HkxPC6QwTvif/v9wBCvZpYIyl7W2Jtq3+DB8yExhTZU6/pJm47zS5maZnKELZkjkh+AvARDo/3YOIIWo+V99GoRoovdOBvIghE3gB8IZYPCAaJ/sIr+pzmDRjeUe9rpZcHY61zIR7n6WQ48vCg4fyJ4A4qQk3khUs+MoA34lcCDvI/KoPO9koGL0jWKlyS5AD6rNbDzrIiOcgV+2einYJ09PnpOohUomuEdkx6vUYHaepMweHbfFT9Hg7EaRczZ+JVvizybsGVANeZ5p1BoN36GMXTNnSDDIz5ogEHep7ajSvSbjItirTKScgSgPdD5OxrmxM8czZD6DH/QRHqh7O5bptD2qjEIJuLcrTJbV8mfeypVZgZcyXPSg7t60gpFqvYwevjmKS0KSNMqcZyNQgJq2Dq0S4dSlOHMOEu5rsQ68nEYSpq5rdxZ/mnz6qNw/aRD2vcWNYiVA7yfs4clUMJCpkCBap8efY5zhVXfGVPh7KvVvOME3pBHRPK+Cu+nsR6IDbO09NUPe9MVUBEKciQDneOZKyJ5qjlc2cwEX+DDT/i9qTwwhN76Ut6d1CEwUOndei8AaD7eeLIxld5nZC7KVV+f9hwVz8mPo6gvFR3bn0t4umZRe137+WhkQnu9xh1d/Tjv4pQT4G4A88hYyYH/JpFkAhRQpiYzVNRXUZi0nyvAf8izdXw5y8Evxin6NECemCTu1OF4LCzzrDXVEXkUZNh/yZ58livcLkR4qLzy99zX5GSE8xKs9/FfjCJDaqueABrk9IzjJf4U6QoGM8r3EDh2uwAdxi7DwA7u6HM5vDVzJEBmsbUKg7nE0LsrdC21CBcru+IJMKWsjnxTUr6By/fTglQECwRmy5ziMitZnM3f3s6KEauVoQBwgr/cwP3ilMVOZIFuMHsrimUMPYIMKqrion6jhl3KDKdh+SyhFzIXhKn4ZAt6UlxpL3sodOKsV/9KKwOhBF0ZxGLrzEJeLFgbRolPYH+6GHSxzF63GzNmnEt6MWYiIuAg4QP9xuRw0ipUZ88f/m+f3/+aPL/6t7iY6K16+CszucfQeCwVRIYo0/cdyb8CoxQ1eBSrgmXX8q3ce+kCPYvP1BuMsIJU4DZ89SxWonbeSIoZC/ewwFCwLVR34OLh/jG4BcCVJg5nmTIR6o3OeVb54+k+Gp70BVci+gh3u5UO+khAaxuSj4ywE2WTtqSK6F1gjJVB1DNXHgpQoRHAUkD8TLqC51CNVpuvLsKv2t4RaK8X4dm34Rn+IzA4dVC6kczVOYlco9xsaPkrpY7rL3JaxeZyw3d1u6aZUaiH4DfvMumlfxAnqAMAQ8XaTur1UMwvrkWfARVhuJK41kcWsMR5bjYSid/KJNtRoZMb+8L8Zhj2yPL4y66MhVcv+B1vimE6jhe5rk6a2bNkGLen1gBfcpjAGRplW1UnUSr6Y+Y2XTdIZQ03WuaBtiWvMV2MnA3PLRsg/ab+Gle7X1WoDSU5xl6o5oU8a7GxWDdijQXPNvaqswtcMzC9wlFxzCecBqXu/V0vHPAwuwtV/QlYcUcdvY5yvsgeTGWDkTJ5PDQlcap8lestoqqjMVexmf5FI07Gf3lsIAAO0QpuTD6vm3ADNWa5+LF5ZIs1SbY6Bw+PPnHPAS+QU1wWF+Ixwj6bXfOM1o8j3lHy/acim9P61GjRHeKTn0N5tWpOmNL+BFa+eBHpM4JseBr7g27duSdv/m8qQ3UuYZEh1ckWOkr0bchtu62B7FxmEzl5+KiEKHdqQp2V/toST8HZnrhuvzB5qb5F5RCGLhLQ09kXWEWmqa/s5AWkdNQBRe2+o/TLj+LICL4tRgGhHfbVI0J7NBBoZ8WOB499r9XNj3jnleVFzy6xVF1EHgvqnmbcsdkAe+panowo5RQdEBBHr4ltKoyQiGjJvMaV44gBv/u2dpLhmHz0dvT0B0pfdrtE35ADafDx4aTe72RyZJoOXxX1pEbPmp5ftYO6g4yr9tonKdYIfpxdLUccN6dNKz+wpjiccsRXNLr/evSxTdrtNtcbGY9NSJTv/OcyBfSvE8e0yLeWV2jxjhql8a4r1k5qwoDHdD23brSDoDFE/uYqMBy+mfv/g8tKiOSYHOzQxYLJQr5T5cc4+A/+7aXlxjSXO6AUfzbVhPvft25w0bDk5ITOozXyBiH+nka3l3dw7lp8TsyKCylI2GmB2vQ9BaJ9mM0O3bGaPdaz3YpNiNgi/jjKHF84DLe+o+fhMigRXHYdukffr+YTQjwJAf+VjvO2rt/9e76zVmg/E78jY9qlre+dYgDpvedSF3aAeAS8EM0nWC6qR7CtcSQOmjVJyQMMZLxXA7Tj/vtRF9eEvIM0RTsFxjy7XJbhLxZeTlnMEuCJILCCKjJCtwI8VhQ3X0tftGy3DZROItEhNqWow3taMdpbD1jv+Jll2nKstQJ9H9widQ/YgCgprsXfaHHT6tIthm8k6PsYUONRQ6qaP3Sti5KWYtDZ4Tv7l+mqiETsu3pOunx87mD6woejtmX6aWfRRnZv4+j8sQdkY4mEsxGDFQp+hBDX1Y+XfyzKTDsmXVNYyk6okA/kZoxo6qh+qZx2nnV9pHzQa5mvB8HdG72XaL2oKz8JnwY2VZZhj9Jk7Eu9leti25XBy2dOC0BsyvCzEZYHRyDzD8f6wUspc9KKQ2mz7hqvNg3zq1rbGsQ4tRU7D/qgh6XWUlbbzPjzgtD1fQRiJUYFIHROWg0l3VFGSaSrVYhSkXYqEKzAtJ/izWvTJeZsotcJiTuM1XHNwkl/YFliGIoCMylLyXkYJWwXyr5SknlUDzydhLJxXenu6B75vN3UZCHtiqGf2Fv/M9mBh2nAvbhM4bExmB11pYtZOS/oBtNrZwPY2A1+UX537YvdHRAom20vkeflf9Nzw0UjmNcXFh6XDsu9Fllm8eckAFNvL48qZvfsN0n2aJNoD+qG4YinpufMPoresJGNgg1pY96kDZN5bH4lp13b5DG9UOki6atHsRzwDIPQnn5GkWqhyXDVZDQVQolQM6wGIliHywwSo1UBasd/70SEng4SoIu/mVnUIMViVsjLnXezAjGSxClq4Yd/AH8EGHzQ/Kvw2AtIHajtsOWlMbLt4Et4OYzAvhvBb8krp2j50yfsnPgbeX4a3+tyEDrxtkSe0sgpS4ww7pGwzuA8HH9OLTV7YEFJSJDv0oIwCwglMTxBuU16985t5zB+jiOIqIWSERbDV7Ob8BOos4GodTLYqeAQeAUXEt1luSMtPMY+EeHm6hffXmSrQv1sIKjkYOyMf7hUfbqxFA3iuwUrLBECKX5s7ltlV8G+EFAGAMayD35Ie9Y00q0BDQCPOJDms2wt1MWThVlLdMUgyhIGh7l8aH1TuUKIxthSv4qjlywgkoQPIb2zLIpBr6do7T2ZXT1zFgbJnpJ/2xlTNJ6QRCSQupNSXELVVj6tCvOkDrmbrTSISJ3DKzrkt6xgOFtDAP4MG2ZAAB1jb8BdDHYbCjGbaYbuS/NA7ePISqTGUNC8T/NHeTymZZvV+tEUOalta7/29VxvH+piHBQ9s007WdkmZsaD+IyvqSnlH/t/4+4BGPtVn2eHfi638/KR9JNKGdQG86SwtwBMMPT6v+tvZCL+9EpaeFz2eqIE87M/+ViuYNZryglnyeQj5D3/E+Nl/YNufM6ALtUXtPuWcpI9x0qzUUQF0fuJqJp5B0lW6y4Hy6ULLg68Wa5eFlEAsifLWVINPLUmpCzITl3YdxVSlvCRalGkvFkxfnCdmk9fTtQu72jNXDFiDfext/3dcKmT2JcgZm/djHJsokYeZF8AlZ4CMvMkyA2tlfqvVq0KZA4gIe/MrDB3FgEpebv1NZ9N+/eKsKI8dccZOW2VX524gLqIA9Dy04SNOfnmnpkpmbxJNyyerNge7gkd58wmCRbC8ETJknxtvk4qJNurfzJzuKWW8TpOPedznrMqsrfpRp91U8a/vm/JUJPKLN5fjZhNM+5Sfzkfrs3AJjCprAPfGZRjiLtaxizZRCl8kbf9+FlttIvZ/TS0shIY14tPpdAtsgwqQi4dW3nVWf/2Ji5amLef3Lwzi4J31MPpw4/OIPn1P9PP+CqAR2n4sLYgbRXURTqcswb3RxFfBw9bm06RKCIeHKetUDYfRgMXj5yhRZa4vm7lJfY3VwYC7KTcLbp0eXA7HWXO0y4CuKZDO4330H8IrvV4IgEk1NVOsm824/nT82+lJM5qaWB6YCrzDVICQ8qBWyTUVRkC2h8ORwA9tx6sE5ZjuxvUlEMzrgv0tXPckEhFl2KEzozkUMPZZdAVK8vEx/h95qHVQqkw9SRK6JLUXEpS5nVBFVGxj9R0YFYl2s4cmUceYnSyn9Gzy5AGxrLMQWX3EM3wEYQUKimbVyblhfWb6E77qsL/KQdMSztTGMWy1fLIZn/S3F6AIJB+ujQ3yyaz2b2jYylg6kesRNKM9bpwYPYYyfSVOuYi5DI2IAnUsiV01q297Mgjen8QY36UCMzpUdRwmUa0bIt2YP1ckXwlZ7NLJ00TEvsrfTI8bPunaiKBhvRbrWHwuWQlfaBtGW2heFVBScUtKkMNFYoro0kukXPbSto7KrghNAGEZ+7zb/bK5TyY+8N99bBV4dL+oAk7ytEUI5RH0Y+yAN1SC64hNFvE0osP2dgRA1FSI7FaJlE/cUvgrPB/13GCOUL8XOJ6tu49sVzljy7XgAbZHCj2SKpNI0ZRijpMLIZ/gIMcVnuNI/AjrSb3ZuW1bk1aqXEmyNjwv9s7u1zFsfOoQDSJAzn2wspoeuEY6oemZzvldfXMIT/KJTke3NlWn5GSdCcSoqq3UDyeemPaXkNAMHyKEF+ZNXfKaLd6/C/v+Km9F88JhjCvOL2xFNMW+UCDoc0OzdvZiZEP8VN9VLps4ELcXgyn/g0T5uz2+nwYtp671Me+DZvpeg0F96cEDyE0H7J0AHsXkMvO5GpY7GZLdNkzaim1n2Wyr9n7M2i5XKY5ZCSdFj2XuxQNOx+dh/EmtW+YGK28YzfTcun1FWX+PnusRUKHtuHyty0cNTkgfius5o24gho1v+QiyXLv7Jk8eI/qrzJ9XPyorXmn0mjHtRQIcaowWbWjHA2/3z84zDroBuwfXLTBjmibl+l+1ZIrM+lEGoFV9V/ezoZYEnMpmz3gUm8NBlSZNzP5D4yEEVllNY+K2Lo32KpCVbt7bzUMX6IHCAU1hYzbUtQdGg/lkQgXi1OgJTmg+LSx80jXjkJbZnHhx1bOCWsiXtUurD784voS3RvCPS1r9BVGQqh9pQY5thYRrPQpgkL4P5VMzaw5UJGo3TWWQGF+WhoCuBK1ccIOyXiXwSPnr1nywUsqemJGY7nyCBDPH3nf3yg161EysvO33OICYe3DneXPWp1iIBQwKhj3a6QCDrA8vOHrSXxVX2lifH1ziYvmCfhFzAkmP1ZMDjJfCARuOLrzzzCFn13+diVBS2tYsaga7qThE8nvgTQhqVMerXEPlNHib7gUYDmrtOWjVCBqwxVYL7jqK0fEHIcBEn/6E7qy+4sP6LeJUe2a3YiymiMq5xLAsnSvF72KxIct5rVL9Ly8iGc/EoGGS2FL8JXY65r2ixjR2ic+/LSWiJkDsqACkCaE6wAywmoBbu3ZezYXnQKy7dtfvAr+yz6HvkEJfNc5uwB6Ct+LmQoSLcwLO2myISBpaDyIHK9oP0fQIEsjuupMzrSiBXEuA8g3Mk+sTQtN3txXvWPM9iFWvu8dLELZ5GfIInqn7YuayAwhjQD+3EFUnLp7WebHs03fJ8ml4dr/+GWWaUp3QUUN0qq0l8UfbvSV1JhNrZ6px3DSGfuX3jsEMd9eBfVAFDP4lYetenmUydt2ntdqD7BiPOf3nyD9oSVfX9GN+HzlOCtWXpkAwa+DwBCK5j/hOQnZJ5heootfBswjlaA4CDfUsOKo6B50bcz2PObzDAtCoksVNpNVRsAENFker+AxzJ0Za1o+Nq2K67ctefMCA7wg1dFkpbEVDxdA0JocdRDlZb1NMHvsaOesiClqBNwqqkyoh8I7sKhGWLaRcsrqxa/MaxPOZFpDRuPXJ8zYI/u/pC24eJ8Qj7T0FGRG5WKiQ0in+wuhQgZkZhbAgpe3JzU8a7MY7Ifh+2GJk4DV+x48L/3OD/8kl6R1+klHzNlas8U1qoSb8TZvyIYNfjcLlzJqkCld/6kFIp5gK3dAbSjN6yn5PkOqIR7x2qILg2t16CavESY5A2n0FGZ+VqktQ3iCIZytFUYjsze9Rd+LxsEqNN0PoMZLkaBZ0vtQuExUqxOZpwGX0pZQOo1/7LI/IyrbCPdZnIsiIeOEJWTryUatf4SIEr/RgdUn05v5pjXU5h6V/F86dRZvChK9M4MNuSJAtwlI+q5hm6PUJvVIHKidSU8yO0jqL//RA4Zv8bm7Y7dFQTmDvMLk9enA3bPlhAuhV6XCLLLBCqdQ6DTLOVliye9BrLBv1G9anNNuMt0qgsJXmcKOy0gacEH5aoAehlwCHoI9oxiwjvsdQDvkwIH0lHhaikl2u6U/PZtvAtL5tPfA4hxnicJHDPuVdbrxsG7MkBEtSqfSrRgRwB3WFH9GB471XwsU/Dqm9egRoPVBN5HI64n95JlJrQVH+GQZtjyxD49OR4AmZwAXQsTrSMcVzHHrLc0NEOexGC149pj2EMxSnoLRDGHAYlOO+nsWYGwaVNAaCe5t6nfndixnK+BgziNl6gJdMWwazQmv/7yE/UBq8Cn4+/s1IMQ5zt9OwhtumqyvBG6DyYBKqZs98e1NmXlWrFmsnPmVJ6LeW9xV7IulMW5VpaoAPtQkV6DKQp36B4qYuSb4j6IvrKhwJV0WG3hNRdoXJpWZY6pSzMv+6HUs+qCpduvVmelLCu6i+BOQEqU6QqYJ6nAiHeGdcQEFkRKk1y7/Ombi/Lux+4lTCD1s9k27JJaN/luVNB6DaAjAbPAft9MFbt/yB6kgLiAuBVfLOrCDC6Z9BISv2K9rbrM7wto2rt5tRWanyaklenw8XcaC0C3Z4RAX8zAoba14suU//9HLgowvgWKepw7jw53S18BTiYOrEHJ3eT3SojaBpfKUceDymaayIu7vwwfM7RF6lbX0+Co9zSKPppFkZEH/TUxR9u6bWEBlx1dHpNFLpi6KypJJLkERSutTpYCcI0+EerDmHgwpTwPFSeJC648czI7KHKAmR7PwDfHTqgu4Ke7lc4RNcwhUqSdlnUXmgs5kWLobFzx1wpiWXTDzY0xDNx/qeOpvgyKmeCbvs4zx7bViEzzIX6L8BemTk5irXxxeM6AcZPdoVF3u9+aPVB6lFlQ5DdeklimgesxR6/OLV32DRk4PQzSF/kTuE4WAeSKD5r0Cqj14zY0RlWCdtwj5rN7eivTbr2jQJkGUhsYRLxeUEKLFxwGsNash6wm0aBjf4XdrcQ4pju8HmTb6oszt36LjgJNMM7EdQT70vZ8R4rL/raQ+DdQbi5afy42xLWCAZJjR6+hxS+ashPIojAjz5M3WLJVcTplfgINSRZiuCkqRgKJFBodTVuLZt51eMbCAG2F2mOxOv8a8nqHH6yoDT4G3ovcSWkRljJDjgJUWqRDv/HrEchw1k0bog3hrcMbBeWYjlqR5PkpDcLbmZgEuMvn5yg8KEeMXSsIU3uh+wtcEde/PI5pUg97uODj/eBf7X/PhyDlga9LXNNYHNe9StbMDj6DwlOzs+qPu51UtfSsCdedCifP9fgk6VV8DotslPMvGVNNRqiXBXQTjLvsmfUzmdMnL4gHM63Im39ufWSe6XlT5/1Oy4ORlEJFQAvMmkPKdMMULTUyQ6HXbIiDNoZQxYmwU3JpOBfE6sXBZDVt5vWf7NqbMfE4nXXxV09bbMb0iyjiggPF7ilBE0cmwewL646F//i/RAln8jO2EP46lx04laVa/bHJDny2Gb9oXecEvqO3N+TIIgNo6XxpH8DNatkt90L09s8dV5kNw3eJ28cW6ZzDHPRsqzfTfEhRkUEqFNigHY3wcE5ElK+hclr1yksydghD8Yeu1mfbOvORHkPGD72rKqhHRZ2qV8I94W6fZrC1Gt5rRCaBurbPoL50kgrF3OmVdOaLydRsaY5AefUPvs62pYCnNsdadzgHtKgoXDjzEJ21ai7FwxkGqiV+EkpuygzPoLPbFKL9pdB5XhKwqWP7zSMkPwWpXLjp2edIx40KtXl9r782tHuhaQw2DDbM0AVBv+iYtDKtUusjco6puP9SlixQ6VO7pcofthJ8mL8WGMok9bwk1834fhKs9oSz1jGyFFcrrvEH5CcgnqbMQfYmBevnnlRedes0L9zzjXCnIW9ea2+e3y8s2OVczTbvuee1m1r7Xem82ft3AwmDmKqPtZcKZwvQ1ngRvLSFKHgi2UyHDdettRDuk5Z4E5+vbRLgRyGcduxUs6aSkb2IOjv6hHt4mWKrHRTCtLO2KGy2pgo+A3vnOyhi2/YhXt4xDStEBiTR+MXiqjpP1ciE0FQxYINL+EIw/A8cYgnhKu+tD+hLg4ZydipiXt/mxj8BP56pao1a2ljggPdX3ob1XFwu1DleHEzYPQcWiqVt0cUgAHLO9Lf2jZKraG/w48vQC6DAwm5xohcPWaLCkNxCKzo3a82DLSSbNbAgXvbchWcVjhAmL5CzxjUesxCiDmD5aZMbu5rMstnl8KnEAezdMqe2xifTf1oA69WiO7pRijbETVBflcuF9UpcySBPpzH83J4a7q3xmZGJPzuckPx9iDgXpCumbvR0z8vaqND9zl+AnfKgcg7mKdwCDBDnaBGkuUmSbB5GPNcihnk1r2zYc1eWzwdRZn8Y0RLx8nvVMAwE7ZvC6D2+1TsN5nsBRP3Uwja6FCEw23gn0EUdcvN7BtXvLxQ/wYoeRcrvv9u1txniuXOuUleNMSkvccxwdg5uzobx02egNuB3kMN/oVPuQR7OCQAvRUdlZtRPoCPVEYb1LFEFSdN9IEq+9KKB8CVAjCUS8D4wBb9hCkgex5XWyzJvcW6+FessyNkZU8Im7/GqTbnfk3S+7TtHZR7uK4rAOHgK89xmSz0DvzdoR225sjUS3aXrESJexvpu47xNAOVTzoeag4HF6e4GU3u4tCB0fM8WUWSUSNXdKmIxFa8dw/QtYwl+Qregy4j7TEJimHJTf2mSgB87KGSnZ4ZaavPE25bySrzpO4Nn2IBYK4y7VoE2IlNMmgqadWtSHHmQvPSEWc6sA8Fm6728aNrOJe67qjS8djv1o1AhEj+OoNB+xrilED0o4GcD9JLKeg6tdiaRthMbp1rHgtO/aaLxAXuqE5MWOt7ioYa+hsX99NgV7EfaYG2lG2ErqKnAFgeXDhXWsV4PlEpMhCqb4Vgm23vho3hsGOcEkR3sCmzockHQuZqQ9McS+sB00RrXntaPzxYX6EvJOWMBWMQK/jsYq2OLdRebg24DNnQ00b6q+7DcCJv0YK8tfRaKx0KNmLW4GKr8PbV/qw/oCZNTFxZ3vr4b+MAZ62sdxyfw7RpPOEFmrPvg4u8NmBDKfzdZ0TvEeaWxY8HofcV4+6+JxZnJ6a8It/iwMqCzSKIUC7ZohzyIDVS1hvtvQNnItywkvmVB7oNUU/AOrW4R0jlqGzTCmNfnzRJIkun3VUv7cmHK1Mf/ZzLbBF4n+ps6teQa0abGwNuG8Fa9+qRsHfTy5/X185b60POENUSIj/6mVyA+W8sOp33WHyry8n5Uqt3tSp6EuG/9SVfAH2lLDoaZg9mLVsDAlWKvYsg4i1ZNgM8y+Nz8LPVSShqvQmJaWRPu15ZliH+3iM0zYBCq7eROvlT8KyO+5ZxCL0jRixrTeIB3tO/NHEtqIt7i3eKNC7l/I+aakvpbQI37VKtA/LJE53PzxY2Dl6tqE6PFF/UAKRouHRg9siOCor3GM1Kg91s9W1lvUsUr8xVJWDOEpxnhnCm6fNc6KCSmRmt9B14LinMa8f0ILFUtEcFUB3LvvbHhw6+454ZjHQ1gK5lm2JK3029A4vNcOAqV0IVhsQ6lDI6W1GJoTacHtTp4r0ngQi7UuE6HTlVsAuFObHKlL1/wHXa2OMvaagg7B8KW59Gw5cXng8Bh0N11L2a6dXJ7pL6XXchsfdsrDobABumr23vm/OCFs4SRaFgrgUY2fWqrXxK0Xb5oFb1OZzYxq2Qynd+yMhmSUtm9raSXT7brolJYfmypvHuu8EeTsqPtCagjBF7rmCVfrS9BdGjX9Yqih9IAAvinHvzbXF+zHd5KETdcQQxE+/gRnlR/MU8k622dEqKTCrbrilA0iLpyQmnJek4u/koZgB0AGJN8W1me+n/8DAKKxKcQle95iIK1fV1n20H3oOWJb2Nk6IF4bQrLOa+VdWo6UCcwTo/k5BPPmdwLpwsXe6cseve4CNpn03n1TlRC4ziV+XZ4RbFRvo1F9UHt/XJpe0vZ5AeRJPZ1hynrtC3ttrysWEVTXuQuwSrM/oyl15SKADUtHyXUQ4AXkheM9Nu1AIU4rzqBrXYp9Nn5C2W5H9nFlOKUtXzBvtyaVLYyegqc8YL8EkkWmN/RR+qaGXZvYCIqPQVE9BOTb5MS879y2rc7dA5EfisL6LUXPqJBnk0+vA40KhBrA4BGiGGQbqVExGieFA7WK/KGdTAgMiUSNuveIEdrf2it75dO/THafXklMCxk6nlDQMSJh5vwPcbIzSwKWDX6By5utdrFlL9CbIPywETcVNaknamgbxJrkACzm/xLjPQWDPtarF79415slniXjMS1aM61ku8DJq2/zCUv87Qu7dRUrilhy6qAYV16XB7IRdyOX9HuD7kuuYCM7SgcDTFbBXKfr8ISk4JDFhCJPK4oEbS7NRemCcHJKSncROCO8rAA0qGDMBhf3Mbw8Y6m41VB3b0ijviiwdlBZPodUY7O6t/ORLWOOLiwNN0N8mRxuEtlafPeViQVAa6uJcOgxh5KDPa5dP+DAB4ERtsZWMdKgWFvQbLGzoJ+XtJaurXbcF0MiEJahezcUqhNnH0JDsf5kCBpA8rDC2B4Qkz2hXhTNySEfvo7sPQswtG4mByZhdiQ70FitOrXEcMfPAxYOmJ2IyKevB3aS0MEnrBXYsoCpchlORVxfwsXzE9S6OX71VH6IcEviwMZhPHToku1laQ5YUvNuSqFJkOQUAvHgEJHaRBTYNJZ+ErPoxFBQ0Lzo65BT0+2o3T3/aVK1acMvF9SYOyeU6C6M6Bw7c16DSz37gwNwqk6EUdZsZsf3ApGCL80zA8oC1k6Ow91IhmQHXu2e8D8sGpDB9c3gjw5ijv3FrGO77MoxCZ75+OHBR/9O8AzH+uTf1FLfekc1uhPVWGzuCt4guoBCcJBDR8u+HLBYD2ci7IbQ/xbNBY6Cp6ZnbtWKZlrzQqbGrrlc8YCr1LZC5JZJZh05rB6RKiTOCAiYdoGFWrGEQ9UWHRiOH9tU4Hhhpe8N7KjCz5vWC9tnQWlVL2DUVoVY7OH2BZG3OkGixFXhZNA+J4FMm+EHzpTcrdUp4yywoOiDGYqO3w72Fusp8vupWYrMu8HscSRBf+b3zuiBxaFeytcB9X1pw9s0vQpzt2mFsJnssc89b5d9DFfa5KVlE2oy8gi+9yNXKLOhhgs+1WSr4eYNSXXDdJAaRs2Ea3sP9vaDBFDh7LWsq2FcCqoF/oD2aTBr6pAcMQn7vzsEvjBHKj2i9CLq9o+G+92Hd0jDnIHQa3VkEca4dfN9u9587KbX1JVciVlHGr31L3reZtbnbXSh3OTbvUx1FcDbi/oUTUW2yG6ECzgwkhJtyBI4a0PzXa9DjXhP0p/dfrG2nz2Ogkw+zR9Dey8Ppx0akHn5G74Gr38geINdpXMBS4C22pzbb1UESx3vm1LxTOQSW+8qKF97TfB4vNfv4nmplZUNczZgQztPgZELOg/p+3ysiE72GzB12JTaJNuKduIjDs6mnM1VsuLqO0GroAOACOWI9G4HzYf+Tk2nW5pn5o+NfGEuVa+e2PACuf47rDyR5YjNvVizjVewFv/cAGcgcduNEXPVNUdQS/YI2hIR5IvW1eF4ZT2iFO6oRj7LCVbjyTuQVQMs9qRpKbdEWZi52yfx5l4AlBHG0DeYSL7IXgio69KfEEaY2HPU1nXJR2SmmvGTNxhL37Kb+wXN5ZRmFccBKjSDN3muN+V+mMrsCpjAS/VpG68Lu/a/HVuHesdGuMD9Hukzac3O6jfHqoO3Q0P+4n6geGLJbljChXc6Wt22eOxuV5lG3rd8wOkzfdD8GzMhq8CYN1Ijen/h+yX+/8Jgtri4CWGPt2JXVdcqH8P4EpHadWN61jwUJWawmtoERwbzvoEUTEiq/vY90JR6hnIgnlfTtzMGaluX7sfi+d0wTWu5mdRHeF41FuptwSXJH/c45m/US2+PecpeND3X9SePViIYGaTtKKYk4uOLmcYFg/fUZ1JvfC8Ha3eHPF+v7skJquB0r8QSfjeyVWYNSjuqttBEN9WZbdnBSvoNIvTpXUjdcdGBL/oAeUpsne4gd12xU+tLJ7zqPXFmWhxCq/UC9vsyA6V3+l9NdbjtWzfIAnk7deZRcOtrXeHV9fYUQaoNnYTl1UE9Is7Tu7QtVrc6sYu90ivymmczBpOoQxXV8uae5f+BQS1MH9pe3qIHCraLpxJf8OND86Gt87dm5aa6grm6G8c3hKhj621Mn0weZi+D17uyPhbbG1nJ0JWf6S4S3osf5cQ/NVwKqKbeJWQJd1o14jsBrQudmPNpzpXKL1uWe2E6ItXjs/6yaVPRhBKdsRQsAHe1HxtZdiGh3bGqs+QxKEZCUulRiKIdQiwaBWtGBUNFLOF0RBtqJw9YNtcmaQVr+Pk//G5mgh1IInqnu9Y7Nu0DRJf5/Z1MvNNlF+abs3O05bx2SVoQDcyx51iPP0rRub77VhfTvHKJhqPD+RYsKi53pMvlY68BKfSEg0tzz1Ar3hQxLJBO9GQ0F77n0CjM/DeGqv142rpPcmL10ZZoVIMfseZBpoTPmxeTcWIX+eijK2BrcgTAxPrvnmg2ONHhLXXVmYt9VQMvnEQWP02h4b1y4yAWng5Xqr/ae0qrge7SrI53yUzX5hC2Kp+8GqW6VBEJnqQCm8haB9FhJaCGFA54+6OnKMXfLj+geLtcMGY/KOWeoa4ce3SK65WXRInCBPhCTM9FoPfGY/lnxTiKJlUzdzSzAnH3Me5EVWu5mXi6lZUWzmTJBPzi4JQmMqThdZI/phVtDsrSAINogj4S34U7ZaedTseTTJT1BSU3sKfgqpQibPNfM0FqzV6kGFWeZXHDwBQb2mK/5MrTmMLwaoA8O1HB8aRyRnt6nee51I2e94O/J9X6SgvPnC/E9dDvLoAktR/h0Rc4c+lP8TPdYKTi+4OmhvXgSjzI+lPg2+hY3FP0XlbAWTzq3PqQD0uTWpdTnZElBnDf/pTzNvmr16P3yv1uIjf5dDSyMOZYqIkvRfWd3CbbkiMOE/z9Y5JZevrjNtKBNCljFBb5gZT9aPNz0O8Dv47xNUJ9QHc2DAtaruoZzQmJe0UmJhv0CENzUxuOp5vC54l8aMVpVqvwo/wine/IfXPlv9i78CaZSMHyqW0cIk1dZ5xVxz4AqMBrYZV1/KXJsnn+xmS0p3VR311s/6WNc0hg4iYj5g717tkgvhU3BXE/KaEgA9GpWg+bWJ6d4pLj0tTGLUawiASoyyM4h7y60+8ZkwKWpiR3cEx8UGw7h4ps+NClYCHYeOagdVjwvW5unsrXnv6Rw3GtQj19oK+qxGSdkKbPAn5H4IH+uhMKzzbUhbA1fd663Ix7JRaNYTbmdDpyT+IQy0iiHAeN8TY/vGTuo3XeZYemgOleIuUYyECm0H/g7OkucadsUmeF673A3b3nkhgn/dcNLUGWeR0Py8lfxtFcKCTAqrl1WnUFBweEESo8TD6AN3ySE8NBmVhMGGU/Nu7nOvb5RPT40A/S1Hn/LaYBjqOnEnrK3fVCL4pekcJiocoYPX1JJffWSdZl7wlSSzZmS4PJ/akXZPvkhsISoyWFbhFU9JkPRRIDu5vhMsue5evVcAeC6FnpQDOZmE8/mnClRnlGPKyCwAJbhZ+rqo5S9nLepNHYDGcroJr5SPot3HJmBME+VexyiKNgE2ag8rHE1l6J1tH+DaaeIoa0dQJCjfhIeoBOPXArowD0kEpYn+gN9uSVEIo2cA+x3r+OqqEX2ZyorVbZoM36/mokt+e9yCSXVqT2Pkb5MCU4e2qky/JENhMpS1lBtEXJH3dOu5cyx31SJ7K5XVdxvAmWyJ5zRlGaAny9o3IdB5xUjhydxBDwWDy3dgze4NhWHDgQ+0KNTYAknl0nVMJ/Vka/mBjZwnqJWZJlEYyrkdx59C9fu4aetDcdP+d15sQNgSFOlw4MGOvzOMa594zuwvNbDfao0vOW6BZRuWX58e4ICWaSx1z0+5oKh+pvZLwcDqLdupdlwTazD4ux4bQOZV96QBgPtnWh731mI8DbPX3Eun0+QZfnzk83cyQwicGT2GbVrvQzQDyvCxIi7BrNix4/D9Rm5MdUx9ERKs/2SkTkihZUL1HNfxqUx5IfAJyn5x3A6AitKqV0xpJYqq5rPhke6kyXmC9Ev3P+9DQe329w5JIDNPlnowd7PzQQAT3fOLfuJanmxoefY3F8Rlt0qVgBnpqhuM3TwNHt2+UBBdFCfkFKUk8PmucN3wrvTj6jgTZMtuf9JFV5BFtLTiXLYuhHM+Nmt0oD2PxvcF+75FDvQNEBYnDp1TDZRHCx/bPnUWILbc3zBUjbx5yXQ09qN06F/Q/eYYTDKo53gHQl2MYvYPhWPbETntl91AiAZSk+T62kXYLTS8vKwURwfhk+u+V+O7PP+kG5Jw/CiHJYsgkyJD6b2yTFijMaXissOGmg0Owp7X+D99LGnUOrrkJTKyMzn9kKWqGs356/D2zDUyW0t78nAzCYZebD4PBNMIh9kN6t7U5ayGdwURKQqjW0ldCV/iY37Eut14EA4gmvegyEOtvcN9A8mH2ep0PjqNf+t6akdAmRXwJrZ8WObM38Cu5qzhfCX0lzLTJr80HdkikncIE09BRBjaRoKcsQubt+MjJx5nBbpU8j6es+cAf95H6GN6u++veU1A1xxwneHHl+TXXXmnaZJhCDh4JtTeqWZgrS/JbJ6YT+gydG2FNNW8LDt7N3Vm8z1yTC7WycTXoXQJL0mVbmJvAa+yK536gxDS28YJ8YCB2ca3yRVApGUqq9YrfCWoAfoNCL++oVGQUvoxNzMA6JQhKrmtBEBOcm1e6/hVHkFluG8NjX1hVy0BQXEua90DSLXnfkHzUdeiTl+ZYvY4D9hoF8syoCsHN4K+llurEvQi0AUVrG8+QRt2EuAB7yNalvXrMRmN/91+fuegBNLCR6duJT8+kI++ZksWAxG20HniQZxobmlV3yUwx9Jp+z1gwEbISxVnv6yAaXiLUbA/9gRuGesrIBZ3R8HdOi7/ywUJSHNq+wWQMIwiCbvoOMSPk/Sc8ot7LSl9blEC46l8jrqzgKZ6XhlUeJhJv54gB8H/QDhuuA2SXi7YqaMBPUoBuuUq5L+Q1X+TzIqCit1mP8/6EzcMRdjuo30WOc0h10NfsXAHuS2+y82C7XgluuTLx4TkJG0wtksVNAuW47E2wTrhLvT8PdmcGkEvNAbbJ0iinobl3x87GqOZtLAzSGnkEoeQlD76lm3WlawyvTGLbHskhJ7yyCCqWpNGf5+kT2MtvybhUH+DwpPjcitNkZHQC2yPDQSUHqtBJD7vycJm+QUUtko3yD7HWHByv90sgOCddRi7mMHFe/7/QNQ3hwq/m6r/H9BY+xfIf4y0kteG3+7ieHUmcaLwCqBJhWos90JqEk4FPHmM59OeXGNW57Q9fe3dC6D27d52jIWUNILINIUjMJpV7KXpbwaZUyNGU5VJrl9Z1BIzWc0m2T+JuHwnWoPJvDK4LbMMKnT/ns8Falcw577mrwlL5DIFCAtlntfo2PhYZ14oaDFWxTAS3f+nWSogz1KKZtkzfH2WBrlCJVDif1PcJspoxhs+g+rqxB5iFr7eEqbOgzWxD7XZzK5c/w2nQ6XQZYDyTEfUMf6XZeknARIegMQjLk5uggvkDPyqPEEu+HfrWz6yc1xhNw0tfr8dee9Qr8C6EBu8upLzwbc6NNodefWSQHjSXdzzT+zXcideCZoQUYyaB9UJjHvmCjR7sXYzp6ewyecqx+S2K8Qsy2rfiCw9+OHTC8BZvrncc4bIa0WgoJpdzg0m6QDvY1pY/YozZxhgHlN46JjQNe+hJg4EAJnoWDzTXyG8bifVCY6z32xs4PhqkMHuKbkNHQtKH0zRBK//gBAGWsiYgx3QomKNB17kOPiq4MsxdIxgS9g6OGyytF6B2QL8ofr0Ta8L7jNowMHiKID0lV2eMxtZfqlcg45kzu1DiK5XQ7L7+WwlncpYimSWtyvQklMUVTtty+GBqiq8uf/Rys8DUqPQ3Cy+Id/t5Wjzqd5u2kNIMR6U9ntgF6vbA5D0dpm1q7gTo5FEOBH9eZ5Y/cCaLWRamFF5AX8WpLQIKx7XIxdF7qhTIVx46tZDtEOYSc8OlXqblMGbXkaZn7OanScOSkWdKqHKNBOwGW5BG3/wZVKUT8Mz45NdEcIOmsl9pau6vV5XIZsAviAj34u4q/s9T31k93GzYUNg+qORSraa7d+09zp3gUui3YKhLZ0BJSWOWfjfbM2daB12cxAJJLCEQaHzqcwXTJEwQzK8ed4TC4y//O6jQ6fN5BQ+k8y9RyK8Ss6pp8KXNwv/NS02tN1D3gQONwB/wgwV/vZlOOK5fhf/TUp9oHAwxMGtt+RRz/gApZGXXNLmarA1ZySP7NWIjPsiEvVS6FdSXXcjCzeQ5i0CTBoKmEgO+zkqhj7ZXpk+NHfQAMN3FO9aT2ELILynjiH+9zW0liEY8UkRDuhXtKfqRLvOxmlhuJNzbuLobrXL/mzGWVW+ySIAKweKEMJYmcTHECH8Muft24vJCX/vWuyIOd/KbHcQhYMWAbmjT+F4EQOm/nqFK1VmsyUDtrc91qI9wkc+kKgTWwWq6ivFKV8IGu8bIRjYoM5p6vwr7sOck6CV/QTdWrzSzRgDuwXeLDMDEfaAZ90ppeDnEmo/Eb2Xf9c3tEh2DJAJ7XrBwoG3QEfkbhZjPg6LqexvhxP1dq4+ewIYmm86PTz4eW4FkYfEH6+zh5ZymNwjn5jlZaGZcZpIFA1G/ebwMoBD70DB7HkUTW6HuTCV8c4NMJ5r5lpidY2swsiPyiZscEV4WQ4lG72heXQUN8AI9p8upoqjwQRIjjx8YeB7dUETllNv8d39wAk69wQUI4dhD74CMbgicxVAWOh9YCb6ctWjY50skAm89233/u822UsML+fykLXj6SANrrXU7d98LqNQAgW4UImmxNfZLgVqpQEGd8sCkpobshQaX6yUxis6dWNeJF2QW3BqTD5zLyiDuCqJXpus+hC4gWJoTCMreHGw+VqxqiLQeQWnYlBYnDvDXH2ExkOwcOtV3PNu+qOXud4WwGM8IJsSDOslle8ZYIU1rpmFFHU2KKUzRyAnD3tDa37cgpZ+wErgcVtcGRBVfQ2gmxSjcGL/SsIrimxDivwOV5WNLH/J3zcm/fCJdjSwH3dYScXM52d0PVvE6H8WjjN86uVSR5jYjw/R+fmFzoId7n4qLllcqVnleuCuiLsgO50qsu686dppVACQlcMpsT/ZSd1HvmgnmDSushj2FLAMvwOG6kg0Ls5fgbiOEVyw5ZCPJ1JwK0HXxr93y6bNvhwf+0JDAJu5H12fyMO/b/V12Py4g1UhFhlWYnGKrE8hEhdFtYcCYqQYf3bTLugT8ncWp3PoPM6wm5erfHXtqyu4rxfxcwWa8UKHU9d10KvzTybiKHjKtCRNah+TZmlb9N0z+KcZ8vYF+Zv0Hmy4mN+HZjVF2G9FoVP2XzjPHAyvTBPDiyTwfkskgHoX+fv8fWfOeeBGjouuPqchTMAJo2lRTYi5oKfqPL3XmCWRIUP40/WR955l/E8KUll7KiEI5WCNGHU8lweVBTaQESH2yja8w4UfiiS1HhtNs6/TkI1to7gbA/OAOx2Q2aI3dvCHuAwV7bFGVLZ5O5fGv0TWF6rS1JaBqOiGLgk+jI9WC4Q441qhhn96x8OIZs40T7kNe1yydc83pSxJpunEuh8hK0LCqOorkX9OZhg6MhLZsJ1MKHRM56k1EaTgmSW33hZN5KRG68uXOW7E0PXnEEti7pHQtA4sKp+ogmqDv5omUO3Wm64DYsTnU0XuHAXjGCRDcsiJ9hEPbHm1U5O3GPjRgZS+5/CFSEJHJ/wkm+LtRS4Ru10EcXSyKV57oB+cu63DI3EtNs/pOLhTy3dQw+R//AfL5ztTVR3uxHjhHzPfLb4fWDMucGUBjkpDvaHrB0hipp/Qmvoj6f4cwYKDiXqsxnR7zi56jsYMgk8QzP+fUFY/aLKfKqtJ9LPMw2NFshjOi/Fvp5c710gm6aiO32Auz5moch5G5x4z3wqxL+1nkSUow4ZPkH5Jf05p3gRNsYShQt0UXrWpgkMuKndwvKljbUV4euXl3s3k1SvPdBDONmlir0K7KHCu+7UsHJrNnjd7e5xRm2vpAB6lgQ2Qrr6uPp3Y1Q3l6WkbIN6PtfaCBVocKj3nqBOmsOC5MlvAWnGgDtdKWDo6NWnSKAj9c8Gr1Lt+gXcxWz+wJ9LZm3/S5WPX3UDeZq9BhVzAl5PtDu1n+/UQV5LzytLkfsREszwxAnf8BjDovzEGhvycwRwCd6Vn76tFqkZXE3lhd8SPludeWuxqpapAyxdW7NhXQqJoc7+pgup5ps5YAMJBSLCVP3MCajx8W8WMI4VOvYQmBI4vLQmkGbtUJOpXDlO9xiGvwvtmTdhxutd/J0bd353bFSUfVNDPxbehaYjXkYHwcoJfd3CwhK+egSsFC68g71b0/iL5BkXRWDVrfXNfPQBvlNSqJX7rUmVJb5rQDWSPi8AJQ8MIj4NBZ2qt5IvoS9Ag/ofHaOBFd1n66dRvZB9TIvqOMQKkiX0UAXNSykQaPsuCMH1V+P70ie3rtdAjD7oVYE4G0us7XOsQJ/05Ki9Aj2n7g9SCD+VE4kNOYFRn/0LwL/Toc22W3lGCCmb2pgyAYMCEOLO8aPnNBdtNn2uzS05wo4OnJYJPMHid/0aJK33rPjXUht+oWtARrGVPnSgORT8A3G69ElxHg3tKzWYKupltHr1xd59fBJyfVEkgk5EnMjvz4eaOkO5kTuDQGnKk9imo69cgX2rOwJpSK3wDYuNsC/yhZA/JWYucQX1dWJubysFnNFIvzCdWFk+dCAHPyMT4pWq1KzA8HlcQgyZGB2vJ8k+TVVaH1biWO+VQNdZM08p2Oo2vaE33AZdytQPnMM9CJtQZRValv5709f9h+6WyW3hinFzwerCnDctSTWZxlggPbrarLLX/TgK7f52ErDlxNTlHaOFP3Ws8pSw1ScSxvfNPEmU+xaPMA/cUEgKH7gjxKj0nj5otLv6yiHGa2RolLDEnZzzF2YuffRvAVL41zLvNmardQmY0SnJq0zrRoWE5YKPp+L3OS5sdG/ljBbNyOgrDFKiGmQky17JT3nsRZzoIVti+xpbzl4Mxg+38xBJQ1OOgMQmC2a0bGYbbHlrpEryxrP/bobpIwwGONmLJSiXsTI45Tm5OKnSa3cZXf18Vhy8KfFxtiBs3yCw+W4hiOipg312SQZeP0RN2Mli7sklHyXOjmVLsHl6QhWdpJ0ZFj7FNbQDAjuDoC4OVgMjfrFSkpbf1HD4XSZ05oYnHB+SlRxGY6FPZSFtasQ1aHJvzt78/fDbNGqqrv+lhxO92OgxeCWR041UWRQ6+xqADgRokULh/3vGnhbvuBmZ5T2IXGAvOvsI9hM/keS9s0Kfg/3SyWscr/g7v5ca4m1XUK2jMrgtCA8Euhvwrz+iZF3vQGvB7rdcOv4SJUWBte4IqgAvZNWenQKqIh0Ot0f2bjGLI0NjP5afvUiWzhOcTUJDVqY2qsmir7eP0A5+/K6xLQe31ePbqEjSG1efcwDVAwv1BRxnlIKX8c82loMs2QAj5pPEFMtFzJcib6hXP0k3QBmLaxu65ol2+XWPNzJC7/UJTM9aU7dHki9/qAyEMY0eFia4GYcj4sIFZ+jFwlyM7TmfQ39LTHPBa4CJJH/vqRuiigcHvpWwSAyVNzC515Y9k1BXo2yGei3L8PPiKqFINrVzPXjlv9iT0GVoKjzwDlSEiUrrlnoAK2ssMC6v/waA+3zrFTs4k9OJZL3J3c35q4QYaKWC9LFjDaO9SIg85cwMl9UJoXHgfxwGe42noejpzdJLAeWWyegYJjVcjPzNhDh5lgBIuS+NqeqBZZVoT3IoSJz22Vjbi3KswRdCndus+5k8XrNQpiAdLswyGYryeY4VlQx81Liauvt2l0B1dg1XEnwC7N688ZM4cHorXFkupksiveY09pznmNFGAMVgGH4HCOcnItEJVobMOYfrWFWbBhwd8ekJ9cOugBx6iqGVaMm5Hzdj+BhHCUM6MD4AJ4Pa6DS4XFQdm69b6FS0QIwfHut0Qjoou+YDjrB67PIGKVtYRA2t8CLE8uVXNaUtllAeUzrmHrBD+WzArtDDGFJwx6f2TOi9/uwj0tL4cFIF16JbRX+NdbE8S+ZwPWq+xvqY0R9ipaMx/vyxcscF1T+Tvd7ddHEI7awGTkymVbBsvrMOpyYN8KBwq1fKglRzj9H8M2Pwuqtn5upJVW5vKgyrMyvJa32o+UwhximKjkKnsPZbB2mnL83irC+Q0122y7bnURzfBqrBhQny3btzWh5+ueeHYiGi/A77jTTAThYhApk1BzXgX1kXKADrfC2tQ4N/SEBCjhg9TtFo9JOpvyeQcfITxlXhpaYctUjPjujy9X/ZAZDUr6qkuCpQ0WjZmNuNCRheV6KUiXmXj0JNSlktWPPFM5iox6bD3h+6uj+QFpDXP1KM0eH+llV5u7nq0kfxEzDom2VmRJ1JjxEAR0dXi2d5wPKfMqP/Kx3rb31xUFQMgfD1FuPQABln95T63bUQqYGH0nNF90uLzQVjPhKkLnB/UvXdthzzn7zEWjHL/MNmQugry3kPihaI+G5eB8o9ps6y3zAJ4Fv2XMuzI8u7Yj6eJAvgnrfIoIXxKyHnN4bAlIKR035hJiEySQqW3s9e7AO4TKxvqSigeZPiGmxDcOSDUCJ45tbtG/fKIBEcS1cGEOEdnLqRg52IkxfhOE2eCujoH1uzsFMwcOyYS3o52swzmSsxhKi8sbVVzGPMm3XDAhvBRCAwwoj0CtfJKWLE90utOZu1tqWObAeTpExWVIxLa0+aE1tsyoSQvEQ524Z5NAhzHnYkda8lP+EeezeMTT+dBaOGRAB+Ltu7u7h70eFSL76kMG2ex0+Pny/o5CKuV5NXEb54ICn2uiPGIIvZWTWBPdAPZml/4qMU1BvkC8ENDsNwHcJhzKy2UUMOwoCKROOszRBKYXqM2LQTFHkfi+Xc5/95twftAPZW9Qi0D4HERcoI+Cw24lsNfN3p/VWnKbxSZ4lE4d16Uykze/ZLYfLj6OKoPK/s7Y4qPKmRFccZSjOLjzxW8tPtqFb3E6TGNrJVxtPFPVfM2E1ZIcWJdA+0HEA4dkWepMjHuMIow+ZafoqVbgzzsxMydXyV8iO2IFLgm/AUQbX6G/1eeQGD3SmwczUVWi6etXHS+KKonIkg8uR72ljeCX/PXKDJOazW7gpLoSq+pzxWo501+TlzdxBDqEQGjjAlcLvAkGTBn5mPcbHndecm0xmyMowCZHeh/EVaN9LQtx/f/KmoUCsDLjDviAUd+c43uv/08x88wDEqnof7a7cCXRMsEsQu7Y9JPQUSZHQcD/I/TLZ1D3VS6c+v1VRpx2Rhb7mqc6OiNrBK8/yJ0N6sONDfexy+hOvbtFhAxuIxzDDn3WbfUF+sJPN5ziw1q5HBcdxnEJ+KjHMsX0sB/Z3aGwULVjbqa1PrirFPpMYmiAdsBPKQz+G+yZ2eqS9G0qZOx83z4DZvxHHVGkgUd2kAqQPXUXhqQrd3j/+ZzJwINSexF0ye9pgW+qbunuhs//F2RLyk0ZwHhLB/5JJbOhKucj7QLjLC1M9+B16XxTLJtG4/Gq1sYIeJJRHA2nLScK8hp8fhNeRN48+Ti2L/QaPGeQRbFgJH+IDuR+gA+Ic/RFSYJHQOcTkrlTFYdjMk0HzfKJYUlkbGPEE2QMlvWABx+xj3FoxOie+QCOLk/WPd3YPjzUgdKKluzf3QBH02uijGAgScVy1/q+fuz2lcMn5WxhL6doJ/4kj1jmGjYdWhR3epXp59v8k6ce+qABhhZGlygDn+tC8gAF+a9u6AeoNRmKXyfruKQ3IUx4TUMyU5F9g+Oi1r8CZvk8TJJn3dW2D5KuB3wqrHaeIFYEqjfEF8MhHadFMyQlgRsz3W6Gk0kYj6cfP1u4Df/O1CWexCXE5dEgT/lNANN+2p6NUHgO9gom0Z0ZY5DgrWHhkyibY4CmZXodxetHOMNq3HjI2zttpvesr8AJCdgzYqJoRwcFlLG1h9SvRjTV67XxPny5Ae/8SLwLclqgVWvkfOxmAMlQL4wm8tK7e3WXuDQ3QuDaAxHVkThFZpndMcyjmJzj6Rm/EFYTV1VgtXvGi8amKAzuR6s2MHq7GxLCEZxDfvRDEEBWbM6VBUuNwcEMcGY9JpREa/wywV1MD4pBRVXQAACZwI4jTJgK58B6Qci//CY42Qrb/QOf3r/OTJ1lA0mSt3N2flfnq4XRNZbTlqbeHiwY9QbGEygThiHVN9sOEd/PkwCAfaxjQdg9ZCsBGbrVjXnCffT+vHldROn0GLPfikhWdptQ3SqFUfCUudWS/31iBVW+ZGxblCq42lYmS+gLoHQhHfKlHP5fKbm4Icvcl/eood4P58IPKlAlR5GyWgMzECPosQOkmwWsADsxzG865SIvwbLt1+FmfDxkLmpw5LHdw+4KLNJhYUkPEALaM0SEMVivBUywHF1aarlie2vDhznvydIFfP0T0BZg4diUO3/BA5SH2f6ceiuruwkOA23+Bmorl4/n4HlMOqcCedeqaGxbP+o7zTZqkIjRedh4p8BFhO03V8Sck9vXPQXMTKs+Kv0o+IJS1w+YmC2WEBb6ZyeTRvb2FgjQV5poYtQ4u8xwbVUYWWy8JBZf/WvYGYY8G8akpttsgR/dqvh3tEi/qeM7b5LNG/Ozz0wOGiEaKurP3KppXEbuZwrEKerMtQXc1aiydcjgYGF0q8NC1hA39MkysoFGEa8WQQkl9p1Edoi/+SWNDPjAhAb0KdCG9WBCgQF05NZIhPXx8gxOZ5LdIJBb7qvsH2Md/fOKAcCoZhikhSrPX/OrADd7Ooi8qweEOwDjj0ym2dDvYOQMEkgpMtgr93/af892vXA0Z14K8kLBBgl1YlSxwsQrWQmkWXGJu9Cs+2wSkN/sX4WSqc3FPmf01LvD0rsX8z6KRbB89wh4b5y3mq/Gs5afnPD5/8/CBDFPLRlZLI79IqC+QGTdk7mhT4WGXhFKNrryQaRstkJi5vNIl+cP9uKBvvIy5FzuER3VvuyG5gTslcORLsf22JmVjxqNqThjgogjnVYqy/1Lq6zWGCVeuSgU+Cim6xUm07X6S0/Dq1AxvCLnr3QAJO9JPsOMAtjK+gVfTtbMZQ9k98jifZx8R7APdaevFEsECUSjgqIVTXgHCoSVUjc19EJ/lL/CSkEEP8422CTyL12qF+3JSoMRJ9ChOK6Q9fLmrncwEjCkp9q598aBDJ8BZaDvA0RV229hgf+WQJ9BqHpqXZMzGELC1aJIcZ2eZMlO14gBaR59R7686Ej8NjfkJ4iqhLgZn6vD5Ls2ubchDdcLdorABokdZfbGwtaYSODLIPPSnBW1nFkj3tEfYpmBo4LqSJs2u7x6LSX/Cp5s6FK26YCq1Bj0MiSKyOALRCVXF2sHFC8kdr3qOZKdzDc1qota2gwdF0qKomWi4KG8sOJWXcGdtCEB5hZeBPiH+67qHxak2vVts/g9V6Y4EtAhofpm8XQ/lGmv365CxzkdHqxwvQijh+xhKvAxfx5Rb+6mQGTf7A7T5yu9K0K9PLebhGHmpE2xCvZBSQh6kb/pcKCl+A6WMtVQUV9TOMS33eHW392/Cbf2tDgqEPzVaHINdQpy51JDmZ0yx2XwUcgip1TgeqiKwh9Mkkne2LFUOKqlti60pIVxx959GfwOgyy1dSY1Xvo9BqenU1Zy3Ji3CiFKhGHuedRrbWE1bfxpfcalmWojjtEajoYRC/QQQphKhDEnbKjivS4mLxG9NhtUBWJ3ps6ZME3lBI3PmLMYmKBp8xhSQ+Sdn0juLm70b/SGt89Z+R26SQwzGRssZKeI5/noWmedE4oyStZAw2JMDH28dcVLWk10gHBznfs+CtENK34F+QsktTGqnI5B/pq3PcILiuGzsbGPjKhgdlpldHJGDhoOKgTL3znjcg1zpnizoJhHjszH8kjoiBG2D/BH6Mu1SSu+h/0BZq0t9864y+Qp2vEFDPujq01Ua5Q1KXXNaMGbT9GuT7hSe7m+gxcKBBpjKVtls+l4mNuPEDrynVWj0En2XLMkAD7X0ahrEE+domTUw8AiE1Bt9guOEzthCfXSuHeygurNYt8yQsiPPvDEf5PrAAjZvYsvU+qvIswFoy5HgdVN7zCT8kUwnVhohtVrFmHyN/I1KHvvbYIUTKPUXFzGM3iY4KpkOepMkG3DdaTxHw3nTRADFamjejWCcoPNTD3kHYahu5ZSvMp83QDaU95+V/9OOeaD4zSF/oFXWgJiPfheRsmDJZ41PsSd+ddY7kkY9u0BbCEUnbofT4VWCY7Xt6hZnrE5xjRIMCQyWF3J+jLaBvXZ/78h/ypzNfmKLYWPuIyKV3uVazbn7L+Jveh3+9Cs5DnejRm+/u0zye4z1YcVxbuqAC6mJoYIjlORNfpRWmmb8nkNqOEwIU1DEth4qKQB7L9WwIDZhXe0dsUd3ctM9D/sqIS9ISgc5YML5B7dGx3wkZDRtygxl+R7waz85lyTcyRxAbgCn6LEWvtQ6l/rovbYTz9L/0CI4cVLc+xPYbrSBAcTfNkMxFintj1rGzrVOHY2UsPJ0N8Jn/x69LNAn7jeLfDlAAwe7l6sJiRd0yABa72fOYkaFPSSZ5383qDb7T7HF0oOxul9jx3s1N7256GHKw39dPm+c+ijjrC7lKB7c8iSuNBj/yfzgdAtAPUZlcZbIQDgK9WBXfvn4oH/Zp5fVCw6TXYQc6b7OFQM/BXY7IHq5+1UETVZey3qTbyPCPelnjLsIUg4CqrT5T+3dcrOYkr/zPoA88cMsPrDOnOWPPLjvREai/71LRk3lVskHii3SCaY8P+QgKcwa0+f5bLIhHZj/CHTIbBsn8wCq7C12qeTB66n9LScQXQqaNoN4v+UIdbJI6r4AmG/U1h8CTQ26kC8y1LG01b9PVcPGAs1tKwWWlxE3DO4vbcYX85Draf2yFJ7PxivL/mjsJFHxyExC3SlXSJAaA1dJ3p4ZSoQAuMYbRY21VvH6++8SZF/jrWlwQaBhhc9ONdrTFAN9Ycz1Bum2zmVJgXql3KVPi39i1LyH+qQy5S9OxzWueNBz7+O6yM3SsM3slyxs3+ZVwMJBgg9H4aiHif4miC1cQfhcAvQ3zeyzBkbj3orxWi6dCvK+wd64U4hwi+bQlXhOUwLCy8+bpIAWBmQ/tw1Ja0TZPQiKLPxA0jaJuU/FVV7/Q0dfQ/ASlln/3+JQmqeSFO3Gx7pxai80cAzdnTpMT855f7dRQhxw74HwM+9XT0Gji9o45m5RmAQ5nwojWwqnEAgjuUfZueAgccNlrx0Soyyro/qaO/WONLx+JTuV8fSZNagU55hUneFHIqn8aVY5rAQfxFWtNIy/T0hxgmAfWrawawmplnAIT0UvlrSkjHYk8jDezLiw4Es49zrHxFI+/f4dSOSOFurmRgfm2L2QX4CcGKnaIq0qpwStPifUvS1IF+N8ll+oBgTxzzdPgYavcTzNv9jNqSfvO91NvTSHqPxccLYvRFkWottfGfLmz90xzx8rdtvKeQUKZp2OLitoxoA1+2cgQUO5OZGrZGbWTFB03VT3uVfaNq4mQh91c3Ligs/xkzr+N3KnrkxwMt7T44a32aQvGhlKwEhwdCB2gQWw1qqZBUrw5d5B3bEqNrQAKJlnjuMjazSsgxUAtQ6jlZCUBIzXrPgp91xFeWSSbLZ6yP545O++Fj8iOiQXs6atHwxMQgBo00aihqibXVA/qjscIYKynssjmJz2FYqCAU+Faih9I2AKiXWePj6eyfeO2Vnc08Mm6u7bMfhmCiQd1KhHHKyDRXiGrbifbdzrh8K0J0P+zgqKxZFCWSMOAS0ANKWHX0IrLKh3ZcBGO7n0jOR8V/scooEH87fCbswIw1xecJ9Iak+ehqJV/Gb9kiv12vyGZ7NNzs6MKfSDqGnXwNBon1ttW37X84PcgBkCojTTOJPJ1l0RF2Cs0pOSpuCV+x7YtloDmd0ksFCrk87ioDyxPefjHOwD63seGybvf9keS5JUXZx8ofg+hpXwNqoWsKk8eXqSX+NczWDRq9lyPCfrqMkWG/t6XhG38r2hREExRhrRs1xtXGLqMRgYDQEjcKbFSrWWJaIyCvyFA0ceOAJE3XAyXpOfjjWRCDVrPHiQGu3i/n/27toiAPAzrQFuDq28jqdw5GGPGCU2hte/HqUiWgvXwy/OaUqVoOTIkmeqxQ9dagGV3tf1JQvQ3FTIghh7VR8Epi89p66XurNFtQue5UblTpr8EMlRy55lnwu85b7Ayxk1LO8gaDLbBccZlWaV6iFpal5tJoHm1Yx7qF3XZ4FHLhwoWA7dK9GbdSKWyu5Xxb3erjefs1+Ggnx8jnloIqk7K17XbZVFFYKKQerJtESeb3kO+OFJBlB4geByBnnShd1WaiWhZiNj1X5Mfvtv8l0C1IICPis/uqwxLMa91J4mZMpIQVmpaevvxqG1IMWs2OODIwAM/av50oYGOkdez2JLwhUffPcLrLmfLoOI8gdCzJOo4VsI+lG/a+oanCOpHYZOkAsCwFMZQwRxSeRWspHHWI2H9QJ5Jbw0wXA0A3dNyypZORuFT635/2/RjEr+nVcf9ggZoOEFuwohKV4DNnPmI1u/IDqcP6BMooR/Zs5++cRmk4chsnzQn1Ku+6ctzHGoJmlyOAhvP7KGulJzFr3POEuo6TIdVaz4RKe9g44yYYM+RfuepMG34YaL+6fIf2c+6YFwV9lj5RtOeIKTM/0A7LIaFyjD3ZmeXPnclkdFBRD2Fovp+xIWk+iBoGMk105P7rGI/WkGGYWpwaoZV9ebdhSzC7Sii4zI1njk/xHQB0/UdFAIZHiGFbojzi5SKbwfZpXxvNCTw1q8Db+fGTAWzw3RZ9MTEnOM3RLLY+80EIYs8aTm2EeX75gkiGNzQrPauycP6PxBY8jrD5DJgJkG0Wy8odkRfMNSspknvUEcqfL1M+M3pFXNp0pXoNirlAZ1ZmU4T001VqVAl2zSS7F7xAl8VjZ6iKiPAnttK2dg60FhEr7wKQ+uO/pQEeh34Oh18vwTy5tDCcaY0aQlUMg8tUjTg51XG5vy5Mff9eWF0MgUhE+bkhXPuhVbnY5A+sy5B9fBJ+6P6IbOZLj/hB28O4gNGdZud60Zqw/ePlNAi870A9Vki21GdtEW6bl5kPxjL5ziMCHH6U7QT6xVruZn6Tgj+BOJN9YUmgxeTY5wG6U8mDBY7sJDHXOZa4EPmjgbYugKUC6urAX91gCpsciIfXROryv5XwQdZnFkg421+gkHED7yvurYdRbS4+ldODpGnZInX7YBTsH601T+goX2iOIcrVyj9lubb1cWmPIXrRKeUNdR/Dk0H/L0vjm10CZgJWboPAu5hPPbisWEDUl544416mKRUl5Kjfkpkc2SRlztoIgxxYt2W8eoY3SkipaiM4EvvDuXE3xGoOKoSDTmHCemW85t1hZqhV71opWWxlB576m56pM3U1Rf4fUsgoecWWVpC5afTJVhGOlxVsipDQEZwalHnea8D1t/oDv+ygBJlASNSPBU3zbWZmmoDI4S5TaYIRvFr60ETfUNd9XCxQYk5rl8TlGirpfyltwH8ys6PRdNSqvs5NxcVw/3sQ/sH6HB6CTiT1ZpzS1zTB9jzdYh3r1jcPGsTpv0yGqPjaltnU5Fn2aSn4COsk2LLwl2AwuyGnEAB54uONPfiMg9gAZLKdhKmlVgm/pfT1a8vOPSMsIDgBIuQUNGpV8kQBcvLl4YCpVRF8V/VSR4HihNtglY/kzH3wIXRHCT6uwOxnxjdx8fLgU5oSpK7vlEpRPdP1mq5wHNJDOeAEKETdS0GwvNQzDvnuxTMAzIzcl9OVKes9G7MX05pf+9ZrDKQzdKNKHecs9ev0wsW/YgDHvGKR9HM6X5CFJBeXlCvy4VJWo3WagWYsj7AGJJqm/2+F+ESiZsQzc9ngzcc8MWLri9fmHZx6iRlxVoUV8Dqe8MKiq+OADptN+E+R+qr9j2lSo3SILRHMQyQkL26RAToXeDh7L7YDXlNrSUGS9TyyphSOr2uR/yVYW4Lqc+tL7J05RHRRKtGYbDbzABLaoXw0GydFEN1jhixiwwnYgxtV2db6oyqSRWpDI278qah7afxbNpo1qixu+0WJzTx+45i9o817SwL3jvYXV2fJ9MfG2Ke2KaZFrInopmFAkhLzxVpDF1SEbIPoigod9QdgO5v80hwA5YV2LVaau5pMR/YlkcdfEY+ZuFcJBQsrYNiMgn3lUMeYiaCepd46WtakNcp3EBy8+3oaqb6OVqOqejy94XJPQKHmJc6wCAHKulw4jrZhBqrdw5enTG4GCND/R9Gi7a304GIXngIPm5xvNEUktlq9gcX1QyEbGxPqM4qJEe4b5pAV8OTG3dPi4kZVi73Cw0aokU5hw1NRBgLX9mbJ08llASFNw0fwhcxzjljXGs5crGaC+MqwRT/4HjBgG6C0sPVID/hel1AXIUiwq2Sh7UEfv5/eTl+KNYmLccpasysKL50uasDTH2ik86+uGXAIhrKJArrgxFD6chQ0Ph0k8fELUXe4w3mdMEVDSBRFHPHByulcejBndPROF3Ol84gtg56kwlQVK3oOcahUH9C8Urbh8aI1NVReKACl2jk568BIXg/+SAUyJRFuDeHc570cX2JAXJqPbQA6XwPvtN+lITIXEZym8DQjpRoUyLHwTMibmfLzpKlnIAX61O0ZtuqAalLPbAvenPfF2pubcPE9dY8vGcLAgpI3ra8l7dO8QZv+XG3jEpYtitwYLjHx375+GKbt8jCZ3efRj/uWD/tp1mLtVrGxUHuEmI8aIRhOZVvvlQ/oII7aaIRoaM9XtwnuKJTTi58lgKPyYalujjny/3fsgAXn6kB1wpr6f/W+AGoICiNtaHUowUjBTTrKJNn4pLQVx8eY6u9zKOYEAAx29Utai+KjaYt84ztA0avj0upN6/tNqoFqFeDZdk9g5A7b6dA1BBh6zbr5kA67fDwXEF2pJE2sLJSJ2TGJZxXh+/whCkA1aRDI8kLVKwho5HXC6Zgr7eETcGmnH+Q3Bc7XqLyYMdwkT/gM0frL1TM5q5qv+PK5IQYh4gPAzbNSb87mebgS6mpdMaUuDoxvUgV9Z8AhNZ7scm3PKpy4L/ZEBfFH51QiI2PU4DeGgkI6MsJayP5TOBgEYEmeL+R1IBeGta0Ahj2fEtBaq5QPYOhWXMjGhy8JwtXa4UdVfT2g0Ke97qYVI03wDRnxKp1N0CVzDVtLFOBlH0bzRokz3sP743viBAEJbl2LPLTbAxnG1fITx9RDTkPMLKC0w2Yzc4sv2wj109NDacBih4WF20Pb9uuSx5nEhrVD+6orL457HmSVJiqRIrW/JYrJ1pnMWx6GbSiFiWV0LNbqNAafnKE6ll0J15/XbmMsnvgeY/8vQHWYG5baaE4NbxbEiLXPUDNbiaaWnSlSdwajdOqYwfeQS2u1Q3O5/rUUXJ0LsSHhBDLYMmq/f/62UlDAdRovLQvbkR32vbMFPKn0M5gRnCgePAzjgblAXVj44w0Tl2/9kx4zs6IAKI60vdbif0R7tJnEBXpSUGcPjgEUtNbblk1gLj2jzIqOLMQ9K9Uf9gFS9535Gk6tzQW5DnwB6mjVGr3u4yCzJNTstuUoW2EMWp0bL56bJ4ObD55tikjbO9m4e+jn1GG1fnLOVes9tk04VmbcztJx8bHo1I1sIeeOpie4EIWxs0WY5EVl/DjVNcsdnBkxTJh8/Y2O9+DFujAaqL7x4ytdV3QyaqMJi2oO1RX/av7XX2l7wNt8swU+Fr8YVLCt39wIuGWX08rxry1sAgill4TJuqz2ues2i/CWyhwPOHNpMedioWD173GFa0mCDaBWAmPtsWSQvJ7xg5cndNKDSousreJ8h9obsAHRT8GOLFTANs2bDcE82MlArpV7iROKLzlR+SZdbEQbhs9xotB8BPJTjgIdbmP1K+G0MgOLRWIbGDLtyVgjpAKMS4FCgAs7/Jb9Yc77Xwb8V+1rPAV9VxhU+PguqOfcC1bo0WBo7I6i3GpU1tQHu4sTS3wGGWG0HK07qiudzdieNDJTZ4IyedqTGDoZCoutyDrRoes0heoLz/d2nLEnY2G481jh+9DO18/GZUWiULnDfIv1W+4AR0rWVkJcRL5/GdcjZxzzClVeh/z4agYGVbfX/aeaNBS5SNDepzIhbk4MrqpqSy6VqeIjoQIUjwEQx0309uKOLaIIEvNJkiY7GE0rICv0PSrcLvXq0RSDylt/gMaOfPhrFJnXTyc9D3VoVagcClGHGjEk1/6dNccu3ass8qKuGo0VnbsIXisVCu+VoLLNvtRq78AAVAjCp8fZjNabQuCBV1f/bqMPRKi/MxIrRyxXG1CDwyznZChfIMParUOdldD1yP86zLaNlwMMR4tx6bExKEABJx+waOsWCtMQK1a17LL3ZFNv/6Kc77GLD9bvUMAsmGy3qTndI3Zr8w4EEBbmcvV+PvVSJR2b1QqcBuKZAZXAzVjx3kDinNMmTzs3ooN3RMtrexUXtfQFF0l9Vy+BLaCaRukiZYQmvSnCAetNo4C3UHnO7zWY/cx5m+93PFQ1/x4fVdW1tRGAEs2gBLxa0jXgigHkA1kNEQQgwfOqD/KEKffA6axr/h2jyuLeooPgbGs1eRPBNUpQZwyo/FoeslDCBG/I+TNizDEtgK17osvSHn7HOR1NpHNNiRdFpWmZF9kWTQIby//b/52ikOr/P4FYf/4Wg6uWbEdxLNfxaIamGld3MBBnCscU6Mo/5MmTZijAxc6NM+0ZBDtt2WPqm7nGVx3LOQcg22iVkOKEyE1uqUaHywoWVDvuQorV9LINDL0W9S1nS08WwN/wQ/uZFHFw//gF1wdza5RUMAb0fz0I2rQomf9C1LNeKiqMNOKrSDwb9Y93oDa3X88FhFyFSWSLmNCb00u45DjXTRXyCb1EFe5hsXy7CuIrLipfJhsNR6S3MDdoAdd1f7JMblqgNPhDgPCkHa0886KKXx9mkRbY9xSkD7Ptuhczx8vetJb2QurQbnQ4UyXVplaXhZpNbp9pSFaoYPnoimGpOeMQrNGdp9Xbz1u+DvsUeNbob9UxN6yZJ3y7XH7ZP7+HkrqzAjaQZVPhHcVEEAqE1gkq3rlvJXAgRV5oX7EFZaTuw9W3gBQbdblyIFJR903sI8KBrEPAwFRhnYNE/Ds2k076RxteCZNfVmB7u24BjVhNo3z7SRSCeYmUrs1Kvlq5Oqn1gII85BFRty/EhKtI6/j0y28RmId88dFdKrWkXt+SKOrIPh/izxAhZ5c36CPBladTenFiiic998Yh+FHWIdg8VevrnJtZ6leD1ZIVy6qVwatKxQ3rg3N8BN5E7YxcvfvbSlEao6jtGzCa6RVpZTEef6w9Gw101EU+ki0opZKi48b2U5hlCgnVcJpVmAjPub2MI+xA8MG/qvhJFOEOQNGZu2fUdRMRFDi7z3iyjue93JPRVGq6FtPJ86mdt6tAKdDTA7t4lckzgaVpX26WlvWcwiJ705OKEYfNqHDqOPLAmYTC4KlUOG5tWTzZfF3/B/FhYlz1GO1TcIXTJOO0POxSIhifh3UHqlxeY1wca3JwL98Zmkvw04OjtJmv/XMEEvi0Dhp98T4b/Y8ZgOwpcUH5in33faiMZVuL07YSrdRFXB4EmcO2y6wHhuwtaZEbATqZDKH39Er5WMl1lggVRk0/+MNy+pph+keklIFJpJomg6TJWrcWS1OoFitcS8HT8oX1DqgNoqJB3nV3YoGp2PbJCi4s4XvjUdIkf1H0gYDhqVcNlz5QGHSmGl/iG76j/rGCeNkQ/AusgG2yL1hQDMEPiCMRf1HA45n5BQAGN2CR+0JA0MhIrhHJsx3t338r9si1vT1TeSqUM2hT1N2q/uN7PnXb+fViEegoIthgqwPOqGIAy/TwBGPrnWwEM7CenLlzP1P+39si/mBqbYPkee9yzE9WKskXAPVHikAb3PJQzBqt+PuClc+DiQ/JhwWD3/GWInZUPbxvRQu3CY+AldYsIMBrP7H+3GWthJoMGSGEedcwBGkjPU/ULP6RrtT01/Ng5JESncLUvTdymwzhKOfLs9gDOGQdmIbUzdH82R17m5ONtX4Gt1RSTKZ7NqCcCooae1mSZqtCSGSg+38ykmSD5S6BctzEKVBQMR5slfkW7+H7DYd+AXuMOU5uXf/tGkBL9EFCGDaDdO8NT2/GzrIX4ntTX7FkEp/8kAB4yksUPETKibxSaVp4inIP5ouh46BQ2FUS4rNaNEebOqjtRbJx0/ttkUh3Zr3UB/UHARgMEEgjkDqm/PtRILXgBItuxZRsSsBPbZZUXMxlaShb152KKtILWi7KovcaQNzO8l0F6ehgVwG7GzYYejdpeX+lQYs2Mqn+AARVXuhMAViS6DHdzgYjg0U9M3llI+L5DgNBnVqstuXLzbSzfaXYMXyBhUe+WQMBxRQRRnuRs1bUEtAPLgMN+ZdHI9V1WfhwnWv2S2BLIJSmPXlpHk7+UIrd6pYttFZ9jwjundn7Q8vmPn2TaBauHQAwBewJdjSmHvg3tt0nzqRzUhuKE/pVg9NNZiU+TS49bqND1XxFrIBAchdw84Bokyg8/951ObG2n2DzBzTDSw5pIeU3tlhKQlQrpEHqcQrC2IkaKC8qMEh+hJ8TMi4xrGW5ODsIZL6zFHtGGZLycVbX2OopI8AO9vLBVn1UXIENWbE0LfE5S6EFWUXxwQ1u9NrSGH6TIw97+emrTxkxZrT9/jqv9DbJjYA9Qqpy8anC/cu8pPEtA4WNs8stb+H7frisVIB+T2/jxWlbSDsy+xp8SZuCk/u+SyvCIJsKHR2cmO2zuXQV7hwEBnprns1SkzhjJVnnOphbcJjB7DiLpSbNuWanvNrq7FyRJQtnaivRH55PyAVukmo7GUqVRHw2TQy8hNfvYzA1Y+g4Ze5L9t2y5Q4MK54YobgPQJIzUnURr2ZRiQfFbYATWJdFs/CQT0FKn8qPbcfEZPUZUjz+vRm8Ap5SBLwfSBRh2BU9AnWua26TYL//dIt5FbA/2NS1PNkdZp411Oj+aTjzhNcmy4iOk7XBBlnqmbQj16syLdW+ccSTwJBnDi3dFMvxdUNcKNS2qiw4DTDVSuRi0j5wTAASZXdVZYyHESssds0NJetOwUmaAO0/Kj8qRfcpsJ0qocXMzqZ+w6rdmZ/EsdRUmKoPWrAaqXH5TfYuROY8o25eYRUls/UicGtGOLbDv9keIT+5Z7Ep75Fnvve+bQZgm8LlgVVRKmdknRxvIA4rqFFKmtQ6c+9fYtIrGzkYyo16irhspEqMJZxKSAEBAalcj7Ut5UuHMmCtT8HNCae85hMGtbE6pKLU8Pp4nYgdQDGI6xhAUvjQOnFhRYf/yN/rHNNzfmAL/XOgF9thvNgS+xDneKNsW8lrFRrufvXBjaMWZw3/lm6delsS9q2YFZU0r68LSI5vMqbvIIZreElc2TstQlt2l/BubB7B6EFe/4S59j/bDTBDkRi9wI1/0SwMi2yGFWWFwFv0ojxKMernveg8zGDNeVhZt3TNZje10SUhjddX5bwuJ9RGSaI/tJYjGQQF8k3QR6Z29y1oJRXCswAURgiGVFwx/Mhr5gG6dh1KCYgTuWLqcMuR6yrYDCaFTrqMB93FBBYhQtnLfFJ3jOIn2+PkRN2D8cxuxoGND1OGEQMfl5tZnmeeWoLmoJhX8p0n3fFFicZG0aNPpQHck3UQpeUQ0H7OZqzfo9KmzFUDKrIslG9YuBd4K2wFToi88YU/heS4aSNLnsXnBMRymqJkIA/nl9iEVM1V0oWrhe/uluyS/e+CRH5nCAWgNwhGRCe+du2lOfIsloVU8uz0Fqer8HjGXq1/H7dR9CKj3D0To5X88gWkJWt2v39KI1XAxTSvz5Kh8eqzyHPFbBC5SP6DTqUyVdJIJQ5Pm4kEVb+Xkva8qfI8NxFVstN7RBdU0VIjvKj6kHQOXAgVvDQmtqzADN09iHZ3vT6iIYKPMAy6csYfK+vQ8C9j4uE4ju1Cppxm7VmkZtY/klmfG3tM9IHEFqOK8DjGGrNqpK1VjEFtxQSNdNNXpgvo7+v74B8Lqdxh/Xbb78oaxGNu3N2k5BHPXuYdMheGyafJRt3juqB19ptqJQRl26hNctp/HFED0f/nM+//ktDsYesglfdUDH3sT4ANFWBL9Xnu2+3Ba79umJSh0NxZw8BxxZxOuQK9wq8wBcc5ACAEl62n3nrFuMBICgURgtqXIm+f4SLRVjSEX6Q81OeUM2mviviAujAFObjB45wsLi+6xyiDmbT5L0cSiiELzVwcvjVT7tFvjTseGg9uMEriIYgYDSlny5j2wdAWGR7zRL6NExNXBKLlsFbPIUflqOq3vvIKZHwarVNNnCNer46q2dYYlmmlHFiRCoQxRUdQokcKhqBoxtCZHYVE7u3OXafhTErzbhO33SLeKzdF3zerDy0uv915cLug/Jgi872DmvwSloa6MvEtdWEDQWlw9m9+cEYRyS0B/pprrHN9aWIp14QWw92L7/DXJvBxjwsEVRUpQrk0jyvcMOcOnCa0EomQqa7V33DrbFuhm5iwotTml6PlWc/1ypUIEMo/LSDkMO8ASGAi0qWChvmG+8mLqb/Bwmto5Kjb32Z9OEvnb61nUhk2dIW5UKCBL8B1Eiyv6V0C7e+FW5yzMpXOCFnJb5RFnMnKcGO01DY32RP0KcNfxXx5hNnP9bV70sx/20PUODdWzncQg5IR0lZ65LafF+L+NvhnhQtSgnVwUB/gGgdQ76Zz7ljM0zunxww6nhf379zcv4hjZV+tQKijXNp09VgVDygsva+VfMj60C0G51HSyIDJwOdKuXCox21KVftKthkaC/OePUsNZnqWIu6bcHtZ5Ccc8RfYHSr2bJ7KOyirMk/VaBUnp4le/uUA+3BwWimgBqdoqEoNQ/eL769HYDUg1WxVj2SYEZb7OmOIkup/K10SyhTMhWXLrblZ8braksnBxqOCmMihrjdEDiBEwBG1dhrlJSur0bhnyXPtG+TTuO1tHurKyX9OBi6GCPEzf3Ex65FbpUa/v3kCPwtdGINHhe/SyJhY/Bv3r7onvdEmtXr2zwLZDy23SIlOeLX4SZrwZCtCUXWc+R25dbgWVrx8yuQNk0pHeoRLxWMjDwH532PD15nZ0My8ErzZPqUqnis6dCOV9qWMeuMwpCmSDd34dn0HDqBDHrSyTgOqHJYCgY+VcKeChGafbTnlidgEkSLX3/62Ra71FJSMiNIskN1yYNxDLrGBnLlRQcyS/uWn+Cy6Rtd17+x0ja5kMjxUtZCJHkgrQdz656JLetghPa5TBSsTgv1eyueKmLCQvDTM6VIpulx6ZrCrMi6HJobfiocMGXncGete0Nculd7j8NjJOenv/yY/cYOyM6jaVEycAqpuMBymbmS791Bz0FRJxwqfLBqKSZQFcSF7vYqNVQESMS483eJb4NyicxYxRPCkLUCjsDYLLh9TgtkLSiFDSiCNPlciZKB1rL4krd+iGtV7NeN0bKSK5qbIsDbhSLvXS2cqCet1u5HKkJD/45bT5tm9w5DHl76pcH29hlibXlR0TF6CGGskYgUwQVPPQyUZJpK23/rpVimTjoHgAcPTiAr26FjDUTgahD037SMIS2yVr+2Ozgx78W8ZKqh6Ch+HoiQB0RtEW1LbvwrKQO9ch1arNaNlXyRaPlfKyZbe7IL1xPdqz4qv9MvQaLhbgp4syIofAi+H5N0n39Awvo/tHSJRPaGNh8g+lror/3eWK79zMKk+gaFUG8eFDPjluxCR0ocHky9J3veaZl/MFKo4lGnTR0WYvMtkDiErHtnretyhPUJL0N6ZT1hs1V/+8HwXcBGdafp2b/brMN8ynTCxt4ayY3xeLRyjfNu6/CXxk7al0T2HkaQuH9UPtrTiHGtYQYTaDXFKhCKaC+ngzR3pLhxWo9hihAABwSFIUfOkZW22YiO7tnVkYl8QUOVyIoxGrCiSsck//cg4agfxItY1alPttQ+hlM34//P1I/t+1+VLw3cVOhh904F7bP2v0PSLcVGFoHBVUSINcJBh+VYIngt6dnFHFeZ3HfyBP/wG/5RXJau6sz6DmUyK2qxRJ4TtMVpZccmXE3oMRnfKi1WJU2ymIoqQSq0Ov9IChasDcb4ZtE8xtmbnd/rwIJ0/3kaIB8cQOPR0VzND3RiXjSkaskU4ZZ3dci5uGN+XlUQNHJKiRFV3rAxDHj6tdODVx1FxIEI8HkrONIeG/Pzmj5ds3uV3LWuq4GmsIxDaPqk9RSRDG0kGzNSjJqhRMWWKeipNAJzDb3zjG7qqPYnwAivPCv+0Kw+r14tDmjE1xMaGzskXD+sSSWTuUx/TtxlHJ2mPTZAA9FGYao5VR+DADSonTgRHPKXPSJ8GiZdkBARpAHtkzte/mxCDxJfih04XhTaBCAcY1hFUMWza3RZ42pTx061zzb3qFykFWBZDN7g9Gg/S9HhzCgJNdLCLQEyZSvtEj2WVr6rgmAaTTiZ3ukpUjpwQ71Db22tx62XNVLombpjJU+j7nFw+H02ulWx76NEmRsPiBpHeOj5LTfo4bQ8l+PvgNCxrYAzBiiDV6hZUHhoxhHdOXXSZfhL8TxgQe3KZY0ApCQVCO3NoswFlSLIBnvJlReeKtRLFcGZhtgnXQwQbFG9qXOFTjuxgse2EJ+abyfxu0VX2fE60yqVYihlhOp64y5rnepy7E+81lseWKlfGrel1VS2H9+PcGQQ6Rx1or+Fi17lYCD+mEc9DTBp9oRu/QLhhVoXIEyOsJmqVwz/csmtNPSMqG/sRCaaqOioLsUYWms6fkh/AYzIWxmXCI2fiQG4IJoWCmI5G9YUOzzErsvbuhZEYL439TN8eGh6/5f1+rmYroqGBIDYYi1PW968VMk3vfgAazu3oerJRSqQN/xUVPMGdHhlEWtPM0aWgfqYZKOmzu2WxRcdQbqKnGEbmhmLNswTO4+Vws4zX1NYWASFE6UF6cQXVlOHNyXDwMqBvTsQB4CXjnTrvwHew5en4yZhTpaeIX92eOUOqq3M/agZtCg0Cbf+OiQGUjL0Ke/kM9n36pC5QIwV2T+XcgUZWmCqf3ZP+jehGtAfa+0HHpR5I0QRLWkDYz+6C0YGSpQf/rbCeaZsMndk6SN5zBYMPYfDC3RN9kH5AcCoCHJqqWnRXo2BBJ79ouW64VK3n9FinROn13yui9T0/amjgH8q6JWZ8qJB9qyiQzWbS1CBisf+84KhnGYzV4nY8WQBsEz4VDvnRq64yQHr5T/BgC4fFQeBZ3pIhFgmVOZHVLsMbpM11Rlu85gOesHeCo8Bd6wcj5rVvM5OqQnLDLP68anVkm0jRU9Y4YBPMd76CXtQwjs9KwfkPSlHONZ48bWy8Oec6m2yAXm/Lf/Lkx2SD5u2csgxsr6+dlQ6A04Odtqtggo8OOE4AFbae3MXX10imOqv8Pby0rICtf9ALzwUmXL5MNxCISeDhG0RQfVjvVVRtEl44d4EDjXtgKxJxoleY0o8pPw8z1MJN0kHGcQrCkK6A8214OFPaAjhz2fywF4dx5FrLpGhb812aJFN+BPwrAavu7j5si7pHPZB7qbRWbKf7r6itGMqJcnDSs+QOVFY0zbcIqCfQ+ykdHKmlnwoN7QDqmbzuVE7j/G8tYHmAeYGO9i+yZLIILKajoDwOpOhzk5c7fgZY4DnEGtdDBaX47j5MhPPjCgzg0QQewu05Pz80q9oyhpFrKZwEUq4M3wH7L8Ieq6aQHGJV26VrEFnudLMpMTqN/1g05mLzqX35d9zvlqfJWjq+tqyfwvkH67Gmo8W3Z2BZSAD6INczGB/GfVYushlwt7QrlZGE2lZFz1LpHk9eBbwVOIHNSYH2p8bj85BX9IE4UW2/ueHAT6c/VZJCjaKPlxIAbwV/zdnI1ds+x/LmgtJKngZNVwUufzQ4M/3JURQKEHdgyHTx41aQuTjTshYpYb1h0B9LOVRLdMObI5TZ+4YHaX/bTnbbAWJZLJFZRYiJsjM4eQlTUuBLETPxoptKcwVepYjoVFniJteOKSnpWJudi8u2UEdl4zhUGWXQMWnhBRuB2H31sJ6ClCZzCr1lFYzB691p0in7zhKd1k7PspWoYELtKbxPkxHjXskKz02li3i+AubKxxTNpbdOoDSA2VDYodN1bl1bkrJ/P9chyjCF3ONIjrGQHQnUXKmNCwPCIs5vTIodbMXkOtLqMxDbiJidXbVtfLyFglxTiTt+VNunJN82CGModgsKZeq4GVL2RU/jEDfYXgDuINRXX+sMd5zUJZ5OjRp+IJII+w3YoevlsLlbhpbHiDD9f+ZUPc1mpV2Tzp5WqlxAHIvsWuOQ1boTW0E0GK9adJPq8MvjBJP3xILv0lVomDpoEdSicJmqcm/U08ZIYDMcdVdrISca/ABEhEArWVM1tRPOCgdGP87GuoiOntgCAB8JEBI/Z/Np5GN+8hxAdhyMVKfjiid13xwzi/eE9fiY5ZEr9wUgDZxqMu/VZWfRYYFBEKKFvET3KCTsUuoYjIirUZ5LclNElHscqqYJHQHTv04FInuRL/snIxzRWI+Ddt+cDT4DJx2oTgho3qtnP2yql9O/ukS7EsDTEip8qOaYuVypun5b82UK/Rpq4x7xdWwpL66cL1N9j0ZyQYuSykVGc1WOCClEeHxvd0kFVJj6Na+j8VGIwSurvIky78SfOGNDyypX6heaZ15/MPDOO/Pn7NEhHNa6O6mTSJ2ZDn8wSntZ6cVeEgSgQnQiJE95jN2nO6irA3ViZ6FMU5m0u43gQfZJsNWDx7bb6xZBphkSqQ/p1L6KlNgz+Y4pNdqsiuPHcOfsFTdBCcVuFUwNuhpiHfaV8/abWQ2MQx/8FAwEMyD+1JOLXIpEQzmSzjYjMusSBqZ/0WJTSJCK9oQXYw/CTvG2HZvldCcS/33qeDvWnixK+0Y2/m5DOQjmo2UdkA2xs3XJiihuYdBRobJuhS7ZmzlAw80yLmqhUrZ40kx96SyCrgabXl/GCiMhBagMfipE5NIxMqFpPWT6NtGuM4axnJNT/BuD5gxy2z7uELpCBzkv9kmmftiCP0FDKxY/YJK4NwDhVvwkeMXBVftvqEzp42err3vbSdDcyV78+eErK+db2afrgkP4A91qaRU26XjHXb8WODzcAVZAz1TQqej1e4WCfXz8TWHvEJqrCLg9pebqF2lPHNCIHR6shxxl+gHVby/vh0NLs1TWwea50/xXNP7MT1+tR6nA0+A89+AVwwV/i0Ni0R3syKo1vQXw2K8RJb+3tzFR67fr/hHba/A/r1wLUXQnorcmnptOFmetM53y5d9MHYkDkfRyxrGM2Ba0ZmHjBQ3x/Vb7st1V1rBLG7Q9HheFMV5ZKw3tgzDttjSrH8mpwwHTJMzcU1whmX/blOdLE6DXEY2XfnjZfaf2Mthpir2mZ843EeP+Lwku1tigAk9vtC8cUc9903InWe5gwh1+DyQHSBGIaRuJyJU2DWTbgw+LuOgjx7a216Y1B8jXzFr2P7HAXEkytMnMLNN+diaVqdEYv2d16EI+WUmnU/pG76Z+itaYDOtVvtR/oFkLvdhP++KsXV42SmdCaqtaJmNFHYB1xbvFUSxAOPraU88pDAGJGdip3IgCV5+hT6APbvnVe/VKadQD/tut9AEx/w/42O3bjIBMlw4ag1502FVgQRBGvqav3pfkc8/divKZoYGSVAQX0xz016Yp/Vx5eS13qM75SWbLp0IBWhXuppOuYBFz5VPTcR+zKkzjez9+4zyFK286iTQYGXaGRiGZeimuy4TekXRSPEoQQvBzX7EKjup26VDGnD5uY2mCpZavuq702g4BimPfJjluyegIt82kiiMP28/JnrQ0VpvyUf8uPwxmu9VD87Go/7Mq/jRKmW7+CnC57+HnhWmeVFpULIefEcE9UWYsS9JV1Xx8isuEWpGrxLzYxNtrqmCyFEv3JG32kdAxbS03tW44b29DGFZcfUqvFUiyNDTjZU5Zko4+asWtWfQ9UCVkPyypcAjMQ/Ux8aHU+5VX8mQ4DuwDfks765PgLLqCXxRiEghxXsndNeUt2UA+5X8dErdD2nkSxJfxNCQBz2hdaC6EBuVuLVw43UEdfhWRhHlNVUkdLP7LdCNPqQQT93af/7qFTAv486/+eVw6mFvSX1rl1zQ8jzc5Ac98zDU268cPe5fGUq7uyZeKCUQvLxLxUMWXlFTotFCG72euLUYVDavbHmq1F4Zv5RugNWk1zGKXvA0QArRl+I1hwO1vjib/1F0Tx2PE0mC8zFskXUqAtEolJuPDJKzo9TKS+u6zf5fjukaDPq654nnSitTlxxavOnuNBjjBvhh6cL6wLvHkdxI0feux+JtYriXmARADEvl9KPWGYos7sqPvjH1RHxx1Oa2ljT+0Px1ALBPQQCQI/IIKy2ggjgUnjFdpU85y8PJXEYmMwVoOBpPeZqrJ6yY7HJ67fbsb9hQSUTOW9aWFEefepvkkBF/8zkGxa/nOp8MGntFkkKUZiAzQBvo5nGWKO4pgpppVlv9+QOGUMCjmu1E6HdbdipOUNtMRP/N+gL8IzTgPYnUWw4RF2eMpLN4p4hl58wV69Yvga2HEr2TZDBAP0m7vHBAk0PYUqBqehKIkvvF0nq5gL1uk1cMm/+XDWxkjqKjnWKD2yXaV4ESqqq7SRwfMx1f0K/lSJjoWKjFhWiWwuTU7U2IAuZNBdIrlwH5xjh6gDO+VrISrmTfMoP4YebENVm9daeTUznm9Y9Hf4ZRmEjZ1loflJrcxGDVEsuvbuIzBy7hwQqqBgu7DLbLC+ZjXibTgR9s4SvVCV6AdHHwBisccTl/wf0Ba8/QTAkvfDfWWyPPIed1r60QNYv0QJt24je0HNkbcEZEfG5bgMBsdBVItUFUUvwD/lOG/e5+W/mcjUW53AjWQajrzszmXOWN/XuFIVvYTWSfYHFCQxT+TLOFnwuphXQ/FnRZ8JsvfLfbpBVQMP8k3vCg03SSWOC5iBzQL6iHPqiE4lvmk0p475B9npTBFC+h4zon4lT+zIMlzzeomPpXMZ2rwn2Qba/0aXxyFXMe4S9CaHV60Q6B2Jm7V9alAdB386NwMeK/QTT2dUjrM8nB+14pKijJU06OiUYMo8GV+2Y+OrRs64BT5nBRHN82I33pjW8NuREC2ebg9lN5587r/Ac2HOPkn6b9HnIAf7oUnilRr9eys86/KH6XxCWdJ/Cak5b4kMp4V0GOO6Xf2PVykLOOjxIvNMJ8heNeEPrI6oVGSp85OY/a/QBvvASSIt0kJxJEYt0LtIjKqmZBm9ZsYX17s1BjoqyAj80sfrkP52hZY8zziLkN8wryD6+d7wRfaQSdHfgNqoHwnsJAJMslQKgIXLws4WC4dFk2pH9vofnSFN/lYJfHJAu0JCE6fz7winJ1lbIKA1IhICjz7MJv6p9ERiSdXJhbNM4vt4iUZvg4FpJFXMXv8Rmc1Czmwh8VYbBMfpeVkeJ5uGb4vho75MPsUw6JyqW9+QyfE7Q7kdn/lxIlHGKtQwqwf4T8pqPVYXhmmz5/LEeIBfh79AE26RcK87o/zJl5ym0OF77L5YiWVIdCcwfQ5iZV2FsKZUpQ13sr5FyMnvOzKauRoIbsdMI+6YRcQZ3YV6o5s7IueNCjw7ujVTwM1dXqqeBGXDZLMMFsUdk2cTkRHeNK9k1XJioKF4rVGb3TkTHgCSxajkcO5RQeryQZFfZxrlzqLO9VT7ZENH7alIG7anXhvR3N/vJXDoA4pKZrc00SYHboye3mCc1c5Ukeq5gxarkMWvKkhF/JLbFPNvwMWxp/466pZduAQofPLQ/BYghDGKTTfthZRWjrqbvQalBf31Y7lW0bk0mxWVASd57SMOfu7LFnG2vRJ7iEfDE4JmzWQSozRBvatcenFDlHKA/Jj2Q1UuiVKonJFvwrKDJrR/VHi2YfSZwVjHxVhee7z0JnEsbZPvClUXYVpxl1rzbMPQBM+d6JQ9ZKpHIX7UQ15TOQ+qjLBKw025FqBh26upNS1cld2eJJRJ1QM3iExBl3bGKLz3+bkf5KSHl6dPCGAy7Bcq9r/XCeLn7OyMjMP4yLMqcyvBY0bIV+uTHGWTpBFTCYk7nDPv2v9xw+ayqPPvQpLeHE5nSGEE0LNUgbI7JfcWxbUob07kPi6WMwr3dZy5tIM8bSbthARv2xbrehs+vWyD97tKT4PoKeKKHbrv9IarlLCJknNQIdHgMN7WGrNvJbB5ttRT8W5JVY9qhC8u4qQVjZTIMXYrHqd+ea/yKC951djCPCIc7g8g4+exaktPNHO6Wxf8w+QSlF+rR27Kl8PcIr7GVUfJVu3FFL1V8IBCyP4N43nFuIF84H/yfwpqTEDxv0UYJ6d+xhOnh/B8kDrRE1kZOU9mEhjFCWhUSO90AUM3ZDWh2qgGtWeQamS2kNjfFPf8puoXhTZ6FA8u5iPEfy2HxBVOe4UVLp0keC79e53/2oWV4zpeM+GGp+gwDdBkxRGoYmLVedMWfAshEqYLPAma/Rd1CtLU3Lc12dDZI/6BtzQ8OzKTmcCJ4ijlm7jzqMie0owZeWrhEKbqJaAityNc4FTSMy47ndWa+0joH5q9yogm6yC056GiqeQ2K0wHE/TFfKzAnegO/FzKtKkkxl7zM9M9IFlV1P5k5/A2g5LnuXVaLKawVs277pkjUH8NnfMP7uzm5J7zb/rAZTq96/T9+e2FVyQe6ydebGJw60f6X+9oEWFjpLxRg0zjfWzuZMfQ7DC/PAqc/fLeeaZkEQ+/5DbE9UM1xnzpwx7SfFtMP3OATn5lzoexB3rp2TobTYAbqHqeKHUaVbDceYeBo67/Rp2uUj5voDTQTl+h8V53kQAs7hEIqDIRdRmVoGyk2+aWiH1Y5D4qkduMAsLZNf9sQVvv7q7pBwQbScr5OYsxBGUhruoTmkPaqN2/hBud4WeVlf8h1ib/1NhOytwEy1o8sXjhI/k3La4QrrudD7Skk8gIZ67tZOAo9aYHfdnsDilRwIEFaOeGDy8Aa0tjrJc1Yzd1RjwfEKuqF3MpaId2c7aY1kx+QAx0/QxT2eeM6W2VkHCu881i5/CHl+FBCXV/j7X2900vsOEoCFMwh9vW16Fexaonv2Ey7ImZa8BG/8N19xCbS5+wPdKlQnqSlXhbr3AHRt56xPeIyySaCnoG41eNyczRrpgejf3ZhP3lTe4BW3xECcBbZ51NytduV29uasNP/9mWe0FAkvF4wsO096yQCXae6VriqOrOlpffYgAYf1IB5azBZn2w8pxLYVjEkTYnBTLEqn7kHFgVCLRrBith9i2D8TL12ageKI6MP3EeC7ahuyykTlHHaAbtwILeIXIHy7JpT83M5lj+oJIZGCbru2XsLGqn/CEPwxhgCH1vBvcrjJooGbRANl3Cnt8r74n7Hh7dEy+XDFvudnqSUOS5zqiot652WiX2/4P7a3KZw1XXfPp5E6tPd2RWjeyR7Bdq1Av27Ebb09E4vUS8ba37V/nOWQIw3U/WWHw4791SpPvhJt/AUSvrp/HCPhD1927Hq9XWndnjfoGN+WeyzYNytR/dwM4hNEFK9px01M+nuwX69B8i5i1ycGiePvgV0xhuBEoQln6IadFVKAhECkqFI7Q0fIFI9gwSkPD9flBraXxoGVGUkIORIODvEbPAgEHRrTffB9Eym2eifZHw9a3kKiP7ULZhdq49XXhu9Y94vTTbUpUZ7Jk8cHiRvPWUpTjVVy7u4wO6+rwYTLMJMiadvBWcCdlbBgJTQzk9cx2eqlK34XUZsgaG7XB5AeF4mtY6LiKIkrAKQvoJu+MsW/pGrh2nXCHPrRppz/w5uFEcSr7CECMJjv+sLJJ/jqPXnmeIPVcabIgGJ6/8Ccjm5tjSqGyEDcdM1bhc1UV6CgAkgfh1/RfpnJX+8J+hBcN+todUqjWmhGxWmK2zwHxJOVv+kzmO/sKaoqeY/QnhQMJuyFASl18Dhrl25/kt9V+Cw/vFXFwmoXuZTPTyRoQzEerZjaUduQzhqCRPsz6SzdIw8HpnPzXxV2E7LrcjYnZew9Iurlv6C4xRTgH3c3jctpTwHKR8ryjaFx45tf/BCrXAbR0y8qBZTWZieMhczujgCBaNYzVF1y5dtWg0TpUPjfV/KejwAu7eva7lsskijDihx+HNqdGdCUhIweiFNJVrjFmJtrNoFc24i4rUDvzIznHRP4Om9U2fyRBhc+NFc1Aretdw6CCOzpGCygL479P56aiXNA5BRqfEPau556rJL2SSE6V/F6tCwXMwOjNQFBezN24YHy+Kp+xM9Z2O6HX3wEnsbCL4cbBpGfI1J5Jv+DcpH4DEzIbne3CIfFq5KDcoxZmBiedjGNbMPWI9OHUONq4ITUJLpRX1XqM6dCqbnQ7nIxV/9w4zPSgEbPJlMhOn+p9CO6vb51K9F/1LQ9lGlbrqivtE5Qie44Qk0zoocMXvZarf/dCqVhwFf0HpR7H2zD68uOthS70jE0B4FUeaiDAK9mKmktJeMmqwXJPRb3qt13gSp09MXuFTiFvAuvyDlXkm93OG/uyv0cVaUA7rrMk+1KTD1JEje+u7Xw/TkaJy0YjqMjXS2t/NGoCGR8N3wB9p+K3c2Z0C+S0s2gyp5j/1Q17PZZMSgtti/KXBTLW6BMkvTUKbdJelTXfN8u97yi0VqlglQdXxdQfbCo8e1qiKQUearYyXhDWL2fZlVjOTiXkZ1sU9HcgHTePI59LQ+IW71duvnBZ51Kq2DQE3IfT3bPGtmgeYPREWTRBxcFJg1P0V8wEyI58aJkktKGxJ7ranJ0fUb8x+XH4W2BphX7PtZsRPcdqqL1STdT7Z4GqNFWR0ESwPgl90Sr+nLONyVscQ+czSWVRK2Ii16Q/1j3Ut0ZmfSkjCt0m+sm9c6YXKIEnLvY7zrh2Wejdcqzc0YUz+Omi1t9NibLSY+sUN7Wgf2WbOdBfhkZ48rvcsuSmoDGchbFKc7VZ2Xgxy2S4yIDMqUVr8k5486ZJxKdZQxI5RHbGSYGRdh3J9Qm8zYZovji8R18vrKqFvVLb0WGZF0amSMaeRmdwmuIxgZ1Pwf3WjIEZen0nqZ0OIA1WEu52Z8jrpoMxQKhhbadFz+qnrZF97vDET+YMFW9ZtCOadesbfG4hyNTO2FGqECnL9s2fwcJoHKVcekCzEoLTUp/a3uMSGNK8XH2gWYbBL900j4jsfqMrWKOWCoeEVvqAj8Xskju7CcckhrWb2cdnwDM4F1kK/RQXHc2fDillFte8v4eIVlcPudATIY4S1uPj1bui+Rn6l4iO0L5sbcdy1WsQmfZlnS9QPB2d+AtfeZpWCFiztMEM+6qLBzV3LCpy1r8qC1Nzj0neIcemNPnsXqpq7GsWoDwzHcKOZlm0D3LVVug+zsI8l9BhbbEZ2svWZZBb6Y0d29xXljpdNl7U5fdz5xWfRTA5bF9+b4i3daeUIPJHmWemULgOKml91WffYEkBzA1O+ZDQFDfy7XP/feoRgzB1bpCHpT8A9l84phsf4d+9i6GggsmdUqTUSabolsRb1mOCs7CGoZYsY2CqtieHz/qdUl92IAu7n6hg4gjynOFWSwSqvsFWFRnX3vqyi5J09onXbesFugjW+h/WHo3MvOyWYwKSGMwojwHjZqs2GWc7DhHnQ1PCHvr0eoBljxkfn3fea8bvaw+m168dfPpNcgyubiejRap4EfmO+IevP7Org46iONANApwJN6zZJlFTSH8XRv/TxtD9o+ACtTSSTrxZih4mxki6fnO5MQzRp5XWcOswdDJorK7pgAXq7JCB0sy3pc4fsAGtF588eycB1Fj/kI/F/H/Q/PkuB7n3R2t/vUYsTkYNut27XPoiuwwHQVmOG8n80YPtQG23QQ+JkloOJHxg02/Lh6+0wAHFUmHpDuwmt4TCnzIuVDUkl7VmronVNTVjAgcyniKdMsOLNI8xOt33EqB5I+fyUTTvc/42EVExQ3K6HQ5/IkTKVxSMKbSVtJgQpiFGWAkmbNEztzM9hJkJA1whthO38lhL7gVyvNnoKGxofwDG7H0WLr7ke5WxOSo/0CXBzZSWbuFVoPfcvJwjS/YRPZy6y7cKRl0zVMblQhk9wCeE1iFmdW7HYgK8wjUcRC3sCxAwwjSNYLjQZrb+GW4jWLwalD0ks6sy9vc3bV02be6wE1H/9skIyxJrPpjPEVbYLy4r0Dg3V8pNq46/OxsQvB4S8Yd7ikDayHpV9vM9E939/x+JnAo+kVs8jezhHxH5xY03hDr0PZYpM1t0G47g7AtcaLlOQAQz2i6ZuYo6xtUXy6dW9J/iPU+fhrX6wal+gGpD9dMqUocLwi+j/ihElEkgQuFyo3rnF8KA5TgaPMZmWArVCnagth2s5CJha83S1/UNmC6QHmzvg4ev+K/AI7Ht99jxQmp0vJtu25pToAP690cc3C7OIL/4cqpH9CZ3GnhzPI9wYPWBsYUGgR+Tcvwo+2aTxkOWMzJ5c+Y66cLMxrqeGwyPPVvqZM2xWnsY5Eb3cMI7DJnyKFluluR/DdHOXZo9clJv+s/yHd+onjUVdjKYy3/WKwJ47KPc8AGkRjkFsgqILpv749Cn1SY1ohF4jhpMw1WjW4Ymt5V8slrgvd+U0foW7S4uTqXtoRoLvS3T3U0nfYEoC+sDM2xbEDvodMMoXfp40DUvn45Yjo5aIK8OPfTmXzU0p6dXPNiOS8ho2TriKSZrhBQ9c2jrVhd4/IAEBA8fgHPkWMPZGOJ5eVOoru+flOi803AapxqfHJ5tQhvKwVmUKBMSVl6K88yN8atVzKeXalbBTcboOdfrR5ctwRJBu7beSgDOus6MUfDVhKgKgvwW86n8Bq0Zp80FLGFKQkLPlQZeIMXFSo3XX4bkjOkFfK1/AiPiPvQg6VqIbPfpnlW7Sgh0x7c2mWV5VQKLzBUkwQ3HKJcM/thI/TbuEruzHTAw3GSW5h/62EsIyQCVR+f+YevVpzQMLCF8Duj/8m/O9+sKU2edakSDM9+fuAMX4Aa25GE8H33rTLTDH5wLmagJ8k+7VfMHc+dK68B9/ooIxgE41HUB9z3P7wBBp4USrKZzpvNEhbj7fxtK+uqKChFbC5Bsc3SSfqsqoSPAxCeP8J6Xq+FwUsT9mmr48Wj1pNH1gyeWxFzBj7NJCp6JZAo4NyIYooneOF5+2f3bSO5p+ob4UjSKxyS3Io98HL4gegf81GnlEGj8zusFTURVzJAL0lAulaNZDdb1lgHiidEKfMVtbLw3YfvwgXiHvztdfLHVx/LX9e8uBUVTSZA7VplnKmTJcMDNhlS3Jv28+ma4Ko2OyMlryaCk/bvfFBIEoFYgNAImtmwCGqWDxF8R+34a3i6nqsDmisbQFJaFou0cKp1GT6BnJaHSUbyMznHmdsF2e5ARtyR/pNcxfd4ajhV9Rhq6cx2Scl/XP7m3Bpq0pBoOYAattzY3N8uLS2CXLzJ1btv1NORx/hvJ2KLWxp4SBcPJmHs0C2WZh6p7neyf7Lr19tspxB461voZWWKq7hostGfs7aS6z7K+ltfxiV5tUzOcUrv8MQhP3TIEMclAK+iKsHgeWvplFeuInA5RYVR+KtgBTS3zVkwVceRVCHJb0A0jy2CgRTj4TxtL59vFnxDCi0j1KAOYmVPJ8MrqdTINeAdLiRndYcnxFgl7K3TZ6J/fTjcZ79emkW9L8T4FZwvx8PhM5+BTJDjSrSxyN7UUTjPPRnWySHV3gDlBwFjkJMJpUkvNC++sNfN7zXo6YmaFs7+ySxAHfmyc9RTiULsIkPIexwlBeyPDLokKp8une1SJFLoG3H0miZULEqGAlXSxi1ZaD9wpNXMWxzsgKYTKwl1QchmIOn1novvnOzrozUQzCsfSa324Jzxw+QDtKA0PpF+sdhqUG9yJE/Y48Fe7LdFiGp9dmc806NiT90FcNALb0XzfqIX/5mDjHdXJVtN94k8rfdmcNFuu//j/8EjBKkqPFysUQcriQOnA1kH04qcfZ4wVgyTQ+/r2lhBn7QpoB+k+yYRXFfIhcWmgmC+wwZHErEvEDGI/UCpj32skUO+Xey5iioRAbHyPccc3zPbRCOmbOdouhfukLdpQOs98SD6M++j07/BGvBnd2PAspbBlbKg1RTBZAA2kpDcSmN3a3/bt4wFq/+ZpoP1CPZAsK1QXHvqrIQ9lBOPGCaqajQqJOlc4oc7ToiBx5HbmFH01QX+8IgEB+RYzMB0DBy0/Cc20rNOmmaawsKZ+mQG5n/UbdPBM7T53+XFxpyV3pJ+P3Nt3p3dDTwzQyA5Drq8VWAr0ruAzVTeAfvRH4nIdemxAEkJr15mO/LkPRXExCJvJmEXC8yjP0ygMLx8A5Yr66ECn5F47nygBUnxAl3pqAvsER/H0IWsF7h+qmZqmiBCnyFc1Gxv+RBVKucs9MNujIrRjKtAaeih4vj0a7Y2AoAEYHcK/Jze0WVi42jjv16XB9QSPMpGlFfdGrbAHNdKXtjGBwGHhRx7pjRfcGn20NZt7MsTBRYTOPJ4WoevHOdATYPPtIr5aKBMODB2Ls7ZHxkPVnq8sA7eSxHo1ZS/26X10EBeloK8qAPUBEG33sKb8iKMv6bsafgDChjAjlp6XztKLDWdFUHMdvpopwJVtzXTiq2xFQj+PTZm9bX/8eCpbMM7HaxahHQqxZZFRBzKhHMPeXvyEypqEzMeGrwzxUEhHWZyw/QmdE0VYfL5Cv+1pc72arWYo5BfL07bhCRP60rQZS8F7kx0HsH4Zr/pisbdWf/cTZgNzyArb1rqwAcRHpxqs5bGF7rMCaRjKX469WUME7ucLW0z2e+UYYyC9qOQBTsA/whD2pXO/Vy0UTboqQnrBTRA7cMRvxAG021FfA++vlxSPYsEIoPczemdzhBcljC3LUZ8rSk7OIARLl+aIitMo0oSmii1hVVJ6KXfDumznLYZfH8DwxJwSY2ICn6x/dLBMtDv/1wh7knYa7F6/zrHNPkXGPH3UMGWwgKF8OGVdsSiwxXE/eCdAAJI1/Vi+pd8MkrTDbIKWQX62qiF0zYSLg+gqMqjuAaqfE0oh37DJ3ksMR1AF7LjEJrU+dibjB6th2WbehDVELl8mMDMRInYiJ4d4KrTUJWta6ghp7ms866AMHkrfaKTqD+EE6tlmwdGOkaiqTTB7voKAsN8/W7pDi5mOfYBzV1MK+3oOi9IDu0ZggeSzj/gcGdUIP5H0MNfWxLxmMhfgJLj99JquX5Q8Aj729KDzKpioDhOJVaEmBIfBXZLxuc2H3d4sOkDiQtAIXSIv3fFj7SlH5MuYfRoHEuVJAQtElVE03iSrwe0FmKUltz8FGFZEfK+WK8vnvGGNSXr+x3ZSCLWZbVQMW5nvS6lsT4oHSdkC3ossI+05qFvp2GoZHp+ofoEjLkli1cS7N4JIhxvYLZTbqzPtKEuyrZmeAtLMBn61uwaJLwa0GXcMM8J8bc7n2zSza8vZRjKJXRnXd8IwXF7tdsbpS71kDSwXkN56fiYfiOhbhsRVAB97BXRpJHKJXFgn1XfbeIJLQrVNm2ergIKTIwFY8gMgpifYXh1pU/D7Az56YZcFHtEB9uin3WAo3mgW/MBDGaE/cI1qbE9NrRHpTp74x3ANscknE4Zyf1CjktLNA1eLbxytwXv7+eyEnVy7jVWMYyRgs+RQBOvvqRvk4xIbGbgeilpRxCju4CdSEWhb6SXdoWM2nmmBVRsqwQa8oAA0hACJyKM/XvGlPHRbBVpJqmMR0gfvwerfafC6C9bcvP6CxmljbWAyYv5DDtXPyT4Wcp5vqae+4Qega01m5Jy0Q/JdHYaZPI6UDYOoSQ5cAxzvonYwky6Tr/KhpwRdQnj/R4wlO8uFh3irhX9GUZGDdW3CEQpbLBodPsWT1NGQAVImZ8nYrAar1uey4dvFJ9Gx5HhLLWQnN5YEsnEN7gy8YKGA5CkKfrAXwj3M39IwqlaWVAVF4hfunXuDxjhPHNOAAYDX5qsRMCsWcBD14qgwWWgdtbEeYhbDq3Yn7sJmJGX7Eu95/9TDa1NDTi4/FjT5KHqTE60anmHwujYGLBTlCnOfwZWWE/TadDcEjZNo/B5PZ4hQj2RM5r7qJMSvi5VDhYMF5sxFQiyD+zNXQp8vYdwuniXmH9Dmtd3bCjQKdGwVocwSqCnNVI0bPtckjpOOqDickOZf/AyuLkFiKGXshGi3dH9RBatblds3RKUW59Th6WY3q1qRXNxng2YEtC6RpTHGef8gSIdQRuxMT6Rgvjsp3qi65yOTjJuaE7fjMGEmvD/jAiUcg9Hor4L8sydtVwNtkN+ggTVBtUTFkrJ7qDt7VEcX/RPPyaE5J9/t8mjJHcIY9yPzwFu25+YMBAJTvyuJu75L+HprdLTcKOgCQzLKOUdEI7NX+NIyIjOrcVbNyAv0WNHxT+hv/n9C1mYUpSKHAD+rYbaPQZzMGnl3BUrhW2K7bV7UK9Z1LYPRfEFy80pg98tgbws4yU4mnZKR+/7yxlhv9ZXS/kC2u6tB75IFo3e9XeOoGpDQq+5jUhqexkbkvQzgucm45CcWoO3gOU9ZL6wfdCzoeQIO6jcdQNdPpOqN/+ILEwLzEgST3j8gjDI4Itso3vfZvAsJpqjjYz1YJBEZx7KBCdpgT0bUFwcxclqta8nIWNrYiS3OHNwPB72mesHJ9ru5L7eQOkXpbYTegdOWSh9wN3tkjYgBQae7/MTtn5uZ7FhzHeaJc739yey8AtDtzMD/waLUxZ0lE4btZwDlZeqbbyHDEvZGuKCV/Wdsr2jgNYRbyf6CUj/1AD/eurwuNtVaFU6gVuBqyngHXBbasxhmbTHYhMN5enqKFrmWR2pvLtrZbMoWyOH0KTNDXc3nuavSawcVgeeVPaizfzlMTlOzhfqNjdMryWKNNQx3SIDu3Qja3dhPrzZ04VUypX8PGQZLJhkr9re/6IrjkoPspDolt6HsccdB3y/1oqnHL+EQojzOM33HkHg02ADYuq0xWvHERINDC65F6kggGwkJQtKO9TX/rZRDBjHqLpMHWHUATHTu13LkdkkO9FggfThGYDM0rwWMhV57LY8HX9DeY4q5Zor1OGjpeMbYLek2N5CuW0zEm7+LleYpky6rEGxNN3yWxv7y4bxB1+Ty6lHNrSMNKqXdMv2MOyAYEBYWg/I91SQg6WyrAf67UreaaCHHdGbPhSAT5WL3C3uqChyhE/QtrXXD0H9PFNajj/yjOLSYdQegBoXIS5exLymRJCjURQdq8JZ/l3l0LehOMlDcO39ToI3kC5b7/NPLlNkNmn8uWE+FM7RQNodUeTxZFB8w3dN4jibPmNzsDwuJ93IAi5WfCN7hHwlav9zBedtqm4Usqpn/lBH5RZ6GowTHhu2voOkpMVmidmwKvKYPaBHCf8KSyOU+1MsQdv6zxNd5Pt51LW8V8dA8O4xtSgmRVviL/AwpkTApA7QUCnXHDm1LcfQ2O6kh4DaOMFEQ2sj9nOki/t4AbRCMuvZqOS5qjpQP9G55pGQ4wZ8RmmLXmtU3izsKD4ukUF4lT5V9A5WntxEei7myFPc8IN3KrUtQl5DqgK2ci0nPGIaAbhjsJQVPcd/cwYzjd+TJjNw2E+tCtKFk3umIadpx2GVN5oI/EYd6aNZhES+ho1Twfw/h9ggAh4xPFSBfnTWkJclLkVPowogTCS499LhiRLzxdkGey4J9rkxtzuGImZMuPrYDkDX60yZCtepgIu0SdTuNNM8pUVyARTDchQE4lh49vYQhb/girYep+yTQnak1OJ5ICZPA8VbSMs4/MjsOISVk4RlUyBMBZo97O1OPooj7Sp5Jg2cha2YM+fM/GF0Tzl1wn8lT1W0oQbNFDmkT8Zd4btJifaAegZmDzsJZQSQ6h5Ks7VgN5Vz8Qu1GZLR5C26s83n1SJNuAFY4tnwrW5Z08xOMk05gEar8JsqBq9cgHbc3tFTJIcdv6sAxGSzBsYPwTuMFt9elD/IKZ9/R0lYS29HAyyg2UOTbzTdR7SE5mzex0tsScUWlpUvNKFhzMFvV8WYkjmY8BXn/Us3MMNNupxmikF6yKHyiolPXkhAcdKJPvk58ybTknTDvgRrtAyK79abeZLEQr2/6iHQVzBmMue/EJr/nrYguBeOQ8QXwhX7QHWLysdD/fGPWIgrnFtPe2rTUE4lpv1+5AueYSw0+YGsaj5b2yauYVfzF41if8yVRxdXty/eLhAH1J3Yp3JRd4YueCK040AAKA+a/kEPuMpJDqsEY/UmldDmP0MI1VHqOCvakc4iPhc3pjs+sEwNxfQVZgAI2OY+6OJvd4yZU4vrUL+KZyqUFrkCaHkq296h8TyCcllq2Yp5P3CCaxQTQ7kc7a22X/58Vt1BHNxc+Rv8uNreeVnzjCHlOIHompWm/N+C69OFeVEpw0yRkbCVoLBS8sugV0hQSmtM2A4Er+sFzqT16lGSbOP7pwA4d929rw/KKQwDm7XvRPE8cF6CgkOy6pz/fAzi/J+CnrAA/nM8tyUQwwhGzyoVoFXMyNPohnuE/SqfDE9C5H6qwLe0TKnM2gHrSnZbM+j1PiNqGCCukCEuQ87ZLSlyhXvvB0crTPxo6nCb1nPhj1qhDlo7B5mK7g/bYWWGSmmXdTwK9p3f4or4UFalPSVLJDsh/dv+OfWrsLVCD2/j3y5qkNLoAboZi69cpy+lC6UYS45hmO0du4hKqnASoT3bewFIW+CLQf90aCED/K6JVuaEdMoeVczME1LVECssJm5bAvtkTI9ReLonWZFDgOiF44IL7yW/4yAnRi6wNrpuH4lH4kCrZEt/xFwpV+8Ni2YWB5dJaJAIGe+/BjwTcNlINLsHjaiNcO68952KzEEW3My63GRjPwO82QBQTiFt8DfM9KtFTtSlvL+ucTUxB/rBhWvC3BgxZ30292AddPD/2QvTHDlBCkhLun+NpjcneEMRZqy2wVZPbOtYvtKHtzCruKhLiFJbs2IyTaDCNdOqqeuBB8ZqghkZTnZRar8Qe9zWM8drUH2vymkTX88PoC9BAnnY+Q9zxmkX3bnRw5hRoDU4uig6EUicBPSATT97yuSxbgja6NkB1vJTybzvUtUCQDIAFdVcatM7hAuQq3zqHVDmT0wxoHJyyG3kGkZyPOKaA6vyIugCam+wdhjfmGVkBIpbEFfS41EQ9x85jarpsxX1e554jCyadFRrtQPQfWR2POPATqlf4wSPHvPrTPZ5wjuezLg8VQ6nmPQgJuL/BTd9yL/W45/YY+0hcpDS2HJyCrjTt39hxylMQV+F93iUCt+OQ4BdmCmLWM79mPk0xraa5Q1s/OMRLyY4FcIcoYUJX5nMHwg4RX5Aqt99V5TkDXdCzrsQ6D+/Ce/oYIoXYrX0YtCKH/wbAdHyP0yNKgg0TtvM97SGSb/y8rmIOxF8WNCEtzDm2qteoKiUnHZxY+oe9bxxQe6ZkTh57SVK9riJl+J/81XHonLCJR51sEJLoF0B+70UCFAHxZ6hns4qMiqlgYgPVR+KuQ+ZIInBZTjeUo7YlM0B55CTZdD2e8PDf8mqZtuUg5YFXLFAtOn1pgTtPnhVvwW563jw3zkSOzplIu5jeYvis5mUCNaXSIHiEZJ2QC/XnNpxBfL8VA4HXKXmOFpM7dnp3OodHe71a4Tz+BFVFVK03ZReJQ6/qhNZmSpuiQTEYBVFjvJpEQ5pWxK4yFIiqHLdJHYC6IUbVKVKA/xkT+J1h0JlRzmXs12lryhX240oLq11UXuL45xolYa/zdc6+/LO1VcCrPcMlqi9OzYhVIcsKWgdvFtAG2K9tmdMiZLnH82hNadUEXww7xoHkpq5nMAwHqYU2HQ3U4MiaYGDiycmauPqZTYPTFACo8gaf3O/OCQgdkbTZ+doTUzKcQ7PcilLdPvOp1uXW/iDZnCiBustZxLZwll0WrivbilBOXs/UHzMtChHCKxON7Mc8dPmQcDq2GwDcxxKUqM7k60jD5eYtXEMVVt7inu+MjLRKdeZVSWkdWHg1YJ+ByVYYLIm/d69R1+W3ny+q0vsdTJBp1HR7dljzI1BuKAcZrSzsFBapjNWRedo/kG3UZyW7RSGtuEgw9+x9ngSI4DdBYHI3YFlebjABrEP0Dr6p41OPCKbPxlnsTUW2txemIutw2W4seGvO2dZpg0hnAx5QdzKZGCyqiQ9G1Lr1witXTQrlvXmB+fVJL+UEIdZmUYKqcux5XrhU1xZqhek1YTkflR8tUD5LSyGiQEmMjP5SASVHKEd8xNXHTNoezrteFhgcFlZluzs5Sn4C+Hok/imVsEutjxpDe7WXAI//nC0kE08xLv2kyKlV3IX/Bvw9tbbtR7+qia7NXc8sMGPxGL48cb0+ajZwEdzBGPksFAD6SC3T/AnzeIVFFJMibhngAvbkhIRF9UFlPKPxBxsmDyROw7xOVW7a4ZEKNs1Sug82XF1wzvxjqkZxrFkRSbp+s7KxR2DbN6qCCOmQEu2afYt4kLJgo5jjaGVEXjm3qp+Z92plEMJbEdBmsCcqKEJyXbFcGm9xGiTaAengDUKH8twKE0cqMCQiOKHJE9sX/AdcUbU9D4ZkodBE7Hrmn+Hbiz2oqquvgVD/Rd9ejkp+JQwiTKtGrRW0hMdxGN04Xpgpd0wj84Iois/FUr1n4SHN16sDzE0BFMPgCw6IbtjCiYwJWDuEyVRUcVDPphKOI1cLqsweEzX/iZrobOgYlu0l/AKfBFpjsIZr+R/S6bSIRNOAE8K+IbysPOHbV3tQpcaeh/uL+FquJDlHU9VhHRpIjbExkHKNNi+XhrCWSJlXJHXNIjpPS6cyJT2/tgkH6XM6vrGpxY3IN52aFtALoM1bNkojRD3MqvZiAb85G1ncR1Ibs9wBVW+KKzluiDqSas3lTgV2suD//btk0f4l0mHZnzsfMRDiq+l7bpyG+w91yqdzOQMQwr1/7OCA2KbSMwHkLiwwPrcQvCi/IdI7TL9x7yJl8ACvvlenxebqCDT1fp03TZJuuucuv59XkEcHyzrOCVPGGcKuBYDMP3/MLTQp3tbjkQjIi5OQC/IjQpRHEGQVPM2RC3zSnFQpaxZ0/65X5X14NtgU9Paipex+QE5kQadDvaMCdKqdgWBIhdZOprNdlSW/Wr25jKWLJcB+yn+pSBPGoRWN+ysECfB4h8XAlrlYPmiMpzz5hhUwvukeOwD9zU6TDK20SQDSGp9lxi0GPHvvn93bA/fD8zzk1sSh1gEpVlXjNuS2brYFjSgZUfyQO1Hd/38VTnmE52oGdas2VSCtNG+6QS3Hbd05gH03Ws7REjpKXfjpiH6HG+jDGO1gkB0IVLXUKkJGNMv+Q+jJKlkFLmGQIY2loOSDMoqpnzjgnUjv9xqz2Go83RdoSb+HEd7cX1y4wUtg2nVVp5JvhN0VgtMVINQtWguYggDPVbhJIihl1HTBTmqlgKeg9zTbDrMV3RV7pdByXrQcyeUd2OPZNtupGgjEFdkREaF8Hdg0UA3T31Itp2TrH6rkTE822Ldc2L+E0TYnYYwO5gvghuFI0S65HW//SXG3aGBLV4cxhNtE4OEeEyBwPuImdAHizEjY/ewNcRY33Z9QFJiIc8/fLpzcwaulIVJn+WdDMgWvHSFMB6GPI26KnQ0zzSdnDRGWQSFZ+gu2Qc5ksaiT69Swcf5Q5Cd92DQaCvNgjAfY6lhrUSLd+NqgYUmOl6FHNn+KDiZEJRWTEDh9dtmt32YS6BuEoXophLuijBYxYt0QokTKWWZtrKYohEe4vt4ODNHXyD5T1os52H8qQ9WOD7FxmbVhao9/tY30p6FVLOT49L0QEL0zUCaCPrX4rkV+VatN+/ct/JhACwrXHYBjJ7V0LbXtutFXJaSXOSsY+9GTuaKLXGLI/J+TuL+sTFuzez8E08AUmKJVYkGI9IrESP4L1lQ1eWpyiezhJ+daQQxpV5L9eFdTdQQpghicOS/4lwS1hNiB5gbfuaKah3X61TeU2d4yEZIimXJg1xWLqjnqpfGxAixdZCJTsW7uzEo9WwAO0ylUGc39G/I9r2PA+pGkgchIS4NVOYMHuBWISdcOVYZtvpJON5sb6H8kHmxFeJ5nmHMGXwVm8p999pQYaDGb6c87I1+l009VzQE/W8sUCaelvVT13oV20gCyv6Olj8+0rosOZ35rLQheA0CNurYIKqDI3ahi5q/fAD+kdgDTHVHOw7bFSKUWWAuKMWVRb2lRVn+epK6e3QnJgVUW42CIPtW31DIvoV+LzSmt6uiawrtqJyGuN5lbG17P3963nJpD4m77we0MzaJtc0cfBzbn/d6hrjxW8Ks3FaTOOGc0kzBqKCJ2Tm9VUrYPNQ/Nlic3F+QFjYig1atUDauV50sCNJieYsmieIMdb7KsnaO5sbTgmbd/JhjSmBH1cZTmEE6rDLvhgNW5hIBECrSB9yqojY6T0gqoRGeKdtiWVFmqw0uSIRl/ZpAm7TZ0VOny1mGGGOLziv4UY430IOTc51SdidmYgYEYmvtb/drdiRHoprSXf8lEVjle3yZqpIYHWZb6Uv/L2s8af7v8d+V18pvkxd9MgON46bX+hboOT3ndp2xtYotE6L4VZHAygpVF0c1IMfg85+ljN8JteshY0DyMBCX6iqoBJPWI0Po5u2tQutsB+mdo0q8SvD6Jd3YgYc91BdC5xu97PjyqdfA9kirxWxK208+lveZ8fx1UPZRceHwV2xTwtqe/FG++nFnlsrTQ+J4Vr7tmvlDk1bCm4/6xcK5LH8A4xcu78yl4W51vUvKNUQODCWgr8H47ncbJF7l49e1OQugb1bNXYwcp/4LRhJdObbxLWriHkVPaCy7jGwMfweSsDizwi1rvOYb/ybfWX4gOQiD+uECmHb/7gOlWZUQ8CQPdekZ1HDY4rymSJJOoJ+T5IMbVfjwdS8ZD1DIwwlq/mwJO4TWOWVQDltHQwYndoOtkr40u+0Z0Q+7Kvjgs9IZqOD3Eq5jjhGA1gmCOuC5i/936MsArliIMlKkKECwP9OGpd9n9V/sS1tdEaMek+cs1axqW8Ed59lunMnyh5pUnAWMYWBmL3NHIcQxRLcWE2bLw7vRrE3iqg4wznyHBars+9FTgek2ZqyrHyPO8R5B0wj9Q8xAd10UqFaJLq0YVfGvp0XhRHE+3eC/+jTlAp8YXdLCHrvz9g2rmWjfZd0pbwS8wztl4VsTHeAlMwj3SsiGqH1VPtLP1MMA6qM8kuSxc2V0jfc/2Gqslq/MRpcKz3xjAgyxZA9AOTqTAJZ/SW+em4rc9gb2rMNsGo+hOFsKLJopt/gZhWAqRaedrg05cb8bBtr/RuXbMf0X5rqCWU7ied2gr5AepiYeTE500QCu/Wj/X5FzB//xZXbiayTMCNO+58RZOZbZupwAMXxvwRquB8o1fQ2ZgAZ5W8o7bB0qxismlU0jkmtJEUVfZhLQ0T9Z9zrY/bBvl+DXGAlIpYcOxbzbnoARacUSzgqUV/Crq3Q1n/3WxXWflM0n26FSCKs8t/v6mRnsBlgAFqwj+APT543xN6M1AuscmVNgJ0bfNQOcuDmjXPT6x2aG95wE29rTWQlDGxrfHNeDmiMpOmxPpuTkazf4QLQEkgOFfAuui7qbP86PlT3SOcswvPMOBwxQ+VAEvoZ0i8Taeh6XE16V5frC4dA69zG78QpttCHEL9+TsAc+tAbwU4KvHMzIKGkIzZlE5XrF9ycxfwQW5t5/9WhV1DxebaDiHAd93xCoSwza8hFr/q9x7oJdjDGuRziDFfchdcLfPiJ+AI7IFq/MbavA5F1tIqc83SZyr3tMPhG8kzURvbWvymjJ+dSuHzdx83FzEDQ/zkI97ju7hfPOv9627YjhpiXJCYRPccIDgqYuNlmyIFzDgJsKhVG33oUhHI6nTj4/hLP8vbmshHJSqXxOhNT2jdcFof8mDeu9Bg2iJnStK8wIz6Q+m86S1T9ToNm51Z+fAXW8Kia76nk5Ank828RArZm+krH5ganxzV6htEvx1wnNbSlRtdU3nGZqpHWSc5PZK0uX2xBK99EJmi5sw1YfBOgGT8qRLFvl+KC1KaBiG2NcTB3QAx5DKU6SoMyODhiT3y7+y6RGQn3M0kUNjSi5IVmSFDQ+jNNMy4TF8DfH0N7luw/SmGj6/4lmDAB+7f7/6LkdHxCVarvHwckHnve58yJrtWJY0Ycq2bw/oiFokZ7TQ6IevN1wqKenRpo2dnbyJDsGmsWbYd0TUVvEqgdcVtKQiRb+39d6PzWa9E/p5ts6SKQqsFZMfWTwarcRzJ1tEahKKdyhAgWbcBsgfNQdrYibUaGuNcdi4TS9lfp2tmMnFT0FldDBjwwumFbOJJWhyLuUdvlPu2NDWZIr//iCqvC/B9nSr/5iKfSvbuu2IM69z2lO1Tnk+6FJVNnezGYOrNJp3IxhzDp+/lkvmAVjOfDoq6/ptOmJVoqDEmfa0TFg1aIhh2/cjOcS+ZbPt+nk6kN0vdXnrw7F/sThSdrYMk7flPHd4XxvzaMqDHVW6YpSDFHqF/DxfCAVrru5egqfJsa83EcjIdsCsqFNqTJDyPnGRDsA1Dla8ju9KZd1cnFhLpy+Hz1cDCew17Ib7b5N8YUnAXtptaKH2Ulob4BTq2pcbcuHi5vMI17QPJ8nDTHvEMLi3TUeBgonD1RxFqRrAAqtUWbfqIoDLCWGyiBCG44n/P9dVf0I+vl5h/8OfrgJD5KuYp1phutjDWTwjpe20ymj1vaptjruFBdUpUAEaGFoUH8F84UezMdPGWTe7Ejyt9zu5bfPsTuzh3hXHTFIxc9fu0uYaxH2p8UtOiTtcWPVWbHEV1yPsTeOlzjmS0XhDWGniyYLgnLIQRadWSJZAezbOZqrO1lu9eR0XRU7lfM1fNahY2LSVzGX7umApdCQsmE2s8hL0WmdUsK2y/NHzHW30c1tz9m3YARvRovM4rNiZ4H6qrqrFcCpvDFE7wx2enRv7m06OB1fnPtGYqxnvUVITD3urdIjSWXHAhnR6pafds99qjTyTMp4E3Uc2VlV1cLPZ5sfOYHdpGaHKTTbeNBJz5zK3JbOMC5DKvCj93NQ/fOww+txVi6Zrz6aqV82gzkg/jZcbOrIsF6nx0izEn87ZczH418Pu9K52fwqjHWnqgNa6uyEaz2as8Apu7mtBMrIydN4pVRNj3MDcB7mUU9elLzUvAKlnVz+OFDUTtssQI+0aWCPzhquQtCFuLo1yzSdYfCJ/sBCODAr212hKmQCRlRPb1fKRLQBnRStHEHTiBEefI+tqiZrV0k4Ir2QtOm2IQfGfJCSXRvQPAjlT7EOjkCExN7jlk8ec3wLIvKZqrrcf+lRUsfqqKJLLy31g89Jkb/XiQ6TFuOKa3XAmcRFsFfR3R2APJ3bqtwDLk8aac/AzRP8Yr48s2X+Q1tO8RHI/mnTLC5TV8IavFJPAiqUiAW852HI/bfa2AnT8sVpaadUDiLV1tQ06UwSXPuL5SMi+pTyzJZbNce31bM5l5uQv9EmEYgogh0K1058HsDbAMSQ95JNMYXWM3AFiMIuILDQDZ+z4Vfcf5Di7WgA8s080fl6WBKdCc/F3WY9utAwlhgyCpL4CSCW7/EbjxkQZUEZiGssEUktT01WeaT/gRxqIkf9ED71aflYiY6miK9W+DIcKJ6U++ZOI5Q5BaJDJRfEVwst+XsoBa9BNF0OFtxoQblFPX4bVJ48KNZmPNeGF2wDEAXILsu3Kgz/hDil+kiAsn2R+yCvU8U4X9eXVh0f+0J9bSA59Ja5GYNqM3qzvQLEioWEUyIi8qf57dNc9nd+ekN/QE6zcsAlUEweUVn+qFa/CBoB+wyam6IahL8KzFCXDVicE4n4h+EQGpphX6o+nr5GDRehnibCJKIPMTW53P/2rz3f34wkcD1k50Qs3RvezDxzfQx9ZFJr+9oKDNvj8bQgR7jvm+lB9SsLM2F2IkippKidWRtfIZvIH2FhBM8QdOoJI79kOb5b4CBrS4AzGjb9HOTryd2st4xqUgGCVHX2YqD5YjGvgm0FnWZxF7Mjbi3IB9Mp/TSnpB+nBwqQi5yUlYamvcw48aqVdguMbursz5bbsreAChwNAaXjFervgFVHuO8ottwlVA6NWkNog6Eftl99ypJ7qYHTQunAOjxX7F88na8pGKIPyMMFUEdLmfTzPLtKR81rY6zdhWuflzi89zMeN2zqjgXclTGcCLk0ulELzvi5qm4U30cneNGsULdsczamEOqhJE8k1RF48a0FCVDPqc5qi30Rue3qN18hh46XVvLc5isq7MifK4ftpiQ9SbAKUxDfxl9xJxyGx79CB1QS4it1c/GAobV6/9F4vG9mirB+lO2Gq6hRgUKwCF2F62H29ncZECgKNo9DC/sbEkB9l+3lGCGaMxTsZlkokVTcRug9wUFjiDUAkJt6uN8a1j81G+PFQ5FWPDYVUYm8qgWHcNmw/xnasdP5A186HcBM+jo7DfRJk9VWnGw4g5Ee7+Lk7Qu7T/48nB/iyB6WJa9dtqs+5r9fuJdEuCVTMmMiULNCftCxZ6GZbx2zo1CPM/D2Js8cprSdcDfC8n3lT2A1wlRyYmU7lwg3TvNEUxWzRTcYf/aALY9F6YmC8YNaBU5AympaAIb3yr+nl+kO9MfLeJC2TMNuFTednPhqhW5NaE11ZMhDVgmv04uSy/e4LvsC9Q5DF15gG+kKphpinMG0vv9nNJNFRmVueEIWjZMhrkGrBIES56YUiPoatk71hj95vB7vYp8OOW3dOytpxztb4JoCx1DshTc2q5Pp6dBDF/H4gsFVEefxKRslVHuxxa03YpVV/KHvlG6zpH054+QJCxxOFNhnqzr4E9Xk1oqef2K3kMQGCAt5mMmNro9NdKUg9Ak/IZ9Lq5zanO3XsWwzuNgWEqBX5tAWy2ZcWlUk/vALcZajIeW8xfD+3AEOjCRGYGBtrfW9PGLTvQDBvGpcRUR8IyXYmpY4AkM7CRHrBx8wAqBxRFLHLd9LAFfADteva9af/aQk/JkKvRKL8q+cILSs/OVQUSnrKf7neCKdDDTThueDzOOLkq9KDOJESZm82kP8Z/ZImi+BqgG9YO8rMsfLSWd4cwIIstrZvT0TuKGoTC/CUD6G/HxaG8Pj8vG3UzZDIjt6zaC1XCuJDg6EdolX0KwOzTkrlL5QINnE9Cy9KDHveojGRBzfqmYpKGBpbCIpH/Pz/30c499ewgFa3Tx9vpOTkEkmOY84W1hBUahUtIsKsOcDxrUKlY2w5uNrQ9D2HknSjl88P+pLw1p/N0cJvT4xsupQmcj+PE3Z1CFqERiKmeNzO35528jR0Tz9ScooYBxzsWxgy//RxOh2tIOtUNq3l7ty/xN5Mf+BQw+skVs6haHUbX8f8OiwqhyZraWDi4OLmB5C75KvHheboo78H/8JvKNgv2+dFy5c6d575MyVWdOJ95kaH//WBVxKRywnU6uggDxksxB1B6alI/ihuvzeBGOQETGj41jJs+LsMc2xIo04wWNYW5Oetk+3AnaszU+DwIWZQAcnkM9ByzdQIbenvmUn4JFfn3F1TS1UcQwLtvg6Am3YHLn1sd9+t2NE1kCsRgRKYM0MCHGU/qbBGEEZ/pTBGCdFr8O/nOcEC6VymjRhhPUrWi5YaJC5PXT2MMmVmnLuGLUbfTBJI/ncfDbcsc61EIbPZ+S93r2JCesD25JSvnxayKrcnZomtLRX5BMTigY38vDtceeQ52txcUrhhZBdfr+iP7yIVELAw+rsjyOWp/6hAZGEKQaxclV9E5ZtWTYg5wRgb5ZjTE8zrxJs4Csh4IKYel7d0JMGQZaUzabqsuCG+KDM08Qmsg0yhbbT4daWygjEfrkQIXI3s3ZX14jA8AbO3EFu0gWoSEj8tJwo5zBhfx2zsEPzLfZwl3CCZfn4xkfxVTSd/x48csRO7XDl7vO64xajN9nATVopaQeIVdcKYObY6wSvTUH/eKiIElPFaRtCsnH9BI/bbtgDkPHbosG6LEHCsZRVVBFjrTrJA/lwWLOLmBrZs0vKPa5bRJw6hA50qBPYvovdcov2oVq63jBeJYonC51FL1Zc2PY9XBrPntcScITkIeFyIBLpie+Far6hASXlcrBTRrK6RDLGULAHJTD+KlabF+cbRPSb4QuO6+klT59Uva0b9MJYu+eIOciiUgkb4jX7bx09K1MOUeh6yw7RSGZWLgbktMj5TZNr7QHP6eOHeY1ceW5HgC4XhJHwah64cD/kc/vdTSqSzHPs/tLT08fhYzxi9oxh4OaZUeyLYcxZDxypGI4AedAUFiZ6Ri5JoSLO7paH7VF6cpqZ4pz76zuNnAwNiUEaFOdLg3XTczPdqlZAHpj0zjOEXUtmxkVjKuOZp/iqJY97unH4Pr/cI6w79cZkZl4ttNPoPZ5qmvYGIfpiCXvUn51YL7AOELzub2bsRKSwZUeeZMob4y/2Oql8aI2Z4g8OcMett4NjDwQi8wC1FgZmveoowiNmQU/tW/m1O5dOt3k6NVCUtp4/+UE/VNgSjajPFUca7eFYcYw6qOND9IA4y6amQT52GEyClCSHQKdZ5Ezy59bGGhgFySLCwXoexHPNmGA0LDp7/jvuTMacys0c/neNpPXBP9SJZvBep4fIHHIFRik1ZGOEdf4bvGwuXRynZbKShHlZ2n/ga6ZJkhp1ElrKA5K3WEaFknYpKfGqctyCoqO7nQ2TTwli06IgIIhiKLdMYDN2iDLKAvy89eB3INEq3hKG2FDjtTVJMCkNP4YkUg3+ZaVQJkNblXY/3NoDygyYo6qyQV0XMrQwVd2ZHgM9xOAK/ZYnuVePOlTjH5Lfj/UeBRh20gZN9zP7xB5M6KCZqwKpR9As9gE+LKnWmgZZY1H+PHQeNuavj4VgmNt+wsJELj71nocqgkfxBv26qZH6HsU4WRjwDjAW7m35f8J9FhjYbbXSnOVXjpYdh1TMSt2oIoRd+j9SvMjLparrT0B7nyS7WO6/x137S33SV3jZkkoV9mxt1krDLyMlM3CHV9hIzlw9B/Bxq5mefW7cWMJl0ot+8jrwT6RRYTzC30iOM2mw8vCZuMuvpfs2sXfNmX+lTO9S5vRlZo6i5wUg4oC/tGc9fDdVeddwZ1TpKU9XBtc3L3Ff37EAHgrS9xa0gMn7z54xAk2zE5RZ/DzghfBY46VPMYEZHpEPPCafI8v3DTnT6P1srprbbCIWV4iMkcRXRf40GyRLFEMP4upWxMkIQa+kLcK5tQorse3KsMwwNrf3rrSgfwv81RflMEZa0/R6QQPVnDvrkMJfJBMoyzazGTEYP61PwT03Xzswfh5Ped3ROlM9QvhgkLo6JzlSQy8+FSatPBoOVAAksAhENzUJ41kLvrNRFIa/et5hEPE26uAibWw3Rzrd/h+P9QTopLwv0e0UXKIS6mhqg2h97hSHEkmdk9f+GCXM3q05dfJU2GtSU+x5aJga4/gw1nX8UGHDkHTj8odRWAk9drfK8DANwWyQsBLGH3gOFYCWpbFeqyT/CKBvafvNa8ycbXhniTAbV8+Mv4aGsKtm3kHCImnQgmuWAApYjNEKhG64ddaL1oQtfTATDU/BjQS2igxD56H8uLr5qxi+b52V7P+AO0QEuwcEAeIW/go1qCRejOzGCctIawEnVMumzkSsgZhVwoW0PlA+oEoDr6rakrwPNLLjZjREIhQZb/M7KN7gPA1BWuI4DwoE8UYtAfRB3syCfy1K4viMuX8tYsiZdox4p00hLhCmNQp2Vn+Nl7R8fhuGyhqA41Dc/WRmDfVlZ5iVcFfFbzBmORsr9MjKbQl7pFQq3XxoejivMBMBfhwbl4mX2bitSYuO8XfBhNXVTh6BoXugIILG3SJYRnSB4GhBVLO6aJsmmH1wbsjTJ9DJgRU3qw9tISuTnleFYQFwZ+CW65yeTAVspRHCnYYdQkXvlzXxw8/7FTTO9Ri+N+pzZtjGxEZ88szAW24s3zMMfRWocI93QkUda1YZRfE9f5bUz8nY9xlE2cL17hYvm7AIRhs0/AKwoLeSWudiz/q0dh/I2WwmhKwEamu2ohzbv6jzBIG7hXz7KiDDY74B/8W1m8FBevkG3hoRjPhLR9ggDakmrgnBUoBoemixace0cuZtdfCFeX0kr/ee2uMvFnmKhxah3tf3sHFpxTZxvUcaxuDI5f1RRYX6Z7K1eY9ozDPN8Qwxb1+mP5EY1YRNoRRA//7HdpFTMnfFsxCcX2cQa0/Pdyj7ZRrLUN9fc2yaVzXxg6T/Cc9+AYo1eugORINO8JFd/qzVi+4sqtvZgCGOfzKnt5pl9qaplkQziditchNG1e/ImVnH+phGjFKfdv8VbYQdaSbBix8XtBVNVFHaoAVt0jSF8BBa4uocWVxCq+HWGtWqjHx2hQzuFJC/9gtH3QT96NX2wcE3LVuoRvqyaVuENB6F7dousFcfe+rSbOyMHdTFv/BucanWL9WDtEuG56tms/DoAOooFFgLuY/FDf9Spvp6SxBGtQByERdLMXJOS8zTbvRQ/xpvoHx7vEXk70FBxEPSLJwtjXffRP7VqELqXqlkuGxRqYiprvki8a2admvvGqi5/Qefrwkg4j2KcG0BKR0nqvgjKM9x+fs2921RpceKNHspwqdSNDhaysn6M/tyfdtxw71S08/5vmr4V2WBvr/IOKnAtz9Ts4jbQhfZXxqaQFEZFMdxZVdVt3a9JC766M8cTEDeRSdeMVyg2mrZl8UetWz9GPEboMHnlOvC1HDzNG7RXyukeKkCwAo8ZAP3+eL86DLxn6DNHcOxXr286ATTQcIVbIsxlInsr3FTd1QpdFeUKqO3ZEeei0muwSupf6qSU0m2b3lwpxXiSI81ZG47gAHMauEzP2cUWGNBRVGkRRxEb3hb8Pzu1zflQYz86SLjLwc3wnMHTPlWxW3zdHwiDCyY0tJxIKUBkZyY6S/6DcyVEXxIHBtNLGCo4rBrAgjaErVcZIQh+U6r/7Iy6F2PiGmFUPr6US6LMv2aLLj+9HjOB8N6rTH3oSbf5cQ2tPhXUEnqLeKGNhyDNCpd478OHA86utIfMxD3Yxer6IqSwt8KZ/A4OvTM+u87+2EQRXgBfHCMrH3LXqglhTvs2zxWzmc6K0m2imth61AnR8pycMCwBzhxysZ/XO2mEAyAHrF4a1Yn7KD697g1IDEwWxBghmajajj/51G6QzbrrXeelC83g+FRecwuxx/LQT24/GIZX9dqHPbaYF/Zsnc0Igh1rNtVf0qvV4E4wdeyPZc7S941hheKSduSmbIqyYZlTJUjeoLTJlTXdOLqjXDKqMV+GwLkwlYLo8RUJ9hoblVnPHvbYSfqBgomdXnX/iiLpxx1Jj35hhKTcThFw4ri+6nkSFJOxTt3uqgacogp9Wt9JYrgfxHWN89BcYRdSfsEH+3g4mSEKKdvbeJ6Nnley43ZafMIrwk2aJzWT3Y1fIoe9LfzNptxp6hSD4TUV1eDriukyWKjryvJ/LMt1fAH94VbUjDizWFwxTXLhjc0O2gnc0fd1VkoS9PU7dEpLgJDj6raD7J2hzPUHUSXTjm7OoE63IQ2PGcvirpk3Exdu/7dDj4tRsR0c2tsy3I9+V2DKdBD7aJhg+joUH6uoB+sog2yUwzPPICIfuiJMqLLUaJA1ChUSugk6k2t1ILSn3bqvgInY4EZf1jCtVEJchtnTY2NhyA2/ts65aFC9DhlHQ+a4E0rRd11xEj9cpmXGEz15l36hkc5XUXhsQq3HAc9Zf0cBMADtsYL2MRf1XI5YzcAhEKUWQFdix2s2tknTTGzef6kKp64ZRrGNdwow4BWVpHOGTFWmEc/OpKDaJCiF84Q5Zl+eUKn9ewXcsJIDpEaw9IYRiKZgA2B8m4Di7iEebf5ODjfaSbWE03y9qxNTa+wcMEcNUZeGnMKNGpxh1GPuRBXbW3NRDRK4jlBMx9QegbJuK6LNFWBT/BXsrCordL3hBvuUAAeXjD3by2CsN5bK0VRycWpzxBziunhZPLQsJzm+UCaCsL8m9kM9olC/UpitXPDIHFS0t5Qd1QwrQqTJ+Sgnku14oA3R82/CMgBaBCV2S36eE/LBwOZdzQ3nu01sDNHwm11FjpXIwM4uaFCOIvicLUUxJBuUrloMD+fsXFDncCJrREGFCm6fJVhTEzr/nvHPuPH2KlQvjvepspLVl97XW6FbjP5KE7phUZZ6vZQUNcmTyK9ohjXSZLz3K6IHITtsNWK3ZLPlAtMOGP4pExE2Dp5ordYY3hiSHrifPOy/YoArWVXshlzgKQUznztFgZkRv0wVmGeblBAjzW4flgRBzliaeGHUpmrPsreUv+8nfFqOJcmlD3d2kdecWPMSmKwJ69dZDchStZIs7/VVJxDAIjkCNnA8/RYEyt30RR3nY+nXeGegnHPysZ7QlmoQNs6V3sfUi0cZ9XrXDX6wneqk7R5eTRI2DX85WERiWIKWJ9U7iAAHqEVl0b7EWtZlwYND70IkLgR69YmTdkWTJBnYU6JSPcBp0mIAENWnSBja1fBNtsPODu7T39PBpRhamP6VnVim8tW48HL/DVD1fN8++kEuxFVnKUqkPDfOlD7EYX6Z1q3c5Uksyxblnkglyk3N6eo77y1cbS8s/btr6U3yP61iNaoJsbzj5TVat6WQEaxINg25NDHBcbPpLGcboKunzXB6ZIKD5ZUwRdrXCIHP2v6qNMH41tki009A7RNi31Z7AVzcmNkXbKo7LvCkE6B+lrgTfsgaq/hP7aktStt2qawj75nYiTm+9+AoFYVQmz0sqReS2fORnwvkdsI0aNlmyQZfSHGsnvTplpY9a7lU/bhTcAWnK6XYBky3emEQYur29r+HUoQ3WRw2rdUsgapAhrS75LrbCWM7NXgqGX+vFOh0shenzA8TlXb64qAkPC3bS8RYFotBaWW9HW1jUaUdSIJI222491gEx/r4dccN6bjxLp7jI+rAHHhZL4zGrU4PjPG3lGTu9UVS/htUMsrm1OeCfJxlgXlnGu23M1sXnNZd0NKdO1heW/yDOeGkWAs4hxSR033DTCoH3j4R5Jjqcjouv4os42it1LDxaCtUwITbwGOtDPw2mTs/xzJEVWGVnAzmkFsOEJCvBre+uObp1V99d9F3xieGDuAAXDnpPHJ0goRQQIISkhHiPFrwH+b3goexuBXMCgsrnNJ7EQgeHqR+f7Xu1XKFbOa8OLUlXQvx3Xe2ewIm/TWf9nNRJSP8AeW4izcTCuXSig3FmbRDk7Fol/tGuhpEDviVCxjywjAmSias4sR2uQGOwTJRbKQRNfUcb52WfsXDkcfK8X79ZxQRSXz0OFJrhlpV4J9tk25HjnIbHEcgjcyqQ+t2setJQdiU4VoFfCM+re9vfNL9uGDHggYF7EkAbvGaQnXOMWjNYxjJoZk3+E6X8JpfnMGYGH4npw3YAjRWXiOuHVTNK9k9doWxN7Vl6e/fEJcU0tqJ7moV5osUNvyIrKhjsL/r1JQGxkWkKfDWnTToUrqyNjv7dd1asPu/riPiPDkMc7UEtyWFqLC8XxMAiJ4AyJMMZIaT24eyo9k/jXwsxjCtUqsPQAdO5wwcmtW01qoDj2yOCH/Wtn4/O41lFubravW58ocfL03y8l5reBBLhsv30V+/pKbhmOeMyF7jyhLpsLLE5C7kV4KWzgIFbhi5pwPvCNFyPdNpr+jtRpuc2SpwQWR1uTUEn1TmgXDjXnxaEFvtNEb+knHF9/0zj4sq36+Ycw2kpQ5oaDeVjklxZRZh6D0XfGPjQ2PwhhFe9ojPuFvtygItwH7AerKsIKXOBnBuuYDdsAh1DMrT97qD/M+8gHcWC7QAUW3uOx7lg23uZFatKLYRQBEBISLRW1/H7gRMRNI63t/vxxHVb9FESNCOJnKUxHbfqcsLfZHGEZDrNYdQHgy6XX+Otxw8oUH/Z3LxKOb6B1Gqa3uYt//YHlcTR3p+EkuaYLg7o80+hZLbHEwaONRJyNS8XZe2pxcTm3lflk8OWTSxOaTTdtq8Cspdd83C5OocfY4WrE+UcwGiRDIwAXlAsYS0YOPFSiENMT9rwmsneoFJBEaA0rGwFjnAtiFYNaEUZYXZ1m5k2Ywz7kKplnUlnct6ZGABwco/fvbS9020NqSUnPHlPvTv0NbsM4rnxh/d68kly3TI3z9C6vo4mToNIf1VXUlol3xIdLuaork958R8JorKwJ+GujZB7OZyKZYHlNJU83MX+tQ52m0ghpb1G61WVefmmxEnHP9xLOyYW24kGjnxulPP4C1nWcnxn38JZzLSJ4U8KhT5xOmpfX6yEzFwoyHnd+glIT3fSQ1BlF0ObCsDgN2qMBkceYNi12We2gJqFeIo345aSyJbinrrleuzE2y6vYXtB5Q90qXva9oOyzcRwKkkZFq7s8/cfVb3AYIym+OgMYh1BsOqpT38Tlvm8tgMBwIRjkpQ/Ueac578JdDh8Q7BFnEx6KxONc0KgAnVbpSPS3sRBZtK1J/CLgH060/ZHo2vh3/eI84Pxz1CAqx4E1SzYO862BIWo2XHZ1mfWmsU5qKraagMRnqZXhCJ0SeQqIdhXnv8RxWq0iJvVwTCoxA2v4U3D4RlRM/LaONjXqcksHn2FPvMKQXkZ5fXdvw4Pf0WoSz57qnOAcrmZ1cOhzkUNpNX9xiaa8wnPCJd1mms993DQTVxUrCm2IEdovH4b1b1RirIeUC0yduQMwokg0cQqcGVAhFQWiTv0r6V7SLEwbwh82KBmElJWqtEI4ddGTxdKCQpbAVvrIF3NB43Errj83GhbPjZ2NkX51q6iwE07DL56o++8GA7cXgHsW67hsiBptwsRmDUpBKNFxBNgaH3UMjLiEU1nW7tAm8Y9l186Cr+BYSe/FTsUswMRawhcvVUUikVOU5Om+oI+CH2HQUZunsc3IGh7nMQOFCZvC2s1AARKd86gh+tsQMil2R8HfuA9zGPO1QMcToH9LQYN3UUWQTNdjD+76MECJQhxZlx/Si3azHMfGz6m6eqk8nVgX5E+kufxMDyEeqSVu87SRlIz4mUTXbtcfjIGu7USPVNPO8uahMzBWh6tHgwZ2NvRse6NxQ2c+9Wt/rlAbuleuiuiUezNTdUIsRkIbyaA/1VEttXANDN9y+uhuFxo4+/FP427cSkhWj+VS0XTfpJMfral8iE0jZEHeXcM7Azw5/WpTzNDyJusVi7kHCnNpS2NOOJHe2QlCoiK/sRjGev5UC7slFgZHEhNuSrAKB4wDLTj38UKPPEoR8PzoendmSsT36spqS73r6JO+xWGycpwzAmPxPzkrkUYnbO0fL+Fh677Vkn606bDsdTq1edRsQRptJbPEqRIwbtkC1n4lezbSDJ274/tSbIhVQgrJUM+HcdHyPBlxL6uz2Fx4Od/voV3FdCQG9sIA585Cbx+r5PWxYe/xjnjwKNoYU061YbxjbDpmmHWPmYU5CdX0miTO0eSSNfm+SkDH0vAOd75zFV5pnwBbdsw47DlfIhyoRB2JfpSLVC37tXiHv7xy8aAP7s7+3aXl//3m1rV8f6V3c8evM1g8uz9K3kcHJf60uw16LfCexEj2DRNRR799CPu/6uDasgX+I+E42tutIO3GhH0mZ4ayepJnvh50/A0azyziU6BSGlLhS1Mmwv1ddc1XzSB8E67pk79NG0euiHexZaRrsSQqjLWNo1/VWAixXJrMnRmeEqXljtgbXXHuxkcCQs2qzNqbrEUxT0Z4kJSZYbjK6jPoexv+7VOEryXDATbH6xjOiawcYAMRBMVluk3lnQO9N5QuB9aoH04uz4LP6nnnVIpLRn8cd2T6mB6INjVSc52YMOR9Tz1cwQznLVBvRXjV+ItczlQWF/kFDwFn/OBOuYrYb0zIjLkezPfBDyRWK+48qHBBqbs/52lMZI2zMgGC4FRgfo42sw+q5gP6JHssLO13moWZ+mi4cAeqE1T+azxVMiOpUA9IbJkb1tzGPTdx/XpjKs2VMrQX0YST6v1agagZzmRivJZYllJLUIwpzkm8fCba06gA5jnoD1SaISnqoI8q4tNnk/aLYs1VWYtcMkN30l7r7v/eLXnulKOS3HV4y0nbWm1PHR3VX1Kz7F886fqPgcDwdJAsOnosSaZEUuuFPMZoHRZP2ZL3ZR39JQBdiWsDW1RvNRNJQy/ejhsoswjySdkx9dsenfvTslQ/VdhuAPN9+1hHciWP+fKqGiHY4teRJ6iXAslSiOoy2yYCZb6EH0aGUALeK6X5kdZj8KgRmrgS39xfBvHLD+mssZ737jViUAER5SvoUT5Kpq9offeJGOz6ZHXRMhBzhSJgrzgCeNdyDR6VUcKw64LLB5eby+8zD1QYBGauiPWaTqW2vwjO1ZPepcfDM6FZLv40qLcSLMhQgGyaqYNz67ig3MQNT2Rhzn4eKxc6SWFf1a8EJoL6pzbp3UyCKj11RMGUQ0Be+6lwWv8dl6WZxOmkNASgY8C5iaX7WJJxuaH8QcQgyJLmzhzzFVlkIT9scV05gUU5GPnJEUdhykBwt5Dh4Inrgea0fmrZknRYcMEkLhC4tg16zuaE3xXSJ7/ANOcqec3vNWY3Fe5B/TfmATS5W3yCmfyK0AD4cXFkJXZdV6mrlqIhdUezpeU/p05O2Lj6kQvqQFY+6Lk+z0/Wdzq57ZKJm9NCRMNqzQcjGsTHqSuU/26mRaMCQ+N3kC2B63eDXFWZ0hVUbcw7+yicFQ4KPmMxRWbW79d/mkJ3nFFgtW3vk1krRiYy/UlX3kJrHywh7oEVv4IpKJrs/veQZcWKEVICi6g/mT/oDd2BggOWeCkR9pVP7MatMU0sBEbKiBpDPMDqTV5P0DwmjYFOqWKeX1Eimm6Y80D9mrr8v8rMe0u2hrFn5jCeACEtEGWWONdiPYmvoQKNT0Iqo1pjM63pn6dPlc8RdwNV93Ixdu6N9MpHRggf1csAwMn/tMaNFjBdSo+FuKWGJxlYKQl5gh983+npRUHC5yd5FeD1JMcpRmiae0kyHf8yM5+1nIeoL9VxJ/Qii3fujgB+OsOR2JFw+je0B1HEVc7CZhOGqRJFoXkwkl3c9cVV+0zfx9BNgNDPhKZxRe5jE06+LddV2INExootSt9IuvUJu3NDdxEeTNWdRMjpaVQvkLalorvv70Dr3OXQAUMAH19XygVyD6iOzLZi3j7+eaKyqCOwU0lyhUoSMZnZsjhDyF4b6cqcKNK0yq3Am4BqbwWf4aPF6QTHBn2uk6395SkgnmZbbPemXRN6gTcyM1otuG9p1WZ5yNbmdxyQd2MAmReyzpqi8CIQlQ5MYhnKLd9UKjGAwzs8QQlGuj5gk201P3KSYyfd8tRrJBNY0b3bR7Gpnp2ELxFcSuJcbaPVGaOAK0w0USd2LDSM1f+PP37oMAI7YcGfooitWZ+MA9CSYtXGvHjqpJ6QDBwJwxcUCEEwf50CXlHcBH7iPOKj4khjnIrLbL6LaEs/6vZdYYKZ0JrL30pV1YulbW9pd/VenoeqUGmKOlm2EAAhoBxL19rU20vKcZWZs5PwBHJi/+MbSbW7se2a2ISWZBvuJSfwhKm/yXL0jbHwWmRg2iwBVt43nHfudQzaJECuFjpTiP2TGRtid8+l9Iu/bcOxl1CY6EiS6Ah7PnhWgxaYmegKnXx0s22a9ANSVZ9jZrO68NU49zd8/T5OZYrN8c4n/KbKN8B16q+KIyWM1H3cch5GhxN6qCGMpw1+IdjlMKTYSgB4svAiP6MaL6s+iqFkb8FC/VpM6yjszytipfJrK+VpQiqH/YZVJmy8VKlk4nFlQzfR/++WlbRKm1NzCO5BOsmd9z7/jg3tbbFrnQKpUbFnTME2eG3ypEZXjZDk2TB3Q1EVv9VshzpwEliChZjUxTen0bNnCb5VC4LkZVPH6jphL2EEZFuyv0LdtyDa6EY8Nb5rdUsA7T9lDSXrzqhNa6wqlaUXAd8nu7Sgsmg+sqOusZQYwsW2kWcQRccnbDAnQ6MM1LJ64kau5D1PLSw6eq+4w/3AsMAuLS4QW8nxQ0FcjshCyDQ7xndSoGuBGU0DCa2cWVylXvGdxhcS/MU060UdzF04Xr/j+40u55ye9W9w07rx1uOPEsi+m9bTE3nGDJVpr/CAfuKdBr9Als8Gv9T2sH1t5wDyepXtQMTYExhNyAFmSZZp5cjoAAyaK7CD+xFfdrOJlOc3y28/aoluwvv5umq0krNyaMWCGMJPfpbsQGyF4KbV7fImxWlrZ2lYEFijgcWZgspc4L8CnOlSHSqDVD5q0RIVY2kvpO5iX7hddQGr5ownxr3Isa7K8wLW1oIa+QWkCrcobGUYJ1Bu2QBpnF/iAkUbp2MrlPwtYVzcHVmmezv/cb8S5ZgYCmp93fvZjAHEPYTYigOALKm9z7pK8qF9aLk0Ox7n7/6cpyAyITOa0djdNUQE/KHJsI3HmYzNPsTsHkyfH8F0NpkjvvFmdZDCK/xvW9RAESqQ2LVtexxBVwhWql2tA4rUD/aho+i8fby/X6QDo94ipGh9kcDxtgTkZzC8x5EV8QJRxDszKDwFLs1MBUhlCoqMotKxysp44DP7xyeZo6Ff+WDnL5Cdh29ibYtDi5jGw72zlyswJNeYju/uCqKl74BUTnEpjKdTJijrUE8ARNhPQwsAkITzpBLD+PxG9l72KMXkfF5fAjGXTySOjtd4sJ86YsatLg9PXboQHtXzJ6KQJFlxas0qrHxstu/+JlDGP8U9vkOH/T6chX4V+ePg0EZBtJUEFpudy7Yktcw6c8oKaw3dDQI8qheUS1yKe0Mrg35i+9KiKZmZc/BcY0Ze6WrvIcBh5sf4+k33s5EBs62eM+BoVaXtYu3pXCE8j5lJXAA5UlVwI7ucYwG4wJQa6f/mf78MbvYVcDawr0xQs1ReFZ0wnEqldq8n29pTPXFxbQa/khbwkpnZ2BPZohiN2kjjZamkML1fGgNhB4qDAHXf+c4oY/QiPYOd1HbVfv6//3L0axUoZCsFyi3SDniinA1S8Fvy46/Ya1FbZGasXlrGn8EseOCsnjimlv3yO0IE+YFUPpEEJQ38dpyKra2xLYKZw8gR+2HPDRpxgEvvLmWf34kJv9calBrtnHJHS8r3kdYELv1J24Yt8V34hzSorqGpw1ULLYlkyrBqi3eWthutdWzFKF+arGbTdUitAOmFkVFR69xFT0Icjl5yYUuyCFKOjvGCBGwhQxisGec9BG8XjMDqT5vPhOeiS6PAyWVb/HCZBuKFXjPpkrlWjTm8kk7OVs6C7QKFUO+yKWQweW8ARKosXnOCIqEAtBaY38Oc7KZVB/ThrrFUPZu7Tg1N+YrIXlz42DDU7BckETjF6P3pGxEvZTumt+WTvat/jJvmPfVeHRXEtxlOjhQPF7zrYv6IHAiJdFecNl/1QIMmeq7hMClfswm8I5c5G8DE3NTVOITW9GaWdQSdJ/vZm0t/WV9ydEo1Xxz15YDk8flZDxqzfAJirNwK/uaWlYXFnbZdj6BHNw+yi1KPNEhocy2zap7uLzNaQMj0kReZnVc+szWcn2YlrmLvEI+nciBL+LQCMUiQM6B+nLjj3Xb2gUhIlsX+1H8K2ystvGRqPoQcp+VNOhtSWQ+fFL8Zp/B54fxe7LPFxuNnaOMLAas2qht1CQjh0QcTWAyzQUgZ2VLoh082oICf0DFENvakWIIqlNYbQKncuCIDWzd0bM8O510v/RudGgAadXC9mwy70cPqrzXfC0yAzKUrUCJUI5/X4QlzMiduOnBAOc0XRmx9nqgHGwz3iH+gTUwz34IQeDCx5E0Q9Kxlr9eS5qwyYv4aKydY2BqvEKa348gtej2+CyKK/RtGByOo1lRwrcSE8zUlrGBKZG+vZIZdLwdZTvB/w5Xm7UC4hiHaoXRALTuXmjVR1WR2MSv5ghuD9g5vYlISIv2aIPMmpCzxnOlJqzNcimzs5XYZjFLzPoOk6BwFmHU7ee4LScwjRCaM3InYHdmKU0HaxAiBOuL1YfQ5ARyWhRcTiZBLTRS5lavxxFD28TVZ6MkX/di0dGhRohBaopYryKFmPgH6BUOLXt6swAOzwojZ3DC7m2Q7Yk77FX4ooORrM3tgQj25zNA5/LTANtCrNg4eTWG7F/shucgrC08NacGTuA3WqSaWkYxCXYR+txJTREKYS+uRHvLQHrjH2v81pcZIVegDgWKzPMmEvTpuyVPe2JA35mUQHSG2KjhO9l6UGckphtXN2LIJ16Wo/GBhvkr/nKOFPJy6ASbK4sxQoSlFgIma1Cws4tXkw1PRld0o/3wy44G+qmb3Trt8cDZsnuMCwXrLZ8Mn8HWCvGj/QXVSVNTG3C7HYXL7RaRd6a9xV5wodwTcJNt4WhZR102uo6CTPp6C+ivDSfoEjGrPhhg6BGWRnsKsRx41isxpeMWvG7QKEv9WEtETOrnjGt65mQWarGqk+lek9MbpYE6sQbLgVe+JVpDDBP7eWNPz7y3RgStTrDBupiuAx6avT+kFlTF5l9Db21hV3A/clcfb+hWWYSg1Yzct0jjtLoDyMRdMvMRW+XV0gyHpThpJ9zjNmWZNCfGfCWzxk4NgU/qsCLqcs81izM8yoVjViTGoUlF1eOQuIc/eXL78xeEwTFO8pGPX+T4pp4p+njQzTDRW2Ioiaa7LJZN7vG1Y74B2gh8keidySPDChTR0dxkKwB91mna/L+bj/ZqxtgpbOJKA6XS9gmKt5bLUX/ce1fpGoiHdvt3X1GuNqgXGm8sU00HNFNZIyUhbugTchRrMZ0guD/U4gwiKXWQZigEuLKfFstiAUbtSz+9NylSRrz6L66lcxICHtvwIWLC1I7CI0QXHoJ/BuShfmJsYVp+JrZiBY7fEdOW5X0jtUsrIBD0l7WxqQ3NdWY1huUpn8KD+S9n3gmdCTd2iITNe2lYOJl995fjPbggHy5onQW+CN3kuiKh5upDhWkG1PPB5rTL1UGRcRtFid1PkiGb9SgM81wtz1u/3PeFLIoIVnHpDGDHMfg5vueonrv5vQ7Nsxn4eVbyobky0Maor8gKMOyfvxdldc2hThOlAj1wY9mHE9myyBKqo+MdYT3I883YhXMIIOhN0BtbnKYqf+SpsiYVQzAik1au5MM6dqhuLqhLM8aBorsDjq17xOzvZ84Wb1IinuJouCL17VG1UoLjyHAyeu98fyVF/Dgq8gPmx1V9oC8DT0Cm7X11ZpIpFwxRYLQDGvgAVGxzrqyOB6BehpjBFZvv406ciQJJGnDkv9dliXTz91WXVqdYjz2O0oLSfDCk6D9S8o0QQL4a6AHFxnxXdeKNy8ee08dOkcpNJ3uoUADe2CPECMpPs6K4quGiUBL02ZDe5S7nMsP+3nAbTKM4gp+0bzhhUDGvmkcdCtk/bgHm5v7CC+dP/ZddZgw6yBv9a0wyfpj3AnWFhV+XQlNPdIBFClfpSw2+OXUG//Dhm5GYLGh3NuKjQTcO/yJQspEGKh/AXqmgFYULjBSzNLQSQKChcL5LHMbFIg+2KT74dLuzKmBqWzdzKQOoXAMYFM3gzsByMXq6K/kZqUUJn/NX2if3Gr5Gc6a4pfq0JCoPuGvTz02lpHXDu8Mc2s/RsKZOPzRhRpjdnykcG5P6SAqa6+6eq76JlYZqW72/4WOS5o+hs2DqBb8qGpkqroPqSUzpsMX9bHJMm8kzvl6X4DECtPZIee4Bb7+IWYniFSypxtF8G/TzJr8JBEucSwYQFyDBkqBqyxkrBHcw7mQBkE+p9fyRWgDD7Pj+E874hng05XGFW/TLmWvh17Kcv2GvnEmYevmnxq/YReLQep42lTDgFbzotZdALBsC4TSvdHifdloiHtVk05bqjRSnGB9BAi8+tY+EWpIEMJTkotGIJ+zAGkMmkad5d9STgnqKHRDfDDnzACvNzOa2qVg2T0B98X+V00rSqtxiSgAUYd7wMkh8P/A0ebfDBVGdYwHkrOiRlPzbWeE+B7FG4MwWWGMsPCgmX6TR+vrWuGZN6rttZmD9bdZjKkToUQdPC/RZUPyz7vfQbOthCRdq+QChsEYlsK1mHFrAgHtsNM3IaOOkmVbRrPEQCDueWElSW5VvGcNmrTFJkgWyDwzHBXevmuP0lEIWtcqTv8Y2PEmr25Q06N2qDWZyINGdvWy5YCeEI7bBTMMCSJHQOLFgKc9hHfcn3jLqJW5Z3MBY2EGpd88hWJzTXVlqt7ytKWlapd+zOCH3JlNhm7hlNAA81IVFNcfS3QNXWsFzi56ezbI8Z9/ubxwGc5FdfZR0r2C8Gv2KUvPehQq3OzYh7GmfPnwp4W/hTAAD+3VLte1hVZAGWk5UombrEPQbUORMBtgHCIG2rTbALRXTYvyvZ9Q4INxL/KR9W48hJg+K5n7T2YjbuECkMG00zMYpD3zaqIUf+or8AnFzOFp76qNt7nqu9NepCm+TOEmxg+vxT9kPR5vDvV6W8vWnfYoy2x6218Nv3DvP7QI9O5RxRGddXp61cuk+rAGsj7W7ymGSiTthdphdkUN/JM5mKn7DMrarTG2jNrEGPYlcKVcmV0zFCxualODg+M/uyJey4PFJpL1BK2l1h4yOB4N233MCQgQqofxFkDDTWsF3B3wOTqC/S7avn16F3JHv4XkWMy5nleHA/CdbMlPPPsFgIvt0Rnh1rFqDloJkJ/NsCdIbwh4lkzEG7gNIZDQpe+Ft4PaSEwH8qZeOJlREzrMbsnT0Hdm2BLzhZNkQ10BPTL2CitzdMSXZYIzU+Znr5pIlFEXf2k64No50OmCbjN0PxbMG7YRXPENjmPHr7oij1j1wVBzPCTdFYLrlYAd8Aj/JvyyGiqi3uBEx1zRl72tMmAqxDFLDnG8f0WKv2RBOHZ/qRSlBNslVDuUs17c0lYGhXxgISWTXkCV6OwcRG5KPSXsnSRlIEUCma0cCg4g0f1SbY0GzOBk0+gc6MaKBeVLqmnxlgmy6OyqiUqVcXhiVnC8mrcCz4KnsLwBBQybnjC2cCuuHjpTsNFIum7PD6xy4ayQWViEAhwOTb6iXf+CC9Gwq2HzWW/4TTnFM3xRpzUvNHXtgmKgfsEQd8pkG14ZGBmioyi+g0jzZbOoi4xZTJgczXP5SR6da3alxokitKg4Hfpgg2NpINLEkGf7GLV87QREjrwd0Xciu2AQKbjR920whfpk3aJaE2NY+5xsiZGnCjDNdj1S6t3nE+IEWp2HQSSzaSdvPPtrYwxicSDdPYq9MC6aC1nhsFgxQ/1P3iEH3wMDHLX3iHuMwChuHJiDp/QaThAPJNAtLomTCEp6IG3UoXXzjuyFpil6Se13EK6R+gZ7rO6cWOoMVqSNwBb95xiORu4IZuDm/Sr31laY15HDWR+9RsQa48uyLCgDhveM2M9NnZnBkbml6OKwJ234LZJK3SistsP1XADaTDIJuJDSx6fhNT9Tz+uV57X0wb0gWzHM3PKq4TIVnQCWc7k+BvQDb8Rdi5yyOnyiESLyEgk6BZwo5OcrhHwiFn2KPaJqB4oY++F4XEcTOcqRCyLzPRFlsPqBXlO6RIST+JQeF/TPyxTYI2BM3ZMefmwmaEqL+DV+F4cjtsF56jesfyW+w9mmv3VltlK//zg3ECSkYBeMD/Dp2io7DUJErhPEBIUWVGiBzpAItNChKHNuFyb7VstikO2PQMDc9qprQcMjnhBzmjqhqIryqNLyB4hTcvCYKuzNoFrAGB/70fBtU3KhjC+hEwANwCDg6UPYIhG0JJoJ2RR7NaeD/AFOorj431vj5jg34l6AY12mOAO3QiMVoDYVovnuYk3O54fLm2x5Z7aofMlhpEhaOC1qOdScFfGey0i+DEoUHVQxYWtRx9y4lE2O6nywgbmqa7EiDXTw+5mPxVjD7q6kh8LXzaeBxRyLMp4zVGO1/8TGUwrdg6GEv3L+oD5DPrnRNiOkdKrbumPvjICnSmSL9e4kjiV6efXpzjyhcKqSGdAAm6JUdnVxz2WCV/WcHbb3GCV+9UJriWtZHT58a48ONu1UjKCDoNgQQXAoKXWVzIcWe6hoPG6Cbow/WzPi4xqUe3G9CdoBJMPtnI9DyrcGvp1WsXodV0E4TmVB86vnF38N1QD24IjGFv45Rqi+NhMG4KGMvX0UebBI9zY8ygci7eC89eaDpFrVG+Ul6oYUXB7aCxIrRXsjzpHkWmqiM1WFEA174tnlGwe849ZNhL/eG8948GhKVuhSB9OaxFdLMoUdoLv1ZLWE5mov4ZWsO5y5QO4aVRGvFDz1u6TBbhGFb8Kko4MaoyOwUJ/fYxxdn6aj8Wlt7j/zxSI2CqeMDKpgFGJVsbZ6+RhcxA2sNlliH/EHFnqzljZ+d7ucH3Sk2poaU+n3Ne12OsmqEtVqaVhTxn6nniV0suhIYKh4hBd2XShX2oVSWsufRsZBNCsRdUTZfn57b7dwNT4wkamx5Vd1jHBHTBH49rJMdLQYn4H6YC78nzx54Ti6Ni7iFxVkYSFF0ld9tBlvEnmtULj7mpRLVG4nyviPkWljXFLVk+E+1tNZva465mlaiQfUp0gLWk0W0CO5RZ7tU3SEDvz/XyQ/bG/ixxMeAFkbDDTJPmaulZS/cKXaTiwror2tsdytdGsyga0pRbXHitX9hU2cR3LxX4ucCLkFCWkAsT4wOXQGNpKA5Hy31IYUFlQsyxU1i6yl0I8CB0fC04P124Njuk3dsMaLCEXGtVgb/UjQCcp3CiocU+xgrrQ7pJ/X2dUwiNedN3L1SsCbAppqpm1H9uZ+oDX5lShP1d9JMKR/G9xDO5hiFPsjZSedad9DGMuiOCM8wrAHaeZc0mhj9R90jqKhZsRsTpNAYAw2X2+ebo9YEDUcqQn1Q5rgFriwqnQKhtcimO+ODQCyCFeF3rlxwgHStYuoar8zEDHpS+opfSo/FUo4BIkk5oZNUJf0cEyuIETfEXFgH9veJsxphWt3rwemrp+gU57yMbGHNrDEihmk92UiTbbHKG4pC9bk7xlvevvcdiuwN3ATC2L0pE7oEHRoUjz919nIjiNk42LxYkjPRAZ+e5JMEGstQ1THkPzP7W7x97HMPvlDGtgx2VOkkSlDSFvXRAN9/fXUkNK+mIlYh71yUMamoXM//YOXgv5GXTjln/IZj26LxDwgyP5hrckpgS9+3WVgMacTLFNWNvm0B2vvt4aViBNfmj5YjGSNybIlkCTRSobrtMVY4EamTBjYyuknneEeIYnuhyKBwCSr/j7K+mFVpR2Hnh3h1x2Mc+42G0Orqgk3YoyA9mlKJqnYogT+1qgvsLgfIpe76g8ZNMXXTmHwXzcx9QTG/7gQ98KAOY76/SnhilIa2oEMqavNOcO9E+58ZmriaHhhbjqwSws4pTF4DnKejYR8QJhLkN9v7+HbBwgxoPFHiHgLxunu7qiH/UwxDlLWhZUPGON/XF+edNxgJYUjG2RyFewplNYqIMY80/2+V+3d7kV1JxXPIBFmk2GFNUNWiAm1vjau8AyCD6taJTdAVq3QE+Tlzn0WlVdN3M5pN/qHjS7dXCAHgKFiz/tyAStLy+0FONE+vL8YwkkCv+AXQvPyrc7sz326/Fm1U/GzFNMDoF9oN+IY0jnOIdgDpKj8H/wdAkK7TYrPBKLgnY2wFhpaAdTC76oQZ0U25pIuB4CPUVB99whmYUbpSJcDUefFa78j4LdthGiiosFVp2S3QjpdCwrxApAtYdgp1KgW11r1ibWRizoHZqcAF0Ojrlq0Gi9F1BvyEJhK7rUi7Q2g0NPGEKVZkiUCTGSgfKrWtwTMYyTj1xnZWTc5TztfIiGu30ne3d9rB0WXHqmyyGkl9RfXHLjieaYzffLojMM1rTdK9MXlXoBWlt6+JK+UeZL1M1hOhJ7T+r76WtG7NPd2R96FV/329T2aLY2si1vcSiQGh+DybR04LGysUSZntyRNKqWG/3X4rJGV4B9tPqlyffZ2eNgfVsN+03Vkn3fyy4MUMIRrz15hRyn8ND1n71Jj4yP65CrHy/g0vMWwNx0GKQ2qCnBaAHA5u6tDJGtYCNjBvcKgWBUaUGihhqKBfWy++8tnLArDzEHKgbNC6gTupKwcy8oEThc8R2DCxz4OOHl8IaxVIcJUhlAa3yDKQdkomGaY1je1zaj19GXiMX9yJyvAuNw/aduhl1g/xtA1I0UFCcoCqkn0TjSb6L79lqt1JzZMBmQMTTUA8dnB33XnlBCOHSwLDOt+7YEG29dtuUV75UOUoM03Ggfb/NnbvGzOUcIww7utCNTJ5foFC0vNzUTSgQ/31nUd51CXXgykdswF8dS913l4zwUstSIu2FYOaTE331l4Sbnz8yUClS5TU0tcGy5apKt2ZoaBb7KOKkXtG7mo1XdMUNqvLBsHUGysWOjg5Hw3aPMIdhKbuOozsmLY9WA1dR8dy/RgLoKzS4vZvoSkohyBrFVIJeTx4OyKme2xpIvHapsUyj4uJ3DomBR6GQjwCH++f7CdUfiADeRKRH0SHGIeMc7Im0e2XDhKTz5maiYP6u1PVSk+6t3zgEoci65QXU73C/qZWk84101Yu4iSROO9L/Dbk9xlbdcGDcc5QmqT5J+dRNxxBBP8L7VyJFL/quYOyNJgXPQz7GF3V7m2c+/R93fqXJZ3xWP7JlQ3OLQ93LVvO7P4OhXuPTKupnRu1c/Knsh00OKpGU1PDynz2/pjoZ4MWnrDQHNf3RJFoHP6EsBkJDgelYAG2/x3U4ffmaSPvCmZCSwFWiwZeWjBRHzfgCFLc717qBilkPZE5UBBs+NtXFrdMlv/MRmBH/nDTBYbN14rOQt202g9Szqvoxx7lH4WxQ7Q3tlIBYX2Tbq8TzbdEn7vg6rifeu5fPpXLeWE8FxR+fNYVkCzkgiFv5Xiq+QxnKsfEZIECqJusSl8AszA97rcm91Ax2uUptopf3KBeTY4SbfQjl5g4bCzoLL0dYBC3GEAXkzS3NSnGS1AmkapTz2id7Opd+hburVo7pOZOjRejG5DDMqZys3DVpR9e5TkagkmIKxdiTWHtBtFRshnCdDuvdmkvQ/CXZagEwyG2ELb2BK2PwzW2VGyOfuknw7wof/hzFRKBpKkEOjVXX0IrLzlhwrUS2RxeWRLLaebwb4+PAa1S65hpPe4z9QF4BGMYVM7aMfElbG7T9ThFAgswnHCZCjgZPGuZbvty9uYgY+vdlKcnZAppo5lBc0IBu92G2tYS+i33Uk7f+4pbA+xy4jMjICw1ux5EJToFAMrOQC1k/13aDe2mLX4HftEcoFGdGnZ477aSe8s9KbC7XPuU442UKp80D+3XyjF5Foy5OSh3yA8F77EL/Dbo9YqMbEt/Smv5xd2T5fK4uKCdhR2sFRHkVkkJHFmir6Ex0cLMK4FAyVYcCg3UqOWIyL8iF40Qysap1CiZ4rg/oWGLeQPahUQvigx6TNDQ3ZwNAfg7Vigu+4JP/9FmXeii86Tg9p5F9UEvBOOKGT0EPiLALQLTlLd5I5ZBjsEJpNW0dK7oCAfJXnqzjqda+umSiQOgffeF9rjqQkzTvcEOG6AMHS2KoRHY95mbzyZytty+PSHs770M6IGTkc6uWlvF6oGI+FcVytKlc40+2gkHz+JANxmqnNVTXhPVcVxNGfEK4ftkoGIN2X/+83jwKCdAIx/LikDZst0GkFZbP1S1O8j0JyaETugdiF/o2O2fT5iLaBJEWMioS0mY6zSgR/0aKY7P1HMAA67TlVbfKCKyH59KHhT2w77QLDPkfpHcCjcBjZrPFB0IPb+TPPC7Btegn6YehT14s0v1SD69B/NO0scXTdzf5ec2LpJkE/BdQzc2aFmbpCdkXno/eoYpAyXt2zpOngRJt6MsFkH68FBOqtTXR0IoEFCQZ/yaYqdTr+emPgoV8ucZMUJX/l5Fr65SZt8UOjxnZGG75NhDKltuNR1mHIPWoSv5/EXgMdVUScyT3OwsUyipaSooFuZWTl1Rii2H2xqn3AayWRjlgssJ0ziO1oZlTtEY7Xp4VcUt/qb3IzUWcIEQGcAe2aEj42RGR77Fq7/nUoOB3PXhB6tVx285CWTKnuFUND7AE4/HM2qmnDHkY53VNiJSzU/uOutOBSdTOU08dNtFiMnIoTegwf2/W1DqMCQ+bCM4HhPASUW1s3a6OOtaa0Eip6RnMcVLU46QhYqsvUebDGm41Y9T42djY9j6XJSJUJSmKCSvmEyPaIJVoelGRuvl6eHHTCFct+g1Y4JdHaoLSDj8q9ob/elm1rpRldklhH19UsAZVouu33rojNlq+kwabVfQoy3Y69/UOKTS4/OQQTS2EsSCn1aCjEfufNy1NuIknPMg4HGI6oUELY8J4s7hoq5VR1bDsc8udMFNqPbC7bNJTtRzz3W5BaY6dQewiVN9S21AnR0845nkPsnppmvoqDTVa110KGapMA+oXWxtmKn+plCjCDvncdw40Gao/7nkcgmdbVp/lMjQUSaNfsqvltr3YHUN0ZvAd9cRjGQaeLi0+nq4UExswtwqcxjgN2CZKRZrrHxb00OHbY7yxUtHBr3qrLdtnSXm09FHjzFuOx2geT//XCiNAA5B9U98V0b6aB6CTfwI/ftBIehg/fH4Sll9jHLno+hNAekO/kC82gyNhD0XMtbuSq4WTuwW1zn+1CQ7sB/mU/2RAQ3Pc0EHevADH/VoFRoH8rAjCXF6puW9QcNYFbEfTqFDen/Lmi0uehSrnlrVF3Zu5O3jKEFXK9FP50AY3XMREhCH2xZnQP016vjVDnM5/e1wSURp35M9jIOZosrr9/oIvnXnfYwp4vwuARqHDskLynCyJv6UHLY2tAm9r2fZcbl4tiz07akfRN+hIskpxo0lymxYAAGHG5/2tgnTb48lrW2TIdoO69+X1VRr5zICnpVYyGRer3C1s7cxiIs/JGZIxrrBLgpf2UF5IINssXloPhe2Vej791LCU1jqC2s52RqQ+ZZfHZFj5SwjPueIwRgUK/kYaErLxcPwU5f+U+2ehAUP4RhcD6kPBcj5cIVpJiz3Aj/95spNV+hnhKHo432zxwYktMM46qdqnKrZ3Tv9kjNNXvlcuJQLtCMOxwuQAJWdbqJYAiqrVA56uosb2UyB2GSIP7OitZieShipt/9hMZF7oosmdBBTJCe3JJMs3ajdhHlQNIKwEhfUsAGg6wS7YSke0n4BeCsYgpF0/RwfzLupqq2RHES2iTVIaaG2sgeCqGPFk9K9vpF4gSjn22lGWiuIZK7wVKU2D2d5emmEFIaNNluUWc7hgItpBhe7izEShxzPi5HCY/YLn6kLKPRkXDUNMawg9WaM25CYkcf3l+wQdX5aj0VKNH87jfS6cgtYu74A4Y7b0o8KNYiFk0RdlyH0a022cr+JtCkgG+qRHn1G42/5hIE89Dc6bKrcKSgoc+01cRNLbg7vb0hk+0qiBcbccQToLDclrd0he6eZKBC3z/4YVzWvLS7v2xRdW7WAkqsQigPxY4vNVtjey+8u0vlydj8ymFDXEQx6QixpKFWSRfujC07vvHUMk7beSK/0m97jsORgQJJ2gZApgAqEqwq8x1ve2JX5fjrf30rGYR48geyW4QC6ZR729/Fdd8LqKFTn45gKzrhw+Aum7X0r8ZgUctF7f2gMGUVw7Zp5RiFJd6TZxrK1yXqJsBT1In0Q3n9Nh35BfYUEVLhlzKIcoHTJrcUNuY4excrPANMTaHZJlN6B94d09dMwU4C95G+XbfG/kdSD9F9vfhc712qRIvdIaNZwYrHORtQqzo/XKtBopCMujpTgRJlhjwhfXwgExKODHygXzPYD6UyvuB4/RfAvX+17UtFXchmxfG1NdtRcMmFqgrBAsZyDDfeFJi/mvDUrzzACGh8hDlRsV83nOhuo6lch1+Wwolom7mR4WMgeb55J+CizZmYzu/CRWGicw8W9IxdDYBj6ZMLPWwkSSlIpuja7jN6d89oKfk8Jm0++fuoVQoiZcpILUVyGz3wWyw+cqD1jDN4qwpUaEbtA04x6r3FFAjRTbs7JNs6lmleUUj66iC/8mO3QmT7VbCszndHYtexJEF5JDl/48E2nP/aeNAIn8ozdCD9e1AWvnhhEcvnNLHAzD/LiFNnlvPgdM95D7yd4ZwY7NMrU0pxgRljnDGH6+kHfMVt9xHPt/v3O2VSYBCtIbCwfg45h9+fyJLu+627Vs+e2KktYytX3PLtoif3wJB14pIBClj06QJ5oms+BouLpml3A6noibPY5zASA/jJ/EMrNPIXh1rm+U0D66ySJ7yZFoZj5sGpPS0rtveN9WgOy0uRLf7mMhu0YIJzaZ+hw+VN1NlzAcBAPMRg94Id1nk/YozdRuGAk7sFFG4ZZ3h7F5mg+YqoBZ0BCFgX/l5kBaAU8TcVDxz858gFnn9bChxd0ZK7AWAgkAcQXc0f4FHIn/ydUu43DR5WqYSf3Q4+6b68WtbBr/B5La6/Pj1CLiKcaLDw5TGUx1MAY6EH3a1+b1syD4+yJHEatRjoLJek6zrhI9IKT8/8LXwM1euvHGIijvXsOc0LthU2d61URg6Sm/hgdE61yU79fWIJFYOaNHTpvfIINeAqpeuREsf3jsjAQkpGrVCKnsbZRDBrbHm8Ospde+4GDcgrSeTFVuRP9fuOn/MJE0TRb7ArzHWzSjZ2ZmMCXktnU3zzrexYKiJ3s/fNUhJMFiZDULn14c4iEgSzOr5QA7Xp0nA1ToFv1ZF4QsL/YFN0ncXV/TUT+BnzzDgixHhf6eTl8052dK2n+urrR8uEEa0+zY7bOFTygegrGxttq6E5lJWe148Xi+Kd3v/+wF0WAtr0I1ZKE2jrpXTHeYKtIniXVeJJUjtjWQ6zY8NbHfiyZrUUDz5qn7SO2sPCblqt4bRUf9EB+z+lSRpDMbW2/Hvz79+f+3Tf8hoJrE5GxZj/VSqQWfCdC9HM1V717oGzWOjJ5yx28zQZU83CmD/gNyWcRSxfrR4SP/mEI6Key4AnHhU6h/IYkfXp5PTqRqm9uF6NUSySpqVh/PSxbeRa0nHJaBOA40i8gsd/0Ntq65F5bB29ZUE+BZMN7nFe4ulNgCdN5JcT3KKXn0ihxUfHAmakiRIK2qT/AoyxErl6PpggKcprqhqxbsoedkmHBI3Z022txnhE3kuvtbxzOA1izN7xgsdm+ZZMhIyafxdny3Nr8QWEt261H83WXyC1uk73+13h66oMaiEVNJ4RpfU+EZiwGDxhpAYJgtZc4UQeVHSia5t198+HfWTZJDEqKRdyLHK4XUBTSl95oUJHvJveuStJZeXJJmydpEEyezqr3rLaJkhRiIbUPVLDijoOd8PGHC/bpCOdPOYrQ/HHpr+fiJwJjzk8buxx04AZQjn7BqCJzNpy/BAqHWatRYMzbyV+DNPuFqFsuMDIxC3kxeugDq8+WFxHOj/LlqFVowQNxQP47KfLENPh4AgVWYgaS1Rws+H7zVr4gw64/rAQ0U/de3QtMEIrpEnLqBqgF2ip06m9t/n2smjNhxf5TQLsGmZKPIVJE9GUCfrO1VIqUDBpZSv2HuuCWIUdrSfAv8sVRJEt5IAp3YIOws1nM0DqytavCgenDMOq7LvrPssxsy7Vqd/rT2/eWCe9RN07quZj7P7vCgL7ME+lIXPBu19RqUXklZKrSzH8sE4s863VgRfkRm+kUxg8Ham038hxoWhOrwmhp/MdK0lcbM4TYCIk0xpwMm2aGNZInq0qVCyzT7h2z/qfS4RPEErNeQQ4iXDhlZzH5XpHUKby90GYU5YL84VIyR9qkFk0iCpinvWAgnkjINolB43DLEE73ZrzBFG8CJ6TyPUBQH/7rGdDxHFSjVWI3Tc6XzKdnb2iNMWdgPoOv1+ELDGn0FU68P3G/BljZwKKpBjx2ggODz1rpcx/hWU+CzZsc34FxpyX4jgwkky7qJBOBRButIlR1vScD79CbQKofe+E5qPK5i1IoMRCYtQsSoky2HRdgxXfHrasBgRkdp2A8pcGH0NEFwCMIDrekrYAmcvAUpJimTjCdvkHWlqFEyFK7m5335hE4sN39zoAQJ4PvEn7lEq3KR7Wlpu0Yy3qGT3N0ak40svnSABlc1D04gqmnhZLW8p61ML8fGZbxb0+4do/X3AzFm6Prub8vdQXenLwHe/DG9+LleLQ2mneXnIiLm90ZSMeTECeMaEEN9+8EL4JSjkGTBlXb/KGpPiVP/Wx+M/WMay4TYMLEB2Fn/8ERTVsXNBAFpMu6qpc36TarStBQg8csZGLYanyZoqspni8oY0t7AGG4zbdZFWe9qpGpjRkAzhpxz4UkjrOS8TZpsDGAWSMEX5j1k1guA0apo6GmWY2onccg+/ab8hCBOEiotVdDyMvqH+/9p9K8/XYnXB7GwbcK79eSZI9O4Um8P83BpMBoGxUknFX5MXLgc+tm/OYhr81FVwFouMaF520G+Ngp0JWc1QEPqGo5GKYOzCKidyAGk9qu8pIlGR+gHIW3MmK2uIT3P3+hGA0YMQN5p+GEtGzhpYuwGK6FBE7QmbONYiUICw3Qzrl2WnmWF5bl3GrrQ2MSejO+0engF26sbHEpuY+iHHA2wqAS1IGwKahWYCSlr8qgmv79AVAbaDTtbntUYEgxw+P89LeBAwIHKjJWEr18/FhrawZjO2/NiZ/e1lbx/8OcbgAEPm4jvo+yF9JM7Katy3Nj4ckOma6TkvZ4f2KLms54GTSFilr5GaMFyESknDMWCp2iJ736SjwSiBnMMxesWlH4kGVdPE3Rd9vwH/BaLz6g1U1YAtcNm68HKm64ShgWrrI9CpaV3lPYiJGARztBlMcOPeC8rg73ntgrGVK8//PNbPuR6bkY+sg38nLHVXYyUIPazdQKK5KhcLgS1AvOVLzeGa9MEa/chNLSFhoJHpVIAWv+dj6lZuKSWwq9NU+k8KVzICBO1koBU2wmIwTe9JsGh0v45jiViSQo4Yt6clzkcUOpdrt0RQIsgsaD2wu4LReknSqcEjfShQGtTr684N6mYph7q2eHQYhUZs+fp/zLZFqFoNYx9gIrDAyNkV+1jkEXC0ufFcMmWHh4eYKOt8aNIIIlohXqLqypPqNlfV3izvYhWYwgxwXP2fX99M43nZImdjTW+ff+OHVpF5D4A0196ZsKEPwvfv4kZp84HBM3kG78FOWHA4C4KOESjKiNZrIVUCSk5P7Oj8kVkFsD9BcmtAfVih5C5exvnBHY9vPclJVjmRZ6lp/1HVLjlm4k6Oz9rtNNZUtKPwfm7aNvjMQH1gCMqhhwuqnRcZBr4L0VNSWcAygdHS7TFt0mKSR/EbXbgvYt/1ueS1XJZtyvXxHMjYiXAsXX2tUQHYfAzzqenLe1+V+k0xlBpUGP1JMjbh/baEOv+U4PBfVYsNztOCoZ+JrTE5OMoAZ8RndmZpvoFDN7kUdNx1T54eMIhrxiHxi16VfUS/Re5pUux/9/DSgSqvpBCQZEE32ncUVRjKvuO6VCrhdH2q9owe4btiruXfBn7K3ldDZFNuPCJdrSP8AABs6VYCXvejUCDBXZ9YbC6/97B4nmeVOZ+hlyFRh1t13RP24I00YbyY25h7JEDEabjdJsA2uJWhonMG9LfYypBjmPk15LV0Ki2J7mEaj2pGYnLmCZ3CUZed6lYZ6FWJgoPPFGQip5bPTRQXEmSRWYytP7Cu9bEVuMQEl6IlMCOIXokRMxcsbI+oznwykRrCuwj1nx4AhAf9Kvr6df4BwQeiiyZQG8ovjJbwRD/fzspP+TIWHXn7eVbVoUShEooR1Z3hSzoUHaOp7QEAOm5Jq/dV9GRJu1C/TYoC7QomH06BCYK4YjA7ZwiLEyks40DsL4dCoq7Kga8NnZl1z/fm+tTDJCv66A9edae2fO7tK5UtA5K8C1u0KqZDdz3ML1w07wJVRifO3aKGr8SsL1Xk9uZbKAIif0Keo/crLMtBI5swqhZv2JSpDY6BH0s3PJ9beJ7Di7neuQ8Ye8mztEVNLAnIP36GTh+NrkihtZfavqC6ceb4lPQ3tKrnsynwVh0XWGiemZ19sMC6riliTpS/FVHk4NqKCkuhHjRJcnB97HVm/g/hDK25s2oqKQlGkANFSjD/DJlj1e2cOrjRCgxer4Stl/4N261JbFaXYjv68YTUIpsBNA81JYTZ7bqUcVypypqhZjWOEGL9+LInh4epQFAGhEJ/0LJykPhmRGrWf1Vk4MEO50CZC28l4dbejAs/6WmtQKLhxamVXca//ZNh+C8+Qkvg3KRK9Ihm3fYNr/rwbd2IzqFEp+wA2dJ3oLr4Qb7mQtyWiB9OsnizsS0wURHLGPuNJ9ZC5YFeYnntrpe8vIiO1tWoVr7CXUkmhsanFMJaUS40dIn+bd6D4fcu4ko1zCa6B56IWvGBOrSf3YSjRHsNkV9i4q0a2dL3E0kYn8j9tlj4prmXEl7gbXwTSlR+U2MZ4TOfohELWuzxjBFWi3/yO+sG9bM+T+C1ugly2Huvv8EV9pfL/BZkMZR4OeNAH4bVETcc5iRL2KTwoB3J4CwDj9f3Y/awmid8JtcVXKVSeu0G/D/XBey9T6MDyeYC4bDx+32ENJqAm9G9IFZzsFlgR3RqzPYBPiVhXeZiSk8k+zm+deGQsiEieDne4krByAOrKYXXcjrvWSPg6l2KI1MxBPtOcJ7vg8O6H57gSuAoe3TqkjfXs35NtOOefD6iKdDI3fzMsKbjkZemMVZ2SaWKeAcIM/aTd3wYHdPMikm4KS++Qa4NC4yV8+MkiMEzNMZHGGX2/eiUTEk5dOfm1PeAFwcl6fs/MimGTK82vxiCmYG8sxjJW5xeArznDa+1GL2oFEJ6IWZy4gcmgE4RFbhNFtCShBgPjwnJXht85PFPiUH7PNs5S1gjnqNAYfZeAvKvaUoSnjA0bTdbyePybAtYTNEfvMBkQE/dLXeHF33s8UrFI3+/vqMFXpwgb45iNvLXsF4aN7NB8qV4zP38LHTcc3Ed2H1dECP5HT6UTKsCu+sEvsI+stDeAdl73b3/sT4ZUJUMRLPnX8GvzxxIrP5a2ieEXDpNYOZsypdGaFeWOHN8FFoiuXSeWzSM+MPzdziwmCo1C4ySgnyA11qJvsrsZ8dIO+wW2A51xIh2A+R7HOgYq0+8Idc9dTA/UUWYHE1oJv6le+A5L3U603dsI+jBSedQQlRNeMYGMukCsDgObsMbz4MS5xv+yQKo319UfWXEwVcQsSfbaiKhDjoSbU+5DUKTDtMmAXqkW989EhgMKtfn7Bhere0xnl7uH9E7/QBcBulnY3JN4M4THuySdDdHl17DIPelPcj0QweqEEmniRx4FLH/DzuypH4j5FmZ98jk/8bwdMP5BaPC4bu1QuMVwdJgFQZmOzTx1iqynluV7k3Ur+y3tOqmR8hfVnHIU0UozUiW6LxcuIjmrU+surpE6xQTNRo6o6byLZ03Xh7APpTm09D8RtEOYIRvsldamiCblDJYCNR0zmS6GN6J5I4fAue0nlO2VA1/piVTlp6Qy6P2g5hPAn5AnoiwBow2URx+oAlF5E7tDG4rjZegCF91NGVyMaHg5KxEt4ncMeycT3Eotpvex8WwFIa0j+7GOkG/QE2mRcg4ednyQo0yt1ZC4HRMtqSfEnBsO1rQxR+9GkxTFfTKn8gLrmW74riridQKJNQZkmlD+MeTJ6bpiRWuP3AmlrehCgOembOBWNxWCO2xnLJZcmFCRa1/aIaNFE/JXAPGoI8U/1OyxQVGTbufpX8YTCHqCEcItLL2kcO4JQ+6YTC6YeTBltq5WvXHuvkWRgcpo5c4JNHMJcVP/o4nMFhmpKc8o1ONOErCCGwvaRGQMtShof7L2YxjAkpo1tDbSwCbsreNR0ZQfRrhcsJi/mZXVEpBm24QhNVwZ93ggt6hRyJb6v7okWa4eYZTAGpJ2bcud3TwqAWhpKm6fNUWA5N6Hrk7yJdYqshQEkMMk8NcNZ4cKxL1md//QlKhu662msmqmRzXvf7BFM0fXcVvn+pJgdNgduj7qRIboj41lv/c1+/rl0ShZ8YFAbk+xaEx+7MfkicDOQbbhg5hgGuacYbvbYKcT3lFQ34ZN7S9Ygf5PC6S9A2gxbKA+TqJyuXmBCNLEup6tZhpmaR0W87yreD/+D63CmIwh8UCbCm1pmt2bOWg4KLIlX7SgGddy1Y/NJb1E5PpUaKbKljxyu3t3exiMg7AeS1JtZWQ4Ny9NowvA+4WxJ0jGoMsaKNj8vLdalaW1OAp0c85QfSJR1iF8YAWv1xkr7N9lnCJ2MblU/zqfREGgdRv/Ij48phc6zkiyMajKIQmw78YLuEe40Hk1U/jqAZyLXzpmpMHY/f2Is6yTeKElU05gPl5DUWKcpUY4RztR0FfFzAOHzL/vUbT6WRzulsNsmjbd6X/F5O9gKlKWKN87qT+cEmDLL3OrAgQxjKaVSRvmcN93TkYIGn2f4lY30M1EMiqEGAAeAKVgBiP5g72aDs1KsDrflq6pI0SUve1BEpzgTgcvChh6nOuggj9VLvtIpTUvRS4N+6wLqma/O452PsLiuACY5i6hghMuZ0a054eN2TWtCAaFQIVo05TrfMNnSDa+a2PUmr4pkBWGwOEDou7V7EhO++o7pVGLpnZdtgJExZtLKZrDqIauNOh3nfV9w8uEPyo35pe2On14Ng3XZeKKjZjzUMdqNB4D3SPQ6NkEUusEClIPfUKlL9jURHdVmL3D00ILt39+IELgnrYoM5TcmD6kGDFf3AVQlnWAeBoq3wZNlisLjSN3rgoMVypGP1AGTO5yCGcLKa3xD9X7ZqhwieRQhsMhdXTJ62ZLpjwV6aJ3HQvjS9IJkYgukUQE7UzP7KUhBReagXqxa47xo3fq5rwPq6rW299b4LIBzuhGzCG+JSjN+PQXtVeVi2UlzCjVJL52pT5kSk+q1aeT2ilISZxD1VAPajgUq8Jg2Iu4WC5sJbxIh+2IFv/Et7ogSz+rPSZdu8LimlhupR1yD24FtnAvknaTWtMM70a+hDuLSOWN44zi+h7FP9lbj0bF3ly7t5460Xf+8z7rd4nKxhJ0OB3/LMMoVi4671jqHbrH5Vmy/QF1ZoMuBLeuT8VGOxndWM10tRR8jYmG8om1iuuAFAu6OS+aXgY4Oxqy0IV2EQyq2Dk8onm8nzNtrv7tY/HMJho+ah9GyPDVg+cPLJ4JvABhK3te75ZeksvTRDYAEnUknf5W2nBQGOL0NzYZWYL/vrXu6++bFM3sF0yVFE3dKN2b6r28My6SIAVi7YYunXIQ1LLgrCqn9NT/ABIkPUB0aUmR1ydUZoTiKMU/xFZZDI9tuht/teF8EXofGpYyps4N90V0Hzb6XU85CYeGwm96dFzWOdQWOSyeO92nUi7KZ5HGih6yEn8Tf4DtaeQ3YbztdsEG53U2mu8xE+KUKLIHUMqKKoNTVa+1Omcr0HuubPBzgGEvMKlo7oKFl/wS5H5ErpLEkJ9OswqPGAXnwKWoz2J7SEmZYajbtu+lLnXKxB0sBCjAmCleVHtpmBAjETEDnCUzGgdZf4LCI6Pxzw/2rJSrbNqRqw1g0KehgvoETlhK9NZo9yR5D8pPLZ3hUgfCFjZ3Y4D4ChYCEjCij7JnYMvMieg7p8yfGkzc9bRPSVvqWP8ysSQ5JUEoPUz+ttaR75obD1fZlSIFQIXO1UHM/zzDOws3l63ubba+XJoJULuU9OBS04AwbVyptGXoogZJoU2RXt0Pu+QrZUqpfyHkTIRXssp+LrsSwL1I1FyKct80zdpAPycJ83CENqgkOJGJXQv6QwN8p1CYp7C/zg0KpoAFmvbsnzGGVJHf3vDOIB4q4/maJIkxG0U09uhd5nTRFznrlxbug07Ek/1jaNbh7Ut2fRI7a69F02wY8PE5sRWTgna6pUWNBde+oST8tf1Smen0T4PG1DD0HSKhGEsALLsnI2XIooEADpTIBQV04cc7KyfidlwQbgsKlrkRhB7nCAb5zmoCyNdPdwFlGVJef6O4F9QJYogeHoHtIgZr9lNSBmIlafRqAI2C6il/8WcGMCGhw0Tk32Ob2B4MgLf2x+N24+TqhhJlDRcoEjF3l9JPrmBOkJkZ9nsqhxA2R7ammmEfm5GhEl7KZtiWBIRQlFYvOJQ8E/cxuyUnF0E2ayVruU/Mmle1SjgcxE7V9ux3vYXZ4bRAN18OYtPPU77wfBfzxF7AapWtsZSqWPaWbCA7GGFLPgBuz1ZxnCjCQweNfiFP38nYFlKoSF4BUYCtGH7EeePOeqiICn8finEVybJO8hNx3H//XA4gFZTQJzmvsMNmpOxTMep9oGHow+y5++puzT/UHCLPZjA1g+G3BbKi/qKeo8rT7kJho33qvuoPg7llo/IeJzhfP2pc8xSLcFNml++GI70UwSwEU0CaBfQxDWioDLoeT3ODpYeGfKfaCWqtw9bmPFoA3juCxJd5MO3WxNj+aeVHvprD3akhk4Hj3X1TJuJlJiNRv/4BlddBFHG6pZx0A1t5CJmIUL64FzAEEruRSmjozlx4CFMybltxmU8HxvrZ2QnnaLHjCCQa4BmeZyaql4FVomWWCdopEnHs9U27h66ua41ChFxrMc3H3IC/ZjT3BLUY/8Ea8Nzh7ZXRRM53t5HIScjvFp08j/hZoVmINSc9mgqiZHoCLnUEwIW/ADa59B6x9ui0HpEma7VaVAZIZvAOmvcTnknfqJJpfYDzb7xW2O9C/o/iGnsrKXpOLEy7zStfISxS/syyKN+vTtThJ8OeDm9w+SO3X6E1zjAdgo5Aq8NQR+M35tNH2BoitGRPUQG/p0yW1jZ/fZ64nlQR/karexoaR7hY9jyeRX6/XaI2xwcPgorAsdHlJfdTl1rDex/y2E506EN88FoYixquRj40Ij4GqtAUXC8/YnvpuEjthQZVobfCWWiElwJ4eSz6oojN5CIBZvVVFaQAYkZAv0XH7eZDYV6uAnzelxzxiEawyGPLm+uqY3FHslSsAX9uWKu16sFuKgaFme20HlaXhwE6kVjwgmvcwt5XMWPHY6khM+Al+MksMIInKZ18vm5duZw9EiZYkTddhWooCHJjwAcIuwTFq5IqFHeEV7Iy5sz6PmETBVG8bA+I9hLKL7Mse8YJIN4zr8pA3ETCQ3OdEXc0rct6SDzcNA8+PXox/8NRT8dDWjH5j7NM6mwM8iGWvD3X4YAqdGRJvqwm4cQJXoY9J7FwUE+kMWmPttZGGZ4KEHUCuTEBEHpxraHAohdCK695qLdnG0FsN6++pj+v9WIglNYWuBSaVtRivo7H8xnWbs3ernQ9VTw72nqdv4BgklAme7dwHeZdMCD2GUsHxiZxeYlOKWkznd8GH7NLO+gOhO/NNqGCRK3W5uu1jWhQ9FHLp/OYS1+/jUFBYAAS4ySdHVVPqi6o+XXYsadPbP7EUQABxClBc9lBMPApHINap1jpttR3ZnAMkZDQOMIF2Dvg9m884GE1bLFLwUfPZGbhlXGDRTEfpHEjz9HbLy31OkBUoedSNZ5GGmxUN5EUHLC4EdoBZ9aD10vtIiyEdR2Xv8PZcyC9FsiUsXY+vOfx89JX39Kt3adwmZEFGyc0UXsSHblxuFIZVwo/HKAHGWgZi49+ruKt+1Nw6ht3VFJTwqF8/eveYrwZncjs7eQ3GXoDZmCUL24cq/MTNEwa0xukynOUs3AtKSy+9VKVVyf9rJS47z53PyWPyAI9XM887kEQBdy9SXf2JC6dECmTxO61fNp6pfQU3740oDp5rkQjb+oDOR+jONAIRXlfujxxrCcFfrodylchnNHoF+E7TRjBnA8sjCG5sPvbQAJ75E8mbTR8/j2NyC1Nx9IjabsCH2qw8QQG99v6f3YI2U3BrixktfeWag+pwbIG3LmevDeIKIFFnyRkXrCHk/rewPLtS5otpxfkY+o0TTWpUgSyPDd7VRSXP4xEqehfF6kLg/AbdF0TmSwGhq/mbfRSp/FPRxcRYQPo0w1w7ZF/l3iG8KzRv//Rog+Uy77DXGljQHY1HlnlwdxsUJm1nO2q4t/BxpTae0PX5k1Cbljj8U7iUwvQkxgW0xaASphChGGjXmw111ZU4hbsMUHwO2N6YnMHUEk10082oFMjZenqVlfgEieoOl6wYFDylp8EMIG7qFlFO7QfQoOoMrk4YwGT47QTj+10NiNudwSWBH3TlA1vd64cB01929gzQM473uNPC0Hi9ezlQIkFkxhVmdGU3N/KmSq0PYGCrWNXlQLubMx7czYkzHVjP4oz++s87/gCoLsmMWFTsmtXylE8GKHlVvPbXMq4wE1+4PRnj+uS4W4jlHfb0QU/Zp9UF0J9ufoZof5lwtO/n7u0j+f2eSK7DpQpG4h9xq56BCeidbVkCl9+iq6MCn0gm3Dy2Aa6LRMYJnKqFmrSaGJyig0WkpflbSdup9AvrATpiedfkZTnTWcDgWAKYejvVRiuc3NthTITYYjUx+ggz4aV7Ax+pKdh9wqElRBEP6yF0a5LzraGcWaK/ACuI8k3K/xUGsZdnj0t3KzTfATpBwYPyt3mkBZSCMEjzzluw4e4dNlgq3Ja7YYDkgkDfHvLBMPei71zrpFQRW6IpzR2LT0EeZB/zciRIb+as8dhXNRb2VFygVDQb7xWnKauPsKdSVdj4uJRcKg8b5vIMmjEijXNLoXxrpjSZAwZvC1d81ftMYGlBXc7u4GAcGN2jUJuzRbUNOetdnugFXEhWp+0O1sp1+UE++7TCoTGn8ULRtzgMqXdLEhjqwwokRIG9AQxyCMAcdjzmIRJUNxDsqIDQbL2i2e7tHmPF0/sLPt3oN+7TvB4r/DiuNGSXyEtzCBjtlQE43UQRZIoR4xlF2tksb+NQFiF9c3ARiyuc5geQpgJ7+xE0gCg1mAaeWd8dO9Xu8lp/E3tmNYh6aCH/c05pyGTzSzW3OdLkOccZp5CrLn57G1C2HERro5AQKAQhk/WQLkjI5b/tzOol1CX9Gx7piW3b1MW1VMmKIP8hN5L+qw7gduqn1yK9YwhpowCoi9VSIruWz3DLlL9vmBtc/C9/Cx6UPi+E65T5uw9tQeeglKlca5OymM2mUachlizwuk3eQjY7srtc/B5EYcCkkwPhepSCaEidwBgN4MEUFBsWWvrOCfhbtyprO5ymmfd3PvGlDRSUXrRbBq6IoQIQ+vMsHV/SAy2znVeyKwyuevb4txi+aacJF9IxJDqP6o/9ThdxfML2VJie0qffRTlHsX52S8juQgal3JF92zLzACAWaOWwgKUgZAnWVpgyiagVgdAj665USQqyTQU7AudsW1WnqBnq1jswKnRx7554CwfUpkMTGypPYGLg7fddISYJfuIHJjhL5Q8joYQNOjgkbF2wRP+9+xwlGjBtB/uG7zYZ+ES/OjBVRJvOcGxqtlBTzmcR6S+8Zv4W90cOBBaUZESqUjysYq0tgTh+18Zf4DfmaVSqTpkOzeQW9IGJhR8B55ApUJzjQNtwJWRDZ8jBMag5frxs2+fM5Cf63zYtbMf8L1zKYNGXVSAod1RdCNkOqqp7xyCLCtnGwrqr94jpLf/FFHUT7q9mymNrNFrw2z7p5YQrohmmq4m/DNGmnjp5Ss15jQ2W78fByxy/G/pE+Xf2ec9xyU7izizUvHj80gKcDbhjHPiDrwNF+S/Gz0kbVNYPqcjFdmpUJND27D5yP5sn9lbGxNXLz3RpWB4oTvYhQyhSKQwsHZwJPmxr0YN6k+Ojk079axuDdgH/w7mnjmW/3ARhQF1M0h6XLC4DXhwUuLjqPWeLtXQwRHsoy+lgNw+VzhSfwQ26Hz2zahMt5erApJoQmGHpR2F36tRjNEF2B2OYvxq6jtSlTdWC4x/MG7mVNgOsJBRtTEKEGE1yq+nVmSTEKPFOrIPhUohrumHryQGGwUDpOufIWVbzSJVe/9I8UvxRU9CqtR/hyNZQ8lCnZlVAIZf/YQ7Vb84k9Q6/XDciDL9Cw1lT2ujnhqwpi3GdcQl6Lua1pp3j+5+0Oeao7DAFmwSszm53XA8niEsB9sQYb3NLF+oMvADvOryWWe9pmRoQrKWtJbbJIMwgNeDcYS1hwFJw8retYPPC9qz0nPVG+3EaZ9jdPFOR6kCpJ+rZL1G+ZHkoN6gtajrZeeOiu0fXPUYqzVHkVIrPTNeqgcGXoxbl+CIx80vgOmfSfkFDOsp9YrRr4u7u5jEvtIY2p4rEVgAHKsWzOpC09bV7uWzbGJls+ZYiKfZ4HVXjyak3nGt6kK1uukc0OOPM6phuiB3ejjDBqMFJ9DmggL9F9Y2Z5/+Clxw/g8zHSJsmkLu/sDHY4gY5PTO2XmSFlfWRywjR7vpice96DR0gtXurumrVKjMX41fixdywd6r6vQvCHDaanhTBNQVHSHaLUbw7qKXqOS9tbq02ROVb/Z8Mn03jGCGc7KOO01ZSD+vTE4yps47QirKgVVvqYUPPgVMhU+pXwoHt22+ApuMvFbtvFLLPTT66HkMHrFq4eUVfoQZfF9pONg1KcIIkrOxq3sbtu13mVKDE2JALUH351zKrGwJRk3BbN9yabrjwvxCSFV/iw1Ly9JruVJ9BDjaaoyEqct3V11sc+CpC49H2uQBtA6LPDTuJNiEwODTy/fQTopl8t1dQV9aTdrYktwPjzgGxU/gjJ4UTnrTBq/7/NTwRJvNknUJ7nRX+nlUwx5/kuIvWXQh4/IKkNMyRJVOzSBTy3r+Et+juYbm5MtDuFdKrhEbUnNgkhXVttFQwsgcb4gz170haOzS8eEOjhY90Iw+HKAtpO1SjwBeIXWYmyhiDdAwVNpXbvxLznKvmd1MV3Hg4s1hsyQ/Pq2BT++k5i/Tl9KubleQzGQ0A5nczzI0TjZprz2D8yKbkd7uawI6XPtK1QC3FM1YkkY2n+sEd1TmjR9Q2TDrraLUWzGufs+cqxpbCSoLbCLqlnvkLB2G2MWd9v4hm0bkVeWwI1FCl0vKiQ6KYCyPAv/ypdDSnbgH0Dk569XGAp/fY8VvRxBeHrXw+A/YJgTgGJ0iRnvvNFVaSA0pPWIsDMZsWD1Tz/+H6+/515YmxvKbKCY+Xg0sZHOcLUb7Eny6p3ZiOeFQ53heQZlJjVVj+da5/E93bIa+CL45ZZXmu/gY3O7IoKsJDz76OuoIIeNOy+8QqVBiAWzNrT/7SSwRlLv5sMgVIVycQInfl6CWizQdlZvi39+UwgfvY800EpVDTv1ZBlHRcywJy8uoj4GsVWaNjgLVP60YVmQrlVDdfXGSgTT7T/t3r1OhxQRgl4IxhJJ0H7bMb7rTid1b7UdnBI86BtwY7XT0NpgKOND13YyPS1u1cPmbnahpsmI0zrrVudRrigTLePqn0zherM2pd9Af50VX2nqyoBaGdm7C0oGcyXgAOibaS28UxxTBCYl1nJWC8yqfZBJmt/QQdmiwHpWYKSM0+KP0AZxfGT/7ss8p3MWNNdJ3BUJp2MQvgCLfbmrvTjbK0BcdisUKpuk1Xfk9dmOdnmQRd2pYNRqAlLhvaSYyTnkgW9PxoIBfT8V9uzpJSNLK6PdpxOrQzRMhhSIvqeo3vxAi1KE4ENPVVBU1J7CPD/H7I8GArYMPh1WX69MzgEPskFJxE9SevRzZuQzRTiYtvqv8YsVFp0WAQh5ae/QQxkuJB8bA0wTuP2iqZfofoxHMMvIcdp6nSulhlrmKO7ra0guWBjjj6iwFjIXjSkboZBQLd4bwwvRaM4AjGz98hv+iGLsF7aqfBGIkVYV1ktP1hzxsc8N66oKNR2/9iE0RxUg8D8OwW1VSosfZVfmIOPxWxv4SNN/K7Q7dBC4N7qnTGDvfvkGEk5TU4JF6/rl1e6bNjW3GmCmkiRo5v76EEZdQBZqoR7exaifvbCK1J9zEbJKMc1P7V9GY7WNVea97NITfn8Ri26CuItzpKPP3IllVJqHn25IcR1D6+SPzlGhLI1JdV3uxlZdksiCRY4UIdOR0tzmvWziDFOmsKFu3DrwzJ7Yi5lWrTfqB4+lyOOJngq7vEk76TCVyp/fRhQ1Ym2TbaMbe4ob1cEfG8U73UyOWjezOxnsFjUJNSm5NPmocvxsh/1fJ+wjd4Wq9hq2L3bbgXFRMIjqrp2bYDLzNa9XroVIdZRcDnKlRBzzHim85ZSZQkPU6QyQhlSL3gxDGUU4ylG8nzwxo9in+Nqm+++yUNOttzZwPyZ6zk2SK4TzKecz47XKGPiThcqnNERFckiuUvlLKLmEU266q8ing3MmHhRbh26ER1UfWXAqugdhf9FQal3dEiQjssmxV0xh0kZ01h/5jD9AiFAcsRKRIm7Hbx+KSRuhvCjK/gvJy3vQ5vp6HuwTOqNVyZx1FYl6BMrqxTwaVydtCwqqS32cEimY4+J44SYAa4e5rBeS/fj6BA8ibAhX7E2nXZPzHCyErnmtwVYzbeDbVrXJTArjSEWXHFLHfBwtRNgdj7/ZSc/rXurYox3HuOou5y5R77XUUk9bDV83R4OMMhCn+A5vWs8krHk0i4Lizx4nNyqWengsx2d3Ci1JOeRH9629emYJufXgDG+jbexybHp5EvtGbKihhy1IhC7kFYN7PQsSvFZncgQmdXw59iQtmN2OI2wHhlc7eZUpsVa8Jy4weagUCIT4EOTAdNA1Mi8Mks/4KQhNV5vKbubX0FF9OfxK/N2XO7y4snsDd3gDtzgr2flo0ZNmeA47PkSy0wj84nnml6KnyVXO2MvJ9GEvdPs2emwCUAjElXn57IITyhI4i4pN0FdF2mxh0SxhprJXJXPpoc/wVpuSIkmnMz6g6ifTUJ9oh2oaL4EV0KQ+UAipjcMiYEL2aAH3/9nwwQCZM93ZD3HuBxW6wnFnWV1yVeysP7v9fiZTP77DipK4g6tHjXe5kX4g9KWbCAgGMmytW0AJDAqL6JMocM0UNU4+8xE1wx1rIUeaFswJhFxFhA8zu2hTvm9VHQWPDXlsfp9zjB9ux6lONToiER7fGt/7tTdBeSEeHZ1mba5qr9GCsCx6vi9QKfErAmekADeyJLRsSRV0NLY9rZxxso0m/3id9/bBKW8HSEFcDo6twcZbpcnJTxWrqb2H876YOjLw8EyigNxgxaCq6JFAWt1qUlRmv27m/qx7yck7ZCSreXsunvteTjbSLnIHnosREwgdxiFeXPlOpug21ideLSWLX0Bam7FA9QgBI75qBonKUCCcabW2aL77VvLHvZ/MiCu3E7K1sJ1v79eonj5HYIb5RFwt3HcmnVNJMbFbdZcExumLm/9CKKhNQ+a21u4ogiGmS2KVEYuuwGIdreHWJSnmFALTGw5pKrVoVUJpA+/U5y10Dh1vo26+9TcHGVuZ8Ca/NX//mC63JPxiFd10pcUumWzUrpxoKrEL7IN3uKKH8/8/qJArLu7reRbAKqtPglNvuC8eRpK/p3zLE/fkMxTGWXG5xdwK1rKRA9eT0rURdnRkJPlwQLCn8APd+l9dDYbWbsktWMLNyKi6oORhmMGbZdj2ha6dP0Vc7B68uRtYIgqQJHvRN6U6ZBPnu7jEnl3pGUd2OyuaEV48j65M/icQv7OGipYE23/nfUKK1mLuwKD5d8J2KfCnGVrj6hHC1VU+QtH2loQHt3pX/YofXnH91mjb5bqRtZR+2HBTy51x8KD2aW2EIBiUXD432nM6gpzQTQman0/xXIKLx0mo/AyB9GTKyKcJjF3xUv3jBSPNJxufvSWoo/omJP6226ccQWftsxOE7j1zhaJjVXjwt1xKjSpmiutKQTZK9Y220HZwmg02U9BiSxZ/e7SSfqUL8YyXU/kMnQAqe8fWboAzlLSlACOIci6EIoGddWSyKeku1qORF0f9D0yBXFfxmNcVm1UvcEwMW6So/2xidi5vrhpq9HvsbuINbcx1u4YtYUMZB5g1oqSIy0mrJ5QARea6nnZU3hedS1z0Vv2TIRTuRPLYb4Myhx0PZlBYmX4YA7fAY061luZKtnFIVUQWU7GvzrZLGPcAMfcy5HcxsKXM8BhcKSv4eU0VuJtk1eVIQ08lq3MfM7zNqmOSQdKhfsvrQMbC54uFuo9nw/Q0NPnQLPzGVAH8zUwNsV8Jdl0KBCbgYhVld0qDG3xDmVj83oG66QOE/MSyAq8hAnXiFzLtA6agp6k7S0OT5RTATn7ps3ZY82jD/kE4Y5vtmuSbpX503y7SUueghxawnGVM39u+ofyKk+0I2Nyk1jxlx7QT3Nlr0SxIcbMs9NjNQm/4+L+nNIEtmXjb8AiyxmN9zVCuSnwatkmIAvhDT41hzN+S7mkHC9m8Aq5dYryD3FQrjWyesSBC+p7e3eQM81BDwsWz4xS+fAAl2LgyyE+k9rEis48o1SwYLTkL7fNS6a8u+xj7aUlY7DzdMB4UdE9+lomlRIWAyM6gme14cKLAox/oEEmlI2guXECkDb5JPqpnJPgMY8WcOJESZbKB+0f4lfZLEOil395w9y3dawa/NUwZQXdGJHCw9MGRFthv/+NgkH0KG5/RBs42xsWRm/saOAaLSPEhZNKJhyZlIE0GDzLoog5NaCCGMyQ3mSbnSBRYEGI+G7Qqi57gweDpsjtjbZvMpoVdpq8YQjHeTTuVKb787HbpaL0nphon0Yj9GHpjuzR+TWkGFJ8XQk5bXLILHqsauv9iYeIFJwJGRyqj80NcDZMXxp0gJctjvOtCVqC5ip5mat1+pt0Rzujq1cVs1JCjlHriEp6eXlboqruE1Bs8ObNXkt9FgMgZH2V7mJmoF6QKFcmN7kHNkCDZnVSf8RDVvjT+OJTsyZTIF4yHi/8n+1iBH/gZ/G1nP3GCI/7EIFe2i1pmH0Gwyo8CsofxC5X9+ZcFMHIyL9qapUm/FtEfOCi5BkcNDgdJS2rsOhQMKpwTwRAPr/5lPa/55F9sr+2cibdH/+yb4g4WspBp+XMZucpBuk2acNGp9OMY6hmm2ABGfs5R3qnRUz/4suAte4Y2pG9NxmQ0GQA==","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"calico bug","slug":"kubernetes-calico-bug","date":"2021-02-13T07:51:41.000Z","updated":"2021-03-02T08:15:51.878Z","comments":true,"path":"2021/02/13/kubernetes-calico-bug/","link":"","permalink":"http://www.digmyth.com/2021/02/13/kubernetes-calico-bug/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"prometheus","slug":"prometheus-01","date":"2021-01-25T00:48:08.000Z","updated":"2021-01-27T03:00:54.371Z","comments":true,"path":"2021/01/25/prometheus-01/","link":"","permalink":"http://www.digmyth.com/2021/01/25/prometheus-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"kubernetes dashboard","slug":"kubernetes-dashboard","date":"2021-01-15T12:51:41.000Z","updated":"2021-01-22T03:48:33.336Z","comments":true,"path":"2021/01/15/kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2021/01/15/kubernetes-dashboard/","excerpt":"","text":"重新疏理k8s dashboard安装github地址：https://github.com/kubernetes/dashboard 在线dashboard2.1 deployment清单文件1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml 默认type为ClusterIp即只能看到Service地址，需要穿透集群边界让外部进行访问方式有ingress、NodePort、外部LoadBalance、pod HostPort端口转发、pod HostNetwork 等方式，这里采用最简单的NodePort 修改recommended.yaml清单文件123456789101112131415kind: ServiceapiVersion: v1metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboardspec: ports: - nodePort: 30443 port: 443 targetPort: 8443 selector: k8s-app: kubernetes-dashboard type: NodePort 或者跑起来后再直接修改svc/kubernetes-dashboard1kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard # type: NodePort 按你的需要添加单独的NameSpace12345678root@k8s-m:/data/dashboard# kubectl create namespace admin-ns --dry-run=client -o yamlapiVersion: v1kind: Namespacemetadata: creationTimestamp: null name: admin-nsspec: &#123;&#125;status: &#123;&#125; 按你的需要添加kubernetes-dashboard123456789root@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-nsserviceaccount/superadmin createdroot@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-ns --dry-run=client -o yamlapiVersion: v1kind: ServiceAccountmetadata: creationTimestamp: null name: superadmin namespace: admin-ns 创建一个clusterrolebinding,让内置的集群管理员角色--clusterrole=cluster-admin与刚创建的serviceaccount绑定1234567891011121314root@k8s-m:/data/dashboard# kubectl create clusterrolebinding superadmin --clusterrole=cluster-admin --serviceaccount=admin-ns:superadmin --dry-run=client -o yamlapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: creationTimestamp: null name: superadminroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: superadmin namespace: admin-ns 获取Token登录1234567891011121314151617181920212223root@k8s-m:/data/dashboard# kubectl describe sa/superadmin -n admin-nsName: superadminNamespace: admin-nsLabels: &lt;none&gt;Annotations: &lt;none&gt;Image pull secrets: &lt;none&gt;Mountable secrets: superadmin-token-gtrj5Tokens: superadmin-token-gtrj5Events: &lt;none&gt;root@k8s-m:/data/dashboard# kubectl describe secret/superadmin-token-gtrj5 -n admin-nsName: superadmin-token-gtrj5Namespace: admin-nsLabels: &lt;none&gt;Annotations: kubernetes.io/service-account.name: superadmin kubernetes.io/service-account.uid: 339d914d-3ae8-440a-a590-4a304400ef17Type: kubernetes.io/service-account-tokenData====token: eyJhbGciOiJSUzI1NiIsImtpZCI6InZk--xxx # Token字段ca.crt: 1066 bytesnamespace: 8 bytes 界面自带CPU、内存监控图，只是数据是来源于Metrics Server, 需要部署MetricsServer才能展示，如果后期要部署kube-prometheus 就不需要单独部署Metrics Server，因为它己经集成了 metrics-server github 地址： https://github.com/kubernetes-sigs/metrics-server 在线清单文件部署1kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml 发现老是无限重启，说是就绪性探测和存活性探测有问题，我这里换换镜像以及添加2个参数好了其实根源https TLS问题1234567891011121314151617181920212223242526272829spec: hostNetwork: true serviceAccountName: metrics-server containers: - name: metrics-server image: bitnami/metrics-server:0.4.1 # 可以尝试更换官方镜像 #image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1 imagePullPolicy: IfNotPresent args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-insecure-tls # 禁用https - --kubelet-use-node-status-port - --kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname # 添加地址解析类型 livenessProbe: failureThreshold: 3 httpGet: path: /livez port: https scheme: HTTPS periodSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /readyz port: https scheme: HTTPS periodSeconds: 10 ports: 总结 dashboard只是提供web GUI服务，本身并做认证授权，只是代为拿着账号向kubernetes API进行认证 dashboard 运行于pod, pod代为向kubernetes API进行认证的账号也必须是ServiceAccount账号，不可以是User自然人的属性账号 clusterrolebinding只能绑定clusterrole, rolebinding 即可以绑role,也可以绑clusterrole,口决是： 小绑大降权 Metrics-server用于收集pod内部CPU、内存使用量资源，kube-prometheus项目内部集成此功能，所以部署与否看你需要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes ingress进阶","slug":"kubernetes-ingress","date":"2021-01-12T12:51:41.000Z","updated":"2021-01-14T10:04:01.904Z","comments":true,"path":"2021/01/12/kubernetes-ingress/","link":"","permalink":"http://www.digmyth.com/2021/01/12/kubernetes-ingress/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes rbac","slug":"kubernetes-rbac","date":"2021-01-11T12:51:41.000Z","updated":"2021-01-14T04:50:59.033Z","comments":true,"path":"2021/01/11/kubernetes-rbac/","link":"","permalink":"http://www.digmyth.com/2021/01/11/kubernetes-rbac/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes secret","slug":"kubernetes-secret","date":"2021-01-03T12:51:41.000Z","updated":"2021-01-14T08:47:17.288Z","comments":true,"path":"2021/01/03/kubernetes-secret/","link":"","permalink":"http://www.digmyth.com/2021/01/03/kubernetes-secret/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes configmap","slug":"kubernetes-configmap","date":"2021-01-02T12:51:41.000Z","updated":"2021-01-11T09:55:46.529Z","comments":true,"path":"2021/01/02/kubernetes-configmap/","link":"","permalink":"http://www.digmyth.com/2021/01/02/kubernetes-configmap/","excerpt":"","text":"创建configmap12# kubectl get cm/calico-config -n kube-system -o yaml# kubectl get cm/kube-flannel-cfg -n kube-system -o yaml 12345kubectl create ns cm-nskubectl create cm -hkubectl create cm filebeat-cfg -n cm-ns \\ --from-literal=redis_host=&quot;redis.default.svc.cluster.local&quot; \\ --from-literal=log_level=&quot;Info&quot; 1234567891011121314151617181920212223kubectl get cm/filebeat-cfg -n cm-ns -o yamlapiVersion: v1data: log_level: Info redis_host: redis.default.svc.cluster.localkind: ConfigMapmetadata: creationTimestamp: &quot;2021-01-11T05:58:23Z&quot; managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: &#123;&#125; f:log_level: &#123;&#125; f:redis_host: &#123;&#125; manager: kubectl-create operation: Update time: &quot;2021-01-11T05:58:23Z&quot; name: filebeat-cfg namespace: cm-ns resourceVersion: &quot;573737&quot; uid: b06442dc-90e6-446b-8a3c-f119f26226d4 启一个pod运用configmap1234567891011121314151617181920212223242526root@k8s-m:/data/configmap# cat filebeat-pod.yaml apiVersion: v1kind: Podmetadata: name: filebeat-pod namespace: cm-nsspec: containers: - name: filebeat image: ikubernetes/filebeat:5.6.5-alpine env: - name: REDIS_HOST valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: redis_host # 定义的键名 - name: LOG_LEVEL valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: log_level # 定义的键名root@k8s-m:/data/configmap# kubectl apply -f filebeat-pod.yaml#pod内部是能查到的定义变量的root@k8s-m:/data/configmap# kubectl exec -it pods/filebeat-pod -n cm-ns -- env | grep REDIS_HOSTREDIS_HOST=redis.default.svc.cluster.local 定义2个数据文件123456789101112131415161718root@k8s-m:/data/configmap/nginx# cat server1.conf server &#123; server_name www.first.com; listen 80; location / &#123; root &quot;/html/first&quot;; &#125;&#125;root@k8s-m:/data/configmap/nginx# cat server2.conf server &#123; server_name www.second.com; listen 80; location / &#123; root &quot;/html/second&quot;; &#125;&#125; 创建nginx-cfg1kubectl create cm nginx-cfg --from-file=server1.conf --from-file=server-sec.conf=server2.conf -n cm-ns pod使用nginx-cfg12345678910111213141516171819202122232425262728[root@k8smaster nginx]# cat nginx-pod.yaml apiVersion: v1kind: Podmetadata: name: nginx-pod namespace: cm-nsspec: containers: - name: nginx-t image: nginx volumeMounts: - name: config-vol mountPath: /etc/nginx/conf.d/ volumes: - name: config-vol configMap: name: nginx-cfg items: - key: server1.conf # 定义configmap时的key path: server-first.conf # pod内部的文件名 - key: server-sec.conf # 定义configmap时的key path: server-second.conf # pod内部的文件名[root@k8smaster nginx]# kubectl apply -f nginx-pod.yaml[root@k8smaster nginx]# kubectl exec -it pods/nginx-pod -n cm-ns -- ls /etc/nginx/conf.dserver-first.conf server-second.confkubectl edit cm/nginx-cfg -n cm-ns # 修改能在60s生效 总结configmap也是一种存储卷，特殊的存储卷，用于保存pod内程序变量配置或文件等","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-csi-nfs","slug":"kubernetes-csi-nfs","date":"2021-01-01T13:52:41.000Z","updated":"2021-03-17T10:03:34.575Z","comments":true,"path":"2021/01/01/kubernetes-csi-nfs/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-csi-nfs/","excerpt":"","text":"简介要实现kubernetes中动态创建pv必须先创建StorageClass，每一个StorageClass对应了一个provisioner，kubernetes中内置了很多provisioner，但是很难受的是没有内置的nfs provisioner，对于我们这种没有钱的玩家，nfs是实现后端存储最简单直接的方法，所以不知道为什么k8s不提供，但是没关系有方法实现，k8s允许提供外部的provisioner，而nfs可以使用nfs-client-provisioner 项目链接 https://github.com/kubernetes-retired/external-storage/tree/master/nfs-client 创建nfs server1234yum install nfs-utils -y[root@node02 deploy]# cat /etc/exports/csc-nfsdata/ *(rw,sync,no_root_squash)[root@node02 deploy]# 开放防火墙123456789101112vim /etc/nfs.conf[mountd]port=port-number# This adds the -p port-number option to the rpc.mount command line: rpc.mount -p port-number.firewall-cmd --permanent --add-service mountdfirewall-cmd --permanent --add-service rpc-bindfirewall-cmd --permanent --add-service nfsfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/tcpfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/udpfirewall-cmd --reload 配置NFS-Client provisioner,首先clone这个项目 git clone https://github.com/kubernetes-retired/external-storage.git 之后进入nfs-client/deploy/文件夹 可以看到有下面几个文件12345678910cd nfs-client/deploy/[root@nginx1-pro deploy]# ll总用量 28-rw-r--r-- 1 root root 225 9月 3 14:26 class.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 1030 9月 3 13:17 deployment-arm.yaml-rw-r--r-- 1 root root 1040 9月 3 13:30 deployment.yaml ## 需要改自己的nsdrwxr-xr-x 2 root root 214 9月 3 13:32 objects-rw-r--r-- 1 root root 1834 9月 3 13:19 rbac.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 241 9月 3 13:55 test-claim.yaml-rw-r--r-- 1 root root 399 9月 3 13:38 test-pod.yaml 首先你要做的是创建一个独立的命名空间 [root@k8smaster ~]# kubectl create ns csi-nfsnamespace/csi-nfs created 之后修改rbac.yaml和deployment.yaml的namespace为你创建的namespace 修改完成之后我们修改deployment.yaml123456789101112 env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.1.11 - name: NFS_PATH value: /data/kubernetesvolumes: - name: nfs-client-root nfs: server: 192.168.1.11 path: /data/kubernetes 执行rbac 和deploy yaml文件1234567891011121314151617181920212223242526[root@node02 deploy]# kubectl apply -f rbac.yamlserviceaccount/nfs-client-provisioner createdclusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner createdclusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner createdrole.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner createdrolebinding.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner created[root@node02 deploy]#[root@node02 deploy]# kubectl apply -f deployment.yamldeployment.apps/nfs-client-provisioner created[root@node02 deploy]# [root@node02 deploy]# kubectl apply -f class.yaml storageclass.storage.k8s.io/managed-nfs-storage created[root@node02 deploy]#查看cs [root@node02 deploy]# kubectl get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEmanaged-nfs-storage fuseim.pri/ifs Delete Immediate false 20s[root@node02 deploy]# cat class.yamlapiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: managed-nfs-storageprovisioner: fuseim.pri/ifs # or choose another name, must match deployment&apos;s env PROVISIONER_NAME&apos;parameters: archiveOnDelete: &quot;false&quot; provisioner就是刚才deployment中的PROVISIONER_NAME，还有一个比较关键的参数是archiveOnDelete，如果你想在删除了pvc之后还保留数据的话需要把这个参数改为true，不然你删除了pvc同时pv也会删除，然后数据也会丢失1234567kubectl apply class.yamlkubectl apply -f class.yaml很简单，只要pvc有annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot; pvc就能动态的创建出来 尝试创建123456789101112131415161718192021222324[root@node02 deploy]# kubectl apply -f test-claim.yaml [root@node02 deploy]# cat test-claim.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: test-claim annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi[root@node02 deploy]# 查看pv和pvc[root@node02 deploy]# kubectl get pv,pvcNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpersistentvolume/pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX Delete Bound default/test-claim managed-nfs-storage 29mNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpersistentvolumeclaim/test-claim Bound pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX managed-nfs-storage 29m[root@node02 deploy]# 尝试删除pvc，查看pv也会被删除，只不过pv中的数据不会被删除。需要注意的是删除pvc之前要把所使用的pod 删除掉 总结 参考","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes volumes","slug":"kubernetes-volumes","date":"2021-01-01T12:51:41.000Z","updated":"2021-01-11T09:55:36.757Z","comments":true,"path":"2021/01/01/kubernetes-volumes/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-volumes/","excerpt":"","text":"12# kubectl explain pods.spec.volumes# kubectl explain pods.spec.containers.volumeMounts hostPath 为node节点本地卷1234567891011121314151617181920212223root@k8s-m:/data/volumes# cat 01-volume-demo.yaml apiVersion: v1kind: Podmetadata: name: vol-demo namespace: vol labels: app: vol-demospec: nodeName: k8s-n containers: - name: vol-demo image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: webstore volumes: - name: webstore hostPath: path: /volumes/vol-demo type: DirectoryOrCreateroot@k8s-m:/data/volumes# kubectl apply -f 01-volume-demo.yaml empty 临时存储，pod重启数据丢失12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 02-emptydir.yaml apiVersion: v1kind: Podmetadata: name: vol-emptydir-pod namespace: volspec: volumes: - name: html emptyDir: &#123;&#125; containers: - name: nginx image: nginx:1.14-alpine volumeMounts: - name: html mountPath: /usr/share/nginx/html - name: createpage image: alpine volumeMounts: - name: html mountPath: /html command: [&quot;/bin/sh&quot;,&quot;-c&quot;] args: - while true;do echo $(hostname) $(date) &gt;&gt; /html/index.html; sleep 2; doneroot@k8s-m:/data/volumes# kubectl apply -f 02-emptydir.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESvol-emptydir-pod 2/2 Running 0 2m47s 172.16.234.11 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q http://172.16.234.11vol-emptydir-pod Mon Jan 11 03:30:24 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:26 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:28 UTC 2021 # 正如我们期望的那样，每2秒钟生成一条记录 nfs 存储卷12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 03-nfs-pod.yaml apiVersion: v1kind: Podmetadata: name: liveness-httpget-pod namespace: volspec: containers: - name: liveness-httpget-pod image: nginx imagePullPolicy: IfNotPresent ports: - name: http containerPort: 80 livenessProbe: httpGet: port: http path: /index.html initialDelaySeconds: 1 periodSeconds: 3 volumeMounts: - name: html mountPath: /usr/share/nginx/html/ volumes: - name: html nfs: path: /nginx_share server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 03-nfs-pod.yamlapt install nfs-kernel-serverroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESliveness-httpget-pod 1/1 Running 0 16m 172.16.234.13 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q 172.16.234.13test nginx for nfs vol # 成功 redis Pod挂载nfs类型的卷,实现重建pod数据不丢失1234567891011121314151617181920212223242526272829303132333435363738394041424344root@k8s-m:/data/volumes# cat 04-nfs-redis.yaml apiVersion: v1kind: Podmetadata: name: redis namespace: vol labels: app: redisspec: containers: - name: redis image: redis:5.0.4 ports: - name: redis-port containerPort: 6379 volumeMounts: - name: data mountPath: /data volumes: - name: data nfs: path: /vols/v6 server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESredis 1/1 Running 0 12m 172.16.234.12 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; set name wxqOK127.0.0.1:6379&gt; set age 25OK127.0.0.1:6379&gt; saveOKroot@k8s-m:/data/volumes# kubectl delete -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; get name&quot;wxq&quot; # 挂载卷后数据仍然存在 利用 nfs创建一个pv123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 01-pv-nfs.yaml apiVersion: v1kind: PersistentVolumemetadata: name: test-vol labels: storages: nfsspec: capacity: storage: 2Gi volumeMode: Filesystem accessModes: - ReadWriteMany - ReadWriteOnce - ReadOnlyMany persistentVolumeReclaimPolicy: Retain nfs: server: 192.168.1.10 path: /vols/v7root@k8s-m:/data/volumes/pvc# kubectl apply -f 01-pv-nfs.yaml 创建pvc123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 02-pvc-nfs-yaml apiVersion: v1kind: PersistentVolumeClaimmetadata: name: test-pvc namespace: volspec: accessModes: - ReadWriteOnce volumeMode: Filesystem resources: requests: storage: 1Gi#storageClassName: slow# selector:# matchLabels:# release: &quot;stable&quot;# matchExpressions:# - &#123;key: environment, operator: In, values: [dev]&#125;root@k8s-m:/data/volumes/pvc# kubectl apply -f 02-pvc-nfs-yaml 创建一个pod申请pvc12345678910111213141516171819202122232425262728root@k8s-m:/data/volumes/pvc# cat 03-pod-demo.yaml apiVersion: v1kind: Podmetadata: name: pvc-pod-demo namespace: vol labels: app: pvc-podspec: nodeName: k8s-n containers: - name: pvc-pod image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: testpvc volumes: - name: testpvc persistentVolumeClaim: claimName: test-pvcroot@k8s-m:/data/volumes/pvc# kubectl apply -f 03-pod-demo.yamlroot@k8s-m:/data# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEtest-vol 2Gi RWO,ROX,RWX Retain Bound vol/test-pvc 11mroot@k8s-m:/data# kubectl get pvc -n volNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEtest-pvc Bound test-vol 2Gi RWO,ROX,RWX 6m47s 总结无它，唯手熟而，理解运用更重要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Ubuntu20.04 Run k8s","slug":"Kubernetes-ubuntu20.04","date":"2020-12-30T12:51:41.000Z","updated":"2021-01-11T09:55:23.613Z","comments":true,"path":"2020/12/30/Kubernetes-ubuntu20.04/","link":"","permalink":"http://www.digmyth.com/2020/12/30/Kubernetes-ubuntu20.04/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"ELF日志系统实践","slug":"log_elk_实践","date":"2020-12-15T02:12:36.000Z","updated":"2021-04-19T06:15:27.618Z","comments":true,"path":"2020/12/15/log_elk_实践/","link":"","permalink":"http://www.digmyth.com/2020/12/15/log_elk_实践/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb cluster recovery","slug":"mariadb-cluster-recovery","date":"2020-07-10T01:41:54.000Z","updated":"2020-07-06T10:59:33.024Z","comments":true,"path":"2020/07/10/mariadb-cluster-recovery/","link":"","permalink":"http://www.digmyth.com/2020/07/10/mariadb-cluster-recovery/","excerpt":"","text":"mariadb cluster recovery列几个集群检查命令1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+----------------------------------------------+| Variable_name | Value |+--------------------------+----------------------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306,10.0.0.53:3306 |+--------------------------+----------------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 3 |+--------------------+-------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_state_uuid&apos;;+--------------------------+-----------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------+| wsrep_cluster_state_uuid | 345098abd2-291a-9893-acbd3-30923abcdef9 |+--------------------------+-----------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_local_state_comment&apos;;+---------------------------+--------+| Variable_name | Value |+---------------------------+--------+| wsrep_local_state_comment | Synced |+---------------------------+--------+1 row in set (0.01 sec) 场景一 只是很简单的某节点掉线，重启让其重新加入集群即可1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+-------------------------------+| Variable_name | Value |+--------------------------+-------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306 |+--------------------------+-------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 2 |+--------------------+-------+1 row in set (0.01 sec) 1# systemctl restart mariadb 场景二 唯一有一个幸存节点1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 1 |+--------------------+-------+1 row in set (0.01 sec) 幸存节点刚好优雅关闭正确提交了数据，状态为Primary1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_status&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_cluster_status | Primary |+----------------------+---------+1 row in set (0.01 sec) 哪果是non-Primary状态还要单独恢复幸存节点上执行1MariaDB [(none)]&gt; set global wsrep_provider_options=&apos;pc.bootstrap=YES&apos;; 可是 我们一般不这样做，常规做法是直接指定这个幸存节点的主节点，让其它节点加入集群123# systemctl stop mariadb# galera_new_cluster# systemctl restart mariadb 场景三集群崩溃完全不可用,这也分为2种情况，基于最高seqno值恢复状态一是没有集群UUID, seqno: -1,数据定义语言DDL出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 00000000-0000-0000-0000-000000000000seqno: -1safe_to_bootstrap: 0 状态2是有集群UUID，seqno: -1，事务处理数据时出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: -1safe_to_bootstrap: 0 状态3是有集群UUID，seqno值最高正值123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: 31929safe_to_bootstrap: 1 此时我们认为状态3是OK的，需要修改状态１、２数据库配置文件去掉IP地址配置项1wsrep_cluster_address=&quot;gcomm://&quot; 这样节点就能正常启动了1systemctl restart mariadb 最后再修改配置文件后把这2个节点正常加入集群就好了1wsrep_cluster_address=&quot;gcomm://10.8.8.53,10.8.8.54,10.8.8.55&quot; 最后是基于Last Committed恢复先修改配置文件让服务启起来，入库查看wsrep_last_committed123#systemctl stop mariadb 编辑配置文件去掉IP地址wsrep_cluster_address=&quot;gcomm://&quot;#systemctl start mariadb 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_last_committed&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_last_committed | 319589 |+----------------------+---------+1 row in set (0.01 sec) 找到节点最大值认为就是主节点，然后在这个主节点上1# galera_new_cluster 其它节点加入集群即可","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"openstack-HA","slug":"openstack-HA","date":"2020-03-14T01:41:54.000Z","updated":"2020-03-29T03:13:34.557Z","comments":true,"path":"2020/03/14/openstack-HA/","link":"","permalink":"http://www.digmyth.com/2020/03/14/openstack-HA/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"calico-原理剖析","slug":"calico-原理剖析","date":"2020-03-07T01:42:54.000Z","updated":"2021-01-07T06:05:08.285Z","comments":true,"path":"2020/03/07/calico-原理剖析/","link":"","permalink":"http://www.digmyth.com/2020/03/07/calico-原理剖析/","excerpt":"","text":"arp之calico本质参考戳穿 Calico 的谎言 什么是代理ARP？当 ARP 请求目标跨网段时，网关设备收到此ARP请求会用自己的MAC地址返回给请求者,这就是代理arp. 实现MAC地址代理,最终使得主机能够通信. 知识点： 跨网段通信时会发广播得到网关MAC 之后发出的网络数据包目标MAC是网关的MAC 网关的IP地址不会出现在任何网络包头中 因此，没有人在乎网关地址是否真的存在，只要设备能响应ARP就行了 我这里用了2台linux主机实验，主机A：192.168.1.109 主机B:192.168.1.110主机A：1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.10/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-A ~]#ip netns exec ns0 route -n # 命名空间里的路由Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.10 dev veth0ip route add 10.10.10.20 via 192.168.1.110 dev eth0 主机B:1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.20/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-B ~]# ip netns exec ns0 route -n Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.20 dev veth0ip route add 10.10.10.10 via 192.168.1.109 dev eth0 Linux主机打开路由转发1net.ipv4.ip_forward = 1 网卡开启代理ARP功能1echo 1 &gt; /proc/sys/net/ipv4/conf/veth0/proxy_arp 主机A上网络通信测试12345[root@testarp-A ~]# ip netns exec ns0 ping 10.10.10.20PING 10.10.10.20 (10.10.10.20) 56(84) bytes of data.64 bytes from 10.10.10.20: icmp_seq=1 ttl=62 time=0.951 ms64 bytes from 10.10.10.20: icmp_seq=2 ttl=62 time=0.484 ms64 bytes from 10.10.10.20: icmp_seq=3 ttl=62 time=0.556 ms 1234567[root@testarp-A ~]# tcpdump -nni veth0tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on veth0, link-type EN10MB (Ethernet), capture size 262144 bytes08:18:15.999200 IP 10.10.10.10 &gt; 10.10.10.20: ICMP echo request, id 1486, seq 1, length 6408:18:16.000288 IP 10.10.10.20 &gt; 10.10.10.10: ICMP echo reply, id 1486, seq 1, length 6408:18:21.008712 ARP, Request who-has 10.10.10.20 tell 10.10.10.10, length 2808:18:21.008757 ARP, Reply 10.10.10.20 is-at ee:46:7c:2e:d9:ba, length 28 注意： 这里veth0充当路由角色代理ARP, who is 10.10.10.20 ,返回自己MACee:46:7c:2e:d9:ba来响应. 转发过程分析：1 广播寻找目标IP对应MAC是谁？2 根据路由规则所有数据包都会转发到169.254.1.1，寻找169.254.1.1MAC是谁？2 vet0开启代理ARP进行ARP拦截，返回自己MACee:46:7c:2e:d9:ba给以响应3 封包目标IP为10.10.10.20，MAC为ee:46:7c:2e:d9:ba,发出这样的数据包4 主机A查询本地路由，匹配10.10.10.20 via 192.168.1.110 dev eth0 会把包发送给192.168.1.1105 主机B收到10.10.10.20的包时，匹配本地路由10.10.10.20 dev veth0 scope link,数据包发送到veth0上6 完成通信，回程类似","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"corosync/PacemakerHA","slug":"linux-pacemaker-corosync","date":"2020-02-15T01:42:54.000Z","updated":"2020-03-29T01:27:23.789Z","comments":true,"path":"2020/02/15/linux-pacemaker-corosync/","link":"","permalink":"http://www.digmyth.com/2020/02/15/linux-pacemaker-corosync/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"ingress-nginx 基础","slug":"ingress-nginx","date":"2020-01-20T12:51:41.000Z","updated":"2021-01-14T07:57:51.296Z","comments":true,"path":"2020/01/20/ingress-nginx/","link":"","permalink":"http://www.digmyth.com/2020/01/20/ingress-nginx/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"openvswit_vlan流表","slug":"openvswit_vlan流表","date":"2020-01-01T01:41:54.000Z","updated":"2020-01-13T03:44:37.630Z","comments":true,"path":"2020/01/01/openvswit_vlan流表/","link":"","permalink":"http://www.digmyth.com/2020/01/01/openvswit_vlan流表/","excerpt":"","text":"如果计算节点关闭防火墙，配置文件如下，那么就不会产生bridge桥及相应iptables规则 ml2部份配置文件如下123[securitygroup]#enable_security_group = True#firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver linuxBridge桥接口就会为空12kvm-app-6:~ # brctl show # 为空bridge name bridge id STP enabled interfaces 查看某虚机接口信息123456789kvm-app-6:~ # virsh list Id Name State---------------------------------------------------- 1 instance-00000793 runningkvm-app-6:~ # virsh domiflist instance-00000793Interface Type Source Model MAC-------------------------------------------------------tap790c394d-70 bridge br-int virtio fa:16:3e:1f:11:99 ovs-vsctl show1234567891011121314151617181920212223242526272829303132kvm-app-6:~ # ovs-vsctl show8ba4a76e-8c27-4807-a65a-f05b22a3ef76 Manager &quot;ptcp:6640:127.0.0.1&quot; is_connected: true Bridge br-int Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port int-br-ex Interface int-br-ex type: patch options: &#123;peer=phy-br-ex&#125; Port &quot;tap790c394d-70&quot; tag: 1 Interface &quot;tap790c394d-70&quot; Port br-int Interface br-int type: internal Bridge br-ex Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port phy-br-ex Interface phy-br-ex type: patch options: &#123;peer=int-br-ex&#125; Port br-ex Interface br-ex type: internal Port &quot;bond0&quot; Interface &quot;bond0&quot; ovs_version: &quot;2.7.6&quot; 查看br-int桥接口信息ovs-ofctl show br-int12345678910111213141516171819kvm-app-6:~ # ovs-ofctl show br-intOFPT_FEATURES_REPLY (xid=0x2): dpid:00002a77dbc2860an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(int-br-ex): addr:3e:38:8a:6e:c1:de config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(tap790c394d-70): addr:fe:16:3e:1f:11:99 config: 0 state: 0 current: 10MB-FD COPPER speed: 10 Mbps now, 0 Mbps max LOCAL(br-int): addr:2a:77:db:c2:86:0a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-int流表规则ovs-ofctl dump-flows br-int12345678910111213kvm-app-6:~ # ovs-ofctl dump-flows br-intNXST_FLOW reply (xid=0x4): cookie=0x8372d932b48e5321, duration=5395.262s, table=0, n_packets=0, n_bytes=0, idle_age=5395, priority=10,icmp6,in_port=2,icmp_type=136 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=5395.261s, table=0, n_packets=505, n_bytes=21210, idle_age=7, priority=10,arp,in_port=2 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=7776.549s, table=0, n_packets=366813, n_bytes=36441400, idle_age=5395, priority=2,in_port=1 actions=drop cookie=0x8372d932b48e5321, duration=5395.264s, table=0, n_packets=817, n_bytes=74814, idle_age=4, priority=9,in_port=2 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=5395.379s, table=0, n_packets=840145, n_bytes=83511042, idle_age=0, priority=3,in_port=1,dl_vlan=11 actions=mod_vlan_vid:1,NORMAL cookie=0x8372d932b48e5321, duration=7776.964s, table=0, n_packets=4, n_bytes=320, idle_age=7776, priority=0 actions=NORMAL cookie=0x8372d932b48e5321, duration=7776.965s, table=23, n_packets=0, n_bytes=0, idle_age=7776, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.263s, table=24, n_packets=0, n_bytes=0, idle_age=5395, priority=2,icmp6,in_port=2,icmp_type=136,nd_target=fe80::f816:3eff:fe1f:1199 actions=NORMAL cookie=0x8372d932b48e5321, duration=5395.262s, table=24, n_packets=502, n_bytes=21084, idle_age=7, priority=2,arp,in_port=2,arp_spa=10.8.25.220 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=7776.964s, table=24, n_packets=3, n_bytes=126, idle_age=5357, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.265s, table=25, n_packets=1319, n_bytes=95898, idle_age=4, priority=2,in_port=2,dl_src=fa:16:3e:1f:11:99 actions=NORMAL 查看br-ex交换机接口信息ovs-ofctl show br-ex123456789101112131415161718 kvm-app-6:~ # ovs-ofctl show br-exOFPT_FEATURES_REPLY (xid=0x2): dpid:0000aa081303781an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(bond0): addr:82:01:9b:1b:28:c9 config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(phy-br-ex): addr:c2:06:bb:33:da:7a config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max LOCAL(br-ex): addr:aa:08:13:03:78:1a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-ex流表信息12345kvm-app-6:~ # ovs-ofctl dump-flows br-exNXST_FLOW reply (xid=0x4): cookie=0x90f6220dc9413e6e, duration=5441.562s, table=0, n_packets=1328, n_bytes=96564, idle_age=3, priority=4,in_port=2,dl_vlan=1 actions=mod_vlan_vid:11,NORMAL cookie=0x90f6220dc9413e6e, duration=7822.731s, table=0, n_packets=0, n_bytes=0, idle_age=7822, priority=2,in_port=2 actions=drop cookie=0x90f6220dc9413e6e, duration=7822.733s, table=0, n_packets=1213423, n_bytes=120613616, idle_age=0, priority=0 actions=NORMAL","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"nmap工具详解","slug":"linux-nmap详解","date":"2019-12-15T01:42:54.000Z","updated":"2019-01-15T09:13:55.828Z","comments":true,"path":"2019/12/15/linux-nmap详解/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-nmap详解/","excerpt":"","text":"1.1 nmap基础在运维过程中有时需要主机存活性探测，一般是namp、tcpdump命令结合使用，相关工具包安装1[root@ ]# yum install nmap tcpdump 列出几种nmap命令语法123-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans-sU: UDP Scan-sP: ping Scan 下面我们在2台主机间探测，一主机发nmap探测，另一主机tcpdump抓包分析 在A主机正常发一个ping包看看正常情况下的icmp包 ping -c 1 10.17.200.36 在B主机抓包发现icmp包有去有回12345[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:08:38.392418 IP 10.17.200.14 &gt; 10.17.200.36: ICMP echo request, id 5220, seq 1, length 6416:08:43.400811 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 可在一台主机临时禁用icmp协议,再用ping将探测不到这台主机1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 1.2 nmap ping探测我们开始nmap ping探测， -n表示不进行DNS解析123456[root@ ]# nmap -n -sP 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:12 CSTNmap scan report for 10.17.200.36Host is up (0.00030s latency).MAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.05 seconds 在B主机探测发现只收到了对方发的请求包，并未回应，但是还是认为这台主机是存活的，这样提高了探测效率1234[root@localhost roles]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:12:28.972321 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 46 1.3 nmapSYN探测我们开始nmap TCP的SYN探测， -n表示不进行DNS解析1234567891011[root@ ]# nmap -n -PE 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:20 CSTNmap scan report for 10.17.200.36Host is up (0.00014s latency).Not shown: 998 closed portsPORT STATE SERVICE22/tcp open ssh445/tcp filtered microsoft-dsMAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 1.33 seconds 在B主机探测发现，A主机对B主机的各服务都发送了TCP SYN包来进行探测123456789101112[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:20:07.124327 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 4616:20:07.148867 IP 10.17.200.14.40911 &gt; 10.17.200.36.rtsp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148882 IP 10.17.200.14.40911 &gt; 10.17.200.36.smtp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148906 IP 10.17.200.14.40911 &gt; 10.17.200.36.domain: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148943 IP 10.17.200.14.40911 &gt; 10.17.200.36.https: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.mysql: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.ssh: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 0信息太多，略过...16:20:12.152833 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 1.4 arping另外补充一下，arping -D可有效检测IP地址冲突问题,如果命令echo $?返回值为0则表示地址冲突，1则表示不冲突.12345[root@ ]# arping -D -c 2 -I ens192 10.17.200.36ARPING 10.17.200.36 from 0.0.0.0 ens192Unicast reply from 10.17.200.36 [00:50:56:B9:21:18] 0.887msSent 1 probes (1 broadcast(s))Received 1 response(s) 1.5 总结 nmap -sP 可进行ping检测 nmap -PE 可进行tcp SYN检测 nmap -n -sP -PE 可进行ping与SYN结合检测,以免漏扫 arping -D 可进行地址冲突检测 &lt;完结&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux disk","slug":"linux-disk","date":"2019-12-15T01:42:54.000Z","updated":"2020-03-24T13:52:16.618Z","comments":true,"path":"2019/12/15/linux-disk/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-disk/","excerpt":"","text":"Ubuntu系统分区信息查看：fdisk /dev/vda1234567891011Command (m for help): pDisk /dev/vda: 60 GiB, 64424509440 bytes, 125829120 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x630fdccbDevice Boot Start End Sectors Size Id Type/dev/vda1 * 2048 1953791 1951744 953M 83 Linux/dev/vda2 1953792 125829119 123875328 59.1G 83 Linux Sart、End、Sectors单位都是扇区， 1扇区=512bytes，那么2扇区就是1KB 通常称为一个block块，那么就有了2sectors=1KB=1 block,可以通过blockdev --getsz /dev/vda得到整块盘扇区数像上面1953791-2048+1=1951744扇,953M=1951744/2/1024KB CentOS差别可能就是 Blocks数显示，上面说了1Block=1KB12345678910Disk /dev/vda: 64.4 GB, 64424509440 bytes, 125829120 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000afe6d Device Boot Start End Blocks Id System/dev/vda1 * 2048 4196351 2097152 83 Linux/dev/vda2 4196352 125829119 60816384 83 Linux 我来验证一下14196351-2048+1得到扇区数，(4196351-2048+1)/2=2097152刚好等于Blocks数，也就是2097152KB=2048MB=2GB 我们再来学习下dd命令1234bs参数代表逻辑块大小，默认单位是扇区，bs=512代表一个扇区，也就是512bytescount参数代表逻辑块的个数或扇区数，那么处理的存储大小就是bs*countskip 表示跳过if 设备的扇区数开始读数据,skip=200代表200个扇区，也就是100KBseek表示跳过of设备的扇区数开始写数据,seek=400代表400个扇区，也就是200KB 那么学了这些有什么用呢？一个裸盘有硬件raid卡信息是不能正常被格式化的，这个raid信息会存在硬盘的最后63个扇区的地方，我们可以用dd复盖掉12snumber=$(($(blockdev --getsz /dev/sda)-63))dd if=/dev/zero of=/dev/sda bs=512 count=63 seek=$snumber 总结： 一个扇区512bytes , 1Block=1KB=2扇区 dd参数的skip针对if设备，seek针对of设备（跳过多少扇区再处理）","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s_pod资源清单学习1","slug":"k8s_pod1","date":"2019-12-01T12:51:41.000Z","updated":"2020-01-19T09:37:36.257Z","comments":true,"path":"2019/12/01/k8s_pod1/","link":"","permalink":"http://www.digmyth.com/2019/12/01/k8s_pod1/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"udev定义network","slug":"linux-udev","date":"2019-11-15T01:42:54.000Z","updated":"2020-03-29T02:10:23.637Z","comments":true,"path":"2019/11/15/linux-udev/","link":"","permalink":"http://www.digmyth.com/2019/11/15/linux-udev/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"helm部署efk日志系统","slug":"log_helm-efk","date":"2019-10-15T02:42:36.000Z","updated":"2021-03-17T09:56:58.567Z","comments":true,"path":"2019/10/15/log_helm-efk/","link":"","permalink":"http://www.digmyth.com/2019/10/15/log_helm-efk/","excerpt":"","text":"efk 日志系统3大组件elasticsearchfluent-bitkibana helm部署efk日志系统heml.sh 官网https://artifacthub.io/packages/helm/bitnami/elasticsearch 搜索elasticsearch Charts 1234567[root@k8smaster efk]# helm repo add bitnami https://charts.bitnami.com/bitnami&quot;bitnami&quot; has been added to your repositories[root@k8smaster efk]# helm repo listNAME URL loki https://grafana.github.io/loki/chartsstable https://charts.helm.sh/stable bitnami https://charts.bitnami.com/bitnami 12345[root@k8smaster efk]# helm search repo elasticNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ... helm show values bitnami/elasticsearch &gt; es_values.yaml 有人说k8s 中的APP JDK 最好11以上， data.resources +1G = data.heapsize 这个预留一个G给进程使用，其它才给JVM使用性能更佳12345678910111213141516171819202122232425262728293031[root@k8smaster efk]# helm install myes bitnami/elasticsearch -f es_values.yaml -n logsNAME: myesLAST DEPLOYED: Tue Mar 16 10:34:09 2021NAMESPACE: logsSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:------------------------------------------------------------------------------- WARNING Elasticsearch requires some changes in the kernel of the host machine to work as expected. If those values are not set in the underlying operating system, the ES containers fail to boot with ERROR messages. More information about these requirements can be found in the links below: https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html This chart uses a privileged initContainer to change those settings in the Kernel by running: sysctl -w vm.max_map_count=262144 &amp;&amp; sysctl -w fs.file-max=65536** Please be patient while the chart is being deployed ** Elasticsearch can be accessed within the cluster on port 9200 at myes-elasticsearch-coordinating-only.logs.svc.cluster.local To access from outside the cluster execute the following commands: kubectl port-forward --namespace logs svc/myes-elasticsearch-coordinating-only 9200:9200 &amp; curl http://127.0.0.1:9200/ 部署日志采集agent12345678910111213141516[root@k8smaster efk]# helm search repo elasNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ...stable/elastabot 1.2.1 1.1.0 DEPRECATED A Helm chart for Elastabot - a Slack...stable/elastalert 1.5.1 0.2.4 DEPRECATED ElastAlert is a simple framework for...stable/elastic-stack 2.0.6 6 DEPRECATED A Helm chart for ELK stable/elasticsearch 1.32.5 6.8.6 DEPRECATED Flexible and powerful open source, d...stable/elasticsearch-curator 2.2.3 5.7.6 DEPRECATED A Helm chart for Elasticsearch Curator stable/elasticsearch-exporter 3.7.1 1.1.0 DEPRECATED Elasticsearch stats exporter for Pro...stable/fluentd-elasticsearch 2.0.7 2.3.2 DEPRECATED! - A Fluentd Helm chart for Kubernet...bitnami/grafana 5.2.4 7.4.3 Grafana is an open source, feature rich metrics...bitnami/kibana 7.2.3 7.10.2 Kibana is an open source, browser based analyti...stable/apm-server 2.1.7 7.0.0 DEPRECATED The server receives data from the El...stable/dmarc2logstash 1.3.1 1.0.3 DEPRECATED Provides a POP3-polled DMARC XML rep...stable/fluentd 2.5.3 v2.4.0 DEPRECATED A Fluentd Elasticsearch Helm chart f...stable/kibana 3.2.8 6.7.0 DEPRECATED - Kibana is an open source data visu... 1234567891011121314151617181920[root@k8smaster efk]# helm show values bitnami/kibana &gt; kibana_values.yaml[root@k8smaster efk]# vim kibana_values.yaml[root@k8smaster efk]# helm install kibanaui bitnami/kibana -f kibana_values.yaml -n logsNAME: kibanauiLAST DEPLOYED: Tue Mar 16 15:21:01 2021NAMESPACE: logsSTATUS: deployedREVISION: 1NOTES:1. Get the application URL by running these commands: Get the Kibana URL and associate Kibana hostname to your cluster external IP: export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters echo &quot;Kibana URL: http://kibana.local/&quot; echo &quot;$CLUSTER_IP kibana.local&quot; | sudo tee -a /etc/hostsWARNING: Kibana is externally accessible from the cluster but the dashboard does not contain authentication mechanisms. Make sure you follow the authentication guidelines in your Elastic stack.+info https://www.elastic.co/guide/en/elastic-stack-overview/current/setting-up-authentication.htmlWARNING: Rolling tag detected (bitnami/bitnami-shell:10), please note that it is strongly recommended to avoid using rolling tags in a production environment.+info https://docs.bitnami.com/containers/how-to/understand-rolling-tags-containers/ 123456helm repo updatehelm repo list helm search repo fluent-bithelm show values fluent/fluent-bit &gt; fluent-bit-values.yamlhelm install -f fluent-bit-values.yaml -n logshelm list -n logs 总结 helm安装好处是一键安装，坏处是自定义容器内yml配置文件难度极大，如果helm charts提供的原始配置文件里没有(此处不是说修改values.yml值文件),需要重新制作charts部署","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch API","slug":"log_elasticsearch_api","date":"2019-09-15T02:22:36.000Z","updated":"2021-04-19T06:13:15.498Z","comments":true,"path":"2019/09/15/log_elasticsearch_api/","link":"","permalink":"http://www.digmyth.com/2019/09/15/log_elasticsearch_api/","excerpt":"","text":"知识点搜索引擎包括： 索引组件、搜索组件索引组件： 面向数据存储和索引构建搜索组件： 面向用户提供搜索功能以及将用户提供的搜索请求转换成可用的查询语句并通过索引完成查询过程或搜索过程其中一种著名的索引叫做倒排索引 获取数据的组件：工作在pull拉取数据模式， solr/Nutch/grub/ApetureES: 索引index、类型type、文档document、映射mapping 每个索引的分片数量： 5 每个分片也应该有副本： 1用户接口： 9200/tcp集群接口： 9300/tcp 数据类型： string、number、boolean、date、 ES中搜索的数据广义上可被分为2类：12exact: 精确查找，指在原始数据上精确查找full-text: 全文查找，判断文档在多大程度上匹配查询请求，用于评估文档与用户查询请求的相似度 为了完成full-text搜索，ES必须先分析文本并创建出倒排索引，倒排索引中的数据还需要进行“正规化”为标准格式：如单词复数改为单数，助词去掉，这样的分词加正规化的过程即为分析，分析是需要分析器analyzer工作的分析器由3个组件构成： 字符过滤器、分词器、分词过滤器ES内置的分析器有:1234standard analyzer (default analyzer)simple analyzerwhitespace analyzerlanguage analyzer 分析器不仅在创建索引时用到，在构建查询时也会用到并且前后二者的分析器必须一致，否则无法解析 API调用1234567[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/indicesgreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 1628 579.3kb 344kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 14 4.3mb 2.1mbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 3 0 32.9kb 16.4kbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 4 0 48.7kb 27.3kb 12[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/health1618472240 07:37:20 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 123456789101112131415161718[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/health?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;status&quot; : &quot;green&quot;, &quot;timed_out&quot; : false, &quot;number_of_nodes&quot; : 3, &quot;number_of_data_nodes&quot; : 3, &quot;active_primary_shards&quot; : 7, &quot;active_shards&quot; : 14, &quot;relocating_shards&quot; : 0, &quot;initializing_shards&quot; : 0, &quot;unassigned_shards&quot; : 0, &quot;delayed_unassigned_shards&quot; : 0, &quot;number_of_pending_tasks&quot; : 0, &quot;number_of_in_flight_fetch&quot; : 0, &quot;task_max_waiting_in_queue_millis&quot; : 0, &quot;active_shards_percent_as_number&quot; : 100.0&#125; 123456[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/master_node?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;cluster_uuid&quot; : &quot;exgsV0fDSCu826nXkN9w8A&quot;, &quot;master_node&quot; : &quot;WIm1WA75QhSegglRpCn4-Q&quot;&#125; 123[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/nodes?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/stats?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_nodes/stats?pretty 1234[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/pending_tasks?pretty&#123; &quot;tasks&quot; : [ ]&#125; 数据提交1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/1?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 0, &quot;_primary_term&quot; : 1&#125; 1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/2?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, # 索引，没有会自动创建 &quot;_type&quot; : &quot;class1&quot;, # 类型，没有会自动创建 &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 2, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 1&#125; 获取文档数据123456789101112[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/1&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:0,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;2&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:1,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125; 更新文档可以PUT方法覆盖原有文档，也可以局部更新用POST方法调用_update接口1234567891011121314151617181920212223242526272829303132[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X POST http://192.168.1.40:9200/students/class1/2/_update?pretty -d &apos;&#123;&quot;doc&quot;: &#123;&quot;last_name&quot;: &quot;Huang2_222&quot;&#125;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;result&quot; : &quot;noop&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 0, &quot;successful&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2?pretty # 查看更新&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1, &quot;found&quot; : true, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2_222&quot; &#125;&#125; 删除文档1[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/class1/2 查看索引123456789[root@node01 ~]# curl -X GET http://192.168.1.40:9200/_cat/indices?vhealth status index uuid pri rep docs.count docs.deleted store.size pri.store.sizegreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 431 1.3mb 630.3kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open students em-XgwfsSc--wFnCcLC7jg 1 1 2 0 21.5kb 8.6kbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 4 0 43.7kb 21.8kbgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 4 4.2mb 2.1mbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 6 0 75.8kb 40.9kb 删除索引12[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/&#123;&quot;acknowledged&quot;:true&#125; 以上是基于query DSL language,用于实现诸多类型查询向ES发起查询请求的方式有2种：1 通过RestFul request API查询，也称为query string2 通过发送REST request body 进行查询 query string方式查询12345678910111213141516171819202122232425262728293031323334353637383940[root@node01 ~]# curl http://192.168.1.40:9200/students/_search?pretty&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 2, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2&quot; &#125; &#125; ] &#125;&#125; REST request body 方式查询123[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X GET http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&apos; 多索引，多类型查询,一般格式为：http://IP:port/&lt;indices1&gt;,&lt;indices2&gt;/&lt;type1&gt;,&lt;type2&gt;/_search?pretty12curl http://192.168.1.40:9200/_search?pretty # 所有索引查询curl http://192.168.1.40:9200/students1,students2/_search?pretty mappping/analysisES对每一个文档会取得其所有域的所有值，生成一个名为”_all”的域，执行查询时，如果在query_string未指定查询的域，则在_all域上执行查询操作 不指定域查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 指定域精确查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=first_name:&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 查看指定类型的mapping123456789101112131415161718192021222324252627[root@node01 ~]# curl http://192.168.1.40:9200/students/_mapping?pretty&#123; &quot;students&quot; : &#123; &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;first_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;last_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125; &#125; &#125; &#125;&#125; request Body 请求查询 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;term&quot;: &#123;&quot;first_name&quot;:&quot;jing&quot;&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;terms&quot;: &#123;&quot;first_name&quot;:[&quot;jing&quot;,&quot;xx&quot;,&quot;oo&quot;]&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 总结慢慢实践。。。","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch基本使用","slug":"log_elasticsearch-基本使用","date":"2019-08-15T02:42:36.000Z","updated":"2021-04-15T07:13:28.047Z","comments":true,"path":"2019/08/15/log_elasticsearch-基本使用/","link":"","permalink":"http://www.digmyth.com/2019/08/15/log_elasticsearch-基本使用/","excerpt":"","text":"介绍官网： https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-elastic-stack.html elasticsearch: 借住于LuceneAPI 重新封装实现的搜索组件，增加更强大的能力，将Lucene提供的索引组建成shar形式，分片后分布于各节点上从而构建成分布式时时查询组件。 是一个基Lucene实现的开源、分布式、RestFul的全文本搜索引擎，此外，它还是一个分布式实时文档存储，其中每个文档的每个field均是被索引的数据，且可被搜索，也是一个带实时分析功能的分布式搜索引擎，能够扩展至数以百计的节点实时处理PB级的数据 概念 文档只有被索引后才能被索引，这个文档就放在一个叫索引的文件当中。 在Lucene中每一项相当于MYsql表中一行数据，多个项在一起就组成了索引，但是每个索引会尽量存储同类型数据 大索引的多个片分shard散到多个物理节点上去，可成完成读写负载均衡，分片节点挂了所有数据将丢失，但是分布式不应该这样，它还要通过主从副本实现分布解决单点故障问题。 写操作会自动分配到主分片完成写操作，副本分片只有读权限 索引： 文档的集合，类似于表，索引名只能是小写字母 类型(type): 类型是索引内部的逻辑分区，其意义完全取决于用户需求，一个索引内部可以定义一个或多个类型 拥有相同域的文档的预定义，类似于表的表结构，文档是schema free模式自由, 建议一个索引中只存一个类型的文档数据 文档： 是Lucene搜索和索引的原子单位，包含了一个或多个域，是域容器，基于json格式，每个域的组成部份：一个名字和一个或多个值，拥有多个值的域通常称为多值域 映射 (maping): 定义如何切词，指明一个文档中的数据在被存储之前的分析过程该如何执行，原始内容存储为文档之前事先需要分析，映射就 是定义此分析机制该如何实现 例如; 切词、过滤掉某些词、域中内容排序 elasticsearch集群组件： 每一个物理节点必属于且只属于某ES集群 NODE： 运行了单个ES实例的主机即为节点，用于存储数据部份分片、参与集群索引及搜索操作、节点标识靠节点名（默认会生成字串，可自定义） shard分片: 把一个Luence大索引切分为底层物理数据，完成分割存储机制，或说将索引切割成为物理存储组件，但每一个shard都是一个独立且完整的索引，创建索引时，ES默认创建5个副本 shard有2种类型： primary shard/Replicas shard Primary shard 如何切割定义好后不可更改，但是副本数是可以动态更改的 ES工作过程： 通过多播(default)或单播方式工作在9300/TCP查找同一集群的其它节点，并与之建立通信 集群中的所有节点会选举一个主节点负责管理整个集群状态，以及在集群范围内决定各shard分布方式，用户角度没有主从节点，各节点都可接收请求 安装elasticsearch强制要求工作在普通用户模式下，不能root 直接./bin/elasticsearch启动服务，好像rpm安装没有此限制同时启动也有很多限制，否则启动失败 修改系统参数达到启动服务要求1234561 普通用户模式下安装2 安装jdk,要求1.8以上，有人声称1.11以上更佳3 打开文件数限制，包括系统级/etc/security/limits.conf 和ulimit -n 65535用户级4 打开内核参数级限制,临时设置如下命令sysctl -w vm.max_map_count=655350sysctl -w fs.file-max=65536 配置文件修改123456789cat /home/stack/elasticsearch-7.11.2/config/elasticsearch.yml | grep -v ^# | grep -v ^$cluster.name: wxq-esnode.name: node-es3bootstrap.memory_lock: falsenetwork.host: 192.168.1.30discovery.seed_hosts: [&quot;192.168.1.30&quot;,] # 集群模式相应追加主机cluster.initial_master_nodes: [&quot;192.168.1.30&quot;,]http.cors.enabled: true # 方便plugins head插件时跨站请求成功http.cors.allow-origin: &quot;*&quot; head 插件安装安装好后直接访问 http://IP:9100/ 连接地址填入http://es-server:9200/正确1234git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start 1./bin/elasticsearch # 直接启动即可 集群状态 123456green 可用状态red: 不可用yellow: 修复状态ES参与集群事务的端口tcp/9300ES接收请求的端口tcp/9200 API接口使用123456确保集群正常； API接口9200Restful接口API： 4类1 检查集群节点索引健康与否，以及获取其相应状态2 管理集群节点索引及元数据3 执行CRUD操作4 执行高级操作：例如paging 、filtering 12345678910111213所有_cat支持的API操作[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat=^.^=/_cat/allocation/_cat/shards/_cat/shards/&#123;index&#125;/_cat/master/_cat/nodes/_cat/tasks/_cat/indices/_cat/indices/&#123;index&#125;/_cat/segments。。。 v=verbose显示详细信息1234567891011http://192.168.1.30:9200/_cat/nodeshttp://192.168.1.30:9200/_cat/nodes?vhttp://192.168.1.30:9200/_cat/masterhttp://192.168.1.30:9200/_cat/master?v例如：[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?vip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name172.21.0.5 36 98 14 0.22 0.60 1.09 cdfhilmrstw - es02172.21.0.3 28 98 14 0.22 0.60 1.09 cdfhilmrstw * es01172.21.0.4 61 98 14 0.22 0.60 1.09 cdfhilmrstw - es03 help查看某接口支持查询的详细字段12345678[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?helpid | id,nodeId | unique node idpid | p | process idip | i | ip addressport | po | bound transport porthttp_address | http | bound http addressversion | v | es version。。。 查询某接口指定字段1234# curl http://192.168.1.40:9200/_cat/nodes?h=id,pid,ip,port,http_address,version,uptimet_iA 6 172.21.0.5 9300 172.21.0.5:9200 7.12.0 56.8mWIm1 6 172.21.0.3 9300 172.21.0.3:9200 7.12.0 56.8m3bzJ 6 172.21.0.4 9300 172.21.0.4:9200 7.12.0 56.8m health的green状态123# curl http://192.168.1.40:9200/_cat/health?vepoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1618470428 07:07:08 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 总结 带着概念参照官网安装还是挺简单的，练习接口可以了解学习集群及ES的概念","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb-恢复数据","slug":"mariadb-恢复数据","date":"2019-07-25T01:41:54.000Z","updated":"2020-07-08T12:30:31.812Z","comments":true,"path":"2019/07/25/mariadb-恢复数据/","link":"","permalink":"http://www.digmyth.com/2019/07/25/mariadb-恢复数据/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"搜索引擎与Lucene基础","slug":"log_lucene-认识","date":"2019-06-15T02:42:36.000Z","updated":"2021-03-17T09:47:30.627Z","comments":true,"path":"2019/06/15/log_lucene-认识/","link":"","permalink":"http://www.digmyth.com/2019/06/15/log_lucene-认识/","excerpt":"","text":"简单常识：1千万条日志记录存储大小为2G1亿条日志记录 5G8亿条日志记录 40G 程序： 算法+数据结构存储+前端访问接口 开发全文搜索程序： 算法+支持这种场景的特定存储结构海量日志分析： 搜索引擎搜索引擎： 存储时需要有索引链–&gt; 搜索组件（有请求接口有请求返回或展示UI） 收集日志 –&gt; 对收集过来日志检索原始内容–&gt; 构建文档 –&gt;文档分析或切词 –&gt; 建立索引链（创建倒排索引）而SQL的索引： 正排索引 文档数据库： Mongodb、elasticsearch(每一行中每字段文档数据格式各不一样) 著名开源搜索开发库或底层搜索引擎: Lucene添加收集文档，搜索引擎，提供上层搜索接口： Elasticsearch 包含一个或多个域的容器，文档就是由Field、Value组成Lucene没有全局模式：no schema,没有预先定义字段及类型域有很多选项： 索引选项、存储选项、每个域向量使用选项索引选项用于通过倒排索来控制文本是否可被搜索，成为索引中的项才能被搜索： index: ANALYZIED 需要分析或分词并单独构建索引项 index: not_ANALYZIED 不分析或不分词，把整个内容当一个索引项 index: analyzied norms 类似index: ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.Not_analyzied_norms 类似not_ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.NO : 不对此域的值进行索引，因此不能被搜索存储选项: 是否需要存储域的真实值 title: This is a Notebook. –&gt; this notebook 有效信息即可 store.YES: 存储真实值 store.NO: 不存储真实值 (每个项或每个域)向量选项用于在搜索期间控制该文档所有的唯一项都能完全从文档域中检索时使用 文档和域的加权操作： 通过改变某一个文档相对于某一个词的加权因子，对值改大改小可以决定它对用户的重要程序，如竟价排名 加权计算标准：方案很多 搜索：查询Lucene索引时，返回一个有序的scoreDoc对象：查询时Lucene会为每个文档计算出score,API: IndexSearcher: 搜索索引入口 Query及其子类：构建搜索查询语句 QueryParser: 搜索分析后返回结果 TopDocs 某查询分值top10 Lucene的多样化查询： IndexSearcher中的search方法，完成搜索时传入Query实例参数进行，就是告之到底要搜索什么，你键入的搜索关键词分析以后作为Query对象，传递给IndexSearch方法 常用几种查询方法123456789101112131415161718TermQuery： 对索引中特定项进行搜索，Term是索引中的最小索引片段，每个Term包含一个域名和文本值title: This is a Desktitle: Tis is a table索引构建方式： This： （1） (2) Desk： (1) table: (2) TermRangeQuery:索引中每个Term对象上的值都会按照字典编排顺序进行排序，并允许在Lucene TermRangeQuery 提供的范围内进行搜索 大白话就是TermQuery指定一个域中搜索，TermRangeQuery可以指定多个域内搜索 NumericRangeQuery： 只是数值范围内搜索 PrefixQuery： 用于搜索以指定字符串开头的域 BooleanQuery：用于实现组合查询，与或非 and 、or、 not PhraseQuery： 能够跟据位置信息定义文档 WildcardQuery：通配符 FuzzyQuery： 模糊查询 levenshtein处理 总结 Lucene是底层搜索引擎或搜索开发库，基于Lucene库开发有了Elasticsearch存储、搜索引擎系统","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"kubernetes-dashboard-TLS坑","slug":"Kubernetes-dashboard-TLS坑","date":"2019-06-11T12:51:41.000Z","updated":"2019-06-15T15:11:45.437Z","comments":true,"path":"2019/06/11/Kubernetes-dashboard-TLS坑/","link":"","permalink":"http://www.digmyth.com/2019/06/11/Kubernetes-dashboard-TLS坑/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"python-celery-Flask","slug":"python-Celery-Flask","date":"2019-02-10T09:03:01.000Z","updated":"2019-02-21T10:31:24.286Z","comments":true,"path":"2019/02/10/python-Celery-Flask/","link":"","permalink":"http://www.digmyth.com/2019/02/10/python-Celery-Flask/","excerpt":"","text":"一、基本使用Celery是由Python开发的一个简单、灵活、可靠的处理大量任务的分发系统，可以实时处理任务，也可以定时异步处理任务。每次分发任务后得到一个ID，然后根据这个ID查询任务执行情况。 并且celery需要rabbitMQ、Redis等充当broker来进行消息的接收。 安装1pip3 install celery eventlet # windows系统需要eventlet模块 下面我们来快速上手celery编辑s1.py1234567891011#!/usr/bin/env python3from celery import Celerycel = Celery(&apos;xxx&apos;, broker=&quot;redis://192.168.1.40&quot;, backend=&apos;redis://192.168.1.40&apos;)@cel.taskdef f1(x,y): return x+y 然后把s1这个work工作起来，进入命令终端,如果在linux系统，不用添加参数-P eventlet1E:\\pro\\xxx_dir&gt; celery worker -A s1 -l info -P eventlet 编辑s2.py1234567891011121314151617#!/usr/bin/env python3import datetimefrom s1 import f1# 立即执行result = f1.delay(4,6)print(result.id)# 定时执行ctime = datetime.datetime.now()# ctime = datetime.datetime(year=2019,month=2,day=21,hour=14,minute=8)utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp())s10 = datetime.timedelta(seconds=10)ctime_x = utc_time + s10result = f1.apply_async(args=[1,3],eta=ctime_x)print(result.id) 编辑s3.py12345678910111213141516171819202122232425#!/usr/bin/env python3from celery.result import AsyncResultfrom demo1.s1 import celasync = AsyncResult(id=&quot;f43bce52-9503-475e-9d19-4a46ed910a8e&quot;,app=cel)if async.successful(): ret = async.get() # 获取值 #async.forget() # 删除值 print(ret)elif async.failed(): print(&apos;执行失败&apos;)elif async.status == &apos;PENDING&apos;: print(&apos;任务等待中被执行&apos;)elif async.status == &apos;RETRY&apos;: print(&apos;任务异常后正在重试&apos;)elif async.status == &apos;STARTED&apos;: print(&apos;任务已经开始被执行&apos;)else: print(&quot;任务执行失败&quot;)async.revoke() # 取消一个任务，当一个任务正在执行，不能取消async.revoke(terminate=True) # 终止一个任务，当一个任务正在执行，可以被终止 二、多目录结构经过上面快速上手的学习，了解了celery的基本使用，那么重组一下代，形成项目中多目录结构看看相互之间如何调用？ 创建一个celery_tasks的目录，里面一般保存2类文件，其中一个文件名称必须为celery,另一类就是定义task任务的文件，可以有多个。 定义celery_tasks/celery.py文件,如果有多个task任务文件，可以用includ列表包含进来123456789101112131415#!/usr/bin/env python3from celery import Celery# from celery.schedules import crontabcel = Celery(&apos;xxxxxx&apos;, broker=&apos;redis://192.168.1.40:6379&apos;, backend=&apos;redis://192.168.1.40:6379&apos;, include=[&apos;celery_tasks.task1&apos;,) #include=[&apos;celery_tasks.task1&apos;,&apos;celery_tasks.task2&apos;])# 时区cel.conf.timezone = &apos;Asia/Shanghai&apos;# 是否使用UTCcel.conf.enable_utc = False 在多目录结构中，跑celery work时不用指定到文件，指定目录即可1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 定义celery_tasks/task1.py1234567#!/usr/bin/env python3from .celery import cel@cel.taskdef f1(x,y): return x+y 有了celery.py文件和task任务文件，我们就可以在任意地方调用任务了。 比如定义test/exec1.py文件来执行任务123456#!/usr/bin/env python3from celery_tasks.task1 import f1result = f1.delay(4,6)print(result.id) 定义test/exec2.py文件来获取任务执行结果,需要提供任务ID1234567891011#!/usr/bin/env python3from celery_tasks.celery import celfrom celery.result import AsyncResultasync = AsyncResult(id=&quot;be6bb021-da48-46a9-b1bc-94b987f7c8a7&quot;,app=cel)if async.successful(): print(async.get())else: print(&quot;任务执行失败&quot;) 三、Flask中的例用有了上面celery的认识，我们来简单写点代码，看一下在Flask框架中celery是如何使用的？ 定义Flask项目启动文件app.py 写线上代码时是要把任务保存在数据库中的，这里仅作示例就保存在了HISTORY全局变量中了.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/env python3from flask import Flask,request,render_template,redirectfrom celery_tasks.task2 import deployapp = Flask(__name__)HISTORY = []@app.route(&apos;/index&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: return render_template(&apos;index.html&apos;,history=HISTORY)@app.route(&apos;/publish&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def publish(): if request.method == &quot;GET&quot;: return render_template(&apos;publish.html&apos;) else: version = request.form.get(&quot;version&quot;) hosts = request.form.getlist(&quot;hosts&quot;) print(version,hosts) import datetime ctime = datetime.datetime.now() utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp()) ctime_10 = utc_time + datetime.timedelta(seconds=10) result = deploy.apply_async(args=[version,hosts],eta=ctime_10) HISTORY.append(&#123;&quot;version&quot;:version,&quot;hosts&quot;:hosts,&quot;task_id&quot;:result.id&#125;) print(HISTORY) return redirect(&quot;/index&quot;)from celery.result import AsyncResultfrom celery_tasks.celery import cel@app.route(&apos;/check_result&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def check_result(): task_id = request.args.get(&quot;task_id&quot;) async = AsyncResult(id=task_id,app=cel) if async.successful(): result = async.get() print(result) # result.forget() # 将结果删除 return &quot;执行成功&quot; elif async.failed(): return &apos;执行失败&apos; elif async.status == &apos;PENDING&apos;: return &apos;任务等待中被执行&apos; elif async.status == &apos;RETRY&apos;: return &apos;任务异常后正在重试&apos; elif async.status == &apos;STARTED&apos;: return &apos;任务已经开始被执行&apos; else: return &quot;unkown status&quot;@app.route(&apos;/cancel&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def cancel(): task_id = request.args.get(&quot;task_id&quot;) async =AsyncResult(id=task_id,app=cel) async.revoke(terminate=True) for i in HISTORY: if task_id in i.values(): HISTORY.remove(i) return redirect(&quot;/index&quot;)if __name__ == &apos;__main__&apos;: app.run() 定义其中用到的templates/index.html123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;发布系统&lt;/h1&gt;&lt;a href=&quot;/publish&quot;&gt;添加发布任务&lt;/a&gt;&lt;table&gt; &#123;% for row in history %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.task_id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.version &#125;&#125;&lt;/td&gt; &#123;% for host in row.hosts %&#125; &lt;td&gt; &lt;span&gt;&#123;&#123; host &#125;&#125;&lt;/span&gt; &lt;/td&gt; &#123;% endfor %&#125; &lt;td&gt;&lt;a href=&quot;/check_result?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;查看&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/cancel?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;取消&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 定义其中用到的templates/publish.html1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;version&quot; placeholder=&quot;请输入要发布的版本&quot;&gt;&lt;/p&gt; &lt;p&gt; &lt;select name=&quot;hosts&quot; multiple=&quot;multiple&quot;&gt; &lt;option value=&quot;c1.com&quot;&gt;c1.com&lt;/option&gt; &lt;option value=&quot;c2.com&quot;&gt;c2.com&lt;/option&gt; &lt;option value=&quot;c3.com&quot;&gt;c3.com&lt;/option&gt; &lt;/select&gt; &lt;/p&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 定义其中的celery_tasks.task2.py文件,这里的deploy是真正定义任务的地方.12345678#!/usr/bin/env python3from .celery import cel@cel.taskdef deploy(version,hosts): print(version, hosts) # 定义想要执行的任务代码 return &apos;deploy ok&apos; 同样别望了先把work跑起来,再启动Flask1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 四、总结还需要多写代码在项目中总结celery…","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"ansible callback 重写","slug":"ansible-Callback-02","date":"2019-01-12T12:39:12.000Z","updated":"2019-01-13T13:01:21.969Z","comments":true,"path":"2019/01/12/ansible-Callback-02/","link":"","permalink":"http://www.digmyth.com/2019/01/12/ansible-Callback-02/","excerpt":"","text":"1.1 adhoc callback重写adhoc-callback.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象#^#Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)#^# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)#^# 重写CallbackBase父类class AdhocResultsCollector(CallbackBase): def __init__(self, *args, **kwargs): super(AdhocResultsCollector, self).__init__(*args, **kwargs) self.host_ok = &#123;&#125; self.host_unreachable = &#123;&#125; self.host_failed = &#123;&#125; def v2_runner_on_unreachable(self, result): self.host_unreachable[result._host.get_name()] = result def v2_runner_on_ok(self, result, *args, **kwargs): self.host_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.host_failed[result._host.get_name()] = resultcallback = AdhocResultsCollector()passwords = dict()tqm = TaskQueueManager(inventory=myinven, variable_manager=varmanager, loader=loader,options=options, passwords=passwords, stdout_callback=callback )result_status_code = tqm.run(play)print(callback.host_ok.items())result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;)for host,result in callback.host_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.host_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.host_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultprint(json.dumps(result_raw,indent=4)) 1.2 playbook callback重写写入示例playbook文件site.yml12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 编写play_book.py 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;, &apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;, &apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True, )# 重写CallbackBase父类class PlayBookResultsCollector(CallbackBase): CALLBACK_VERSION = 2.0 def __init__(self, *args, **kwargs): super(PlayBookResultsCollector, self).__init__(*args, **kwargs) self.task_ok = &#123;&#125; self.task_skipped = &#123;&#125; self.task_failed = &#123;&#125; self.task_status = &#123;&#125; self.task_unreachable = &#123;&#125; def v2_runner_on_ok(self, result, *args, **kwargs): self.task_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.task_failed[result._host.get_name()] = result def v2_runner_on_unreachable(self, result): self.task_unreachable[result._host.get_name()] = result def v2_runner_on_skipped(self, result): self.task_ok[result._host.get_name()] = result def v2_playbook_on_stats(self, stats): hosts = sorted(stats.processed.keys()) for h in hosts: t = stats.summarize(h) self.task_status[h] = &#123; &quot;ok&quot;:t[&apos;ok&apos;], &quot;changed&quot; : t[&apos;changed&apos;], &quot;unreachable&quot;:t[&apos;unreachable&apos;], &quot;skipped&quot;:t[&apos;skipped&apos;], &quot;failed&quot;:t[&apos;failures&apos;] &#125;# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords )# 把重写的CallbackBase父类加载进playbookcallback = PlayBookResultsCollector()playbook._tqm._stdout_callback = callbackplaybook.run()result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;, skipped = &#123;&#125;, status = &#123;&#125;,)for host,result in callback.task_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.task_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.task_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultfor host,result in callback.task_skipped.items(): result_raw[&apos;skipped&apos;][host] = result._resultfor host, result in callback.task_status.items(): result_raw[&apos;status&apos;][host] = resultprint(json.dumps(result_raw,indent=4)) 执行示例python3 play_book.py 返回类似如下结果12345678910111213141516171819202122232425262728293031323334&#123; &quot;success&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;changed&quot;: true, &quot;end&quot;: &quot;2019-01-14 04:50:06.190607&quot;, &quot;stdout&quot;: &quot;&quot;, &quot;cmd&quot;: &quot;touch /tmp/site.txt&quot;, &quot;rc&quot;: 0, &quot;start&quot;: &quot;2019-01-14 04:50:06.186466&quot;, &quot;stderr&quot;: &quot;&quot;, &quot;delta&quot;: &quot;0:00:00.004141&quot;, &quot;invocation&quot;: &#123; &quot;module_args&quot;: &#123; &quot;creates&quot;: null, &quot;executable&quot;: null, &quot;_uses_shell&quot;: true, ... 略 &#125; &#125;, &#125; &#125;, &quot;failed&quot;: &#123;&#125;, &quot;unreachable&quot;: &#123;&#125;, &quot;skipped&quot;: &#123;&#125;, &quot;status&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;ok&quot;: 2, &quot;changed&quot;: 1, &quot;unreachable&quot;: 0, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 &#125; &#125;&#125; 总结 adhoc重写方法如host_ok,host_failed,host_unreachable playbook重写方法如task_ok,task_failed,task_unreachable,task_skipped,task_status,task_changed 返回如callback.task_ok.items(),其中键为host,值为result对象，result._result得到一个字典类型的详细结果 &lt;&lt; 完结 &gt;&gt;","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"python3下ansible api学习","slug":"ansible-api-01","date":"2019-01-10T12:39:12.000Z","updated":"2019-01-13T12:36:03.633Z","comments":true,"path":"2019/01/10/ansible-api-01/","link":"","permalink":"http://www.digmyth.com/2019/01/10/ansible-api-01/","excerpt":"","text":"1.1 ansible api基础环境说明： python version: python3 ansible version: 2.7.5 inventory file: dir1/inventory/multinode 清单文件定义： dir1/inventory/multinode12345678910[control]192.168.1.6 var1=&quot;ssss&quot; ansible_ssh_user=root ansible_ssh_pass=&apos;123&apos;[nova:children]control[cinder:children]control[glance:children] 一个单一文件进行简单的接口学习: dir1/f1.py1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/env python3import os,sys,jsonfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.plugins.callback import CallbackBaseimport ansible.constants as CBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&quot;dir1/inventory/multinode&quot;)loader = DataLoader()inven = InventoryManager(loader=loader,sources=[source,])# print(inven.get_hosts())inven.add_group(&apos;test_group2&apos;)print(inven.get_groups_dict())inven.add_host(host=&apos;192.168.1.7&apos;,port=22,group=&apos;test_group2&apos;)print(inven.get_groups_dict())host = inven.get_host(hostname=&apos;192.168.1.6&apos;)variableman = VariableManager(loader=loader,inventory=inven)vars = variableman.get_vars(host=host)# print(json.dumps(vars,indent=4))variableman.set_host_variable(host=host,varname=&apos;k1&apos;,value=&apos;v1&apos;) # 局部的x = variableman.get_vars(host=host)print(x[&apos;k1&apos;])print(variableman.__dict__)variableman._extra_vars = &#123;&quot;k2&quot;: &quot;v2&quot;&#125; # 添加全局变量x = variableman.get_vars() # 不传host说明是全局的 执行测试1python3 dir1/f1.py # 输出调用信息对照接口就知道只些方法是干什么的了 1.2 adhoc模式示例学习编辑dir1/adhoc.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)passwords = &#123;&#125;tqm = TaskQueueManager(inventory=myinven,variable_manager=varmanager, loader=loader,options=options,passwords=passwords)result = tqm.run(play) 执行测试1python3 dir1/adhoc.py 输出信息和命令行ansible直接模块运行一样，任务正常执行 1.3 playbook 示例学习编辑dir1/play_book.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords)playbook.run() 用到的site.yml文件示例如下12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 执行测试1python3 play_book.py 输出信息和ansible-playbook命令行输出一样，任务正常执行","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"veth-pair+namespace","slug":"veth-pair+namespace","date":"2019-01-10T01:41:54.000Z","updated":"2021-01-21T09:00:43.702Z","comments":true,"path":"2019/01/10/veth-pair+namespace/","link":"","permalink":"http://www.digmyth.com/2019/01/10/veth-pair+namespace/","excerpt":"","text":"查找对端veth pair12345678root@k8s-m:/data/dashboard# cat /sys/class/net/cali3b4bae3cec1/iflink 4root@k8s-m:/data/dashboard# ethtool -S cali3b4bae3cec1NIC statistics: peer_ifindex: 4 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0 namespace场景参考如下1234567891011121314# ip link add veth-a type veth peer name veth-b # 生成veth pair对，相当于一根网线# ip netns add ns1 # 创建名称空间# ip link set veth-a netns ns1 #将网线A端加入名称容间root@k8s-m:~# ip netns exec ns1 ethtool -S veth-a # veth-a的对端编号16NIC statistics: peer_ifindex: 16 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0root@k8s-m:~# ip netns exec ns1 cat /sys/class/net/veth-a/iflink # veth-a的对端编号1616# ip a # 查看编号16的设备16: veth-b@if17: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether be:ec:d2:fc:64:3f brd ff:ff:ff:ff:ff:ff link-netns ns1 利用ovs实现跨主机通信的简单应用12345678ovs-vsctl add-br ovs0ovs-vsctl add-port ovs0 eth0物理网卡加进ovs可能会断网，解决办法：# ifconfig ovs0 172.16.10.10/24# ifconfig eth0 0.0.0.0.0# route del default# route add default gw 172.16.10.254 dev ovs0# ifconfig ovs0 hw ether $eth0_mac 注意： 完事后放在开机启动项，不然开机失效连不上机","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"OpenVSwitch","slug":"openvswitch","date":"2019-01-08T01:41:54.000Z","updated":"2019-05-26T15:16:23.168Z","comments":true,"path":"2019/01/08/openvswitch/","link":"","permalink":"http://www.digmyth.com/2019/01/08/openvswitch/","excerpt":"","text":"交换机端口查看12345# ovs-vsctl show# ovs-ofctl show# ovs-ofctl show br-int# ovs-ofctl show br-tun# virsh domiflist instance-00000017 open flow流表查看12345678# ovs-ofctl dump-flows br-int# ovs-ofctl dump-flows br-tun# ip netns exec qrouter-c266eb04-0be8-448f-986f-6eef3a9bcdce ifconfig# dpkg-query -S /sbin/brctl# apt-get install bridge-utils# brctl show 添加br-ex网桥：123456# ovs-vsctl add-br br-ex桥加载到物理网口：# ovs-vsctl add-port br-ex eth0添加到不同vlan与端口模式# ovs-vsctl add-port br-ex eth1 tag=100 //设置为access端口# ovs-vsctl add-port br-ex eth2 trunk=200 //设置为trunk端口,允许vlan200通过，默认允许所有vlan直接转发 列出所有桥：123ovs-vsctl list-brovs-vsctl list-ports br-intovs-vsctl port-to-br port_name 列出桥上所接端口123# ovs-vsctl list-ports br-ex# ovs-ofctl dump-ports br-ex# ovs-vsctl list port 根据交换机某个接口名称查端口号12# ovs-vsctl list interface tap0_br | grep &quot;ofport &quot;ofport : 1 流表操作注意： 流量匹配是有顺序的,table0–&gt;table1—&gt;table3–&gt;table4 –&gt;table5…123456789101112# ovs-vsctl add-br vswitch0#发现有一条actions为NORMAL的流表项，这是默认存在的，用以实现交换机的基本动作# ovs-ofctl dump-flows vswitch0cookie=0x0, duration=267197.837s, table=0, n_packets=459, n_bytes=42190, idle_age=387, hard_age=65534, priority=0 actions=NORMAL# ovs-ofctl del-flows vswitch0 # 流表删除后所有流量将被丢弃# ovs-ofctl dump-flows vswitch0# 可以在table0添加类似规则使流量正常转发,没写表名默认table0# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot; 12345#flow优先级越高，会优先匹配,以下规则drop优先，流量被丢弃# ovs-ofctl del-flows br-int# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl add-flow vswitch0 &quot;priority=3,in_port=1,actions=drop&quot; 将table0的规则添加到table1上，发出流量也是不通的，因为流表是有顺序的，table0没有匹配到，流量被丢弃1234567# ovs-ofctl del-flows vswitch0# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl dump-flows vswitch0NXST_FLOW reply (xid=0x4): cookie=0x0, duration=3.485s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=1,in_port=1 actions=output:4 cookie=0x0, duration=3.033s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=2,in_port=4 actions=output:1 现在给table0加上一条将数据包发送到table1处理的flow, 发现流量正常，这就明白了多个table之间是如何协调工作的。1# ovs-ofctl add-flow vswitch0 &quot;table=0,actions=goto_table=1&quot; 组表操作添加一个组表1# ovs-ofctl -O OpenFlow13 add-group vswitch0 &quot;group_id=1,type=select,bucket=resubmit(,1)&quot; 查看组表1# ovs-ofctl -O OpenFlow13 dump-groups vswitch0 在table0中增加两条flow，目的是将数据包发送到group table112# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=1,actions=group:1&quot;# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=4,actions=group:1&quot; 向table1中增加两条flow，真正的数据转发在table1中进行,流量也正常通过12# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot; 虚机挂在网桥上xml格式定义openvswitch网桥，以便于virt-install –network参数指定网桥启动虚机1234567# ovsbr0.xml&lt;network&gt; &lt;name&gt;ovsbr0&lt;/name&gt; &lt;forward mode=&apos;bridge&apos;/&gt; &lt;bridge name=&apos;ovsbr0&apos;/&gt; &lt;virtualport type=&apos;openvswitch&apos;/&gt;&lt;/network&gt; 123virsh net-define ovsbr0.xmlvirsh net-start ovsbr0virsh net-autostart ovsbr0 在安装kvm虚拟机时使用ovsbr012345678910virt-install \\ -n vm-name \\ -r 4096 \\ --disk path=/data/kvm/rhel75-vm1.qcow2,format=qcow2,size=60 \\ --vcpus 4 \\ --noautoconsole \\ --cdrom=/data/kvm/iso/rhel75-x86_64.iso \\ --os-type=linux \\ --network network:ovsbr0 \\ --vnc --vnclisten=0.0.0.0 --vncport=5901 也可以将正在运行的KVM虚拟机的vnet网络接口强制接到ovs网桥上12#virsh dumpxml $vmname|grep vnet 查看某虚拟机在宿主机上对应的网络接口add-port ovsbr0 vnetxx 网桥接口划vlan并配IP命令12ovs-vsctl add-port ovsbr0 tag10 tag=10 -- set interface tag10 type=internalifconfig tag10 192.168.10.10/24 up 1234# ip link命令设置vlan接口命令ip link add link eth0 name eth0.10 type vlan id 10ifconfig eth0.10 192.168.10.33 netmask 255.255.255.0 broadcast 192.168.10.255 uproute add default gw 192.168.10.1 dev eth0.10 总结：这里只是命令总结，并没有什么实验逻辑","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"download technique","slug":"linux-download-technique","date":"2018-12-01T00:48:08.000Z","updated":"2019-05-26T11:37:37.080Z","comments":true,"path":"2018/12/01/linux-download-technique/","link":"","permalink":"http://www.digmyth.com/2018/12/01/linux-download-technique/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-socket-高级篇","slug":"web-socket-02","date":"2018-11-25T12:51:41.000Z","updated":"2018-11-27T02:19:03.844Z","comments":true,"path":"2018/11/25/web-socket-02/","link":"","permalink":"http://www.digmyth.com/2018/11/25/web-socket-02/","excerpt":"","text":"前面我们学习了WebSocket，我们知道客户端要与服务端进行WebSoccket通信，客户端要和服务端握手，握手成功后才能通信。 握手： 客户端发出握手请求，服务端在握手请求中取出“Sec-WebSocket-Key”，把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 如果给定了“Sec-WebSocket-Key”，那么摘要算法代码如下，服务器会把摘要后值返回给客户端完成握手操作。12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 如果我们己经有一个socket server，真的能收到握手信息吗？socker_server.py1234567891011121314#!/usr/bin/env python3import socketconn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)conn.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)conn.bind((&apos;127.0.0.1&apos;,8000))conn.listen(5)client,addr = conn.accept()print(client.recv(8192))print(addr) 如何发送握手请求？方式一：可直接在浏览器console终端下手动发送socket请求，请求中包含握手信息12&gt;var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;)undefined 此时浏览器会报VM44:1 WebSocket connection to &#39;ws://127.0.0.1:8000/xxoo&#39; failed: Connection closed before receiving a handshake response的错，是因为服务器端没有返回摘要后的值，表示没有握手成功。 方式二：直接编写client.html用浏览器运行12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;WebSocket test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;WebSocket study....&lt;/h1&gt; &lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 此时服务器会收到类似b&#39;GET /xxoo HTTP/1.1\\r\\nHost: 127.0.0.1:8000\\r\\nConnection: Upgrade...client_max_window_bits\\r\\n\\r\\n&#39;信息，里面包含“Sec-WebSocket-Key” 如果我们用一个函数手动取出“Sec-WebSocket-Key”，然后手动摘要后把值再手动返回给客户端，这样就握手成功不会报错了。 处理握手信息的函数(get_headers)如下123456789101112131415161718192021def get_headers(data): &quot;&quot;&quot; 将请求头格式化成字典 :param data: :return: &quot;&quot;&quot; header_dict = &#123;&#125; data = str(data, encoding=&apos;utf-8&apos;) for i in data.split(&apos;\\r\\n&apos;): print(i) header, body = data.split(&apos;\\r\\n\\r\\n&apos;, 1) header_list = header.split(&apos;\\r\\n&apos;) for i in range(0, len(header_list)): if i == 0: if len(header_list[i].split(&apos; &apos;)) == 3: header_dict[&apos;method&apos;], header_dict[&apos;url&apos;], header_dict[&apos;protocol&apos;] = header_list[i].split(&apos; &apos;) else: k, v = header_list[i].split(&apos;:&apos;, 1) header_dict[k] = v.strip() return header_dict 把摘要后的值返回给客户端1234567891011121314conn, address = sock.accept()data = conn.recv(1024)headers = get_headers(data) # 提取请求头信息# 对请求头中的sec-websocket-key进行加密response_tpl = &quot;HTTP/1.1 101 Switching Protocols\\r\\n&quot; \\ &quot;Upgrade:websocket\\r\\n&quot; \\ &quot;Connection: Upgrade\\r\\n&quot; \\ &quot;Sec-WebSocket-Accept: %s\\r\\n&quot; \\ &quot;WebSocket-Location: ws://%s%s\\r\\n\\r\\n&quot;magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;value = headers[&apos;Sec-WebSocket-Key&apos;] + magic_stringac = base64.b64encode(hashlib.sha1(value.encode(&apos;utf-8&apos;)).digest())response_str = response_tpl % (ac.decode(&apos;utf-8&apos;), headers[&apos;Host&apos;], headers[&apos;url&apos;])conn.send(bytes(response_str, encoding=&apos;utf-8&apos;)) 摘要后的值返回给客户端后就完成了握手过程，客户端就不会再报连接错误了。 接收客户端发来的数据完成握手操作后就客户端就可以向服务器发送数据了，只需console终端sock.send(&#39;dimyth&#39;) 服务端接收12info = conn.recv(1024)print(info) # 这里是字节 服务器端收到客户端发来的数据，这个数据需要服务器解包，解包过程如下1234567891011121314151617181920payload_len = info[1] &amp; 127if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:]elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:]else: extend_payload_len = None mask = info[2:6] decoded = info[6:]bytes_list = bytearray()for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk)body = str(bytes_list, encoding=&apos;utf-8&apos;)print(body) # 解出真正数据 那么服务器给客户端发送数据要就封包。123456789101112131415161718192021def send_msg(conn, msg_bytes): &quot;&quot;&quot; WebSocket服务端向客户端发送消息 :param conn: 客户端连接到服务器端的socket对象,即： conn,address = socket.accept() :param msg_bytes: 向客户端发送的字节 :return: &quot;&quot;&quot; import struct token = b&quot;\\x81&quot; length = len(msg_bytes) if length &lt; 126: token += struct.pack(&quot;B&quot;, length) elif length &lt;= 0xFFFF: # 65535 token += struct.pack(&quot;!BH&quot;, 126, length) else: token += struct.pack(&quot;!BQ&quot;, 127, length) msg = token + msg_bytes conn.send(msg) return True 对上面BHQ说明一下，B代表1个字节，H代表2个字节，Q代表8个字节 客户端如何收消息呢？1234567891011&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;); sock.onmessage = function (event) &#123; /* 服务器端向客户端发送数据时，自动执行 */ var response = event.data; var newTag = document.createElement(&apos;div&apos;); newTag.innerHTML = response; document.getElementById(&apos;content&apos;).appendChild(newTag); &#125;;&lt;/script&gt;","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"web-socket-基础知识","slug":"web-socket-01","date":"2018-11-06T12:51:41.000Z","updated":"2018-11-25T11:24:51.562Z","comments":true,"path":"2018/11/06/web-socket-01/","link":"","permalink":"http://www.digmyth.com/2018/11/06/web-socket-01/","excerpt":"","text":"WebSocket在什么场景下使用？页面实时展示数据 轮询：setInterval()前端轮询请求，性能低下 长轮询：把请求pending住多少秒后再返回，量大时也损耗服务器性能 WebSocket: 建立socket双向传输数据，高效。 那么什么是WebSocket参考链接 先来看下http协议 http协议： 1 格式：请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接：一次请求，一次响应，然后断开连接。 那么WebSocket协议是怎么样的呢？ WebSocket： 1 格式： 请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接： 创建socket通道后不断开，全双工(full-duplex)通信，可以相互发消息。 WebSocket实现了浏览器与服务器全双工(full-duplex)通信，能主动向浏览器发送消息，但需要浏览器支持websocket封包解包或加密解密。其本质是保持TCP连接，在浏览器和服务端通过Socket进行通信。 WebSocket特性 WebSocket 是独立的、创建在 TCP 上的协议。 Websocket 通过 HTTP/1.1 协议的101状态码进行握手。 为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking） 总结起来：WebSocket是一种在单个TCP连接上进行全双工通信的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。 WebSokcet工作原理首先客户端要验证服务器是否支持websocket协议，能不能一起玩耍？ 客户端发送playload data之前会发送握手字符串，服务器把握手字符串加密后返回给客户端，此时客户端也把字符串按特定算法加密，把客户端加密后的字符串与服务器加密后的字符串进行比较，如果一致则客户端认为服务器支持WebSocket协议通信，可以相互一起玩耍。 握手时的特定算法是什么呢？代码如下12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 能不能一起玩耍，官方术语就是创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）. 不管怎么说，WebSocket允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。 什么？看不懂，一言不合上代码，下面是一个典型的Websocket握手请求. 客户端请求1234567GET / HTTP/1.1Upgrade: websocketConnection: UpgradeHost: example.comOrigin: http://example.com:8002Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==Sec-WebSocket-Version: 13 服务器回应12345HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=Sec-WebSocket-Location: ws://example.com:8002/ 字段说明 Connection必须设置Upgrade，表示客户端希望连接升级。 Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。 Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13. Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是,与Referer不同的是，Origin只包含了协议和主机名称。 服务器解包细节官方WebSocket instructions 注意的是客户端和服务端传输数据时，需要对数据进行封包解包。客户端有 javascript类库实现封包解包，但服务器需要手动实现。 当conn,addr = sk.accept()时，服务器端代码如下12345678910111213141516171819202122info = conn.recv(8096) payload_len = info[1] &amp; 127 if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:] elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:] else: extend_payload_len = None mask = info[2:6] decoded = info[6:] bytes_list = bytearray() for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk) body = str(bytes_list, encoding=&apos;utf-8&apos;) print(body) 要看懂这段代码必须了解websocket解包细节. 当客户端加密发送了socket data数据时，服务端收到数据是这样的. b&#39;\\x81\\x82\\xac\\xde\\xdd\\xf4\\xdc\\xae&#39; 需要对这样的数据解密才能拿到真的数据，跟据第二个字节后7位的值取数据.1234567891011121314151617180 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-------+-+-------------+-------------------------------+|F|R|R|R| opcode|M| Payload len | Extended payload length ||I|S|S|S| (4) |A| (7) | (16/64) ||N|V|V|V| |S| | (if payload len==126/127) || |1|2|3| |K| | |+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +| Extended payload length continued, if payload len == 127 |+ - - - - - - - - - - - - - - - +-------------------------------+| |Masking-key, if MASK set to 1 |+-------------------------------+-------------------------------+| Masking-key (continued) | Payload Data |+-------------------------------- - - - - - - - - - - - - - - - +: Payload Data continued ... :+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +| Payload Data continued ... |+---------------------------------------------------------------+ 1234value = socket_data[1] &amp; 127value &lt;=125 b&apos;\\x81\\x82 \\xac\\xde\\xdd\\xf4\\xdc\\xae&apos; # 数据在第2个节字后value =126 b&apos;\\x81\\x82\\xac\\xde \\xdd\\xf4\\xdc\\xae&apos; # next 16bit(2个字节)，数据在第4个节字后 value =127 xxx... # next 64bit(8个字节), 数据在第10个节字后 其中头32bits为掩码，真正数据还要去掉这4字节，取真正数据真不容易。 好了,WebSocket所有知识都在这里了，慢慢品味知识的韵味。","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"kubernetes-dashboard","slug":"Kubernetes-dashboard","date":"2018-10-01T12:51:41.000Z","updated":"2019-06-15T04:02:25.581Z","comments":true,"path":"2018/10/01/Kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2018/10/01/Kubernetes-dashboard/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"linux dmesg时间戳换算","slug":"linux-dmesg","date":"2018-08-16T01:42:54.000Z","updated":"2021-01-29T09:46:40.249Z","comments":true,"path":"2018/08/16/linux-dmesg/","link":"","permalink":"http://www.digmyth.com/2018/08/16/linux-dmesg/","excerpt":"","text":"dmesg系统内核里的时间戳转换为人类可以看懂的时间 dmesg记录的是自系统开机那刻到出事故时的时间戳 开机时间戳=当时时间戳-机器运行时间戳dmesg_time=开机时间戳+ dmesg记录时间戳再拿着dmesg_time时间戳换算就好了 123456789dmesg_time=`echo &quot;$(date +%s) - $(cat /proc/uptime | cut -f 1 -d&apos; &apos;) + 84679.822059&quot; | bc`echo $dmesg_time/proc/uptime 第一列表示为系统开机时间，根据这个值和当前时间可以获取到dmesg日志中时间发生的时间时间戳的转换为时间[root@site1 ~]# date -d &quot;@$&#123;dmesg_time&#125;&quot; &apos;+%Y-%m-%d %H:%M:%S&apos;2019-01-03 11:10:54","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"cinder多后端逻辑","slug":"cinder-vol-多后端","date":"2018-08-08T01:41:54.000Z","updated":"2019-05-26T12:41:06.912Z","comments":true,"path":"2018/08/08/cinder-vol-多后端/","link":"","permalink":"http://www.digmyth.com/2018/08/08/cinder-vol-多后端/","excerpt":"","text":"cinder配置逻辑123456789101112131415enable_backens=backend1,backend2,backend3[backend1]volume_driver=cinder.xxvolume_backend_name=sata[backend2]volume_driver=cinder.xxvolume_backend_name=ssd[backend3]volume_driver=cinder.xxvolume_backend_name=rbdcinder type-create satacinder type-key sata set volume_backend_name=satacinder create --volume-type sata --display-name vol_stat 20 vmware启用thick配置123456789101、运行命令：cinder type-create thick_volume（注：创建云硬盘类型）2、运行命令：cinder type-key thick_volume set vmware:vmdk_type=thick（注：thick为Vmware使用）3、运行命令：cinder type-key thick_volume set volume_backend_name=fusionstorage_sata3copy（注：指定后端）4、运行命令：glance image-list（注：查看镜像ID）5、运行命令：cinder create --image-id “镜像ID” --volume-type thick_volume --display-name vol-thick 20（注：创建一个20G大小的云硬盘，使用刚刚创建的云硬盘类型）","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"Dockerfile-详解","slug":"Dockerfile-详解","date":"2018-08-01T12:51:41.000Z","updated":"2018-10-24T06:18:33.872Z","comments":true,"path":"2018/08/01/Dockerfile-详解/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Dockerfile-详解/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-kubeadm","slug":"Kubernetes-kubeadm","date":"2018-08-01T12:51:41.000Z","updated":"2019-06-15T04:13:13.125Z","comments":true,"path":"2018/08/01/Kubernetes-kubeadm/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes-kubeadm/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Openshift-入门","slug":"Openshift","date":"2018-08-01T12:51:41.000Z","updated":"2018-07-29T10:51:12.609Z","comments":true,"path":"2018/08/01/Openshift/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Openshift/","excerpt":"","text":"前言","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-入门","slug":"Kubernetes","date":"2018-08-01T12:51:41.000Z","updated":"2018-08-26T04:03:32.956Z","comments":true,"path":"2018/08/01/Kubernetes/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes/","excerpt":"","text":"k8s 的世界12345678910- charts , k8s 的包， 类似 *.rpm 的东西- helm , k8s 的包管理机制，类似 yum 的东西openstack 容器化 ( docker 版本）- kolla-ansible- tripleoopenstack 容器化( k8s 版本）- openstack-helm- kolla-kubernetes openshift中有几种网络端口模式(暴露服务) hostnetworkhostnetwork 就是Docker的host网络，pod直接占用宿主机IP及端口，没什么可说的 hostporthostport 是在单宿主机通过IP+端口来映射容器或pod(-p 参数), 实现外部能访问容器服务或pod服务 nodeportnodeport也是在宿主机通过IP+端口来映射，与hostport不同之处是映射ServiceIP+端口，再转到pod服务 routerrouter是以hostnetwork网络模式跑在宿主机上的容器化haproxy pod, pod IP和端口就是节点的IP和端，对外暴露80、443、1936端口，haproxy中有service query 信息来自于etcd, 再通过service访问到pod服务。 注： router是hostnetwork网络模式就意味着一个节点只能运行一个router","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"CentOS 7.x/Mysql limit","slug":"mysql-limit","date":"2018-07-25T01:41:54.000Z","updated":"2018-08-25T06:25:06.410Z","comments":true,"path":"2018/07/25/mysql-limit/","link":"","permalink":"http://www.digmyth.com/2018/07/25/mysql-limit/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"python-08-07-抽象类抽象方法.md","slug":"python-08-07-抽象类抽象方法","date":"2018-06-15T12:39:12.000Z","updated":"2018-12-21T18:24:42.815Z","comments":true,"path":"2018/06/15/python-08-07-抽象类抽象方法/","link":"","permalink":"http://www.digmyth.com/2018/06/15/python-08-07-抽象类抽象方法/","excerpt":"","text":"接口当多个类都有同样的方法，此时可以把相同的方法提练出来放在父类，但对继承父类的子类作约束就要用到接口了。 下面来段伪代码，在其它语言中普遍使用的语法，不适于python,这里主要学习其思想12345678910111213141516interface IFoo(): # 这个叫IFoo接口，约束实现该接口的类必须实现定义的方法 def exec(self):passclass A(IFoo): # 这个叫实现了IFoo接口，接口中的方法必须在当前类实现 def exec(self): return &quot;A.exec&quot;class B(IFoo): def exec(self): return &apos;B.exec&apos;def f1(arg): arg.exec()obj = A()print(f1.obj) 上面就是接口的概念或者用法，下面是用抽象类、抽象方法实现同样功能的原理伪代码123456789101112AbstractClass Foo(): 抽象类，抽象方法(有继承的特性，也有约束的特性) def abstractmethod():passclass A(Foo): def exec(self): return &apos;A.exec&apos; def f1(self): return &quot;A.f1&quot;obj = A()obj.exec() 那么如何用代码实现python抽象类、抽象方法呢？ 要用到from abc import abstractmethod,ABCMeta1234567891011121314151617from abc import abstractmethod,ABCMetaclass IFoo(metaclass=ABCMeta): @abstractmethod def exec(self):pass def f1(self): return &quot;cloud implement really method&quot;class A(IFoo): # 当前类继承了抽象类，当前类必须实现抽象类中的所有抽象方法，其它方法可以不用定义且可以直接继承使用。 def exec(self): return &quot;really method&quot;obj = A()print(obj.exec())print(obj.f1()) 好了， 这个接口或抽象类、抽象方法的学习完结。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Rabbitmq集群","slug":"Rabbitmq","date":"2018-06-08T01:41:54.000Z","updated":"2021-03-03T07:10:17.722Z","comments":true,"path":"2018/06/08/Rabbitmq/","link":"","permalink":"http://www.digmyth.com/2018/06/08/Rabbitmq/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 U2FsdGVkX1+absAg0izw3M3SOF+Oynk3jQPAI8QlbNSU6/v8A7NdD4UrZQKH7RdvaRDHDZR/hc0w3E5Zjbme70pSXT9Wv3LA6/F/artoq22NuFP/0/xGw5hPIxIUKuQbu/tIeO1txvehmGmn3sY2VUjxq6y3yip4ZYQzTfahSvIU+E1U0TMR1uhs7ENFPHX/WGMxDCKAOAkG3BII+u2O24dbFSNDxK55MyUCPcbyiEPUY8vwTUWVrSmdqalWpdxoOBDjpATLGDEeLz63s2pS76heptOUmUXYN5isb/85hWwdjUI0pe1WyK734lZFiUtrFLoOHFOwia0TkvaT3lriAi5JqaGjjx1f2WHkPbor56y52VCy+JlCXFEFQjP/J+OncZ455HxTIMNeuMKyHbtF3M1k9FnQ2jQYa+JVex3DAycBnPT07AQEPiqmmAS4EBmM6KkxYP1JJAWSZy7aVUacnz1xigfpmnJdNb5Pypsj1a+qLs805nyxiCjl7AUPB+nId9NRWRnUWbJRnGbp//sF1yZzsAY1ciuhSdHYE8tOs0M21PeEf1wwyM7Nuhrspq9BUpt4X0HDKoj5Zn7k3JwhBfaDv+sqDkYjxlADohBxHxFeTCMBvDENCZEMu3UziUikbE6f7pWwu4aQhC3+ZJ9ewECb3oDwft2d84qpiqogaS6T3stOwbYBLqmteGNYwLiPTRDjO4W0KqxOE4Nr2xPOBpnD3ocvXNtYP3a2XMJ0ZWY4UZsSNh++d5FmI95lr4y/kQAgk3e5ZZnQPwvDLAmc9aNZAtvuWaf6yJ3VOAVpXPaWgt/KpUTtbLkDZWe4hQ/8vQmBBlWeGpFFEAj/5L9vHCQWYQr9zo5KdIS0aF4h2sPitVLd8Ni0hzY+3DYPEtMEc3akvUrsYUy/3OseRx9uSIbnrZQWJQ1WKxAr7HuOJtmJQq1CmVQ6NHOGH46jDkKz5dqIntcgoQLcC7tJofEITardG27FARx6/2F7NUkCYOlheCgTxfaJmU5bmg9rL3cUldtUccl8PEuYSD4myPgKQ+k7pIsUNglP5QNAsJF/gvtTRUJ6K/V6C7+1gnrReCc6aJso4qsKpbgDuC6QtBbM1lyRUaUZ85XXWR7dKFlv3Q1n4nvaW/pyU6sFuLIL3ogf7HPfxgq8lNOjLEpTf2da9YnH8LPxPqHJbwU1BqH1TDz2S9MNdbjGPIWmsLx8SXVh1qxgrmVcU5T6q1jguErfImU/6aw3R4kA6uzAUKyLlhEI52EcS2gie0XYBG2qdpWV8ATz31/bOCimgflZiHKUr9r2dVIsYAwNP/uq1Xu7bUGBsGAsNcv5Df2pqxdb4g0Cg/cJAPcfnZyYzAg6yeVB6GlO3iP/L8e78XcZYzYcSdAMm0NbF02V2Cqd5CPhmJooRdFOeChVWPVehL/EVMPtLTdmt85/740+E0bzHpSU59cqRccmyInpWWJUvwK9HAGqLH1iaq/HQxXwa6hO2xNwDRslaXl6+KU0R4izX2RtXLV5YFgTGM8ng0LcEBwHpnP5Pr24KSjMsIbcs6YiYeU7WjWXdgRDzu5lPYe0QNL4Kq6CLeOS0SaoM0FAmjwPZ0fD14SUOA334C2j+DqBjW4uiWR5F+NGnlQoHFovS8YA5Kc+sjMO2/a/vKXHHDd6AHrgbu2L6ocp7X98kaOd4VzwUDN5d7C3MfX4EdzIlzusHWu6o38Q04AsfnuqX2K7mKnQ/6R9SFHSMdNvc/1ZG6cEhcfpMdgUAA9u7vDvAjXdSDciR7MloSTH1ITLXMhTy8Y6taSHz8yUkYy7roGeD3qdLKGB+17seUrvbW4ad6n1n4uYUkoqJN2PA2h0/logmsRaPesak7zblUqK7XWt2hOQurmZ7l3/rrBCmj1p70c7LgLQ0wd7ZJKxaqtRW0ZNfMskZDIDp4q89zizf58KLaYFVyyFaMytuXB4orxgd2VhM9DouUyL0oKxQ5shyNpCLLz7uJRLt2vYs62WeR7pOoZUsIE2YaNWPu8Jr10wDAN89SdhHX3yMjH64XJmuAL3OFChitT036VNebS4Cf+1hKYzG8cv41P5bYa+ar8kXn4R+pCvxQdXwMonV8VhQgVeDcS1O0QrMXd/0dBz652tXReeUDPcU2+Qcayhu6fPYcK8HhAFyvsZuMpuwxiwEWfqQD8rCMlMH0/rQntM2EPXleyjrtVow4R8eYEjCN72VsA3O+wktnj8sxtoVScEhSCxc5gfMb9+xG2jQAp0wuMJVzO5AWLon+GcbHI19nhsAYOzzTaeabIR3ULGOyWDJviKt+a2ADBGC4Ju2qBQaRXuJdDB9Mz9WPKowBX7uGu0jfDUxAmZkhvtlQI+tpoKJ5lSnTJJ6tmk2UyTf8mwbHq33MwjqyD5zrKIu4aU9BocmtAzJ8hKNLGVDPIt4N+bCTDztqIwc2WdowTUcWzQUG0Pi0fhy22d01Wg/6JFSyUPi6SKoBy4VvfCjoZ0DWX1JzCMONCnLXvoYQJThqJHE0BIHXF9c9RYR8bLlFU57ez660yey1YcHneNbBR1Uq44ebHeUtyFdPrQZIQ2xpFpkMZFEGC1TcajRpDy38KO6b5Yopr8wtJBZPZq7Yz4Rw0cj3L4RUKAigaoeiS8jwkPUJLIiW0tbyZXVRW18hc/Pg/hcCK82w5hm+PFIlWvfxDIQugXyNfWAJOJ9FS9FfLhbNAdSwa+ml9zTeiI7+xYhWqB7kVgr2rmZmglF98i78w34orcnYoCt/Ojml/XTSJeEi9XbD0+gehei165WVfW2mcgs7101PhpXNh453rEy01QO7zSfAnJ3seVxc5LW0+xYKDYOpf5zzG/De7+FMGOuqvrGnHtOmRDt9S98UiD1ZI7rh+5ZmBwlEe5ALfGoYz7JghLIxxs+WpRKmMax8Smf14oFShPksr/r8fXAcpJsRAQiC0vhtl5MDWKHv/aI73CUlOVYNghwpgC7E6DUOZJerSU0N/HwOgxj5aVwyTlatxY+yGZY2y2VQ1acOhlg/nr2TUHhyexVLw1d4c3LUOPir75+xHM9ieNgxCdCOo60jwvFrHCC4nPTLInSCD38BoIq+DJV3YozFG7e5NZPxI4IfWx5+nLRKJdz/Oed+geZH7B6fRSXjXSpOBiD54jtpYnyi00wlOfZIcUZkGuP1QLoRmZEVOI4/PXrBtkD2/iIakBfrPkGp2Cv2gmrNWhx8NFSUhJ9bHKK3lU9BFQ9CtBUy1xQXc+7MkR2RSf6JVwdinHIwqYSGFQ614NeMbfEPPgud4I9B6e9c5T0Akgia3fse9q8HIdnAwg7zJMFzaoa16qJJ7ZySzsAng+6qETlQT08s1F0sile+ofqybRwT3hxAJwsCUOI/nD5PEvRGhZ6Y3nFJ0+/6mB0JG2Ux05TrK25SKHilDf/7IMZfnRUY9itk9Dm4IQmz9dnRvBJY2LDOHIc7LKmjUk7mFK0F0IPq90sJkr5TWg/FmkXVRz1QJlzo3GBp//vVa1IEyN5sH+qGpe7q9j3vqAHtXmdrnXweB04+nVHv1Ab2t+QzDE9a4MoIH0lhDeqtKw4WZj/nIPlUijW7mUvUKGi3KWmfWt3+hQwMnSgzQgcJBF3S/ejtR2qpbK6ZKwNNzYFF4sZapCS1DJ1UYOb1FYi+jAiH6KTc5dGzKNhYvIt03tPXjrR/xMjk6nyttdWF+sZOZ5uU/lzq2HV6qbWSXqNTfgKM3khRf41snovjlV0jUk3Xig6mK/Inbz7EU5a0w4pQ5OAavjexc56W2BtPOSTdO8uKDTu8WfmzQRecIhdtSDCKqtqH6f95Ua2u3KfJy2tvwrC55OI0P7H5oAZTWZVMFbAg9+q8RPKTLJOivIDN/AvT5nadjq6FwI37AZdVhztfk5Vq4hqEmnRH+eO7pfO7SbhK27iAiyrfaWIfH9MY2RyWAVFODJRSWs+pVZUVKRBCjoqdFvh+4zId46RE27ksVnRBl0YJuLekdJYqUmrVSgokIOW/CD+52DJ9x6og6Foyo6BgBjJNDZVoLvS1eXbuOwnyY8EYgY2WKGqTjLdj/dsrLn4gOUoZae/LPaIKGUIE07yYdPv+Sy6axP1hAkd27oPUN6FcaqSrYuIoo70rtiSrqsEV464EQVin/QH15JlEDJhaHlY/e6YBo8ZrhT7Ull3JnvyumwIIoRWXLJJ6GT9ZNM1Fhzam1YvrOvE7qNIPgKzRpWzve3t+KFHO6iLeU5aGvde0p8x/rcEdZ1GPIiBuzB3Ib6bMnABG/dNhTZGgzMqRvaI+kNs75zVJMV44UY/29Gy0wcz7F2o9lcpudyM12OHysvBfhOd3+YNVa2GEbiinLln/C2KSNvpFVx2LPW4JYbY+m072aRbRmtuZRvreLqo6yjvZO5h4hJNxITkUpVY8cyjgMWJjOfhuaK4C3c/LolerE6u69WxIcgxTKpLTwn+1NQSzbM0vO3PZx2+0JQq26BGnlx6NYAFO4Ep/y0rymkHbXDyP3tyMatFgdugYiflyN0ISdh3ROvn8mjLi14ovr8fFMGT7cc577HiYqI45MSXPBA53eW0sz4h7SS34tTf2hmyFRX+EuckoS6s3vLWsbtw3xtSWVehD2wbCi94bm/NvkaVR8hvbnBgPJLv6/mlR+iEhRsjuxi2F6Tq4kOdWmgd468sbl3xOBheRJKuK8DLnXFgoqusH+mHxwy1wY8ebo4HEqOTAejjX88PoDaZhf6+sxclY6CPvGnO8I3EUNyNRRzuZ52QhjQyG4rru/yItJT3jHxqFCcAIQZ/C1xNJhWzmV5SF1Ta6aryTTyIC5+a47+i8tqxjVSjJX35wfd8yM41jU0abhKMAzg3u6Uug1yMC5j8t7A8ktAZAKDfW6lLkbL8admSDG3Hf9AJjKckegc+9+WcXca4k854vu7EqYFnO6mZH7mV5n4kjVYZtN9ZJ71h3J/q0pfgZBFRrxrX8h5x4XbaOPfSJ1sWIUZwO0GDIp4xQbc942S7jDv6uTygdQmKQIUhAaV8qyUTGnYB43ra8rTSdb5P4k24Ng7WEVuAnrpmLt+4Mn4QPoeghhB+/PkH1MmGss4plLGgWWp3Xfk6TNWifeqT7Kpy+hIs+IPoiYWk/an5ahU0AZA/40nIvBRTUM9bJHi56j8XPLz5izPd+e3Okvsg8rQBkfulgYySKGMJiMaXVLwCKENYD9fqjf9hjXKMKh4c0wnKjgRL0NcbJRi0zJPt/W10+SLyu0Ufj2WY04bfTZ441wAqLVonrveUIHUAZhbGsgTvL88EGJFDGG4JGzem3+pJTzUHgurf8JNMte0dc6T9330fgKo1IXpsWEprp5gWUmpegNqKQMImdmpnnOWeOKdE3Ox0DYNimgXMzYxYPAnlP0dOxeMZ67jL119PwariNtgGKtWTkDf+23T4bVd7Nt0b3Pki0x4rVtBI4/7Uf9ZrMwcvDaUhEBXtfcJMyTtcKKDeaQUp9dMYk97CCY6kgPrzNArzegAE2FCn4O49y0fFlkyz4Ds0EAFXfw/gHmpLosIABNbyQug1PTWPiPOPI2PKSVOgsJSQvOyJWdiC5IwihMit23EDNJRvxCRetfldLwLHHBVkTQGhiHc1GYR20uBeQcvkurDdVwKrG4hHMn3AG/CuV8eZtpUuqz0D80J2LkG4LkxekjVrRSxKkHmx/RoSu6v+7C/Tr9yoIJTB6KQDtvXqp94MPTuBjKD/JRHQ1xXc0gL0VjSf7PmqsnX8yZN6yhr3HDLR8gLUyfRGKN7GgzWsdfUtBtpklIALf4nGbexTW8tvxQJ+qnuTA3lNnpz7XOuj30Z+Jyabs/0MbX/TpWMtvZfrbYXRhvZC5AbUyIPavXuOi4TYqVOGKJXau2zptuJj+ST5LY99Nq4n30DCORRg+Lj/f3V+yJK8cZmoCHDn2x+OAnKl4QLSdkluvpfWCjtiBjFNM6li9boOQYixWiLQyr1p8S4z7HKk/fp+n9XNlWrPSaqoF4P3QVeWrr2AKh/uT85eiEhQ1b5qxZe2+iYmebtZ6sZBjotJbb2pLkd/KqGPmoke07gyFcvQTwmQiFq3VTkBXY/1ZRskYvHpTW35MaKDLK8ejO82FAvoXJaTLta+3jk1NdzWj0s604Mnz9w0FO13rZSBp9O/Vydkh1vfduOioNvOf2wOXEcvUjdYhTArFV99EUqgf6wvfR2ZoZvDMUWMa4tKZqKIGw2VT5+5fbJUs34RMyET3FSVdxg6D4tz8lle4zl/+eFEqHjppfII6jWDDzjkrJYmEK0UfRtF5IbnDh2Kr3PHDbv9XUomBUzKO1uZyaTaGnH97OCX5d5B31tM8XO6y40e0fSKXyuy92WWI1XI7hCbG1/vozee1xj+N/fioFA37Y9LJ3dN8qqetOMnoqVoCIbbO3p5AfudLbjP2ZXyrjyauZ90GC7q8TFlznZh63fIkJT1tYXIBcKpOqs0QZkNOO0l+D/uJ66nLA6TsfBUkl6S0tWNrebHfJSwq1HG4PN9gK57gKDcHmlcF8SkMB3ir5w9umMXjLWBodh18+xTqNORKOdbLHk2vs3tSSdM77P+u7PxG/T3oo5XwUafvxTUtceJxMhAuIOAw7PoMM3QDldV48shPkFyzXYsJ56R6uViUy2HqA0WWp55MxY9OI1T5F+9al9ebmwlR6a658g4goHRilP3i28G5XBA3Wl3mlKA+kS1CCINbveQ7aPwYIyUGUmOobID6u5TMqpxCkVziAJBzIf5YdEJPQylZyUqejRhxnJjthqkTAfdniVYoQlgAqd25AO0wFikQFQsZjwr5ntpWbJtrnxKYMowEsAE/rT2Jte28O6eZXo8lgAmCOMyOJh9vJMgV84sYihJHurW+pA9QX+G0OTeCPVGhB8A8cjoISKLH6F2w5LWXl5NJtM0vKXu8OyYVh2EFr8hxRCaBqN/1NSHEax4UgIwiY5hTxswYGJ/76J7GsinFAcnZy5rEwLFGap/pkFCJ8rgCyRBFHmZyDhHqq3HkSwIPP/eXq4wBieYLKIf2kxiiS93iYT+zidEYT2Iim8DeROm0sN+gxPR/B10jwNFnRMoy3ygmvUIKUhzSx+8vnV5B2fydxvpqxAkQvohgegPIKP0tt72IRWH3infTodzxuIcXsnIOH21lKpheJdZoGHxJ2OGDghX4hR5fgGs4GVuS3avHW3+a/a5iSXNdC+GBnAPrrdxqLNuRroRzHB7Ca1/3dj0PuQup6KLt4X79vS1Bb+du9n89tWB2rWuPjW2oZyS+z2YePIFmYbTYb05u4Mifkt9eSGwo0qmMbIPQAsHR9U++/EwOajPFy3eVUiT5N/6Ih8j7gVk5R2gPl6Kh5GQDQwANS5wjneuQLPjjx74WeyZXVZ9l4z/FKquLooRhBASuCRStkdVxA2n3+471PyOnmsgQpDOlJB7HFyACGc+o84XG0vtp/YJh/dyNN7dFMNCBjA7qjYnUMy259QPx/sjiopOmlAfAdCR8ru/cVag424PHIL6gk+nDQWysfpPodEGyCas0FGw1BE5wmHcpy4gZBALxeqkpXj2FjpV1j2/SBjvjUtF/P5onq/rC1ODjFGwPwcYi+pFrHhdL0e72xE0brqg+vdubKuC7JEDXu8+1Cnrp/JTDzwJKDj8WrYZ08KY2KZ3onaAGMZ5Qhw8YDQ88a1ZFhhC4ogv31TR/blxBMPRRvGMxz5X/4hpLTDD9Y2ImR9k5K/7Jy14n5Neeg9cREqNiTla7FW3U2VJP6KNTpm+LB3dl+gF4w7nCVLlPnSFqRCouwqmSkluqAXZXGGfvY6XPh9MJU/SFf/eXzFxENtCnaIPkGprlwXghIT/csvaAZhslnFfXS/2emMdSQqwbGK3hSS/fW4uaZ2XvNeF+dPTH+QJBHgsSvt+Ir0ZR9ZGWeBuntH7VlkoKpykmbgtIyC6/Wc/4OPkfHrSrc70HKRPkmwJngZ0sSUFEkl2BOx4/yL/70zGLYjeWSg9k4C3TRtM55QnD3Tv421rHFC1JhM+zptvLydjfhvokHW9T/OyE4+6kXzqLuSsgxe85yJhQcfh6+SijVA+6Ei7z8OuDx6YaEDB4zILSzu2+xuP62Li70eHwBH9jndKQFFSADJMKgUIPk7gr2okx2ZJDlTxqujbc5ptbuWdBGa04wHjsI7t+gJR9dWfgla2dgCHCpd5K1XXUavwcAOUYFreFaDtAlJQKVZAW6Xdvo/B2rct/zgWeYZnsVI8pN3mmQEgULWq7uWfJyKH0tpRY+GTdWL/RCLQxaIPswtRnwc/s96R0jlrdvLhD6GwDEMkLhGCfM+nQf4aXE/l7P43g57rgga7S5xr+H2Se8XYipNRJ8THLoqAXYiTMUtLCnAbBONMo/Q+/L1KmLG9piR2ZCT0uCkgZZM1jwHvkTSSBFd24gJyKX6LP4KStHka+UrIVB/W3QGmrdk6CVF6yjWGE5Q1gRfIYvI3SlL2KUkHIjMm0/4Swj8rVr1fbcZU7ZTLvfRZg4qb5su1IpbAUn2nvSmKc09Mgon78Ji+7ZXavvICu4oxl4wE0d+4+iaAqFoOFFRfHniGY4tdPqw3S/n1abkPcqI2AhMl35j/RqaOSTN1zks40IWtLwqVF3oaewExMrPW33Rt/fITZA97ZXhiDJDKIaYRnB+Es9hEgWCOO1+uOWLT6mz8ESEe8QA8RqVsDHhr/eocz6ASb3KaSMDr1VEhexnUIuvbfMTtADalUXYW3Nrye5E529obYZWcSqx9nLBNfoxqiIIO3dm/hd0h1gb7K+y2g8BnJ1KV921VgCD0pbiRgLmkzejZmYtusm5DMpbfIYQ/of6PGgPgYbP80yUZlgCPBXUhYOwvpngGwSIZsmWZCYvzjHdaMLmU/j8OWSyFKBIlzJbSFty6tL3vqNcpyeOFjeVCALcIA1ssd6CcXwVg1OPES8aV25SC4f2DgaUr50OnxTd58m0M3cPhVvNpesnQlLOYQ/CeQg6xpnEHOIGdJj8BjCblrVjJiELkipsXZpRVA16l7rzyovNt8wOKkMqikjyyPj05x7uRIu7WaD+kGD0qBs5RKWx8bKTKwcsFgZtA4POinQlSnCD3gD1QJYg69Sxv7tap9bOYZXA1YOA4Bahy/0VcYsF+r9ihS3H/CrnKXaTuakFS6iIbWRqVlA6++p+e/FIUBLegEyvA8kABGQTcuYTCiiZR5LFyI20sTYCDbpc8d8yG1147VwVFjKRRkznpKGAtMCyhkH70KAjyeShinyoyU0234R3Bvgx9J8OQav6cc2cDg3QIFMDFhf4/GYDdLiHuI7gytIxZGkagt5dpHpY3qM53cNyO7o+uyOy4DUGT6wpHF9r8r38WAWdU9ASaCXbl3vXDWDpHWGVhnOM2R/Fl9MfbG0rLxbQFqZ571fPo4oCuxmn91bi0l+UWgtjWHbH4knGXtslDCJfirzfzsrNG3MEhD3cW9MYV22fs0t09jNDHUrjxksrPNMzsQJiSn+AWVa+h3Uc8UDCA2b8KmnCdQn/XUnBGIwHg38CktLw0/4Unt2vE9rr+N+ILcP4GsWSxnK8Mc8aNdNlJrOz5vzApzkW7c8GIaj66MJrwoWr6GWjSl4a6BDcPN8055EBtsDKHoydGwiGD0/rWSlA6n+FIju/P7fI2ioyb687ZpDbwHHKkoChgULpBTgHRXhvIepo4UwbrG/bcKoZDcCwliba86y17TFibt3+ORHMmvF2VDzMrjSCyC9qKd4/mSJrnkIhPcAZxq1Q5YV2qdi4mjIL0pj2CyK2jyx+7qoMDcPOIcv/iOeJUYTm3B5Aoy54sFvMQBG0vKtXwFByqnTzUrTKibvyuEH8Kq0a8lpXQdUEnw9Bl/exRZzHYp/1YXUpRcMye967a8g4n8+z5lzTxOM87vecw/xSfnIHzs3lEPB5iVi19hNSsXrbHdaT9h9YLRLf2aAl6h9j5uaRYvczidHQHD9T+JSU1AqdruZ8vEEzLwgKH1Rwx6I9qB02UiL6bIArIR8LolCl59RwgrOhsfmyERB+VCtlqULhJQdDtcBdF1bvIiDmla6QoCcjaBPEaeiuD+ZK8jPkvS7ig42XRWkMhL2NTk+MyrKv23PcH3vCi5VdkuY5qHDyRQBno8gqj1UB3PQRkCrld7ehS1JyQVQ54OiSlAFqeDMEWlyiYnzWKlrR0yiMCVo8t+Rb+4gp1UNdZL6ABLUC/KRg8ufpQiOX6uLfFfHH8WIcXuCWlQ8Vg8hrwf596iJ0xKqEkiFvJQa/027LMdBat/gqB74g1ZG/jslfYXSxzpZOekU/ub3dI6bkMHYcRG/JA1ptpTQ+LSl+NZCnTsoHcWFJTg607aS5xplDA9v54ItFpq6zDNpbT636ohzmuUU7wIgYguNLZdMDpBmizjUembpxpMq8lNTVj+Gj7VSFUURAi8hLalYDQDnELIT9t6cyq95mmLM47KpAH91+GDvSU+6NYfz7hg7yy1RTkkFJ2ShAcKSgPx8YME/xS/cSSQSz+T5Iq3PYY/b4hiLqHZP9chrCx1aQDJQeAikDZXepJgUBtiqGbBnxxG/vw2v4TWEX6bCEWUL9GdY8s1DTdr6jQJrI/cPWMmNFI8keFw7k9FVsj29PLqPp6uPPOaK+imH6ZdHi7KlI8jAztA6UQ/m2a17LAOItUDw9F/ax3w2Fwz76D5+YFgBTws0tJu1ItJ0A+6A+9ENa+iC37sCyVO4OHNs2O2i0pmSs2EELPLYGqfTkRvupOEKFQ+jikkyONqPqjKlExDsI2DGJ9Ct0cxSp/Nc2fbhZbSjSz56iaf7ygJm/NhZdDFCrxblVQKNBNPcxFALGWFBGmPOd6OQeGCy3j7OSWNZ0TIA8y6sji6+/CDjDLsoiE8SU1SouGxGlxaKlJkk/Fg6YW2nTz5wBb6oq4REvlSbstxnlTOsjWeV/KOEqr8Yx9t6a1aHZdAXG9dW0mFR1FQtsJEkdNc2w1GtNpa0cL84SGDPqTjVURzr6hXG1asyE17INxKZHmYoD3/v4h59oYu2XD0QEYurmHC6s0aeqnUqDMkamNLgA7UBR4vDId+z5uDpvdKtkCryjlxhN0a0X+Wkzg20pXTxZUURM8sx4BNJauaJFCLWrOk04XblKjD0wRntPDH5l3R7YX7221d2MGj77YY2KVQc6u4SxtMskvJi303Da4qtoUf2TymuHGAKtEIOKjLW0QFeRdrBgS9buOgKJ0Dkn2dkKsClmS02i6L0Nbkbuawmt8VolK/fYka51Wft2gKcN5V7+KjaaFgG+pFcwIXbO9K1LMgQ/uybGqYvoAIO/2RoKjqK9aHcsbTeyfqrVghmIsgPC6ptLnal9bMsSh3o95vrADqz4nIGa/2+Ug8+thO7pdL0/NrSOS4/AYXSkm7SI1jQLc4rvYq8eVksUhYUQZhXxSwK3r6unqfqjLntCygRCXcljkzitZ4N76XHWWKwADkoecyZLZaOlMDvElFgszW3FH3JngSgGdgN7Lf1Qugu2l7KPTMQen7vlYDb4NQz7wKq+IU51rOSZ/DrX+4cms6Bvc7NkZ0b/4VFGcXl/X/5QxEyaDlVbm+Ay3NZ3dgbt3SsEa4l7ytROhFtvfEH+/2zqsLrWW9JMCYnKfVmLt8A4obofHPNsgTUQiQvZ1KqlrQkXDkkYOjt6N6c9ndgbU08LU9xveaWeGuW77Er5ANW4yDcNqSymVC/vCLDliFGYELVmjAjjlQbGgKQY1YISS1RCDD/jI5VRw6dNueoagLqVwoXzAQf4L5ZhV8EHwW5M4DlFzKt6exNIzq3NEfjzg4Uu8OwKBUggCZv8s4dNHEoheufQ2MO2wYNrOmwYSi566mUSP4JApIgxxdWid0/cOByoL3xpUPUaq4SLTHiPRf5WCtFyLm7Nb9yWgwKV6AsNtIsBVI4GDNVEsAcVXZUbQIAm9QOs9kkiTpDe1iRWefu37akA2P71Ge4mnvwr1sFbzfFg3C0uq19CZ4l0kE/qaCJgnGCgSIJBIgNhIRpMUCp8fyxoAF7Rn67sn4TBSQxhbqJEmNqzfk+WVR2/FQjPjbY8d8JEo7A1OPKbQHXCqoqhy9xorI3xn7yFDISmf4v6A+u4k/l963ABiLROst099bXtIIkHKoAS2lZyZRbuTAXqPNEtWTND3GhtV4dc4hhkojkWwalyCHrrim2jvlS1kK5rIjIkChWrAPJ7+YQ829e7ZBlJu2EdFLPd+pI2+I2AIURk9YOhvxxTOWUHWzA2EDs7PvU5du+RJVrKlN/J49TD8+qFBFVXMbz5rFDrokyeCXknjz0SZCWsc55jPAAKTPr4juH39cT1DE20ZgNS1Gbu1w54FkCJCpIcwEIM6uaM7tB46o8wRVb2efMijX1TdOuSMw0O4fh7YH2Pi8JMBr1D6GTsPrzJJ9nIDxVBEE0JRIdFVwTEBM1eip2DzTNBS64fycFkSFQ6ujnrXxRNv4K2yXMU8Yodqs6nNmF9r+W7yuNU+yi+12jHizWGvBJ6ma+kmX4LO6opiM6famsJQS1fRDz3DwAEdK2YG26GwILeQquF0ZplfdO8k6N8fEW7U62yzUopVnPZsVCH2q4nEt0tfC2mxYUfBy3lXZGwq7AuupdvfksaCNyaSd3iQk4TOSsl3Kmff70omYlGhoQ2OXycWK63d/Hk7L0i0h1pFArHrU79/nB18stPDe8NtNEj9fLhR+GgO5Qrfog3tZJJXeg4y+OlVOQsZ5174EWH20HoV17Bt/oeBLEyfog8+VJ3RE4ihb1YRFYlTakttawYuBwcE7neUG/rRjD2nt3+ppz1hChEuMyjnDFpyjYkhH+m1TS2lKpvsIPfIldGwwDhy3caROlfC8R3BJL5I8aYvfUDxDBWqYQv0NW2Qq6Q7pHYi0seF4mkPOBXcA0ycEAKtjWTYnnldYC5Zu0RKfy3eXJJAWr9fLoPdS7lw95Dh0SFfi0ZuI8/h4qE8UdAYGi8Iu8ucLCksPHVs7mxaNIhdxgfxv1KeRP64VAlth/q2kN+SkY86mU4WyFWs/hdA2nyXf6RsODJYqZZ8Uo3aYRk1I8QgnWA5Pu/TNzP/nQBf5O+trspLw5dkUu9hAUUf/p5naH55wpX0lxk4B6a5KZf349S73wyKWIyIfJwHI4JSzw1A4ttcGLfwy+ZjHmUp748rw9gmTzhs7c0OsPXEqqNKoFzMixxmzBDoEyxOlEJ1614v0cYY8Ha6hiXuvHiLYTgsZOJXzpp2YpWWCQ+9F7hr9WspKVWv+UjrUW33Cbu1JWsBSSPzwliry3JZ8BLtoMAdhZ/ue8B+tT4bChkdmcpu39FA2rT+fhS0c0miz4E/m6QkfgsDsk3ujF7Hvic4FWlyNbwGoBhYfnY4C9/JVnoCWsT7zAZoa8IWXr0KiXQKiC6oHLsuALBV6L+COo/KWh2ihDavjJP/kJp6aGsvv9dOe3aZg50DwjVMbgeE1kAM8FdQfwAItR0DwwrBnV3DGCXfi2nnmXcS3aiU0y/X7KeFUwEMVwzesdbeZcT/okBOSdtaAUPWSc8EQVV1RLzqSKHGdMxC8AYLL5PvJs410bi1h8qwFbiJtUVQBxbWE0dhc/Lyy8RTbY8kXHlsx1GRLfWA9xPzScQDCZJimMNrDUCA86SSWSsBE/B4Jr0caRMk2cCPTxCPE67Qr4ZSU7v+wxTT7uZ27MaRWVPj5RoUjBYMWyManJnEtFhbt00r3kmKzjCjDhp4BD4GegQymQpB7ePTtZnd/YvlI/39lmZWLU2D3LMd4MNQmx27FzO/N/0d0QOK61dr5JpxIqzQ1SiLaO0RtoSa7HKvUX7BhpJdzmBnkNF0UjRhD+OHHVS9w8Ko7g+OUDEBKKxxMsIsNur1eGGGGaDQXcldZGaF1Cy+4bpN85EMAjOWuuVWrPZZ+wk2tKui0JRMRecGEP8a/+mg2nUjHB9NLQeSNDPj8cYPXSDx7u8xcwDhdcjvsIVef37MgQhYlcrclS2XE/NljSqpPGZJlla7/1njyU3OtWl2j6K/cl48cFuOZBUUxaq08/l6BaaCkhLtrosy4/FR4Oc6iy1d+MNwisFP0h4ebjt7yI790M67nFlU9i2SJa+V8MjghnTcoU16I3IMYZORH2qFdaYENlnAMuuU5ENel4nUGdQTPEt66LpHe4ECtB0pFzFN/MJu3NO29QKhmhsVBgDWLgPQcY0AhVDL6QU1XaoixWfvbNJAhINfbHw2JuiO8dA2P32RIT3/ZyZu1c617plkWB2jC4INAOmni9qOlbaxcYvBpoOkuMrsPT6L56mNC8TjUDtXZa1X7jj/oOPg4HUhz1B1fjvyOZe8uTIUk1dZQje/i8kJHUg598dEKX39VCXtC5urLzAmf1YCXPX3tuBhhBmoBI34t3GvfK2CGj8u3B65O2ASyqSUD0jU0P2tsanLt1u+8KcTKzl/eqOVWbuUBEnMFo/6GFSZ4EtJ1ST+6sw7C+46HjDw8s9iEgZPOyFKkuiGRQFNqCWo2tIfFiOAWiNKSJd6Xalg+4I1uofnIM8k9Fd6/KyOjfg3edfL+dEH9xh4D3Lrfwr6umSXHrIpHd5unvtLUbHOUo2GIS6mZsoIoehIBaq+bncKL38HFbQtgEgTLz/UurBOZTSzRD8DyD2jmW7sgNH8uQ7cbICj1pzdO8txXEaRm70ThQJo/7p+Ki2Cf8UeqSSk3pZvabddjhWenATBuCSFOmLI5ev8y5ajFQboGzeZep7lx/h/k9GsLjcg2cDx9t5SugMsnQyTUDjz6GNRvZPJnnGXpesLfbgCCsZsY6/kjFb1izNVOXuRM3Fneu0bQf5B+uMqsN3aW2oRS8WJhCX7J0NPp7kbKB0jiq3H62SSw5/+ipr/3kIzCI1xr1CA+2VaJvTMPeF8vN8oNZkKmRqI7fpLqpfO9O8XnifqcXOrZicJsLixciFxJ+gz5Bsi3oqFutk2Fw7gLtGQuSnlcxWGdUcGNoXz7vD9pUDirezIXxC/dFO9LOscaXdn/jAvDoLNcoy7b6xZjtz6mSEjoevNDo+K74gsxbS1qwZWFvbeYYSpatvbeYiDqkeXkZd4IDJ6KBB4bNtkNgf8EKBmK27n8KK4J/yZ342osOJVz6KmaiWUc5+uCrgH8EzM4K70oL2oQTRapx1o4RN8+XRTFnL1pS9bEy6LMXkF77syyAu4YXUR5PtTmNAymycRq0jSIxPiCKcU8mYic+2ufZQ2i3FaO0bNYB6reZd/24FpkYIL0CyU6wSClzboD0J5368eWrgUPXlqCRf8HDB5VdjypHM/NIyh9YbW7nV9vt5CKwy8Q9ekFJVrPPmarNgTfqDbslNa/Vo64Y2+31O/11bxC7XoXiXClMKDVx7GB6plRze6xHLlG6z4MT5C9jsaAUoW+04e9rsS+P9JHlVC1rDusBm1o/94JmwX1lzUbYip4xNsUUk4MVtaPqMngn+0fAEFJfXo/2XUZtmuQX3lausxj+i9E58tA5l0/a3167FaUQvEChtUtevF4V+mlKdKmtiOrCKtrevrSAj69vKXAnXWq3QHFVM98R0QBdSdrDM3vk5X/OQBaMdiz8KfNJovLBiKDj26v2RplR0Pu9dx0+S5B/mZzaRXXZx8QLUnGHQVkjr0mUNNOgwS47mA8QCOqxRrdDZreKrmsBKo4GW8zE2woiZ6f6zYMvyq3Th/HJSxe3gK4XxGpVaS8LGjP3wFLy84hczzs6YblA9Y1Eytr8V8opVKbNkWitgx3d2seGvIJpImvbChRerR4ZdU+G1V+zzwKfDB0AOqDpq/5hvZI94EYTo8i4BjqxptDdZaozGG9MzP5lg9efsoeOmTPDtHprmqk+P7CPVpqtcpsK0jRB7/1ucWDmwfMyd2OL/SxvEQ1OvFcdx/yhMDkesj29BE33x8CvX5zvqdpYMLekX7AIePYs7omTWz8WD7fcZe9b73EGL57gW9yBEc3MiW7eQAKa7M08TcDDhwTLcue83po5o/oK3ioGJ7NEIJ4hv8m7UhcMw93OYd4Qm6tg/JNtoeSrgkfe965aGVOUNRciNQ4vXOCy/w8SYSB+yOv7a9n71zSvX3hJB8TQwGfu+9DfxsC6I4vyCTdyG3J2CxM0PGgViyjW/5yefSq5TOQyZH+cD9+YnC8rlngPKtWjqlRjVWBWyuLOURmVwxfRyzM1x5Mj+w1MjNlXd4ueWJNi5xJxPn68E/R2Iy6DurdrfdRH5IPzSBCLcToc8l2E1hENYjJ+Q8pExBw99Nf7mxBYMAK+VPlcsInyDtgLIW/QCUPLfqZY4pzExsCDuFh6lJLDvyrjFkMqO2jkNDqUFeFC0I82Z6Qvdn0GbzP8xxD1LoGiNSxHhCM+Z02i1pn2MJW5L9KI61ObXZ1y8oEu2WS/ul/aezkqDQI7Y3e9J3sJbht+y8EH5nv6xXHPtF6gtzjuLczysWWISDVIVnsa+s7ufA4LhhWWtlGLPPuVfzsAYpBQQVK+N/ENl0nMAA3yJs4go2aqoXr+4DvMKhlDN6Mcas9I2wRLUdmKvkKadTcqQKz/fHVt2njLxEy5UO43enty35RuxrhIU9XT/m2K3ADUlkx/8cZFP8U5jDwsJmR5EsLkZmYZQNQVGaCLibWwlLPz8q177IKUeRKxWrAecSc5EhgP0wHFUN+29sw/5+Gutbjia4fdB4Ews9c87PLaVN8Wy03DYSUFyEyU1I6EgoRsMbuGWS6iXCD5uxcK3t+jdCKqCcEdjM39eZlc/6xQybVw5Q9z7OmmwNDmdifdIKaVoDO/L1LaG8CT8uLMqGscxoguKnOANp9gaTRYaZkHH4U/ky5YBBo+BL6FGcYoFh4BEZ/woZCd6PsZnpoj/M70trQ+QBBVtCjyQNU9Ah5NRvBvq80+m2HPW7ajOqk5ZeXUBvL2EfWUyrwMD4RR03dSD3HOc1KXHba+YKjxfbopC4aL7McVThNaKitOgjVvRAmrPSKuRZZBZh5GUpNQiEPU+NN40hRzekBoPC+qBgSVQpE3Xm1jIqFAaW9iHNgI5qdoivuVlIPLMFOUa4NXLimD2xTrekmeH6D+8h/6tU03+zUMNgGWzvn7qImFMGRjC3xRC7tW9Gumm89Jv8ERQ5yzHk9P4x7h7wLLmSh+a/ewffoYt1pwdSHvcJi7gDrqgq+9bK8JouUq3RqM3DGncR4dxsV4ZUcymlW+Jykp+POw69yv1rOH8ZkUdkrndzbEwmrKGkLl6JjNR+g0YThA20KH+kwhG4sDMmqal6OZNy1r7yOBjbgNFkgBNjDzNze+S+tcWOz/Oe2wFTtl8+lqL95NAjswWllur5ak3c+Uje4pp15ET3QodpMsBBDc4hTD+ljUxh3UubTQUTDoQnVOcalhADDwc/aOpNX0z/L1NRN2Qt3cUuUSc020tEco1HpTXEFIvihf/4BrvkCCj6wm/fiOFgUp/faTLiCKF+y6v7lB9yOsMhrZ2WAST+Lfotfnzm/i5pMSWlI3r/0cA6roLyRAPrwpjRwa42TtQA6GnleKG6nD0oy4oMpIJ+mu2JP6BfoTK92r+mMAqyevHTdjr1YlMoBT+2vlMthkvAyJK/25KBNwg0DWI6AdtiMvNhx2Zu4KcNK8nBhYnilC7pb1MCrjJs/+EsVXKevp9TtbMiDpfo6DQju1lC+AzgbPJedESeohcXs7E8TvBQtF3i7ymt6EDrfMpGGqF63fR0Z97KD3HOfq7PHw/gPaxTDpZJeB/wV20ZVN8LL7Lue0VI6RQfRSghMXz4U2PJVmyyjP8LRinAex5XGIfZVCR2nXCYtMvjv5EVaKSgLeJHvbyQyeJIHEycfXceP1PAz8W3uvbgC3+Vunp3wup8fF16VHJtTVR2YjwaAdckzXp19i48qmJz5Q1RieWjYyOZGaxyFVp8tJeCwsiz8kDxnZQ4FpyrkjjM9FX0A+O+Nf24tA38VcnyWW1Ah2lwezDVJYb6cKEk/BESxUGKTmdDW2ZFEpkl+sOMMLE6nX3DmwPx610le06yzoXF7KCPVLAKujcl57dcysfMQ/XycMLVPCFp2Jw6puXIvwJYuyWlzjHXj0RzBz7NWVWIgHGoTuBhhabNCW+JJ1WwaA+SDd5ca0FtBVlsecVThCpJVtzzng4cedLg21aciyypw2MmgZUxLLFVahxMsPbf2DRCo9yAFkZWfA2vsb6rr5zqgk14p32kCVQYowO9cWBEU8rrVcDng3Iw6ktgVKqq1pBc1R+ka8oigGEv16dL5mqsuIVDc8oAfRu23sXpQjtfc+X7Nwj00yDxPJmGF+xwklfziHggWiu6HwJ6OmyJ5NRWkI/zAiUeku6d94jRbs5Hhk5MDw2h4/LQPc01RvlRQKAhaHp8bQ24W/5qw/LOzMO9lq+rOM8rVSIe+lc7J8eVpbCNkIzaOLqdSmZpkLS3YGAduIE/lTJ5nXic8HIlaE3nbVB/MOCJINmY4YIomGXFLBSDVh9NVvEVeJ8JcS6S0MKLwmsaBKd4+O61R5r/Vg76v/XBSozDXOGzN3xvYkx0584/YNOJCvhos7YMQiy16B0DffDg/BYJfFELCUK4YiTamrCPZZnWXiX2YHPgDhPnR3B4kkTd/JoAdTPd8EnqK8fd1D4hQloG5sXk4ald9/1t3TaabuB7faH0jF0ERaONMjKGXvttZOSjQ7au0FTcGCL0syxIlrWmB3IKJL9WRFCZXbWJp0KeCRQIaYLjutpaFTOPaX15UJK84i3gtXMjH49lowimWZJkL5C9JpOechOSVom4n4UrHXndbU7u7O3RK93Fwx/cAdYkiPy4m5ODXlpacrL48yCtgW2MzyAOYlXzn9XS1gOKl9jaAZTIDZpy+c1IPR9nmKw/Ax0MtaCwojRkgd3XlVj5BSnYkBw87xTx+M6K2zhMi65MW/AQcGZ4g6Cm6Wmqx2wKZ47CsRioCuX0/u0Pxrjk3KM8GzwPilz7p5qXUWMQ/k577HMt6RTyWmlEjq78kWPJDXzKoJNBqWI5wodo5aks4bQu7l4r9T1N5vPM8cEQsnnHBK2tGXkmZra7egKy39z8RMexyP1ugBd8O5OY7KJeYCv9NTl3iUkL1ES/WyuGigyE98cMT9konhhlqNEa6xNCMKavvoPvT4757MXNMWJA3QcuLif0Fsk4Ei8Js3r8RlcpqavSHSLdY0CkVyq2YxiFiA4nzQyvdymbrjoQ09qeSL25utDn02PnPxZVNOAvt8gdlpi7kRTxGOA8GI3QcHwJ0WI1PXfnyIRBF2AFEPcEFBCtm7RwxD6LJgOwEUsCR87PgL2l5RAqWa3pE5USBRw+hMahv3dDCTSQ86pO+OV24/yEag97UT6jMLo7lkfsHRRpuBIeijTFElx+YRGBT2wBCP3SfiQq82wXYPWmkP8q5AMDT+R+1DHIvPBDrMxuqaNHdQHTKx9gYHn2f8ZWurZRiEP68RFd4V3d1/IprblZjECDT74DRWkPd7PXeeLEIGSBOJIN05PEx427LVc5vv12L0qBZd52OgDJ9ZiIXZ1vJcas0iipVXeemFs+40b3BOqUCsJ4IunOSeQT2CvdN6deKEsF8R6bn1MlG45/DJgsNFGb0QKOsk3ovW1hFt+uFsEuI/x5lG95DoSCCLBWSLT+Ad2yrJJ5IobXEPwpszThKuaC8n3NjnKhYlUqce141ZXi/TzzMmy00SVoXE4DCObW/ijOZpP5MjhHzxrE+B58y34ywxFQ01klEL28jID89DDZSqsnTgLCc3paQoZbRNwVOfxgvPT+QirJOm6sMnYdvUgrOPWHNFJQLkJXDwLREkq2PMgbzxfZY9UEXc8ZrfKdPWqt7yn/WDEF9PL9lZdGJ4o1jTjB7OuGHQgcgiLLBlBHu5PtqDNLQ211sMaIceXBedfXn6HOMYQnFwDWLYMwHkygRlBx422bp4IdbS4IJNgCbczH/O7jWAuFX1my9UJW/VcGKWkbG3BXI2f2CzTFW83Av8YbWWn+6750dteg1ouXTt2lcboh9g78s9x5ylgL62S6mXAL7X7dpqIb11cFK/P0S1ppgWVjYZ6qxTHMkwqeit60qr/wowYwUwYvKrqPeabjgCuYlqrtJ5EEdteYc1ZGKoDKWkI5mCr1dCPL21wkmD/S+fij3mmqkdt/jO3DBSsYOf7HuGFVU4jRW7IC3DwU9+gLSSRWMkpYcZjfzZZ5fVXdWiS9vbrmzuohakdl9u05TXbYyKCpDMt0PB/8eONJgJgqVij6Zr5yfdeRHOh+xC49T/AX/YnpW6dHRq6+QqFQgGk/2VWnjrejhmOfoRyxVo7W4rcfKgXogRVHGU7KhawNbosKieGdwGscUeML3dgnO9PUqvu2rMa5YMwpm3vun3ib3Kw+CIHIzyX2VeFpe+vN2x3V2SO6Qe3um4dkC07RlCStZNmsYtZAoOXRkUhc8zYP7bsL5a+WqQ55mF4m+Du2Q3KDd8TRdxl6q9t9wdz8OUNuRjjAr2c/gOfZy1ehX22Uf4czCvE/u1j2ribvQ8AMCb4lnZA6p/Yb1bMpu7YTYiTeEBbiurYEnAdaY03z6sgTs9UmmumNI3xm7bj26qIPViSMbsxGjicygc5K5IDg0NCJy748cEZbq1z+WyUE7oJWrpE0ScuDyD9WesoolJHJ0Pdi5W3upketmtbrfc9fP5eaQn9HuyHsrZt/JrhCPf+hwk+My3txAnWpO9b+a6MGZyRpt3CQmaR5pR+UOSu5xYdJCoQw1yprN8O36+5v4C1aEUEUyXC8Mr26MJkvkMqJqxBCCE9obZ7J0+QZaF6BQkDmhXWh/V/mdzDb6LDhs7IwSLCMo919zpvRM9N9KRznenbxH0moudRtaJaAQfE44GnhTrtHJm16IEVw+YiMGotiQsBJJ/sp7o7/tBxsobdX5r2L3mI3Idb3Kq733ECixjrEtQEG12PFNMybJEds3lg+qm5vwDqiyHWBBNfBk4tgSOXRlXoyGxxYRHKMExNm9FoPLpCtC3niHeMWz36d9cjfhAE2sMhLe279oJRVu9yoH0OitBteYcu497hBbqy25I6T2yzlH24br51cqeGYl+e26Jr6Dh49VnzSR7ayRtlmIuYMS0RMcwIqQuLvy0Ydokuj4BYGRChLQTC4ITLoGSjY7IgdYx56HxjLuh7e/kHm0Cj/KqjDyn8QAqkZrhhoMtTTIjwHAbHF2RVzzA6eE4ZFanJS/JUjybK78xLXG3nittFZymlUcsvHtSiysbpxE3JCbs9F/gHOZIZp/wQWyZyK8Jt9/D9nUvoSCahHgItYDpchTldIzAUkQu85P/rbChWPnpyLOTd3OfnJ9VUYfPH+WurmDqzFJk0UC2fRU5pViJKQWurU6DTRHahO281aKplcq5Wg38n/wlQdX9rJnVHOIfFUa3yj9oMVqAPrgu9ZfC7kjxRp5fMEsyhLUqT9l8VRbtWHCdRb9QJSxrXqTby8Gha7hfXIsOWwuGIzZO9kKu2O332qxbcs9eVfAJVjaFP4OgyMFhDAvX2xBa8X8hmcslyMTkRSWyQot2NHrlC1GTLgZhF0vCjdr/MzN/0DBGSQg7d2SqBrX4Noh1z/fLHItF4K/wMNekUh/FB7Gpg6p8YMHjUUdaA3Iopw0zHJFWOf0J4rqQZHn/POIqTUGTotMT353uhVg7gAYB/0pACY8qjKrbZqbnljtFcpHr/TFcx0Bjj97rLIcgLwp7ytyfmKcR4CNHSsB1qPB07RlmFpLgfN7yhqBmYvseRGJoITVjBBQo/qWnGd9sgb4rsA35uZdryPOo98qq4w7s0R2FKFptLlgu0VXNiF88Bc/Y7l6BO6bCL+uP6QOXGY4kMlznlMcAup3q2Tq3S2BUD24sp5RWgZqYGIfD4ehOAUwcgkdGZ8qlQMbOFHXVz5y6JEWGZz6PZMG9T4mUcqPM6FdborqGI1s/9k5TCr9m45DAMI87RGjXxWFBPFNjAqpST2ldZcuqDUsw+ex+xE0K2bW6lNZpQa8Kj7gU0NvxwYKMwYzft3qnXMcewTzyAYaUGE25zG87NT3P6OpomkePWv4yQ0nUFL0UIdx0moRcAk58CJ6fPgxddyJPDNnYij6Ei/mHBJCFNRrEHzqBPqz/Q9tgkmsxZCR7m9UwSSQUPiWjI5kKtlKp9W1BpSF5m1Wl1j8gHAkZ8WRoNctAwY+wBVG8eBRJStfyUUzEoJ7Qf3qurqTwurxECysFAxGOIJj3QhUWKlHJsqcRNAiHir8Ev+0+PEijMEM+zwFg5e2cUNrj+PqTnzz2TR8PMz173ACWTFFjQg1xAY9x0Os6by4nc7Jqv+jbyh8xTqJaeKE6152doT6HdECKY8ieOnXLxDCXI1gNcmYHq5BjWOEEnRBJDC6eIDWo7N+LUPWU5ZIFM2VIhK9tiGaFJgkzM2B10/7LszO0lEeo5F7++2Gi20EFYvURAFHV7X0cyhOWuoH6fOKgdBmcaiTRzKBzUWLgtBp4iOh74rlPcKGZvkxDSIkdszzvRgG4YcMaSSeJPeGjTpIitoFdwn6crDQ76/YYv1rjdA4goIDM5e55+9Tg9gLwk0YqsNtNI2jrom7GuY8lA/vV8EDVgm1Sju+7cQGedSplQe+Y3va8L7zADpAcOKHdOenXn7A4JVi05vgxCEgcNAjZAHi99BHo6Sr5g9MwN07uV7AG4uPCdc1wP2ePfIei/UOMGmAPEb+QEeoZ108CpCWCh2pAoaqvQDoT6xDoRX/bNINJY4Pfc/j0HOx3FjN3G/mIWs0cA3r7iWH2IZbWFyRPEsLn1wqv7P0ZfzahnfJgegXZFAKi0Gltee8ZXKKj5JBuuN98flHoFLluhMSvVDxAkGmyykXFPT0zuXRdGtDncQYn01SyrlqLNN1k2/YqyoUjIBKzOUHdNbfGRa7TX0TCId7eVK1hI2siAIv5kBPf65uHhKPWpGe6knJHfiIi0dphU2QoJVTAKy0QNV4qpEIfWhbgh+UWH2b3fUHQA2DAfHq1tetD5RT+30Gs/xEysXwoIKsCw2jEUCJctBGfYjKC+3DWrZgFEnWUyVoL4AJ5i25/QqeTenNwo3mkyvDLHuiXP/yqGWW8Lp9qpw3k8ruEeRQSWM6h2fGpH7SO6Nyx6Y2/bQ0pNEzqw4Xqh1gt0Z3x+PJrBAWGBAGQCq+pndJkXIwFe3Pm449I85CDBe1c09bjA/EaItjVpU0lrQdF0CVjgYND68Js0QMd9O6vyp3js3SH+RRFd4kEL7D8LXp6ToOULdvgAmFUcPigrl0vanqW52pcRsr+m8HYVUZ6TRq6TlxsoDBQ4zgypReSsQu7xfrc4zyWae7uzK/IkDIwPtmRWT1KTASK+ifOtMwOOagDnwVr7DJG4kofHlzEgmics5G+o40PQak90M3sEb9m/sRodcd8F62J/hM249EnZaQ5Z6y7dt0TpS4pDLNcS13QOQhzpATpxiPDjvarJyeJGmdV3eTXScJEWt6s6AehkEKoQu3sP2/+R7H+/Y4JfSR07fsmGZWSlD32zTtgBuD11feVIByEiwDykieqrdbDaUKuZdFgjUFVYqcdJqwAGwykFmP/8KgSl7CiX51rclVZBGq7TZzGt79AUcLe6aLHlFJBt2yiUlZAcVEGkhk8pshT/JNUJSpmvPjdxvK/0zUKeKqFGcMchzOmrbrAsi5mlBpc2wWjU9BWxYhLy+eGhpc5DQvgPt/RaiFifvxZWI1Z8d4bLipWS9d40HZHqExWFQecXx1mVizrohRnuafJN8Z9Lyvzr8SyPXRzfh217kmDCu5FlJPhoJYKlxBp9HGklxq+NkMdkZMexkaQJuRo4J8+dup9Wgf6g/gFz+MdEgg5l2J/6df70JM9/L6xBLTA+jNjDiHDwKu3ib9UiOCwO7TmpRwTU7/GIKsYnVKtqNPATW9T1uojeeosM/YMOviCwnfIHc2BRMGv8x0UL+3bhcCU1zhGjLAcagtrnLJuYaZXoKPM5DpbfIg8mbPIKfNg2S86MglGSqHqiNQTDy6w4JpJQEJC0IXs3JMCmuQlKf6xXK0ZjTpJV7FFDcE7sB3gBFrEmo0lHVlMLDUTuv+/8Co+1UW7LDZhGKdP/SsTWzgNagLAnCZzhY1Bhs8VghNrgNKLo3sOm69xlxVb3GHGsGDwDRYopee841h8Ugg1+QTzzXhG3NcnVbn0L2pbumFS7VfUW/J1lXH67dUQNbIV9mkIpiD+9KIn3tydLWbEE0LWOvGbdsXNtpNuCjHKx6XDm6jt/L+AwS7tIn+xnxL8WVGqVACPTuQNx7iQFEmy9KFe1fvalGPjCQnIlKaiPo8PQgIz6Pw3raHLx4xQsuhNUgtPa7iDltcIqnYWv3+kxS9Xyjvm3WX+x62JCdZqsZrTr7dS/2fn2/vMKnDiZiDQY/Mikz1da5sRVBrDX2/ARk79bpOvHcbPOv0KENDbfCf1iRftDyzMLYG7vfK76qjHjOCsU3BjZcIs7rSqzUeqYBKhkIVpqmPGNuvk0wT85vEx1B4lkoy0JL5VOo4NMYbDYa55eyNUqFobjvN5DySkSPQFz9FHWEFPiqM6DlCCtYSlZR9sFSRdP1rEShgWtikMwviUoW1Pwj/6GVb3wWhuCtaTVYoYrRMhlJMI/9tnyUGkTA6y04g6m9FBLDS3QyQtURqKJBscSzxaJC5m3p44JPvn7QXIOrnuamR4zn0MSyWelNk+siIwXXQQCUlUtjFFin4QPy1EuRllIMspsFfhcX2jL4mAYgeB4JQOnyZSce7yOCOswySA9dNgIHcx1uirX/iQOKiadJM749ad+HFCy+A5Zi2LIqxWmFTLVxzOoVdDUcBRCmzuVkf5vVMABLnhdomryHcmlHULiuXu8JUlkYi7sgzo34w5PuItcOoXbvVlPwF5Tb+LROQESj8Xt6c2QqoBa+UZlRuzdjetBkqgzzZgpSf99Qpq9w5SvNhB2D8EBZCPmgqbgUDO7Xos6tx5Cc/TqvJbxoKhelHrK9c+zHoyf9iQathKVui9DostNg4X+mBdR5Svq+xGVgEI+Co9N/TIPavEBAQygDjjsK2MpITzRmd+ttKUPyPwE7JcIzfinTgubzhQumoKaGITZJKZQXcwNAjTkHFDtWbqwK2W4nSqqRts2I5dd9qxF0Un3Mdwifv7QBXq1iF/B1rlOYF0JVpng/6IY5k4WAObQXSfCL5n/9d4eOaCjvYO4Q7OFYI5I4150RVUnd8hMqDtyC/nelS5/JvoYxv6Xg/Kcmg7Be0nJaNyvLKY8MYBuUeWV5xKffIUONzwb8XTVsCbx+5E7/ps0ZK/nSWh10nBHo/7uN98/1W35yXKg+vYNczhkZzeCei/xNs0lc/HL5hAszYU7MBV5NiY44wqYMwo6HTDN4HbC35b3Gtj9SHjQF2G7ZIYUQ2wJzrzMQJGV0le9y0Ds8/k1GZKLGbfmy5xTEQDIft1rIUrHUbE5IrJenJ8ONvEeywAAqVdUXivr0scR45kbroBEDi5bK3Ujpq/cZkq4l9HZ1NIcoDHTrE2E3Hcv0If/476Vxmu75j36TageTshn+DbP5kkhKPYmm+1PSIM9DSmLCs+YlwTBcpy+sOPqBMfE7G0/YVKRwJAI4d7CbcaaXOpWXyqMyrCUuYFLBlJquRYloNQsYY+Gej+7cw67rdrvyaxkAAJ6guba4a4WcwV4FxgRQSZk5YpmTbrJr/BrrJCXZS7iPKsUMuYpJmDOtSNmJoSS0+6OhRxDwgltz9HL/6h6gKkzpaValpy9hzOh4qrpIU1wfmN9onkczggbIWHYi2Gy8pZnxjUsHP5o1MhMCGQjbHm7De9fS9Eg/cbCg8zAM6V/UqcD/LlW9v9/iuY1lUmop1cKi2kZto5FlRypn7lnE7hhUUfPPzH0Avgchbj2FK1OLsOZVWiEuZvtlqhPZAGGtkEeWWr/Pn/1CqpRNF/PSi/gl0ZrMXETvDvYQvW8sbtDeK9EI3EIIn20OF/RCHsxanAKl4uQjkAtnSrfFBG4ObdeIc5/jzEniI8aSw/WDJ3xIUE05NuAIJImqVxzVmRVRCi0y/IPpFEzCbJu1z0jh91DJMIsu+jGAGkmiaU5pl8uBDzTN6AesvO5KNUjgSKELk37z2IP+RB3ix23nN4vJzX6wdT+T2k/a4ZpZLiCFH4ZK4htq1gFgRNnPs05JKYHkjXJgVZX6DBhKbgfBvXaM1DMigxeVALRC8C11QXpCzJQiCsQYuubnjColJzSlPOaf4g4VRhbFz4JGR1htfR/6U7JK2miH/B2cKDgbismiOgZ01v7qfzNNVXKv1e4kSaHjuo/09A983ftl1gezrKKQFd1oDI1zfmWfcH0M5mlzJ3DkkAqqOgPiv4ZfGSTpsOhfUS5ObmzB50QEiHA5riGvdHFDNjy8RDXbSgh36UwCdTx800AMA9lZSKXtCQ/c+m6URvV6HHCCsf+C194gk8GGODemRiv3CGNqVII4Mjokac9mGQIjoqlnSszlHm+bnilv0/zgBVe0qYXfcmVpPKn2U8Hi2Yj7injGfq/64ugwetZcBRWdQMcSmtm8T7QwtfGojs50U0XGHH6fbePeSQrL8rQZUunHjpg07CmAk3AEdEX3doJihD5m4nNRNixS44dmx8k6N4DI9OmfHHgBHnoqGIOwHjpeBuL9z6a8xYivtfuCO+Qhx1Zkpz3TtBTnQqng2GMGTQDndxoGq3xsT7JtpVlIbx3fCMMY9/CEFHH8bppE8+0kY06k1dUyksr8wYuVfzSYpcYJ23xvgYbbHWhKbuGdlnBIb1FuTQmkxVpjve1MncHfC2KwRlK5SgVH9zdKxXwLKQZxlgHB2b+W/uq0zstdP8/p7pUBIK6Os0/cbLTciP7WJT77dvhGiKBxanQwKc8+/6mJiypxQoh6HI+E/48MYUlx8H2SaTcpF+6FwWIKPj02W6XtJ1A6lQ6SguVwL/1Qg87Tm6rIQ7UnNCfqrB3M0ktjISwyVKnDeV016Z1w6FjblsZdAfEGys2s6Qdq2qDNCZCpOLW9N491FDtfNqj5wmfgKKyiF4VM7U2jiPSfsaAgCrqe9hrkG39vfA787ggu02o2zaHkwO/QyMkr9AwsQMeRMC4OzdEaIBK+nf01y4jh5U1hViAiNiP06UtdBAt3YS271c2ldsxY/vuLZpLZXL0yyrCeasOVVq8SK/vnaY5c62VU4gP8TGiLj7MR8y0s/Nvy0k/rYeKDD9C1Vi7wsGJdMf51WMPqWv63RVFKm7OZXKIMXwp1oUGAEhnJmapaLRTf9kDBWN3h6i4oxlf3jrzO4tvoeI9lQ2LOPXdkoODMcJUb0yZGpBwv4+/0X9IX+BKKrsPs0Oi8QhBc3zQav1pRpdoqXh4P62RZpMarI7SdY95LG446Zbnr0I7md98XiNl2Z9vUIi/QBWCvzwWGBLJJJ4bgJOzoovql40/eiz6Y96JaddAEGWxtZx0THjYk+CgZ8UPAJQBjej4Snwr2wRDjGlYpADpyNkgmOwQrPo56ksUvrUNlgzKTIUqg0fuRlTH8O22fTFLcWf/UczAy2bPBoo7nMG4+PM/EDoX3Ry/8TJWi6qkuBikvz9lowxW2mVzgNRGFLGuGJGhbIpQu9H6TDfMF+Xh99XbbITf0AJ1FxJGDzi6QE/gnfWHwlAzdtFotTZ67+1C9HIopTO6xsu1sp5PizGByIoC21B8JvtUvuXmJ0pUDD/TSEzs+OqvHELlCn75MFGlmvk7uPYCBWWpcVIah3zcnPWsMfQqm1njKCQK5YdJ/WjcuNCv+90vqdPEECdjZcFBOQzbQUPnWyrYpw7nqWdX0m3J7Kw3vc14/ZWoQkRuZDPBd8GzEDJj27iq3+CnpLWuG+bpnr+VfTGNMj3K+gzpEKFudi+hAF29kpSaKj7OkGii4f16T+u20TnyxnL6y3giWeinfmNMJe0alu+ufBI28KFF5g5Vh+uvBzt9GKcA9RbrMrPZH4jcZFK8E3Q3vjPeUUXYG88qMMMJP7YWQTm29XKw0xt7mdPOWIn4JmcMCDDOI1Z+R2s2OR7cSk+NuVwbTz6jZDDK8k3EOE+GWB45PWDk3Kqjp8RHQZk97jxX9dHzrWF0sKffuO+HW/oJCpfTwU3wSCINVo+TrbZfLk/7Djs5fK92KKeXUfkyHjBjmNiTsY0fFkW2+/83y60XD6ZLEOibmx29wFk92HpmSIBSP+jMyzaSSoGrXDUm5vCIRq4qeeVwYuI5f+aWCy1sVg1eIjZ4o7tA+d6hkKIorqB0hHDDXPr1cWAlGNIySQC6V7hluFFORYDYqqnjdxL5mj0Lju6WRyYne0rw/U12uQJC8IlAdpRXbJz8YtRLsj6MusIBn/J0MtC1mLshpjHqXvDmIwjd0OBSZIzeBQ/bsYHyoUgVt0nu20NnWeArUvr77YVMBc6AIs/GUUNQ8XxBgkaHpLzMU89OJGzulI1iR4sxihfml33+5EplQFjDo2Xxh9DsSImd25SGs9S2F6QfZtLgQkuAYfw3thciwLmo6RgYAWeQYgULOdQKlaaJn4756+iItnz4G+u4c+rGFt1KWXlEl0vpVQgSgEgx8rAYuw+iROR+3OmcxrgMAFV2LmaOcDb/a528jQ+OD4A8zqBVIF69on/bOVzwDBjckT/1Xh3AtkSzu8UQsEUnldP3daAwYch8jGLEZcZkZ7NPFYUxYdfu/Z85FJOX98YskX0WZL+E8mnLfI3aRMvRaBq9Td9cqPsnixawxCHbXU/Y16L3145ThLpnc4JnZwTfYxK71P4fLijL0cL5eLX3KpymzKgaNOEOl1DtUs45LROBbguEJlUocKM2FlpYLqwKO9Sl2MnlJATIZ1UsEdNjbqQQQ+HeapMmcv6pQkTpEmifQCYJSUOj5la/+RdGgn5Pf9umvD8l6zCWS1kNx8wYBvG6pf9dPEs3HN0KVxxCSpk8b+TDJQVCcjpUiWYUp/dYTSLS/heMfTDZMUpNxDtdAB9pN5l8peywp22wVJxQnbN3TjFCy9MjpoLpSZK67s8IFk+VxX/FyFwPcjLI2MDNylsLjFoaLPGqYKiww6G+DAYxwohLlrXXKGTpyw97rfyT5HdJGk1gHCekznmz19loHtZlUXZAdOZOx4BzQxlr1jpctvQ0CUS0T3WceiFr1cy5GcKhzT9wnG/DRmRKdBtIHe5Ssu/2Vw/dUmfGUqHomKuGABQERaSWhmjQsnzgFv7OkzJUZA5steQz4SQ/BSpaxN0BRsqwmztMdP0+e7MDYFc5TSYn82ZwrYO9jSIDE9zb11H3SuDMpNQw4zIbhOWK+H30W8jprJD4xNEkrOjS+JuSdMjxl/7TafjemjRLOguIo5e+C/w/itzyzb6+GeNsXJyHbcHTyo50RDZ4xs725k4asVfzuZqqQQe1hOGtud1LHARa09oGrt4WgjFe2wuT8vobtN5RGeHmvtYJCz2n/7eeiI148RzaOzyYiIN2kuAuPEGzWNzUlCkxOeE1iS7imvaB6xYgUrbCPbewY/6hqHG4KWfNy4xbQCAAP4UgBTXuCQ6pwj9tGtwK05mhkNH6wFJr4U4KHvlrpAQitlWVIuQJh8L7+AkkuHMWkraqkcPgqKh7KUbmza12Ck58BJhXpW1AGGCc8prSUsO6qCYI5IwlkDEcm0cJeK8Pu7vHok6lbc67/+ip8f3rOa+De52g2SflLziL8DC+aaTCm1nQ7r2Yp6YIlm6Er+DdmHMP0zLrzMbNoe3j7ecrRTGqztTSEhvXYzxr40f37SG3TfYyIFJtPz5gY9aaehbI205vS2e2An4KCBxARYTDs7ulb+p4xUXeohYv4OB4HbhPLgLD89IA7AWElpBB0Dt9ROGWepDST74JI4dGzeGltnQHtO8+g7EPadPRbVsPbCnL4f/3KIv3LWqxEqEGh2jJsWWOp/ABygHAViq5y1kOzGry/eYceAhNPjt1PRX0a5Xn7YykCCLWf/sRrM75xPAIZsCT0/HzXc9zAkLSPseNCdLNfx4j6+D522Tu1R4J4VsuGBAs3YGit1hAl3Qg765YMQit1XSR3VO/ao3zIJSkDrc3e2n8bgVJOFLj3+LC436NxszsWERph2/FF0YCcnGPF1svwnpCJSKgUtMJmh0veMHPKf6Ao4GK/iVGNKq5dKyfkPxxOd2XTbsXWlkedbDXYe0SUox0j2BoQ+RtmSGVazMUe8lY0Zoiua2bZyRusz9w7YyKyWNPN6/WBzMjCcaesyKuL193Yvplomap/iRGRNsF2x4HaZcc00UJ0DCQiZg3emlE3woB72v7mQMgRFDNoWkxDVtZz77pIxbPZl9Dx3xh8Fy7dQDsPQt0dwBSmHAgXObGq5UexugXyYvaV4eqnGfElB/zcGrWdQtPHd5fxpKpW3+P3dk5Pt5ciqeG6WXcscvreTDVDADh1grLd54uDakj4K4EnOBggcjz5qTQ/W2sPqc4sW+8c75y8kYkYePy1lsLdNKe5kvexuu71V41HaWXzAkWINKtfEEvoZqP3UaGxJZwIDJou65aD2TKoFk/gCPBEiVvDfIC5GEGsuthgyCBpEE/53DclkT7ZIxVWdI94sSMsQ+RyMdfYlx5ZZ9TzRQ9BZP6uZYQr5Umhupz51D6c357h8XBBhXRYjirZ4CX6KudqGq0mVOMm8ddEP72TTZvAiuRHruRpYGM0veCskUoacTVh/MWoho4DVMOS7rNyco9PLrWBjieFIGTkRp5F+ekb9Iqkj+R7Swd5/b0s/IAac4oKu4TUy4uGkTt4BdmdV6koEeR5iT7aAvjmCUurgSV6EMYQYVl3bZcJ1ar49w+N1j0Ui5dlM6Q0hXZuXUSlRpsRajfoxLnRthuZJhONLNUrlLZWGKfM5iNJnZTY10JZvoisCDsVzkkMswR7ygDlig0PxPf4XbgmHe1Xp2TluXiNAG5Z+m/wZ7pFyhXypAUNcGiG945i/as5Ep0pMIwGU9IyGto94XcXpv0mGrWvfxX6pJS9/9mimL1VV8MMK39LuLipGbNclHehLcYcyl98IIbroiK32SBWJXVeQi7Xlu5ccOMX6qqQHQ2kw0zh/mbaiKU67tDrYn1QbfgOOyNDfb6oJaQr1GlMdGhz7LPo49jEWtGoG8BGTikjvCo1tSuz5nT783WM1R/HqHzsrseLDOf32eZ6D282aPQZ1GAb4syeFuzTgMGUzTA/TebKTSzGgLifOAwkepMWGqDd7fjLH9GySOkxteI6Q2WFvVwenpc+uriScvXg9sbIr8GU8JERUri8bLcdQBm9kkOu3cmqHXwrh9ztveM6UV9DssKpQh/n8ddvsQhh+VhRjtSIbL+eH7Qc7YywQH8njopQkK5vvvUsyfyQFRPwCPk+twc+n1Kq0aVcjIuJQjfT/tLf7yu5UT6VvBUOoyp5SHsva//1h/ILUXl2hJP9abvLf0UYQ08fCTPzteZr0bsA5sO59PN2r6wtm4JDMdGsXqvSKLDqg4xNxCvXFnah/VMK4uGCnhuPmf/L19k2CgwSmS978hfjN631f+jg4Nwz6mkyDJg63EFFD4tqd7xAZrvIFZacRAD66j/WlBmy+DMy1UT24M+TL8ie0HUAFLbhRrFDlMd+e0zn+OBVYweFnqqNy34QN1nd4PkeUlHQDEyg4tbhBedyQPu62ooSN/ujLAAPvNcQRRl8SB9VucfTSWZ4DBL+fIlMuzQ+7rilAKXhLdCwSVObx6J3+krX717YpF0ZLSpVvZ7tA2pnMgpjlAaVw9nfn/oJDhiI6RDvsKOyLHVFQ7wkzvD++omsF6t1tjBn/ss7vlwpFwB6f8YGS4eGkoq52N/vAWomRRGVzVXI10NngjroqLZ7T0x6NzB68qpogD69spmtVtbPvwcGf9gkuGGFl2uohXM0lMcFf/M1e/5gyAiC36BhVrdRS1D6gRxkVLCHtX49LZUgxdgf3k46qYQ54MTlQ1PFYGDoMU7AqJCJVgTqWlAhmre/VReMCmQ5AA8MCLZvFLUC6J+WnJyAs2fasmGnHAcwRPVy2ODNq1mjb4gxyJvoBrf/GZh2wzl7Pw8u+Sl8B/6HX6zrFmZUARJ892cJ+2cc1z8PSW0TMim/lod50PoAFYQ307JxeK9TdHJ8MC52ItDpLzQcPMMJtRV9AFzl7IMns5wK6syie7xotoOwSbsqcAYPBm5VCyfVEXaPkAxjA+l7NxsNSse4+k1Ud53HpwhL+cFZn2/NQkZX0cghdcYjT3O2bWJS6MB82ZC9QDUBs0bIhE7G668EGbFWZMdZ/dUHOKh3BA9sSKs6oVvrZWvDRHJF0b7yZpNYIIjQ4xPzpzpIJeaLZiVpGFg/Uh601kLAmV4csafYBxwmX6UGdjnZ8GcQrS/X6nmVZCRNbIkVJGWhlE1Zlfdnt3oCD8erfbV+8zKk35uapoxIQJRWYypw0WbbcYJvr4CD2rvrDotIXleuRwZQWGYf1XHNm/pFTUxLyk9N12yYcr8LwalGP4cxnkVb461bsJaa1DuAxiJeYvr+pWKUsktA+cQq7EQpV5NcHMbsPk1yDDJqUWWTB627wul2ISsH6vdhHjtDWRLxNd/8sHQ+5M5rtkDulm3h1Oz3GPIgOl/yoilsoa3cVhRjBpl0hSyRVNN2iF/UfpQl2zUlqDrRbI5Dv5EVwuCjJHUAz2uJsWh2zDf3qYVB8AlHKqziJky7ybfTHKbf5mBvr2edrohWTvbTd9l1vvrrgtriqd59R7uQZAwfxiAS9L3BBvcC2Ol7/R6u1qklmMmwYFJmx4nqQ1KJebTBVKuS5vSkH0LCdXoF4BTROdNNXVAuz4L46hksKKyU1kUduu3Hv9E09MKxXwcgj8J3u5SwUAyUGgGuqVw78bYjl+OGH/9ya2C7jBJpLAKjwZR+LnpZDhssJ3DLcFJkoXrikNCVU3mBb5oUXqws5bDeFMeQ2vZbgNf3N84sE28GGAUmtPfkGdYwvVAN2gwikzp/pTzuD9dr3shzqGN7mt0jDDzfLebsvMt8bQDhNP45E40DIemesVs+BsUFmaBLS84yYtQaco9CfsLHVVwT5F/yS7smWZQZhoYQcP1vXvDbEXWaEzDQq66ofNBWBgpBn+mfQRQmLAvmEj5YCNnUrjGtawHay/Ic9NRoFv1AB/kL3PZYhyeYQMp+9kpm3+nzFVIIwkV3FyKb/vIl392rLtM0xE42B7rbDYIEsJcta6euWUjqp6x4/xphbDV14Bft6QcWadS4HujpUEiVdDKR9HV1EvjiLt9dJOkRLY0tN57TxSIApPs0a86Sk9chKClYCfEOf9ISRl+l+C8C+ryOMVqQDBOzwxjrs9UsqU8X/JMmN6w7dYKBzIthDJB53P0Osk7NipfkbnTB0LX0ibf0uxEy9yYAn9Qow4rT1dHAk40ityDX1qXnU3UpqJzcdq5EPnNbftKLWqF3+Bvd1a5Ga2+9mh03vehqjjJ8iaNi4gkNNuFSzVBDDTiMqB3nlMuMBN73/wKqBkjyuXkOtHRjMUPqBMmJym8f2DWVv+0D4iIC1GMg+/EfBmO25+yfIGTEkrLYEMa9vRzs4YAiBE1Av3J9D/qTLv+PWlfUPci8JOpwKMVvUFBRc9FoAo3Z83EH2ubE0mY6hmVr90wU0kVdhQE9je9SmSXf3x2+Nf/2kBrtffegVIXIm4SThgI366v0E4i2R15PH2Vrye5cxeveIX91IJq5m5zEPe7z9sIVcbHbcUGu8NP/GP6WlaPnhXJdwTvm3bXbI66d4BBX1qML4Bt0VcwGC66NTZKcIgyN9rWRC839bqkn+PoO2JiRq1OYtEj4o4wPlOvW+OLMZvGrEwtMdjgfPovdLs8p1Zd1BTW1Msv04ShXrUhZ3t3xNWTXUbw5G/Fvult9X3CDb2NbmSiPT7B+n7GWVMmCRCuuD7BR+QMHDLuVxZFl1vDn+4Kw3N3Ylcot6yie3OWU9Z0cOedZtvjzg6S7nj/mYItBYbT1WBqydHWsNcp1ZttqtDG4csecBH4iOTI+sL3xDUW9RYJfyEbzbdVM6kGvJw0paIBxQ9wcvD281xg+4arC/hhLUy+OELZQbsEYezKteoB/NN+xBUK/BTYGQZkexk5sJ3RDfQPJn2H/sA8ECiEZj/CjyEpqVXFtUqZyoPBFxJM0Fmu72NYifEb9KnEvU7Ye2EqOehMZqWWwYPaEILZ5DvvoJ9BuBKEdp9aGOpa+D5mPfLItz9SGe1shnFSXpf0LLccLFUyJEjGafocSNZIQ+lQiyWUN9Mh6dQBziBbWBiJz66666rXG4zPyitL507XjpC9wZg++PBvIzUn+GzTrFZldrSPHkmexUqY5OMZL2aL877mAcZxp1HZWPP0H1mLiPbsUqG/CghH3hKt8Jr05EKlW90C98Q626zTxdn8tr1wO6hFjbwjF6jXJKt8hLtcR9QYop8H1z+9UX2BcjUFgY/FsIoq+ljS4yGv7bEEMXIvqTi2LlQQoaukUbjpp0/W3qiYBCVovw0CoMV8yocn0cXUeBK3uC1F5dnubvajlug9GYfD4c00+PTVL6S2WS3nO7rKWSe2NJMA3pAhGW3UGrGyQplMTXLLA63LAbaJqIxP/G9DpyI/v+F0PWgS0Tx+UiGkoVOin6VN61NhBt06JMA/h+gl5ta2fiC2TVRYB+IDWJ8PBA1lP6O4qOSu8HaqoZ5ezxICGlUu/2Fa1Y2wdpdrina0ZBd4nut2ZJ5kg11c/LoJ0iCxYnaFYtdIGXkhQej7MWc8x+H+XETvpDJLgtAOKho8K/qc5zK6kPNrotNDrYSedaVjGD4MZSxHqU91xjnaurL/VHo8LHCAhmSbxOctj95vYbvjAJTgQzRWwmCM4bsuDoq8D36oIyxKZGRe6441de5yt+cxCL0lcVZiyTyg5tu0gPwod7lFBsmRiSORRp7eCDagdnyFO2QdSp/MHsCCPE5+vDbSRORbo4qnZFbJhyXnwnLv2Q+u2VxLobySbJ6F0t9+hZlBri5mI0eji+YqndV8E6agSoCDivdOGcAXl/9JNQ1TZ9I2sp7OXsnll+za3G2HbfHT/mozdov1aHvWiiCH5RRqSUfvquKvCtPizMNeuhNqCjcm83SeXSqIxVBqaNqW5P9187LmUkI5FTI47BUMwRbxrWAxvjCDgycMMhHxkmdidirNxg+uppNE218r03vUF9gwfml0U24FpkgaEHxEYyE6Gf2uhLjyuSpQWpQ3gTxJuzdaXji37uOBq6ttwETNuDVdiPwfDSDz0g95ft1nWC2L0i3ezGcMLgCskkmZ1N+DQ9cjUYa/i4i39QSUFU1vzJXrxJ0YiImf0zHk3xv+tkpmljMHFu2j23qo93AaAD85SMLVcTA/38YN09Z8ZT7b72VgcymVE0mw6WaBzJD1e5nK2k/HhtTWYiftNkvhQM3gtEN/agLkt1Zsq79/GpPdfmJkj+sxQGxAUlVlRidKuEQs/KPVyaCtzVzxang27BWQMKLnOKpSpQa+vyJHq5DNwTHOULfecZYtBXhFl5XcA2MvP65VOGPd4RrKcFHTLYpGZHa5fPpjPRGTLAAr8d1qZB2SGLbnLuEjmgvUN7HLLfiH5UAnyhn1+p0FG4M4WQuyN8PgaL4xCm+lMtbS0iLciAQzrgDlYTXILAi/YosAqtJJJC8RyON2SS9a7Mk5pru1wN2Fax7U3cFcSVdCJY93BxgTP+0zZkPxcDqZH0WbYt1Yi4rgClsM6cnRL3de3Jg6YFk9xfHNWVI73O40qhbuCIiLxO4MHkBJci85FveuQ+wAzAHqrCXSzy+Ca/8cIxN78Nkn0iI4z2qxz1Ku8AdR8bI/f9vKObg5RIz7KFu6hlxIj1OQoSVYyHm6ub0rr5o5Zk/XPOij5kGCjeC1t0Iag1xebtYKl2PXJEK44YAN62sMTjpqfJAlRRlgiMgKcjGecNUNMxlxqkdyxUzZCROjQWq8lEkkVPkyAK3/9wvb5DxdlromjzLBhgzeelXPTo42uGaTPcJJoVBPo0vXD2bQMiByDp8KrqugIcAxZm+srXyE45X4Lr0kDefMaM5k802h8TCMfwpFrShanRjt95Z32CsQi+UYYrMyAvqsJi4PLstHPQSJGYrylZtEzggs1ciVEUsvW6J0ZrMulKW9OrC89ID3feS1+k6V1gdOgZDr6oKj3QZUBF4IquBTssqb1FylUGyhmEYVoiDNFd1O5KcllvjXHg4xtknwP8xFCGMF3vMQzkfI04OuFJoWhGnpt5QQt8E77hRATiJZr5gAjXGQ7yIQvFGSCNG0a9NBkI5nUtUjVzFF6VynWiM5wRILvnBk8jGrZn/Ovv5c0M1zHdZnAB4S+JV9nmXH8HJ/8lqoNKtYww5UygnCkn5AiNSivqNBj/4+OZ9ubMPVcSR6gclKdRJGE8fz0Xo8nwIGC8y2+XZzjbAs7eMBuMsg3mxSNayhpgpmJxyZ2b20Y4YgNkqCXNkL/7oRTuKyWK5kadaxbFWO84BXxqZ/NMMN777qlQceJfIHttbYKMM+LF8UFyizZpgzl8eDGhSB8wIW92EakOH6K9n8eDMVFgwEd/nL63RqFz+VC9G7u03zzpTQuoctTgLzHkwYUE0Krzxd18RIH0p9zsP0oRtWkvCqxwyDufihxp8mHkWQlHyYFU1OggR+i0gSgGYh/HSpTwB5hNxnR/kIAwCYxlFGzeY+nfdl7iUwMuhdqabj3easNrDTNkLDsp2FwTaET7pPIon0VhQfF7LjxpGTZI5aic6nbovFLLLMTHbsmTXZVBs4NzJqDcfXXhaNFR1YrVBP6Y0mRrEK8VNbrgwK+S/4MCz0P6GumLQAGp9nE+4dNAiU6tXLJVHD3cQUAT28tHzzWwsj7gYYqcHRJU3OTqTLRH0zRexBKyho/87VUMNvRG3h5M+DUyyjEzv+c2Ry5hImxsl/SKyKvgtfKL8bgiy1LYQjDnbm9BdUnEMonvwjlm/HTORgRsqaQdhcG8Q+nD8rxooj6JF1dOZpoMdAhMdqUX4Y1ouj3gRHSLjNgqWa2uxNFBE53WeqeR1vgnAzKJ7xDzZKaRKLpJAJhp3Tp2j5YKkdJs55gCTxZStAzw8zR33nqaldTcdokw07sdsVY5S0qXChjeBts9+nV6KK/ZNDKYkrpYMcJQUP+ixXVx+mZKg1uc7+GcwB5JP1bia2yAitIQQ2Ovo+F22SD0sUsMjFPhS6LwJB9+xXTUa8yLCuKVyk7LbBHXmq3E/xaw9c/vFiXVoQ/kQ8+MqhAnZh0IWemEpw3l8IlQT0hG4Yp9gz0HyEFCZHTf5NRtdVHS2cemd2xCmnbwLJuZ08hG9MUse4hZyP2MnuAr6Tg5liwCDkPwREEx9RkFv4DoOVBISVktqkCEe0bft34J/07KvY71nQrePTctsfrulufxdT2PQxPk47diUKpxChH5MdgAIHUHt7kmz4kZ7Y0ezJTIbK8tDsOMhkr4fMuCxQ5lDIJiPwMFKxPZBgYYACsXc9YIx9k16Sg7LFipLA8GVP4k0qhqoV7jKLPsmEQ/8+jVBO7faf4xlhyDT2Fo88ksKbSJWvISbcCM+3IEHrx2wRnfoqecDUdydZWjPjUkz/a/ch4Hs1pusUh4OHgxGZO03hwO70pcYI9hgDoeE0SZQZSlJUCcc0IizHdC+wIlyKUXZq2xjqHVyBgdVekdO9+XZU2fM/Dl6+sM24g/gGaoH27Iaf7YY4gS7b/Zr53SAp6q5ZDgyybQ960z99T/FP0aAkneLY/FpIPsFsuQpv2obm7C1Ui3YtKRed/JIP580cnO385wx7Mcc+xunb5+UuLfWPMqajcaVO++1EDaewy9ZH9+GXDYBq9gflhwIxoeSEqLkjzqBR4WFUekkuVaBOqqOeTKdLOzgvMntuy9ugzRhkAE6k/Vpz6xil5D0ytNpCD8IBrwFGlKyBKwRyAuJNL9PBZWQALGZdP+t1Hz++x1esmmMaH41G5KxhnxalEqIu/2C/lh17XkGcigs0NdGV486dao3sUq8l+X3Mzy06BcC1oRO4QPqV43sNaVP25fxyvowBadpn1POEZpDFu24j6xVsOcqrU6e5fFZzKs8qgpdWcss4R+cP/uviaYyEsPkc4aCAnnOxQHOsFsYjjkNPYSlcwindPTaTd6m4Vm/ZNeT3u7Jnn5EPOV3+S2RGdpKy1IwjQBAdnRZsMQO6duYggdqlTpmxwyQ4+e+X4L8ZqvniykO+RdX0+7Iyda2dsdPXtJSCAOwNf6DjRHz8FTRLMOXWB27Kq4B5Vz5liR+vbogFO5ZrP3ZHDbFgJzR58c84BDIgfIoopjj0gYdGKvn0w5bKkiuvwiDFpOU5ktN92974/km1QAR7CX8TSH0T4Ej4v0VPp7NrTQs2J+4XdZmBUiYoHX8lQkLEvxBJvdCOEZRl7hBnUAQg09oZW29X4bVunzJBOE125Kx4Vs+ONC/5JaDIFdNqUAn9cxNKB8/t4T6BdVZlF2VLifr5FmNySechXHPLOfjEhQ/ZNG71E7X0ODnsZ+hksJrF7BQej8xqX4CsaVV/EPSwwesQ+7j2tapxtLVEl3LOu3dwoz2CBzlmkmXP38402Fl06WDU1KtoRQwtMYa0wb0k/hEvX8E8/Sw4gRzw1zbqoMLc9zmE6s9w+j7i8+NeABgsNmvgn5CN7sWF0vslcel5ah474J7Oxkm7/zxsh2et9W14WaBtJg0VttB+aGEh/oHVMtBwzT94c87NTEGmZ081hqAlNKB4tqRFTMsC/wzm1yZjlmlblHUV4+1a2fKJQDCcScxWTMLE3sDdz8BMuZhqAbR+0O/Ai8puY8slrXcinRCBHF3QJTkcC+VdiLIQRkWZX+Qilahr3/tr8InzJWL0jbviygieHxImGeKJiXPRI1sDyzJUZIuZy04VC22KX4mT3ZNxjOfI2fwc1oJHMwT/mJomgRf/UcaxnRrhk35WDNlmhuczm6N3Jbdfck8lD7W3xXcalILRujum2b0buhpK3YK/0mJRxVwwkBMHHVUmx0QsbQE5TzI1nbjPsNVudY3H8jZw7McJI3lPTmcDKXVPRTPJhudxJSzmqLxnBXxSs5YwgMmepaENzpvsvM+4v0jn8wVKpw06pjen5frgyaUpcvyFKXoMCVOLdmGtEXS/QRM3i5zthakS/wxfx9SecnalQCOzl29nzCrxt/+p5+KO+ygXtfBoNClp5e8WZ0Gdr0HSC8IskNayFyxXHWesKWwebk9OjcxAvopcpRlVwYncjoAaTR/YY5fhY/yemUJZQsHEpUBZcuFszlEUGpy+SbiLjcEybA2JxLDH0GhqH24T39hgGg==","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"shell function语法","slug":"shell-func","date":"2018-05-29T01:41:54.000Z","updated":"2018-06-25T02:18:08.139Z","comments":true,"path":"2018/05/29/shell-func/","link":"","permalink":"http://www.digmyth.com/2018/05/29/shell-func/","excerpt":"","text":"Linux shell中函数语法很重要，它能让你写出很漂亮的shell,来看个例子学习下 1234567891011121314151617181920212223242526272829cat /usr/local/bin/show #!/bin/basha=&apos;df -hT&apos;b=&quot;ls&quot;echo_print() &#123; echo -e &quot;\\033[1;32m$1\\033[0m&quot;&#125;exec() &#123; echo_print &quot;$1&quot; $1 echo &quot;&quot;&#125;info () &#123; exec $a exec $b&#125;case &quot;$1&quot; ininfo) info;;*) echo &quot;Usage: show info&quot;;;esac 相当于定制了一个shell命令，运行一下看下效果12345678910111213#[root@wxqnode opt]# show infodfFilesystem 1K-blocks Used Available Use% Mounted on/dev/mapper/centos-root 22001156 1946776 20054380 9% /devtmpfs 2962076 0 2962076 0% /devtmpfs 2973096 0 2973096 0% /dev/shmtmpfs 2973096 33268 2939828 2% /runtmpfs 2973096 0 2973096 0% /sys/fs/cgroup/dev/sda1 1038336 145652 892684 15% /boottmpfs 594620 0 594620 0% /run/user/0lsrestart_cob study venv","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"get namespace","slug":"shell-get-namespace","date":"2018-01-29T01:41:54.000Z","updated":"2019-05-26T11:41:52.484Z","comments":true,"path":"2018/01/29/shell-get-namespace/","link":"","permalink":"http://www.digmyth.com/2018/01/29/shell-get-namespace/","excerpt":"","text":"get namespace shell123456789101112131415161718# read me :please mv this file to ns;use method #ns info#!/bin/bash#echo_print () &#123; echo -e &quot;\\033[32m$1\\033[0m&quot;&#125;nsinfo () &#123;for i in $(ip netns);do echo_print $i;ip netns exec $i ifconfig | grep &quot;inet addr:10&quot; |awk &apos;$1=$1&apos;;echo &apos;&apos; ;done&#125;case &quot;$1&quot; ininfo) nsinfo ;;*) echo_print &quot;Usage: ns info command&quot; ;;esac","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"linux awk","slug":"linux-awk","date":"2018-01-15T02:48:54.000Z","updated":"2021-01-29T09:59:47.621Z","comments":true,"path":"2018/01/15/linux-awk/","link":"","permalink":"http://www.digmyth.com/2018/01/15/linux-awk/","excerpt":"","text":"知识1： awk中,字符串或空串参与运算时会被当作数字0 1234[root@cloud-site mnt]# awk &apos;BEGIN&#123;a=&quot;test&quot;;print a; a=a+1;print a;a++;print a&#125;&apos;test12 知识2：直接引用一个数组中不存在的元素时，awk会自动创建这个元素，并且为其赋值为”空字符串”，同样参与运算时被当作数字0 123[root@cloud-site mnt]# awk &apos;BEGIN&#123;print t[&quot;ip&quot;]; t[&quot;ip&quot;]++;print t[&quot;ip&quot;]&#125;&apos;1 123456789101112示例;[root@cloud-site mnt]# cat test.txtaa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.txt | awk &apos;&#123;A[$1]++&#125;END&#123;for (i in A)&#123; print i,A[i]&#125; &#125;&apos;bb 2cc 2aa 2 示例一123456789101112[root@cloud-site mnt]# cat a.log1|aa|3|45|5|6|7|8|9|2|aa|3|44|5|6|7|8|9|3|aa|3|43|5|6|7|8|9|4|aa|3|44|5|6|7|8|9|5|bb|3|45|5|6|7|8|9|6|bb|3|4 |5|6|7|8|9|[root@cloud-site mnt]# awk -F&apos;|&apos; &apos;&#123;counxxt[$4]++;&#125;END&#123;for (i in counxxt) &#123;print i&quot;|&quot;counxxt[i]&#125;&#125;&apos; a.log44|245|24 |143|1 示例二12345678910111213141516171819202122if 表达式1？那么表达式2 ： 否则 表达式3[root@cloud-site mnt]# cat test.txt aa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.sh#awk &apos;BEGIN &#123;#printf &quot;%s,%5s,%4s\\n&quot;,&quot;IP&quot;,&quot;AVG&quot;,&quot;MAX&quot;#&#125;awk &apos;&#123;A[$1]++;SNF[$1]+=$NF;MAXNF[$1]=($NF&gt;MAXNF[$1]?$NF:MAXNF[$1])&#125;END&#123;for (IP in A) print IP,SNF[IP]/A[IP],MAXNF[IP]&#125;&apos; test.txt[root@cloud-site mnt]# sh test.shbb 57.5 75cc 77 99aa 99.5 100","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"python-django-26-API验证","slug":"python-django-26-API验证","date":"2018-01-06T12:51:41.000Z","updated":"2018-02-12T12:44:12.444Z","comments":true,"path":"2018/01/06/python-django-26-API验证/","link":"","permalink":"http://www.digmyth.com/2018/01/06/python-django-26-API验证/","excerpt":"","text":"前言 验证原理 代码实现 讲解Django api验证，基于Tornado签名Cookie源码 验证原理客户端 服务端和客户端共同存一个字符串，客户端用这个字符串和时间戳算一个md5值，把这个md5和时间戳组成一个字符串在请求头里发送给服务端。 服务端 服务端收到这个字符串，分别取出md5和时间戳，用这个时间戳与自己存的key&#39;也算一个md5`值，这个md5值与客户端发来的md5值作比较。 当然这里还是不够的，比如黑客拿到md5和时间戳呢？ 我们还需要作进一步策略 策略一：发来的时间戳+5秒小于服务器时间戳，认为是非法请求 策略二：基于字符串和时间戳算的md5不等于客户端发来的md5值，认为是非法请求 策略三：5秒钟内的请求作进一步验证，维护一个5秒钟内的合法请求md5值,再来这个md5值的，认为是非法请求。5秒钟失效需要借住memcache redis，它们都自带过期时间。 策略四：如果基于网络原因，黑客的非法请求比客户端的请求先到达服务器，这样只能数据AES加密了。 代码实现客户端发送请求头 123456import timeimport hashlibdef md5(arg): hs = hashlib.md5() hs.update(arg.encode(&quot;utf-8&quot;)) return hs.hexdigest() 12345ctime=time.time()key=&apos;sdgasgsdgsdffsdf&apos;new_key=&quot;%s|%s&quot; %(key,ctime)md5_str = md5(new_key)auth_md5_str=&quot;%s|%s&quot; %(mdr_str,ctime) 发送请求 1requests.get(url=&quot;http://127.0.0.1:8000/test_api/&quot;,headers = &#123;&apos;auth-api&apos;:auth_md5_str&#125;) 服务端 123456789server_float_time = time.time()auth_header_val = requests.META.get(&apos;HTTP_AUTH_API&apos;)client_md5_str,client_ctime=auth_header_val.rsplit(&apos;|&apos;,maxsplit=1)if (client_float_time + 5) &lt; server_float_time : return HttpResponse(&quot;已过期&quot;)server_md5_str != client_md5_str: return HttpResponse(&quot;非法请求&quot;)if visited_keys.get(client_md5_str): return HttpResponse(&quot;来晚了，你是非法的&quot;) &lt;数据加密待续&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Flask-基础","slug":"web-Flask-基础","date":"2018-01-01T12:51:41.000Z","updated":"2018-04-23T07:00:52.290Z","comments":true,"path":"2018/01/01/web-Flask-基础/","link":"","permalink":"http://www.digmyth.com/2018/01/01/web-Flask-基础/","excerpt":"","text":"前言","categories":[{"name":"WebFlask开发","slug":"WebFlask开发","permalink":"http://www.digmyth.com/categories/WebFlask开发/"}],"tags":[]},{"title":"web-Django-25-DjangoAdmin","slug":"web-django-25-DjangoAdmin","date":"2017-12-28T12:37:00.000Z","updated":"2019-01-15T03:53:24.763Z","comments":true,"path":"2017/12/28/web-django-25-DjangoAdmin/","link":"","permalink":"http://www.digmyth.com/2017/12/28/web-django-25-DjangoAdmin/","excerpt":"","text":"目录 DjangoAdmin工作流程 制作启动文件 单例模式应用 博客参考 一 Django admin工作流程1 注册models_class，生成_registry 中model_class 字典1234admin.py注册models_class如models.UserInfofrom django.contrib import adminfrom app01 import modelsadmin.site.register(models.UserInfo) 2 admin.site.urls admin.site.urls循环_registry={}字典生成相应URL12345生成4个URL分别是如下：app01/userinfo/app01/userinfo/add/app01/userinfo/1/change/app01/userinfo/1/delete/ 其中要深入理解URL include原理： url(r’^xx’, “可以是视图函数，也可以是元组”),1234567partterns = [ url(r&apos;^admin&apos;, admin.site.urls), # admin.site.urls 返回形如（[],None,None）的元组. url(r&apos;^backend&apos;, include(&apos;backend.urls&apos;)), # include 同样返回形如（[],None,None）的元组. # 也可以写成形如 include([],None,None) 格式. ] 二 制作stack启动文件 1 创建一个stack 的app 2 settings.py 注册app- &apos;stack.apps.StackConfig&apos;, 3 在stack apps.py文件定义ready方法 stack/apps.py文件ready()方法123456from django.utils.module_loading import autodiscover_modulesclass StackConfig(AppConfig): name = &apos;stack&apos; def ready(self): autodiscover_modules(&quot;xxx&quot;) 4 启动项目时会先在执行所有app下的xxx.py文件. (当然前提是这些app也是settings.py注册好的) 三 单例模式单例模式有很多种实现方式 其中一种：利用模块多次导入时，除第一次外不会真正执行模块代码。 如果模块中有实例化对象操作，那么多次导入也不会真正实例化多个对象，而是同一个实例 如果在一个程序先运行的文件改变了实例数据或属性，后运行的文件导入后读这个实例就会有数据或属性. 示例： 随便定义一个实例化对象的文件stack/service.v1 123456789class StackSite(): def __init__(self): self._registry = &#123;&#125; def register(self,class_name,config_class): self._registry[class_name] = config_class site = StackSite()## 单例 在我们定义的启动文件app01/xxx.py中写入代码(因为会先执行xxx.py) 1234from stack.service import v1v1.site.register(&quot;k1&quot;,&quot;v1&quot;)v1.site.register(&quot;k2&quot;,&quot;v2&quot;)v1.site.name = &apos;wxq&apos; 项目urls.py中写入 from stack.service import v1 print(v1.site._registry) print(v1.site.name) 总结启动项目时，先执行app01/xxx.py,后执行urls.py文件，程序读到了实例的数据并不是重新实例化新对象，这就是单例模式的运用。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-24-Django中间件","slug":"web-django-24-Django中间件","date":"2017-12-26T12:26:37.000Z","updated":"2018-01-18T03:43:22.000Z","comments":true,"path":"2017/12/26/web-django-24-Django中间件/","link":"","permalink":"http://www.digmyth.com/2017/12/26/web-django-24-Django中间件/","excerpt":"","text":"目录 官方解释 Django默认 定义中间件 示例 总结 Django中间件学习 官方解释1234This document explains all middleware components that come with Django.For information on how to use them and how to write your own middleware, see the middleware usage guide.Middleware is a framework of hooks into Django’s request/response processing.It’s a light, low-level “plugin” system for globally altering Django’s input or output. Django 中间件是一个钩进request/response处理过程的框架，轻量且较为底层的插件系统，全局改变Django输入输出。 Django默认12345678910Django默认中间件MIDDLEWARE = [ &apos;django.middleware.security.SecurityMiddleware&apos;, &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, &apos;django.middleware.common.CommonMiddleware&apos;, &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;, &apos;django.contrib.messages.middleware.MessageMiddleware&apos;, &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,] 定义中间件在Django中就表现为一个类.123456789101112m1.process_exception(self, request, exception): print(&quot;m1.process_exception1&quot;)m1.process_requestm2.process_requestm1.process_viewm2.process_viewviews.pym2.process_exceptionm1.process_exceptionm2.process_responsem1.process_response 中间件流1234process_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_response 示例1... 总结：基于Django中间件我们能实现一些功能，这些处理是在请求到来之前或views视图函数处理过后。 process_request可以有返回值，也可以没有返回值。 process_response必须有返回值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-17-ModelForm","slug":"web-django-17-ModelForm","date":"2017-12-20T12:26:37.000Z","updated":"2018-01-18T03:48:11.260Z","comments":true,"path":"2017/12/20/web-django-17-ModelForm/","link":"","permalink":"http://www.digmyth.com/2017/12/20/web-django-17-ModelForm/","excerpt":"","text":"目录 回顾Form ModelForm特性 ModelForm使用 html前端展示 ModelForm简介1 回顾FormForm作用：第一： 用于Form验证第二： 用于生成 html标签，并且可以保留数据（如编辑） 缺点：多表查询时需要手动查出数据在前端渲染，跨表保存数据同样需要手动update() 2 ModelForm特性解决办法，引用ModelForm 1 它可以循环model class字段在前端生成表单或html标签并保留数据 2 调用save()方法自动跨表保存数据。 3 可以自定义models class以外的fields字段,很灵活，如果自定义的字段名与model class字段名重名， 那么model class字段将被重写 4 ModelForm同样可以做数据验证包括钩子函数 5 ModelForm中的fields字段是可以循环的，循环在前端生成不必写 6 当编辑数据时传入instance=obj 可以循环生成表单并且表单有值。 ModelForm适用场景 Form与ModelForm没有谁好谁不好，只是适用场景不同。 ModelForm依赖modelsclass, modelForm必须和models.py在一起。 3 ModelForm使用12345678910111213141516171819from django.forms import Formfrom django.forms import ModelFormfrom django.forms import fieldsfrom django.forms import widgets as fwidgetsfrom app01 import modelsclass TestForm(ModelForm): class Meta: model = models.Book fields = &quot;__all__&quot; # 可以是[&quot;&quot;,&quot;&quot;,] labels = &#123; &apos;title&apos;:&quot;书名&quot;, &quot;price&quot;:&quot;价格&quot;, &#125; error_messages = &#123; &quot;title&quot;:&#123;&quot;requried&quot;:&quot;书名不能为空&quot;,&#125;, &#125; widgets=&#123; &quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;) &#125; 4 html前端展示1234567&lt;form action=&quot;/addbook/&quot; method=&quot;POST&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;% for field in form %&#125; &lt;p&gt;&#123;&#123; field.label &#125;&#125;:&#123;&#123; field &#125;&#125; &#123;&#123; field.errors.0 &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt; 引入bootstrap时，querySet for循环展示:注意时间格式的转换1234567891011121314&lt;div class=&quot;container&quot; style=&quot;width: 700px;margin-top: 50px&quot;&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt;&lt;/thead&gt; &lt;tbody&gt; &#123;% for row in data_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.title &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.price &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"03-GET/POST/ContentType知识","slug":"web-get_post_contentype知识","date":"2017-12-15T12:51:41.000Z","updated":"2018-02-12T09:50:11.623Z","comments":true,"path":"2017/12/15/web-get_post_contentype知识/","link":"","permalink":"http://www.digmyth.com/2017/12/15/web-get_post_contentype知识/","excerpt":"","text":"前言 ContentType知识 requests发送get/post请求分析 requests发送get/post请求示例 表格总结 一、ContentType知识contentType 定义： 客户端告知服务器如何组装数据来发送，服务器那边就必须以相应编码解开。 contentType一般为 application/x-www–form-urlencode12如form就默认enctype=&quot;application/x-www-form-urlencoded&quot;形如b&apos;user=wxq&amp;pwd=123&apos; 组装数据。 Django帮我们默认以enctype=”application/x-www-form-urlencoded”解开后放在request.GET或 request.POST里方便我们取数据。如果是application/json 格式，双引号字符串 {“user”:”wxq”,”pwd”:123}，需自行解数据。 1form文件传送时必须指明enctype=&quot;multipart/form-data&quot; 如果是application/json,就要用相应格式解开后组装数据。application/json 双引号字符串 {“user”:”wxq”,”pwd”:123} request.body 报文元数据12345application/json data: JSON.stringfy(&#123;d&#125;) # 前端以json 格式发数据s=request.body.decode(&quot;utf8&quot;)d=json.loads(s) # 后端以json格式解数据d[&apos;name&apos;] 当ajax处理数据时，后端数据以json格式传过来的，那么前端需手动JSON.parse()反序列化操作， 我们可以添加参数datatype: “JSON” ，添加后就自动反序列化了。 二、 requests发送get/post请求分析分析知识点 分析如何组装数据发送 分析get/post请求组装数据方式的不同 分析get/post方式不同，requests参数写法上的不同 大家都知道请求头之间用\\r\\n分隔，请求头与请求体用\\r\\n\\r\\n分隔。 GET请求头get请求发送数据封装在请求头，形如http://www.baidu.com/?a=1&amp;b=2 get请求发送数据用params,params中的数据会组装在请求头上12requests.get(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;)data=&quot;http GET /index?a=1&amp;b=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&quot; POST请求头post请求发送数据可以像get一样?a=1&amp;b=2封装在请求头，但决大多数情况封装在请求体，形如1data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时可以data传参，数据在请求体里，封装为name=wxq&amp;age=18,请求头ContentType为application/x-www-form-urlencoded12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,data=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时也可以json传参,数据在请求体里，封装为json.dumps({‘name’:’wxq’,’age’:18})后的字符串。请求头ContentType为application/json12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,json=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&#123;&quot;name&quot;: &quot;wxq&quot;, &quot;age&quot;: 18&#125;&quot; 服务器解析当服务器接收到客户端发来的数据，所有的数据会放到request.FILES或request.body里，再跟据ContentType的不同放到相应变量里,如request.POST里是Content-Type:application/x-www-form-urlencoded; charset=UTF-8,也就是data而非json格式发来的数据。 12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 三、requests发送get/post请求示例data传参可以是字典可以是字符串可以是字节可以是文件对象1 requests.request(method=”post”,data=字典)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}1requests.post(url=&quot;xxx&quot;,data=&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;) 2 requests.request(method=”post”,data=字符串)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}12requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq&amp;pwd=123&quot;) # 或requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq;pwd=123&quot;) 基于HTTP本质，上面2种数据最终转为请求体\\r\\n\\r\\nname=wxq&amp;pwd=123 3 手动构建json字符串发送手动加headers={&#39;Content-Type&#39;: &#39;application/json&#39;}1234requests.post( url=&quot;xxx&quot;, data=json.dumps(&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;), headers=&#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;) json传参requests.request(method=”post”,json=…)1) 将json中对应的数据进行序列化成一个字符串，json.dumps(…)2) 然后发送到服务器端的body中3) 并且自动Content-Type是 {‘Content-Type’: ‘application/json’}1234def param_json(): requests.request(method=&apos;POST&apos;, url=&apos;http://127.0.0.1:8000/test/&apos;, json=&#123;&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;水电费&apos;&#125;) json方式传输数据的一种场景Content type: application/x-www-form-urlencode不支持传键所对应的值为字典的字典.1request.post(url=url,data=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 不支持 传键所对应的值为字典的字典,这种情况只能以json方式传送数据12request.post(url=url,json=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 支持Content type: application/json 四、总结 methond 传参 解析为 浏览器显示标识名 GET params ?page=1&amp;k1=v1 Query String Parameter POST data \\r\\n\\r\\nname=wxq&amp;pwd=123 Form Data POST json \\r\\n\\r\\n{“name”:”wxq”,”age”:18}” Request Payload","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"python-spider-基础知识","slug":"python-spider01-基础知识","date":"2017-12-06T12:51:41.000Z","updated":"2018-02-12T11:57:36.272Z","comments":true,"path":"2017/12/06/python-spider01-基础知识/","link":"","permalink":"http://www.digmyth.com/2017/12/06/python-spider01-基础知识/","excerpt":"","text":"前言 爬虫简介 具备技能 爬虫实现 爬虫示例 简介爬虫：利用python模块伪造浏览器行为，读取网页源码，再经过正则匹配取出HTML文本的一系列处理，数据分析称为爬虫 基本内容：123456789- python实现浏览器行为： requests- beautifulsoup4 对HTML内容进行分析- HTTP相关知识： - cookie - csftToken - 请求头：其中ContenType表明什么格式封装的数据，服务器需要用相应格式解数据 请求： 请求头(cookie)/请求体(发送的内容) 响应： 响应头（浏览器读取头数据）/响应体（我们看到的网页或网页源码）- 数据持久化（数据库存储） 具备技能1234567891011性能相关：批量get URL可想而知性能重要性1 线程池，进程池，2 协程coroutine（微线程）： 协程本身没有用，只做切换，具有切换特性,要想性能很高，刚好遇到IO时切换 3 异步非阻塞（如twisted,gevent,asyncio,tornado内部集成） 其中gevent异步模块由2个东西组成: greenlet协程: greenlet就是利用yield实现的协程 libevent: libevent做异步IO库 七牛云进程线程分享 异步非阻塞123遇到IO请求不等待继续执行其它任务,如果IO请求响应内容回来了,自动回调某个函数.异步： 回调（相关于通知机制）非阻塞： 不等待 后面会学到爬虫框架：scrapy1231 内部是twisted实现异步2 写入URL自动下载网页3 自动将下载的网页解析为对象方便我们处理 后面也会学到分布式爬虫组件redis-scrapy 爬虫实现基本模块：12pip3 install requestspip3 install beautifulsoup4 （将网页字符串解析为对象，用于直接取文本内容） 爬虫实现123451 代码发送get请求： 请求头+请求体2 接收返回值： 响应头+响应体（本质字符串）3 获取响应体后进行解析，方便获取文本内容 import requests from bs4 import BeautifulSoup 注意几点：1231 回车时得到token和cookies,如果有token和cookies的话取出来,一般get请求2 提交用户名密码时带上token和cookies,一般post请求,并且取出登录成功后的cookies3 登录后才能看到的网页(前2次请求的cookies都带上) 示例示例这里就不展开了，可以基于这几个站点简单入门 github或汽车之家 抽届点赞 博客园用户名密码密文发送给服务器的情况，其实是利用js三方模块在浏览器端加密再发送的（python rsa模块加密） 知乎，新浪微博这种有图形验证码的网站，需要第三方平台做图像识别（类似滑动验证码这种验证其实是向后台发送鼠标坐标）","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"web-Django-23-Django序列化","slug":"web-django-23-Django序列化","date":"2017-12-01T12:26:37.000Z","updated":"2018-01-18T03:43:21.996Z","comments":true,"path":"2017/12/01/web-django-23-Django序列化/","link":"","permalink":"http://www.digmyth.com/2017/12/01/web-django-23-Django序列化/","excerpt":"","text":"目录 序列化 Django中的序列化操作序列化操作参考ajax学习Django返回前端数据一般为json格式，那么就要数据进行序列化。方法一：Django内置serializers123from django.core import serializersret = models.BookType.objects.all()data = serializers.serialize(&quot;json&quot;, ret) 方法二：json.dumps123456import json #ret = models.BookType.objects.all().values(&apos;caption&apos;)ret = models.BookType.objects.all().values_list(&apos;caption&apos;)ret=list(ret)result = json.dumps(ret,nsure_ascii=False) 方法三：由于json.dumps时无法处理datetime日期，所以可以通过自定义处理器来做扩展12345678910111213import json from datetime import date from datetime import datetime class JsonCustomEncoder(json.JSONEncoder): def default(self, field): if isinstance(field, datetime): return o.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) elif isinstance(field, date): return o.strftime(&apos;%Y-%m-%d&apos;) else: return json.JSONEncoder.default(self, field) # ds = json.dumps(d, cls=JsonCustomEncoder) 有时在前端渲染也需要date:&#39;Y-m-d&#39;处理一下1&lt;p&gt;出版日期&lt;input type=&quot;date&quot; name=&quot;pubdate&quot; value=&quot;&#123;&#123; edit_book.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&quot;&gt;&lt;/p&gt; 如果用到了Form或ModelForm，同样需要widgets处理下时间格式12widgets=&#123;&quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;)","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-21-图片上传","slug":"web-django-21-图片上传","date":"2017-11-21T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/21/web-django-21-图片上传/","link":"","permalink":"http://www.digmyth.com/2017/11/21/web-django-21-图片上传/","excerpt":"","text":"目录 上传文件版本一 上传文件版本二 上传文件版本三 上传文件版本一定义views.py123456789101112def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) else: obj=request.FILES.get(&quot;fff&quot;) # obj.name 文件名 # obj.chunks 文件块 f = open(obj.name,&apos;wb&apos;) for chunk in obj.chunks(): f.write(chunk) f.close() return render(request,&quot;upload.html&quot;) upload.html12345&lt;form action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;p&gt;&lt;input type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt;&lt;/form&gt; 上传文件版本二版本一中form表单上传文件或图片无法做预览，并无法做失败验证及上传文件大小限制，那么就要用到ajax 方式发送。下面学习下ajax方式上传文件。定义views.py12345678910111213def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) elif request.is_ajax(): file_obj= request.FILES.get(&apos;obj&apos;) print(obj) f = open(file_obj.name, &apos;wb&apos;) for chunk in file_obj.chunks(): f.write(chunk) f.close() return HttpResponse(&quot;ok&quot;) else: pass 12345678910111213141516171819202122232425262728293031&lt;h1&gt;ajax形式上传文件&lt;/h1&gt;&lt;input type=&quot;file&quot; id=&quot;f4&quot;/&gt;&lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;btn&quot;&gt; #input的button默认不会有任何事件，除非绑定事件&#123;% csrf_token %&#125;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function () &#123; $(&quot;#btn&quot;).click(function () &#123; var fm=new FormData(); fm.append(&apos;obj&apos;,$(&quot;#f4&quot;)[0].files[0]); fm.append(&apos;csrfmiddlewaretoken&apos;,$.cookie(&apos;csrftoken&apos;)); //自行组数据$(&quot;input[name=&apos;csrfmiddlewaretoken&apos;]&quot;).val()); // fm.append(&apos;file_obj&apos;,document.getElementById(&quot;f4&quot;).files[0]); //document.getElementById(&quot;f4&quot;) # dom对象 // $(&quot;#f4&quot;) # jquery对象 // $(&quot;#f4&quot;)[0] #jquery对象转dom对象 $.ajax(&#123; url:&apos;/upload/&apos;, type:&apos;POST&apos;, data:fm, processData: false, contentType: false, success:function (data) &#123; console.log(data); &#125; &#125;) &#125;) &#125;)&lt;/script&gt; 上传文件版本三版本二中对各种浏览器兼容不好，可以再次改进. 利用form+iframe特性做的，业内都是这么做的，很重要，兼容性非常好。形式上与ajax很像但不是ajax,称伪ajax,后端不能用request.is_ajax()判断请求方式。不得不先来学习下iframe标签12&lt;iframe id=&quot;ifm&quot; src=&quot;http://www.chouti.com&quot;&gt;&lt;/iframe&gt;$(&quot;#ifm&quot;).attr(&apos;src&apos;, &apos;http://www.qq.com&apos;) # 修改iframe src属性但页面不刷新，返回的数据不在整个页面，而在iframe body里，基于这样的特性我们可以上传文件。 当form表单以iframe形式发送数据到后端，后端返回的数据会在iframe body里form 的target属性值要与iframe的name属性值保持一致。12345&lt;form id=&quot;ff1&quot; action=&quot;/upload/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &lt;p&gt;&lt;input onchange=&quot;changeImg();&quot; type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input id=&quot;sb&quot; type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt; &lt;/form&gt;&lt;iframe id=&quot;ifm&quot; name=&quot;ifr&quot; onload=&quot;sucessBack();&quot; &gt;&lt;/iframe&gt; 那么如何取出iframe body里的值呢？1$(&quot;#ifm&quot;).html(); # iframe会重新生成一个子document,有html/head/body,这种方法无法取出。 1$(&quot;#ifm&quot;).find(&apos;body&apos;).html(); # 有这种想法是好的，这种找只会在当前document里找，但是这样的document嵌套递归查找需要一个额外方法处理.contents()后再查找 1$(&quot;#ifm&quot;).contents().find(&apos;body&apos;).html(); # iframe最终正确的方法 文件上传完整版utils.py12345class BaseResponse(): def __init__(self): self.status=False self.data=None self.error=None views.py123456789101112131415161718192021from django.shortcuts import render,HttpResponse,redirectimport os,jsonfrom utils import BaseResponseret=BaseResponse()def upload(request): if request.method == &quot;GET&quot;: return render(request, &quot;upload.html&quot;) else: try: file_obj=request.FILES.get(&apos;fff&apos;) # file_obj.name # file name # file_obj.chunks() #file block file_path = os.path.join(&apos;static&apos;, file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) ret.status=True ret.data=file_path except Exception as e: ret.error=&quot;上传失败&quot; return HttpResponse(json.dumps(ret.__dict__,ensure_ascii=False)) upload.html123456789101112131415161718192021222324252627282930&lt;form id=&quot;sb&quot; action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;file&quot; name=&quot;fff&quot; onchange=&quot;changeImg();&quot;/&gt; &lt;!-- 元素更新时触发onchange事件 --&gt;&#123;# &lt;input type=&quot;submit&quot;&gt;#&#125;&lt;/form&gt;&lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; onload=&quot;successBack();&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt;&lt;div id=&quot;prevImg&quot;&gt;&lt;/div&gt;&lt;!-- 我们这里不是真正的ajax,是没有success回调函数的,上传成功后会返回数据到前端，文本载入会触发onload事件。 --&gt;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function successBack() &#123; var v=$(&quot;#ifr&quot;).contents().find(&quot;body&quot;).html(); var v=JSON.parse(v); if(v.status)&#123; var tag=document.createElement(&apos;img&apos;); tag.src=&quot;/&quot;+v.data; $(&quot;#prevImg&quot;).append(tag); &#125;else &#123; console.log(v.error) &#125; &#125; function changeImg() &#123; $(&quot;#sb&quot;)[0].submit(); // document.getElementById(&apos;sb&apos;).submit(); &#125;&lt;/script&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-20-ajax","slug":"web-django-20-ajax","date":"2017-11-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/20/web-django-20-ajax/","link":"","permalink":"http://www.digmyth.com/2017/11/20/web-django-20-ajax/","excerpt":"","text":"目录 代码例子 代码例子 ajax前端组装数据 ajax涉及的序列化 ajax错误验证 ajax的3种csrf_token Ajax 学习详情参考Ajax 武佩齐博客 这里只是对Ajax学习做一个记录和总结，内容还有很多没有包括。 代码例子普通请求 —&gt; render渲染全部HTMLAjax – -&gt; render生成己经渲染好的局部HTML, 功能单一。Ajax — &gt; HttpResponse(‘data’) 得到原始数据，ajax前端自行展示，定制化强，一般用于提供接口，为别人提供数据。 render和HttpResponse的关系？render:1 模板+数据进行替换2 HttpResponse(数据) HttpResponse:1 HttpResponse(数据) Ajax请求时，响应内容时可以是render和HttpResponse,不要认为只能用HttpResponse. views.py里不能return redirect(&quot;&quot;)跳转是在前端跳转location.href = “http://www.baidu.com&quot; ajax前端组装数据ajax形式发input数据时在前端取数据并组装数据后给后台123ajax取input数据时，可以用data:&#123;&quot;user&quot;:$(&quot;#user&quot;).val(),&quot;pwd&quot;:$(&quot;#pwd&quot;).val()&#125;获取数据，更简单的数据组装方法是加form表单:&lt;form id=&quot;ff&quot;&gt;&lt;input /&gt;&lt;/form&gt;此时取数据可以用：data: $(&quot;#ff&quot;).serialize(), ajax涉及的序列化Django 中Ajax方式获取ORM数据时，涉及序列化操作的5种方法1234567891011121314151617181920212223242526272829303132333435363738394041424344# # 方式一 我们伪造的数据是可以序列化实现展示的# # 模板渲染后生成字符串# # user_list = models.UserInfo.objects.all()# ## # return render(request,&quot;tpl.html&quot;,&#123;&quot;user_list&quot;:user_list&#125;)# user_list = [# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# ]## import json# data = json.dumps(user_list)# return HttpResponse(data)# # 方式二： 这里是失败的， QuerySet不支持Json序列化，经测试失败# user_list = models.UserInfo.objects.all()# import json# return HttpResponse(json.dumps(user_list))# # 方式三 也是成功的,但不常见## user_list = models.UserInfo.objects.all()# from django.core import serializers# data= serializers.serialize(&quot;json&quot;, user_list)# return HttpResponse(data)# 方式四 推荐用法user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data)# 方式五 user_list = models.UserInfo.objects.values_list(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data) Ajax 错误验证123456789101112## 异常判断 import json ret = &#123;&apos;status&apos;:False,&apos;data&apos;:None,&apos;error&apos;:None&#125; try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret[&apos;status&apos;]= True ret[&apos;data&apos;] = user_list except Exception as e: ret[&apos;error&apos;] = &apos;获取数据失败&apos; data = json.dumps(ret) return HttpResponse(data) 或者以类的形式调用更为简洁123456789101112131415161718app01项目下新建utls.pyclass BaseResponse(): def __init__(self): self.status = False self.data = None self.error = Noneviews.py中导入：from app01.utils import BaseResponseret = BaseResponse()try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret.status= True ret.data = user_listexcept Exception as e: ret.error = &apos;获取数据失败&apos; data = json.dumps(ret.__dict__,ensure_ascii=False) # False表示不要中文为变为unicode编码 return HttpResponse(data) 1234var tag.createElement(&quot;a&quot;)tag.innertHTML=&quot;hello&quot;div.append(tag) # &lt;div&gt; &lt;a&gt;hello&lt;/a&gt;&lt;/div&gt; 加在标签里面div.after(tag) # &lt;div&gt;&lt;/div&gt;&lt;a&gt;hello&lt;/a&gt; 加在标签后面 ajax的3种csrf_token方法一： 自己组装数据csrf_token12&#123;% csrf_token %&#125; 会生成带csrfmiddlewaretoken的input标签data:&#123;&apos;csrfmiddlewaretoken&apos;:$(&apos;input[name=&quot;csrfmiddlewaretoken&quot;]&apos;).val()&#125; 方法二：加 form表单后用$(“#form_id”).serialize()方法自动组装数据 121 添加form HTML 标签 &lt;form id=&quot;form_id&quot;&gt;&lt;input /&gt;&lt;/form&gt;2 用data: $(&quot;#form_id&quot;).serialize(),自动组装数据 方法三：自行在cookies里取csrf_token放在请求头里参考1234561 导入jquery.cookie.js: &lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;2 jquery方式操作cookie取值: csrf_token=$.cookie(&apos;csrftoken&apos;) 3 ajax形式添加到请求头里，注意写法是定死的 $.ajax(&#123; header: &#123;&quot;X-CSRFToken&quot;: $.cookie(&apos;csrftoken&apos;)&#125;， )&#125;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"linux nginx基础","slug":"linux-nginx","date":"2017-11-12T01:41:54.000Z","updated":"2018-10-21T11:30:26.599Z","comments":true,"path":"2017/11/12/linux-nginx/","link":"","permalink":"http://www.digmyth.com/2017/11/12/linux-nginx/","excerpt":"","text":"目录 nginx基本介绍 nginx URI优先级 nginx URI优先级第一优先级精确匹配此路径123location = URI &#123;&#125; 第二优先级不使用正则表达式的模糊匹配123location ^~ URI &#123;&#125; 第三优先级可使用正则表达式的模糊匹配123location ~ URI &#123;&#125; 第四优先级匹配当前路径及其子路径123location URI &#123;&#125; 补充 ~ 区分字符大小写匹配 ~* 不区分字符大小写匹配 ! 表过不匹配 !~* 不区分字符大小写非匹配","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux haproxy基础","slug":"haproxy-基础","date":"2017-11-12T01:41:54.000Z","updated":"2018-04-23T06:57:35.510Z","comments":true,"path":"2017/11/12/haproxy-基础/","link":"","permalink":"http://www.digmyth.com/2017/11/12/haproxy-基础/","excerpt":"","text":"目录 haproxy基本介绍 haproxy基础语法 haproxy应用 haproxy基本介绍haproxy基础语法当有多个缓存key/value服务器时，app缓存到服务器1，那么必须到服务器1才能找到缓存。 取模法：key- hash(16进制数值)–这个数值除以服务器数量的余数就是哪台服务器 当有服务器添加或移走这种缓存就失效了 如何解决，是有办法的，那就是改进上面那种方法，称一致性hash算法：consitent hash 有一个环，用32位二进制从0开始计数，环上分布有离散的2^32 点。key hash 后的值除以2^32时取余数，这个余数一定在0到2^32-1范围内，也就是在这个环上那么数据就是存储在余数的下一台服务器上，服务器是离散分布在这样的环上的。缺点：服务器分布可能存在偏斜，也就是可能所有服务器集中在环三分之一处。当存储数据找下一台服务器，那台服务器存储量太大了。 解决办法：使用虚拟节点离散分布在环上来代替物理节点。hadoop前身开源搜索引擎，任何搜索引擎首先是大数据搜索平台，其次才是高性能分析平台。 流式数据存储处理平台：storm spark大数据处理平台。12345678910111213141516nginx:server &#123;&#125;server &#123; proxy_pass: &#125;upstream &#123;&#125;upstream &#123;&#125; haproxy应用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"kolla Pike on CentOS 7.3","slug":"kolla-Pike-on-CentOS7.3","date":"2017-11-09T00:41:54.000Z","updated":"2017-11-08T07:15:16.901Z","comments":true,"path":"2017/11/09/kolla-Pike-on-CentOS7.3/","link":"","permalink":"http://www.digmyth.com/2017/11/09/kolla-Pike-on-CentOS7.3/","excerpt":"","text":"openstack Pike发布很长一段时间了，一直没有时间整理一份在kolla on CentOS7.3 的文档参考：沙克老师单节点ocata安装 环境准备12yum install epel-release yum install axel vim git curl wget lrzsz ansible gcc python-devel docker-ce yum12add docker-ce yum:yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo docker-ce install12install docker-ce# yum install docker-ce docker-ce configuration12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof 编辑 /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker kolla-ansible install github项目 openstack kolla镜像地址 openstack-ansible是用ansible部署openstack用的 ceph-ansible是用ansible部署ceph用的 kolla-ansible是用ansible部署kolla用的，其中openstack+ceph环境均分散在一个一个的docker容器里 安装pike版本 kolla-ansible，pip install 安装方式存在版本问题或非最新代码，这里直接git下载代码安装。12345678910cd /optgit clone https://github.com/openstack/kolla-ansible.gitcd /opt/kolla-ansiblegit branch -avgit checkout remotes/origin/stable/pikecp -r /opt/kolla-ansible/etc/kolla/ /etc/# 安装相关依赖包cd /opt/kolla-ansiblepip install -r requirements.txt 生成密码12cd /opt/kolla-ansible/toolspython generate_passwords.py 安装镜像仓库123456# docker pull registry下载最新pike 容器镜像：http://tarballs.openstack.org/kolla/images/centos-source-registry-pike.tar.gztar xf centos-source-registry-pike.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry eg:1234mkdir /registrytar -zxf /root/docker-registry.tar.gz -C /registrydocker load &lt; /root/registry.tardocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry check docker hub12345curl http://192.168.200.2:4000/v2/_catalog[root@controller01 ~]# curl 192.168.200.2:4000/v2/99cloud/centos-source-memcached/tags/list&#123;&quot;name&quot;:&quot;99cloud/centos-source-memcached&quot;,&quot;tags&quot;:[&quot;4.0.1.1&quot;]&#125;docker pull 192.168.200.2:4000/99cloud/centos-source-memcached:4.0.1.1 ceph disk set1# for i in vdb vdc vdd; do parted /dev/$i -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1; done in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 edit global.yml12edit /etc/kolla/global.yml此处略过。。。 kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient access dashboard1curl http://openstack_VIP/horizon","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"Mysql MGR 集群","slug":"mysql-MGR","date":"2017-11-08T22:41:54.000Z","updated":"2017-11-08T15:18:04.873Z","comments":true,"path":"2017/11/09/mysql-MGR/","link":"","permalink":"http://www.digmyth.com/2017/11/09/mysql-MGR/","excerpt":"","text":"目录 MGR简介 MGR安装 数据库Galera集群的笔记做过了，今天来讲一讲MySQL Group Replication组复制技术。 一 MGR简介MySQL当前存在的三种复制模式有：异步模式、半同步模式和组复制模式。MySQL Group Replication（简称MGR）官方推出的高可用解决方案， 原生复制技术，基于插件的方式工作。 分为以下两种 single primary mode 单主模式只有一个读写，其余都是只读。 multi primary mode多主模式全部可读写 不管组复制单主还是多主的故障切换都无法让应用无感知，需要自主实现。 包含以下特性： 复制管理操作更为自动化。 通过Paxos协议提供数据库集群节点数据强一致性保证。 多主模式所有节点都可读写操作。 解决网络分区导致的脑裂问题，提升复制数据的可靠性。 官方引言1Quite obviously, regardless the mode Group Replication is deployed, it does not handle client-side fail-over. That must be handled by the application itself, connector or a middleware framework such as a proxy or router. 意思就是说MGR内部没有提供一种机制来实现主节点故障切换对应用的无感知。应用的这种故障无感知需要借助外力实现。 组复制存在以下局限性123456789101112131415161. 所有涉及的数据都必须发生在InnoDB存储引擎的表内。2. 所有的表必须有明确的主键定义。3. 网络地址只支持IPv4。4. 需要低延迟，高带宽的网络。5. 目前集群限制最多允许9个节点。6. 必须启用binlog。7. binlog 格式必须是row格式。8. 必须打开gtid模式。9. 复制相关信息必须使用表存储。10.事务写集合（Transaction write set extraction）必须打开。（这个目前与savepoint冲突，这也是导致mysqldump无法备份GR实例的原因）11. log slave updates必须打开。12. binlog的checksum目前不支持。13. 由于事务写集合的干扰，无法使用savepoint。14. SERIALIZABLE 隔离级别目前不支持。15. 对同一个对象，在集群中不同的实例上，并行地执行DDL（哪怕是相互冲突的DDL）是可行的，但会导致数据一致性等方面的错误，目前阶段不支持在多节点同时执行同一对象的DDL。16. 外键的级联约束操作目前的实现并不完全支持，不推荐使用。 二 MGR安装3.1 软件安装官方单库安装官方集群安装 参考链接 :1234https://dev.mysql.com/doc/refman/5.7/en/replace-third-party-yum.html # 禁用第三方源或安装包https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html # 根据您的系统安装相应版本https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html #CentOS7.3安装mysql 5.7https://dev.mysql.com/doc/refman/5.7/en/group-replication.html # mysql Group Replication安装 123# rpm -ivh /opt/mysql57-community-release-el7-11.noarch.rpm# yum install mysql-community-server# systemctl start mysqld 3.2 内置策略说明mysql5.7启动服务后会生成一个随机密码用于临时登录，内置策略强制让你进入数据库后马上更改登录密码，并且有一套密码复杂度管理的策略。我们可以在数据库my.cnf中过滤掉复杂度策略或临时修改全局变量来忽略复杂度。123456789101112131415161718192021mysql&gt; select @@validate_password_length;+----------------------------+| @@validate_password_length |+----------------------------+| 8 |+----------------------------+1 row in set (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec) 或者/etc/my.cnf添加5行策略来忽略掉。12345validate_password_length = 0validate_password_mixed_case_count = 0validate_password_number_count = 0validate_password_policy =0validate_password_special_char_count =0 当然也可以类似以下命令临时全局修改1set global validate_password_special_char_count =0; # 全部设置为0 查询临时密码1# grep &apos;temporary password&apos; /var/log/mysqld.log 马上修改临时密码用以后续操作。123mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;Query OK, 0 rows affected (0.00 sec)#否则收到提示：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 3.3 为复制授权1234567mysql&gt; SET SQL_LOG_BIN=0;mysql&gt; CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; SET SQL_LOG_BIN=1;mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3.4 启动组复制123456789101112mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; Query OK, 0 rows affected (0.02 sec)mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+...| validate_password | ACTIVE | VALIDATE PASSWORD | validate_password.so | GPL || group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+46 rows in set (0.01 sec) 启动复制通道123SET GLOBAL group_replication_bootstrap_group=ON;START GROUP_REPLICATION;SET GLOBAL group_replication_bootstrap_group=OFF; 查看集群成员1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+1 row in set (0.00 sec) 创建测试同步数据1234mysql&gt; CREATE DATABASE test;mysql&gt; USE test;mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);mysql&gt; INSERT INTO t1 VALUES (1, &apos;Luis&apos;); 检查同步数据和Binlog1234567mysql&gt; select * from t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+1 row in set (0.01 sec) mysql&gt; show binlog events;12345678+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 1 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 1 | 150 | || binlog.000001 | 150 | Stop | 1 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec 3.5 加入集群其余节点加入集群1 先定义主配文件与主机hosts2 建立通道授权 123456SET SQL_LOG_BIN=0;CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos; ;GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;SET SQL_LOG_BIN=1;CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3 添加插件1mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; 4 启动复制通道1mysql&gt; START GROUP_REPLICATION; 如果有失败，尝试12mysql&gt; set global validate_password_policy=0; mysql&gt; set global group_replication_allow_local_disjoint_gtids_join=ON; 5 查看集群成员123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | 2863475f-c490-11e7-b93e-fa163ebc6e6c | 172.18.23.8 | 3306 | ONLINE || group_replication_applier | 9c1ded3e-c495-11e7-8c62-fa163ea91040 | 172.18.23.33 | 3306 | ONLINE || group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+3 rows in set (0.01 sec) 6 查看集群中的主节点1234567mysql&gt; SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= &apos;group_replication_primary_member&apos;;+--------------------------------------+| VARIABLE_VALUE |+--------------------------------------+| f2d4456f-c48b-11e7-94f2-fa163e894684 |+--------------------------------------+1 row in set (0.01 sec) 7 binlog123456789mysql&gt; show binlog events;+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 3 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 3 | 150 | || binlog.000001 | 150 | Stop | 3 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec) 8 my.cnf优化项1234max_connections = 4096max_prepared_stmt_count=100000query_cache_type = 1query_cache_size = 10M 9 命令123456789mysql&gt; show full processlist;+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| Id | User | Host | db | Command | Time | State | Info |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| 3 | root | localhost | test | Query | 0 | starting | show full processlist || 11 | system user | | NULL | Connect | 490 | executing | NULL || 14 | system user | | NULL | Connect | 490 | Slave has read all relay log; waiting for more updates | NULL |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+3 rows in set (0.00 sec)","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-22-验证码","slug":"web-django-22-验证码","date":"2017-11-08T12:26:37.000Z","updated":"2018-04-23T07:00:07.330Z","comments":true,"path":"2017/11/08/web-django-22-验证码/","link":"","permalink":"http://www.digmyth.com/2017/11/08/web-django-22-验证码/","excerpt":"","text":"目录 生成验证码 认证验证码 插件认证 生成验证码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108def get_valid_img(request): # 第一步 # f=open(&quot;default.jpg&quot;,&apos;rb&apos;) # data=f.read() # 第二步 # import PIL # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(123, 222, 255)) # f=open(&apos;code.png&apos;,&apos;wb&apos;) # img.save(f,&apos;png&apos;) # f = open(&apos;code.png&apos;, &apos;rb&apos;) # data=f.read() # f.close() # 第三步 # from io import BytesIO # f=BytesIO() # # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(255, 255, 66)) # img.save(f,&quot;png&quot;) # data=f.getvalue() # # 第四步： # # from io import BytesIO # # f = BytesIO() # from PIL import Image, ImageDraw, ImageFont # # # 画字 # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(0, 255, 0)) # draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) # font=ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;,28) # draw.text([15,0],&apos;y&apos;,&quot;red&quot;,font=font) # # img.save(f,&quot;png&quot;) # data=f.getvalue() # 第五步： import random from io import BytesIO from PIL import Image, ImageDraw, ImageFont f = BytesIO() img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))) draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) char_list = [] # # 画字 for i in range(5): char = random.choice([chr(random.randint(65, 90)), str(random.randint(1, 9)), chr(random.randint(97, 122)), ]) font = ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;, 28) draw.text([i * 24, 0], char, (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),font=font) char_list.append(char) # # # ========================= width = 120 height = 30 def rndColor(): &quot;&quot;&quot; 生成随机颜色 :return: &quot;&quot;&quot; return (random.randint(0, 255), random.randint(10, 255), random.randint(64, 255)) # 写干扰点 for i in range(40): draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # # 写干扰圆圈 # for i in range(40): # draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # x = random.randint(0, width) # y = random.randint(0, height) # draw.arc((x, y, x + 4, y + 4), 0, 90, fill=rndColor()) # # # 画干扰线 # for i in range(5): # x1 = random.randint(0, width) # y1 = random.randint(0, height) # x2 = random.randint(0, width) # y2 = random.randint(0, height) # # draw.line((x1, y1, x2, y2), fill=rndColor()) img.save(f, &quot;png&quot;) data = f.getvalue() s = &apos;&apos;.join(char_list) request.session[&quot;valid_code&quot;] = s &apos;&apos;&apos; Dajngo: set_cookie(&quot;sessionId&quot;,&quot;asdsa234asd3sad&quot;) in session表 sessionkey sessiondata asdsa234asd3sad &#123;&quot;valid_code&quot;:s&#125; &apos;&apos;&apos; return HttpResponse(data) 认证验证码注意： 验证码的验证过程也是基于session/cookie,session/cookie知识必备12345678910111213141516171819202122232425262728from PIL import Imagefrom blog.utils import BaseResponsefrom django.contrib import authfrom blog import modelsimport jsonfrom blog.forms import RegFormdef login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.is_ajax(): username=request.POST.get(&quot;username&quot;) password=request.POST.get(&quot;password&quot;) valid=request.POST.get(&quot;valid&quot;) # 输入的验证码 keep_valid = request.session.get(&quot;valid_code&quot;) loginResponse = BaseResponse() if valid.upper() == keep_valid.upper(): user=auth.authenticate(username=username,password=password) # auth模块做认证 if user: loginResponse.user = username auth.login(request,user) # auth模块加session else: loginResponse.error = &quot;用户名或密码错误&quot; else: loginResponse.error=&quot;验证码错误&quot; return HttpResponse(json.dumps(loginResponse.__dict__)) 插件认证这个插件用于拦截机器识别，确定人为登录，使认证系统更加安全等补充… 参考","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"Mysql Galera集群搭建","slug":"mysql-Galera","date":"2017-11-08T01:41:54.000Z","updated":"2017-11-07T13:25:31.456Z","comments":true,"path":"2017/11/08/mysql-Galera/","link":"","permalink":"http://www.digmyth.com/2017/11/08/mysql-Galera/","excerpt":"","text":"目录 wsrep简介 Galera集群搭建 wsrep简介wsrep是writeset replication的简称，是一种API，在底层调用各库实现数据库同步写.通过wsrep协议在全局实现复制,任何一节点都可读写. 基于wsrep协议提供的一种底层复制机制，实现了Galera cluster数据库集群。因此Galera cluster需要特定研发的一个数据库版本,只有支持了特别的研发版本，才能借住于wsrep协议实现复制机制. 多个节点之上有了信息层，上层应用完成高可用，研发时调用信息层所提供的api去开发，并基于这个api去完成集群事务决策，不然就要自行加入中间层称资源管理器crm，如pacemaker galera cluster不是专为数据库提供的，只是一个工作在较为底层能够为你的服务提供数据复制功能的底层组件. mysql只有在研发时调用了galera cluster api写的mysql才能利用galera cluster完成复制,它的复制不再是让其它节点通过读取主节点二进制日志文件在本地重放，而是你指明了复制哪个数据库文件，由galera cluster自己在底层完成同步，mysql本身不感知. 12percona-cluster 版本支持galera clusterMariaDB-cluster 版本支持galera cluster 复制的问题和解决方案:(1) 数据损坏或丢失1234语句或行记录二进制日志，从而在从服务器上重放，重放机制也可能主从不一致的情况硬件故障、软件bug也会有数据损坏或丢失Master: MHA + semi replication(至少有一个从节点接收到了提交的binlog事件才返回成功，也是半同步复制)如果主节点数据损坏或丢失，就必须手动在从节点通过gtid来判断出己经提交的所有应用或事务，然后合并出一个较新的从节点提升为主节点Slave: 重新复制数据即可 (2) 运维部署注意事项：12345关键业务监控重要数据要备份和冗余不能混合使用存储引警MyISM: 不支持事务InnoDB: 支持事务 (3) 设置了不唯一的server ID12不唯一，整个复制集群数据产生错乱，每一个服务节点都不会在本地重放由同一个server ID 所产生的事件会导致重新复制数据 (4) 复制延迟12345需要额外监控工具的辅助自写一些脚本监控从节点有一个落后于主节点的时间判定，这个时间不为0时，尝试重启从节点服务对于从服务器延迟，主节点的事务是可以并发的，往二进制写入是单线程的，有先有后，从服务器重放也是单线程的，从服务器延迟落后也是必然的mysql5.6/mariadb 10以后引入了多线程复制机制，三节点集群可设置wsrep_slave_threads = 4 数据库服务衡量指标12qps : query per second 查询量tps: transaction per second 事务量 Galera集群搭建最新文档请参考Galera 集群官方链接 一 准备工作1 关闭防火墙2 关闭selinux3 同步主机时间4 设置hosts文件 二 MariaDB源在MariaDB 10.1以前需要卸载mariadb包，单独准备MariaDB-Galera-server源来安装MariaDB-Galera-server包例：123456789101112yum list all | grep -i galerayum remove mariadb*yum -y install MariaDB-Galera-server.rpm galera-25.3rpm -ql MariaDB-Galera-serverrpm -qa | grep MariaDB MariaDB-common-10.0.32-1.el7.centos.x86_64 MariaDB-shared-10.0.32-1.el7.centos.x86_64 MariaDB-Galera-server-10.0.32-1.el7.centos.x86_64 MariaDB-client-10.0.32-1.el7.centos.x86_64vim /etc/my.cnf.d/server.cnf[galera]... 而在MariaDB 10.1以后MariaDB-server己经自带Galera集群了，不必单独安装MariaDB-Galera-server包，只需准备如下源 编辑/etc/yum.repos.d/Mariadb.repo1234567# MariaDB 10.2 CentOS repository list - created 2017-11-07 12:07 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 三 软件安装1yum install MariaDB-server MariaDB-client 四 修改配置编辑/etc/my.cnf.d/server.cnf123456789101112[galera]#Mandatory settingswsrep_provider=/usr/lib64/galera/libgalera_smm.so # 可查rpm -ql galera | grep -i smm.sowsrep_cluster_address = &apos;gcomm://172.16.100.67,172.16.100.68,172.16.100.69&apos;wsrep_cluster_name = &apos;cluster&apos;wsrep_node_name = &apos;node1&apos;wsrep_node_address= &apos;172.16.100.67&apos;binlog_format = rowdefault_storage_engine = InnoDBinnodb_autoinc_lock_mode = 2bind-address = 0.0.0.0wsrep_on=ON 五 启动服务任意一个节点启动123/etc/init.d/mysql start --wsrep-new-cluster或service mysql bootstrap或systemctl start mariadb --wsrep-new-cluster 然后在其它节点正常启动即可12systemctl start mariadbMariaDB [(none)]&gt; show status like &apos;%wsrep%&apos;; 简单验证1234567create database mydb;use mydbcreate table tb1 (id int, name char(10));desc tb1;create table tb2 (id int unsigend auto_increment not null primary key, name char(30));insert into tb2(name) values (&apos;hi&apos;, &apos;hello&apos;)select * from tb2; 有关认证及集群检测自行研究1234wsrep_sst_method = xtrabackup-v2wsrep_sst_auth = root:NtEXLlZGF9KeXYUE79e7H8N5C9Vdy0EkHlBfFPtrwsrep_slave_threads = 4wsrep_notify_cmd = /usr/local/bin/wsrep-notify.sh # 注意定义这个脚本","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"ceph-01-运维那事","slug":"ceph-01-运维那事","date":"2017-11-05T01:41:54.000Z","updated":"2017-11-22T08:06:37.975Z","comments":true,"path":"2017/11/05/ceph-01-运维那事/","link":"","permalink":"http://www.digmyth.com/2017/11/05/ceph-01-运维那事/","excerpt":"","text":"待整理ceph运维笔记 12ceph osd set nooutceph osd unset noout 1rbd create wxq --size 1 12345678(ceph-mon)[root@pike-vm /]# rbd info rbd/wxqrbd image &apos;wxq&apos;: size 1024 kB in 1 objects order 22 (4096 kB objects) block_name_prefix: rbd_data.498102ae8944a format: 2 features: layering, exclusive-lock, object-map, fast-diff, deep-flatten flags: 12(ceph-mon)[root@pike-vm /]# ceph osd map rbd rbd_data.498102ae8944aosdmap e183 pool &apos;rbd&apos; (0) object &apos;rbd_data.498102ae8944a&apos; -&gt; pg 0.455bea7d (0.3d) -&gt; up ([1], p1) acting ([1], p1) 123456[root@lab8106 ]#ceph-objectstore-tool \\ --data-path /var/lib/ceph/osd/ceph-1/ \\ --journal-path /var/lib/ceph/osd/ceph-1/journal \\ --pgid 0.3d \\ rbd_data.498102ae8944a remove 12(ceph-mon)[root@pike-vm /]# ceph pg map 8.7d osdmap e183 pg 8.7d (8.7d) -&gt; up [2] acting [2] 12345(ceph-mon)[root@pike-vm /]# ceph pg 8.7d query&#123; &quot;state&quot;: &quot;active+clean&quot;, &quot;snap_trimq&quot;: &quot;[]&quot;,... 1234ceph pg dumpceph osd dumpceph pg map 8.7dceph pg 8.7d list_missing 12ceph pg 4.438 mark_unfound_lost revertceph pg 4.438 mark_unfound_lost delete 12ceph pg repair 0.44ceph osd pool set rbd min_size 1","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"webssh-shellinabox","slug":"linux-shellinabox","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:43:37.447Z","comments":true,"path":"2017/10/31/linux-shellinabox/","link":"","permalink":"http://www.digmyth.com/2017/10/31/linux-shellinabox/","excerpt":"","text":"利用http/https协议网页连接linux服务器，Webssh中最简单最方便的一种,还有GateOne/原生webssh yum安装1yum install shellinabox -y 查看安装文件，主要是主题相关，可以根据其位置自定义主题123456789101112131415161718rpm -ql shellinabox/etc/sysconfig/shellinaboxd/usr/lib/systemd/system/shellinaboxd.service/usr/sbin/shellinaboxd/usr/share/doc/shellinabox-2.20/usr/share/doc/shellinabox-2.20/AUTHORS/usr/share/doc/shellinabox-2.20/NEWS/usr/share/doc/shellinabox-2.20/README/usr/share/doc/shellinabox-2.20/README.Fedora/usr/share/doc/shellinabox-2.20/print-styles.css/usr/share/doc/shellinabox-2.20/shell_in_a_box.js/usr/share/doc/shellinabox-2.20/styles.css/usr/share/man/man1/shellinaboxd.1.gz/usr/share/shellinabox/usr/share/shellinabox/color.css/usr/share/shellinabox/monochrome.css/usr/share/shellinabox/white-on-black.css/var/lib/shellinabox 编辑配置文件/etc/sysconfig/shellinaboxd1OPTS=&quot;--css=/usr/share/shellinabox/white-on-black.css --disable-ssl-menu -s /:SSH:192.168.1.244&quot; 启动服务12systemctl enable shellinaboxd.servicesystemctl start shellinaboxd.service 网页登录服务器 https://192.168.1.244:4200","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"proxy-01-代理","slug":"proxy-01-代理","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:45:24.259Z","comments":true,"path":"2017/10/31/proxy-01-代理/","link":"","permalink":"http://www.digmyth.com/2017/10/31/proxy-01-代理/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-19-auth认证系统","slug":"web-django-19-auth认证系统","date":"2017-10-09T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/10/09/web-django-19-auth认证系统/","link":"","permalink":"http://www.digmyth.com/2017/10/09/web-django-19-auth认证系统/","excerpt":"","text":"目录 auth模块 Django内置补充 auth模块可以基于Cookie/Session自己写登录、注销的用户认证，这里我们学习Django自带的auth模块实现用户的登录、注销认证系统。 模块引入123from django.contrib import auth # 模块引入#from django.contrib.auth.models import User,AbstractUser#from app01 import models 下面2条命令会生成Django默认表，其中有张表auth_user用于存认证用户信息。12python manage.py makemigrationspython manage.py migrate 创建一个超级用户，auth_user可查看1python manage.py createsuperuser 自己写登录系统123456789101112131415161718192021def login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.method==&quot;POST&quot;: username=request.POST.get(&quot;username&quot;) pwd=request.POST.get(&quot;pwd&quot;) user_obj=auth.authenticate(username=username,password=pwd) # 验证 if user_obj: auth.login(request,user_obj) # 写入session return redirect(&quot;/home/&quot;) else: return redirect(&quot;/login/&quot;)def log_out(request): auth.logout(request) #相当于request.session.flush() 去除session return redirect(&quot;/login/&quot;)def home(request): if not request.user_obj.is_authenticated(): # 是否认证过有没写入session return redirect(&quot;/login/&quot;) return render(request,&quot;home.html&quot;) 注意：利用Django自带的表创建用户，不能对Django自带的表直接操作，那怎么创建呢，Django提供一个接口，通过auth模块操作User表.12from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;） 当Django自带User表字段不够用时，可以自己建表继承User表字段，方法:123from django.contrib.auth.models import AbstractUserclass UserInfo(AbstractUser): detail = modoles.CharField(max_length=32) 自建表记得settins.py配置AUTH_USER_MODEL123456789STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS =[ os.path.join(BASE_DIR,&quot;blog&quot;,&quot;static&quot;),]# MEDIA_ROOT=os.path.join(BASE_DIR,&apos;blog&apos;,&apos;media&apos;,&apos;upload&apos;)# MEDIA_URL = &apos;/media/&apos;AUTH_USER_MODEL= &quot;blog.UserInfo&quot; Django 内置补充1234567891011121314151617181920212223242526272829303132333435363738django已经为我们设计好了一个用于此种情况的装饰器：login_requierd()from django.contrib.auth.decorators import login_required @login_requireddef my_view(request): ...若用户没有登录，则会跳转到django默认的 登录URL &apos;/accounts/login/ &apos; (这个值可以在settings文件中通过LOGIN_URL进行修改)。并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。User对象User 对象属性：username， password（必填项）password用哈希算法保存到数据库is_staff ： 用户是否拥有网站的管理权限.is_active ： 是否允许用户登录, 设置为``False``，可以不用删除用户来禁止 用户登录2.1 、is_authenticated()表明是否认证通过并有session,当使用auth模块时，前端`&#123;&#123; request.user &#125;&#125;`可以直接使用不需要后端传入request.user变量。request.user.username 为AnonymousUser或用户名2.2 、创建用户使用 create_user 辅助函数创建用户:from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;）2.3 、check_password(passwd)用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 True2.4 、修改密码使用 set_password() 来修改密码user = User.objects.get(username=&apos;&apos;)user.set_password(password=&apos;&apos;)user.save 简单示例注册：1234567891011121314151617181920def sign_up(request): state = None if request.method == &apos;POST&apos;: password = request.POST.get(&apos;password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) email=request.POST.get(&apos;email&apos;, &apos;&apos;) username = request.POST.get(&apos;username&apos;, &apos;&apos;) if User.objects.filter(username=username): state = &apos;user_exist&apos; else: new_user = User.objects.create_user(username=username, password=password,email=email) new_user.save() return redirect(&apos;/book/&apos;) content = &#123; &apos;state&apos;: state, &apos;user&apos;: None, &#125; return render(request, &apos;sign_up.html&apos;, content) 修改密码：123456789101112131415161718192021222324@login_requireddef set_password(request): user = request.user state = None if request.method == &apos;POST&apos;: old_password = request.POST.get(&apos;old_password&apos;, &apos;&apos;) new_password = request.POST.get(&apos;new_password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) if user.check_password(old_password): if not new_password: state = &apos;empty&apos; elif new_password != repeat_password: state = &apos;repeat_error&apos; else: user.set_password(new_password) user.save() return redirect(&quot;/log_in/&quot;) else: state = &apos;password_error&apos; content = &#123; &apos;user&apos;: user, &apos;state&apos;: state, &#125; return render(request, &apos;set_password.html&apos;, content) 补充原文","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-19-Cookies-Session","slug":"web-django-19-Cookies-Session","date":"2017-10-08T12:26:37.000Z","updated":"2019-01-20T03:34:50.249Z","comments":true,"path":"2017/10/08/web-django-19-Cookies-Session/","link":"","permalink":"http://www.digmyth.com/2017/10/08/web-django-19-Cookies-Session/","excerpt":"","text":"目录 Cookies Session 代码学习 相关配置 总结 Cookies用户第一次请求时，服务器会在浏览器上写入cookies键值对，下一次请求会把这个键值对带上，服务器会验证这个cookies键值对，基于这样的特性cookies可以做登录验证和投票。如果没有cookies时，会先让你做用户登录。 Session所有的用户信息都写入客户端浏览器存在安全问题也不现实，我们把这些信息都写到服务器端，对应一个随机字符串，再把这个随机字符串写入cookies，格式为{“sessionid”:”随机字符串”},问题就得到了解决。 cookies就是能在客户端浏览器写键值对的一种机制，类似’user’:’abc’, 如果写的是’sessionid’:’随机字符串’，那么session就诞生了，服务端再拿到这样的随机字符串，记录信息格式如’随机字符串’:’你想存的敏感信息’ 代码学习Cookies 工作特性：在浏览器F12 network-&gt;cookies中首次请求时可以看到 Response Cookies有写入的键值对，下次再访问时Request Cookies有这个键值对，证明此时浏览器会带着这个键值对发给服务器。可以简单用下面代码测试123456def ck(request): print(request.COOKIES) # cookies会封装在request.COOKIES内 obj = render(request, &quot;ck.html&quot;, &#123;&quot;msg&quot;: &quot;&quot;&#125;) obj.set_cookie(&apos;user&apos;, &apos;wxq&apos;) # 向浏览器写入cookies键值对 return obj 下面用代码描述Cookies、Session各自工作：login.html123456&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/form&gt; views.py视图12345678910111213141516171819202122232425from app01 import modelsdef login(request): if request.method == &quot;GET&quot;: return render(request, &apos;login.html&apos;,&#123;&quot;msg&quot;: &quot;&quot;&#125;) else: u = request.POST.get(&quot;username&quot;) p = request.POST.get(&quot;pwd&quot;) v=models.UserInfo.objects.filter(username=u, pwd=p).exists() if v: # obj.set_cookie(&quot;user&quot;, u,max_age=5) request.session[&quot;user&quot;] = u request.session[&quot;pwd&quot;] = p return redirect(&quot;/home/&quot;) else: return render(request,&quot;login.html&quot;,&#123;&quot;msg&quot;: &quot;用户名或密码错误&quot;&#125;)def home(request): # v = request.COOKIES.get(&quot;user&quot;) v = request.session.get(&quot;user&quot;) if v: return HttpResponse(&quot;登录成功&quot;) else: return redirect(&quot;/login/&quot;) 利用session注销1234567891011def logout(request): &apos;&apos;&apos; obj=HttpResponse(&quot;xxx&quot;) obj.set_cookie(&quot;user&quot;,&quot;name&quot;) # 设置cookie request.COOKIES.get(&quot;user&quot;) # 获取cookie obj.delete_cookie(&apos;user&apos;) # 清除cookie &apos;&apos;&apos; #request.session[&apos;user&apos;] = &apos;wxq&apos; # 设置session #request.session.get(&apos;user&apos;) # 获取session request.session.clear() # 清除session return redirect(&quot;/login/&quot;) Cookies、Session相关配置配置参考 settings.py配置12345678910SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos; # 引擎（默认） SESSION_COOKIE_NAME ＝ &quot;sessionid&quot; # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）SESSION_COOKIE_PATH ＝ &quot;/&quot; # Session的cookie保存的路径（默认）SESSION_COOKIE_DOMAIN = None # Session的cookie保存的域名（默认）SESSION_COOKIE_SECURE = False # 是否Https传输cookie（默认）SESSION_COOKIE_HTTPONLY = True # 是否Session的cookie只支持http传输（默认）SESSION_COOKIE_AGE = 1209600 # Session的cookie失效日期（2周）（默认）SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使得Session过期（默认）SESSION_SAVE_EVERY_REQUEST = True # 是否每次请求都保存Session，默认修改之后才保存（默认） 总结1 cookies是记录在浏览器上的键值对，本身与登录没有任何关系。 cookies信息保存在request.COOKIES.2 session是记录在服务器上的键值对，key是一个随机字符串, session信息保存在request.session字典里的.3 只有Django框架有session 相关的封装,Flask/tornado等其它web框架是没有的，需要自己写Cookies、session.","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(三)","slug":"web-django-orm(三)","date":"2017-09-15T12:51:41.000Z","updated":"2018-01-18T03:45:03.508Z","comments":true,"path":"2017/09/15/web-django-orm(三)/","link":"","permalink":"http://www.digmyth.com/2017/09/15/web-django-orm(三)/","excerpt":"","text":"目录 Orm Shell FQ查询 聚合查询 参考资料官方昊练习一练习二pythoncode 一 Orm Shell pycharm中models我们己经学习过了，这里记录下在linux操作系统中启动Orm Shell需要做的几件事儿. 1 模块导入12345pip3 install pymysqlpycharm中可以在应用目录下__init__.py,也可以在项目目录__init__.py下import pymysqlpymysql.install_as_MySQLdb()但是linux系统里只能在项目目录下 2 models.py的区别1234在建立一对一或一对多关系表时需要位置参数on_delete=models.CASCADE，多对多不需要author=models.OneToOneField(&quot;Author&quot;,on_delete=models.CASCADE)publisher=models.ForeignKey(to=&quot;Publish&quot;,on_delete=models.CASCADE)authors=models.ManyToManyField(&quot;Author&quot;) 3 数据库12345678910DATABASES = &#123;&apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125; &#125; 4 明确指明INSTALLED_APPS123456789 INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;app01.apps.App01Config&apos;, ] 5 启动Orm Shell可以命令行操作orm语句学习了123python3 manage.py shell&gt;&gt;&gt; from app01 import models&gt;&gt;&gt; 6 联表sql示例原始sql语句的一个精典联表操作示例123456789101112131415161718 MariaDB [wxq_db]&gt; select sum(app01_book.price) as bookSumPrice,app01_publish.name -&gt;from app01_book_authors -&gt;left join app01_book -&gt;on app01_book.nid=book_id -&gt;left join app01_author -&gt;on author_id=app01_author.id -&gt;left join app01_publish -&gt;on publisher_id=app01_publish.id -&gt;group by app01_publish.name -&gt;having bookSumPrice &gt; 100 -&gt;order by bookSumPrice desc;+--------------+-----------------+| bookSumPrice | name |+--------------+-----------------+| 176.40 | 工业出版社 || 124.00 | 人民出版社 |+--------------+-----------------+2 rows in set (0.00 sec) 二 FQ查询123456789101112131415161718def FQQuery(request): from django.db.models import F,Q # F查询 # F查询用于自修改或字段比较或一个字段值赋值给另一字段的场景 # ret1=models.Book.objects.filter(comment_num__gt=50) # ret2=models.Book.objects.filter(comment_num__gt=F(&quot;read_num&quot;)*2) # print(ret2) #models.Book.objects.all().update(price=F(&quot;price&quot;)+10) ################################## Q查询 ret3=models.Book.objects.filter(comment_num__gt=50,read_num__gt=50) # 并且 ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100)) # 或者 print(ret3) return HttpResponse(&quot;OK&quot;) F查询总结1234F查询适用场景:场景1： 两个字段间值的比较F(&apos;price&apos;)场景2： 自运算，如F(&apos;price&apos;) + 10 Q查询总结12345# 注意事项：不同顺序的区别，不同放置的区别# 关键字语句放在Q查询的后面，并且只要有(逗号)就是(且)的意思#ret3=models.Book.objects.filter(price__lt=100,(Q(comment_num__gt=100)|Q(read_num__gt=100))) # 有效语句#ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100),price__lt=100) # 有效语句#ret3=models.Book.objects.filter(price__lt=100,Q(comment_num__gt=100)|Q(read_num__gt=100)) # 无效语句 三 聚合查询1234567891011121314151617181920212223242526272829303132def juheQuery(reqeuest): from django.db.models import F,Q,Avg,Count,Sum,Min,Max # 单纯聚合函数 # 计算所有图书的平均价格 # ret=models.Book.objects.all().aggregate(priceSum=Sum(&quot;price&quot;)) # print(ret) # &#123;&apos;priceSum&apos;: Decimal(&apos;2158.00&apos;)&#125; # 统计每一本书的作者个数 # ret2=models.Book.objects.all().annotate(authors_num=Count(&quot;authors&quot;)) # 返回QuerySet # print(ret2) # [book_obj1,book_obj2,book_obj3,book_obj4,....] # # for obj in ret2: # print(obj.nid,obj.title,obj.authors_num) # 查询每一个出版社出版过的所有书籍的总价格 #方式1： # ret3=models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)) # # for obj in ret3: # print(obj.id,obj.name,obj.priceSum) # ret4 = models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)).values(&quot;name&quot;,&quot;priceSum&quot;) # print(ret4) # 方式2： # ret5=models.Book.objects.all().values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&quot;publisher__name&quot;,&quot;priceSum&quot;) # print(ret5) return HttpResponse(&quot;OK&quot;) 实践示例12345In [178]: models.Publish.objects.annotate(priceSum=Sum(&quot;book__price&quot;)).values(&apos;name&apos;,&apos;priceSum&apos;)Out[178]: &lt;QuerySet [&#123;&apos;priceSum&apos;: Decimal(&apos;12.00&apos;), &apos;name&apos;: &apos;人民出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;工业出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;清华版社&apos;&#125;]&gt;In [179]: models.Book.objects.values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&apos;publisher__name&apos;,&apos;priceSum&apos;)Out[179]: &lt;QuerySet [&#123;&apos;publisher__name&apos;: &apos;人民出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;12.00&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;清华版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;工业出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;]&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"ceph-luminous安装","slug":"ceph-luminous安装","date":"2017-09-05T01:41:54.000Z","updated":"2017-11-13T05:12:03.615Z","comments":true,"path":"2017/09/05/ceph-luminous安装/","link":"","permalink":"http://www.digmyth.com/2017/09/05/ceph-luminous安装/","excerpt":"","text":"这里只简单列下luminous12.X 安装，默认存储引警Bluestore及监控界面 1 /etc/hosts解析略2 ntpservers时间同步略3 系统配置123456sed -i &apos;s/SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/configsetenforce 0systemctl stop firewalld systemctl disable firewalldsystemctl stop NetworkManagersystemctl disable NetworkManager 添加yum源123456789[root@cluster-sql ~]# cat ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 4 新建集群123456# mkdir /mnt/cluster# cd /mnt/cluster # yum -y install ceph-deploy# ceph-deploy install --no-adjust-repos node01 node02 node03# ceph-deploy new node01 node02 node03 5 生成原始文件12[root@node01 cluster]# ls /mnt/clusterceph.conf ceph-deploy-ceph.log ceph.mon.keyring 6 根据需要更新原始文件添加需的ceph.conf配置12345678910111213[root@node01 cluster]# cat ceph.conf [global]fsid = d8fa6509-0196-41bc-838e-6226c927e680mon_initial_members = node01, node02, node03mon_host = 192.168.1.10,192.168.1.11,192.168.1.12auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephxmon_allow_pool_delete=true[mgr]mgr modules = dashboard 7 初始化同时推送配置文件1# ceph-deploy mon create-initial 9 推送密钥文件1[root@node01 cluster]# ceph-deploy admin node01 node02 node03 10 查看集群状态12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: 11 添加激活osd磁盘12345[root@node01 cluster]# ceph-deploy osd create --bluestore node01:/dev/sdb node02:/dev/sdb node03:/dev/sdb --zap-disk[root@node01 cluster]# lsceph.bootstrap-mds.keyring ceph.bootstrap-osd.keyring ceph.client.admin.keyring ceph-deploy-ceph.logceph.bootstrap-mgr.keyring ceph.bootstrap-rgw.keyring ceph.conf ceph.mon.keyring 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[root@node01 cluster]# systemctl status ceph-osd@2 # 查看单个osd进程[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN no active mgr clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: ####[root@node01 cluster]# ceph quorum_status --format json-pretty[root@node01 cluster]# ceph osd treeID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 0.14607 root default -3 0.04869 host node01 0 hdd 0.04869 osd.0 up 1.00000 1.00000 -5 0.04869 host node02 1 hdd 0.04869 osd.1 up 1.00000 1.00000 -7 0.04869 host node03 2 hdd 0.04869 osd.2 up 1.00000 1.00000 [root@node01 cluster]# df -hTFilesystem Type Size Used Avail Use% Mounted on/dev/mapper/vg-root xfs 16G 1.7G 14G 11% /devtmpfs devtmpfs 482M 0 482M 0% /devtmpfs tmpfs 493M 0 493M 0% /dev/shmtmpfs tmpfs 493M 6.9M 486M 2% /runtmpfs tmpfs 493M 0 493M 0% /sys/fs/cgroup/dev/sda1 xfs 497M 159M 338M 32% /boot/dev/mapper/vg-data xfs 3.9G 33M 3.9G 1% /datatmpfs tmpfs 99M 0 99M 0% /run/user/0/dev/sdb1 xfs 97M 5.4M 92M 6% /var/lib/ceph/osd/ceph-0[root@node01 cluster]# cat /var/lib/ceph/osd/ceph-0/type bluestore[root@node01 cluster]# parted /dev/sdb printModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 53.7GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name Flags 1 1049kB 106MB 105MB xfs ceph data 2 106MB 53.7GB 53.6GB ceph block 12 配置ceph-mgr1[root@node01 cluster]# ceph-deploy mgr create node01 node02 node03 可以看到己被激活12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: node01(active), standbys: node02, node03 osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 3164 MB used, 146 GB / 149 GB avail pgs: 123456789101112131415[root@node01 cluster]# ceph config-key put mgr/dashboard/server_addr 192.168.1.10set mgr/dashboard/server_addr[root@node01 cluster]# ceph config-key put mgr/dashboard/server_port 7000set mgr/dashboard/server_port[root@node01 cluster]# ceph mgr module enable dashboard[root@node01 cluster]# ceph mgr module ls[ &quot;dashboard&quot;, &quot;restful&quot;, &quot;status&quot;][root@node01 cluster]# netstat -tnlp | grep 7000tcp 0 0 192.168.1.10:7000 0.0.0.0:* LISTEN 34774/ceph-mgr 13 ceph-fs部署123456789101112# ceph-deploy mds create node01 node02 node03# ceph osd pool create cephfs_data &lt;pg_num&gt;# ceph osd pool create cephfs_metadata &lt;pg_num&gt;# ceph fs new cephfs cephfs_metadata cephfs_data(ceph-mds)[root@pike-vm /]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ](ceph-mds)[root@pike-vm /]# ceph fs get cephfsFilesystem &apos;cephfs&apos; (1)fs_name cephfs... 14 cephfs文件系统挂载确保客户端存在/etc/ceph/ceph.client.admin.keyring /etc/ceph/ceph.conf 方法一：12345[root@admin:]# yum install ceph-commonroot@admin:~# ceph-authtool -l /etc/ceph/ceph.client.admin.keyring[client.admin]key = AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg==mount -t ceph 172.16.170.135:6789:/ /mnt/cephdir/ -o name=admin,secret=AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg== 方法二：123456[root@wxq ceph]# yum install ceph-fuse[root@wxq ceph]# ceph-fuse -m 172.18.23.17:6789 /mnt/cephdir/ceph-fuse[25849]: starting ceph clientceph-fuse[25849]: starting fuse[root@wxq ceph]# df -hT | grep fuseceph-fuse fuse.ceph-fuse 135G 116M 135G 1% /mnt/cephdir 总结几点1 ceph quorum_status –format json-pretty 可查看选举详情2 ceph osd pool application enable volumes rbd 标记一个池的应用(cephfs/rbd/rgw),不标记可以使用但集群状态将为warning3 保护机制的存在默认删除池是不允许的12345[root@ceph cluster]# ceph --show-config | grep deletemon_allow_pool_delete = falsemon_fake_pool_delete = falseosd_pool_default_flag_nodelete = falserbd_mirror_delete_retry_interval = 30.000000 需要编辑ceph.conf12[global]mon_allow_pool_delete=true 界面视图","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"kolla on redhat 7.2","slug":"kolla-on-redhat7.2","date":"2017-08-08T01:41:54.000Z","updated":"2017-09-10T16:06:09.587Z","comments":true,"path":"2017/08/08/kolla-on-redhat7.2/","link":"","permalink":"http://www.digmyth.com/2017/08/08/kolla-on-redhat7.2/","excerpt":"","text":"在一次项目中客户要求在redhat 7.2系统安装部署kolla ocata版本，在这种特定要求下还是实践一把的，在此把详细文档做个记录。 1. install wget最小化安装，系统很干净1rpm -ivh ftp://195.220.108.108/linux/centos/7.3.1611/os/x86_64/Packages/wget-1.14-13.el7.x86_64.rpm 2. remove yum of redhat 首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的12rpm -aq|grep yum|xargs rpm -e --nodeps rpm -aq|grep python-iniparse|xargs rpm -e --nodeps 3. install new yum123456wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-3.4.3-132.el7.centos.0.1.noarch.rpmwget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm rpm ivh *.rpm 4. yum sourece configure123456789101112131415161718192021222324252627edit /etc/yum.repos.d/Centos72.repo[base]name=CentOS-$releasever - Basebaseurl=http://vault.centos.org/7.2.1511/os/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updatesbaseurl=http://vault.centos.org/7.2.1511/updates/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[extras]name=CentOS-$releasever - Extrasbaseurl=http://vault.centos.org/7.2.1511/extras//$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[centosplus]name=CentOS-$releasever - Plusbaseurl=http://vault.centos.org/7.2.1511/centosplus//$basearch/gpgcheck=1enabled=0 5. update yum123yum clean allyum updateyum install epel-release axel vim git curl wget net-tools git gcc lrzsz python-devel vsftpd createrepo 6. optimization system123close selinuxclose NetworkManagerclose firewalld 7. add docker yum12345678tee /etc/yum.repos.d/docker.repo &lt;&lt; &apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 8. install docker1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 如果安装很慢，可以挂载ocata_20170420.iso光盘进入目录Packages/d 下面有相应软件包，执行下面命令1yum localinstall docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm docker-engine-1.12.6-1.el7.centos.x86_64.rpm 再执行完成安装1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 9. 配置docker12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof edit /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker:1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker 10. install pip1234yum install python-pippip install -U pip#easy_install -U pip # 或者easy_install工具安装pip install docker-py 11. install kolla-ansible1234# yum install gcc libffi-devel python-devel openssl-devel# pip install kolla-ansible#cp -rf /usr/share/kolla-ansible/etc_examples/kolla/ /etc/# kolla-genpwd 12. install docker registry123456789mount /dev/sr0 /mntdocker load &lt; registry.tarmkdir /opt/registrytar -zxf docker-registry.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry# curl http://172.16.100.100:4000/v2/_catalog# curl http://172.16.100.100:4000/v2/kolla/centos-source-nova-api/tags/list&#123;&quot;name&quot;:&quot;kolla/centos-source-nova-api&quot;,&quot;tags&quot;:[&quot;4.0.0.3&quot;]&#125; 13. ceph disk set123parted /dev/sdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdd -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1 14. in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 15. edit global.yml12edit /etc/kolla/global.yml此处略过。。。 16. kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy 17. cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient 18. access dashboard1curl http://172.16.100.100/horizon 如果在openstack平台虚机中搭建kolla情况下，让其能通过浮动地址访问内部地址的dashboard1iptables -t nat -I PREROUTING -d 172.18.128.244 -p tcp --dport 80 -j DNAT --to 172.16.100.100 1成功访问：http://172.18.128.244 《成功》。。。","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-ganesha-manila","slug":"cephfs-manila","date":"2017-08-05T01:41:54.000Z","updated":"2017-11-16T03:31:22.380Z","comments":true,"path":"2017/08/05/cephfs-manila/","link":"","permalink":"http://www.digmyth.com/2017/08/05/cephfs-manila/","excerpt":"","text":"openstack manila项目最近很活跃，ceph刚好发布luminous版,具说cephfs性能得到很大提升，那么manila 后端存储cephfs找到了着力点，得到在大力发展。这里对manila cephfs实验做下记录。官网链接参考 驱动简介manila cephfs驱动分为两种：一种： cephfs native share相当于租户虚机直接连接cephfs集群，存在安全问题，生产环境中很难推行。 1 ceph-common包安装在manila-share中2 ceph-common/ceph-fuse 软件安装在租户虚机Guest里3 ceph集群与manila-share网络打通4 ceph集群与租户虚机网络打通 二种： cephfs nfs share官网说明1234567891 Pike or later versions of manila.2 Kraken or later versions of Ceph.3 2.5 or later versions of NFS-Ganesha.4 A Ceph cluster with a filesystem configured5 ceph-common package installed in the servers running the manila-share service.6 NFS client installed in the guest.7 Network connectivity between your Ceph cluster’s public network and the servers running the manila-share service.8 Network connectivity between your Ceph cluster’s public network and NFS-Ganesha server.9 Network connectivity between your NFS-Ganesha server and the manila guest. 在cephfs nfs share驱动，借住nfs-Ganesha解决了网络安全性问题，避免ceph public网直接暴露。直观的理解就是Ganesha为协议转换层，FSAL_CEPH把guest vm的NFS协议调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. 安装openstack+ceph跟据官网所说准备一套openstack pike + ceph luminous 环境，安装过程略。。。。 ceph luminous 源12345678[ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 安装nfs-ganesha 需要nfs-ganesha 版本为2.5以上，只能编译安装了,具体[请参考(http://www.digmyth.com/2017/06/05/cephfs-Ganesha/)1234567891011yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -ycd /optgit clone --recursive git://github.com/nfs-ganesha/nfs-ganesha.gitmkdir /opt/build &amp;&amp; cd /opt/buildcmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 配置manila-share必要客户端安装 1234yum instal ceph ceph-fuse ceph-common libcephfs1-devel librgw2-develscp ceph_mon:/etc/ceph/* /etc/ceph #^# 复制相关配置文件``` ceph授权 如下命令会生成manila.keyring文件，一并复制到 manila-share的/etc/ceph目录下123456789101112read -d &apos;&apos; MON_CAPS &lt;&lt; EOFallow r,allow command &quot;auth del&quot;,allow command &quot;auth caps&quot;,allow command &quot;auth get&quot;,allow command &quot;auth get-or-create&quot;EOFceph auth get-or-create client.manila -o manila.keyring \\mds &apos;allow *&apos; \\osd &apos;allow rw&apos; \\mon &quot;$MON_CAPS&quot; 编辑manila-share的/etc/ceph/ceph.conf 添加如下配置1234567...[client.manila]client mount uid = 0client mount gid = 0log file = /var/logs/ceph-client.manila.logadmin socket = /run/ceph/ceph-mon.172.18.23.17.asokkeyring = /etc/ceph/manila.keyring 允许快照支持1ceph mds set allow_new_snaps true --yes-i-really-mean-it 编辑manila-share的/etc/manila/manila.conf 添加如下配置12345678910111213141516[DEFAULT]...enabled_share_backends = generic, cephfsnfs1default_share_type = default_share_typeenabled_share_protocols = NFS,CIFS,CEPHFS[cephfsnfs1]driver_handles_share_servers = Falseshare_backend_name = CEPHFSNFS1share_driver = manila.share.drivers.cephfs.driver.CephFSDrivercephfs_protocol_helper_type = NFScephfs_conf_path = /etc/ceph/ceph.confcephfs_auth_id = manilacephfs_cluster_name = cephcephfs_enable_snapshots = Falsecephfs_ganesha_server_is_remote= Falsecephfs_ganesha_server_ip = 172.18.23.17 # 指明nfs-ganesha服务器位置 验证服务验证12345678910(manila-share)[root@pike-vm /]# manila service-list+----+------------------+--------------------+------+---------+-------+----------------------------+| Id | Binary | Host | Zone | Status | State | Updated_at |+----+------------------+--------------------+------+---------+-------+----------------------------+| 1 | manila-data | pike-vm | nova | enabled | up | 2017-11-15T10:14:37.000000 || 2 | manila-scheduler | pike-vm | nova | enabled | up | 2017-11-15T10:14:38.000000 || 3 | manila-share | pike-vm@generic | nova | enabled | up | 2017-11-15T10:14:40.000000 || 4 | manila-share | pike-vm@cephfsnfs1 | nova | enabled | up | 2017-11-15T10:14:40.000000 |+----+------------------+--------------------+------+---------+-------+----------------------------+ 创建manila实例123manila type-create cephfsnfstype falsemanila type-key cephfsnfstype set vendor_name=Ceph storage_protocol=NFSmanila create --share-type cephfsnfstype --name cephnfsshare1 nfs 1 查看共享路径123456(manila-share)[root@pike-vm /]# manila share-export-location-list cephnfsshare1+--------------------------------------+---------------------------------------------------------------------+-----------+| ID | Path | Preferred |+--------------------------------------+---------------------------------------------------------------------+-----------+| 18cf503a-9357-40e2-925a-53333031a3e6 | 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 | False |+--------------------------------------+---------------------------------------------------------------------+-----------+ 权限管理 1manila access-allow cephnfsshare1 ip 172.24.4.225 guest vm 挂载1mount -t nfs 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 /mnt/nfs/","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-16-Form验证","slug":"web-django-16-Form","date":"2017-07-20T12:26:37.000Z","updated":"2018-01-18T03:41:15.272Z","comments":true,"path":"2017/07/20/web-django-16-Form/","link":"","permalink":"http://www.digmyth.com/2017/07/20/web-django-16-Form/","excerpt":"","text":"目录 基本功能 基本使用 常用字段 常用插件 总结 这篇博客记录Django Form功能的学习，链接请参考Django Form武佩齐权威博客 基本功能 Form验证 生成html标签（保留上次提交的内容） 详细：12345678class TestForm(forms.Form): username = fields.CharField( # 静态字段 required=True, min_length=6, max_length=8, error_messages=&#123;&quot;required&quot;:&quot;用户名不能为空&quot;, &quot;min_length&quot;:&quot;最少6位&quot;&#125;， widget = widgets.TextInput(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # 插件 ) 基本使用模块导入-&gt;类定义-&gt;定义字段-&gt; 定义插件-&gt; 实例化-&gt; 传入前端-&gt;前端渲染12from django import formsfrom django.forms import fields,widgets views.py定义Form类，写出来常用插件用法1234567891011121314151617class TestForm(forms.Form): n1 = fields.CharField( widget = widgets.TextInput() ) n2 = fields.CharField( widget = widgets.PasswordInput() ) n3 = fields.CharField( widget=widgets.Textarea() ) n4 = fields.CharField( widget=widgets.Select(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]) ) 单选多选总结：1 把上面CharField改为ChoiceField就好了，并choices=[]提到前面来2 单选CharField就可以，多选一定记得用ChoicField,并且choices=[]提前 123456789# n5 = fields.CharField( # # 这里是有问题的，CharField只能是字符串，&quot;n5&quot;:[1,3]默认值是一个列表，后端没法接收数据。# widget=widgets.SelectMultiple(choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)])# )n5 = fields.ChoiceField( choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget=widgets.SelectMultiple()) 12345678910111213141516n6 = fields.IntegerField( widget=widgets.RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]))n7 = fields.CharField( # 这里只会生成CheckboxInput标签 &lt;input type=&quot;checkbox&quot; name=&quot;n7&quot; required=&quot;&quot; id=&quot;id_n7&quot;&gt; widget=widgets.CheckboxInput())n8 = fields.ChoiceField( # 真正生成checkbox组写法 choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget = widgets.CheckboxSelectMultiple())n9 = fields.FileField( widget=widgets.FileInput()) 实例化Form类时传入默认值用于前端展示，主要学习文件上传的方法123456789101112131415161718192021222324252627def test(request): if request.method == &quot;GET&quot;: obj = TestForm( initial=&#123;&quot;n1&quot;:&quot;请输入&quot;,&quot;n2&quot;:&quot;xxx&quot;,&quot;n3&quot;:&quot;文本输入&quot;,&quot;n4&quot;:1,&quot;n5&quot;:[1,3], &quot;n6&quot;:2,&quot;n7&quot;:&quot;&quot;,&quot;n8&quot;:[2,3]&#125; ) return render(request, &quot;test.html&quot;,&#123;&quot;obj&quot;:obj&#125;) if request.method == &quot;POST&quot;: # 文件提交保存在request.FILES # obj = TestForm(data=request.POST,files=request.FILES) # if obj.is_valid(): # # obj.cleaned_data[&apos;n9&apos;] 这是上传的文件对象 # #obj.cleaned_data[&apos;n9&apos;].name 这是上传文件名 # files_obj = obj.cleaned_data[&apos;n9&apos;] # f = open(files_obj.name, &apos;wb&apos;) # for chunck in files_obj.chunks(): # f.write(chunck) # f.close() # else: # pass files_obj = request.FILES.get(&quot;n9&quot;) f = open(files_obj.name, &apos;wb&apos;) for chunck in files_obj.chunks(): f.write(chunck) f.close() return redirect(&apos;/test/&apos;) 提交文件需要enctype=&quot;multipart/form-data&quot;测试时忽略其它值用novalidatetest.html12345678910111213&lt;form action=&quot;/test/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;&#123; obj.n1 &#125;&#125; &#123;&#123; obj.n2 &#125;&#125; &#123;&#123; obj.n3 &#125;&#125; &#123;&#123; obj.n4 &#125;&#125; &#123;&#123; obj.n5 &#125;&#125; &#123;&#123; obj.n6 &#125;&#125; &#123;&#123; obj.n7 &#125;&#125; &#123;&#123; obj.n8 &#125;&#125; &#123;&#123; obj.n9 &#125;&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/form&gt; 常用字段123456CharField 字符串 EmailField 字符串（邮箱格式）IntegerField 字符串（整形格式）GenericIPAddressField 字符串（Ip格式）RegexField 字符串（正则自定义）FileField 文件对象 常用插件123456789101112TextInputPasswordInputTextareaFileInput()Select(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;，choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])SelectMultiple(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)]RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])CheckboxInput()CheckboxSelectMultiple() Form问题在前端使用选择标签渲染时，多表foreigh key跨表查询数据源无法实时更新。比如choices的选项可以从数据库中获取，但是由于是静态字段获取的值无法实时更新，那么需要自定义构造方法从而达到此目的。 方法有很多，推荐123456789101112131415161718from django.forms import Formfrom django.forms import widgetsfrom django.forms import fieldsfrom django.core.validators import RegexValidator class MyForm(Form): user = fields.ChoiceField( # choices=((1, &apos;上海&apos;), (2, &apos;北京&apos;),), initial=2, widget=widgets.Select ) def __init__(self, *args, **kwargs): super(MyForm,self).__init__(*args, **kwargs) # self.fields[&apos;user&apos;].widget.choices = ((1, &apos;上海&apos;), (2, &apos;北京&apos;),) # 或 self.fields[&apos;user&apos;].widget.choices = models.Classes.objects.all().value_list(&apos;id&apos;,&apos;caption&apos;) 总结Django Form功能一是验证，功能二是用于生成html标签并且能保留上次提交的内容。注意Form验证读取数据时的数据源实时更新问题，一般我们自定义Form类的构造方法实现。 还有很多要学习的。。。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"基于CentOS 7的PXE装机","slug":"基于CentOS7的PXE装机","date":"2017-07-01T01:41:54.000Z","updated":"2021-01-27T08:35:19.030Z","comments":true,"path":"2017/07/01/基于CentOS7的PXE装机/","link":"","permalink":"http://www.digmyth.com/2017/07/01/基于CentOS7的PXE装机/","excerpt":"","text":"网上各种贴子各种飞总说不到重点，本人表示不喜欢。 基于Centos7PXE装机基本概念 pxe装机依赖几个服务： dhcp/tftp/fileserver dhcp: 为装机分配地址及指明tftp server服务器是谁，下载什么文件 tftp: 提供网络引导文件pxelinux.0及内核文件vmlinuz、initrd.img (具体文件： boot.msg initrd.img pxelinux.0 pxelinux.cfg splash.png vesamenu.c32 vmlinuz) fileserver: 提供安装树输出，一般指yum repository (yum 仓库或yum源) syslinux: 网络引导文件pxelinux.0由syslinux软件包提供 dhcp服务1234yum -y install dhcprpm -ql dhcp/etc/dhcp/dhcpd.conf # 主配置文件/var/lib/dhcpd/dhcpd.leases # 租约文件 12345678910111213141516[root@master ~]# cat /etc/dhcp/dhcpd.conf | grep -v ^# | grep -v ^$option domain-name &quot;digmyth.com&quot;;option domain-name-servers 114.114.114.114;default-lease-time 600;max-lease-time 7200;log-facility local7;subnet 172.16.10.0 netmask 255.255.255.0 &#123; range 172.16.10.20 172.16.10.30; option domain-name-servers 172.16.10.1; option domain-name &quot;digmyth.com&quot;; option routers 172.16.10.254; default-lease-time 600; max-lease-time 7200;&#125;filename &quot;pxelinux.0&quot;; # 定义网络引导文件名next-server 172.16.10.1; # 定义tftp server地址 启动服务123# systemctl start dhcpd[root@master ~]# netstat -unlp | grep 67udp 0 0 0.0.0.0:67 0.0.0.0:* 995/dhcpd syslinux提供引导文件1234准备网络引导文件pxelinux.0 相当于bootloader# yum -y install syslinux[root@master tftpboot]# ll /usr/share/syslinux/pxelinux.0 -rw-r--r--. 1 root root 26764 Nov 6 2016 /usr/share/syslinux/pxelinux.0 tftp server12345# yum -y install tftp tftp-server[root@master ~]# rpm -ql tftp-server/etc/xinetd.d/tftp # 启动文件/usr/sbin/in.tftpd/var/lib/tftpboot # 服务根目录 1234567891011121314# cat /etc/xinetd.d/tftpservice tftp&#123; socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /var/lib/tftpboot disable = no #改为no per_source = 11 cps = 100 2 flags = IPv4&#125; 启动tftp服务1234# cp /usr/share/syslinux/pxelinux.0 /var/lit/tftpboot# systemctl start tftp# tftp localhost&gt; get pxelinux.0 # 测试成功 准备内核及其它相关文件 此时pxe己经能够获得地址并下载pxelinux.0进行网络引导，接下来是下载内核文件vmlinuz、initrd.img继续完成装机。 这里我拿CentOS7.2为例：CentOS-7-x86_64-DVD-1511.iso 12345[root@master ~]# mount -o loop CentOS-7-x86_64-DVD-1511.iso /mntmount: /dev/loop0 is write-protected, mounting read-only[root@master pxeboot]# cd /mnt/images/pxeboot/[root@master pxeboot]# cp vmlinuz /var/lib/tftpboot/[root@master pxeboot]# cp initrd.img /var/lib/tftpboot/ 12345678910111213mkdir /var/lib/tftpboot/pxelinux.cfgcp /mnt/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg /default [root@master pxelinux.cfg]# cat default default vesamenu.c32#default linux # 这里是一个标签，对找后面相应的labeltimeout 600menu title CentOS 7 wxq # 此处定义titlelabel linux menu label ^Install CentOS 7 # 此处定义系统安装时显示版本 kernel vmlinuz append initrd=initrd.img method=http://172.16.10.1/pub/ ks=http://172.16.10.1/pxe/CentOS72.ks# 注意： 如果此处只定义method,那么装机过程将全手动。 此外还有一些额外文件12345[root@master ~]# ls /mnt/isolinux/boot.cat grub.conf isolinux.bin memtest TRANS.TBL vesamenu.c32boot.msg initrd.img isolinux.cfg splash.png upgrade.img vmlinuz[root@master ~]# ll /var/lib/tftpboot/boot.msg initrd.img pxelinux.0 splash.png vesamenu.c32 vmlinuz 定义安装树12345# yum -y install httpd# mkdir /var/www/html/pxe# mkdir /var/www/html/pub# mount --bind /mnt /var/www/html/pub/ # systemctl start httpd 定义ks文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/pxe/CentOS72.ks[root@master pxe]# cat CentOS72.ks#version=DEVEL# System authorization informationinstall# Keyboard layoutskeyboard --vckeymap=us --xlayouts=&apos;us&apos;auth --enableshadow --passalgo=sha512# Use CDROM installation media# Run the Setup Agent on first boot#firstboot --enable# System languagelang en_US.UTF-8url --url=http://172.16.10.1/pub/# Use graphical installgraphical#textselinux --disabledskipxreboot# Network information#network --bootproto=static --device=ens33 --gateway=172.16.10.254 --ip=172.16.10.30 --nameserver=114.114.114.114 --netmask=255.255.255.0 --onboot=on --ipv6=auto --activatenetwork --bootproto=dhcp --device=ens33 --onboot=yes --ipv6=auto --activatenetwork --hostname=digmyth# Root password=123456rootpw --iscrypted $6$6ErC1johQ5LVAYwQ$cGGxb6Q6./SpvXCZs.K39d9LpV/IeFnspUT6mHmsVsARzToRCSsZ4fLxcOh0tYWpt38Yh6JoMzmSEkEtCtMlS/# System servicesservices --disabled=&quot;chronyd&quot;# System timezonetimezone Asia/Shanghai --isUtc --nontp# System bootloader configurationclearpart --all --initlabelbootloader --append=&quot; crashkernel=auto&quot; --location=mbr --boot-drive=sda# Partition clearing information#clearpart --drives=sda --initlabel#clearpart --none --initlabel# Disk partitioning information#ignoredisk --only-use=sda#part pv.735 --fstype=&quot;lvmpv&quot; --ondisk=sda --size=19979#volgroup vg --pesize=4096 pv.735#logvol /boot --fstype=&quot;xfs&quot; --size=500 --name=boot --vgname=vg#logvol / --fstype=&quot;xfs&quot; --size=16000 --name=root --vgname=vg#logvol /data --fstype=&quot;xfs&quot; --size=3000 --name=data --vgname=vg#logvol swap --fstype=&quot;swap&quot; --grow --size=1%packages@^minimal@corekexec-toolsvimnet-toolssysstat%end%posttouch /root/wxq.txt%end%addon com_redhat_kdump --enable --reserve-mb=&apos;auto&apos;%end 上面的装机将进入图形界面手动分区安装 到此完结，可以结合cobbler实现多pxe环境并存。 cobbler 一些概念： distro发行版： 其实就是pxe所说的相应内核文件 profile: 提供pxeboot引导文件、KS文件、安装树（用现有iso镜像mirror/import方式） 是不是很完美 。。。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux java install","slug":"linux-java-install","date":"2017-06-21T03:42:54.000Z","updated":"2021-01-29T10:01:54.393Z","comments":true,"path":"2017/06/21/linux-java-install/","link":"","permalink":"http://www.digmyth.com/2017/06/21/linux-java-install/","excerpt":"","text":"download jdk1.812[root@nodeadm ]# mkdir /usr/local/java[root@nodeadm ]# tar xf jdk-8u181-linux-x64.tar.gz -C /usr/local/java uncompress1234567891011121314151617[root@nodeadm java]# pwd/usr/local/java[root@nodeadm java]# ll jdk1.8.0_181/total 25976drwxr-xr-x 2 root root 4096 Sep 21 08:54 bin-r--r--r-- 1 root root 3244 Sep 21 08:54 COPYRIGHTdrwxr-xr-x 3 root root 132 Sep 21 08:54 include-rw-r--r-- 1 root root 5207314 Sep 21 08:54 javafx-src.zipdrwxr-xr-x 5 root root 185 Sep 21 08:54 jredrwxr-xr-x 5 root root 245 Sep 21 08:54 lib-r--r--r-- 1 root root 40 Sep 21 08:54 LICENSEdrwxr-xr-x 4 root root 47 Sep 21 08:54 man-r--r--r-- 1 root root 159 Sep 21 08:54 README.html-rw-r--r-- 1 root root 424 Sep 21 08:54 release-rw-r--r-- 1 root root 21099920 Sep 21 08:54 src.zip-rw-r--r-- 1 root root 106782 Sep 21 08:54 THIRDPARTYLICENSEREADME-JAVAFX.txt-r--r--r-- 1 root root 154222 Sep 21 08:54 THIRDPARTYLICENSEREADME.txt set java_env123456[root@nodeadm java]# tail -n 5 /etc/profileexport JAVA_HOME=/usr/local/java/jdk1.8.0_181export JRE_HOME=/usr/local/java/jdk1.8.0_181/jreexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 仅作记录","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-11-模板渲染","slug":"web-django-11-模板渲染","date":"2017-06-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/06/20/web-django-11-模板渲染/","link":"","permalink":"http://www.digmyth.com/2017/06/20/web-django-11-模板渲染/","excerpt":"","text":"目录 基本方法 过滤器 标签 Django对template中html的渲染有着一套语法, 基本方法1234567891011return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 过滤器filter内置一些方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 1 add ： 给变量加上相应的值 # # 2 addslashes : 给变量中的引号前加上斜线 # # 3 capfirst : 首字母大写 # # 4 cut ： 从字符串中移除指定的字符 # # 5 date ： 格式化日期字符串 # # 6 default ： 如果值是False,就替换成设置的默认值，否则就是用本来的值 # # 7 default_if_none: 如果值是None，就替换成设置的默认值，否则就使用本来的值#value1=&quot;aBcDe&quot;&#123;&#123; value1|upper &#125;&#125;&lt;br&gt;#value2=5&#123;&#123; value2|add:3 &#125;&#125;&lt;br&gt;#value3=&apos;he llo wo r ld&apos;&#123;&#123; value3|cut:&apos; &apos; &#125;&#125;&lt;br&gt;#import datetime#value4=datetime.datetime.now()&#123;&#123; value4|date:&apos;Y-m-d&apos; &#125;&#125;&lt;br&gt;#value5=[]&#123;&#123; value5|default:&apos;空的&apos; &#125;&#125;&lt;br&gt;#value6=&apos;&lt;a href=&quot;#&quot;&gt;跳转&lt;/a&gt;&apos;&#123;&#123; value6 &#125;&#125;&#123;% autoescape off %&#125; &#123;&#123; value6 &#125;&#125;&#123;% endautoescape %&#125;&#123;&#123; value6|safe &#125;&#125;&lt;br&gt;&#123;&#123; value6|striptags &#125;&#125;#value7=&apos;1234&apos;&#123;&#123; value7|filesizeformat &#125;&#125;&lt;br&gt;&#123;&#123; value7|first &#125;&#125;&lt;br&gt;&#123;&#123; value7|length &#125;&#125;&lt;br&gt;&#123;&#123; value7|slice:&quot;:-1&quot; &#125;&#125;&lt;br&gt;#value8=&apos;http://www.baidu.com/?a=1&amp;b=2&apos;&#123;&#123; value8|urlencode &#125;&#125;&lt;br&gt; value9=&apos;hello I am pythoner&apos; 标签Django 提供的函数: simple_tag 可以有多个参数 filter 只能有2个参数，并且可以做条件语句的条件 自定义过滤器、自定义标签 形如for/if123&#123;% for item in todo_list %&#125; &lt;p&gt;&#123;&#123; forloop.counter &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 自定义标签当内置函数不满足需求时，可自定义filter/simple_tag 1 在Django app中创建目录名心须为templatetags的目录 2 在templatetags下随意定义.py 文件 如my_tag.py12345678910111213141516#!/usr/bin/env python3__author__ = &quot;wxq&quot;from django import templatefrom django.utils.safestring import mark_saferegister = template.Library()# register变量名是固定的，不可以改变@register.filter # 自定义过滤器def multip(x,y): return x*y@register.simple_tag # 自定义标签def multi_tag(x,y,z): return x*y*z 3 使用自定义simple_tag和filter的html文件中导入之前创建的 my_tag.py, 注意格式百分号.1&#123;% load &quot;my_tag&quot; %&#125; 4 使用定义的simple_tag和filter123456# html首行导入&#123;% load my_tag %&#125;&lt;body&gt; &lt;p&gt;&#123;&#123; 10 |add:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; n | multip:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;% multi_tag 10 320 30 %&#125;&lt;/p&gt;&lt;/body&gt; 模板继承123456&#123;% block content %&#125;...&#123;% endblock %&#125;使用模板标签： &#123;% block %&#125; 。 所有的 &#123;% block %&#125; 标签告诉模板引擎，子模板可以重载这些部分。每个&#123;% block %&#125;标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。 总结：1 后端是字典如[“key”]取值，模板里都用.key2 后端是元组或列表如[0]取值，模板里都用.03 后端是函数或类方法用跨号()调用，模板里不加跨号，切记","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(二)","slug":"web-django-orm(二)","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:44:48.308Z","comments":true,"path":"2017/06/15/web-django-orm(二)/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-django-orm(二)/","excerpt":"","text":"目录 一对多查询 多对多查询 查询优化 一对多查询1.1 创建测试数据models.py数据库模型1234567from django.db import modelsclass DePart(models.Model): title=models.CharField(max_length=32)class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(DePart) 创建测试数据12345678models.DePart.objects.create(title=&quot;IT&quot;)models.DePart.objects.create(title=&quot;咨询&quot;)models.DePart.objects.create(title=&quot;公关&quot;)models.UserInfo.objects.create(username=&quot;user1&quot;,pwd=123,dp_id=1)models.UserInfo.objects.create(username=&quot;user2&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user3&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user4&quot;,pwd=456,dp_id=2) 注：12p=models.UserInfo.objects.create(username=&apos;wxq&apos;,pwd=123) # 返回对象本身print(p.username,p.pwd) 1.2 一对多正向查询all() 返回Queryset123v = models.DePart.objects.all()for row in v: print(row.id,row.title,row.userinfo_set.all()) values()返回Queryset1234# values()每一个字典代表一行数据# v = models.UserInfo.objects.values(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)# for row in v:# print(row[&apos;username&apos;],row[&apos;dp__title&apos;]) values_list()返回Queryset1234# values_list()每一个元组代表一行数据v = models.UserInfo.objects.values_list(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)for row in v: print(row[0],row[2]) 1.3 一对多反向查询all()1234567 v=models.DePart.objects.all() for row in v: print(row.id, row.title, row.userinfo_set.all())打印结果：1 IT &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;2 咨询 &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;]&gt;3 公关 &lt;QuerySet []&gt; values()123456789v = models.DePart.objects.values(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[&apos;title&apos;],row[&apos;userinfo__username&apos;],row[&apos;userinfo__dp_id&apos;])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None values_list()123456789v = models.DePart.objects.values_list(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[0],row[1],row[2])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None 1.4 总结正向查询用字段（这里字段是指外键字段） all: 字段+.跨表字段 values: 字段 + __跨表字段 values_list 字段+ __跨表字段反向查询用表名 all: 表名小写+_set values: 表名小写 + __跨表字段 values_list 表名小写+ __跨表字段 总结一句话就是： 正向查询用字段，反向查询用表名 多对多查询2.1 多对多自建表当我们自己建第三张表时，第三张表列数没有限制，更加灵活，更能满足复杂需求1234567表模型class UserGroup(models.Model): caption= models.CharField(max_length=32)class U2G(models.Model): ui = models.ForeignKey(UserInfo) ug = models.ForeignKey(UserGroup) 12345678910111213创建测试数据models.U2G.objects.create(ui_id=1,ug_id=1)models.U2G.objects.create(ui_id=2,ug_id=1)models.U2G.objects.create(ui_id=3,ug_id=2)models.U2G.objects.create(ui_id=4,ug_id=2)v=models.U2G.objects.all()for row in v: print(row.ug.caption,row.ui.username)# 打印结果A组 user1A组 user2B组 user3B组 user4 2.2 多对多非自建多对多关系Django ManyToMany帮我们建第三张表时，我们不能对第三张直接操作，并且第三张只有三列（2张表的分别ForeighKey列，自增ID列）。只能通过如下面的ManyToMany字段间接操作12345678910111213#表模型class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(&quot;DePart&quot;)class UserGroup(models.Model): caption= models.CharField(max_length=32) m = models.ManyToManyField(&quot;UserInfo&quot;)&apos;&apos;&apos;第三张表只有三列id userinfo_id usergroup_id&apos;&apos;&apos;&apos; 添加几个组做如下增删及更新数据操作123456obj = models.UserGroup.objects.filter(id=2).first() #id为2的组是B组print(obj.id,obj.caption,obj.m)obj.m.add(*[1,2]) #ID为1，2的用户加入B组# obj.m.remove(*[1,]) # 删除B组中用户id为1的记录obj.m.clear() # 清除组id为2的所有记录obj.m.set([1,]) # 不管id为2的组有几个用户都清空后把用户id为1的加入B组 2.3 多对多查询学习多对多查询注意：first/get返回对象，filter/all/values/values_list返回QuerySet1234obj=models.UserGroup.objects.filter(id=2).first() # 得到组对象v=obj.m.all() # obj.m表示UserInfo表for row in v: print(row.username, row.dp.title) 123obj=models.UserGroup.objects.filter(id=2).first() # 得到组ID为2的对象v=obj.m.filter(dp__title=&quot;IT&quot;).first() # UserInfo表中查部门为IT的记录print(v.username) # 打印符合条件的username 优化select_related优化12345user_list=models.UserInfo.objects.all() # 这里是1次sql请求for row in user_list: #如果有10条数据,会有10次sql请求 print(row.username,row.dp.title) # 每一次row.dp.title都会跨表查询那么返回结果经历了11次sql请求,做select_related优化后只有2次sql请求,其中1次是跨表请求models.UserInfo.objects.all().select_related(&quot;ForeighKeyname&quot;) #优化方法一 prefetch_related优化,推荐用优化方法二123456789models.UserInfo.objects.all().prefetch_related(&quot;ForeighKeyname&quot;) # 优化方法二prefetch_related可以分解为models.UserInfo.objects.all()一次单表查询取到了ForeighKeyname_id=[1,2,3,4,5] 然后DJango会发起第2次单表查询，models.DePart.objects.filter(id__in = [1,2,3,4,5]) 2次单表查询明显轻量了。#only:只取相应字段，否则性能下降# defer:不取相应字段，否则性能下降models.UserInfo.objects.all().only(&apos;id&apos;,&apos;name&apos;) # 只取哪几列models.UserInfo.objects.all().defer(&apos;id&apos;,&apos;name&apos;) # 不取哪几列 还有更多","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-02-前端html","slug":"web-02-前端html","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:47:19.192Z","comments":true,"path":"2017/06/15/web-02-前端html/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-02-前端html/","excerpt":"","text":"前言单选框提交时以{“gender”:”男”}形式, checked表示默认选中1234&lt;div&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; checked=&quot;checked&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;/&gt;女&lt;/div&gt; 多选框提交时以{“hobby”:”[11,12.13]”}形式，checked表示默认选中123456&lt;div&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;11&quot; checked=&quot;checked&quot; /&gt;乒乓球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;12&quot;/&gt;监球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;13&quot;/&gt;足球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;14&quot;/&gt;排球&lt;/div&gt; 下拉框multiple表示多选，没有multiple表示单选，selected表示默认选中1234567&lt;div&gt; &lt;select name=&quot;city&quot; id=&quot;&quot; multiple&gt; &lt;option value=&quot;北京&quot; selected=&quot;selected&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 提交type=”button” 不能提交表单数据，除非事件绑定type=”submit” 默认事件就是提交表单数据。12345&lt;form&gt; &lt;button&gt;提交&lt;/button&gt; # button标签在form里也会有事件，会提交 &lt;input type=&quot;submit&quot;&gt; # 有事件，也会提交 &lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt; # 没有事件，不会提交&lt;/form&gt; 前端相关概念Jquery学习可参考基本概念： html很骨感. css就是装饰或样式. js 就是让其能动起来, js=javascript，Javascript是一门编程语言，我们用它来编写客户端浏览器脚本 jQuery是一个快速、简洁的JavaScript框架,一种javascript工具库，把我们常用的一些功能进行封装，方便我们调用，极大简化了Javascript编程，提高了开发效率。jQuery设计的宗旨就是“write Less，Do More” Bootstrap是一个开发框架，集成了很多现成的网页格式和网页布局，封装了很多CSS样式和JS代码 Javascipt跟jQuery的区别：jQuery是javascript的一个库，包含多个可重用的函数，用来辅助我们简化javascript开发jQuery能做的javascipt都能做到，而javascript能做的事情，jQuery不一定能做到。 position定位的学习12345position position: relative # 与absolute一起使用 position: absolute #随滚动条滚动而滚动 随滚动条滚动而滚动，并且一直往上找，直到找到一个relative后进行定位 position: fixed # 永远在窗口某位置 引用图标要想用图标有很多种方法方法一：当我们引入了bootstrap.css时，我们可以用它官网的图标https://v3.bootcss.com/components/ 图标名字即类名就可使用了 方法二：fontawesome也有很多图标需要下载font-awesome文件来引入 https://fontawesome.io/icons/ # 每一个图标可点击，点开后能看到引用方法。 方法三：这个也是图标库，方法见官网http://fontawesome.dashgame.com/#basic","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"linux_iptables应用","slug":"linux-iptables应用","date":"2017-06-15T01:42:54.000Z","updated":"2018-04-23T06:57:19.754Z","comments":true,"path":"2017/06/15/linux-iptables应用/","link":"","permalink":"http://www.digmyth.com/2017/06/15/linux-iptables应用/","excerpt":"","text":"iptables 规则应用总结防火墙端口重定向规则1iptables -t nat -I PREROUTING -i eth1 -p tcp --dport 80 -j REDIRECT --to 8080 反向代理防火墙规则12iptables -I INPUT -d 123.125.168.130 -i eth0 -p tcp --dport 80 -j ACCEPTiptables -I INPUT -s 10.10.10.0/24 -i eth1 -p tcp --sport 9999 -j ACCEPT 此包为input状态检测可省略12iptables -I OUTPUT -p tcp -o eth1 -s 10.10.10.1 -d 10.10.10.10 --dport 9999 -j ACCEPTiptables -I OUTPUT -p tcp -o eth0 -s 123.125.168.130 --sport 80 -j ACCEPT 目标地址转换：123iptables -t nat -I PREROUTING -i eth0 -d 123.125.168.130 -p tcp --dport 80 -j DNAT --to 10.10.10.10:9999iptables -A FORWARD -d 10.10.10.10 -p tcp --dport 9999 -j ACCEPTiptables -A FORWARD -s 10.10.10.10 -p tcp --sport 9999 -j ACCEPT 如果10.10.10.10机器默认网关不是10.10.10.1或没有指网关,则网关防火墙需如下:有点奇怪的规则1iptables -t nat -I POSTROUTING -d 10.10.10.10 -p tcp --dport 9999 -j SNAT --to 10.10.10.1 源地址转换：12iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j SNAT --to 123.125.168.130iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE 此条开销较大，与上条可二选一12iptables -I FORWARD -s 10.10.10.0/24 -j ACCEPT 注：forward不指网卡，要指也是内网卡iptables -I FORWARD -d 10.10.10.0/24 -j ACCEPT","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"git 利器","slug":"git-01","date":"2017-06-15T01:42:54.000Z","updated":"2018-08-25T03:35:15.638Z","comments":true,"path":"2017/06/15/git-01/","link":"","permalink":"http://www.digmyth.com/2017/06/15/git-01/","excerpt":"","text":"目录 git建版本库 git别名设置 git基本配置 git基本命令 git分支管理 git创建版本库12git init # 把当前目录变成git可管理的仓库生成的.git目录是用来跟踪管理版本库的,称为git的一个版本库 git别名设置1234为命令设置别名$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch git配置123每台机器自报家门$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 12优先级从高到低是.git/config--&gt; --global --&gt; system 12345全局生效: 配置保存在/etc/gitconfig[root@wxq-srv git_work]# git config --system user.name &quot;wxq&quot;[root@wxq-srv git_work]# cat /etc/gitconfig [user] name = wxq 12345678当前用户所有仓库生效：配置保存在~/.gitconfig[root@wxq-srv git_work]# cat /root/.gitconfig [user] name = wxq email = you@example.com[root@wxq-srv git_work]# git config --global user.name &quot;wxq&quot;[root@wxq-srv git_work]# git config --global user.email &quot;you@example.com&quot; 12345678910只对某仓库生效：配置保存在reponame/.git/config[root@wxq-srv git_work]# git config user.name &quot;wxq1&quot;[root@wxq-srv git_work]# cat .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[user] name = wxq1 基本命令1234567git log # 每一次提交的记录git reset --hard HEAD^ #HEAD表示当前版本，HEAD^^表示上上个版本，依次类推，上100个版本是HEAD~100git reset --hard $commit_id # 回到指定版本git reflog # 只要改变都会在这里记录，用于回到未来的某个版本。git add index.html # 添加更改至state暂存 区git reset HEAD index.html # unstage 退出暂存区git diff HEAD -- readme.txt # 查看当前工作区和版本库有什么不同 放弃修改除了版本回退外，只要未commit之前都可以放弃工作区所做的修改。如果有add 动作，需要先从暂存区回退到工作区git reset HEAD index.html如果没有add动作，可直接放弃修改git checkout -- index.txt或者可以这么理解git checkout -- index.txt 都会从暂存区或版本库(优先从暂存区)恢复到工作区. 分支管理123456查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt; 待续","categories":[{"name":"Git","slug":"Git","permalink":"http://www.digmyth.com/categories/Git/"}],"tags":[]},{"title":"Mysql sysbench 压测","slug":"mysql-sysbench","date":"2017-06-10T01:41:54.000Z","updated":"2017-11-10T09:01:54.314Z","comments":true,"path":"2017/06/10/mysql-sysbench/","link":"","permalink":"http://www.digmyth.com/2017/06/10/mysql-sysbench/","excerpt":"","text":"目录 工具安装 执行压测 针对优化 示例结果 数据库指标对于mysql压力测试，大多用sysbench/tpcc-mysql工具。主要针对数据库OLTP（在线事务处理）指标。 12qps : query per second 查询量tps: transaction per second 事务量 工具安装123yum install sysbench -y[root@mysql sysbench]# sysbench --versionsysbench 1.0.9 在sysbench压测时会调用内置lua脚本, 这些脚本为于/etc/share/sysbench目录下12345678910111213141516/usr/share/sysbench[root@mysql sysbench]# lltotal 64-rwxr-xr-x 1 root root 1452 Sep 18 12:29 bulk_insert.lua-rw-r--r-- 1 root root 13762 Sep 18 12:29 oltp_common.lua-rwxr-xr-x 1 root root 1290 Sep 18 12:29 oltp_delete.lua-rwxr-xr-x 1 root root 2018 Sep 18 12:29 oltp_insert.lua-rwxr-xr-x 1 root root 1265 Sep 18 12:29 oltp_point_select.lua-rwxr-xr-x 1 root root 1649 Sep 18 12:29 oltp_read_only.lua-rwxr-xr-x 1 root root 1824 Sep 18 12:29 oltp_read_write.lua-rwxr-xr-x 1 root root 1118 Sep 18 12:29 oltp_update_index.lua-rwxr-xr-x 1 root root 1127 Sep 18 12:29 oltp_update_non_index.lua-rwxr-xr-x 1 root root 1440 Sep 18 12:29 oltp_write_only.lua-rwxr-xr-x 1 root root 1919 Sep 18 12:29 select_random_points.lua-rwxr-xr-x 1 root root 2118 Sep 18 12:29 select_random_ranges.luadrwxr-xr-x 4 root root 4096 Nov 10 02:57 tests 执行压测方便压测时找到内置lua脚本，以下命令都在/etc/share/sysbench目录下执行 在远端连接数据库时，授权1grant all on test.* to root@&apos;%&apos; identified by &apos;123&apos;; 生成压测数据12cd /usr/share/sysbench/sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 prepare 执行压测1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 run 清理压测数据1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 cleanup 优化数据库在压测过程中可能出现一些错误，连接数不够，max_prepared_stmt_count不够，可优化/etc/my.cnf 做适当调整123456789101112max_connections = 4096max_prepared_stmt_count=100000 # 默认16384压测时需调大query_cache_type = 1query_cache_size = 10Mwsrep_slave_threads = 4#wsrep_notify_cmd = /usr/local/bin/wsrep-notify.shmax_connections = 10000key_buffer_size = 64Mmax_heap_table_size = 64Mtmp_table_size = 64Minnodb_buffer_pool_size = 8192M 示例结果1234567891011121314151617181920212223242526272829303132333435Initializing worker threads...Threads started![ 10s ] thds: 300 tps: 198.33 qps: 5741.67 (r/w/o: 4335.25/830.02/576.41) lat (ms,95%): 3706.08 err/s: 81.77 reconn/s: 0.00[ 20s ] thds: 300 tps: 222.61 qps: 6095.90 (r/w/o: 4553.90/924.16/617.84) lat (ms,95%): 4203.93 err/s: 102.31 reconn/s: 0.00[ 30s ] thds: 300 tps: 221.01 qps: 5899.58 (r/w/o: 4399.84/899.83/599.92) lat (ms,95%): 4055.23 err/s: 93.20 reconn/s: 0.00[ 40s ] thds: 300 tps: 198.06 qps: 5400.91 (r/w/o: 4032.79/827.03/541.09) lat (ms,95%): 4683.57 err/s: 89.98 reconn/s: 0.00[ 50s ] thds: 300 tps: 186.14 qps: 5162.76 (r/w/o: 3866.39/783.36/513.00) lat (ms,95%): 5312.73 err/s: 90.12 reconn/s: 0.00[ 60s ] thds: 300 tps: 158.49 qps: 4433.94 (r/w/o: 3325.93/670.45/437.56) lat (ms,95%): 5507.54 err/s: 78.99 reconn/s: 0.00SQL statistics: queries performed: read: 246736 write: 50340 other: 33317 total: 330393 transactions: 12147 (195.34 per sec.) queries: 330393 (5313.17 per sec.) ignored errors: 5477 (88.08 per sec.) reconnects: 0 (0.00 per sec.)General statistics: total time: 62.1815s total number of events: 12147Latency (ms): min: 16.10 avg: 1503.84 max: 14267.54 95th percentile: 4683.57 sum: 18267086.41Threads fairness: events (avg/stddev): 40.4900/6.29 execution time (avg/stddev): 60.8903/0.59","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"KVM introduction","slug":"KVM-introduction","date":"2017-06-08T01:41:54.000Z","updated":"2018-03-30T06:58:49.290Z","comments":true,"path":"2017/06/08/KVM-introduction/","link":"","permalink":"http://www.digmyth.com/2017/06/08/KVM-introduction/","excerpt":"","text":"1. kvm简介kvm as a kernel based virtual machine,现如今较为流行的虚拟化技术，openstack后端就是kvm虚拟化。 2. 模拟与虚拟 模拟： 完全由软件模拟：ring0 ring1 ring2 ring3都需要软件模拟， 底层硬件架构与虚拟机硬件架构可以不同 虚拟： 底层硬件架构与虚机硬件架构必须相同，如cpu平台架构都为x86_64 3.虚拟化分类虚拟化分类无非2种方式： 一种：直接运行于硬件平台–&gt; hypervisor: dom0 如xen ,esxi,这里xen不好理解，装xen不也要安装操作系统后安装xen4软件包么？为什么它也说直接运行在硬件平台，是因为安装完xen4后，切换了xen4的内核来启动，并非原有操作系统内核. 二种：先有host系统，再安装虚拟软件（如vmware station）或统称virtual machine mintor(虚拟机监视器) 如kvm, 虚拟机的cpu,内存通过kvm模块来调用，但IO不行，虚拟机的IO是通过host系统的qemu程序模拟提供的，再由host系统的内核提供IO 那么什么是半虚拟化？ 半虚拟化是要修改内核的，要让虚拟机知道自己运行在虚拟机环境下的，知道的结果是当虚拟机发起cpu指令时不能直接操作硬件，需要发起hypercall调用. 那么什么是完全虚拟化？ 1) 早期BT技术实现加速，binary translation 边运行边翻译,虚机内核就是运行ring1上专用于翻译加速 2) hvm: 硬件辅助虚拟化，需要cpu硬件支持，就是cpu多了ring-1，这样虚拟机直接运行在ring0上，宿主机内核运行在ring-1,ring-1捕获ring0的特权指令直接运行，性能可想而知提高了","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-Ganesha","slug":"cephfs-Ganesha","date":"2017-06-05T01:41:54.000Z","updated":"2017-11-14T09:43:43.912Z","comments":true,"path":"2017/06/05/cephfs-Ganesha/","link":"","permalink":"http://www.digmyth.com/2017/06/05/cephfs-Ganesha/","excerpt":"","text":"nfs-ganesha简介因工作需要调研了cephfs 导为nfs,目前有两种方法： 方法一：内核mount挂载或 ceph-fuse 挂载至NFS server，如/data再正常搭建NFS-server即可。 方法二 : 借用nfs-ganesha协议转换间接存储在cephfs集群中。 nfs-ganesha不仅可以导 cephfs,也可以导RGW.ceph RGW理解: 相当于协议转换层，把符合S3和swift协议的 restFul API 请求转换为rados存储在ceph对象存储中. 换一种说法： Ceph 导出为 NFS，一种通过 RGW，一种通过 CephFS，通过 FSAL 模块 连接到 RGW 或者 CephFS FSAL_RGW 调用 librgw2 将 NFS 协议转义为 S3 协议再通过 RGW 存入到 Ceph 中. FSAL_CEPH 调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. FSAL： File System Abstraction Layer 文件系统抽像层 题外话，openstack项目manila后端存储驱动，其中一种就是Ganesha Driver12345## manila 4驱动Default Driver: 使用 RBD 作为 Manila Service VM 的后端，在 VM 上启动 NFS 实例提供服务Ganesha Driver: 使用 Ganesha 将 CephFS 重新 Reexport 出去Native CephFS Driver: 在 Guest VM 上直接使用原生 CephFS Module 访问VirtFS Driver: 将 CephFS 挂载在 Host 端，VM 通过 VirtFS 访问 nfs-ganesha安装在CentOS7系统中有nfs-ganesha rpm软件包，但没有ceph相关模块，所以我这里是编译安装，把FSAL_RGW 模块/FSAL_CEPH 模块编译进去。 1git clone -b V2.4-stable https://github.com/nfs-ganesha/nfs-ganesha.git --recursive 由于ceph-jewel版本才有libcephfs1-devel软件包，所以这里ganesha客户端 ceph用 jewel版本，服务器ceph版本Luminousceph-jewel源123456789[root@ ganesha]# cat /etc/yum.repos.d/ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/noarch/gpgcheck=0 软件安装12345yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -y 如果需要生成 FSAL_RGW 模块，则在编译选项中添加： -DUSE_FSAL_RGW=ON 如果需要生成 FSAL_CEPH 模块，则在编译选项中添加： -DUSE_FSAL_CEPH=ON 12345mkdir /opt/build/cd /opt/build/cmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 在cmake输出中确保有12345-- USE_FSAL_CEPH = ON-- USE_FSAL_CEPH_MKNOD = OFF-- USE_FSAL_CEPH_SETLK = OFF-- USE_FSAL_CEPH_LL_LOOKUP_ROOT = ON-- USE_FSAL_RGW = ON 确保： – USE_FSAL_CEPH 为 ON,以及 – USE_FSAL_RGW 为 ON。 如果过程中出错，请删除/tmp/build/* 及/tmp/build/CMakeCache.txt重新编译 make install成功输出中有:12&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/rgw.conf&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/ceph.conf 这两个文件就是配置将 RGW 和 CephFS 配置为 nfs-ganesha的配置模板。 nfs-ganesha 配置123456789101112131415161718192021222324252627282930313233cat /etc/ganesha/ganesha.confEXPORT&#123; Export_ID=1; Path = /; Pseudo = /cephfs; Access_Type = RW; NFS_Protocols = 4; Transport_Protocols = TCP; Squash = No_Root_Squash; FSAL &#123; Name = CEPH; &#125;&#125;EXPORT&#123; Export_ID=2; Path = /; Pseudo = /rgw; Access_Type = RW; Squash = No_root_squash; NFS_Protocols = 4; Transport_Protocols = TCP; FSAL &#123; Name = RGW; User_Id = &quot;admin&quot;; Access_Key_Id =&quot;RDS4VW60OA48ZW1HSU61&quot;; Secret_Access_Key = &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;; &#125;&#125;RGW &#123; ceph_conf = &quot;/etc/ceph/ceph.conf&quot;;&#125; 其中Access_Key_Id Secret_Access_Key部份在ceph-rgw中读取123456789101112131415 (ceph-mon)[root@pike-vm /]# radosgw-admin user info --uid=admin&#123; &quot;user_id&quot;: &quot;admin&quot;, &quot;display_name&quot;: &quot;admin&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;admin&quot;, &quot;access_key&quot;: &quot;RDS4VW60OA48ZW1HSU61&quot;, &quot;secret_key&quot;: &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;... 启动nfs-ganesha1ganesha.nfsd -L /var/log/ganesha.log 挂载使用在客户端进行挂载使用：1 安装ceph-common ceph-fuse libcephfs1-devel librgw2-devel2 拷贝ceph.conf配置文件及keyring文件至/etc/ceph3 挂载：mount -t nfs4 {$ganesha-server-ip}:/ /mnt如果出现I/O error,请ceph-fuse -m 172.18.23.17:6789 /mnt 挂载一遍，就是这么神奇，不要问我为什么。。。12[root@-3 mnt]# lsls: reading directory .: Remote I/O error 成功123456[root@-3 cephfs]# ll /mnt/total 1drwxrwxrwx 1 root root 33 Nov 14 08:31 cephfs[root@-3 cephfs]# echo &quot;99cloud new data...&quot; &gt; cephfs.txt [root@-3 cephfs]# cat cephfs.txt cephfs data... 在cephfs集群中我们可以看到客户端写入的数据12345678[root@-3 ~]# ceph-fuse -m 172.18.23.17:6789 /data/ceph-fuse[4579]: starting ceph clientceph-fuse[4579]: starting fuse[root@-3 ~]# cd /data/[root@-3 data]# lscephfs.txt[root@3 data]# cat cephfs.txt cephfs data...","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-02-分页示例","slug":"web-django-03-分页示例","date":"2017-05-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/05/20/web-django-03-分页示例/","link":"","permalink":"http://www.digmyth.com/2017/05/20/web-django-03-分页示例/","excerpt":"","text":"1 django 分页功能app01/views.py Paginator模块的使用123456789101112131415161718192021222324def users(request): from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger user_list = models.UserInfo.objects.all() paginator = Paginator(user_list,10) # paginator.per_page 每页显示条目数量 # paginator.count 数据总个数 # paginator.num_pages 总页数 # paginator.page_range 总页数的索引范围，如(1,10),(1,20) current_page = request.GET.get(&apos;p&apos;) try: page_obj=paginator.page(current_page) except EmptyPage as e: page_obj = paginator.page(1) except PageNotAnInteger as e: page_obj = paginator.page(1) # page_obj.has_next() 是否有下一页 # page_obj.next_page_number() 下一页页码 # page_obj.has_previous() 是否有上一页 # page_obj.previous_page_number() 上一页页码 # page_obj.object_list 分页之后的数据列表 # page_obj.number 当前页 # page_obj.paginator paginator对象 return render(request,&quot;users.html&quot;, &#123;&apos;page_obj&apos;:page_obj&#125;) templates/users.html12345678910111213141516171819&#123;% if page_obj.has_previous %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&#123;% endif %&#125;&#123;% for i in page_obj.paginator.page_range %&#125; &lt;a href=&quot;/users?p=&#123;&#123; i &#125;&#125;&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;&#123;% endfor %&#125;&#123;% if page_obj.has_next %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&#123;% endif %&#125;&lt;span&gt; &lt;a&gt;&#123;&#123; page_obj.number &#125;&#125;/&#123;&#123; page_obj.paginator.num_pages &#125;&#125;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-加密解密加签验签","slug":"python加密解密加签验签","date":"2017-05-15T12:51:41.000Z","updated":"2018-04-23T06:59:41.630Z","comments":true,"path":"2017/05/15/python加密解密加签验签/","link":"","permalink":"http://www.digmyth.com/2017/05/15/python加密解密加签验签/","excerpt":"","text":"python加密解密，加签验签(转)在与第三方服务对接时，加密与解密，加签与验签是这个过程中的关键一步 一般情况下，对接服务中会有两对公私钥。使用对方公钥进行加密，使用自己私钥进行加签。传回来的数据，使用自己的私钥解密，使用对方的公钥验签。 12345678import base64from Crypto.PublicKey import RSAfrom Crypto.Hash import SHAfrom Crypto.Cipher import PKCS1_v1_5from Crypto.Signature import PKCS1_v1_5 as SIGN_PKCSPUB_KEY = RSA.importKey(open(&apos;rsa_public_key.pem&apos;,&apos;r&apos;).read())PRI_KEY = RSA.importKey(open(&apos;rsa_private_key.pem&apos;,&apos;r&apos;).read()) 加密 12345678910def split_data(l, n): for i in range(0, len(l), n): yield l[i: i+n] def encrypt(params): raw = params.encode(&apos;utf-8&apos;) cipher = PKCS1_v1_5.new(PUB_KEY) ＃ 加密超长字节117个字节一加密 content = b&apos;&apos;.join([cipher.encrypt(x) for x in chunks(raw, 117)]) return base64.b64encode(content) 解密123456def decrypt(data): raw = data.encode(&apos;utf-8&apos;) decrypt = PKCS1_v1_5.new(PRI_KEY).decrypt # 解密超长字符128一解密 content = b&apos;&apos;.join(decrypt(x, object()) for x in chunks(raw, 128)) return content.decode() 加签1234def signer(data): signstr = data.encode(&apos;utf-8&apos;) sign = SIGN_PKCS.new(PRI_KEY).sign(SHA.new(signstr)) return base64.b64encode(sign) 验签1234def verify_sign(unsign, raw_sign): # unsign: 签名 # raw_sign: 待验证签名 assert SIGN_PKCS.new(PUB_KEY).verify(SHA.new(unsign.encode(&apos;utf-8&apos;)), raw_sign)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"linux_Suse init","slug":"linux-SUSE-init","date":"2017-05-15T01:42:54.000Z","updated":"2018-09-04T13:15:50.755Z","comments":true,"path":"2017/05/15/linux-SUSE-init/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-SUSE-init/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux_7.X内核升级","slug":"linux-7.x内核升级","date":"2017-05-15T01:42:54.000Z","updated":"2018-08-04T08:38:33.350Z","comments":true,"path":"2017/05/15/linux-7.x内核升级/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-7.x内核升级/","excerpt":"","text":"查看版本12# uname -r3.10.0-693.el7.x86_64 升级内核需要先导入elrepo的key，然后安装elrepo的yum源12345678910111213141516171819202122232425262728293031# rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpmPreparing... ################################# [100%]Updating / installing... 1:elrepo-release-7.0-3.el7.elrepo ################################# [100%]# yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list availableLoaded plugins: fastestmirrorelrepo-kernel | 2.9 kB 00:00:00 elrepo-kernel/primary_db | 1.8 MB 00:00:01 Determining fastest mirrors * elrepo-kernel: mirrors.neusoft.edu.cnAvailable Packageskernel-lt.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-doc.noarch 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-headers.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-ml.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-doc.noarch 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-headers.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelperf.x86_64 4.17.11-1.el7.elrepo elrepo-kernelpython-perf.x86_64 4.17.11-1.el7.elrepo elrepo-kernel 安装你需要的版本12# yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64版本性质：主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 查看内核是否安装完成123456# rpm -qa |grep kernelkernel-tools-3.10.0-693.el7.x86_64kernel-ml-4.17.11-1.el7.elrepo.x86_64kernel-3.10.0-693.el7.x86_64kernel-ml-devel-4.17.11-1.el7.elrepo.x86_64kernel-tools-libs-3.10.0-693.el7.x86_64 查看并修改grub的启动顺序1234# awk -F\\&apos; &apos;$1==&quot;menuentry &quot; &#123;print $2&#125;&apos; /etc/grub2.cfgCentOS Linux (4.17.11-1.el7.elrepo.x86_64) 7 (Core)CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)CentOS Linux (0-rescue-d14171e79a9e4b5da1a69e7348d0f45f) 7 (Core) 注： 最新内核为第一个，故启动项为012345678# vim /etc/default/grubGRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=saved(这里改成0)GRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 生成grub重新创建内核配置并重启12345678910# grub2-mkconfig -o /boot/grub2/grub.cfgGenerating grub configuration file ...Found linux image: /boot/vmlinuz-4.17.11-1.el7.elrepo.x86_64Found initrd image: /boot/initramfs-4.17.11-1.el7.elrepo.x86_64.imgFound linux image: /boot/vmlinuz-3.10.0-693.el7.x86_64Found initrd image: /boot/initramfs-3.10.0-693.el7.x86_64.imgFound linux image: /boot/vmlinuz-0-rescue-d14171e79a9e4b5da1a69e7348d0f45fFound initrd image: /boot/initramfs-0-rescue-d14171e79a9e4b5da1a69e7348d0f45f.imgdone[root@localhost ~]# reboot 确认内核版本12# uname -r4.17.11-1.el7.elrepo.x86_64","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Python 操作mysql","slug":"mysql-pyton操作mysql","date":"2017-04-29T01:41:54.000Z","updated":"2017-11-19T09:00:13.663Z","comments":true,"path":"2017/04/29/mysql-pyton操作mysql/","link":"","permalink":"http://www.digmyth.com/2017/04/29/mysql-pyton操作mysql/","excerpt":"","text":"这里记录下python操作mysql的知识点，详细参见链接 模块安装在python2中使用模块MySQLdb在python3中使用模块pymysql1pip3 install pymysql 基本使用基本操作过程就是 创建连接 创建游标 发送语句 获取数据 事务提交 关闭游标 关闭连接1234567891011121314151617181920212223import pymysql# 创建连接conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;db1&apos;)# 创建游标cursor = conn.cursor()# 发送语句cursor.execute(sqlstatement)cursor.executemany(sqlstatement)# 获取数据cursor.fetchone()cursor.fetchmany(3)cursor.fetchall() # 事务提交，不然无法保存新建或者修改的数据conn.commit() # 关闭游标cursor.close()# 关闭连接conn.close() 基本知识点获取新创建数据自增ID1234567891011import pymysql conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)cursor = conn.cursor()cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;1.1.1.11&quot;,1),(&quot;1.1.1.11&quot;,2)])conn.commit()cursor.close()conn.close() # 获取最新自增IDnew_id = cursor.lastrowid 游标操作1234在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：cursor.scroll(1,mode=&apos;relative&apos;) # 相对当前位置移动cursor.scroll(2,mode=&apos;absolute&apos;) # 相对绝对位置移动 fetch 数据类型关于默认获取的数据是元组类型，如果想要获取字典类型的数据，如下pymysql.cursors.DictCursor：1234567import pymysqlconn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)# 游标设置为字典类型cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)r = cursor.execute(&quot;call p1()&quot;) result = cursor.fetchone() 1234567891011# 执行SQL，并返回受影响行数effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos;&quot;)# 执行SQL，并返回受影响行数#effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot;, (1,)) 这里值得注意的是不能把上面语句替换成下面语句，否则会被sql注入statement=&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot; % 1effect_row = cursor.execute(statement)# 执行SQL，并返回受影响行数#effect_row = cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;172.16.0.1&quot;,1),(&quot;1.1.1.11&quot;,2)]) SQLAlchemySQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果1pip3 install SQLAlchemy SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：12345678910111213MySQL-Python mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; pymysql mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;] MySQL-Connector mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; cx_Oracle oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...] 更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-04-路由分发与别名.md","slug":"web-django-04-路由分发与别名","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/04/20/web-django-04-路由分发与别名/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-04-路由分发与别名/","excerpt":"","text":"目录 别名设置 namespace设置 reverse include本质 Django URLS 路由分发流程己经学习过了，这里了解一下url中的别名设置，reverse反向生成URL，以及include本质如何路由分发的。 别名设置URL有别名name的设置，添加在最后一级分发视图函数的后面1url(r&apos;^login/&apos;, views.login,name=&quot;alias_name&quot;), namespace设置URL有namespace的设置当多个app多级分发时可能存在别名相同,这时就用到namespace来加以区分 namespace添加12url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)), 或url(r&apos;^app01&apos;,([url(&apos;^hosts&apos;,oviews.hosts,name=&quot;nnnn&quot;),],None,&quot;oo&quot;)), reverse用法reverse反向生成url1234from django.urls import reversedef login(request): url = reverse(&quot;namespace1:namespace2:alias_name&quot;) return redirect(url) include本质include原生写法是1url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)) include用于路由下级分发，本质是返回元组，最后一个None表示namespace,也就是形如1url(r&apos;^openstack/&apos;, ([url映射关系，],None,None)) 总结：了解分发基础知识有利于我们后面学习Django admin，如何动态生成URL的代码学习。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-02-基本配置示例","slug":"web-django-02-基本配置示例","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.976Z","comments":true,"path":"2017/04/20/web-django-02-基本配置示例/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-02-基本配置示例/","excerpt":"","text":"1 django安装1pip install django pymysql 2 新建django project1django-admin.py startproject mysite 或用pycharm新建一个项目 3 该项目下创建一个应用1cd mysite &amp;&amp; python manage.py startapp app01 4 配置Djangosettings.py文件确保有下面代码，用于在static目录放置静态1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS= ( os.path.join(BASE_DIR, &apos;static&apos;),) 确保INSTALLED_APPS = []有app01,应用 5 Django mysql配置settings.py文件确保有12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;&#125; app01下 init.py12import pymysqlpymysql.install_as_MySQLdb() 对于初学者建议配置此项，用于打印orm翻译后的sql语后，便于对照学习1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 6 django生成数据models.py12345from django.db import modelsclass UserInfo(models.Model): username = models.CharField(max_length=32) password = models.CharField(max_length=32) email = models.CharField(max_length=32) 12python manage.py makemigrationspython manage.py migrate 7 urls.py定义123456from app01 import viewsurlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;^users/$&apos;, views.users), # url(r&apos;^create_data/&apos;, views.create_data),] 8 views.py定义123456789101112131415from django.shortcuts import render,HttpResponse, redirectfrom app01 import modelsdef create_data(request): for i in range(1,104): models.UserInfo.objects.create( username = &quot;root%s&quot; %i, password = &quot;123&quot;, email = &quot;root%s@qq.com&quot; %i, ) return HttpResponse(&quot;data generate...&quot;)def users(request): user_list = models.UserInfo.objects.all() return render(request,&quot;users.html&quot;, &#123;&apos;user_list &apos;:user_list &#125;) 9 templates/users.html定义12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/bootstrap-3.3.7-dist/css/bootstrap.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;width: 700px; margin: 10px auto&quot;&gt; &lt;h1&gt;用户列表&lt;/h1&gt; &lt;table class=&quot;table table-hover table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; 用户名&lt;/th&gt; &lt;th&gt; 密码&lt;/th&gt; &lt;th&gt;邮箱&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for user in page_obj.object_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; user.username &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.password &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.email &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 10 注意bootstrap应用bootstrap下载链接 11 启动项目运行项目1python manage.py runserver 127.0.0.1:8000","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(一)","slug":"web-django-orm(一)","date":"2017-04-15T12:51:41.000Z","updated":"2018-01-18T03:44:22.364Z","comments":true,"path":"2017/04/15/web-django-orm(一)/","link":"","permalink":"http://www.digmyth.com/2017/04/15/web-django-orm(一)/","excerpt":"","text":"目录 简单介绍 初识ORM 简单介绍声明：ORM原理请参考 一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 初识ORM下面学习下Django里sql操作的基本语法 通过简单设置，可以在logging查看翻译成的sql语句settings.py1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 2.1 创建表12345from django.db import modelsclass UserInfo(models.Model): nid=models.AutoField(primary_key=True) name=models.CharField(max_length=32) pwd = models.CharField(max_length=32) 2.2 操作表123456789101112q = models.UserInfo.objects.all()Queryset = [obj(id,name,pwd), obj(id,name,pwd),obj(id,name,pwd),]q=models.UserInfo.objects.values(&apos;name&apos;,&apos;pwd&apos;)Queryset = [&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123&#125;, &#123;&quot;name&quot;:&quot;user1&quot;,&quot;pwd&quot;:123&#125;, &#123;&#125;] # 字典q = models.UserInfo.objects.value_list(&apos;name&apos;,&apos;pwd&apos;)Queryset = [(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123), (&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123),(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123)]#元组q = models.UserInfo.objects.filter(name=&quot;wxq&quot;)q = models.UserInfo.objects.get(name=&apos;wxq&apos;) # 多个或没有值都会报错q = models.UserInfo.objects.filter(name=&apos;wxq&apos;).first() # 推荐 2.3 操作表的其它方法12345678910111213141516171819202122232425261. all() 返回的是querySet2. filter(id__lt=10, id__gt=1) 并且查， 返回的是querySet3. get() 只有一个值，否则报错， 返回的是对象4. first() 只找第一个值，返回的是对象5. exclude 取反model.Book.objects.exclude(prince=134) 返回querySet6. countmodeles.Book.objects.exclude(prince=134).count() #querySet对象才有.count()调用方法 7. order_by(*field)models.Book.objects.objects.all().order_by(&quot;prince&quot;) 小到大排序models.Book.objects.objects.all().order_by(&quot;-prince&quot;) 大到小排序8.distinct() 提除重复的记录9 values 返回字典querySet集合10 values_list 返回元组querySet集合11 existret = models.Book.objects.all().exist()","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-09-02-网络编程","slug":"python-10-02-网络编程","date":"2017-03-31T14:26:46.000Z","updated":"2018-02-08T09:19:59.999Z","comments":true,"path":"2017/03/31/python-10-02-网络编程/","link":"","permalink":"http://www.digmyth.com/2017/03/31/python-10-02-网络编程/","excerpt":"","text":"目录 socket概念 socket基本使用 socket简单示例 总结 一、socket概念什么是socket ? socket常称为’套接字’，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或应答网络请求。 Unix中一切皆文件，socket是一种特殊的套接字文件，对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。 所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。 对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。 二、socket基本使用服务器端第一步： 创建 套接字对够用123456789import socketsocket.socket(family, type)family AF_INET AF_UNIXtype SOCK_STREAM -------&gt; TCP SOCK_DGRAM -------&gt; UDPconns = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 绑定地址使用套接字对象的 bind方法绑定于地址和端口组成的元组1conns.bind((&apos;ip&apos;,port)) 第三步： 使用套接字的Listen()方法进行监听1conns.listen(10) #等待队列长度 第四步： 进入循环监听状态 使用套接字的accept()方法接收用户连接请求help(tcpconn.accept)1client_sock,client_addr = conns.accept() 编写客户端程序第一步： 创建套接字对象以连接服务器端1client_conn = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 请求连接服务器client_conn.conncet((‘server_ip’, port)) 第三步： 发送数据 1client_conn.send(b&apos;hello world&apos;) 示例server.py1234567891011121314import socketsock = socket.socket()sock.bind((&apos;127.0.0.1&apos;,8000))sock.listen(5)while True: conn,addr = sock.accept() client_data = conn.recv(1024) print(client_data) conn.sendall(&apos;response info from server&apos;) conn.close() client.py1234567891011import socketsk = socket.socket()sk.connect((&apos;127.0.0.1&apos;,8000))sk.sendall(&apos;请求数据&apos;)server_reply = sk.recv(1024)print(server_reply)sk.close() 三、socket简单示例python中网络编程主要有socket/socketserver和异步相关的Twisted/tornado/ socket这里包括自己用select实现的伪异步IO多路复用 2.1 示例一web浏览器和socket_server交互,浏览器将收到服务端返回的数据123456789101112131415161718192021# socket_server.pyimport socketdef handle_process(client): data = client.recv(1024) print(data.decode(&quot;utf-8&quot;)) client.send(b&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;)#一定要先发送合规请求头 client.send(b&apos;hello worldfdds&apos;)def main(): sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM) sock.bind((&apos;127.0.0.1&apos;,8003)) sock.listen(5) while True: conn,addr = sock.accept() handle_process(conn) conn.close()if __name__ == &apos;__main__&apos;: main() 2.2 示例二socket + select 实现IO多路复用1234567891011121314151617181920212223242526272829303132333435363738394041# socket_server.pyimport selectimport socket# 单线程里同时监听多个socket对象，实现了&quot;伪&quot;并发IO操作： IO多路复用sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8001))sk1.listen(5)sk2 = socket.socket()sk2.bind((&apos;127.0.0.1&apos;,8002))sk2.listen(5)inputs = [sk1,sk2]w_inputs = []while True: # IO多路复用： # select: 内部循环，主动查看 # poll: 内部循环，主动查看 # epoll: 非循环， 异步回调或被动通知 r,w,e = select.select(inputs,w_inputs,[],0.05) for obj in r: if obj in [sk1,sk2]: print(&quot;新的连接来了。。&quot;) conn,addr = obj.accept() inputs.append(conn) else: print(&quot;新的数据来了&quot;) try: data=obj.recv(1024) except Exception as e: data = &quot;&quot; if data: # obj.sendall(data) w_inputs.append(obj) else: inputs.remove(obj) w_inputs.remove(obj) obj.close() for obj in w: obj.sendall(b&apos;ok&apos;) w_inputs.remove(obj) 定义2个socket_client 1234567891011# socket_client01.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8001))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 12345678910# socket_client02.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8002))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 测试服务端并发： 先启动socket_server.py,后启动socket_clientx.py 小结：服务端单线程同时监听了多个socket对象，表明实现了并发连接或IO多路复用，但真正实现了并发吗？当并发边连接有IO请求时还是占住了资源,那么在下一个例子中用线程处理IO请求实现真正的IO并发 4.2 示例三select + 线程实现真正的多并发123456789101112131415161718192021222324import selectimport socketimport threadingdef process_request(conn): while True: v = conn.recv(1024) conn.sendall(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\ndownload page ...&apos;) conn.close() break # 任务处理完成后终止这个线程sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8009))sk1.listen(5)inputs = [sk1,]while True: r,w,e = select.select(inputs,[],[],0.05) for obj in r: if obj in [sk1,]: conn,addr = obj.accept() t=threading.Thread(target=process_request,args=(conn,)) t.start() 设计思路可参考 socketserver源代码1234567import socketserverclass MyHandler(socketserver.BaseRequestHandler): def handle(self): pass server = socketserver.ThreadingTCPServer((&apos;127.0.0.1&apos;,8001),MyHandler)server.serve_forever() 4.2 示例四浏览器会自动向服务端请求头的一些数据，process_data()函数对请求头做了结构化处理，同时浏览器请求什么URL，服务端就会返回什么URL, 在此基础上可以用类封装为一个web框架邹形, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import selectimport socketdef process_data(client): data = bytes() while True: try: chunk = client.recv(1024) except Exception as e: chunk = None if not chunk: break data += chunk data_str = str(data, encoding=&quot;utf-8&quot;) header,body = data_str.split(&apos;\\r\\n\\r\\n&apos;,1) header_list = header.split(&apos;\\r\\n&apos;,1) header_dict = &#123;&#125; for line in header_list: value = line.split(&apos;:&apos;, 1) if len(value) == 2: k, v = value header_dict[k] = v else: header_method, header_url, header_protocal = line.split(&quot; &quot;) header_dict[&quot;header_method&quot;] = header_method header_dict[&quot;header_url&quot;] = header_url header_dict[&quot;header_protocal&quot;] = header_protocal return header_dict,bodysock = socket.socket()sock.setblocking(False) # setblocking表示是否设置为阻塞模式,这里是对accept生效sock.bind((&apos;127.0.0.1&apos;,8008))sock.listen(5)# while True:# conn,addr = sock.accept() #setblocking(False)后不阻塞了，有连接就拿连接，没有连接就直接报错# conn.setblocking(False)# conn.recv(1024) # 有数据拿数据，没有数据就直接报错inputs = [sock,]while True: rList,wList,eList = select.select(inputs,[],[],0.05) for client in rList: if client == sock: # 建立新的连接 conn,addr = client.accept() conn.setblocking(False) # 有数据拿数据，没有数据就直接报错 inputs.append(conn) else: header_dict,body=process_data(client) request_url=header_dict[&apos;header_url&apos;] client.send(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\n&apos;) client.send(request_url.encode(&quot;utf-8&quot;)) inputs.remove(client) client.close() 总结对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。掌握socket可读可写状态","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-02-面象对象编程中级","slug":"python-08-02-面象对象编程中级","date":"2017-03-26T13:28:41.000Z","updated":"2018-02-06T09:05:12.632Z","comments":true,"path":"2017/03/26/python-08-02-面象对象编程中级/","link":"","permalink":"http://www.digmyth.com/2017/03/26/python-08-02-面象对象编程中级/","excerpt":"","text":"目录 staticmethod classmethod staticmethod几个魔法方法说明： @classmethod @staticmethod不依赖任何具体的对象来执行类当中是方法，这个方法要么是静态方法， 要么是类方法，要么是属性 12345678910@classmethoddef test_func(cls): # 类方法传入cls参数（类本身） pass@staticmethoddef test_func(): # 静态方法时没有任何变量 passdef test_func(self): # 普通实例方法时传入self参数（实例本身） pass staticmethod语法12345678In [4]: class Foo(object): ...: @staticmethod ...: def spam(x,y,z): # 静态方法时方法定义不写self ...: print(x,y,z) In [5]: In [5]: Foo.spam(1,2,3) # 静态方法属于类的，用类名调用。虽然实例能调用，但不要那样混用,不规范1 2 3 staticmethod用法场景123456789101112131415161718192021In [7]: import timeIn [6]: class Date(object): ...: def __init__(self,year,mon, day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @staticmethod ...: def now(): ...: t = time.localtime() ...: return Date(t.tm_year, t.tm_mon, t.tm_mday) ...: In [8]: d1 = Date(1989, 8,20) # 获得一个对象In [9]: d2 = Date.now() # 这里也能获得一个对象In [10]: d1.dayOut[10]: 20In [11]: d2.dayOut[11]: 12 classmethod@classmethod语法1234567891011In [12]: class C1(object): ....: name = &apos;wxq&apos; ....: @classmethod ....: def test(cls): # 这里需要传入cls, 谁调用谁就是cls ....: print(cls, cls.name) ....: In [14]: C1.test() # 这里cls就是C1&lt;class &apos;__main__.C1&apos;&gt; wxqIn [13]: c = C1() # 正常实例化对象 @classmethod用法场景1234567891011121314151617In [2]: import timeIn [3]: class Date(object): ...: def __init__(self, year, mon,day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @classmethod ...: def now(cls): ...: t = time.localtime() ...: return cls(t.tm_year, t.tm_mon, t.tm_mday) ...: In [4]: d = Date.now()In [5]: print(d.year,d.mon, d.day)2017 3 12 staticmethod与classmethod区别的牛逼之处123456789101112131415161718192021root@ubuntu:~# cat method.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @staticmethod def now(): t = time.localtime() return Date(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 method.py &lt;__main__.Date object at 0x7f5514658940&gt; 上面并没有我们想要的结果分析：e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。也就是return Date(t.tm_year, t.tm_mon, t.tm_mday), 实例print时调Date类的__str__方法，故打印return Date(t.tm_year, t.tm_mon, t.tm_mday)后的内存地址，不会打印EuroDate类中定义的__str__方法 123456789101112131415161718192021root@ubuntu:~# cat goodmethod.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @classmethod def now(cls): t = time.localtime() return cls(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 goodmethod.py year: 2017 mon:3 day:12 这样才是我们想要的结果，好象参悟了点什么分析:e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。这一点和上面是一致的。但此时return cls(t.tm_year, t.tm_mon, t.tm_mday)中的cls不是Date,而是EuroDate,符合谁调谁就是cls的原则。这样实例化e = EuroDate.now()时print(e)就会去调EuroDate中的__str__方法，得到我们想要的结果 小结：staticmethod与classmethod在一定场景中是有区别的。细节参照上面的例子练习","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-06-异常","slug":"python-08-06-异常","date":"2017-03-25T12:39:12.000Z","updated":"2018-02-06T09:07:40.152Z","comments":true,"path":"2017/03/25/python-08-06-异常/","link":"","permalink":"http://www.digmyth.com/2017/03/25/python-08-06-异常/","excerpt":"","text":"目录 1 2 3 12345678910class WxqException(Exception): def __init__(self, msg): self.message = msg def __str__(self): return self.messagetry: raise WxqException(&quot;Game Over!&quot;)except WxqException as e: print(e)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-09-01-进程和线程","slug":"python-09-01-进程和线程","date":"2017-03-20T14:26:37.000Z","updated":"2018-02-07T07:46:27.544Z","comments":true,"path":"2017/03/20/python-09-01-进程和线程/","link":"","permalink":"http://www.digmyth.com/2017/03/20/python-09-01-进程和线程/","excerpt":"","text":"目录 基本概念 进程 线程 协程 总结 基本概念我们都知道现代操作是支持“多任务”的，什么叫“多任务”呢？。简单地说，就是操作系统可以同时运行多个任务。打个比方一边微信一边QQ。 单核cpu是如何执行“多任务”的？简单的说，就是cpu时间分片，同一时间单核cpu只能执行一个任务，cpu计算时间分片到每个任务交替运行，进程切换或上下文切换时间很短，我们无法感知而己。真正并发执行多任务还要靠多核cpu来完成。 并发执行任务方案， 多进程 多线程 多进程+多线程 Python线程有GIL(Global Interpreter Lock), 这种锁在单核cpu单进程里同一时间只能有一个线程被cpu调度。 那么多线程并发就没有用了吗？计算密集型多进程不就解决了IO密集型多线程不就解决了，同一时间只有一个线程调度，其它时间线程处理IO啊 进程，多进程，进程池进程定义: 程序由指令+数据组成，进程就是这样一种描述的实体(process),简单的认为一个任务就是一个进程。 一个进程至少一个线程，进程间相互隔离（数据不共享），一个子进程挂了并不影响程序运行，当然主进程挂了程序也就挂了，进程切换开销较大。 多进程： 用于解决计算密集型作务的多并发。 进程池： 内部维护一个进程序列，当使用时创建一个新的进程放入池中，再从池中取出来使用，当达到进程池个数时，不再创建进程，请求直接从进程池中取出来用，其它请求只能等待直到进程池中有进程可用。 进程示例：12345678910111213from multiprocessing import Processimport timedef task(arg): time.sleep(arg) print(arg)if __name__ == &apos;__main__&apos;: for i in range(10): p = Process(target=task, args=(i,)) # p.daemon=True p.start() p.join(0.5) print(&quot;end&quot;) 进程池与线程池用法一样，细节不展开1from concurrent.futures import ProcessPoolExecutor 进程锁也是和线程锁一样的用法，细节不展开 进程与线程不同的是进程数据不共享，那如何实现数据交互，方法很多rpc,Queue,pipe,自己实现socket也可以实现 ,借住第三方工具，python本身也可以实现，2种方法： Array (基于C语言数据类型) Manager (基于socket) 1234567891011from multiprocessing import Processdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: v = [] for i in range(10): p = Process(target=task,args=(i, v)) #每个进程数据独立存在 p.start() C语言里Array存的元素是定义时定死的，和python 的列表有很大不同。1234567891011from multiprocessing import Process,Arraydef task(num,li): li[num] = 1 print(list(li))if __name__ == &apos;__main__&apos;: v = Array(&apos;i&apos;, 10) #i在c语言是的int，10表示长度 for i in range(10): p = Process(target=task,args=(i, v)) p.start() Manger().list() Manger().dict()12345678910111213from multiprocessing import Process,Array,Managerdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: # dic = Manager().dict() v = Manager().list() for i in range(10): p = Process(target=task,args=(i, v)) p.start() p.join() 线程，多线程，线程池线程定义：一个任务可以再划分为多个小任务，进程内独立执行这些小任务的最小单元。 一个进程可以有多个线程，线程间共享内存数据，一个线程挂了，其它线程也会崩溃，线程切换开销较进程小一些。 多线程： 用于解决IO密集型任务的多并发 线程池： 内部维护一个线程序列. (与进程池同理) 线程示例123456789101112import threadingimport timedef task(arg): time.sleep(1) print(arg)for i in range(5): t = threading.Thread(target=task,args=(i,)) t.setDaemon(False) # 等子线程完成后再结束主线程 t.start() t.join() # 变为串行,一直等 t.join(3) # 变为串行,只等3秒print(&quot;end&quot;) # 先打印主线程的end,再一起打印子线程的i 自定义线程类示例123456789101112131415161718import threadingimport timeclass MyThread(threading.Thread): def __init__(self,target=None,args=(),**kwargs): super(MyThread,self).__init__(target=None,args=(),**kwargs) self.target =target self._args = args def run(self,): return self.target(*self._args)def task(arg): time.sleep(1) print(arg)t = MyThread(target=task, args=(123,))t.run()print(&quot;end&quot;) 线程锁线程共享数据，共同修改一份数据是有问题的，pycharm环境下可能看不出效果，cmd命令行下可以看到数据修改混乱了。123456789101112import threadingimport timev=10def task(arg): global v v-=1 print(v)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 数据修改乱了，就要加锁了：普通锁，递归锁RLock,事件锁、条件锁，互斥锁普通锁 1234567891011import threadingimport timev=10lock = threading.Lock()def task(arg): lock.acquire() # 申请锁 global v v-=1 print(v) lock.release() # 释放锁 普通锁不能开多重没锁，如果是下面这种设置会造成死锁123456# 死锁lock = threading.Lock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 递归锁RLock递归锁RLock可以开多重锁，不会造成死锁123456# 不会死锁lock = threading.RLock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 信号量BoundedSemaphore多个线程同时使用锁，当然这里3个同时修改数据也可能混乱。 12345678910111213141516import threadingimport timev=10lock = threading.BoundedSemaphore(3)def task(arg): lock.acquire() # 申请锁 time.sleep(1) global v v-=1 print(v) lock.release() # 释放锁for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 事件锁条件式批量解锁12345678910111213141516import threadingimport timelock = threading.Event()def task(arg): time.sleep(1) lock.wait() #锁住所有线程 print(arg)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = input(&quot;&gt;&gt;&gt;&quot;) if value == &apos;1&apos;: lock.set() # 解锁 条件锁123456789101112131415161718import threadingimport timelock = threading.Condition()def task(arg): time.sleep(1) lock.acquire() lock.wait() #锁住所有线程 print(&apos;线程&apos;,arg) lock.release()for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = int(input(&quot;&gt;&gt;&gt;&quot;)) lock.acquire() lock.notify(value) # 传几就解几个锁 lock.release() 线程池pool.submit(download,url)取出一个线程执行任务，返回future对象future.add_done_callback(write)future对象有一个add_done_callback方法，传入我们自己写的回调函数write, future对象也会自动传给write回调函数。download 函数的返回值=future.result() 12345678910111213141516171819202122232425import requestsfrom concurrent.futures import ThreadPoolExecutordef write(future): response = future.result() f=open(&apos;xx.txt&apos;,&apos;wb+&apos;) f.write(response.content) f.close()url_list = [ &apos;http://www.baidu.com&apos;, &apos;http://www.digmyth.com&apos;, &apos;http://www.github.com&apos;,]def download(url): response=requests.get(url) print(&quot;得到结果&quot;,url) return responsepool = ThreadPoolExecutor(2)for url in url_list: print(&quot;开始请求：&quot;,url) future=pool.submit(download,url) # 池中取一个连接 # ruture自动传给write调函数:write(future) future.add_done_callback(write) 封装1234567891011121314import requestsfrom concurrent.futures import ThreadPoolExecutordef download(url): response=requests.get(url) return responsedef run(url_list=None): pool = ThreadPoolExecutor(2) for item in url_list: url = item[&apos;url&apos;] callback = item[&apos;callback&apos;] future=pool.submit(download, url) future.add_done_callback(callback) 1234567891011121314151617def f1(future): print(future.result().content)def f2(arg): print(&quot;future&quot;)def f3(future): print(&quot;future&quot;)url_list = [ &#123;&apos;url&apos;:&apos;http://www.baidu.com&apos;,&apos;callback&apos;:f1&#125;, &#123;&apos;url&apos;:&apos;http://www.digmyth.com&apos;,&apos;callback&apos;:f2&#125;, &#123;&apos;url&apos;:&apos;http://www.github.com&apos;,&apos;callback&apos;:f3&#125;,]import nb_threadnb_thread.run(url_list) 协程协程定义： 协程不同于进程，线程对于操作系统可见且是一种资源，协程只是代码层面的来回切换，对于操作系统不可见且并非是一种资源。 1pip3 install greenlet # python中原生协程 单独协程没什么用，结合协程切换特性+IO+select+socket可以编写出牛逼的异步IO模块或异步非阻塞框架 gevent就是基于greenlet+libvent+IO二次加工实现的python异步模块1pip3 instal gevent 示例：和多线程不同，这里是单线程并发IO任务123456789101112import geventimport requestsdef func(url): response = requests.get(url) print(response.url)gevent.joinall([ gevent.spawn(func,&apos;http://www.baidu.com&apos;), gevent.spawn(func,&apos;http://www.digmyth.com&apos;), gevent.spawn(func,&apos;http://www.github.com&apos;),]) 当然我们也可以自己用select来写IO多路复实现并发 总结即使有了多进程多线程或进程池，线程池处理多任务，但如果一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型也只能处理一个任务，无法并发执行。 还好现代操作系统支持异步IO，这是一个很牛逼的东东，单进程单线程模型并发执行任务得以实现。这种称为事件驱动模型，Nginx就是支持异步IO的Web服务器。 单线程的异步编程或异步IO多路复用会是趋势，可以基于事件驱动编写高效的多任务程序。Twisted,Tornado之所以牛逼，就是因为它们的高性能也是基于事件驱动，基于异步IO多路复用。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-Django-01-入门","slug":"web-django-01-入门","date":"2017-03-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.948Z","comments":true,"path":"2017/03/20/web-django-01-入门/","link":"","permalink":"http://www.digmyth.com/2017/03/20/web-django-01-入门/","excerpt":"","text":"目录 什么是WSGI 什么是mvc/mtv模型 orm如何工作 Django安装 一、什么是WSGI对浏览器而言，远端是服务器程序和应用程序，而服务器程序就是socket Server,用于接收用户请求，解析用户请求，响应用户请求，这部份工作永远不变的。可变的是应用程序，那么服务器程序与应用程序解耦偶就有了必要。 接收用户请求，解析用户请求，响应用户请求这些封装为WSGI接口简化开发。 定义web app与web server之间接口解耦规则就是WSGI. Python标准库提供的独立wsgi服务器称为wsgiref 二、什么是mvc/mtv模型init.py: 告诉python它不是一个目录文件夹而是一个包 mvc: model(数据库交互) view(模板) control (业务处理逻辑) mtv: model（数据库交互）view(视图，业务逻辑处理) templates(模板） 注： templates模板可以放在项目下或各个app下 三、orm如何工作一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 自动路由： 反射应用，自定义扩展 四、Django安装安装Djangopip3 install django pika pymysql 查看安装pip3 list 创建一个Django项目cd /optmkdir /opt/templates # 用于整个项目存放模板文件django-admin startproject Mysite #创建一个项目 生成目录结构如下123456789101112/opt/Mysite - Mysite # 还有一个与项目同名的文件夹/opt/Mysite/Mysite，对整个程序进行配置 - __init__.py - settings.py # 配置文件 - urls.py # URL对应关系 - wsgi.py # 遵循WSGI规范，一般使用 uwsgi + nginx - manage.py # /opt/Mysite/manage.py管理Django程序：如下 - python manage.py runserver # 运行程序 - python manage.py startapp xx # 创建app # Django的orm框架 - python manage.py makemigrations - python manage.py migrate 创建一个应用：12345678910cd /opt/Mysitepython manage.py startapp app01生成/opt/Mysite/app01目录结构如下：/opt/Mysite/app01/__init__.py # 说明app01是一个包/opt/Mysite/app01/migrations # django orm框架，修改表结构的操作记录（差异化）/opt/Mysite/app01/admin.py # Django提供的后台管理程序/opt/Mysite/app01/apps.py # 配置当前app/opt/Mysite/app01/models.py # 数据库交互：orm-写指定的类，通过命令可以创建数据库结构/opt/Mysite/app01/views.py # 视图函数，业务逻辑处理/opt/Mysite/app01/test.py # 单元测试 初始练习：12Mysite/Mysite/urls.py (导入from blog import views及编写业务逻辑url(r&apos;^index&apos;,views.index)) ---&gt; 练习各种例子。。。 URLS别名用法：12345url(r&apos;^/login$&apos;, views.login, name=&quot;LOGIN&quot;)那么前端templates中的html代码需要用别名方式，语法如下：&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; 改为&lt;form action=&quot;&#123;% url &apos;LOGIN&apos; %&#125;&quot; mothod=&quot;post&quot;&gt; 1234567891011121314151617181920212223urls url(正则表达式 视图函数，参数，别名）正则这里匹配到的或者说捕获到的数据都是字符串类型，post提交的数据get post都可以向server端发送数据，区别是提交数据的方式不同：格式如下get ?id=2&amp;page=3post 数据在body里 无命名分组 位置参数有命名分组 关键字参数--在函数定义时，只能用命名的key，这一点是要注意的获取登录首页是以GET方法提交 -----GET用户名，密码表单submit时是以POST方式提交 -----POST时间表达：1 时间戳2 字符串3 结构化时间 五、Django生命周期 5.1 路由系统URLS123456789101112131 /index/ -&gt; def index(request)2 /detail-(\\d+)/ -&gt; def detail(request, nid) /detail-(?P&lt;nid&gt;\\d+)/ -&gt; def detail(request,nid)3 /index/ -&gt; def index(request) name=n1 使用别名生成URL： 模板语言： &#123;% url n1 %&#125; -&gt; /index/ 视图函数：（需要导入reverse模块） reverse(name=&quot;n1&quot;) --&gt; /index/ 4 /web/ include(&quot;app01.urls&quot;) 5.2 视图函数1 函数至少一个参数 request2 request12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 注意:form表单提交方法只能是get或post当提交文件时特别注明enctype=&quot;multipart/form-data&quot;12345&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;filename&quot;&gt;&lt;/form&gt; 3 返回方式123HttpResponse()render(request,)redirect() 5.3 ORM操作各数据库操作是一种外对sql api接口的封装 第一层封装：数据库存储最底层是db驱动，对外开放SQL API用于操作数据库 第二层封装：python3 中操作mysql数据库的库为pymysql,是对SQL API之上的一层封装 第三层封装: orm操作是最高级封装，pymsql之上的一层封装 最终：orm翻译成pymsql,pymysql再翻译成sql语句 Django 数据库操作具体语法介绍请参考 5.4 模板引警Django对template中html的渲染有着一套语法,我有专门一篇博客讲解模板渲染语法渲染语法博客参考 1 基本方法12345678910111213return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 2 函数 Django 提供的函数:12simple_tag 可以有多个参数filter 只能有2个参数，并且可以做条件语句的条件","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-08-03-面象对象编程高级","slug":"python-08-03-面象对象编程高级","date":"2017-03-15T14:28:41.000Z","updated":"2018-02-21T04:38:02.994Z","comments":true,"path":"2017/03/15/python-08-03-面象对象编程高级/","link":"","permalink":"http://www.digmyth.com/2017/03/15/python-08-03-面象对象编程高级/","excerpt":"","text":"目录(魔法方法) 类内置方法 构造方法 @property getattr系列 getitem系列 metaclass系列 importlib 字符串形式运行函数 内置方法1234567891 Foo.__name__ 字符串形式的类名2 Foo.__doc__ Foo的文档字符串3 Foo.__bases__ 父类组成的元组4 Foo.__class__ Foo类所在5 Foo.__bases__ Foo的所有父类构成的元组7 Foo.__module__ Foo类所在模块8 obj.__class__ obj对象所在的类 9 dir(Foo)` Foo类所有属性名组成的列表10 Foo.__dict__ Foo类所在属性组成的字典 构造方法12__init__ 构造方法，通过类创建对象时自动触发执行__del__ 析构方法，当对象在内存中被释放时自动触发执行 __str__ __repr__ __call__123__str__ 对象打印时自动触发__repr__ 对象直接回车自动触发（仅供程序员使用）__call__ 对象后面加括号调用时自动触发 @property属性方法把一个类方法变为属性来用12345678910111213141516171819class Dog(object): def __init__(self,name): self.name = name self.__food = None @property def eat(self): print(&quot;%s is eating %s&quot; %(self.name, self.__food)) @eat.setter # 赋值调用属性，调这个方法 def eat(self,food): print(&quot;set to food:&quot;,food) self.__food = food @eat.deleter # 删除属性 def eat(self): del self.__food print(&quot;Delete the finished&quot;)obj=Dog(&apos;w..w&apos;)obj.eat = &quot;fish&quot; # 自动调用@eat.setter赋值obj.eat property 原理就是property类里定义了__get__() __set__() __delete__()方法，是描述符的运用123456定义： 描述符就是将某种特殊类的实例指派给另一个类的属性，__get__ __set__ __delete__实现了 描述符协议，用于property描述符编写。一种调用方式之一： property(fget=None, fset=None, fdel=None, doc=None)__get__(self, instance, owner) #用于访问属性，它返回属性的值__set__(self, instance, value) #将在属性分配操作中调用，不返回任何内容__delete__(self, instance) # 控制删除操作，不返回任何内容 getattr setattr hasattr反射系列用于通过字符串找到函数或方法 示例：1234567891011121314151617181920def func1(self): print(self.name,&apos;say Hi&apos;) return &quot;func1&quot;class Foo(object): def __init__(self): self.name = &apos;wxq&apos; def func2(self): print(self.name) return &quot;method func2&quot;obj = Foo()choice = input(&quot;请输入调用方法名:&quot;)if hasattr(obj,choice): # 实例中有这个方法，执行实例中的方法 func=getattr(obj,choice) func() # 绑定方法自动传入self参数else: # 动态加载函数封装到类中 setattr(obj,choice,func1) func = getattr(obj,choice) func(obj) # 函数时需手动传入self参数 __getattr__ __setattr__ __hasattr__ __delattr__ 进行__dict__拦截一般来讲，obj.name = &#39;wxq&#39;python自动基于self.__dict__赋值取值操作，无需关心，这里只是对这种自动操作进行拦截，用于高级代码重写操,self.xx不存在变量xx时先访问__getattribute__,再访问__getattr__,默认返回None,self.xx存在变量xx时不会访问getattr，直接取出值返回，self.name=’wxq’赋值先访问setattr`方法，没有该方法就用默认内置. 示例一12345678910111213141516171819class Foo(): def __init__(self): pass def __getattribute__(self, item): print(&apos;__getattribute__&apos;) return object.__getattribute__(self,item) def __getattr__(self, item): print(&apos;__getattr__&apos;) return &quot;%s variable don&apos;t exists&quot; % item def __setattr__(self, item, value): print(&apos;__setattr__&apos;) self.__dict__[item] = &apos;test&apos;+valueobj=Foo()obj.name = &apos;wxq&apos;print(obj.name) 打印123__setattr____getattribute__testwxq 示例二： 当没有.xx变量属性时会访问__getattr__方法12345678910111213class Foo(): def __init__(self): pass def __getattr__(self, item): if item == &apos;name&apos;: return &apos;wxq&apos; elif item == &apos;age&apos;: return 25obj = Foo()print(obj.age) 示例三：123456789101112class Foo(): def __init__(self,path=&apos;&apos;): self.path = path def __getattr__(self, item): return Foo(&quot;%s/%s&quot;%(self.path, item)) def __str__(self): return self.pathobj = Foo(&quot;www&quot;).bai.comprint(obj) # 打印 www/bai/com __getitem__ __setitem__ __delitem__用于索引操作，如字典形式：obj[&#39;k1&#39;]如Session设置 request.session[&#39; user_info&#39;] = &#39;user&#39; 1234567891011121314151617181920class Foo(object): def __init__(self,attrs=&#123;&#125;): self.attrs = attrs def __getitem__(self, key): print(&apos;__getitem__&apos;,key) return self.attrs.get(key) def __setitem__(self, key, value): print(&apos;__setitem__&apos;,key,value) self.attrs[key] = value def __delitem__(self, key): print(&apos;__delitem__&apos;,key) del self.attrs[key] print(self.attrs) obj = Foo(&#123;&apos;name&apos;:&apos;wxq&apos;&#125;)obj[&apos;k1&apos;] = &apos;v1&apos; # 设置，自动触发执行 __setitem__print(obj.attrs)print(obj[&apos;k1&apos;]) # 获取值，自动触发执行 __getitem__del obj[&apos;name&apos;] # 触发__delitem__ __new__和 __metaclass____new__与实例化对象相关123456789class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): # 其实是运行了__new__(),不再调用__init__()方法了 print(&quot;Foo __new__&quot;)obj = Foo(&apos;wxq&apos;) # 打印 Foo __new__,这里obj是None 这里可以看出实例化是先运行的__new__()方法，如果__new__()没有返回值，Foo.__init__()就不会运行了，obj也就为None了要想运行Foo.__init__(), 那么__new__()必须有返回值1234567891011class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): print(&quot;Foo __new__&quot;) return object.__new__(cls)obj = Foo(&apos;wxq&apos;)print(obj) 总结实例化过程 看起来__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。 __metaclass__与类的创建相关12print type(f) # 输出：&lt;class &apos;__main__.Foo&apos;&gt; 表示，obj 对象由Foo类创建print type(Foo) # 输出：&lt;type &apos;type&apos;&gt; 表示，Foo类对象由 type 类创建 培析类 的创建过程123456789def func(self): print(&apos;hello fgf&apos;)Foo = type(&apos;Foo&apos;,(object,), &#123;&apos;talk&apos;: func&#125;)# type第一个参数：类名# type第二个参数：当前类的基类# type第三个参数：类的成员f = Foo()f.talk() 12345678910def func(self): print(&quot;hello %s %s&quot;%(self.name,self.age))def __init__(self,name,age): self.name = name self.age = ageFoo = type(&apos;Foo&apos;,(object,),&#123;&apos;func&apos;:func, &apos;__init__&apos;:__init__&#125;) # 用type创建出Foo这个对象（类）f = Foo(&quot;wxq&quot;,25) # 再用Foo对象创建f对象f.func() Metaclass元类创建过程1234567891011121314151617181920212223242526272829#print(globals())class MyType(type): def __init__(self,*args,**kwargs): print(&quot;MyType __init__&quot;,self,*args,**kwargs) def __call__(self, *args, **kwargs): print(&quot;MyType __call__&quot;,self, *args, **kwargs) obj = self.__new__(self) self.__init__(obj, *args, **kwargs) obj.age= 25 return obj def __new__(cls, *args, **kwargs): print(&quot;MyType __new__&quot;,cls, *args, **kwargs) obj = type.__new__(cls, *args, **kwargs) return objclass Foo(object,metaclass=MyType): def __init__(self, name): self.name = name print(&quot;Foo __init__&quot;) def __call__(self, *args, **kwargs): print(&quot;call...&quot;)#print(globals()f = Foo(&quot;test&quot;)print(f.name,f.age) 总结Type创建类过程 前面实例化对象的结论是__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。那么type创建Foo对象(类)也是这个流程，因为是Type实例化Foo类，MyType执行__new__创建Foo,返回给MyType.__init__()执行，当f=Foo() 实例化对象也就是加()调用MyType.__call__()方法,__call__()方法来执行实例化，实例化过程又是执行Foo.__new__()返回给Foo.__init__()，完成实例化。 importlib字符串模块导入123456import importlibx=&apos;scrapy.crawler.CrawlerProcess&apos;model_path,model_name = x.rsplit(&apos;.&apos;,maxsplit=1)md=importlib.import_module(model_path) # 字符串形式模块导入cls=getattr(md,model_name)print(cls) 字符串形式运行函数1 eval(字符串)1234def func(arg): return argeval(&apos;func(&quot;hello wolrd&quot;)&apos;) Tornado编写session组件会用到这个知识点，结合工厂设计模式 2 eval获取函数1234567def f1(arg): print(arg)x=&quot;f1&quot;func=eval(x) # 获取函数func(&quot;wxq&quot;) 3 sys.modules获取函数1234567891011import sysdef process(arg): return argf=&quot;process&quot;func=getattr(sys.modules[__name__], f) # 获取函数ret=func(&apos;hello world&apos;)print(ret) 4 运用类中getattr123456789class Foo(): def f1(self): return &quot;hello world&quot; obj = Foo()x=&quot;f1&quot;func=getattr(obj,x)print(func()) &lt;完结&gt;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-06-01-正则表达式","slug":"python-06-01-正则表达式","date":"2017-03-01T09:03:01.000Z","updated":"2017-02-27T08:36:47.909Z","comments":true,"path":"2017/03/01/python-06-01-正则表达式/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-06-01-正则表达式/","excerpt":"","text":"目录 基础 进阶 re模块 分组 切分字符串 编译compile 贪婪模式匹配 基础元字符：(Meta-Characters)是正则表达式中具有特殊意义的专用字符比如：\\d表示数字 \\s表示空格 \\w表示[a-zA-Z0-9_]大小写字母数字下划线元字符表 链接字符类：又字符集，一组可以匹配[ ]中字符串的字符12345678910111213141516171819202122. # 任意单个字符[] # 集合内[^] # 集合内取反? # 表示前一个字符长度为0或1+ # 表示前一个字符长度为1或1以上* # 表示前一个字符长度为任意，等同于?+的并集&#123;m&#125;&#123;m,n&#125;&#123;0,n&#125;&#123;m,&#125;^$pat1|pat2() # 分组\\b # 嘛意思[0-9] \\d[0-9a-zA-Z_] \\w\\s # 任意空白字符\\nna*? # 这里？使用非贪婪模式（正则表达式默认工作在贪婪模式，尽可能多的去匹配）(*|+|?|&#123;&#125;)?` # 使用非贪婪模式match # 只匹配首项以开头的，与shell中^相同 进阶re模块12345678910111213141516171819202122232425262728293031&gt;&gt;&gt; re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; res = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; print(res)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt; # 没有匹配到打印为None&gt;&gt;&gt; res.group() # 匹配到时用.group()取出匹配结果 &apos;wxq&apos;&gt;&gt;&gt; &quot;I love wxq &quot;.find(&apos;wxq&apos;)7&gt;&gt;&gt; re.search(r&apos;.&apos;, &apos;I love digmyth.com&apos;) # 匹配任意单个字符，所以匹配到&quot;I&quot;&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\.&apos;, &apos;I love digmyth.com&apos;) # 只匹配.需要转义&lt;_sre.SRE_Match object; span=(14, 15), match=&apos;.&apos;&gt;&gt;&gt;&gt; re.search(r&apos;wx.&apos;, &apos;I love wxq.com&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d&apos;, &apos;I love 123 wxq&apos;) # 匹配单个数字&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt; &gt;&gt;&gt; re.search(r&apos;\\d\\d\\d&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;123&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.10&apos;) # 少一位匹配不到&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.100&apos;) # 匹配到&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.100.100&apos;&gt; 12345678910111213141516171819202122232425262728293031323334353637&gt;&gt;&gt; re.search(r&apos;[aeiou]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(3, 4), match=&apos;o&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[aeiouAEIOU]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[a-z]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(2, 3), match=&apos;l&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[2-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(8, 9), match=&apos;2&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[0-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3&#125;c&apos;, &apos;abbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 5), match=&apos;abbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3,10&#125;c&apos;, &apos;abbbbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 7), match=&apos;abbbbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[0-255]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;1&apos;&gt;&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[0-2][0-5][0-5]&apos;, &apos;188&apos;) # 没有匹配到&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[01]\\d\\d|2[0-2]\\d|25[0-5]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;188&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5]))&apos;, &apos;192.168.1.1&apos;) # 只匹配到192&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;192&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5])\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]\\d\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 11), match=&apos;192.168.1.1&apos;&gt; ip地址匹配最终完美写法：12345&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.240.240&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 14), match=&apos;192.168.240.24&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[0-1]?\\d?\\d)&apos;, &apos;192.168.240.240&apos;) # 这个写法完美&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.240.240&apos;&gt; [0-255]表示的是0，1，2后跟上55[0-2][0-5][0-5]只是三个占位上的数字，没有个位，百位这样的区分，当然不能匹配188了 1234567891011121314&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;3&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 重复&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1, 5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 注意没有空格&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1,5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 匹配到了&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; s = &quot;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt;&quot;&gt;&gt;&gt; re.search(r&apos;&lt;.+?&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;&lt;html&gt;&apos;&gt;&gt;&gt;&gt; re.search(r&apos;&lt;.+&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 50), match=&apos;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt; 12345&gt;&gt;&gt; re.findall(r&apos;\\bFishC\\b&apos;, &quot;FishC.com!FishC_com!(FishC)&quot;) # 待续。#^#[&apos;FishC&apos;, &apos;FishC&apos;]&gt;&gt;&gt; &gt;&gt;&gt; re.findall(r&apos;\\w&apos;, &quot;牛X工作室Love_FishC_com!)&quot;)[&apos;牛&apos;, &apos;X&apos;, &apos;工&apos;, &apos;作&apos;, &apos;室&apos;, &apos;L&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;F&apos;, &apos;i&apos;, &apos;s&apos;, &apos;h&apos;, &apos;C&apos;, &apos;_&apos;, &apos;c&apos;, &apos;o&apos;, &apos;m&apos;] re-replace/sub的例子如下字符串的strip方法只能去前后空格、字符串的replace方法是字符替换、re.sub方法也是替换功能。123456789&gt;&gt;&gt; name = &apos; w x q&apos;&gt;&gt;&gt; name.strip()&apos;w x q&apos;&gt;&gt;&gt; name.replace(&apos; &apos;, &apos;&apos;)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos;wxq&apos;, &apos;love&apos;, &apos;I wxq wxq wxq&apos;, count=2)&apos;I love love wxq&apos; 分组eg1:123&gt;&gt;&gt; name = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; name.group() # .group()打印匹配对象&apos;wxq&apos; eg2:12345678910&gt;&gt;&gt; s = &apos;aa bb cc dd &apos;&gt;&gt;&gt; p = re.compile(r&apos;\\w+\\s+\\w+&apos;) # 匹配单词空格单词这样的分组&gt;&gt;&gt; p.findall(s) # 匹配分为了2组[&apos;aa bb&apos;, &apos;cc dd&apos;]&gt;&gt;&gt; p = re.compile(r&apos;(\\w+)\\s+\\w+&apos;) # 只匹配单词空格单词中括号那个单词&gt;&gt;&gt; p.findall(s)[&apos;aa&apos;, &apos;cc&apos;]&gt;&gt;&gt; p = re.compile(r&apos;((\\w+)\\s+\\w+)&apos;) # 先打印外括号，后打印内括号，先后内容组成元组，最后列表呈现&gt;&gt;&gt; p.findall(s)[(&apos;aa bb&apos;, &apos;aa&apos;), (&apos;cc dd&apos;, &apos;cc&apos;)] eg3:12&gt;&gt;&gt; re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;(?P&lt;birthday&gt;[0-9]&#123;4&#125;))&quot;, &quot;371481199306143242&quot;).groupdict()&#123;&apos;province&apos;: &apos;3714&apos;, &apos;birthday&apos;: &apos;1993&apos;, &apos;city&apos;: &apos;811993&apos;&#125; 切分字符串re.split用法split 以至少2个空格为分隔, 两种写法:re.split(r’\\s{2,}’, str)re.split(r’\\s\\s+’，str) 12345&gt;&gt;&gt; import re&gt;&gt;&gt; re.split(r&apos;\\s&#123;2,&#125;&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;) # 以2个空隔分割字符串返回列表[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;]&gt;&gt;&gt; re.split(r&apos;\\s\\s+&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;)[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;] 12345678910111213# cat whodata.txt 17:24:49 up 2:05, 3 users, load average: 0.00, 0.02, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/1 192.168.109.1 15:33 9.00s 0.17s 0.04s python3&gt;&gt;&gt; import re&gt;&gt;&gt; with open(&apos;whodata.txt&apos;, &apos;r&apos;) as f:... for line in f:... res = re.split(&apos;\\s\\s+&apos;, line)... print(res)... [&apos; 17:24:49 up&apos;, &apos;2:05,&apos;, &apos;3 users,&apos;, &apos;load average: 0.00, 0.02, 0.05\\n&apos;][&apos;USER&apos;, &apos;TTY&apos;, &apos;FROM&apos;, &apos;LOGIN@&apos;, &apos;IDLE&apos;, &apos;JCPU&apos;, &apos;PCPU WHAT\\n&apos;][&apos;root&apos;, &apos;pts/1&apos;, &apos;192.168.109.1&apos;, &apos;15:33&apos;, &apos;9.00s&apos;, &apos;0.17s&apos;, &apos;0.04s python3\\n&apos;] eg1:123456789101112&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; p = re.compile(&apos;\\.&apos;)&gt;&gt;&gt; p.split(&apos;www.digmyth.com&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; url = &apos;www.digmyth.com&apos;&gt;&gt;&gt; re.compile(&apos;\\.&apos;).split(url)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; re.sub(&apos;www&apos;, &apos;mail&apos;, url)&apos;mail.digmyth.com&apos;&gt;&gt;&gt; url.split(&apos;.&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;] eg2:123456789&gt;&gt;&gt; import re&gt;&gt;&gt; name = &apos;hello world&apos;&gt;&gt;&gt; str_a, str_b = re.split(r&apos;\\s+&apos;, name)&gt;&gt;&gt; str_a, str_b(&apos;hello&apos;, &apos;world&apos;)&gt;&gt;&gt; str_a&apos;hello&apos;&gt;&gt;&gt; str_b&apos;world&apos; eg3:123456789101112root@ubuntu:~# cat put_split.py #!/usr/bin/env python3import osimport reinput = input(&quot;enter you str: &quot;).strip()cmd, path = re.split(r&apos;\\s+&apos;, input)print(cmd.strip())print(path.strip())root@ubuntu:~# python3 put_split.py enter you str: put /root/demo.txtput/root/demo.txt 编译compile正则表达式工作流程： 检测语法–&gt; 编译–&gt; 匹配当一个正则表达式多次调用时，建议预先编译好，后续直接用于匹配以提高效率 123456789&gt;&gt;&gt; p = re.compile(r&apos;[A-Z]&apos;)&gt;&gt;&gt; type(p)&lt;class &apos;_sre.SRE_Pattern&apos;&gt;&gt;&gt;&gt; p.search(&quot;I Love www.DigMyth.Com&quot;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; p.findall(&quot;I LLove www.DigMyth.Com&quot;)[&apos;I&apos;, &apos;L&apos;, &apos;L&apos;, &apos;D&apos;, &apos;M&apos;, &apos;C&apos;] 贪婪模式匹配","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-07-01-面象对象编程初级","slug":"python-07-01-面象对象编程初级","date":"2017-03-01T00:28:28.000Z","updated":"2018-02-06T09:03:55.804Z","comments":true,"path":"2017/03/01/python-07-01-面象对象编程初级/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-07-01-面象对象编程初级/","excerpt":"","text":"目录 相关概念 创建类和对象 面向对象内置变量 继承、封装、多态 抽象方法 相关概念定义： 面向对象编程(oop=object-oriented programming): 相对于面对过程编程，它只是一种编程范示。 状态和转换这种状态的操作: 状态其实就是数据，转换这种状态的操作其实就是方法 类：将同一种具体的共同特性抽象出来数据：如变量方法：函数：操作变量引用的数据的代码方法是类的组成部份，属性也是在类中定义的, 但数据是在类实例化时赋值的. 对象是类的实例，对象的某个方法的调用理解为对其发消息，或接口调用同一个类的所有对象都能接收相同的消息，也就是同种方法依赖 一个类中的方法操作另一个类的对象聚合 类A的对象包含类B的对象继承：描述特殊或具体与一般性的关系面向对象的模型机制有3原则：封装，继承，多态 类或类成员有数据和方法一个类的行为和接口是通过类的方法来定义的对象是类的实例自定义类—实例化—–对象–对象间的操作—消息传递这里消息就是调用请求 创建类和对象1234567891011121314class Foo(): data=&apos;hello world&apos; #类数据变量作用于所有实例 def __init__(self,name=&apos;default&apos;): # 构造器 self.name = name # 实例变量作用于调用对象或调用实例 def set_score(self,value): # 类方法属性 self.score = value def get_score(self): return self.scoreobj = Foo(&apos;wxq&apos;) obj.set_score(100)print(obj.get_score()) 可以给一个对象添加属性123456class Foo(): data = &apos;default data&apos;obj = Foo()obj.name = &apos;wxq&apos;print(obj.name) 可以把某个方法绑定给一个实例或 一个类，当绑定给类时，这个方法对此类的所有实例都生效方法绑定给一个实例12345678910def set_age(self,age): self.age = age class Foo(): data = &apos;default data&apos; from types import MethodTypeobj.set_age = MethodType(set_age, obj)obj.set_age(20) 方法绑定给一个类12345678910111213from types import MethodTypeclass Foo(): data = &apos;default data&apos;def set_age(self,age): self.age = ageFoo.set_age = MethodType(set_age, Foo)obj = Foo()obj.set_age(23)print(obj.age) 面向对象内置变量1 类变量作用于所有对象或实例2 实例变量作用于调用对象或调用实例3 __init__() 构造器 __del__() 析构器4 Foo.__name__ 字符串形式的类名5 Foo.__doc__ Foo的文档字符串6 Foo.__bases__ Foo的所有父类构成的元组 7Foo.moduleFoo类所在模块 8obj.classobj对象所在的类 9dir(Foo)` Foo类所有属性名组成的列表1[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;data&apos;] 10 Foo.__dict__Foo类的所有属性组成的字典1&#123;&apos;data&apos;: &apos;hello&apos;, &apos;__weakref__&apos;: &lt;attribute &apos;__weakref__&apos; of &apos;Foo&apos; objects&gt;, &apos;__dict__&apos;: &lt;attribute &apos;__dict__&apos; of &apos;Foo&apos; objects&gt;, &apos;__init__&apos;: &lt;function Foo.__init__ at 0x0000000000ABC9D8&gt;, &apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None&#125; 类的继承，封装，多态3特性继承1234567891011121314class Foo(): def f1(self): return self.f2() def f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def f2(self): return &quot;Bar.f2&quot;obj = Bar()obj.f1() # 打印Bar.f2# 描述运行过程:self=obj,没有f1就先调用父类的f1,再找当前类的f2, 不是直接找父类的f2,如果非要找父类的f2,参考下面引藏示例 有时子类直接继承父类，在继承基础上重构子类属性，那么就要用到super()方法用法： super(当前类，self.).__init__()或py3 supuer().__init__() 12345678class Foo(): def __init__(self,*args,**kwargs): passclass Bar(): def __int__(self,name,*args,**kwargs): super(Bar,self).__init__() self.name = name Boolean型判断123456789判断一个类是不是另一个类的子类issubclass(CC,PP)issubclass(PP,object)判断一个实例是不是那个类生成的isinstance(ins1,CC)判断一个实例有没有那个属性值hasattr(ins1,&apos;name&apos;) 12345678from types import FunctionTypeclass Foo(): def f1(self,name): return nameobj = Foo()print(isinstance(Foo.f1,FunctionType)) # Trueprint(isinstance(obj.f1,FunctionType)) # False 封装python数据封装只要写代码就会有，对数据结构化存储; 如1234567class Base(): def __init__(self): self.status = False self.data = None self.errors = Noneobj=Base()obj.status/obj.data/obj.errors # 这就是一种数据封装 封装可以__开头隐藏属性，但在类内部不受限制，外部是无法访问的，当然只是语法变形的隐藏，在名称空间还是能找到的123456789101112131415161718class Foo(): __N = &apos;NN&apos; def __init__(self,name): self.__name = name def __f1(self): # 外部无法直接访问 return self.__name def f2(self): return self.__f1() # 在内部调用不受限制obj = Foo(&apos;wxq&apos;)print(obj.__f1()) # 无法直接调用,直正调用还是可以的obj._Foo__f1()print(obj.f2())obj.__dict__ # &#123;&apos;_Foo__name&apos;: &apos;wxq&apos;&#125;obj.__x = &quot;xx&quot; # 语法隐藏变形是在定义类时，实例化后再__不会变形obj.__xx # 实例化后不会隐藏 继承类时，我们就想调用Foo的f2(),方法很多，这里用一下隐藏实现1234567891011121314 class Foo(): def f1(self): return self.__f2() #变形为 self._Foo__f2 def __f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def __f2(self): # self._Bar__f2 return &quot;Bar.f2&quot;obj = Bar()x=obj.f1() # 打印Foo.f2print(x) 多态python原生就是多态，没什么可说的 123456789101112131415161718192021222324252627class Animal(): def __init__(self,name): self.name = name def talk(self): pass @staticmethod def animal_talk(obj): obj.talk()class Dog(Animal): def talk(self): print(&quot;wang...&quot;)class Cat(Animal): def talk(self): print(&quot;miao miao...&quot;)d=Dog(&apos;dog&apos;)# d.talk()c = Cat(&apos;cat&apos;)# c.talk()Animal.animal_talk(d)Animal.animal_talk(c) 抽象方法抽象方法作用：定义子类必须实现的父类的某些方法使用：12345678910111213141516171819import abcclass Base(metaclass=abc.ABCMeta): @abc.abstractmethod def read(self): pass @abc.abstractmethod def write(self): passclass dev(Base): def read(self): pass def write(self): passobj = dev() 如果子类没有实现父类规定的@abc.abstractmethod装饰的方法就会报错1TypeError: Can&apos;t instantiate abstract class dev with abstract methods read, write","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-02-模块","slug":"python-05-02-模块","date":"2017-02-20T02:09:10.000Z","updated":"2018-01-03T10:57:43.240Z","comments":true,"path":"2017/02/20/python-05-02-模块/","link":"","permalink":"http://www.digmyth.com/2017/02/20/python-05-02-模块/","excerpt":"","text":"目录 相关概念 模块os 模块sys 模块time 模块random 模块pickle 模块json 模块logging 模块paramiko 模块configparser 模块MySQLdb 模块hashlib 模块uuid 模块md5 模块 相关概念 过程编程 , 函数式编程, 模块化编程是一个意思，区别于面向对象编程 面向对象编程好处：（特性: 封装，继承，多态） python程序可以分解成模块，语句，表达式和 对象 程序由模块构成 模块包含语句 语句包含表达式 表达式建立并处理对象表达式是”某事“， 语句是“做某事”即指令语句的特性：它们改变了事物，例如，赋值语句改变了变量，print改变了屏幕输出。 模块导入的使用 123456&gt;&gt;&gt; import platform&gt;&gt;&gt; print(platform.uname())uname_result(system=&apos;Linux&apos;, node=&apos;ubuntu&apos;, release=&apos;4.2.0-35-generic&apos;, version=&apos;#40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016&apos;, machine=&apos;x86_64&apos;, processor=&apos;x86_64&apos;)&gt;&gt;&gt; import platform&gt;&gt;&gt; dir(platform)[&apos;DEV_NULL&apos;, &apos;_UNIXCONFDIR&apos;, &apos;__builtins__&apos; 此处略... ] 模块导入区别 import 导入会形成以模块名同名的名称空间，如果有个方法叫uname(),那么我们调用是print(platform.uname())加上platform名称空间前缀不会冲突 123456&gt;&gt;&gt; import random # 独立名称空间&gt;&gt;&gt; random.choice([3,5,6,7,8,9]) 7&gt;&gt;&gt; from random import choice # 没有独立名称空间，当前有choice方法会覆盖，这就是区别&gt;&gt;&gt; choice([3,5,6,7,8,9])6 from-import是导入指定模块的某些方法和属性，会导入在当前名称空间里，如果当前名称空间也有choice方法，那么会覆盖choice方法。import和from-import是可执行语句，独立可执行片断，可以嵌套在if测试中，或出现在def中，这样在我们满足条件再导入模块。 己知模块查找此模块在系统中的路径，用法module_name.__file__123&gt;&gt;&gt; import random&gt;&gt;&gt; random.__file__&apos;/usr/lib/python3.4/random.py&apos; 反射有一种说法叫反射1 以字符串的形式导入模块2 以字符串的形式调用函数 例子：12345678910111213root@apt:~# cat /usr/local/lib/python2.7/dist-packages/pkg/mysql.py#!/usr/bin/python2.7def count(): return 3306root@apt:~#In [1]: var = &apos;pkg.mysql&apos;In [2]: mode = __import__(var)In [3]: mode.mysql.count()Out[3]: 3306In [4]: func = &apos;count&apos;In [5]: Func = getattr(mode.mysql, func)In [6]: Func()Out[6]: 3306 模块osMore info 详情 模块sys利用sys模块模拟#滚动条12345678import sys,timeIn [111]: for i in range(50): .....: sys.stdout.write(&quot;\\033[32;1m#\\033[0m&quot;) .....: sys.stdout.flush() .....: time.sleep(0.05) .....: ################################################## time模块random模块博客参考 几个有用的方法1234import randomprint(random.randint(1,10)) # 取1-9print(random.randrange(1,20,2)) # 步长为2，意味着取奇数print(random.sample([1,2,3,4,5,6,7,8],3)) # 取一个3个元素的列表[3, 6, 1] 生成随机码(一)123456789checkcode = &apos;&apos;for i in range(4): current=random.randrange(0,4) if current != i: tmp = chr(random.randint(65,90)) else: tmp = random.randint(0,9) checkcode += str(tmp)print(checkcode) 生成随机码(二)1234import string# print(string.ascii_uppercase + string.ascii_lowercase+string.digits)source = string.ascii_uppercase + string.ascii_lowercase+string.digitsprint(&quot;&quot;.join(random.sample(source,4))) pickle模块pickle只是python支持，那么可以序列化python内所有数据类型 在程序运行的过程中，所有的变量都是在内存中,过程中可能改变变量，程序结束，内存变量回收。此时如果没有把修改过的变量存到磁盘上，下次程序运行又是最初的变量，怎么解决这个问题，序列化就派上用场了。 序列化： 把内存中的变量变成可存储可传输的过程称为序列化，pickling反序列化：把变量从序列化对象重新读入内存称为反序列化，unpickling pickle.dump() 序列化入文件pickle.dumps() 序列化为字符串，可赋值pickle.load() 从文件加载pickle.loads() 从字符串加载 1234567891011In [27]: import pickleIn [29]: my_listOut[29]: [0, 2, 4, 6, 8, 10]In [30]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;wb&apos;) # 打开一个文件In [31]: pickle.dump(my_list, pickle_file) # 序列化入这个文件In [32]: pickle_file.close()In [33]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;rb&apos;) # 打开文件In [34]: pickle.load(pickle_file) # 从一个文件加载回来Out[34]: [0, 2, 4, 6, 8, 10] 12345678910111213In [36]: import pickleIn [37]: list1 = [&apos;wxq&apos;, 11, 22,&apos;good&apos;]In [38]: dumpsed = pickle.dumps(list1)In [39]: type(dumpsed)Out[39]: builtins.bytesIn [40]: loadsed = pickle.loads(dumpsed)In [41]: loadsedOut[41]: [&apos;wxq&apos;, 11, 22, &apos;good&apos;]In [42]: type(loadsed)Out[42]: builtins.list json模块json是各语言通用的序列化数据交换格式，只支持序列化数据类型：str int float set dict list tuple JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输，并且可以直接在Web页面中读取，这也是为什么json这么通用的原因。 1234567891011121314import json# d=&#123;&quot;user&quot;:&quot;wxq&quot;&#125;## json_s=(json.dumps(d)) # 这里d是什么不管，json.dumps后是把d 序列化为符合json标准(只支持双引号)的字符串# json.loads(json_s) # json_s必须符合json双引号标准才能反序列化## json.loads(&quot;&#123;&apos;user&apos;:&apos;wxq&apos;&#125;&quot;) # 这里虽然是字符串，但里面是单引号，不符合json标准，会报错的json_s=json.dumps(&#123;&apos;user&apos;:&apos;wxq&apos;&#125;)# 可以看到这里传入的不是标准的(双引号)，但json_dumps后成为字符串&#123;&quot;user&quot;: &quot;wxq&quot;&#125;，是符合json标准(只支持双引号)的字符串。in javascriptJSON.stringfy() # 序列化JSON.parse() # 反序列化 logging模块python的logging模块提供了标准的日志接口，我们来看一下简单用法123456789101112root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;)root@apt:/tmp# python3 log.py WARNING:root:warning messageERROR:root:error message 上面的日志是直接输出，怎么才能让应用程序日志写入文件呢？ 也很简单定义一个log.py的文件12345678910111213root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50log_file = &apos;example.log&apos;logging.basicConfig(filename=log_file,level=logging.INFO)logging.debug(&apos;program debug message ...&apos;)logging.info(&apos;info message&apos;)logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;) 运行一下log.py文件12345root@apt:/tmp# python3 log.pyroot@apt:/tmp# cat example.log INFO:root:info messageWARNING:root:warning messageERROR:root:error message 我们注意到logging.debug信息并没有写入，为什么呢？因为level=logging.INFO定义要写入日志的日志级别，只有达到定义的日志级别才会记录。 但是发现记录的日志太丑了，怎么样才能让打印的日志人性化呢，就需要格式化输出。 格式 说明 %(name)s Logger的名字 %(levelno)s 数字形式的日志级别 %(levelname)s 文本形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名 %(funcName)s 调用日志输出函数的函数名 %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示 %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数 %(asctime)s 字符串形式的当前时间。默认格式是 “2017-02-01 16:49:45,896”。逗号后面的是毫秒 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 %(message)s 用户输出的消息 如果想同时把log打印在屏幕和文件日志里，或者有日志切割的需求，可能要复杂些 logger提供了应用程序可以直接使用的接口； handler将(logger创建的)日志记录发什么方式输出，是屏幕还是文件，或二都都要； filter提供了细度过滤来决定哪些日志不要输出，如密码敏感信息； formatter决定日志记录的最终输出格式。 logger工作原理图 屏幕和文件都输出123456789101112131415161718192021222324252627282930import logging #create loggerlogger = logging.getLogger(&apos;TEST-LOG&apos;)logger.setLevel(logging.DEBUG) # create console handler and set level to debugsh = logging.StreamHandler()sh.setLevel(logging.DEBUG)# create file handler and set level to warningfh = logging.FileHandler(&quot;access.log&quot;)fh.setLevel(logging.WARNING)# create formatterformatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)# add formatter to sh and fhsh.setFormatter(formatter)fh.setFormatter(formatter)# add ch and fh to loggerlogger.addHandler(sh)logger.addHandler(fh)# &apos;application&apos; codelogger.debug(&apos;debug message&apos;)logger.info(&apos;info message&apos;)logger.warn(&apos;warn message&apos;)logger.error(&apos;error message&apos;)logger.critical(&apos;critical message&apos;) 日志切割handlers.RotatingFileHandler：按文件大小切割handlers.TimedRotatingFileHandler： 按时间切割 示例1：1大小切割略 示例2：12345678910111213141516import loggingfrom logging import handlerlogger = logging.getLogger(__name__)log_file = &quot;timelog.log&quot;#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3)fh = handlers.TimedRotatingFileHandler(filename=log_file,when=&quot;S&quot;,interval=5,backupCount=3)formatter = logging.Formatter(&apos;%(asctime)s %(module)s:%(lineno)d %(message)s&apos;)fh.setFormatter(formatter)logger.addHandler(fh)logger.warning(&quot;test1&quot;)logger.warning(&quot;test12&quot;)logger.warning(&quot;test13&quot;)logger.warning(&quot;test14&quot;) 模块paramiko123456789`pycrypto-2.6.1.tar.gz`# 下载安装apt-get install python-devpython setup.py buildpython setup.py installimport Crypto`paramiko-1.10.1.tar.gz` 下载安装python setup.py buildpython setup.py installimport paramiko 模块configparser生成如下example.ini 文件，该如何做呢12345678910111213root@ubuntu:~# cat example.ini[DEFAULT]compression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes[bitbucket.org]user = wxq[topsecret.server.com]host port = 5000forwardx11 = no 编写如下脚本执行 python3 create_example.py即可 12345678910111213141516171819root@ubuntu:~# cat create_example.py #!/usr/bin/env python3#import configparserconfig = configparser.ConfigParser()config[&quot;DEFAULT&quot;] = &#123;&apos;ServerAliveInterval&apos;: &apos;45&apos;, &apos;Compression&apos;: &apos;yes&apos;, &apos;CompressionLevel&apos;: &apos;9&apos;&#125;config[&apos;bitbucket.org&apos;] = &#123;&#125;config[&apos;bitbucket.org&apos;][&apos;User&apos;] = &apos;wxq&apos;config[&apos;topsecret.server.com&apos;] = &#123;&#125;topsecret = config[&apos;topsecret.server.com&apos;]topsecret[&apos;Host Port&apos;] = &apos;5000&apos; # mutates the parsertopsecret[&apos;Forwardx11&apos;] = &apos;no&apos; # same hereconfig[&apos;DEFAULT&apos;][&apos;Forwardx11&apos;] = &apos;yes&apos;with open(&apos;example.ini&apos;, &apos;w&apos;) as configfile: config.write(configfile) 那么有了example.ini 这样的文件，如何读取呢12345678910111213141516171819202122&gt;&gt;&gt; import configparser # 导入模块&gt;&gt;&gt; config = configparser.ConfigParser() # 类实例化&gt;&gt;&gt; config.sections() # 调用类中一个方法[]&gt;&gt;&gt; config.read(&apos;example.ini&apos;) # 文件读入[&apos;example.ini&apos;]&gt;&gt;&gt; config.sections() # 除了[DEFAULT]还有哪些区块，列表呈现[&apos;bitbucket.org&apos;, &apos;topsecret.server.com&apos;]&gt;&gt;&gt; &apos;bitbucket.org&apos; in configTrue&gt;&gt;&gt; config[&apos;bitbucket.org&apos;][&apos;user&apos;] # 指定区块指定字典键对应值&apos;wxq&apos;&gt;&gt;&gt; config[&apos;DEFAULT&apos;][&apos;compression&apos;]&apos;yes&apos;&gt;&gt;&gt; for i in config[&apos;bitbucket.org&apos;]: # 指定区块打印键... print(i) # 注意：包括[DEFAULT]区块的键也在这里呈现... usercompressionserveraliveintervalcompressionlevelforwardx11 123456789&gt;&gt;&gt; d1 = config[&apos;bitbucket.org&apos;] # 指定区块读出其实是一个字典&gt;&gt;&gt; for k,v in d1.items():... print(&quot;%s = %s&quot; % (k,v))... user = wxqcompression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes 12345678910111213141516171819202122232425root@ubuntu:~# cat wxq.txt # 有这么一个文件[section1]k1 = v1k2: v2[section2]k1 = v111&gt;&gt;&gt; import configparser&gt;&gt;&gt; config = configparser.ConfigParser()&gt;&gt;&gt; config.read(&apos;/root/wxq.txt&apos;) # 读入这样的文件[&apos;/root/wxq.txt&apos;]&gt;&gt;&gt; config.sections() # 查看这个文件的区块[&apos;section1&apos;, &apos;section2&apos;]&gt;&gt;&gt; config.items(&apos;section1&apos;) # 查看指定区块的键值对[(&apos;k1&apos;, &apos;v1&apos;), (&apos;k2&apos;, &apos;v2&apos;)]&gt;&gt;&gt; config.options(&apos;section1&apos;) ＃ 只显示指定区块的键[&apos;k1&apos;, &apos;k2&apos;]&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 判断某区块是否存在返回True/FalseFalse&gt;&gt;&gt; config.add_section(&apos;section3&apos;) # 添加一个区块&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 有了这个区块True&gt;&gt;&gt; config.set(&apos;section3&apos;, &apos;k1&apos;, &apos;v1&apos;) ＃ 添加一行配置，也就是设置一个区块的键值对&gt;&gt;&gt; config.write(open(&apos;wxq&apos;, &apos;w&apos;)) 12345678910root@ubuntu:~# cat wxq # 按照上面的写入会生成了一个新文件[section1]k1 = v1k2 = v2[section2]k1 = v111[section3]k1 = v1 123456&gt;&gt;&gt; config.remove_option(&apos;section3&apos;, &apos;k1&apos;) # 删除某键值对True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;))&gt;&gt;&gt; config.remove_section(&apos;section3&apos;) # 删除某区块True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;)) 模块MySQLdbpython连接数据库操作 建立数据库连接 创建游标cursor(用于发送sql语句，获取sql结果，解析返回结果) 关闭游标cursor curname.close() 关闭数据库连接 conname.close() 模块安装apt-get install python-mysqldb查看模块help(‘modules’)加载数据库模块import MySQLdb as mysql 创建连接，会生成一个con.cursor()的类con = mysql.connect(host=’127.0.0.1’,user=’root’,passwd=’dbpass’) 游标类实例化cur = con.cursor() cur.execute 传入一个参数执行sql语句cur.executemany 传入多个参数执行sql语句 cur.fetchall 查询执行后的结果返回所有cur.fetchmany查询执行后的结果返回多个cur.fetchone 查询执行后的结果返回一个游标回滚help(cur.scroll)scroll(self, value, mode=’relative’) cur.scroll(0,mode=’absolute’) hashlib模块用于加密相关操作，3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法123456789import hashlibstr = hashlib.sha1(b&apos;admin123&apos;) # python3中必须bytes格式str.hexdigest()&apos;f865b53623b121fd34ee5426c792e5c33af8c227&apos;str = hashlib.md5(b&apos;admin123&apos;)str.hexdigest()&apos;0192023a7bbd73250516f069df18b500&apos; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import hashlib m = hashlib.md5()m.update(b&quot;Hello&quot;)m.update(b&quot;It&apos;s me&quot;)print(m.digest())m.update(b&quot;It&apos;s been a long time since last time we ...&quot;) print(m.digest()) #2进制格式hashprint(len(m.hexdigest())) #16进制格式hash&apos;&apos;&apos;def digest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of binary data. &quot;&quot;&quot; pass def hexdigest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of hexadecimal digits. &quot;&quot;&quot; pass &apos;&apos;&apos;import hashlib# ######## md5 ########hash = hashlib.md5()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha1 ########hash = hashlib.sha1()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha256 ########hash = hashlib.sha256()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha384 ########hash = hashlib.sha384()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha512 ########hash = hashlib.sha512()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密1234import hmach = hmac.new(b&apos;wxq&apos;)h.update(b&apos;hi&apos;)print(h.hexdigest()) 来个实用例子：注意：bytes只接收ascii的值，字符串为unicode,需转为ascii样的值，比如utf-8 1234567891011121314151617root@wxq:~# cat md5.py #!/usr/bin/env python3import hashlibimport timedef create_md5(): m = hashlib.md5() m.update(bytes(str(time.time()),encoding=&apos;utf-8&apos;)) return m.hexdigest()res = create_md5()print(res)root@wxq:~# python3 md5.py ebd8a4dd680e2e29b1a44b27b2bdd2f7root@wxq:~# python3 md5.py 4e178ffe5eaa58584434d3b519708638 更多关于md5,sha1,sha256等介绍的文章.看这里 模块uuid直接来个例子：12345678910root@wxq:~# cat create_uuid.py #!/usr/bin/env python3import uuiddef create_uuid(): return (str(uuid.uuid1()))res = create_uuid()print(res)root@wxq:~# python3 create_uuid.py 2cad772c-fe7d-11e6-b3db-3a71234db8d2 模块md512345678910111213#password=form.cleaned_data[&apos;password&apos;]from utils import md5form.cleaned_data[&apos;password&apos;]=md5(form.cleaned_data[&apos;password&apos;])app01/utils/md.pyimport hashlibdef md5(text): m = hashlib.md5() m.update(text.encode(&apos;utf-8&apos;)) # python3接收bytes格式，encode后就是bytes return m.hexdigest()if __name__ == &apos;__main__&apos;: text=&apos;123&apos; return md5(text) update可以执行多次，效果一样123m.update(b&quot;hello &quot;)m.update(b&quot;world&quot;)等同于m.update(b&quot;hello world&quot;) 模块模块模块","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-01-列表解析_生成器_迭代器","slug":"python-05-01-列表解析-生成器-迭代器","date":"2017-02-18T02:53:38.000Z","updated":"2018-02-06T05:22:07.452Z","comments":true,"path":"2017/02/18/python-05-01-列表解析-生成器-迭代器/","link":"","permalink":"http://www.digmyth.com/2017/02/18/python-05-01-列表解析-生成器-迭代器/","excerpt":"","text":"目录 列表解析 生成器 迭代器 列表解析什么是列表解析？定义： 基于一个列表生成另外一个列表，或动态生成一个列表。如：12345In [26]: [ i ** 2 for i in range(2,8)] # 对原列表乘以2Out[26]: [4, 9, 16, 25, 36, 49]In [25]: [ i for i in range(1,10) if i % 2 ] # 对原列表取奇数Out[25]: [1, 3, 5, 7, 9] 练习1： 有如下文件123# cat word.txtrender practice inventory indent accelerate,trigger status,wxq. 我们计算word.txt单词个数1234567891011In [29]: f = open(&apos;/root/word.txt&apos;, &apos;r&apos;)In [31]: word_list = [ word for line in f for word in line.split() ]In [36]: print(word_list)[&apos;render&apos;, &apos;practice&apos;, &apos;inventory&apos;, &apos;indent&apos;, &apos;accelerate,&apos;, &apos;trigger&apos;, &apos;status,wxq.&apos;]In [37]: f.seek(0) # 上面读取过文件，指针己然在最后了，这里是把指针移到文件首部Out[37]: 0In [38]: len([ word for line in f for word in line.split() ]) # 计算结果为7Out[38]: 7 我们计算word.txt非空白字符数12345In [37]: f.seek(0) # 把指针移到文件首部Out[37]: 0In [41]: sum([ len(word) for line in f for word in line.split() ])Out[41]: 58 练习2： 打印一个3行5列的矩阵123In [45]: list1 = [ (x+1, y+1) for x in range(3) for y in range(5) ]In [47]: print(list1)[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)] 练习3：123&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()][&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;] 练习4：1234In [61]: L = [&apos;I&apos;, &apos;WILL&apos;, &apos;STUDY&apos;, &apos;HARD&apos;, &apos;PYTHON&apos;]In [62]: [ s.capitalize() for s in L ]Out[62]: [&apos;I&apos;, &apos;Will&apos;, &apos;Study&apos;, &apos;Hard&apos;, &apos;Python&apos;] 生成器列表解析会创建完整列表占用内存，那么有没有一种算法或机制让我们循环使用时推算出后续元素，这样节省了内存空间。定义：这种边循环边计算的机制，称为生成器generator 创建一个生成器，其中一个方法就是把前面的列表解析[] 换成()123456789101112131415161718192021222324In [107]: g = (i for i in range(4))In [108]: gOut[108]: &lt;generator object &lt;genexpr&gt; at 0x7f98a27ba150&gt;In [117]: g.send(None) Out[117]: 0In [118]: g.send(None)Out[118]: 1In [119]: next(g)Out[119]: 2In [120]: next(g)Out[120]: 3In [122]: next(g)---------------------------------------------------------------------------StopIteration Traceback (most recent call last)&lt;ipython-input-122-5f315c5de15b&gt; in &lt;module&gt;()----&gt; 1 next(g)StopIteration: 利用yield创建一个生成器，取出完整元素需要用for 循环来迭代1234567891011In [123]: def genNum(x): .....: i = 0 .....: while i &lt; x: .....: yield i .....: i += 1 In [124]: g = genNum(5)In [136]: for i in g: .....: print(i, end=&apos; &apos;) .....: 0 1 2 3 4 来看一下yield工作细节1234567891011121314151617In [138]: def consumer(): .....: print(&quot;yield starting&quot;) .....: m = yield 5 .....: print(&quot;m_values: %s&quot; % m) .....: n = yield 12 .....: print(&quot;Game over&quot;) .....: In [139]: c = consumer()In [140]: c.send(None)yield startingOut[140]: 5In [141]: c.send(&apos;to be brave&apos;)m_values: to be braveOut[141]: 12 小结: c.send(None)遇到第一个yield停止，在解释器中out yield中的值，在python yield.py却不会. c.send(‘to be brave’)会上次中止处继续，’to be brave’会赋值给yield 5,即m = ‘to be brave’, 遇到第二个yield停止. g.send(None)启动迭代器，遇到第一个yield返回.1234567891011121314151617root@apt:~/script_study# cat yield.py #!/usr/bin/env python3#def h(): print(&quot;yield starting&quot;) m = yield 5 print(&quot;m_values: %s&quot; % m) d = yield 12 print(&apos;Game over&apos;) c = h()# print test infoc.send(None)c.send(&apos;Fighting!&apos;)root@apt:~/script_study# python3 yield.py yield startingm_values: Fighting! 后面协程正是用的这个知识点。 迭代器细心的朋友不难发现生成器可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值为止。 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator 可以直接作用于for循环的对象统称为可迭代对象：Iterable 哪些是可迭代对象呢？或说可作用于for循环呢？有以下几种数据类型： 一类是集合数据类型，如list、tuple、dict、set、str等； 一类是generator，包括生成器和带yield的generator function。 可以使用isinstance()判断一个对象是否是Iterable对象：1234567891011&gt;&gt;&gt; from collections import Iterable&gt;&gt;&gt; isinstance([], Iterable)True&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)True&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable)True&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)True&gt;&gt;&gt; isinstance(100, Iterable)False 可以使用isinstance()判断一个对象是否是Iterator对象：123456789&gt;&gt;&gt; from collections import Iterator&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)True&gt;&gt;&gt; isinstance([], Iterator)False&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)False&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterator)False 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。 把list、dict、str等Iterable变成Iterator可以使用iter()函数：1234&gt;&gt;&gt; isinstance(iter([]), Iterator)True&gt;&gt;&gt; isinstance(iter(&apos;abc&apos;), Iterator)True 为什么list、dict、str等数据类型不是Iterator 呢？ 这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。 Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。 Python的for循环本质上就是通过不断调用next()函数实现的，例如： for x in [1, 2, 3, 4, 5]: pass实际上完全等价于：12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break 总结1234567凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。迭代器：能够作用于next()函数，不断向后返回值，称为迭代器 iter([1,2,3,4])生成器：yield返回，并且可以next(),是一种特殊的迭代器可迭代对象：一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个类的对象就是可迭代对象，可for循环","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-01-开发入门","slug":"web-01-开发入门","date":"2017-02-15T12:51:41.000Z","updated":"2018-01-18T03:54:37.780Z","comments":true,"path":"2017/02/15/web-01-开发入门/","link":"","permalink":"http://www.digmyth.com/2017/02/15/web-01-开发入门/","excerpt":"","text":"前言从现在开始，此时此刻写点web开发和Django 的知识，便于以后查阅学习。廖雪峰老师的博客写得特别好，我也是摘抄参考其内容。廖雪峰老师博客原文 一. HTTP协议简介web历程web开发经历几个阶段1 静态页面: 直接由编辑器生成静态html2 CGI: 交互与动态数据处理出现了CGI（common gateway interface）,由C/C++编写3 脚本语言（ASP/JSP/PHP）: 脚本语言开发效率高，与html结合紧密4 框架：mvc mtv mvvm HTTP协议服务器把网页传给浏览器，实际上就是把网页的html代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议就是HTTP HTML是一种用来定义网页的文本，会HTML就会编写网页http是在网络上传输html的协议，用于浏览器和服务器的通信 Elements显示网页的结构，Network显示浏览器和服务器的通信。我们点Network，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信。 GET / HTTP/1.1： 注：1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐 当浏览器读取到新浪首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给新浪服务器，拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出一个完整的页面。所以我们在Network下面能看到很多额外的HTTP请求。 HTTP请求流程步骤1：浏览器向服务器发送http请求 方法：GET仅请求资源 POST 会附带用户数据body部份 路径; /full/url/path 域名： 步骤2：服务器向浏览器返回HTTP响应 响应代码：200表示成功 3** 表示重定向 4** 表示客户端发送的请求有错误 5** 表示服务器处理错误 响应类型： 由Content-Type指定 通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中 步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2 Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP请求中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源 HTTP协议同时具备极强的扩展性，虽然浏览器请求的是http://www.sina.com.cn/的首页，但是新浪在HTML中可以链入其他服务器的资源，比如&lt;img src=&quot;#url&quot;/&gt;，从而将请求压力分散到各个服务器上，并且一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称WWW。 二. HTML简介HTML是一种用来定义网页的文本，会HTML就会编写网页 。其它前端知识不在这里展开。略。。。 三 . WSGI接口了解了HTTP协议和HTML文档，我们其实就明白了一个Web应用的本质就是：浏览器发送一个HTTP请求；服务器收到请求，生成一个HTML文档；服务器把HTML文档作为HTTP响应的Body发送给浏览器；浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。 所以，最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。 如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。 正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。 这个接口就是WSGI：Web Server Gateway Interface。 WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”：123def application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 上面的application()函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数： environ：一个包含所有HTTP请求信息的dict对象；start_response：一个发送HTTP响应的函数。 在application()函数中，调用：start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])就发送了HTTP响应的Header，注意Header只能发送一次，也就是只能调用一次start_response()函数。start_response()函数接收两个参数，一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示。 通常情况下，都应该把Content-Type头发送给浏览器。其他很多常用的HTTP Header也应该发送。然后，函数的返回值b&#39;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#39;将作为HTTP响应的Body发送给浏览器。 有了WSGI，我们关心的就是如何从environ这个dict对象拿到HTTP请求信息，然后构造HTML，通过start_response()发送Header，最后返回Body。 整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，底层代码不需要我们自己编写，我们只负责在更高层次上考虑如何响应请求就可以了。 不过，等等，这个application()函数怎么调用？如果我们自己调用，两个参数environ和start_response我们没法提供，返回的bytes也没法发给浏览器。 所以application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器，我们可以挑选一个来用。但是现在，我们只想尽快测试一下我们编写的application()函数真的可以把HTML输出到浏览器，所以，要赶紧找一个最简单的WSGI服务器，把我们的Web应用程序跑起来。 好消息是Python内置了一个WSGI服务器，这个模块叫wsgiref，它是用纯Python编写的WSGI服务器的参考实现。所谓“参考实现”是指该实现完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用。 运行WSGI服务我们先编写hello.py，实现Web应用程序的WSGI处理函数：12345# hello.pydef application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 然后，再编写一个server.py，负责启动WSGI服务器，加载application()函数：12345678910111213# server.py# 从wsgiref模块导入:from wsgiref.simple_server import make_server# 导入我们自己编写的application函数:from hello import application# 创建一个服务器，IP地址为空，端口是8000，处理函数是application:httpd = make_server(&apos;&apos;, 8000, application)print(&apos;Serving HTTP on port 8000...&apos;)# 开始监听HTTP请求:httpd.serve_forever()确保以上两个文件在同一个目录下，然后在命令行输入python server.py来启动WSGI服务器：python server.py 执行程序启动 四 web 框架了解了WSGI框架，我们发现：其实一个Web App，就是写一个WSGI的处理函数，针对每个HTTP请求进行响应。 但是如何处理HTTP请求不是问题，问题是如何处理100个不同的URL。方法是一个函数处理一个URL, 我们专注于写业务处理函数，URL和函数对应关系交给web框架完成，这就是 web框架其中一个价值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-04-01-装饰器","slug":"python-04-01-装饰器","date":"2017-02-04T10:08:26.000Z","updated":"2017-03-01T12:12:35.805Z","comments":true,"path":"2017/02/04/python-04-01-装饰器/","link":"","permalink":"http://www.digmyth.com/2017/02/04/python-04-01-装饰器/","excerpt":"","text":"目录 装饰器 Python装饰器，英文decorator, 以被装饰函数作为参数对其装饰。这里会用到函数，我们可以像使用变量一样使用函数，函数有对象一致特性。 函数可以被赋值给其它变量 函数可以内部再定义函数 函数可以作为参数传递给另外一个函数 函数可以直接返回给外层函数 简单函数进行装饰有这么一个函数12def hello(): return &apos;hello world&apos; 我们想在不修改原函数的情况下，让函数返回特定标签1234def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper 我们定义了一个函数maketag(),该函数有一个参数func,这个参数必须是一个函数，内部又定义了一个wrapper()函数，并直接返回给maketag()123&gt;&gt;&gt; hello = maketag(hello) # 将 hello 函数传给 maketag&gt;&gt;&gt; hello()&apos;&lt;h&gt;hello world&lt;/h&gt;&apos; 上面我们把最初hello函数传给maketag()函数并将返回赋值给变量hello,此时调用hello得到我们想要的结果。注意： maketag()返回赋值给hello,hello函数本身还存在，但函数名引用己经变为了maketag返回函数的名称wrapper,不在是原来的hello,验证一下1234567In [6]: a = maketag(hello)In [8]: a.__name__Out[8]: &apos;wrapper&apos;In [9]: hello = maketag(hello)In [10]: hello.__name__Out[10]: &apos;wrapper&apos; 总结一下：为了增强原函数hello的功能定义了一个maketag函数，它接收一个函数作为参数，maketag返回一个新的函数赋值给一个变量hello,然后hello可直接调用。 一般情况下，我们使用装饰器提供的 @ 语法糖（Syntactic Sugar）来简化上面的写法：12345678def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 像上面的情况，可以动态修改函数（或类）功能的函数就是装饰器。本质上，它是一个高阶函数，以被装饰的函数（比如上面的 hello）为参数，并返回一个包装后的函数（比如上面的 wrapper）给被装饰函数（hello）。 单/多个装饰器的使用形式装饰器的一般使用形式如下：12345678@decoratordef func(): pass等价于下面的形式：def func(): passfunc = decorator(func) 装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如：12345678910@decorator_one@decorator_twodef func(): pass等价于：def func(): passfunc = decorator_one(decorator_two(func)) 看下多个装饰器的例子，为了简单起见，下面的例子就不使用带参数的装饰器。1234567891011121314def maketag1(func): def wrapper(): return &apos;&lt;html&gt;&apos; + func() + &apos;&lt;/html&gt;&apos; return wrapper def maketag2(func): def wrapper(): return &apos;&lt;i&gt;&apos; + func() + &apos;&lt;/i&gt;&apos; return wrapper@maketag1@maketag2def hello(): return &apos;hello world&apos; 上面定义了两个装饰器，对 hello 进行装饰，上面的最后几行代码相当于：12345678def hello(): return &apos;hello world&apos; hello = maketag1(maketag2(hello))调用函数 hello：&gt;&gt;&gt; hello() &apos;&lt;html&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/html&gt;&apos; 似乎理解深刻了：当多个装饰器时，离函数定义最近的装饰器先被调用 对带参数的函数进行装饰让被装饰函数带有参数，对前面例子中的 hello() 函数进行改写使其带参数，如下： 12345678910111213def maketag(func): def wrapper(*args, **kwargs): res = func(*args, **kwargs) return &apos;&lt;h&gt;&apos; + res + &apos;&lt;/h&gt;&apos; return wrapper@maketagdef hello(name): return &apos;hello %s&apos; % name @maketagdef hello2(name1=&apos;user1&apos;, name2=&apos;user2&apos;): return &apos;hello %s, %s&apos; % (name1, name2) 由于函数 hello 带参数，因此内嵌包装函数 wrapper 也做了一点改变： 内嵌包装函数的参数传给了 func，即被装饰函数，也就是说内嵌包装函数的参数跟被装饰函数的参数对应，这里使用了 (*args, **kwargs)，是为了适应可变参数。看看使用：1234&gt;&gt;&gt; hello1(&apos;python&apos;)&apos;&lt;h&gt;hello python&lt;/h&gt;&apos;&gt;&gt;&gt; hello2(&apos;python&apos;, &apos;java&apos;)&apos;&lt;h&gt;hello python, java&lt;/h&gt;&apos; 带参数的装饰器装饰器还可以带参数，比如：123456789@decorator(args1, args2)def func(): pass等价于：def func(): passfunc = decorator(args1, args2)(func) 我们想改用标签 &lt;html&gt;...&lt;/html&gt; 是不是要再定义一个装饰器呢？不必，其实我们可以装饰器外层再定义一个函数，将标签作为参数，返回一个装饰器，比如：12345678def outer_decorator(tag): # 外层函数参数传给装饰器 def decorator(func): # 真正的装饰器参数必然是被装饰器函数func def wrapper(*args, **kwargs): # 装饰器内层函数的参数是func的参数 res = func(*args, **kwargs) # 被装饰函数正常调用# return &apos;&lt;&apos; + tag + &apos;&gt;&apos; + res + &apos;&lt;/&apos; + tag + &apos;&gt;&apos; return &apos;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&apos;.format(tag=tag, res=res) return wrapper # 内层函数作返回值返回给装饰器 return decorator # 装饰器本身作为返回值返回给最外层函数 现在，我们可以根据需要生成想要的装饰器了：1234567outer_decorator = outer_decorator(&apos;html&apos;)@outer_decoratordef hello(name): return &apos;hello %s&apos; % name &gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 上面的形式也可以写得更加简洁：123@outer_decorator(&apos;html&apos;) # @语法糖syntactic sugardef hello(name): return &apos;hello, %s&apos; % name 这就是带参数的装饰器，其实就是在装饰器外面多了一层包装，根据不同的参数返回不同的装饰器。 基于类的装饰器前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子：12345678910111213class Deco_C(object): def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): return &apos;&lt;html&gt;&apos; + self.func(*args, **kwargs) + &apos;&lt;/html&gt;&apos;@Deco_Cdef hello(name): return &apos;hello %s&apos; % name&gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 可以看到，类 Deco_C 有两个方法： __init__()：它接收一个函数作为参数，也就是被装饰的函数__call__()：让类对象可调用，就像函数调用一样，在调用被装饰函数时被调用还可以让类装饰器带参数： 123456789101112131415class Tag(object): def __init__(self, tag): self.tag = tag def __call__(self, func): def wrapper(*args, **kwargs): return &quot;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&quot;.format(res=func(*args, **kwargs), tag=self.tag) return wrapper@Tag(&apos;html&apos;)def hello(name): return &apos;hello %s&apos; % name&gt;&gt; hello(&apos;, welcome&apos;)&apos;&lt;html&gt;hello, welcome&lt;/html&gt;&apos; 需要注意的是，如果类装饰器有参数，则 init 接收此参数，而 call 接收 func函数，并多了一层wrapper(*args, **kwargs)来接收func函数的参数。 装饰器的副作用前面提到装饰器有一个瑕疵，就是被装饰函数的函数名称已经不是原来的名称了，回到最开始的例子：12345678def maketagc(func): def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 函数 hello 被 maketag 装饰后，它的函数名称已经改变了：12&gt;&gt;&gt; hello.__name__&apos;wrapper&apos; 为了消除这样的副作用，Python 中的 functool 包提供了一个 wraps 的装饰器：1234567891011121314from functools import wrapsdef maketag(func): @wraps(func) # 加上 wraps 装饰器 def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos;&gt;&gt;&gt; hello.__name__&apos;hello&apos; 小结:本质上，装饰器就是一个有返回函数的高阶函数。装饰器可以动态地修改一个类或函数的功能，通过在原有的类或者函数上包裹一层修饰类或修饰函数实现。事实上，装饰器就是闭包的一种应用，但它比较特别，以被装饰函数为参数，并返回一个函数，赋给被装饰函数，闭包则没这种限制。 装饰器生产化进阶eg1:1234567891011121314def deco(func): def wrapper(x): print(&quot;what ...&quot;) func(x) print(&apos;Game over ...&apos;) return wrapper@decodef show(x): print(x)&gt;&gt;&gt;show(&quot;I am a pythoner&quot;)what ...I am a pythonerGame over ... eg2:","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Mysql 基础篇","slug":"mysql-基础篇","date":"2017-01-29T01:41:54.000Z","updated":"2017-11-19T10:00:09.447Z","comments":true,"path":"2017/01/29/mysql-基础篇/","link":"","permalink":"http://www.digmyth.com/2017/01/29/mysql-基础篇/","excerpt":"","text":"目录 知识扫盲 基础语句 主键、外键 修改表 分组与聚合 连表查询 其它查询 shell终端获取数据 数据库操作无非就是insert`deleteupdateselete,这篇博客对mysql`数据库语句做个总结记录便于学习 知识扫盲 什么是事务： 原子性操作(不可拆分)就是要么全成功，要么全失败。 mysql语句的注释符是 --，在SQL注入或别的场景中语句形如：username=”root” and 1 =1 – and password=’123’很明显 username=&quot;root&quot; and 1 =1将永远成立， and password=’123’ 部份将被注释，这点需要注意。 基础语句基础语句过于简单，这里就简单逻列下。 创建数据库1CREATE DATABASE db1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 创建一张表注意：auto_increment表示自增，primary key 表示id 这列为主键default charset utf8指定默认字符集engine=innodb指定因默认引警 1234create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 插入数据1insert into tb1(name,age) values(&apos;wxq&apos;,20),(&apos;pp&apos;,18); 更改数据1update tb1 set age=25 where name=&apos;wxq&apos;; 删除某条数据1delete from tb1 where id&gt;1; 删除表内所有数据12delete from 表名 # 不会删除自增序列truncate table 表名 # 会删除自增序列，再次插入数据将从0开始，删除更辙底 删除表1drop table tb1 主键12345主键create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 123456组合主键create table tb1( nid int not null, num int not null, primary key(nid,num) ) 外键1constraint fk_任意字符 foreign key (department_id自己字段) references department外面的表(nid外面表的字段) 12345678外键(约束):一对多 create table tb1( id int not null primary key, name char(32) null , age int not null, department_id int not null constraint fk_department_nid foreign key (department_id) references department(nid) ) 双向外键（约束）：多对对创建主机与部门之间的多对多关系12345678910111213141516create table host (id int not null auto_increatement primary key,host char(20) not null );create table department(id int not null auto_increatement primary key,title char(20) not null);create table de_2_host (id int not null auto_increatement primary key,hid int not null,did int not null,constraint fk_hid_host foreign key (hid) references host(id)，constraint fk_did_department foreign key (did) references department(id)) 修改表1234567891011121314151617添加列：alter table 表名 add 列名 类型删除列：alter table 表名 drop column 列名修改列： alter table 表名 modify column 列名 类型; -- 类型 alter table 表名 change 原列名 新列名 类型; -- 列名，类型 添加主键： alter table 表名 add primary key(列名);删除主键： alter table 表名 drop primary key; alter table 表名 modify 列名 int, drop primary key; 添加外键：alter table 从表 add constraint 外键名称（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);删除外键：alter table 表名 drop foreign key 外键名称 修改默认值：ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;删除默认值：ALTER TABLE testalter_tbl ALTER i DROP DEFAULT; 1234show variables like &apos;%char%&apos;; 查看整个mysql字符集show create table migrate_version; 查看表字符集alter table migrate_version character set utf8; 设置表字符集或者如下条：alter table migrate_version default character set utf8 collate utf8_general_ci; 分组与聚合group by - 对列进行聚合 sum(sid),max(sid),min(sid),count(sid) - 聚合条件过滤,having count(sid) &gt; 7 123456789分组 select num from 表 group by num select num,nid from 表 group by num,nid select num,nid from 表 where nid &gt; 10 group by num,nid order nid desc select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid select num from 表 group by num having max(id) &gt; 10 特别的：group by 必须在where之后，order by之前 连表查询示例1234select A.sid,A.sname,B.captionfrom student as A left join class as B on A.class_id = class.cid; left join 表名 on 多出的数据将会出现NULL数据 rigth join 表名 on 相对left 只是表位置变化，其它没有区别 inner join 表名 on 不会出现NULL数据，没有关联的数据将不会显示 1234567891011121314151617181920连表 无对应关系则不显示 select A.num, A.name, B.name from A,B Where A.nid = B.nid 无对应关系则不显示 select A.num, A.name, B.name from A inner join B on A.nid = B.nid A表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A left join B on A.nid = B.nid B表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A right join B on A.nid = B.nid 其它查询12345678910111213141516171819202122232425262728293031323334353637a、条件 select * from 表 where id &gt; 1 and name != &apos;wxq&apos; and num = 12; select * from 表 where id between 5 and 16; select * from 表 where id in (11,22,33) select * from 表 where id not in (11,22,33) select distinct name from 表 where id in (select nid from 表) # distinct重复数所将只显示一条 b、通配符 select * from 表 where name like &apos;wxq%&apos; - wxq开头的所有（多个字符串） select * from 表 where name like &apos;wx_&apos; - wx开头的所有（一个字符） c、限制 select * from 表 limit 5; - 前5行 select * from 表 limit 4,5; - 从第4行开始的5行 select * from 表 limit 5 offset 4 - 从第4行开始的5行 d、排序 select * from 表 order by 列 asc - 根据 “列” 从小到大排列 select * from 表 order by 列 desc - 根据 “列” 从大到小排列 select * from 表 order by 列1 desc,列2 asc - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序 e、组合 组合，自动处理重合 select nickname from A union select name from B 组合，不处理重合 select nickname from A union all select name from B shell终端获取数据下面介绍在shell终端获取mysql的几种方法 用法一：123456[root@mysql ~]# mysql -p123 -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+---------------+-------+| Variable_name | Value |+---------------+-------+| Uptime | 8025 |+---------------+-------+ 用法二：1234[root@mysql ~]# mysql -p123 -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+--------+------+| Uptime | 8029 |+--------+------+ 用法三：12[root@mysql ~]# mysql -p123 -s -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;Uptime 8037 用法四：12[root@mysql ~]# echo &quot;show global status where variable_name=&apos;uptime&apos;;&quot; | mysql -N -p123Uptime 8072 123456789# echo &quot;show databases;&quot; | mysql -h 127.0.0.1 -uroot -A -p123 | tail -n +2 | head -n 2 -A 表示不自动rehash tail -n +2 表示从第二行开始打印 head -n 2表示打印前2行# echo &quot;use nova01 ; show tables;&quot; | mysql -uroot -padmin# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock -e &quot;use nova01;show tables;&quot;# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock \\ -e &quot;grant all on *.* to user1@&apos;localhost&apos; identified by \\&quot;user1\\&quot;;&quot;","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"shell getopts语法","slug":"shell-getopts语法","date":"2017-01-29T01:41:54.000Z","updated":"2018-04-23T06:58:29.638Z","comments":true,"path":"2017/01/29/shell-getopts语法/","link":"","permalink":"http://www.digmyth.com/2017/01/29/shell-getopts语法/","excerpt":"","text":"Linux shell中getopts语法是一个很高级的语法，它能让你写出很漂亮的shell,来看个例子学习下 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu:~# cat getopts.sh #!/bin/bash# a: b: c: 表示脚本运行时接受选项&lt;-a options_1&gt; &lt;-b options_2&gt; &lt;-c options_3&gt;# first: 表示友好， 给出错误选项时尽量少的打印错误信息# OPTARG 表示选项给的值# OPTIND 表示选项指针（下一位）# 比如：(-a 指针为2) (-a a1 -b 指针为4) (-a a1 -b b1 -c c1指针为7)while getopts &quot;:a:b:c:&quot; OPT;docase $OPT in a) echo &quot;a is OPTARG: $OPTARG&quot; echo &quot;a is OPTIND: $OPTIND&quot; ;; b) echo &quot;b is OPTARG: $OPTARG&quot; echo &quot;b is OPTIND: $OPTIND&quot; ;; c) echo &quot;c is OPTARG: $OPTARG&quot; echo &quot;c is OPTIND: $OPTIND&quot; ;; *) echo &quot;Usage: $0 [-a arg1] [-b arg2] [-c arg3]&quot;esacdoneshift $(($OPTIND-1))echo &quot;\\$1 is: $1&quot;root@ubuntu:~# bash getopts.sh -a a1 -b b1 -c c1 test.sha is OPTARG: a1a is OPTIND: 3b is OPTARG: b1b is OPTIND: 5c is OPTARG: c1c is OPTIND: 7$1 is: test.sh","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"python-03-02-函数","slug":"python-03-02-函数","date":"2017-01-23T12:42:06.000Z","updated":"2017-02-20T10:41:23.378Z","comments":true,"path":"2017/01/23/python-03-02-函数/","link":"","permalink":"http://www.digmyth.com/2017/01/23/python-03-02-函数/","excerpt":"","text":"目录 函数概念 普通函数 匿名函数 递归函数 闭包 高阶函数 函数概念什么是函数 函数是python为了代码最大程度地重用和最小化代码冗余而提供的基本程序结构 函数是一种设计工具，它能让程序员将复杂的程序逻辑分解为可管理的部件 函数用于将相关功能打包并参数化，一个函数可以当参数传给变量或另一个函数 python自带有许多内置函数 在python有4种函数表现形式：1234全局函数： 定义在模块中局部函数：嵌套于其它函数中lambda函数：表达式，可以出现在任意表达式可以出现的地方(又称匿名函名)方法：定义在类中与特定数据类型关联的函数，并且只能与数据类型关联一起使用. 函数语法 函数代码表现12def functionName(parameters): 函数主体代码 相关概念def 是一个可执行语句,因此可以出现在任意语句可以出现的地方，甚至可以嵌套于其它if/while语句中def 创建了一个对象并将其赋值给一个变量名，也就是函数名return 用于返回结果对象,其为可选,无return语句时函数自动返回None对象,多个返回值时用逗号分隔，并组合为元组形式返回一个对象def 语句运行之后可以在程序中通过函数后附加括号的形式进行调用 普通函数函数传参内置函数官方 详解More info 动我试试 Built-in Functions abs() dict() help() main() setattr() all() dir() hex() next() slice() any() divmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod() bin() eval() int() open() str() bool() exec() isinstance() ord () sum() bytearray() filter() issubclass() pow() super() bytes() float() iter() print() tuple() callable() format() len() property() type() chr() frozenset() list() range() vars() classmethod() getattr() locals() repr() zip() compile() globals() map() reversed() __import__() complex() hasattr() max() round() delattr() hash() memoryview() set() 拿几个作下说明：123456789101112131415ASCII编码表查询：ord(&apos;a&apos;) 字符在编码表中的数字表示chr(97) 数字在编码表中的字符表示global() 查看全局变量locals() 查看局部变量vars() 无参数时等于locals(), 有参数时vars(a) == a.__dict__ (__dict__一个对象的属性)eval() 把字符串形式的表达式解析并扫行exec() 把字符串形式的代码解析并执行compile()把文件的代码加载进来，按 eval, exec方式解析并执行# 以字符串的形式导入模块, 后面模块章节也会讲到__import__()用法mode = &apos;module_name&apos;__import__(mode) 123456789101112131415161718192021222324all()与any()区别：all:传入一个可迭代对象，对其中每个元素求bool(x),所有返回True,则返回Tru迭代对象为空时返回True，注意是为空如[]，不是空元素如[&apos;&apos;]any:传入一个可迭代对象，对其中每个元素求bool(x),任意一个返回True，则返回True迭代对象为空时，返回Falsedef all(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True. &quot;&quot;&quot; passdef any(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for any x in the iterable. If the iterable is empty, return False. &quot;&quot;&quot; pass 匿名函数123In [31]: f = (lambda x,y,z=10: x+y+z) # 匿名函数也支持默认参数 In [32]: f(4,9)Out[32]: 23 123456In [56]: L = [ (lambda x: x*2),(lambda y: y*3) ] # 匿名函数可以出现在任意表达式可以出现的地方In [56]: for i in L: ....: print(i(4)) ....: 812 递归函数定义： 一个函数的自我循环调用称为递归 阶乘 123456&gt;&gt;&gt; def fact(x):... if x &lt;= 1: return 1... else: return x * fact(x-1)... &gt;&gt;&gt; fact(4)24 汉诺塔汉诺塔： 是一个传说，大概意思就是说把一个柱子上的盘子通过第二根柱子移到第三根柱子上。。未完。。。 123456789101112131415161718192021root@ubuntu:~# cat hanoi.py #!/usr/bin/env python3def move(n, a, b, c): if n == 1: print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) else: move(n-1, a, c, b) print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) move(n-1, b, a, c)n = int(input(&quot;input: &quot;))move(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)root@ubuntu:~# python3 hanoi.py input: 3move A --&gt; Cmove A --&gt; Bmove C --&gt; Bmove A --&gt; Cmove B --&gt; Amove B --&gt; Cmove A --&gt; C 斐波那契数列 123456789101112131415161718root@ubuntu:~# cat fibonacci.py #!/usr/bin/env python3def fibonacci(): a = b = 1 yield a yield b while True: a, b = b, a+b yield bfor num in fibonacci(): if num &gt; 100: break print(num, end=&apos; &apos;)print()root@ubuntu:~# python3 fibonacci.py 1 1 2 3 5 8 13 21 34 55 89 闭包python闭包：lexical closure函数及相关环境所构成的整体, 或者说一个函数(内层函数)和它所处的环境(外层函数)所构成的整体称为python闭包在这种情况下内层函数会记住外层函数的变量，在外层函数返回时内层函数依然可以调用 eg1123456789101112131415In [123]: def f1(x): .....: def f2(y): .....: return y ** x .....: return f2 # 内层函数直接返回 .....: In [124]: f = f1(3) # f1为f2提供运行环境，记住外部变量In [125]: f Out[125]: &lt;function __main__.f1.&lt;locals&gt;.f2&gt;In [126]: f(4)Out[126]: 64In [127]: f(5)Out[127]: 125 以上例子用匿名函数lambda简写成如下12345678In [129]: def f1(x): .....: return lambda y: y ** x .....: In [131]: f = f1(3)In [132]: f(6)Out[132]: 216 高阶函数定义： 一个函数当参数传递给另一个函数，我们就称这样的函数为高阶函数.装饰器/函数闭包: 是有返回函数的高阶函数，是高阶函数的特例 高阶函数 用法说明 map(func,seq1,seq2) 将函数func作用于给定序列(s)的每个元素，并用一个列表来提供返回值，如果func为None,func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组列表 reduce(func, seq, init) 将二元函数作用于seq序列的元素，每次携带一对(先前的结果以及下一个序列无素)，连续地将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为一个单一的返回值，如果初始值init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素 filter(func,seq) 调用一个布尔函数func来迭代遍历每个seq中的元素，返回一个使func返回值为True的元素组成的序列 map()map()将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回 一个序列时1234567In [143]: def f(x): .....: return x ** 2In [144]: res = map(f, [1,2,3,4]) # 根据说明这里返回结果是一个Iterator惰性序列In [145]: list(res) # 惰性序列需要通过list()函数让它把整个序列都计算出来并返回一个listOut[145]: [1, 4, 9, 16] 二个序列时每一次同时依次取一个序列的一个值，两个序列就有2个值，那么用传入的函数作用于这2个值返回一个值,最后这些值再以列表显现。1234567In [140]: def f(x,y): return y ** xIn [141]: res = map(f, [1,2,3], [4,5,6])In [142]: list(res)Out[142]: [4, 25, 216] reduce()python3中reduce函数在functools模块里,用时需要先导入 从初始值开始，对序列折叠123456In [39]: from functools import reduceIn [50]: def add(x,y): ....: return x+y ....: In [52]: reduce(add, [1,2,3], 10) # 10为初始值Out[52]: 16 如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：123456&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])13579 这个例子本身没多大用处，但是考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()就可以写出把str转换为int的函数： 123456789&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; def char2num(s):... return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]...&gt;&gt;&gt; reduce(fn, map(char2num, &apos;13579&apos;))13579 整理成一个str2int的函数就是：12345678from functools import reducedef str2int(s): def fn(x, y): return x * 10 + y def char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s] return reduce(fn, map(char2num, s)) 还可以用lambda函数进一步简化成：1234567from functools import reducedef char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]def str2int(s): return reduce(lambda x, y: x * 10 + y, map(char2num, s)) 也就是说，假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数. filter()Python内建的filter()函数用于过滤序列。filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。 例如，在一个list中，删掉偶数，只保留奇数，可以这么写：12345def is_odd(n): return n % 2 == 1list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))# 结果: [1, 5, 9, 15] 把一个序列中的空字符串删掉，可以这么写：12345def not_empty(s): return s and s.strip()list(filter(not_empty, [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, None, &apos;C&apos;, &apos; &apos;]))# 结果: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;] 可见filter()这个高阶函数，关键在于正确实现一个“筛选”函数, 这个函数必须是一个二元函数，返回True 或 False的函数 注意到filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。 用filter求素数 计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单： 首先，列出从2开始的所有自然数，构造一个序列： 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, … 取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：取新序列的第一个数5，然后用5把序列的5的倍数筛掉：不断筛下去，就可以得到所有的素数。 用Python来实现这个算法，可以先构造一个从3开始的奇数序列：12345def _odd_iter(): n = 1 while True: n = n + 2 yield n 注意这是一个生成器，并且是一个无限序列。 然后定义一个筛选函数：12def _not_divisible(n): return lambda x: x % n != 0 最后，定义一个生成器，不断返回下一个素数：1234567def primes(): yield 2 it = _odd_iter() # 初始序列 while True: n = next(it) # 返回序列的第一个数 yield n it = filter(_not_divisible(n), it) # 构造新序列 这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。 由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：123456# 打印1000以内的素数:for n in primes(): if n &lt; 1000: print(n) else: break 小结： filter()的作用是从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。 sorted()sorted()高阶函数用于排序 sorted()语法12sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order. 先来看一个例子：123456&gt;&gt;&gt; list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]&gt;&gt;&gt; sorted(list1, key=lambda x: x[&apos;age&apos;], reverse=False) [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] 这个例子也可以写成：12345678910In [174]: def f1(x): .....: return x[&quot;age&quot;] .....: In [175]: list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]In [176]: sorted(list1, key=f1)Out[176]: [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] list1这样的迭代对象取出一个值（一个一个的字典）给key函数处理后的结果作为排序依据，而后返回另一个排续后的对象. 列表自身有个sort()方法，和sorted()有什么区别呢？ 来看个例子：123456789101112In [66]: list1Out[66]: [1, 2, 3, 4, 5]In [67]: list1.sort() # sort()方法是在原有列表上排序，这是与sorted()高阶函数的区别In [68]: list1Out[68]: [1, 2, 3, 4, 5]In [69]: list1.sort(reverse=True) # reverse表示逆序In [70]: list1 Out[70]: [5, 4, 3, 2, 1] 区别就是sorted()会生成新的对象，而列表sort()不会，如下是按字母排序的例子：12In [173]: sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], key=str.lower)Out[173]: [&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-03-01-IO","slug":"python-03-01-IO","date":"2017-01-19T18:12:36.000Z","updated":"2017-02-20T10:30:30.882Z","comments":true,"path":"2017/01/20/python-03-01-IO/","link":"","permalink":"http://www.digmyth.com/2017/01/20/python-03-01-IO/","excerpt":"","text":"目录 文件对象 OS 对象 IO 编程文件对象文件对象用于访问系统文件的接口，文件系统是计算机存储数据，组织数据的方式。计算机文件是存储在设备中的一段数据流，归属于文件系统管理之下。是计算机中由OS管理的具有名字的存储区域，对Linux而言，文件可以被看作字节序列。 序列化的对象才能存储的文件系统中，非字节序列化的数据不能存储在文件系统中的。 文件对象接口不仅用于访问普通文件，还可以访问套接字文件，管道文件。在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。 open(name[,mode[,bufsize]]) 返回的是一个文件对象。这里三个参数分别表示文件名，文件打开模式和缓冲区大小 bufsize:定义输出缓存12340 表示无输出缓存,禁用缓冲1 表示使用缓冲，只缓冲一行数据负数表示使用系统默认设置2+之后的正数表示使用指定大小缓冲 open(‘/var/log/message’, ‘r’)简单模式，首次打开的文件指针于文件首部r: 只读w: 新建文件或文件首部覆盖写入。a: 尾部追加，即打开时指针处于文件尾部 在模式后使用+表示同时支输入输出操作r+ w+ a+ 在模式后附加 b 表示二进制方式打开rb wb+ 创建一个文件对象123&gt;&gt; f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [3]: type(f)Out[3]: _io.TextIOWrapper 只读模式打开一个不存在文件是不可以的1234567In [1]: f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)---------------------------------------------------------------------------FileNotFoundError Traceback (most recent call last)&lt;ipython-input-1-07bb2dbd474f&gt; in &lt;module&gt;()----&gt; 1 f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)FileNotFoundError: [Errno 2] No such file or directory: &apos;/tmp/abc&apos; 以写模式打开一个不存在文件，这个文件会自动被创建12345678In [3]: import osIn [7]: os.path.isfile(&apos;/tmp/f1&apos;)Out[7]: FalseIn [8]: f = open(&apos;/tmp/f1&apos;, &apos;w+&apos;)In [9]: os.path.isfile(&apos;/tmp/f1&apos;)Out[9]: True 查看一个文件的描述符，描述符是一个很小的数字表示，0表示标准输入，1表示标准输出，2表示标准错误输出它们所使用的描述符12In [20]: f.fileno()Out[20]: 8 f.readline() 读文件一行数据f.readlines() 读文件指针处至尾部所有数据包括行结束符\\n，一行为一个对象，然后多行多个对象组成一个列表 返回指针在当前文件中的位置，表示在多少个字节的位置。12In [23]: f.tell()Out[23]: 597 f.seek(offset, whence) offset:表示偏移多少个字节，whence表示从 多少节字数开始偏移。下面表示回到文件首部：12In [37]: f.seek(0)Out[37]: 0 f.read() 读取给定字节123456In [44]: f.seek(0)Out[44]: 0In [45]: f.read(10)Out[45]: &apos;# /etc/fst&apos;In [46]: f.tell()Out[46]: 10 12345678910In [57]: f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [58]: f.name #返回文件名Out[58]: &apos;/etc/fstab&apos;In [59]: f.closed #返回是否关闭文件Out[59]: FalseIn [60]: f.close() #关闭文件In [61]: f.closedOut[61]: True 操作完毕会自动关闭文件对象12with open(&apos;/root/wxq.txt&apos;,&apos;w+&apos;) as f: f.write(&apos;hello world!\\n&apos;) OS 对象一些方法123456789101112131415161718192021os.path 跟文件路径相关 basename() 路径基名 dirname() 路径目录名 join() split() 返回dirname(), basename()元组 splitext() 返回(filename, extension_name)元组 信息： getatime() getctime() getmtime() getsize() 获取文件大小查询： exists() 指定文件是否存在 isabs() 指定路径是否为绝对路径 isdir() 是否为目录 isfile() 是否为文件 islink() 是否为符号链接 ismount() 是否为挂载点 samefile() 两个路径是否指向了同一个文件 __file__属性 在上面的glabals()中有一个file属性，其中保存的是程序运行的相对路径，如python3 ../py3_training/test/yy.py，则路径为../py3_training/test/yy.py在pycharm中为什么又变成了绝对路径了呢，不要认为是pycharm做了封装，是因为pycharm运行路径永远从c:\\开始，这样看不出效果 要获取程序绝对路径os.path.abspath(file)应用举例：12345678910import osimport sysbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))print(base_dir)sys.path.append(base_dir)from core import mainif __name__ == &apos;__main__&apos;: main.run() 来几个小练习，似乎参悟了1234567891011121314&gt;&gt;&gt; import os&gt;&gt;&gt; os.path.split(&apos;/root/wxq.txt&apos;)(&apos;/root&apos;, &apos;wxq.txt&apos;)&gt;&gt;&gt; os.path.splitext(&apos;/root/wxq.txt&apos;)(&apos;/root/wxq&apos;, &apos;.txt&apos;)&gt;&gt;&gt; os.path.dirname(&apos;/root/wxq.txt&apos;)&apos;/root&apos;&gt;&gt;&gt; os.path.basename(&apos;/root/wxq.txt&apos;)&apos;wxq.txt&apos;&gt;&gt;&gt; dir, file_name = os.path.split(&apos;/root/wxq.txt&apos;)&gt;&gt;&gt; dir&apos;/root&apos;&gt;&gt;&gt; file_name&apos;wxq.txt&apos;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_02_流程控制/枚举","slug":"python-02-流程控制_枚举","date":"2017-01-15T05:03:41.000Z","updated":"2017-02-22T04:09:53.601Z","comments":true,"path":"2017/01/15/python-02-流程控制_枚举/","link":"","permalink":"http://www.digmyth.com/2017/01/15/python-02-流程控制_枚举/","excerpt":"","text":"目录 流程控制 三元表达式 枚举类 流程控制ifif 玩猜数字游戏123456789101112131415#!/usr/bin/env python3i = 0try_num = 3AGE = 27while i &lt; try_num: enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) i += 1 else: print(&quot;too smaller&quot;) i+=1 if成绩查询12345678910111213141516171819#!/usr/bin/env python3__author__ = &quot;wxq&quot;enter_score = int(input(&quot;enter your score :&quot;).strip())if enter_score &lt;=100 and enter_score &gt;=0: if enter_score &gt;=90: print(&quot;A&quot;) elif enter_score &gt;=80: print(&quot;B&quot;) elif enter_score &gt;=70: print(&quot;C&quot;) elif enter_score &gt;= 60: print(&quot;D&quot;) else: print(&quot;you are too low&quot;)else: print(&quot;invalid score&quot;) while这里主要注意与shell中的区别，python里while后有else, 即while语句正常执行完后才执行else中的语句，否则不会执行。1234567891011i = 0while i &lt;3: if i &gt;=2: break print(i) i += 1else: print(&apos;end&apos;) #结果01 来个小练习12345678910111213count1 = 0while True: if count1 == 10000000: break count1 += 1print(&quot;cost&quot;, time.time() - t1_start, count1)t2_start = time.time()count2 = 0while count2 &lt; 10000000: count2 += 1print(&quot;cose&quot;, time.time() - t2_start, count2) for 很懒什么也没有留下…1234567891011121314151617181920count = 3AGE = 27for i in range(100): if i &gt;3: enter=input(&quot;are you want to keep trying ....&quot;).strip() if enter == &quot;y&quot;: count = 0 else: break enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) else: print(&quot;too smaller&quot;) count +=1 continue/breakcontinue结束本次循环，提前进入下一轮循环break 直接终止循环 1234567891011121314151617181920212223242526272829#!/usr/bin/env python3__author__ = &quot;wangxiaoqiang&quot;for i in range(10): if i == 5: for j in range(10): if j == 8: break print(&quot;inner loop&quot;,j) continue print(&quot;loop&quot;,i)结果：loop 0loop 1loop 2loop 3loop 4inner loop 0inner loop 1inner loop 2inner loop 3inner loop 4inner loop 5inner loop 6inner loop 7loop 6loop 7loop 8loop 9 三元表达式三元表达式很简单， 这里来几个小例子就明白了 条件满足为1，否则为False12n [44]: 1 if True else FalseOut[44]: 1 成员关系判断，条件满足为True, 否则为False12345In [53]: True if 1 in [1,2,3] else FalseOut[53]: TrueIn [54]: True if 0 in [1,2,3] else FalseOut[54]: False 12345In [45]: a = 10In [46]: b = 15In [47]: a if a&gt;b else bOut[47]: 15 枚举类枚举 enumerate, 在用到index和value对应关系时能用到enumerate函数，参数为可遍历对象（字符串，列表等），返回多个元组123456789101112In [3]: for i in enumerate(&apos;abc&apos;): ...: print(i) ...: (0, &apos;a&apos;)(1, &apos;b&apos;)(2, &apos;c&apos;)In [43]: for index,i in enumerate(&apos;abc&apos;, 10): ....: print(index,i) ....: 10 a11 b12 c 1234In [4]: a = enumerate(&apos;abc&apos;)In [5]: list(a)Out[5]: [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] 1234567891011121314151617181920In [6]: import stringIn [7]: s = string.ascii_uppercaseIn [8]: E = enumerate(s)In [9]: sOut[9]: &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;In [10]: list(E)Out[10]: [(0, &apos;A&apos;), (1, &apos;B&apos;),此处略...In [11]: for i in E: ....: print(i, end=&apos; &apos;) ....: In [12]: E = enumerate(s)In [13]: for i in E: print(i, end=&apos; &apos;) ....: (0, &apos;A&apos;) (1, &apos;B&apos;) (2, &apos;C&apos;) (3, &apos;D&apos;) (4, &apos;E&apos;) (5, &apos;F&apos;) (6, &apos;G&apos;) (7, &apos;H&apos;) (8, &apos;I&apos;) (9, &apos;J&apos;) (10, &apos;K&apos;) (11, &apos;L&apos;) (12, &apos;M&apos;) (13, &apos;N&apos;) (14, &apos;O&apos;) (15, &apos;P&apos;) (16, &apos;Q&apos;) (17, &apos;R&apos;) (18, &apos;S&apos;) (19, &apos;T&apos;) (20, &apos;U&apos;) (21, &apos;V&apos;) (22, &apos;W&apos;) (23, &apos;X&apos;) (24, &apos;Y&apos;) (25, &apos;Z&apos;) 枚举类用法int 常量默认从1开始，我们来看个例子 1234567891011121314151617181920212223242526272829In [16]: from enum import EnumIn [17]: Month = Enum(&apos;Month&apos;, (&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;))In [19]: print(Month.January)Month.JanuaryIn [20]: print(Month[&apos;January&apos;])Month.JanuaryIn [21]: print(Month[&apos;January&apos;].value)1In [22]: print(Month(4))Month.AprilIn [24]: for name, members in Month.__members__.items(): print(&quot;%s =&gt; %s =&gt; %s&quot; % (name, members, members.value)) ....: January =&gt; Month.January =&gt; 1February =&gt; Month.February =&gt; 2March =&gt; Month.March =&gt; 3April =&gt; Month.April =&gt; 4May =&gt; Month.May =&gt; 5June =&gt; Month.June =&gt; 6July =&gt; Month.July =&gt; 7August =&gt; Month.August =&gt; 8September =&gt; Month.September =&gt; 9October =&gt; Month.October =&gt; 10November =&gt; Month.November =&gt; 11December =&gt; Month.December =&gt; 12 自定义枚举类（自定义int常量从0开始）@unique帮助我们检查没有重复值 12345678910111213141516171819202122232425262728293031323334353637In [29]: from enum import Enum, uniqueIn [30]: @unique ....: class Myday(Enum): ....: Sun = 0 ....: Mon = 1 ....: Tue = 2 ....: Wed = 3 ....: Thu = 4 ....: Fri = 5 ....: Sat = 6 ....: In [31]: Myday.FriOut[31]: &lt;Myday.Fri: 5&gt;In [32]: print(Myday.Fri)Myday.FriIn [33]: print(Myday.Fri.value)5In [34]: print(Myday[&apos;Fri&apos;])Myday.FriIn [35]: print(Myday(5))Myday.FriIn [37]: for name, members in Myday.__members__.items(): ....: print(&quot;%s, %s, %s&quot; % (name, members, members.value)) ....: Sun, Myday.Sun, 0Mon, Myday.Mon, 1Tue, Myday.Tue, 2Wed, Myday.Wed, 3Thu, Myday.Thu, 4Fri, Myday.Fri, 5Sat, Myday.Sat, 6","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇下","slug":"python-01-基础篇下","date":"2017-01-09T02:37:13.000Z","updated":"2018-04-27T05:01:04.973Z","comments":true,"path":"2017/01/09/python-01-基础篇下/","link":"","permalink":"http://www.digmyth.com/2017/01/09/python-01-基础篇下/","excerpt":"","text":"目录 位运算 程序编码 用户交互 第四节 位运算123456位运算：&amp;与 ： 同位都为1则为1|或 ： 同位有1则为1^异或: 同位相异为1，相同为0&lt;&lt;n左移位： 左移n位(保留左位),右边补n个0&gt;&gt;n右移位： 右移n位(去掉右位),左边补n个0 &amp;运算:都为11234001100010111111100110001` |运算：或为1123001100010111111101111111 ^运算：相异为1123110011010111111110110010 &lt;&lt;3左移位：左边110保留121101000111010001000 &gt;&gt;3右移位：右边001不保留121101000100011010 第五节 程序编码bytes、str 区别python3 中bytes、str是有区别的 bytes/str的区别：bytes 是byte的序列，而str是unicode 序列 bytes并不能存储中文，需要先定义成str类型后encode()编码 之间的转换是编码，解码完成。 方式： b1 = str1.encode()/ b1.decode() 网络传输中都是用的bytes类型二进制进行传输（socket编程发送必须bytes类型） b（bytes）只能接收ASCII 的值 python3与大多数软件运行在内存中都是unicode编码 b表示方法(bytes)只能接收ASCII的值, 直接传的中文为字符串 unicode编码，一个unicode两个字节，一个汉字两个字节。 1234&gt;&gt;&gt; b1 = b&apos;hello world&apos; # bytes只能接收ASCII样的值&gt;&gt;&gt; b2 = b&apos;你好&apos; File &quot;&lt;stdin&gt;&quot;, line 1SyntaxError: bytes can only contain ASCII literal characters. 将中文转换为bytes (转为ASCII里面能支持的格式，默认为utf-8)123456&gt;&gt;&gt; b2 = &apos;你好&apos;.encode(&apos;utf-8&apos;)&gt;&gt;&gt; b3 = bytes(&apos;你好&apos;, encoding=&apos;utf-8&apos;)&gt;&gt;&gt; type(b2)&lt;class &apos;bytes&apos;&gt;&gt;&gt;&gt; b2b&apos;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd&apos; 看看下面的转换是否能领悟点什么12345678910&gt;&gt;&gt; test_str = &apos;你是最好的！&apos;&gt;&gt;&gt; test_b = test_str.encode() # 不指定时默认encode()成utf-8&gt;&gt;&gt; test_bb&apos;\\xe4\\xbd\\xa0\\xe6\\x98\\xaf\\xe6\\x9c\\x80\\xe5\\xa5\\xbd\\xe7\\x9a\\x84\\xef\\xbc\\x81&apos;&gt;&gt;&gt; for i in test_b:... print(i, end=&apos; &apos;)228 189 160 230 152 175 230 156 128 229 165 189 231 154 132 239 188 129&gt;&gt;&gt; for i in test_str:... print(i, end=&apos; &apos;)你 是 最 好 的 ！ 1234567891011121314root@ubuntu:~# cat utf-8.txt 我是最好的！root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt ϒˇخºõģ¡root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt &gt; gbk.txtroot@ubuntu:~# cat gbk.txtϒˇخºõģ¡&gt;&gt;&gt; f = open(&apos;gbk.txt&apos;, &apos;rb&apos;)&gt;&gt;&gt; test = f.read()&gt;&gt;&gt; testb&apos;\\xce\\xd2\\xca\\xc7\\xd7\\xee\\xba\\xc3\\xb5\\xc4\\xa3\\xa1\\n&apos;&gt;&gt;&gt; test.decode(&apos;gbk&apos;)&apos;我是最好的！\\n&apos;&gt;&gt;&gt; f.close() 编码总结编码过程： 任意unicode到bytes的过程解码过程： bytes到unicode的过程12345678910pycharm默认以UTF-8存数据到硬盘(unicode to UTF-8) 一个编码过程python3默认以UTF-8读数据到内存（UTF-8 to unicode） 一个解码过程#coding:utf-8 也是指明了用什么编码读数据到内存,一个解码过程#这里open虽然文件是UTF8存的，此时要以utf8读, utf8 to unicode， 是一个解码过程with open(&quot;test.txt&quot;,&apos;r&apos;,encoding=&apos;utf8&apos;) as f: f.read() python3字符串就是unicode, 任意unicode只要编码后就是bytes&apos;你好&apos;.encode(&apos;utf8&apos;) 第六节 用户交互for python2.xname = raw_input(“What is your name:”)for python3.xname = input(“What is your name:”)eg: 想要输入密码时不可见，可以利用getpass模块的getpass()方法12345678root@apt:/mnt# cat getp.py #!/usr/bin/env python3import getpasspwd = getpass.getpass(\"请输入密码：\")print(pwd)root@apt:/mnt# python3 getp.py 请输入密码：123","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇上","slug":"python-01-基础篇上","date":"2017-01-08T02:37:13.000Z","updated":"2018-04-27T04:57:42.337Z","comments":true,"path":"2017/01/08/python-01-基础篇上/","link":"","permalink":"http://www.digmyth.com/2017/01/08/python-01-基础篇上/","excerpt":"","text":"目录 python简介 python变量 数据类型 第一节 简介Python 简介 Python 安装More info: 官网 Python第一个程序斐波那契数列： 123456789# Python 3: Fibonacci series up to n&gt;&gt;&gt; def fib(n):&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; while a &lt; n:&gt;&gt;&gt; print(a, end=&apos; &apos;)&gt;&gt;&gt; a, b = b, a+b&gt;&gt;&gt; print()&gt;&gt;&gt; fib(1000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Python 注释单行注释：#多行注释：英文三引号 ‘’’‘’’say somethig‘’’有种特殊的用法,此时并非注释123456789101112131415161718192021root@apt:/mnt/proper# cat people_info.py #!/usr/bin/env python3name = input(\"your name: \").strip()age = input(\"your age: \").strip()salary = input(\"your money: \").strip()info = ''' -------- day day up ------------ name: %s age: %s salary: %s''' % (name, age, salary)print(info)root@apt:/mnt/proper# python3 people_info.py your name: wxq your age: 18your money: 5000 -------- day day up ------------ name: wxq age: 18 salary: 5000 Python代码长相123456789101112131415#!/usr/bin/env python3 # (1)程序起始行&quot;this is a test module&quot; # (2)模块文档(文档字符串)import os # (3)模块导入import sysdebug = True # (4)全局变量定义class FooClass(object): # (5)类定义 &quot;Foo class&quot; passdef func(*args, **kwargs): # (6)函数定义 &quot;test function&quot; foo = FooClass() if debug: print(&quot;run test()&quot;)if __name__ == &apos;__main__&apos;: # (7)主程序 func() 第二节 变量2.1 变量规范变量： 字母，数字，下划线且不能以数字开头，并系统己经引用的关键字不能为变量名关键字[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’,‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]1234In [2]: name = \"wxq\"In [3]: print(name)wxq 2.2 变量标准eg: age_of_name = ‘wxq’ #习惯上 AGE_OF_NAME = &quot;XX&quot; #常量 Age_Of_Name = &quot;XX&quot; #驼峰体 Age_of_name = &quot;xx&quot; #类名 第三节 数据类型3.1 数字int(整型)long(长整型) python3 中己经没有了float(浮点型)complex(复数) 3.2 布尔值True 1False 0 3.3 字符串不可变类型字符串常用功能：字符串拼接 join()方法： 用于指定字符把序列中的每一个元素连接起来1234In [11]: str = '_'In [12]: seq = ('a', 'b', 'c')In [13]: str.join(seq)Out[13]: 'a_b_c' 移除前后空白分割len()长度index()索引split()切片格式化输出% 格式化输出%s 字符串%d 数字%f 符点%r 原生字符串，不会对\\n \\t进行转换123In [5]: name = 'wxq'In [6]: print(\"hello, %s\" % name)hello, wxq 1234# 字符串.center()方法+颜色格式化输出In [22]: print(&quot;\\033[32;1m%s\\033[0m&quot; % &quot;wxq&quot;.center(50, &apos;-&apos;))-----------------------wxq------------------------ format 格式化输出12In [7]: \"&lt;&#123;tag&#125;&gt;&#123;str&#125;&lt;/&#123;tag&#125;&gt;\".format(tag='b', str='hello world')Out[7]: '&lt;b&gt;hello world&lt;/b&gt;' 3.4 列表可变类型name = [‘hello’, ‘world’]通过下标访问列表中元素，下标从0开始计数12345In [9]: name[0]Out[9]: 'hello'In [10]: name[-1]Out[10]: 'world' 列表常用操作：切片：取出多个元素追加插入修改删除扩展 3.5 字典python支持dictionary,采用key-value存储方式，在存放时根据key算出value的存放位置，这样取的时候根据key直接拿到value，这也说明了为什么字典查找速度比列表快的原因。 由于dict根据key来计算value的存储位置，就决定了dict的key必须是不可变对象，利于每次计算相同的key得出的相同的结果，这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变. 12345678910111213141516171819In [2]: dict_test = &#123;&#125;In [3]: for i in range(4): ...: k = &apos;f%s&apos; % (i+1) ...: v = &apos;v%s&apos; % i ...: dict_test[k] = v ...: In [4]: dict_testOut[4]: &#123;&apos;f1&apos;: &apos;v0&apos;, &apos;f2&apos;: &apos;v1&apos;, &apos;f3&apos;: &apos;v2&apos;, &apos;f4&apos;: &apos;v3&apos;&#125;In [5]: dict_test.get(&apos;f4&apos;)Out[5]: &apos;v3&apos;In [6]: for k,v in dict_test.items(): ...: print(k,v) ...: (&apos;f1&apos;, &apos;v0&apos;)(&apos;f2&apos;, &apos;v1&apos;)(&apos;f3&apos;, &apos;v2&apos;)(&apos;f4&apos;, &apos;v3&apos;) 3.6 元组3.7 集合可变集合集合：一组无序排列的可哈希的值，集合没有特定语法格式，使用工厂函数创建。支持： 支持集合关系测试：并集 支持成员关系测试：in /not in/迭代不支持： 索引,元素获取，切片 集合创建12345678&gt;&gt;&gt; set1 = set([1,2,3]) # 用set创建&gt;&gt;&gt; set1 &#123;1, 2, 3&#125;&gt;&gt;&gt; s1 = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125; # 或用&#123;&#125;创建&gt;&gt;&gt; s1&#123;&apos;b&apos;, &apos;c&apos;, &apos;a&apos;&#125;&gt;&gt;&gt; type(s1)&lt;class &apos;set&apos;&gt; 项目 描述 符号表示 len(s1) 返回s1项的长度 len(s1) s1.copy 制作s1的副本 s1.difference(s2) 求差集，返回所有在s1中，但不在s2中的项 s1 - s2 s1.intersection(s2) 求交集，返回所有同时在s1 s2中的项 s1 &amp; s2 s1.union(s2) 求并集，返回所有在s1或s2中的项 s1 l s2(竖线) s1.symmetric_differencee(s2) 求对称差集，返回所有在s1或s2中，但又不同时在s1 s2中的项，即并集减交集 s1 ^ s2 s1.isdisjoin(s2) 如果s1 s2没有相同项，则返回True s1.issubset(s2) 如果s1是s2的一个子集，则返回True s1.issuperset(s2) 如果s1是s2的一个父集，则返回True max(s1) 求最大值 max(s1) min(s1) 求最小值 min(s1) 3.8 集合forzent()可变集合","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"PyCharm基本使用-01","slug":"PyCharm基本使用-01","date":"2017-01-05T02:37:13.000Z","updated":"2018-04-23T06:58:15.230Z","comments":true,"path":"2017/01/05/PyCharm基本使用-01/","link":"","permalink":"http://www.digmyth.com/2017/01/05/PyCharm基本使用-01/","excerpt":"","text":"入门More info: 参考官网 下载123456789101112131415161718192021222324252627282930313233343536373839404142434445464748491 在Pycharm为你的python项目配置python解释器 Project当前项目名为&gt;&gt;Project Interpreter &gt;&gt; add Local2 在Pycharm下创建Python 文件，Python模块 File&gt;&gt;New&gt;&gt;Python file File &gt;&gt; New &gt;&gt; Python Package3 使用Pycharm安装python 三方模块 Project 当前项目名&gt;&gt; Project Interpreter &gt;&gt; 点击右侧绿色小加号4 Pycharm基本设置，例如不使用tab, tab=4空格，字体，字体颜色，主题，脚本设置，显示行号等， 如何导出入导入自定义设置 1 不使用tab,tab=4空格：Editor&gt;&gt;Code Style&gt;&gt;python 2 字体，字体颜色：Editor&gt; Color&amp;Fronts &gt;&gt; python 3 关闭自动更新：Apperance&amp; Behavior &gt; System Setting &gt;&gt; Updates 4 脚本关设置: Editor&gt;&gt; File and Code Templates &gt;&gt; Python Script 注：其它类似 5 显示行号： Editor&gt;&gt; Geratal &gt;&gt; Apperance &gt;&gt; Show Line number 注：2016.2默认显示行号 6 右侧坚线是PEP8的代码规范，提示一行不要超过120个字符 7 导出，导入你自定义的配置：File &gt;&gt; Export Settings, Import Settings5 常用快捷键，例如复制当前行，删除当前行，批量注释，缩进，查找和替换 1 常用快捷键的查询和配置：Keymap 1 Ctrl + D : 复制当前行 2 Ctrl + E : 删除当前行 3 Ctrl + Enter 快捷换行 4 Ctrl + / 快捷注释，（选中多行后可以批量注释） 5 Tab: 缩进当前行（选中多行后可以批量缩进） 6 Shift + Tab : 取消缩进（选中多行后可以批量取消缩进） 7 Ctrl + F: 查找 8 Ctrl + H : 替换 9 批量注释：ctrl + ?6 Pycharm安装插件，例如Markdown supprot,数据库支持插件等 1 Plugins &gt; Browse reposltories (下方三个按钮中间寻个)&gt;&gt; 搜索 markdown supprot &gt; Install 2 右上解View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览7 Git配置 ？ 1 需要本地安装好git 2 Version control &gt; git 3 配置了git等版本控制系统之后，可以很方便的diff查看文件的不同8 常用操作指南，例如复制文件路径，在文件管理中打开，快速定位，查看模块结构视图，tab批量换space ,TODO的使用 ， Debug的使用， 1 复制文件路径: 左侧文件列表右键选中的文 件&gt; Copy Path 2 在文件管理器中打开：右键选中的文件&gt;&gt;往下找到show In Explorer 3 快速定位： Ctrl + 某些内键模块之后，点击在源文件中展开 4 查看结构： IDE左侧边栏Structure 查看当前项目的结构 5 tab 批量换space: Editor &gt; Convert Indents 6 Todo的使用： #todo要记录的事情 7 tab页上右键 &gt;&gt; Move Right (Down) , 把当前Tab 页移到窗口右边（下边），方便对比 8 文件中右键 &gt;&gt;Local History 能够查看文件修改前后对比 9 IDE右下解能看到一些有用的信息，光标当前在第几行的基本几个字符，当前回车换行，当前编码类型 ， 当前git 分支 10 IDE 右侧边栏&gt;&gt; Database9 如何去掉烦人的波浪线？PEP8是什么？ 完","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"博客声明","slug":"declare","date":"2017-01-01T00:47:02.000Z","updated":"2018-04-23T05:58:42.174Z","comments":true,"path":"2017/01/01/declare/","link":"","permalink":"http://www.digmyth.com/2017/01/01/declare/","excerpt":"","text":". 公告 本博客属个人所有，不涉及商业用途，本人保留追究其法律责任的权利。本博客为个人随笔所写，内容大多取自网络或个人经验，包括老男孩、马哥、廖雪峰、林海峰、小甲鱼及Python开发者，纯为个人学习记录所用.按金庸武侠秘籍上说就是本博客纯属虚构，如有雷同，纯属巧合.. 如涉及版权问题及时联系作者 wxqnote@163.com","categories":[{"name":"声明","slug":"声明","permalink":"http://www.digmyth.com/categories/声明/"}],"tags":[]},{"title":"为什么写博客","slug":"为什么写博客","date":"2017-01-01T00:08:08.000Z","updated":"2018-04-23T05:56:37.662Z","comments":true,"path":"2017/01/01/为什么写博客/","link":"","permalink":"http://www.digmyth.com/2017/01/01/为什么写博客/","excerpt":"","text":". 关于作者欢迎大家来到个人博客,我来自成都无疑不幸与万幸是北漂IT engineer ! 尤如www.digmyth.com,一个想要遆造神话却总在路上的人。 . 一个选择至于为什么写博客，有很多原因, 一段时间，一个心境，一段经历，一个情怀。在一个适当的时间做适当的事，想要做的事，没有目的，如半夜突然起来想写下一段话，转身安然入睡。 . 认知时间时间对年轻人来说太快了，2016年己远去，2017年己来临,刚好2017年1月1日,此时成立博客也许是天时地利。各大互联网产品创业思路一是提供服务优化它人时间如知识产品，二是让它人上瘾拖住它的时间如微信朋友圈。会在不知不觉中时间己去，套用罗振宇跨年演讲上的一句话，有时你什么错都没有，你就是老了。可能是因为身处互联网圈的原因，信息发展太快着时让人有种焦虑感,让人很着急，告别了过去却抓不到未来。此时我要做的就是脚踏实地做自己正在做的事情，就会让自己很充实. . 共鸣共勉欲望勃发节奏飞速的当下，如果不能够保持淡定和从容，不具有宠辱不惊的修养，就很难拥有一颗平常恬淡的心境。更无法在纷乱中理清头绪，认清自我，认清形势，找准坐标，在反思中沉淀，在沉淀中积累,才不会迷失方向,才不会迷失自我。 越是浮躁越是保持淡定，越是功利越是要适度恬静.焦虑和躁动不仅会折损你的心智，更会戕害你的身体，经过了不平凡不寻常的年头，度过了最艰难的岁月,再大的风险和考验都可以轻轻的付之一笑.有定力的人才有希望，告别2016，迎来2017，善待自己，给自己的心灵除除尘，给自己的灵魂洗洗礼, 给自己多些淡定和从容. . 记录点滴记录一个想要遆造神话却总在路上的人的点滴，代表曾经来过，有些事我做过。。。","categories":[{"name":"生活","slug":"生活","permalink":"http://www.digmyth.com/categories/生活/"}],"tags":[]}]}