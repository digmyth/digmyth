{"meta":{"title":"Welcome to wxq's Blog created in 2017-01-01","subtitle":null,"description":null,"author":"wxq","url":"http://www.digmyth.com"},"pages":[],"posts":[{"title":"mongodb-访问控制","slug":"mongodb-02-权限控制","date":"2021-06-10T01:21:54.000Z","updated":"2021-06-15T02:23:25.340Z","comments":true,"path":"2021/06/10/mongodb-02-权限控制/","link":"","permalink":"http://www.digmyth.com/2021/06/10/mongodb-02-权限控制/","excerpt":"","text":"想要基于角色的访问控制和数据库账号权限访问，那么我们先做好一个没有权限的集群，在此基础上一点点改 集群内置角色123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136wxqset:PRIMARY&gt; use adminswitched to db adminwxqset:PRIMARY&gt; show roles;&#123; &quot;role&quot; : &quot;__queryableBackup&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;__system&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;backup&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;clusterAdmin&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;clusterManager&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;clusterMonitor&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;dbAdmin&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;dbAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;dbOwner&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;enableSharding&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;hostManager&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;read&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;readAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;readWrite&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;readWriteAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;restore&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;root&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;userAdmin&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125;&#123; &quot;role&quot; : &quot;userAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;isBuiltin&quot; : true, &quot;roles&quot; : [ ], &quot;inheritedRoles&quot; : [ ]&#125; 创建最高权限1db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;123.com&quot;,roles: [&#123;role: &quot;root&quot;,db: &quot;admin&quot;&#125;]&#125;) 为单个库设置用户读写权限1db.createUser(&#123;user: &quot;user01&quot;,pwd: &quot;123456&quot;,roles: [&#123;role: &quot;readWrite&quot;,db: &quot;db01&quot;&#125;]&#125;) 其它权限示例123456789101112131415161718192021wxqset:PRIMARY&gt; db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;123456&quot;,roles: [&#123;role: &quot;userAdminAnyDatabase&quot;,db: &quot;admin&quot;&#125;]&#125;)Successfully added user: &#123; &quot;user&quot; : &quot;root&quot;, &quot;roles&quot; : [ &#123; &quot;role&quot; : &quot;userAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; &#125; ]&#125;wxqset:PRIMARY&gt; db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;123.com&quot;,roles: [&#123;role: &quot;clusterAdmin&quot;,db: &quot;admin&quot;&#125;]&#125;)Successfully added user: &#123; &quot;user&quot; : &quot;admin&quot;, &quot;roles&quot; : [ &#123; &quot;role&quot; : &quot;clusterAdmin&quot;, &quot;db&quot; : &quot;admin&quot; &#125; ]&#125; 数据库用户查询123456789101112131415161718192021222324252627282930313233xxx:PRIMARY&gt; use adminxxx:PRIMARY&gt; db.auth(&quot;username&quot;,&quot;pwd&quot;)xxx:PRIMARY&gt; use db01xxx:PRIMARY&gt; db.auth(&quot;username&quot;,&quot;pwd&quot;)xxx:PRIMARY&gt; show users;&#123; &quot;_id&quot; : &quot;admin.admin&quot;, &quot;user&quot; : &quot;admin&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;roles&quot; : [ &#123; &quot;role&quot; : &quot;clusterAdmin&quot;, &quot;db&quot; : &quot;admin&quot; &#125;, &#123; &quot;role&quot; : &quot;userAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; &#125; ]&#125;&#123; &quot;_id&quot; : &quot;admin.root&quot;, &quot;user&quot; : &quot;root&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;roles&quot; : [ &#123; &quot;role&quot; : &quot;readWrite&quot;, &quot;db&quot; : &quot;local&quot; &#125; ]&#125;xxx:PRIMARY&gt; db.system.users.find().pretty() 开启集群认证需要keyFile,所以创建keyFile文件，集群节点保持文件内容一致123openssl rand -base64 756 &gt; /etc/mongod.keyschmod 400 /etc/mongod.keyschown mongod:mongod /etc/mongod.keys 集群所有节点修改cat /etc/mongod.conf1234security: authorization: enabled keyFile: /etc/mongod.keys clusterAuthMode: keyFile 修改好配置后重启即可1# systemctl restart mongod 总结1 keyFile属主属组及权限是注意点2 权限这块理解好各个角色的作用域","categories":[{"name":"Mongodb","slug":"Mongodb","permalink":"http://www.digmyth.com/categories/Mongodb/"}],"tags":[]},{"title":"mongodb-01集群","slug":"mongodb-01集群","date":"2021-05-10T01:41:54.000Z","updated":"2021-06-10T09:14:24.081Z","comments":true,"path":"2021/05/10/mongodb-01集群/","link":"","permalink":"http://www.digmyth.com/2021/05/10/mongodb-01集群/","excerpt":"","text":"在mongodb集群中，只有主节点可以读写，其它节点可以提升为主节点后才能读写，从节点只能读安装mongo数据库12345678[root@node03 ~]# cat /etc/yum.repos.d/mongo.repo [mongodb-org-4.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.4.ascyum install -y mongodb-org 修改配置文件参与集群配置123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@node03 ~]# cat /etc/mongod.conf # mongod.conf# for documentation of all options, see:# http://docs.mongodb.org/manual/reference/configuration-options/# where to write logging data.systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log# Where and how to store data.storage: dbPath: /var/lib/mongo journal: enabled: true# engine:# wiredTiger:# how the process runsprocessManagement: fork: true # fork and run in background pidFilePath: /var/run/mongodb/mongod.pid # location of pidfile timeZoneInfo: /usr/share/zoneinfo# network interfacesnet: port: 27017 bindIp: 0.0.0.0 # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.#security:#operationProfiling:replication: # 开启复制集 replSetName: wxqset#sharding:## Enterprise-Only Options#auditLog:#snmp: 复制集集群基本步骤12345678910111 集群所有节点修改配置文件replSetName: testSet 并启动mongod2 在需要作为主节点的机器上 rs.initiate() 初始化配置3 在主节点上添加从节点 rs.add(&quot;192.168.1.10:27017&quot;)4 在从节点机器设置 rs.secondaryOk()， 用一些命令测试验证集群正常工作rs.status() show dbs;5 在从节点机器上添加数据测试验证同步情况 use db01; for (i=1;i&lt;=10000;i++) db.students.insert(&#123;name: &quot;student&quot;+i,age:(i%120),address:&quot;BJ&quot;&#125;)6 从节点进行查询验证 use db01; db.students.find().count() db.getCollectionNames() 查看集群状态123rs.help()rs.status()rs.conf() 以上三节点集群配置，如果在你的集群中资源较少并且其中一台主机不想参与集群复制，出于节省资源目的，那么可以让第三个节点成为Arbiter仲裁节点，因为偶数节点复制情况下，脑裂情况下无法选举出主节点。 那么在上面集群基础上踢除一个节点出来作为Arbiter仲裁节点在集群主节点上面执行踢除操作1rs.remove(&quot;10.10.10.30:27017&quot;) 回到仲裁节点1234[root@node03 ~]# cat /etc/mongod.conf | grep dbPath dbPath: /var/lib/mongo[root@node03 ~]# rm -rf /var/lib/mongo/*[root@node03 ~]# systemctl start mongod 再次回到主节点添加仲裁节点，并且可以在2个复制节点间主从切换测试了 123rs.addArb(&quot;10.10.10.30:27017&quot;)rs.status()rs.stepDown() # 降级为从节点 手动调整优先级触发选举，优先级高会变为主节点, 需要在主节点上操作 12345rs.conf() # 查看各节点IDcfg=rs.conf()cfg.members[ID].priority=8rs.reconfig(cfg)rs.isMaster() 总结什么情况下会触发选举1 副本集初始化时rs.initial()2 从节点联系不到主节点时3 主节点收到rs.stepDown()命令时（主节点下线）4 某从节点有更高的优先级且己经满足成为主节点的所有条件5 主节点己经联系不到副本集的多数方","categories":[{"name":"Mongodb","slug":"Mongodb","permalink":"http://www.digmyth.com/categories/Mongodb/"}],"tags":[]},{"title":"Ubuntu k8s for  docker","slug":"kubernetes-ubuntu-docker","date":"2021-04-28T12:21:41.000Z","updated":"2021-05-13T05:42:46.392Z","comments":true,"path":"2021/04/28/kubernetes-ubuntu-docker/","link":"","permalink":"http://www.digmyth.com/2021/04/28/kubernetes-ubuntu-docker/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"consul 基本使用","slug":"consul-01","date":"2021-03-25T01:38:08.000Z","updated":"2021-05-20T06:12:29.114Z","comments":true,"path":"2021/03/25/consul-01/","link":"","permalink":"http://www.digmyth.com/2021/03/25/consul-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"ansible awx","slug":"linux-ansible-awx","date":"2021-03-15T02:28:54.000Z","updated":"2021-06-24T03:39:04.000Z","comments":true,"path":"2021/03/15/linux-ansible-awx/","link":"","permalink":"http://www.digmyth.com/2021/03/15/linux-ansible-awx/","excerpt":"","text":"wx安装在kubernetes平台，先在kubernetes平台上跑一个operator, 这个operator其实就是一个kubernetes 自定义资源CRD，然后再跑一个awx CRD 实例，在这过程中需要PV卷 前提条件，利用nfs 提供PV卷12345https://github.com/ansible/awx-operator[root@k8smaster pvc]# showmount -e 192.168.1.10Export list for 12.19.2.10:/vols/v20 12.19.2.0/24 pv yaml文件定义123456789101112131415161718apiVersion: v1kind: PersistentVolumemetadata: name: pg labels: storesys: nfsspec: capacity: storage: 10Gi volumeMode: Filesystem accessModes: - ReadWriteMany - ReadWriteOnce - ReadOnlyMany persistentVolumeReclaimPolicy: Retain nfs: server: 12.19.2.10 path: /vols/v20 awx-operator.yaml文件1wget https://raw.githubusercontent.com/ansible/awx-operator/devel/deploy/awx-operator.yaml myawx.yaml123456apiVersion: awx.ansible.com/v1beta1kind: AWXmetadata: name: awxspec: tower_ingress_type: Ingress kubectl apply123456kubectl apply -f pg-pv.yamlkubectl apply -f awx-operator.yamlkubectl apply -f myawx.yamlkubectl get podskubectl get svckubectl get ingress 界面访问1234url access web;username: adminpassword: kubectl get secret awx-admin-password -o jsonpath=&apos;&#123;.data.password&#125;&apos; | base64 --decodegVEQRpzMtaFqLTung4TBF4b7HarECM7L 总结无","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"sysctl TCP优化","slug":"linux-sysctl","date":"2021-03-15T01:43:54.000Z","updated":"2021-04-15T05:37:59.492Z","comments":true,"path":"2021/03/15/linux-sysctl/","link":"","permalink":"http://www.digmyth.com/2021/03/15/linux-sysctl/","excerpt":"","text":"内核参数优化1234567891011echo 2048 &gt; /proc/sys/net/core/somaxconn 每一个端口最大的监听队列的长度echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled 关闭透明页功能vm.max_map_count=655350 限制一个进程可以拥有的VMA(虚拟内存区域)的数量fs.file-max = 65536 同时修改vim /etc/security/limits.conf* soft nofile 65536* hard nofile 65536* soft nproc 65535* hard nproc 65535* soft memlock unlimited* hard memlock unlimited 每保持一个TCP连接，进程就要创建一个文件对象，约占内存3.3KB，4GB内存可以维持长达100万条长连接，客户端发送数据的话，还得为TCP对象开启接收缓冲区，这就增大了内存开销, Linux系统里，系统级、用户级、进程级都有最大打开文件数限制 系统级： 当前系统可以打开的文件数，通过fs.file-max参数修改 用户级： 指定用 户可以打开的数量，通过/etc/security/limits.conf 进程级： 单个进程可以打开的数量，通过fs.nr_open参数修改 1234为每一个TCP连接Socket分配的最少字节数或说是接收缓冲区，默认4K，最大可设8MBnet.ipv4.tcp_rmem = 4096(为TCP连接分配的最少字节数) 87380 8388608net.core.rmem_default = 2129922net.core.rmem_max = 8388608 123net.ipv4.tcp_wmem= 4096(发送缓存区最小值，默认4K) 65536 8388608net.core.wmem_default = 212992net.core.wmem_max = 8388608 1ss -n | grep ESTAB |wc -l TCP活动连接数统计 12345678910111213[root@node03 ~]# slabtop 关注dentry/filp/TCP/sock_node_cache指标 Active / Total Objects (% used) : 3721737 / 4145714 (89.8%) Active / Total Slabs (% used) : 125168 / 125168 (100.0%) Active / Total Caches (% used) : 95 / 131 (72.5%) Active / Total Size (% used) : 821348.16K / 878889.63K (93.5%) Minimum / Average / Maximum Object : 0.01K / 0.21K / 8.00K OBJS ACTIVE USE OBJ SIZE SLABS OBJ/SLAB CACHE SIZE NAME 1928862 1578283 81% 0.10K 49458 39 197832K buffer_head448077 447905 99% 0.19K 21337 21 85348K dentry （指标1）298544 297412 99% 1.00K 18659 16 298544K filp（指标2）288966 288966 100% 0.04K 2833 102 11332K TCP（指标3）233070 233070 100% 0.12K 6855 34 27420K sock_node_cache（指标4） 总结慢慢积累吧","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s基于GitlabJenkinsCICD实现","slug":"kubernetes-gitlab-jenkins-CI","date":"2021-02-21T02:51:41.000Z","updated":"2021-04-24T14:10:25.467Z","comments":true,"path":"2021/02/21/kubernetes-gitlab-jenkins-CI/","link":"","permalink":"http://www.digmyth.com/2021/02/21/kubernetes-gitlab-jenkins-CI/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 U2FsdGVkX1+3HrcCqAOBqQoh6eMjVqkrWVDgS+mRfF8gjy7FEAKBqQnq80uSqQXeVuOXbpfN/1E2EsZCgE6R8gcqA3BQnxHVQ8rVJeZLM/r/Cxu8Gb6i1E0bj4dce8ljsSrHgD5VKiP2A1emfo+ri4VKrlyOZCdYxhYRkZWugZDpYz9MNGoKJ+LZWhFW9YLqLwQPUCbhLsYmrmlrI/TEnuvvppLveHRiRIQfsRpgGZsd5PJZ6vUIAhaq7q+0KYSESV8+LMwS2kMxpOjh3/xf/5WJb4RxW7cvIzIyWeitMvVu/HHd3fwj1s3k4tC9jCd7KUYFpcmvTgG1kNAJOuHarImzX/oxG5ns0Btry5rIR10tFIVgd+IorCzbj0q8lwh2XZ0psTYAKWJDFEHPdxjTqoe23DtmvWReeh17BDYrFyDPc5JxAdd5MmJ2PakyCMfwjD2ODHk8DIQzUxFuGBnQvoIKy61jkHY4cIl7yBCwIojmFcqVj/uyr87q36azxqTWLXlPARSvv0v839UU9kzDgzRIgEjx4JoDyz45lZK1MRtttsY3LGK//JptybRJUhDwSkOvO7zfIsCLXZJDAYT7GlAxlPuMAbiVuMbse4e5tFV1jdI9V4fe/wGPPBbcf1MgBbYWn0pR8d/oywi/iEgPh/RqeOyssX8UBy6laskg4SDV0ZrrTQZAAg9sx0E8WjfegXAPaPEEl/IkMfun9lTrRzzlvAmiFiMFx3zvUTft/B98SSRFnoCmMLPXaE1+nyB8gT7RXxqINsl/4c3sllsIJ2YgCQ7nuyhAzghlICJlv5sjN9CPH2QrJnYB3nTdGM+jmq6u1K+kTIaQv1KH7KUfIoLBnVsO3U9sAgJHZcPAr3/1We/YOleyjriaJqUrcdrgQjJRxrBmkLjMDSFrZqS7R59HZQEePpG6N8P2tRYSpJchCtXm6Q/KJ5D5vk7neZBB7or/hy0da7hbYpCltZpwbds1xMMWczgbU+p+HiQhvxuI5C6OTJ0m6qCwylt1AZ7VMvf8/tueL63VwuA3p9kfCjt/AqHMW0QASK7SObuKJOINybQy0U1Uq/tvlPKZlyujH41WtwCaGFcn7pjV4E3+dv6WEy3SFhaiduwjI2TgofTcsd2nZeV77WRyI1DYB1T9KR/oic2CYDZ7HKJ+1wmvSB6+RwthTohz5CXhox1xA0PV9Gh7cSYuE3fl0smy00n/hkHZjvk+6UlaFTW/V6DEgSWt7npWoLYZwRPyMBnPhCiJVYAkmx9zqQSd5XkgK0uISYv7YH4GE7EzuP42RRSJ52X2169JZkuqrfxaucfS2hnNrbOXO2DBooi8phCpA/+wdwG/5+bsQnrqbzb04fSmIaDCFXzJSzKpCsUWwLxjt3QqG6jUmMMSliQ2NZRyZ2OHfVENuID23c1N3G+C+oVwblpoxVMZZr4fSkxig81m0JarpFI5LEMBhdUFDIGczI9hwwUU4C4rLfjYbYqmbQweoJaWrleJXA93jT7gLXP5H01g+UlmyqUyRwmrJYymo3lIvx+K8axgFzhTAQI3KM9c9m8jUUgQWLbgViLXqNMpVPJ/GznnBa4kGB6bgI/tW6hefmdM2uMiuEjrIEy/inCBBJrKek5MxETEmCSmq9F8FQAZGNCVb6aYt6WDg7eq5gtwMQKqVvIM7DJvHiLduJLXflnbkFVC9Udyu1LmBv5tWDu7uTC4Wo7Kv/eLFkvZkMLsPzVTJwWIj36C9ZHbVaz6xAmKBgL4HZSbGBngndtcB9UvCWQykQMq3wTbz4+wsnYMa0mlBgJA+tvK7oUDOj0gZwEXH0nr/fzsBcfFeTBsb6+GMMxV/gsKlcx7rKDYbeibx14DI7Tx5oFXuZyhbfnjuPu6bQUsHQ/wiNDoDTm7YKDszJXkY9qAhGSeeLZcIWN8X8U8bcogVypWy52qcT3zmZYlvt+p6zMoObwhU+4Zm0lOJJjunN/Fhbwv6BUF3przn1Xg5TrhhHbAX68a/JWbZrUOESFLIttrXJMSvSyoIt2ARXwMwKozKoKw4+PNfn8jLYC0UT3sCGV+7MJwCLWfpU4J/BNkqR0ly9FIz5/AFlHxVJlds2Jgl7tQo+o86fKqtuN1+DxwK9lcdcfTNQn2Z9Gs4f3a1cjYBzxtjCCkZYN0L/ROW+Y/fEqKIiaWLjlTzC9NMq9qLJbJGN4Pyul572TqLKdgyy3KzWdmqK7vgRbSX146S7fD3lCfsvUA3xjngXO0N1eD8PTInxaiGesnYpezpdT1nqIqU0A0pwzg+fxWjwTsL15rP3hCni3O4YbJ+AP/b35tHk5mGV7tbTbsYbQgt23subXp0miNBVr7qc4PW1+Jbpsx9ZjYj52W7TngQdYdPbbHIsXjbkHgUPnhfrV1grm/lr9Cu6zbyJs8YTXSQbAtOgebgRrdLrsrYt+8stPfXGwR9tD0xD77X6jhC6i5I8delYU2FLInlsh8sl8iMXeB3u3/V5Pod9PzWiuGQt3+na5HMuS9XYfdKUAD4ZKq/WIoiaAyZp9FvwpyePd8VoJsHu2TwWQ+kMifjkbUssogxYQZoCgUT7zONPrUP20eIDHc7CAiIMIOab/YsFKQC0H9gzkIascWpmspotuIeWVeN4nwtrrHOqanDFcCrxCxFipHkWtNiARLoWsmwEaHovE8tSvorj77OZQB/akIJn/kPTsGHso+fnx7ovdIDSUFxmLH/LSjxWdcIuWs57WEOTJJ1P9W35ulUYyiWEjWx5oG7YapfYjRwnVKDg/ZUD3LdY3U4sQHrAOd0yQIMXGdxywXXyUFIs8q1d4IHPL1RK7WQuSXg3ey2hbC/eTKZrZUOrENYXwi6U7w76LYU87aRzDJFZJbI/eHcoRJ3G+8+WyJzNhI3LCrztRV735HQpEPZhZ/BkOaBcPrJDs86QV29cKacA+vChL/oJitOPyf75uPwYItOBHzesx3BCsDpfyp4V8etS7zTWTE4N/RVBVlTrman89Mz0nJjbFGTs4w/EOFDid8uAQOQud02qvRT2DeYp0atTH3IW5ZscjPnMmV96FOy6uHwi7t2bDQ8uFsxjRXsJiOo5y7orEltwbiWbPGo7inXNMjZw0Ecao1pK/zHpaOMCpw1zGYr8ownYCxWu6Hg7U4LkAzlgJFS0ufO5tB8TvjZZPCFuJoX1lBRaajhnepWdjl1QgMfpU2+mraqFL1AZ0mf6n5ggHnhKlbbYtQNb5+i+2PiCvU2XxL0b4a4NC3+bcsfo12oiPLHjUh+L7embnvhuXYqCyp2SBS9/Rz/9vIGLjf961MoTxiAsfxmMBH9g4BXP5wkxZNRL9lwVDh5FvUX12nlRT3Yt9CX4P3TEtdFAFU6VMrwIDgwwIihnHmMNtWq//LlP0NtH64gQuVLpFurle2FOHf/4yRAh2S8UyVv+SRlD0nuOcNLpR+69nV9pkRHJCQnQ5jNmcKsvj4Ozly6kcv6Q2oFmYcFNhEUk7zh/k+gpUHNf2qBQG8wJsmEwM+sTk0d0DjzhyqixsXJvUy7OZxn6stoOoGXaX0IUWqMwDwUKbVka7KBh7pLIdD/8hDCxyb0PssQwhyirquXEEv54S/hCtSxJUwDYyRcm6N5Mzdn0zkG2NkChEFeFLNmelmpmef3QYR2oi2WdqIXNkb2J2BWVLclHj10r8WW2H8tDo7vnaZKgdktrU1FYK7GwLfiPO/9i2/QOMPYbtCocXWUoTdUG02I3XSDhlvN2t28KLNn8Ph/G04hb67ber0VVk6h0rPvXFO4wAGr3PfuQuwFucwISrRW2jB+UZ0dOl1UQf/yesf7KyQKBfcEGcGTULBuD6IJbbLA+hnE9qGxHCGMrJBQlZQmALRIhvi5YVOUyQg1rVqbWhVnTTt6bsVUZcKhmKGd/1FxTlo9UFPC5ETF2BBgpRJWbWGNUlu82deCtDZmvEpi9Y/wNtrjwPA1eDbh3dWd6QjiROZOsr6ybeYPv2PqVbtTR93JsKSF07Cg4IFlYQI3iNWa7MtBF7c0vrHns7GGNuVBF4dI8FEtlt8SRA7wvEMirWnrCaufSeiL21fmKgHV7IB/wYVBy6XIoA3iLwXnyp7il/obR6efld/R+KY125Os4mBMiefR8RjHXwO0qsc3xAK19c+E6yoiwVUTRD8i4FGqVUngDqFfDywES9YaBDEID2WVRb9ElrJvRWMEerN/0GZWk0w1pGhRqVZpfQB04c3eZYIxeAyZZuzHU8H49mBsHUedx6owZzJiLHwUcmxyD+GyIxeKoP+zLC3t7hM13c4oYMklrDvmgCKD47B4vXRjZLTUl7Agaq2yGyS1V7BOfQVyyBANWwnu+JxLIPOKN9bawc7vpJqm+CoW4Sp2EXcwauF2+qfaqS7I1XC2q78Dfgtg/zAfPlYeZvSARvRMf5XDrpagGri3+wsd54Isvaa270ed+bQRs8PZvUQU1puizjAb7Y/QXesT05KlvgaXIZ/00DayzPRRk/2o6avDYoQP3zlrxri38BwGoKslSKNB1/aN+J9BPU718lI+BWHcTna80L1EldBoqNjEUzwJtcAZeia8s/wlLEZSV+TRPuQzV385hr0B0f0SLBXp66HUGViqnWL0kRecl+IqDcZUPGQw+ikCB898ZwHgmonjI6WUVXxsPw34VDPoVwqAyiip5XdK84IFUd9uPUBlQgWGzC0jDLK6DgdFDIhTIvIBJuTg86ccxJ582eAvIWI4FJlv/kEw61S6yTY9T13OOG0puHX+yxZbtvg1FpEBE/9XWPIYhNpIy8HOejP8aLTfZfAnb2dwGMLxhkBH6hCQxAm3biZIBUGc1s/IGUjFWIRMse1q+xZqO+sr5hvTOHPaDYdH9IqWJgfuKCb7cRyb/3wF+lC4/rHWpqxNiSumIge6rYnh/3QmppC7so3GeJUnxTH/cie6YhSoxOkdRFrUQvs9USOpVmf6QeLIfJTnulVmEPSJjQGiWOnuN7RXgk+/Lyk6+2omXNTpRRjudZ1Ze/g4L7wj/PtrEtNAeYUjMAiTIN4l4OkohNmOB6oKn7/kCHzIbTefIKaYwE9VjkgRPfCMROCEOSZ5OuPksOUTfwua7jNuLHTbHzPCliOc0JSWgtrNfbzr2kPCiSBAs2axvkA2l1oAM0N+X3zJNnVqSi6FWf30YStRmYrHAJ3cmyn3RC7AdxuoJMjD4qLW1SscniGUmRv9oBQqVC7G7vXGJpdFuZpcJy3Qyx9CElrxNtfEzLdYA8y5+XgyD7neIe14+NWHbFC7/P0R00I99bM6aZ5sfA08BJJfbMkUHpsYhTyK0jC9Yd0UvcK0I9U20qXpyZVK1DSeJV78GXEZEfExU6eWc8eQPlXGb6lAM5C7T2C8wDer97EdnZbTYtykhvzO+ch5VR2PjtEGpVGOUdsggAvBW+Cf3h6yo1c4kxad4Rg34bkGCUGpGxp6tXaNl6I09eWiZ3v6ioR8SkSUI1BK18WTn/XTzNQGKbVYLkcxnEKljr9eReTUo+yk0AtudnCtQjvZlDBl4rtbbPJ1dXYyVadhd4rss+K0/rlRB2TXOzYgqoTXU57W6u7a57bGegNBGxrsaV5ugWlzGBh9FVrGxde4m+TalFLMFHqelEF+o89YrzWpGAZz6gcke1r+z8kcbN9ubmQ44YMmNHtosHtz+CQ2MuPdG1whLfdhuiPQdsj0+6ftamr94kviOU2SJPx+SlnMGkZkdnCTF24CyD2IRfuklmpa0Bzbz7K/3R6QjfXRwZu35eiSwhJGQsAsQ/QWHzpjc4M7gINE18F/SqWvx2d4MsLmodbx8iPI02fo7DboOCRc/MmduQOEIDsyt20HAvRSjvcBnp6UZqZ8D2Tz5QkojXN6hj9nM0FGLkmZNkKVrW+yhSBUOnjXYNSxkJzXmyP/FWjKmp8+KphnVSY+hxB1MEevQWQVE74P214ntdWZ7feeAW0SXbQx3FZVIlf/jUlT52bbYlN8glve5BRwUJSrf1r73R9uj9PSk2PAXoKZV08PtrMWWjsjxqcGN3fF1rGmI11PCrD0GBijJLqTTGIeCkGCEPaIJLYJ3lNM/exbDO/krRvf2BUR8kgUDS/KuCKHf2ZDcCj8eIQMYYWboJ7K7gDDTZmXqNIl/ESoiQuOjAGq/FpPmsTFYLTEI158jGsQUisy0OAsMbxtroyiUO+kENt/zAGYf/92a4Qhivr54BIb/MNfCgMuqkjoCKVbVU+UOlbGNNpG2YU3zeJgbm3doRdHr6Zx3bugnbVAJwNa+MVkY2AqKldpMQhAAlGJQzoVd8fQKwkYiAzvJa2u/R62gSb7HLaOXg0JKIc7Mz6QbmjbM780SVotJcpCTqnpOFKZw6qP2vUoSMsXUCBclFrUcSiEXLjMRLdC7K9/cv/212+5h2X2WkDpJanbE2OF+7lSF1iolo2j/WNpPZN2siLEuN2eSD/TwG85KQpNojzpFZmyz9YjcvPK43Cld5I3CxkmZDm+eZuvQ+x0kyrkB2R1JWjQeoliaqKnmR+QA0GNa0RCS2McHIICQyPlCghqtYKQWJPSsb/g/33nmLPXRxdX4Y/x2yGxUjmtTMJOayUjAJEVJTNqABSjNOB4/fQ3miNXtkPcvdKZi3TedGpt3CtfPBiZj7Nkz91prJ9f6pwut4jvxn5tE9MadpbNuWckYELTqXY11xIUTXnJd3QFikBE+NIf4/TnOzEPbjwf6kv9e7BGJHdvuQvvd9lDnK/C1WmipoY+R2MxMHzrS7fcobBV3iFnlgPyjasoUy6rMxcTEJA2+QosoWqaZaKeLAPXsBZsiaomFCEj93G5RUGmEcqMPprGnpUk7gi/qASceMIaFok5ttaBljU5uqpHY6PN0OuoJP52r4B5Pv14UA7yooO5/QLyGN2GKN0XSgD/ksjW2VYbpoG2czt1HcEmIdUJXo6JL9YHWbifIkiFuHP43nJ82D9kdjBlT0Gw7P5V/uJzVTXGodXHdPOzjAoiS8WvWUDbJT+71KE3B3s7Q7ymoFVlcDr/xhbgd5VicCq3TrZkAyJFnLybW+rBt/ui0l5cA7mORyknczsnaredptFNcBBK7aemCj+5lT9BZCBdw8GaJhTlJ0UKp7oYpeOX1zzdpvB+yIbcM4adKaxRKaRNOdiDY9Z+yy5Er4KjB4Wfxu6yMXVy+b4fXwAQ0WUWOjoYrYjSmTKM1eG0E4ac7wNaLSklai7RFNKB3DUJuAy2lc68XxC3XfJVcqq28UveAS/juDH4bVbJRmD6UTsfA4brvA683D/0w2XALKQT+WAxeOegtzTS90TljY8uMGendbXhEoHYTnAbi5sukxVHlHlf1io0dEuY21O3a+/DL8YmuBcQQ0JlKZH8DFmVEiBp2+e5zEzVLp/U37eErNvWhkD+21AQcIBg5k+gxAGw1z0xkgt6L7hKePWvO/u/2jb/yEE6JLEMNZ0lCZHdnFA+XRDhjr5AWByotiJjRH8YH9qAT9ozhJWeufv5pKmFtu02Cj3U/hk208tMti/1eT9tuTEKArg7YRroKDbdhe51Y3kpzBdXds8b7q6BuDJ7j7/J6o1WaLtxabYU9ydq4+Nt5m2cye3BPApYQgYYU3D8IJUu4GyIpsO2o671mH2uG8pSCYFn3JbYmMGABXDURypiPxY9tm6k6V1pgsQirOMYExyOuQ0qFmYspj/54dZYbH4C5FjT2n2JvzxdJ6zcHaPJe2bsDK9BAkENQ17Nz+JyuGb0kpy422ZybOfLJlGb42P+wq1+znhDeKUv051BxGJ7LeYU6ajfHazhM5v4qU+AHAUqCsoISs09iXGSw39JeIRV5lNVYk4FbNEZNw7xeyYQzX1Z2ccTvq/lMAu0W8EsdecQ+cd42WJU4T1Ab/19IUTFAAGXk5iYpV4YaGHqmfekgflgh8bHUACFTlGqWr6xudjC3iw/1q+8alo/0uhYmKr0tSL85puaO+mVdPckfD+XpyMMFKfSU/hV0gvJ0G142AtMhlRhE0jutA8/BVg/e5QRVcqFDLUTguNScHCdst3BLwk6gOSzrLoDPNT4HZATRCIBXQ3AsuZynBGcwk/e38Aez1ur0uoIclqBOQb8VKE27HZhNxpGOYESWuwk7iYe3qXwpbups+9QwznL8x33ymBTk4vGofgcO7ecFQCv/rhT5ZxnMCFlKA11csa6y18QCvdMFA0eBtJnkpktdaV6Dtkby4JQOPAjNTJCcaj58DZSz0ysjJmTgwFRmu6Xvm8NgM9Ini6UXdFRBgiMDSjK/Tk0RzUntL/vyGaiV7WO2ZyD1qp9ZlAYI7q4rcuI9IBXvrJjm+3o3E5aDy7o6jJ7IabnsXRPC6G/RSjKx5fCPY0fVUxMaayi5mFviiW2N0HQ9DP/E9/UDtu3oeo+Z9nqINXZ2MWy9WnivKG8cvigE7DkCBNcROyFVe1YYda6IIzDOCCPl4Qcsl3utYtap9+C5Hyy66ImEGnZ9EKF86RX04Hfdpkw59Sos8EBKePxfpKTDg+BpffJ/AmdbbuFmpKzfB/i7qVQh89YFR5Nivy62tAaa1dTPGGWhTpul47Lpw53OMX4owNhdlv6rjZp9rqtfAb2C2EmGpex9437mnTVE/8dNEL9wT1kGM4TYz6Pb5oqRo08fiGiJO/SZERh4GLdRlGw1NSR7BA1yVajKwgJCb5CvTkKt92ZCXrhf2aWzmq3EJJNKm7Ub/6bvjDhXA/eJ7AbpbesT62K9+MVjchd1K6nuuhYTisS3pNRzFU0NXqtONQSX5mAukvN5KC804sLYEcgTassa3RBkA4StQZVD7oIVYExIUd/m3TmMlSSXm3nMTduARB/o5lkYyvLoCuGIbKMTT7GuK+S9iadDpHMHjJtbqfao1za2UygAJ9mbE0OFNEsF3ZcURLtz3d3GgnzwQxAe2e9raVTlOSLQI6hU+Q/l2PagQrsmLS65sV4oW2EmQvNguNoroEKvc01hl4gp57U6avcsMV1YnXat1cQ52D2WTzCx1Dhy8atYvFvTXa91p0FG7jJSHBeLjocTtxMFOZ9IBcptxxtVn8rPwyKkeF+jh8LGRsrNs/uS88OmG5ufxA8BOwTdUry2wYymWf2UYvoFGf1vLYlGhyJBtWwPovABGHmyZL57HaIv8IIW6Agszgjs24rxNcC2lD7T/Qxwi4h6piiEeKZ0AaIKftqKfmZ5tidih9ZIZw33N6NDn/JmsU8RbovA4VdpaOlP5cPwU9LHZ6wGaKwEnpZRPUwYR8Okg+QhfW+tSCWA3Tm6dyl921Dmhj0BJy9j/TAHiu2ltQfEumcIylRwiQs3F7QTadS4+ZVtjixu0pbarYI5MBZgAgFypiAQLSL9aqFXCtI/TPfN03DzEGmMXpS2T0D8pstzvsJKUF3ars0Zsy4xH2x2arLR3ssqAdTs4Mz4f8t3AAquhw0osdW0n7gBIeGNnZEssFRjIckBlHtFkrROTSrR41vOxiid726dNJbSs1Jn5K1IQV+OHh+NjPznlMWW7IysdylJcMneR+TPCUq21mLxWUbfDAqEuTHFDWvbT2CyTP+vbsPKn7YrotMHgoWbbW57sX35BsJNJXapP2rQAvP0AXA3/AhbG65SIh1IxFzX9HbJpbAdBh7q2UUHvzNfrY5MSoV9rIMsE9p8e0DP+MNZuZzVdDJJKPwvsfwwLyoMRniS1Pes1RSaUHuj/+lmRIMafwKFnzo7xMBsIKKfuyFJOBfmXrpbCl5u3Fo1xpdYRwXixf8UpnVvKCxmCpqKVx+0vfmATwmiJBn3x0nUCzoCYRjoGoXh31WStzDXtC9MU4ZfIdD0IdB4WC95qJnOmcC1zD/1Ao6/gJnx9Gg/sk0Op8VUM4kGf6PLO7/itLjHk11DP0q2kTFQWwKc2yXsJEh3gUgZYLDMCHDhgcDT7uqfY1z1fS+mI23LSctN25Hi97q91MFncN/CqGHbxofj0GeZury2H72DaE8+lB4n+5JAOzEW6Fm5Rfn7ko6tp57RihJt7bNXGfCTzggmdNFUYIwxpcMuYVUHoGo7kyX7iecJjVI76Kxhr4oa6TbGGuZ23EAO0CN15pnvQfvJOYGkymDFejFdH7d3LRJiAfTfBFNebCdUrnf4XXbzedlZ0rxgNLQnRBQEDwSbP/jvRlP9MqKkw9L0IGLQam986JTMY2yGtIggCqD45PBF5ynp87iwzqr3gIG6yihu4aoczm/Y9fHaMrDzKo+x01ezk/eV3f908Nx7gkY6dggmsLn/BFcA8ZNMq1BUim9vieshU3CEJQiGEdzBK+bYzlW8eI5jl/eOFpl0lwybq9RBE9NBE+b1qsm6PLuShOv0CqWCCp67bIk57CBk8EaYQL1BuLKu7nOAuRXRs/Yja3VimIOGt+ETdgyr1OcNTnLfP4jRo5ci+gGeNRU8GOZ6xqHWTLbhMz9+ExVu/1DzoupLtacabgpfHaukDmRfU0Imjcy/GzxSo4A1xEsVnOETIahF1Fd1kWjTHabjWez1tGl0gcaL34a0sCf1R1vOyt5qg4H/HCJC4LvUfLuaUfTq2QriPTUfR8SpSAMnRpkscxEskV6/Z5oySvedJHO4kIAJebziw0uScI42cdb+fsiU9QZTYHNEfzg2pEey9FRZbIx9oQS9jWTcLip/AsnfstLswV9JuJvFC+F3a4bEuc488rhb4B506FZ4tP4vdH6hUjLtNMQnrVbS4wtZ0Y2Q77VKtzFzP89M/7Wu0r9EimGowjfYDzaJqQcGq7Sgp0BxjVXOxH8dxdXoLo4ZXK3IDcbQGxqFBaP1CWxBLICRr5tRjW7C+ChWlZI6e370fZfGm01+mhG7+S4u5mPEVRl65BAym64RGFGbvMVcoEc2NoOYYi03qFqqWdvlDAaGdhP/l+QRyD4qZPndCctYax8gBE3jUURpZx4pJVLZyDNMD0c2qSqY0Spdxcmu/vEl68Ox9lSPB92ys/sO1Y+PWICSyEVrTAPWSfMF68Owy5i4OOHV0PyZI8r6PQc1By5q+Dkxo1JbUilNolRog65ti+7lRzGZNevse1dO85crcdT8b4uK3b05nG8iQfS6IHcSYlaE0zirLYI/bRK9YeVJNW4BN2T4irMWej+KWTk5Yn6W1TYTONBwWgPqTKWJEtENMCiZBbNuj7Vy5TUBMPu1I9ng31T4S+aAB7Th5whx71slFQ4eP4kGFW68nxKhxCtlgB2Kt252zogFEZoTHj7XSgTdRd/1xS1FvO7LfJtXyuV0neRHn0GfpLK5X1DxJz2NX5EUxOSAAyRVX79h0vVRwueqWNm1OUKAwMhwjaft57Tz21oFb2LAfkd2CIaAyDQWH4WVVlW68uEjXqn2ZN6HH7OgtPMYiZFIDVdIm6G+48uPQHCuDktlnTyJnt7jsg2Orl9eqL+OlGKjcFmCPP+j5aX5jQgTx/403r7pYfiLwYSEk80YiaUdKTuPsRJ8GJnsTYiBZT6mnHnZIZ/nt1pvfOZWVuabgEKICCUZySa2yKJDutCg7XEgIyH6NzUCyQliLUovv/PZJe6SILjbCc6WYY+qHJHjJGXbgVeCjAMXNiojrjn/F4HvYlYPvPBboErBMzoeVgumH3Hm1r0ifpyufEydkRjGbXRsEMIh6Ru+zR9IlJmrR2L0ofXzkUjaefLDLq99M8uirNTv9zZ4MUG7MO0J+KG5VQYccIwFdCo26Jd6fnqa5QXdA9fEstogXmUYN+zUbKHQVxKz3cEszB1yw0RrmSs5rLeozQN02nnAijBhjS9zh6DfrEDvpsRT///++zO+CnbKMv7tQqltbUwZ09D4ngcKqEA+NbZohuQ/ANF0LISld78SQZYfZ++y7H2LyAyfDNuCpqO7fL7fxJA/d/L25Ouz5RcJy+v4mIbqjPjRad26l4JfRx0tKe4T1nTWZLFSrZzlI5qR1KxqIsXAP/0IOpgeVHsIub5s5EFQoruUbkEm8YlqkcDaaQIbAji1PeZrzmNTWatBM/+PH/MSB550mXMPVsnYZIlVFvaQSS2sp/4i8HgF8BcqmHzjB2fuZgdzPZo961H9s5CvytHAX/5ZeUjGLtIysz8iDHPzQ+g5D+pS2G/wXzH5hUE5ti/cqnwDat3kEGjBERgaXBJcOdRbSH6DzE5x9GumolcUUAwzLlTkc7t7eWHdtsC4m74ozeJY9ul0lZpkjvR0e7nI7aJTJBSVZS9ATqxaIxZcLmbGfxBcp99BXCVP8Ztr4WiayenfmPSoHgj4O3I2uEKjFUV0dbOoXMDLOAByIHNEpERcpTjNVYfWitLBgk1WgFRjEq6mwoqmFjcuKVUfO72cfvE89VuzY/iQcySxqkZFkc53KijVrugh6Zw8+yJmYlhb4qT+AsSr23gyhJjq4idFektFzBKgkj/G4zxrZXDmW9mtuW5xhdL79mcS/8TuoVRnC/3xijvGNlIBRwA4pr1Ch1OgjozfFLvQHAFzZn+fkqhVQKJSFcOmeDRc2bnD3To3C0qf4xrcdaWljeVo+9qCIa2g6LxwnkTTigIMR+oio9iGbJRdyTa5QU6wU9//UpoA9mziuHFOUa84HiFfYgAjU1cICCE326I0URb6wrk/A/9vbDpNqQsLARc0RB0KBs3Cyh7IQVbmCIpL7gZeSzWhWXwOTHfDBUE+BSHEyw0bK7I/lA5VwdY/659h27QdQyFvNhgWyj1pth2SPeHB+4RjfWGmaWy36B3dNfbap9duo2Cz6SjyfTFmT3d3oirR0RudwrvoDer5RPFokwCP7oNlMcy7j67CuYnAotsOkKUmGr/0arMfxIXIjlDRGNbeGR3vojiBj+3LmYWKP4y7xM7Cp1S5JE/qdc93DeL/UBmFBT692Psr6kCoKWcQQ7zZXLyyhkM74RMKk0VKT/PXyrsoMOvSIfNJ5e+J0GCdxvTIzYbj1wF2C/37b6S4f5gkJad8gNT1+O6ZkS/aVN8SMc3VC77TT3MRYsFyPJGObZ02DYkdN7POe5Gre08p+ewmOpyuUZYMdvByX44iXoaGqVsmlAt5lK/aygqR5uZsKY0krC4SmuA01OenShzYKyRg8dRo2ogxLctB06EbamJ3Ad2rKXn1YVhGtBpCxnJriuAL9PsDypFSefKJlb5PgDWW8UTeR26QP9+HzeFKVG+TtFkHxCJYE1uupwLAP5pfte0ayEbVoQV9CyCypMj9tNu2sc1TA7Sb0FaNpn+5+M3Mlnb1l/ZQMVxeDSz6xSP8teC7gAymApb0kmW4ZZ55olXKSXFmEsBot5nyRYhWjsCbsxhVXdbx0376UlxjPl48zbS5ABGxzESvZReFylwssLAHr3Zq8nAKctjNkQwEeL+slwfknWMqfdhLO741jPqDz9SYXuJKujZgBr2JxX0fEFfq/clmCGcCbwMhUv7A1nhD8yvCvGu8l/q4K5I2/z5P1lMMYGMLuxf+MsMMChY0RurWb5UMo8QdmHIhg+jjTUogrS41Ik/1qHuHP5/HxsB5q3auUcprjHiN2KKyHkWQMJkJEBwhAAV5KcsOIPaKS+S2bg1WvIAUrSeKPc13Dwh08cFvKz/D2FIBgi4TvAaFkVuV4a69Hjaq0QDZEobDwGw++N4sTvs7r2NRpIE/iOmdYlETYr27qjWJmGMCIqfjqWPE4nr7qcLENbqBnKZ1zsRsKFyiLd9OQsB0DVZ6Nwfa6hMwQ2MGMAvs8++HWFqUJV4l3vfSe/BzAtNgjCRG5+YI/jkZERUY+RQhn/09hLP2nWhmr/fOoT+e2ZPBn5WHf+rP+ZpN4IWDJQzeq9/JtHk9EvLNqk9AUG4O67DsfzV1QHfo+i7RgatuxWwSOWCl/FWzbufzpYDrXDauWT+QMFww0wdVzhjcB77cly1R3JnjAqrP2YrlOri60TeHb6Lf6H/Km0WLGrfNGvGXTft5qhEWQnpRJ8B2kxRhcDihbeYIVVYol2ZUch8mTes97H4vZXWOyV6kzb4WknqCe3SCt0GlmO5JFfqwzBaoElIMuQ/z4EMlzdpa1oIgzSuQu7mKvW2QTwN1BNi2ePPcOu6rKlu6BoUzSTd/W92EwIYb72t9tsz6zYje2p9uwZsCU9sPi8+8Zt8N7q5fb6RM0SH6YQ01Ca3fWiijuKq7BMOefGeeOLxuR41MJFt+tUBNKDnw0AkMcx1pljy19kbvGadkSEJ9Mv67llYXK+UsKD7FpqfwitqTbEMWMkj4pwDjragGqOWDUzpDgbyiFK8edRdxbBpbeMmUKVA14o4sR1zkA7kFt6HqAIGaJnjdQaThptixFTdIbHYyfwOLwmRjF56vB92VpsLz1uPTOnhJ70PZUHmtuys4Udopw9nQPm0/3LdSWOP+HoVhUJgrAgirmAuyHnRSokUVEQoVmM6RT0b4hM0qJfP2P33BS0uRhZa3pIMgGvuOgwZxj94fHNyf/4LTJyAFI8/rFbe2KkN/QllWIs7LmYUBKeYcvuhB32p2lDzt6/ISw8NbUMUBV8euCU9hHZLbwGZLEkSIThyw/ea8/md3UC+7Bzb8teLRoX8ZNtauOdKHkWp6JSsUdTHmE6wJ9YxUm7wCI2nveBsTYlFr0Y5v7HamQOdRHSMaJyQkwYsmJSIQuTdLW6LTiZhgeMnxR/St/9lCXaMW/vkloKtixEjpgwvPUXPvFlpyeW8zqw+kdefpklJjgQHDeHmaYF24e+ApWt1lr8Z8ENA+l3VJfcGpKzE58+K6lvQROlomOjuMBMTPXoSugCBp0kkmigWwy+VIbWuc3A7hK6zlY91vSzwSixHjoY5SKR/Ckg5xB0T4ZZ8ScwrUfHC+Rs0Ifc8Dd0926STTRvZx2K+hzoPKyU/hsExHxQcXWn4nzlj82zh9g0uSiNhXVzvpfXnOofy3HFbD9FEN0KUu4tZvslbDEh/h5c59N46AtAEp+k25TaXvMnf6Fb6GMrDia3eu56TjHv3w6yMUzUXSYRFj0EKBqMCrtmyvyUKWDBUpMFa9Qw76fDaMXEO9rdzZ4CPTnyGP3AjLlDAV77FZp1pEe873DFmY69yMswTWS+bghutb+ZqIkrU1+bHiyv0VHaAmjcYhSCVb7uhy5u75Ye5Tgng/toabkL7dNrA2RwjiZB5b3eJ130TdJfCP6MHBl3d8b6o+ilSip5zC48MkQQaGRjMcVV4d7C84GqaLzMy369zSKLzJEv6A9SeK4laFmxj9WMOuXPocPzEh6fwQTADsz8ddAvFFD2uQ93VFfkhQ6tvHNusvR2qV+IKnAlsAxezdyIdDyi9lVgmxlfWpMocnfYC+IBy2d41+zJnH2I75FlZ7yqz4audEB6tHHiTsiQbsAO0LLz5OYjnKsHP126Y07mMhd4C8MvHpEnpMfNf4Tc8igGtnG2XWcdWasXE2CLanrelUAsEQXfPFvsIBt1vLZycKu2usGQjBeaft4rWZqTg9pFkwFSeb2QnuQSwXaXYmDxbqa90QsnImbhhaZimrx2e3Tqfv1qgT3oDS+YsUz6sp3FMbLLjsTlkm7RbP7jeYxXE34jfHZBGVT/ZAAV4x83A8D+HIzE1t5WiVFKZ01Js9Tg6sRA1Vjr2o+/uVqnuuZmzENOPpfjgeWgURHWARCH5lMEKZS4i6d928bglNKigA92j0t9rHUNZaajvSp1+FMZc/UEmtUegora+X3W/k507YGsjOmXtdMYeDgzmB1S0R8xil+61SuJC8RPJPzODaCg+Nm3jXWQxVgqvoJeixqXHodRzPNVnkHEDCjcMjW7369H/13kHKbuIs0doHm2GBqY5YDT17QITJpsuwdS868Vqd3Hh0RFfvdifhwaCV7tFSAQ/v/VmcZ55JRH2p97wMOoCXbuHPrEC4Vo2M2bMSCl0QGkU1lNCn/+uCU4EkCu5ncSvbxZQeyT/o1OwLz0qRTbsNPTE5gTiAZiynP18HJFUjJIlWxdCjuhI6xsrNX7kLe/4ctJdGl+s7fGNNC9Sk3sgUpPyijjM3sfvaV5dHsnNCLi3NXebJ2UTfezRsoPv92qeXUJmE+PWZpLU6d5NYPLrrFvOakzlmHrBF7GSts7jhxURcJ8fqyD/lsJhm6+0yTxN+OrWU9DwORcdCTUv+zAs7/wgI2fSNAGad8cZoI+8zAikUn7lH5rhpJcIBwCtEjxSApJG8zayqaLb2uP7XDKRJllJ1Eu7qdTqCsUMDNIg9b1c1lbDgPGUn5kXZRO+MBGAJbIbHP1EdNkZDnRjriIi81MKb/W+fQtz5KLSQmfjOHDIk6j2a59MvHiRcvS7we+XdvBGLWVE6me7Es2PMn84zOXQX4aFSwqCSIgd27mG7RAAeYy3goNjSM3afYZbQkfifhRfYCMaXdSwcQChorupbcTEXYsTwXU94Iw4sac/tRUGMOTUrJQQOgMWb+5n5OeEqJfuOVbtK/reXke2aC550lXV4+sKleR0EwYdfUsEn+cYkRVTE/glgY6pUtVZUGDrRueDz4m4TouhWUI83ZfbvSzf78DHNvaqeM8hu9PR6SpWu/YVITuT97bUc2LfranhN1vv+0l65BDqSrT9sDavdiU/gRp268jfRHnj6beuBgZRSHGLdZxX1lFGvGsOkd/2j2Gv6jrbfJG3PeRIpIMOt4S5AivSgghk8FQBRiINBcQtvtBL4G3CNY5TM5dvQIZsibk0LsbytGyI165u+SMt2XVDREUWNa3zHRUvLyK2R3m0oLcbkNBBEMgWZeRUCRdIEfTWahR4cr9wiKp1IwGMPvzJ0qnajyTXymQL6GiTFeIglLKwx3BjAXBYO/Ahy4FlcrXQDbv1+z37XmN4uR92qk2mTrd8s6Z/GkXuGr/umPdmVTz6CE0vUo1zJZZiCobAL6aktNHLtWRFuZ1bSXG1h5bQtK6bIAsp984FlZ3MexHedA3r13O6nf45hK6od/QAX61kYTTUNzKRHpOa3jbtcGyB6D6h/6DjJpS3fD3PkgotO2eJEio2wJqyRxpyKoMPlp+aEj37KS9A79uDDtWHqlE2qAL0sI/qZx6GbajKaSKSCz8uERGFLu253u28bas/HCYaqXFDzheNXtiiFkYgG0+9jJyEcvXtJXU5LwPpKq4yY2HYZWzgflc2eJcV/gqDP40AxTS+94Tw6BqN2VM7GBaFDI2W/2Fgw47lvXISF27RCeZ4Bvcox+VxM6TXx9ivImK5Ln5yyNj2bG/u8k1zx/cbEjZvAn2Yaa8CNTt+lhN/BnO8SoYUz/a7Cau2SozKskVgtN3xk0AVXZxzYSQja6ORJtPoKTZCntGbBLvht7xHs0Ee7u5kUjchVAQIoX+GKADq4mSAYDH74nayo5keCQOEsBiF9pgbrNzZExY3U1JBqem4XplkY2sBl9VpYg7y2vabyRxNrcXYVj1D4Zza//LDcgjDtQjLQWxSveugcGcm9UQQ9p8/BmxHpDE/Xo93XXVCAAu+ZqkDVrNHEHYb/A0FHmRyv5skbvtvAwfttJ3b8IHDWIZxF22LXd9XpqFLYoLg1qpqMKH/gf5IyT/ZLoFsEEAIGcGJqQ9DTPUR+2CZLOB4ENG/o9/vOI4a8Ovlzb+OTBXq/qtn5aUY/6vZmp4GdsW2cpnOh1LGdS84R6DLFhzcAkBFIAMrIhGri3lYtyAE1791BNB1L0I8L2DEI5XD3GrfLEfdlP3pot0yoY4StsXF2Vl9N1sz7PfgiCTazZo71YjSSkPpumegPvKT16B/BE/MpCaRUT+bsPFWS0sqpALiu7u9IWHkULLG2vJ2gVx7C+aBO9xRqP0wxausy53jJuVVGWbYkEwyB6IDW26sc5eO6Dp3Ph7MU04O8QETXdEXgx7IcdNyWJpOgncG9W37p/uTXC5TQTd26XaV+3mNFi8dAvNnNU9mECsdL8LVx3FMscDea+bu8Qm7dTZ7SzU07GxZ0BoEmGptFYUfaFE+Ipek3ob0yPwiesl2WT8ogz4bdpDQar5O5/UBNKsKwAh8uovnkjHU8+PALa4IisLnhwjpKmARd0Hkowt554RC1qxOo5xYhvPAggORwYAhHGk9MyDjEy9mm0jvEQM5K5QFZ72fvS51fBq6ZtihlWAb8IYsOfAsYKJ6tmmOXmS0Ja+WaitO4sD0zgyUDwMqhnJatI3TxO0s2eDpPWvL0cueZKzedIO0S8BPfsXKBzXa30lgh33lla5tQRryZ45m4aN+IikV3xsBJO8LYQjdFPt5eK6ZDEGnD3DzeyH9qywrLPfj6+eNG4GgIPdzhb6dbpesovTpsQsNDhiGxZOk8/hTNwhjXe9/BMwLnBgTC07ooFLitYBuimKe1jrCrlMPegBdXxaAolm3GoQfrsEev9ZtJdBjtEWqejJIeDSXhncf7fRf29ztlQhJvulRjhrjd2/mVpQZc8u20v/nC+xg5/8IbkMyC4STGeKhXQfjdpY4OQ/ee59fIZw/8RGYwUeuseosXhLJ5ZC+9T8YDt5ntA5vqx/EkWi0OP7G8utIdGjqHFhUJOstpHI3R3KxQQWe4K4KO7BFPwpbp810Yhb15TsBaBPxnXRYhtjTWVpBFPSz75rQwLMTrBxPXopov8OOL7O06Z8cwW3kQAZIRFEyJVPpGsaOYrQre4i4QRnofRPQ3j6oratNNTG7RxTkuOARVmG19TT5eAdWGGu6hP2I7H4fK2F6EZCRRsDBQkFPRE2ebtfjuLsolYHMJfQRTtSHhQkdvj5BONezaUbs18MVr/b9lTSiX4dy08QSeH2+efUHkX0rXLdAD63G8z2AuAFp2vRJUmR+NhRzBDA8c4ZZDIfis2xu3xxFgM16xs9p/pfUTgDJSndun431qUwPPpVcPuySsV5xUZddhpcmUHqzkrOg5isGUdNE8q0oFNPXGvmsG5tf6mqqjR6/Rb2DDOQbXFi2dkWHiPBUgOYNJDRfRwSBKPQXDiQ/eHNGdsOYXw6i15yYRU3CmEI3Vf4uq+IlU3TVymkBZdI2zVdXvOiT+mvTkulsrMNpFoMbL1xK/8KfEfbUMIrpapihJh57yMaPCgyHBiWpZMled8RXubXbMCImfHVi/TfTREZEJvQuKASKC7QYa3QIzCy5gv9qjNNXXfFfWSexFsQey23lm2BiiPQ9ZZPYb/P00PKCHWBb4bw3eyLWxmqMcA8nxSSiUyQJ6Dd/e5nOH6wBBo1gXcJqMvYsrHWO/HUtaHpdjhAeKG0OY66zZ5DlP+KBjtp90/r0+wekpL/+mMEESxf8GVNL/RPUlC8UHaaAo1KYLrwitW7REeuGf1Qc4VEtK4CJITVQAIw9EjkuRhkyGa7kvDDLtceGBClioD3FwocZWpLHlJmui5WfYpyca5E+IpFJ9XVdTFEj8Bd2hkXNEC4060VVzj5fyeM7qL6cuGZH/0ALzECiFN7aitQ1rLJNDyXdHSJn30TZZxk/SVMkFmy6XBtcnpGBxN7R6nq1+2aGEPdkIA9oe3FUeDGEP8UGJPBQhXJWJW86vp4rEGjdIK9H2yDr31OWhuNS5LbGFs5jnsdhqKw+0+a+NitM3GHO22DrxqgMYAsKAfDvCHfCXI6w46kdgp4PJst4q8BUxlJvm4WTx0gOG0Bg7rVW+wnlODoIgT6O1GG290TitQ09aLCzk7XC23uX5HIbt72L9tMrYCIC+LLWNIBzpg7RrOWYntfsY8RhwQw+o6TLEcCHVIprksu8azyuT9heQ7bakPhq5MU/o17ns4UzfGaU0YWOuoAqHQeT6h2fwhktWknGV+I/4TJnvitwRvk4FN0Km254vjcAMGP0Iiq0d8OstFvKlpbk1ZP1POF1KZE3mZFkN9QWIZWayyEmLlbCfdDFobubm5d4xqUrciPjtLe+rhCu3DwictgrKe0OCYj+C9e/rvaAqmNoA6Icq+DbazEba5sbgKDzhLmj2l9oy9um+ZbsncSCe/xhMn7CRFkQvLN7rFvKQ6M1rcuyEFyojwWdyytziA0sWxUHUjx/ydKzylq9oRAh2pYlyrWVmHwaImEVY7Vk2Bmkouxq6iUbKZO2byObk8yr3GNuHDYd31kWNchf7pK+5hn1ib5HNDXYRkMtFdCH4BRzyYuZdwaBcr9xjEHO9h+ThPRgDYCKyrH7+KTHJ6jJd2XtjHe2yYWhVSi1MUbmq8kKMvVpANJpSsECVTydt0HGdnJSe4MwxrQjKTJSRTxB5VAMOtyD87hIO8ZydbpRdN82sSKLOx7bW6SG4zQsHkGuPJh0ir9udsbAtU5zgr/hlMq0CvR9ql9nUEldDB0Hd5n/MfaPyWDQ5k1DE5thPU/EJeUBpaS3e80QlGna9FA4y12OAdgVF9GR/908RQ60Jm6uaTGNgAwnplfuVrJTuWujq1B8WhCEUJL4F+zGR35MNXH7rWH0Ez2bJ35FbFoO/XbyxhAbGg5vYZhTGiHGmHdAnGR4dhq7+QYfimwvATSrrkHfyZU4PAc6z5cI5RmAmOPbephMoCr5Tymbv098rdkH7bqomjQjFjvhb1qYz8jt4ltdK2x/PF28Z6Nd89jfakCkAB4ixALx+oMCv1kuA0AeHv7eMrfkbVUVSsCqtYUMJaTqB7UMscCgzsh1bQS/VT9MOwjG/tiIFerncuXoiUUeKTLVQsYCj+QaEaCRQ/TX6WamsWb3GckSCxeaCGZdWYdeYYxrRntwnD+ZJKgF/DJ9j3G2fadIVGlac1A3eqCtaJY4z0S2a0UmHWJQrmINniDqDC/JW9U1uIXpNgG+HF/l0JiN9pKH29FsOfMIV4pANmJ1S2jlcy1Ww/IVMSjAmFaXcmPfPs83GL/F9rGVbZr2DitDKzpV/b9iOldVx2kOpThUJGCFp3cvIHcI189QyC0aukq1Amopf8pUJxtxp5V66rzl8Nx16vTI5a79gEpYKryVbEHuwWh/DsFvf5pMIve8yt1an56ojdXtQ6Qhy5J6ZzlK4piui97SiowZOXuQw6JuZJG748EjlHj56zIWU57Di6Ecg1Nf6o5OW+96WnGDvhCbA++vWpzBsAfcZahxQnA94xL2wXJSox/8MTYGVHJTihYQ7t7E07yM8wu3efKzULgYboSppTupGsrTUWIJf4jy2muOHCvylo1KNXq7Z27UgycdYsNRO4xYVdpbp6eJ+RjMYbkuczE4eXD/s8xbe7OvkNnz3+SbHq78wFH9m4RiFHAwwxn63V6Z7URe8zH3J4ZBp5eLYmvPSTi8ldj5Mvzi2JfJNe07OVhJayheEctYTtBmbZJehszuDPwyCCz753o6a1kjuaX0HTVaO8ILCp6jJqSlEzt8bmdAG/9VcKVi7136Rucn4i/HyquUK44dg98rB7QcAWKqPloZKwSbVvTrE5/B07uM7UdRJmub/qrW5uAI7yypgAcEvuM5qRoPyj7czzlIjS4jQzqcJ+PlYVCUmuqbH1D9mrhshD9tj/yHvydmSEFtplB7y6ZeMCeOP4htzDmog8HKNsAQno/4B4JUWcxc7GizpK3+U4Bs+fi6PEbXYCcukjeWa9p9PJ1xnkoouzPqeFSVce+X/REck83ZsxYVJoC6tOaHaRXgM8NEVGlLJoRlSSQl7EH81oehijCMi8WNaluNyivOj3gKkXcOz8dkR0PEnf+9Qon8oraIcyaLjzCJ9k2cC1PN+kYvJFzbyAMAbi4aE4OWwIuho7IGrDZNGULeibjRWMC4Mx3a54o9tc4pkc9ZE5ZYfFrgAo7HUFhko93dQXV8UGs5yMRGQXRDIBC8tW60+6Up2V6PFMJaPKUtblF23A9hzzhakI2+0qtlxSO1PJ2mHkrhs+0X0OyRPJYBbgsgUFg2pYS4nGBbORLK3rBXyfjNck788lijiWLbsUKOSkHExiCGwa5x3GRmIgqr8Q/aFtyZn/nTbr+iyU24sAeSkJ/9ULE4mHdmVzCnTsnKpgooeiFKc8SHgod327FqntZnK7kcyG4MJY+Oa5dN7Xez67B3NuiGDfA10sWWPX8UtW1LY1hkLGA+xw0aqheXjgc+CimGkbWq2lYSTKTCT444mpasiOlXuFwIOAwMmUr1GS8w6vZYUQnKgucPqfeNNIJqlELCKlUD327BCA+MV/YX2/KDpbSfn6odzJviLsZaGzYwmRgRff97kdGVW7Vbtqftf31AuMBN2DfHGu27htdPcrW5+4dVxe3iU1jiSxBg362iI/b9MQtb1EHsimX9i4kfh21v2F9FB0obi3BcqVseyXhY/KGQ7kQ7jEDUml2u9yEGmmiULZ4Z3Islk/TK9Aj2iIHiZrUs1j1B1PwB5A4fmtE6wk1Gti8ixnj4ilrVGYEf6izQPkB9LE7zsHXGeln7lMmTw/J5JdjYwhTxwUziN1AT7z/VUu1/+DpYNmAtAehEJCFzz4Zo8CqZIc3+UCJKfWjOruUsuVg50CRI+VBSxsiRmmqVRmO10PpXtsLwPdvriKD3fCcvlbrTXhZB7UZZxXwkwpm1qxlxQIV3Nk7aNpIw47ZDJO5xs5aGwRdTtc7o8k0Aw3J6ECO08PVgXT9b3TjkmMl95anLTZFZIvhowGRAOtjAgtCGX2qU3xRfWuMJZLjM5qX1bbUzQmyL1cd0CopnbeDtxOUDWGSQ2TYg6bb3FDsObm3B7/QAx3Ysd4+ioIJohMPFblTXeRguigC+UKGw3rwjhwZlHaOg7EyBBK/jeD401GZm3TCHVBcwqfeYgsftzCXxdNFTvaomCxynPL8Kkdc5fVS7uPL3EmNF5jI0+gUELUkkSXbYJN4iCePj6FNDlJ0gtN3R029MMVTeV3LITNQ8YTUfusrbiVmmdEXNe3oM5IMQ4BQMjdFMYmJjNRw4893yr1rg2g0IyMTbRb4TDrERNzuUgxLq7ZlYDvPpti/4ms076iXkaweW6qg/fH3HFb+fJhACKCqIW9KverY9yOsiOl7X9YmdQRJSEAzIZJZxkHXAS3HUeXslZ9TpJn0bZw+O+IbhiNMs7bM5AqvJ/du/+mZydtgMTQtJG/369w0p06e2llqu8F86IG3LHiVFx5CAgPtWQMfX4j+9g+MzZ9UBUIO3iyPpk9TFTlDuoX7hggyJuYQ8tCqPlYO179jaN2wo2n8paUGVezBKGJoz6uD0bBjo0bPG/Zi/nd8GGdloS+bxGWltUSQBKwhHXGPdvhLxQMjnCKfHioNMR6kKe454qGbzCeUcJyEBOOqz9UPoa+myCnqMPu/b+b+TGfgY7TGJMjEhQzCub7WH5Qqmgjr8Mx8U2KIG4CJKP8aXiGeGxJjFGUnBBI8VhrFtYm4ac8CoJy3nDqtNTEQsoNEB/Uhjhx59K4VNHHztT8AGIfyadAmJR8ZAW2Pg9oxuxhMjVQ3OYeQTQyqkDFNtUP61A1oRjqWMJzkCa5PiDee0rWCnj2lkqZc+r2trW1qroeLv3ihlaLSUI+PkbtT8SJbsx6EO5O2DBfF+GBlJM3eUEyajQXftn+7p8Ptbugx9j4cHQhD4TribJjMbMJdC3lTzDGKEexkRKDpJUIL2vkk/CLTveD6BuWeqZXiSn3VzNaKIiMCcjz/VzlOzomffU1zhtOLyVxT3Qr0pvqEBcriuO+TX8tJNfnY+sNgmEkXvICKrtNC/H8TiUPzQz9A21rcwvGXSd350IrpIBteQAN0k0YqTj/AL1QNnxMEr89mAcVQrGNQqCkbvWFbepTE+v9lh5jKIBKBtubhZtfz4Tr5wAJvgIhsbgf5KdhWauMbFNFw8qM7irIDnfBZg2htTPuRJHH3SIK89fkyPDZeYhv/sZIoRfhy9661sP2IYFItuJgMK0nodzucxiRjV7p6erDZMgqucRnKXcuqh9KpQyAymBR3fgQye++fnMTieZnrr8Y1FYH0evqubbYDZ/tiV+nzqvN4tznrt94WLFiHKmgx5otmSKS7ZDv5rgOgkegt86nB2cNEfzftdu/o3rSoukGJnHJNb/misGdbzmXbEEbIN1cYk8Y3T7m/D3lvq5uFXhuiq+Bk37x45N0nMuxs09hjhuInQkBRcpD3ykWeORX2MpZtYnUBAdKQWVMdb7/edK6SdaSk9PmiruIY/E5cEuyIPLjtQRSHnOeu1bYssYzW+dAOW3xOYHaBSbeki0IuWdGQvNIn/enstMjN7Z5ekqqO4CeXSzPt1zOQLPNkofPuVfYIodwTXdZZWkA5/J1yZfsMkifBBi1xqruvN4CNwIfrGH//a1qetiShwAioB2i8M2+JqtrwSPMc5TSDGGPrkrVrKwzOSZ5iWA3xxwG1Yq7kPFIlJqp2y2J+gYrXZoBs+PJcNAdp5CPMyDxyk3GswvVCZ1LA8ETAOfT5dB/DzQQzPcqMQVUaCu9UlGfsvty2s+TM/IVjnmXl8fyrsTkcIP1zwK0jwoBIcZJKSyvYalUNs4aXsJZ8CHQPWAEOq9eQL4Xan4RQOQmw05z/ytKm2S62aarujem/iItdviWe0AMMK1Oae5NGXP3Z0UJYZ6nYDKdcI6Gousy0e1kvlzB2wXayW4QgHpgmHrhIlCc2aVsFYVh49VA+fFgUdOBkRvM/H/HXNZmDWLvKt2dHK3zu4iIAoijXNJqaA8bwD1lHhecokI+9pT/pSReFyPRu724QY/dc3BwFqm6PBIT6kjlr+7V6BFKec5XHhcYRHfkS6DtRKcBzmPdR64ctUNUsMngjMXycJcTyjs+fSvNmQemtcqYKm5Hk+/R8e7+tjM7Wftn1BHZmn06HkRnwhkQ4byVfjdAq75gLduP/6m36aOrUZHvvqCtLY7oL3IeUOQxBBr8swYFEcE0hmG8nS6gXWxmDu8JC1BmbpsJIlYYMkjUtRFzdNsaTaEvKHi2Yu+cepC/znEZhsyUy2UAcLrqynp9H83fba53f2qQ48Fl4kBREP10XUYH6+ev9bS1fXu0u44GlvyxMD8qlpNqbPJkSn35ldxnrtdLnZCatQloT7IWC/Ty2j2Vqe0vRJhfdLbprd0+IYoTqpUqaN1aVkPZDbQXE2aDMHz4LTvunW6rTNp8dMknfj4Ckk8cczNMjx47hmJQ7fLHJMpF7e8euE71dzAkQJoq0UHTZnX1OL1bK43bFUFs6+Eq6lDNtHh/JSN4NLBc1oHAaTILj6bxml83BREKx7vJNrPkrnSOGvAColfJ/hPEZAR7RoOYVBuGQLWHF9pz4yjuBiXWg4FsqAtMf2hH6mWbY72kG3foJ30RrU6Ob+gNv7cEqIRYuGN7UtNNZnYb2iQhOtxIPM8AxsUPFb9w+QzNKybrqt+sG4Ch6v4CfkZlB8HY2n0ciA9xj3lZzU3RnQ1pd5lz7XHwZ1p+WOoxkHSr3ir9ZBSUZCayTVYa5I7XHQYspC/1wCYi7w0JedfcwzUFR353ddwQOyox4O7wy4tLertjRXRWeyETfMwUl8UqRTxluaKWjGdS0HK7niqoFcZGyXhtiLM9NEaybok5fmrV0ksyzoQbmhpAO3YF4/yo1gSEerhvYVtzJ55oqB+VoHGOyk5ZY2ha2QSwdQjw3B/iMphST0Q4O0qHCXmhPd7HWS609zHArax4oCTetQUV9HDfOEafo7QBRtVSIW9Ud/SWtnAkUUjMyjHQrWBtRJ0x6ogczJc000OXjJfVML/aRi5iSZvYbnnFCAICzeqSJcqJ/W/mfrVKZcuO2uu6in1wRr60wLN06JnOqPcAFFfmZ9mRZJFWjl3fASFjo1Hp0O2x2x6uR/YLcXiyp0Trp2kd6X8eNaW0r6c71tiJnIDoEMSDiHbrhrLl2DE4vsC/ixylod1mhwm5mY3e/FiJJWp34yiFYawX8r1aUqJm+ja46Ge+t5jg4T4GuVNAKuG2MhHU66SzQqOW/9ga6LtfB0qB5sF2CwQmsq63dkdfZS6dTtp1SdlwRPdXWl8aU1aVfHURs4H35Iyta+9VGLuLs0LdXJZeEHDzQPCvJAV1ody/mvshj3BIJDhD30D2/R0sSbeuYPjtoVlgfO0mXmKorLfqm4O9lXpnsibZs7BN5V0W/XPa3xZ8iXT9RmZ4PrRonyUw6aXoCQaz8Ulu2zZxfbi71P8WLoFCo8cSK5hTLgLzj1afvLeZQytNk2jFITLc2CUbbMX4zNEqgRD6oo8TMbP0xL1g6aG0Y2yxjfokdDpz6ZcwhLqbEJ9EN92X/7Mcmsa9IuN075MvG1Qm1BKSqtjTSRoJWyHVXAUsLVtRywYp64rAyo8UNgvxCBwmiADsZeopxcFP+INGoBcg3RSZI98ZvQ0d1RsJJePer0aqqhmS9l89lQ8jMEYe+koec3VcLQmw9YNk73u4mz/vUlaBagSwaqbUr8mbLTPX9YM5T+U1ZXF0XNXaiK44OTl72q10ygc+bO+MmDARb4jM5oC21Xpvyr7PTJkM9qa8ZGJWflI8srXuiiKmybMvEjyH5lujPt+w4KU+HK6f0QCXzBnTisSfZyl1Vp/eO1MUxf9col3EzRd6LJfpqqjlGuAcKf4UXsRslnq/Jh52g3bDjI0S6x2yDIcUrQMnEQ2bSAuqmtCA5XtK7RWNFkga3zypdPfi8/PcTRWsPKbWqyX/ke55OCJRi3LSEFAVbxFFzCPc0dHAvVjpI4+4QWowDZQ7P91AHMbXoEcv0Gvte6Gqj/Hl2A39tHg5wpGwKBCXm8mpDKMrT4HjfkAJtMaXItYtgx90IwsdisfOWJVaVITO3a6IIRWmQazwBNQJpwJskhGUmSDrrTDPYv1hw27Y4uTwXS8xdxUbAkt7xrOp80vLik6+VWKW6THcn8846kUnyMa6p7zViVNwc/o0AIxjhW8rNIKL3md31VqfHC7zMQ0TgGsgBvZQSIBs3H2ziEuPLhawXffix2keC7zgz0uIs3iUi8262CBLeoQ/z2QHGWNtxAY6dGWZkfPDcBZQyJ3AdP6+oobSn/LCE3xLs17o5D7IfGAs07iGySzkqDUzIyZLoODdSGKavUq1zoTgMR8d8UTbS7n5A2w4is8AF2AL1cFZJWmpAwcGN+ehbIG35VPCyR6PdALjJNGGDc0JIKY8gE0O/19E9LIhO1OMKBYJNrCtUbaGDCNZInWn+SjJJRmJyn+0CxU9ZChUb2LpVIn9zvEekxK2THa8J5LoapZ/yjG/asmh+K21NyMzLpO0krAHqepQ/J5ecgJiuU6jXrmQiuOd4qjauKs4EwM7R0KbsCSYD3708ud/GRtBgPGUSEEqWLnS0HuKmS7OtBPf1KkZM4x3p2JmdQtq8rtbI6dwP2MHIdxLrO8eVmkNVUOqcyi20ebU9aV9AsXfNPMC0RoT0gvUSsBYd9qjy5NrhNJyJPno2kEIoCQP5+eKTJfd3LwyUBcaQ9vVS5JFuQaknbFX0wCxXmJqZN/ZFMBR9q/MzkLH8Ukhz+5UwfS5KhhP9g0krwGykvG54nfXge3sCbcUfeaCPx+elRyF65p93AkUo3cHmZjcdwT88ZGtcU6JpI3B3oxxRzvAUOnZH61rj/kJGc3tSqzefwACxE9TbmLBwBzNQMLSvg0sE/r2Qd+LSVNbCuGelDCIMhcD/xkwMW5z4xXbK3jUs/bTAsaGonBHBUrHDukPzXw8SBMtW4kFXreoaVqyQbOl2I3/2FbmxMXyF+uA1YLJIMR+KmDMo/mmzo4SinFl2fRC0XAoExEFv811fMAUuW4CwmbWMipAQtLbwmu4WtWa6Iou19HLoTEcgFwwSwyhErWh7Iq790M+veCtU4lMp5SxpWmJw378iGur3A6S+x8gAuycG7NXhC2vVXG7jMnVD8rPAIErusO8FSleAAuapMRex5fXzRhKQawqVd2JdJQp4T9E7iyucyAEoYucYhIbgqUkV2Osvv3CenVJv1TqcMDDSTynPrSAeFk9zvJrlO/BPuLls9rHwtXHvN4cqLHxQDhqX2id1Ll+TsQwFlkWr3nMKQh92GTl/A8G5ZPzUUOT8CNEeQLEiGe7K46DjM/rsy0t8IsLN22cZgZj2GVDkiFHt3wkKZIWvL2pnvBZO6hUTehfIvI5Oa6GCZj2bj8fG+8OatcKSooYKpMi8wvTJmcPVMGrtreskUedALXwij80PJcPZPLJXA7Oz/pJIRfp1ttHRCWOdQEt5NBd0qCEsv/eQzrYJyP6zJdlaeD5roTvS6WolBd30dOxnuW4sUjKvix4UqL1gjgVADMAMqq0ThIFS3TNeftsLd/NL6V3tpBbMNvzMfLcII9eZIs0d9HHVgPRmkjD7sBbZTjgmakJW1wuD0604U9PliVSxppt17lzcBs7m7Kps2Id6xGlEVeldO/Gu920kxMvsVo9r9NIjFaeI4S4sH6o4JbMpdW5wd3CgQGQa8ORHyLnkjG4Il8lcNJM/I2J1F6Eb8CnrUH9ENA9/kq7UmF5KFaXjT2OhN1iGOveqrJp9sOB+81SslUVE9JdUnRNI0DBQhmHOjwDcU4EUO36Ccs9szntPSs9u8YM03UTCy3LFvI1vJWaN/VEm4DmH+OhOhMGsw2T5F+bZfhH0mz4YmyeH38ulnN9pt1A/Ihm2DcG1DZFlDTURyibMr49qJEwnEXVSHCICe1G1TX/KmH78CPoTIghJS3sS5C4MDXnK3TVh02y05yplsg0TmtEyHwEg0xQjwFCGTva+k6wruokPy5cVV4806f+l36ePgHMJiVQiyaCt72FUMRjiMXmIX42o2SjwDeYHsuxCzeVuQXM5nXoHnAWgBMMhBZ96EZpmWNfqWXGFhibQOllOm0FkyeziIYYk1c5n0AQP4evXiTQF4Zf08ahzE+nH82drx8bOWIIjLdllCNeSTw0+GAtwnh5sgGr/zF6dsAT5YLDtHHFL+eleQ+prtjGDIUEE5L9rtR4y4dAGin9YNEY/SLk8gm+Wz4tPhr9EWjAjYvXvPlVlBZf4kRpjFelZlfZO23DuHbvA2+VqVrOmZ7cb9cXY1erRpNoEvPTfM2y9cAjjBlvTT9QeatFKbqy9hE+yjEwxB1h/ZznqYL6Q5mqNHIFbd1fdEan+wj4AMDBUB/Q7HO5oJjdLxFTek78JMjLgNCCOyREMCSGwi9dWqH9PE6vi28mNm2jD718+HwOI2frJfia9PXzRrRHBkVwoyYEMZw90jd3TK3iFYgdlJ/KaYeuzYgTXcqehEjUyFfa/NqcBIrqeQXCJz+hS6xgj6ym9tGort3UKe2dcCYlf0eVjQgF8XvQuY2iye1FNxHRFCAAJzMWvV85rc1qOw58WgrF8rPXqBFyNUVUmFPA5bciubrUFMGVyrMMCTbMwzkkmPsUsyslBvaFW2dmUQ7ZfoPqobi+9qSVIBEEwSVVEFLmK5/BM520QgFkSd+BO6SzNZe5PWzEp+fnZJvhFxneYToC3K4rG4fyjPBxysIpGgmrtq5IkVptTvWgayyzeW2Fow9eXcPCw+KZkAnGEmXkapxc0jMIiLQ8R+jjJh1ZFO4nxItsN/j062BcUXRNkflaOprZ3ngvaxqbRwkrRLZHt8Q3mjsQ/AsemCOdHO6xVC4wizY9VwDLAMXl+kE7ZirquI/+JQelJI8+7WGXswdfj+yjZdJDyOTicc+HEzC/SQP95/6zSwoRmb5cdtfS7egggv5zkJQEJfwahMY1YQNK94geI5oT2MERqBncd3m9hoklafqYoyFrtaNeNzIFRO8mGAX2mdlnNtaJ9cTIyZN0UPgNnr7kyi6puvz4r5CIZZ/hqBlIBsbrIB9D9UX+bocEVQm+0ktthar9j32C3PyGSXchlk8eS/IZ1YAbL0tOmcNVeIWZl4XppAugwmcBksMSJUd8V48S99xZN/q4O5nqjPIdmGFx/rIPyblxBhp9G7eC4LbR4kOsQFxIu3CkIem2iZ0PnNBZZxH++38YTk4m5cZvAV9V0pWHIjE0wPu06G6Ywe3A2eMQbV3rQ+F6FiyjD9i0FMG3BBQZssC8GnHEZKc/seNRC9jNILe6+vOwWMQQVAgyzu2W8294lj8dl98TbNlE+bg5Dq7++I1/pBll4XzsMirIJ3qcf2hGPwrtS4zNGmaWgOp73PHAcDYJtU4uXaxVsa2/XHaDETGeGWIAID8kLqAStCiz8srRfhWZcnMWifdIn9hl/7VxzjgQaTtorDSkhYai8UIbXy+wmdDCigenm5AcVxZmIvXz2/3ubEMRZW0aHckYj3McvJvksDcVbufxgWOFcHOW0QnLVha2Q4nkQ1DrTu2JtOMgBX2iPO9uZIHkKNZ+uGdtdx0GbWTq/WOi2i88eaMGeIChxBE8hznTaY4lYxldTdSvhaTfcQQWz3FKfcO+MDrGavWbHJruQ5oB9iK77R90u/YjqDRQLKVGlOa28bTPcTBCTVD39byqQ7vN/ZUMivmr+CXdMABptPBTsXKL12tVulz054IJ3cFal7wtPIgnAyyfZdoCQ32OS6OVCwrE4o8wy9r1qECsNub7noAiQ809YXn+5uazstpO3QAwduNqMz3uVoS1wNpWadzeYNNuJ6LppOiu62k4PGQA6BllV7mGLlqAE7NP8iZoDNfzBdfvHQgGUFPzoA+qAqwaKKtHoIENkomlNDN60AjAAeCUcqGShImbw5e6gaLo/EceMXJxv/iYltWABibL+Qghhq617hdsJLAtjs6EImoYbJxtcHT3SdGnYlprgaltEGj2fnAfgD0YAA1rxX0D/nCVFtQS7/U47/cj5TmiUyPJy4D/q1D4cBPdPZbAaaiMNqsa96jn6V13L/BhALbrUDvNBhgCOdnukhwh/wsDctnWqGJkbJODcLgZOzq6BiWkxFXJwYJJ0hi7VnPIN1mQdRxghw7c9Uvk2vb0acoy4/rMs8CuRC6B28RHVqghPPPHbw4/QpeD6vICXfcsRlw4fBUbwaCCUTHbKLgIQg8ZI+RhaKhOxvh3IbFbSnnQUnu0NIQVy3EB6blbeHHtarP7yAkcFEldha/Wxsy3aHIQSV+YnPkXNQYd+DxGcqtqKIyKs+dQdnJ9t3KU1xYRvyh87f2Jv+jqzXbQkpZScE2TOS8aS1OBbS5v1L++xBnxZAqlTj1ukUaiufJjEq/a77LCUA9tFG3EdQlLD6YrRwaIGQ1/9GmrDQt9al1ZzHAGLlGFAJdEnvJQp1YkOdKxVu9gjzOvFm7fGTbOK1tHRa5Uf6vb132V1eE38bvqojq6ZGEurzy372wlp6j/1ZtXrjajoKKCEhphQt9hAZTmpHox4oP3r9F8kpk+bismd+04Mon21/j04lDeYTJfTxU+/szZ6wXy+ElTfo87fsN9cPbfz24F6Q5JwK0A9lFkJHY0m5ByHibX0bOjThhwX/P1tDN9Z/0YS1lHVwtAuiqYIfPAgye/wKei28CXkEys90EGJ4VIhrvzBizQkmojh8s6+rZgL18eUlk8ienxBDwMLTk68+JFRSvbsilesPtJQqj91W8p6rs1GslUjJnQZwxibB8wr/ziWcCllnaHSR9ZD2YOMrwsnVjTOdGgof4fTFHdz6hvOd6Xl6KgDmzGWM2mxH6C4BlBI5EdIHoTEvq+ijlI7jVTPOathtkxbMDvv1ayhNfCpcvkwTVDIu5JtDiwtQTmMHuj7uZ2rxnnmKlXFWDowr7Qlo9nglxdK71Weq5LDn3K9FqUx4RNj5b/dwKdx3oM41Wdd9Xq5gyr/Zkme8df7cDH3QQLxK0HyZ7u+p0cOTa4nccZWiB2S8TGAoG0h6L0igstcVtrjKUBaLDE0gMFfwvGouKzJtBmh3coY/E4Pt0HjU8ndro3kfpURmrR4EIppqjLG8GSC/gA9k86j0PxVbXonZIKlAMj+9Rcedw2MDeSQGXFOKvSddZPgKhzRcvriKpqM7A9C3DWHTBfMeaiLWMu4OJfyItpbhCGcmnxDkq7hvFgo35z4EcFURDUxHUJQH8EvczICEIIPgcQQvoz/6gTEzWVbvewY1IeH64R56RPj2mfHh6tr+L1gcOFP2b1BwFbucCueRIraO5y5yPVpWjkboLP/sltOVXEgpLiG9Yv9hE68m0PUlHJj7c9NhHVOSwPBnlz5oMGCfIytI2+hlcYGo1ImEEIze4OUrsCjRO3Y7I3x0T+dTGLLsy20Sr4qRbWW2coHLHdM/g4v9KcErsV15ICH4mkP/Mpm8z4rs9iwX81mmhcydmjQ3JhzhmZMU6/MUQtnt67f0ioIo2ZVvdTYChocG+R/8YCY3r2XJ4ByC2RR6zjI0xPocgDFG4E0Tqhm7WxhiMe0LhiYQISgV8PpNvnhKPErgVBV9Jxp/NulCpxkewDszQdcjLwMHRg4qVhVBV2w7eg4P9xDZyJs4R1z2gvk8vSkgNfGF7ZvhK+Huunh2ITfdwGP4noHgrP1oDpo6WpPhHDO+XXBKGw/xtXpOXl05uZav1D4HqG+FYVKobyQA3v67qpqntP8+4xd+Z/DwiLkEks2SjZjNuAPLMfteN2ON+Ua4oSpn9wJ465RjC6XKLhs4u+yktGfLDh5c5mMGuEvu90JOpHpOGKMChvnN5Jt50WuEH24ER3v4glqZqPE96tTNzSRTlYtWlKN9W4AN27tshh+zgCk53mvD45HqWUf/Am22gzl914soe0Qaj73XjBspMRf/8ECe+aCfmKa5jBU4k8JMUxE7f7kjP6RtQWR6imYID0MDfzFAdRuhBza9T6wp+zHHOTfw6RIT84RfYVNZdBLRZHPLqUqY30PgsPxbnhONI32489D19DTNsURal7Cgv/VbLiva3NgoTEL61xwHgidKnolliUDgi+yyHZ325qEoJ2/QsXQ2s6d8MYSpXqx7R3G/DB0neSiGeCEfvia+JTqDosD2wRu4u7vouf9LkXhfNwNO6GKgv4N0kIipjckY2xa24bQF5JcKS4ba9c0dad5KwUrr3GaR7zRreA1mPWEbwqpIrHSVDqyb2RNVTjbYgzLOoxvqm4FcQ5LxIyvABACDwp+cQbPquCvKJmiJluBoGmqvMeRGGsLX/Prh9E2Uu+dukaUiY05fTm3Fc+AHP7q47K8ieXGkJH0JX7e6bpAOgDDbetbN4RUZDAH0LCEW4M7ybszLrfRkvN23M/1kQGODkSg8qY9giMqHFlioUAlOqW0e5m/LFl0UJscD3h0H3bYmUGTLEl2V8l5FoucOAQnfC+apIif8XaQCucYZSdAzEH+ErYM/LCPl8ZuVOSKycPKnNk94czNPlpxDbBwsdROejQoprZI3DCPcHeV4sKpA8Jmf1/l2/9f8/HnBw0+PJVRtSNkdWZXfNkut+sTOd81i637wNPhPjRkWHels8ybtD7tWIMo3b+BbIkuz9OUenFIRyo6DTMYuWViGgi+ApS09GfvCI14S45ly9SZeeGpkI7eSyOJDyV7zNDiC2OLfHBYIUiuwbnpP/PIC7KrxdFxYtVONf9sUsejSS4B4DH3tTyFt1scNrd2hiWWNFf3eoTx5fQ1xl6ajGshRil1DP8DVjB1ppTKlNwGXYNDA8EakbbQUz+vwl3OT8blIjNb7Un2x+Pmt3W/wERV2gqXvmQK3tFyUMK6+JxYiCP5Hf0LU/rB6/vJEfRy6MM1rngOBf8WYF3SlhARUCr3ugzcB/RQr6NRK5zv+VX5A+oIjyiuEHwlBZ7/V2Banf034dJ9pb7YeHiLk15ax7/Ks3Igfv+qNhMRjNjyFZRY9gbm07WcbZy4/mZov3J1fn5cpL22QC6w9e3n1EMYntr0dTcEiRkkPv1LQwE1Z0MXedkAo/Ic/T1kniDIO37MZDuiRWqAW7ilgiXvHulWWee8A6i1m/oPUU8EP7QiswI2M6SwNKrV0pQvz5sD954rUOu7MdbAR4Defq4nrd2G2NTAxmCFyu/XTwGfLWumvlTBhcnrn9ATna3KrDbJ37WfcW+ArqymSa9950Iv+6GOGS5A3bOfKVoCRPxncKrNnziZrr02v6ZdySuDTIvik/UCjy+zJauu/5kQMzKzE9LTsFD4NKv/KrLn3wLMznR7nrMzkr9taM0l0VrnppL/EC6rKkj4t54jzGDe3Rm+29BmnhoAj276Jjow/An7WbZQqw1FEPggGZKtoipXN4n3A8Fb+Rlm4KQowPMsNMEGf3bDEGRyrBZyPHQ6fZJeLOnOrGFSMwgSsaFrFtQ0lVmf9HtixybxxL46QCqCx1evt4iWrUUCCnoVN8bBlLsFTKO6DQe0A2tObadPAQIje7JPCzAPZp6gUpXx8l72aKdmCJ9swbDI4vPH4dDsKYxawP9TqQ4XuOd5NOqSsWJs9Z6QAoMmX6Ucf5IDh/DbbFdSW9gKZabSNN/pypjQOTLfOEzyBONA0VUa4bHTu3Y3lmMR+9dlKtPlRN5/cABsB+sCuTDQXsAnfmwi+qa6csLmNLwFBRZCOBKo1cHdhwX4kLn6aWerF40ctQyeQJdJNhdsU5U7z06gw4u3zqZETCBOKH9V0Nh/QR+vXZDaPqeRHOJB4GBvA61IUas8w+duX3Zsld6Qbfhmtj6CVRci4r3LjZubfJRZQPosU1hRv2vRszWM+W0OILrqdnSu2bIfuMrI+YDoeNllu0DJIclIV4k50Cy6NQOjpnKcPAYAj6TLUeWjpGFG8EXxH+msTE0h7sCcYMXmZH44ZnqO33GocrD4tkjpAdInIhXD/2LUMr75Vg5tTkmT1/0RX161kI3iJxTsVDHpj7ZvNDVOVO44Yc8mJ3pm5Sf8r/UT8UlVz8VU6ST4dPmg8pccA4ZLOYbqxJrX5zaLJmkgKzaAQpfoSYUghGNFcUhzolONzxHHXgPllhAbSM3eV7w/iEXjMGgF4h7P4hakRVqK3tL6IeDiCf1LwU1tT8TpTq1P1sajn26yxdr+2RXCUz/CpG214s8gRgY11lBA5A4/5TKA0d5aWergBnFaHnGz/vt83dGJkyHJi0xLOGucSulFrg1/FeNfbcEw6a/0fdgq4XqgOLwcOF/JXyuxgu4tPeAWVG34XuIJw58x+R/gNkeQwNvlu80AatkCoUby6M2RJDBdXdrr0AJSr7FlofsfYNKSHc5XAZa7uvmDEI7ZKKLS4vT3lRRHulcvmZoHYR4sBAUd00v3CXptbW8vIhXuO2CsFsJ+yJQIW0lJ0N6TaMS4P2Z6FjPIeQcNZJbTQ3S52LBTv7H9I3MJ0sRCpORNIO5+CDPi6gpqT+3Qo4mYY2GeN9BkyANF8pEIby3fHcQiFM2Dbzsj2l6wEdpe9oMpEsZPaNJa60nAGdXReuPJJ1/gEUMirD1LX5tzDoSb1mZbP7V1/IdzM7c9vsnq0fh5+9sebXY8jpRZRbYpNWpcFMwlnHFu9nGPNZaL/QxLtnFSg/RIvgLDwABGaV0BTfVwvKztqBd5PtVteq7CLT2EWFKDnwFYqsk9xzhCuYawWX7dLvKQLsYTHTwH5hfK7T4izOzLGWV7w1P2vbS1t1QRLoRmd8pBF20Q4vLxp/eTtYMO2W24swLB7tkmpEBbBSGGcaGb5ewQS892x9yWaXX9xyRIjb4OD/Nn2oXKyBvV4R01Fs0HsVPKsF0RfWx5ME/g+29iqUxqF5/PoFOFe1KBIr2y6prmICY/abZbH7zMFzryVVXlbY07EsAEHUE3mpor48z3fdW8ddHvJKqx8GW2VOFdL1/TUdrx48ZhHn+OGUPdwIXkjsFJnTk0vn64cJStgp0L5m4AIKNOnBvI0MZFt9NmO9Rrdo8Ufw6Va2ZOEKyVAXdFaHKo8q1W0XNPWduDdmi88DdnL5soK1ykS+7itdJNxQiSIiZXwpAgW5mpeNRVFracpV1AHhjsTaPRk9Nk5MGrXQwOiHwzoXuFwq8jw1ElO4uKFO0OAQ2CT9Us5jXpN/Ly+qfo5Q+lDA7kV13Zp3QQ1WDiaeguoOK9lCE0N5AhyixYMx9OOjj64sTKVl/sQwfGaHlAnPWMLi7DiKKivEzKtamDwt+jB1Gg9F96gIwFqwoTE2+t2sF3coQXIaIDrvLdIKLkawYy5IRZbtiO9Y6EYDXWYN95yjzhMPnmGBr5Zf0a42XBKM/Ck72Cad+jj45VnMpvaj8t1/dWgI7dO9HxLv1KZeGfCx84V6qkdtUJjjJILw8z68FZr/WFC1VoOCSINkXNb5/gVpZN7iJJXfnoTGEpPXYz9RCotC/9UkA45iRQT/uA9EGWKDtG7awXZlDW5k5iPgJyF3+uUJrVJKdtQEeUj2znWV5HZ3hDe5FmyrIFhyTMF5ICCcUQIzIgvyjw9oaga/FzjRDAVD3UTLYq+39eyQv/ZsyAkVAe9ktnBME6fmykY0hQbbq6J+5CneBUeFMaTxjHAY3vvuOEluSA9r7qiC0rt0XgU2on9+HH768RULx+UfLpPyi6gBLUFr/Y7gk+zBy5ikiF+F+bNR993ZVk28Nbw+m/2TvTTTBJBidGCi8Ne12W6Ri/6qegXP7AfUJ7S2dzchhmvzMRKkH0uePC5juJFyrM4UcZh/h4phpX1w11A48CuWzBHlieiwCECBErqR1f2X4AOzFrnmyRuw2BUZAe0UOk/PK1n9r/Quka/VR8jhgTA7jNlFcGTObefWerby38Nm4JNaLakNrzZ2fsEOoETbF+0t8uA39nE5ObfsOB9TkSPZO0AvACGLr8+ZiOz+lOvcq1iyoMEp7cpvJat19dDd/61SLJy1R5K3mkkQOPjyZo5xR9N088UKaSVsOl/sLDwdQ4hXEun3HEhjoEH/NossJe48rnwJ/u4WyaghrM7rYTWwcNDwkCuXYbj7JwF0AHJJ9VWolozrI4Jg5gprveOcEKyLFAc1ZuQPMjg3F1NSTEROVDrVNsps6Elq4pjD15wncPiIZYp4gOi7g8I23HncsHF/x64lr+ZRzY8e3AoQ2dn6dACA/kAx5lt5+OCrlpcLeqj3nRqo+XAaOs+4ZMjrdHxpZjZWyJnJc89GFDChjbfIbMERGMgrDlkyCk35AAp7xHGVnm7ZkickF56up+RuHdrMOOtSGSqQcdBk//iBB9GV3mR0iDe9awqm25/lAbmnhaOzExOfDTJ9zWGN7unpVccPr6Vn+NmqFN3ja17s2h6VkHk0MkekvP4V2F/8zd6Jm/eQOnDesy5gUgs/xs6M4UD/u2heURi98Qkbuysk7nwAWIiZeDdqK4Y7dD3BXQ+JHbufC5WCdce3U+gITgxAnthXifWZwP46PUJ8zKaJ8MrSnW/Q77VFXYdjKYTfbofqzDJvz1xEj05x9L0CfvDqAj3VViLrKaQwgG5bRyCMn8vwwTVly1Ch62bAPD1xjYmuWGMXUI5b4BqXR8hDv5m0YfdNXAaV+6zip/67Ek/G+TVgClzIiZgb1w/O9azHDJpEjzm+Fq28s0G5OtdsZG1kntIt6GEQ2d/waUwWe9HN2JgsHnndLjss2j1aBCzMfyCxbCnQk4VSa7gbFRr5onpzkgWlYi/zqZPYmozjJh6QXTt/cGpaqsBqGUPX8papS/BeYaRqVUWmsjGQqA4N+44bG2tJOIJuHJBv8H9ytapEO9MZF37Pty6ZRqmFSJ3RaDxi69EYE3EXnyGfpZqghpNFyjNj9hvoQAQ4Iv2YmqZGWA+x89LSNJXCAiFpKcZC9tZoS4Ke/AadfkVKyA0JCGNBIdDctfhDQ9qZ+mAYiyg0xQoysTp0SVYJWQ5h5y5EIwWT1UVbwq9gd97vn5QhSWJQmGut6QSsXt1ZzYSqMDHMLruCRxa3G9+pv3vk5Oj+XqVYb5Vh3/hnNwBQL6STr6nKfd1f8ZG/k9XDs6eNJqHbVGrN9pyNTxw5Skh6+V9vUceWppjmZBigwHFuOZSWEociuUu2IaAY9zP2FoM814er77wNVXinTOMWJtHZY0Gycp6ltN51DV9Wdiw+g+ZpPkAvs/gou8g7qRXPZHvjwjJTXsyT/6di0MiBLZyMAGTV2ASijaSmUrGgjbTPwuU7pJkIg2f7nA7GOkSKwtNUd9ecLOucIMa8fCAYpBZ25WV4ma+iZSzxFSVVwmAuOylEgsW6aNEIek4BHL2TEweRe4TDwaW+BZYNWIu+h1usptMdYCOVrTEzQ+8qtaBNvGT2+oinn4VuwxOVHVb5W7kkA1Vhz+GSMPz5IL9LGRDGXJ+W9S1NekeQIEMiy/9txFC9GfSE4zPya/EwT61JlSjVMeo2CRiYSQ6FiIfmAadRBNq03ozeyfUh+Smglqr1wVSdS/LD9fgxjv15OF0ibIgwRoIGLs3zlhz/f8dU3do4fWkGYwKLPczxVHhq5y0P3MDB5ZStiVZ41j2cGr/DnFS1MS27vVALaoQQ7SRSR6m1rZSxrLrpDhxKfrfePowKpfNXdks4rDnRomR9RywtbP5ot6GGIZdaCPx7VYDDcgfdzendZGlgNGl5N8R6VMbQvla13sNAHv/OwdDWrAhgRxC0Z3zITEfoGgYL6Ss9msax0MwbZWYqU31f7ogHunxkFRKpdKFERLfjkRMnGFs/GfEZnBc1dTlEIDpk0j/SNHC0tZuby+NSIT+ml0wuJInXgyFCSqcTGzOxgvvoYzj1drOgLc9dASdTkxtT4MB+MKsW2g2ADOgl8AmUwzypA/VaMc0bAwTcbkK7RoSuDm6iwbrDd/t4Dh/VFRXvGeIJt05sL35Yk/OtHo9M1y+/TS51uefXQeitSv2sSGirR3kUKsGzI9DU+PoNxVfMiHQWPJgn+BrVRghC25Vy/c7olCo/8UuaPK0wY5T6vA4hqnt3qBHO7XKNNc5lS5gaB6HiQ1tkVChiVNL39lCHAvHxHI6aCYiBbsTtfvFoaMbiQToBk5Up/6JATOUFzSqAC2+OkBPAp6NDDTrI1uyysWYEEKBOvy9X68Pd3QFDcir+kxjTU0APPYdk0LedRc8OKuCm8ooPomq7z4feRnTipNzz5isBmxLFAuoJJOgLXkxdytQLzZ5RRV7Nnn/NBDTe53FZxsLv3kHQKzzn3Bwd8/C5ItwVngtttwHMbC/M719jZEtkyoK5AC+kGaupN1aEL/YZDmFDUrEdTqZGkuMkqKOS8SCYUbxZrlFb0K5Wn19Ab349U6xclOtWTw74QWvqL2h6m/kXlN97ICZbPZaY595RrAUvNXYCXB3o03OfKQPEkj5HYTXHTDjI1C1ceqpA//2ZXHS2MU04IPDC6PxwH/40ynMSFa2SZZlLnhP2igUmT89AAM32KvtqlUIcdCJUaOwZDw4mSasxig/u4IZM8y2Sri5AqV/dyNIc2EVsEf5ZrQawRXao0DgKCmCnMZUjDsTcjmu9yFpmG6X4zbuvi5ftxK+ArsJMgGyJZt7gf/D42D2sxevga7qXmOKVmCf6QRTGIIPyZ40DyrkXu5Z3oayVfhLQNsg9Mkh44QBKGKAr50EIfv5Jj2UBIWr/fMSBRFkkM67WMloCBeXeeo4zETc5kyQRft67oeJonEmJRnJLw4Eyfso8dLdNMGBONc4Kl4IitA4oMgeKwvs4eOKBlydpxsiLAfJ8i+G44Z8T2gZkl2z/LOpPlDIjqyK2FyJShPxFPS0HTQ3fjMXCK4t6Q1jKAvMobBMxdRwBAt7DnnyWvi8prPJwGODibC2zbE+3xnZ6JefNIXoOl9WOtniVG30W2TqF+lEQ0fVUxyj8rBd3kVc49jc+1d4xZzCL3Vid8yaoAbN/BO//YXjfxrser1FAtxb01zVKWGOqizHy+3sn/fqJ5PEDbXyg+Oob2OKHHywVGkb2sO71XeTkls2kuJ5qPhUl2pNmgmgWwOq6xOwsALlgwAjYQcCEWiPBxNCkUcSN9xk3WHgedHaJU8Wi5Ujc2A04S8AfQoeyvEDytwi/fLIBGQXlNWQ5Nf2L1bfi3bi1r66270tmR20hVGmUBHRxOJGTZ2xjzyNrCqCjO4BuYCpBiZwqdhmPtHHBvKEnrU5DxmIOOOkGTj8jCaCqcPbCtFY5MhBl5hGSo9NhNQvkgTIRGrZNpniRDfgXfXm1iw9R6spToOxHqVMwaUp+w7RGfTnFWnoPj88RgUU1Bo2qV0vt2ABHuzpmd06oJ34UoIAtbWXtD4R5kgEM/wdiiVBXCmrcKL0snESKYwzdAfj5JsITjyoy2qDDLpVxdvG/+EBJV+VeUPsYAVSztJDa94Rdw9gKEmq+E9UbU1qHg+KFRrOSdJmtCWtmBgoBaqXZha7WF5EGUPbophmI/5bELOisiqbyLe7LY9cvGmUQtmfZ1NiUIVQdXET9oGRri7l0R394CbTS60L/ZWaIqcxwepVzfcaFKq9OY1+af8/576HYd4K6q2KmYgXHUrKbqlJfYEs/jNThxmWgNRN/ApAFwpYadRP6D1FFul1xdx9wSPeNCwb9ZyxPRcngcsIXpFsCp/8roqflYgx/g1TPFZH0AdbGqMuPRfoBbbxreZBcAYoqU9YNJExjRFcsYQPp0JKiijldZkjUyNBqBTM60gh18+xj5VIr2j0Ias+oF2o9TlZewKyENClBGLt7DIz6AqjTDsJ1fKKMHH7o3LQpgyIMwHOqFafjUUs5J3V2n7jhuh7n1z3o7uxBVn7fuMnnMQkc9yU5ZxPgGqdYp1cBccTnbbdhC8wEEdhzSiTgMeHz6AAss+DhnB5XX3fW0uAykHdMQaHvbccqYYO8Hq90C6pEnxi7C5YVF3WRivW3d5G6Ka8+NIv/ncSwzcY/3YbWSYOE7Y+jwMeHFAcDl28mWW/i6m/chExLVfMpXDPxAo7o5JyWZ1fmONDKD7l/KwwrHIUsmCh4DblIsqFp4sqbITOg/OEx/7gUDMnrPPGBE3wcajMQL/piAAoQVpap6W/SFYG5BJ2SzZ/TjEwfXEGThdBrrxl1NDfcKDbybFuBfEPmK+HwKI02niMmK076cQC2NaP4VpdSxQvBCNtrG3ChsAzmxEmq0KBsuRNA/7wcxU3P5HYr6TEFjD+U7r0ukkhgnjvq1Ula2Av58uO2xVCA/14WuiLGMY/sEH/iHhPgwsMbXcr9wqP+P7yuUxvx5XkLziPTCJpXOFsRWFHKxbaymcP7KQHSJSTRGtSYph04MCBR7MT8w1NfS3jBikA/9Sqlg6WU/lcnlFVKXs9m3uQjylp5kQMKoSJCu0cdY86fY1dK5PH+KM6D5BFv3b4js0LleGBcXo/1WbkMf4g8Wvtoinkd8QyMUwOC1nxeU/HIpmrEs/ohICJvLSzfSkJzyawD2yUz7PncLqi2EjO9eSVWgkkNuvcLoacnk14YKTjdEwXGzvHVuwrqL+k+Fz2z59eDZJM/qgX42i550fmcRC3IxwBCHXdyE0oXDnNR4xhQgm4UU+8g+ivYu8HnA29XnvFZGmIah8CtCPLxw1936LrsVOef/5A/4Z/bxcCo8Ij8j/Li+aUQkBOOCNIKSs8eDa/XsgbyAwFy6cz7w8Bvr/geJaahF99TB2bkIZ/Ku0PWHaLKjsFBUlx5myhAyQKHmtDkl3Mwt4sXeFH/+nwwJd4iRIEv3CJYDWhFoTBxIK6Ebw/3Ejwcb55txFIzQ6NbzikNVQjj67BTByKpEGcsiCiiZCU5cQL1eCa+l9Lm76oOimEj4SUfSUAd0JqLgFS3S20Eh4xALtcvqPs09bj48M71EulBrEIq8Mq9jYY1zdFJbJY24FcabzVtBTmHO4PfdUl7GHAwNSWEHnMfSxiGkGbsoV+py+kLZDMBOH/9Pm96FQ/ZViP+TsuZuAjEwvTDhYH46MoLn37Hoz/k5eeGwQAuqNB2fDzh5mMKqqSAQMAOKMLq3Psarr9OUqrq9EAM9v3NAL1duXv8qHIUDUrcuKSeK89a5AShD3h4Yq3LDl+rqpXNoDYhZTSZYXTqoiJVrMoALXFsRUpn8KAxmBoBb/wfOUngzK3yHE74bwJ81aeSxqI4DWEwlzsjTrgAPwdVlFVnEvzg6p3Gae2/Xdw/Z8pAiJjM02SMtCG50JnLd4suateMmwZQmwFdPJVgIgVBQ/F6fjXv8Ja+f3wGzrLUOt71DXnbEEVrLaGfXs3yK9AB2zofXSuWZG2wficMWsBGbQCwp51WO23uJRFaKbFZWkStf9CdnzxGJBrnu+rc6c4qMgkTx+uPhCV2LQeTbKim3IbJphfMFcNOyhzkS7oyhi7btLglxvfWFiBnF0/apy1rg4FIXhkn1qzZwujWjurOT5h9na6FS0BplZanZe8GJ54rPxjiZ3LTsmyL3cm2JdXRLagAycJxcbdTUZ+Yi8hJuinbMvoxJAiQx9lE5MdbuESeLaL1pO3wjW4HZG0N2kZ0F9A+M22QmNbfCjZcIZlUoiMHGxC/Zddix/yA5UPqyv6aQ9ZD56N76gXoUH1GnNS3EVPDFtLEpAL1cRrH70e0IoztacHzE6nS04B8U1VU6hr5L2rnXWNf7OPoRGGIaH9piD/0uomLxTQw0PXB+EJn9zT7SrWsXsCGudiAfNGY+pla40U1xI9dXTHGX44lSr4kL08VrxY9T/pWojok14kbXrLyKm35GVpXK1+9MIHAiU6BgTplDExdYiq4qlA5WntgLG8/Gq3QyR5TEvez8p1KyA/g+0odogtrmwTj0nZJC0jT4neV3TNFd3GUkxybopKqvtmCYb0juEUoE4BoTKvEt17yInMMd6NiMUUjEa4mQoP+oqe1rD5kp9UcFPbtmIBXWFW6pIXi9PFdB7qokZAPpigN2xJiN8sGpI8BQk8ddXBvuIMDNRCMNz6a7j65oBUOhq0z9XJB6OMLXYHhoBncMdDY8SaSMwyasWoEe9cGl6E5PpGzcI+oNAXkUSspSAUvhFkz8yHmbWB1hpJ68VqPWhXwJ7jRkY9CdUvp17OpeT/f82nn6r4W5fQbLUcMMhgRp4NjXFshvF50BR2XaAix7K+OKXZB8kXoadZ5rZKuV6rdQ9AjFmAxwVLS+XMGeuvipZ3rnCJxTdSQ5xKns6Twr+V/joaExQOoYIBn0OL+LgtdfFICLo2fd1zO2rEyPRHh4+NwT+DFmpV4kCZRFG9vj4KR247kvd6NVBw3MFvZ+cIYuHAoiCSgiEtgBYSPB5S6PGaOs/aFJgTxxT+gkpnSy2cW+/xhus3pJLyESNMVWbMqcBQCwus3XiQ1vMhpQeE37VMtzNZnEz+QxqW3mqXlMSBEpXfUsgIeYxpUIp81JH8mw6GyNulrlnY/ijAUpbwhgsi+OpYe58dFNNhrvJJOiFMIwao1axyTMOzLDwSos6e0LM1UjS1a8Z2JtUXAJwUUNosCT4cboRT+Fc/CoI5WPMk/9uN+WIIjnXk0eWdHhkPX3gOu0vdEzjFJYfgoATyEbKp/S5labj7bmqYbXhsn6B//ritinZHm4hqLzDSpJjbbQ/w9LlIxvr3HL1jR92RdOtKE2U/22xj9jV0gk8I8xYl2IXh7j6x/lPhdKnPUgGahzOP0RaXYLYW72G+LSa+34BUmkyDvVf/RTZ/oL4NfbAMTERjNnIohLMytF1rVmmJ0jfYPzA8hZSrMkPs4IpNErCjKYTE+RA0eP4xMxqU14lCQr4g6FXgdRGnwSsu7dSb2VWyX8LH6CYmyZTNPGEw5TVaECJ8JLv6adgJ36yjd6qzNUXCTAYkgUpES2Ply7QtE2PDaccPR/CA/bCI5lodl+tzxVB36bG2OBmDxIMyS1yhQ2PinACGtcJlB9qjCx9Xxs8Jo5gmJud6DQQc+AbergUW2xDfFmdJc4L/kwvbLTjimW9aHk52ppTqG4gSI79z9Q/koJoEB0MMDAidPUOurjfl3rxVhdTiNAsRYv/OrKpkNnZmpEyNF7R5A3LYjhms08DvtS87S6TzWoOunpvfhWpv2Y5EEF4dZ0MG+FsiUto6YeAmmQNiY+8j5b6zCqPBgoH+XQIRREt7VblY2CqakGgPlXHzCsHoWYzMFKIDKfqpbp+yucEmP2VXiJ8wYcIR2vnBV4w6Dfw/W7Qoq7iMSAyNalaFk1cqoOXnALAE+qbHubzO+0mq5ColtH0x9CvAW/xc1qqZD51Aftg19ITfK7zj2gBz7UURU3dsRsVLy2KcrMLu3KVj4GFJ/nOyYgb6IMKx6rsJMiOoIAGUmb1ekXl3xFc4fN6yVz/vpdX2iNcDdSSmz0Zc8G2T2Lr9CvzNW6Qz/hi8gt0MBq5QSqecOPvsv1C/8cMRUp123a3sVqHaATVV+qNMm2CHlBXCQLD92iyHc9ln+pCcWAL+s0QdtWV7/lggy/kmiXc3qiz7E2pNrVDIKmH7Lv1UdHk4gsOzeqgN52GScPBUTF2cl2L0JuAJTDF/5AAmY3RGZUnQEyMRhtMlm4lqw7sojprDSRJ5c9tBoDB1qSiIsVf+S3EMHlHfwejKoJEB3DRc/sMnVzWFme+TQEeGImixmAIee0qHA0jYXG42vP4O5ybtfvZLkD/Km0Ap4q79hBp6DKLhACDoSVmAaceQQ+anbSwmRISY2SwoLZdH52rpWSS/I1/KAzuZOUahYoyRYMd0CMu9UXwoUOYwNUZRIiToAJxU7qF5TGJUd4ud+Gu0cL1YtiY/JYX21mR5q9X4NX+ZwfrWpH3qiUpCq92gIYG9pda1Wf9fwIEDrJS9bESNzdkDvS9/ZQYJZH/qazsmcswlfLo7yCYPhUB8WD6AgUEzSkrTSVL2khf4itAj0R04PF29CdWl9N/k8eH4KPsLBz2kGZ/OibxAt5aSAfygGurimS7DLUxsDXpwLCW5MALIHZn2Gg89MFkAIY8Wf8m3OnZk0k7McW/lZHvaAqVhuSkb/zadBaFvSr7FjHMNtMzajzUtf2skzoP7Sc7ujF3qWXqaZAJUQAJFwqmoCss48hqX1BbFQdKXWS5+sxUBEIH/pwaUD2+SsANTq21yJdvUWfGtbqY/MIfx84W/JvCwwqbZ1HyElqjcpUH58auDYgjfZMN/mz4B17TVBlTARAs/mF6aj5FeLFUH6RJlruolIhwLusFNOoFzQ8FZcBEzM0OMPiOiG8uTtA22eH1o6G2C49K3+4tfgkhdudaP7gw1m1WJBMGknlQ8r9doMqtg14eKBfHDfZAdm/nCYVoj+LuRDg/dOuHiXsZw6AQ/tCK0WYOEacWcckFehbMpCD6nv59o7bn04rdVQnAG/435EUm3mCztyEFnmtPb797L/eZomOk2AbsdLcyJmAFHhYyhZfU2v6/sxffBoL8pRXwNw8EMjMOxoMBJr6sKGIG2WUR8c9pOayaSKamn4oDeDOf9Vnq5K6UbBc7o+3SUKwFliTZeIh2F8PrT/DWQCmggTl52YU9tJyDTVw2z1gIXP2AlkJZZitMnh+jxNQcIVqGuh176fSCvQDIoTfhltdSdpSbP9Gr+OQryKkYbe98RPTOpGnfrrZrkY5Jbjaj61dqqXaz1Ki5SiDJ64bjKqr0tra0KixZiniyfRYJPdjBC62iBLaNKskcwiiuZ2ELYUZcwR3UMIbeMmm/QuF13Xx4j1P28b3ErhHMDUmiEo3pDtPiUOMdoa+uZdsk+ckE9A5HbKoAX3gQ/pFnQwZdTMUjFLye5s7qsqhbifm9o6YbOqPd2y/KybeSrAeO1x3dmn8+ih4sl9QXpjbZQOFmKq5dYiCX3ftiuGXQ+J+ArnL3n1SXZ/2CLSlXT8iecSpdr92VVq64SdGQKMR6Qe8tNblDzuhZd7xJ5F40rwxMBz/Ta9ko2p6Q7cuxDhcV0xiho9bxg+Pbx4Sd5m/N5F2nFUQS/FSo7jNzh4eesYU/uD/eCjm6oiRhCfURlycape+nA8lyhaC62p7krqUMb7AQe3CLEjRxfqTyt43Pvl/YByFxJ/9WtKqqHUSNOMs1D8Laa8QhMpFVEd3Co96VzJ3MzzUl9XD5l6SGt8Kj5BjdJsB++mHMDNhqPdXjCIgZtBUtWkom6lyzGcdorYKT6Kgh5oj98tEkYQqg2w9fLFLjBRnXoEvCAmnJLGflSWgnHQ2MdI0b6jtbVMllKiPzzRtahvmep6jO1fpXJcWzr3R1DfbsNH7m/FRRBSWwEpuoBEB0gUIWFvwNouXsLz69M13QqBf1KH58cxcxWPV1dTBWX8rS5Du75uBJcJ8Ueo8xqG6aoKUkbOLYb9Zk3H9Qd5mn+pwRqNblQN53dngioj/5s61G5SMA/8L6rUco7Waq7UffNWbhjTcKHDy/j4agEY1k4PLgivS3ga/PpskglYgqfaZWuj7p6MFTg+zDt+urvrm7Mr6lJib4znNiK8/0AmMaNq47rrVVK5dM4b2ntr8GhZc4IQqEEdVcYbmfDOBe7sACEWD0toYyp8m0xPWFGfGsYO9gXGf4uSABRwQeCo51xmxDvko9Cn5Oi4Fdt/XfwxDXpE9uPUY9+oOQrH2ECNvDHEmLE5yJGDEznQu/1E08sjGRYNibwx8GIk7FFAjZ4mcJsolhI+uyf25FRtLyjHKaQ5e0G4KHIjOUqult13pzyLnW5elPjmOf0gIGi621DG3Y3b6K2jVhkSo/BAjSJUAI6gdEdR4gXPFuuB+F1+xfz7YF0DFa4JalSj6NJTQlJVPq3FwUpDChwJcH42L3kdeJbUdJYSgbnlcmu+p1YLq0jW/I1kguxtcoXgoC2/eRIu1AkMwzm5qezylMz+gfIxqTizKmp7Ps1j6zyOKbJ5cRHJgQqsA6PBLF5kpI/NB3ibLDyOjnQZGYGpK8S0jUFKwyrtnYoBhqlLaKJ+VUpOOLt7sSQ5PDB96lrvLIizzB98amMcOm6R6qWg8i3kz5MmnQaa7LdfQzx5Aoen8qS5vfJQnIaQGGOr6NagqfXs8mgDaxrkmBMR8478HOog1K4s6HXf5Xffah7M/A1FUIm+DAlEU+O2lJaMsVpvV0gKM2jh1vlgpEPPvNQop26ENnMi1aP3Rd/QtqK78Ql7MFx+xPjZoEZbuPES5t5KEQr8SSugWO7Byg1Q1pFVlvFpS/DH8OW8y9btk4lVXqWhCVlne0rZAREEgAPBHtunv/q/oVgdLHFGpmjj4jds+vy8/9XDTrCNvXGrFpmsNZCH4+1Mcepanwux85ruMIklqlVG30ho7At9xOJFmNaYnnZo26sueFd7lPW/tklPI3Oss6MZOP7tOOho8pV4USK2diI6dCye71Y/4RLmqDpk9OmJ7ww+vGRy2nZFgKZq+ruCAdD63Vg+1c6BE515gT1PsN9F+lo0+az1dlIc6N8kjbCmwWDQv5EI72UMp9ZJLLLxuZayXitKKrgNfXlYBxNQiBjL1sN7IXggo2qSns8Cr82zik7GdGtEqmdHOBi8lzufle/nDzrMTWbmxsaXkyFTCCf2bhxkP0AZ45D0pDlHKH14fVr6w1qenG8UkIHWpePprnKyM9Pie0oH3ZWaCW6OpDb0iLeVa7jLSV3DcM37B5FPYLaw/jeZUWuQfIBfFbHZjNdrsq3Fn/eDHLE29nbVcvgA+tyoi2/EhXgSeW5x+O+krzk6mxmSucs+bZJV0jvtV6sJWJJ8yu30BKCzf6qDZ7/grNCr6zpICNkY/V6gbzCZnQIJXFJjpuMLlBO0MjSxXY1FOqEbIt6i4dcyWz9OZkhOge9aul8lL3JofiX7LegeY+KQxhB9n7gt5/Hl0YVmaYYz4rNavgbP0jmhzQ00QxMxto2wM/jSeVopvzbMY7SlIlZgcX7mjNpRRRz1WFmFjuJOHiLs4ws0fKvJxf37V7hIMXS+gAvNRLjmaB3lM2Vm6vbjYRLLVF/Xnr6lCLDfthkFUTy8WJzsDhal7lBM2gm8YadFVCOz46z/1mzzmcNEYfu1VyEj2FMqFMbotYbXZyNcbqO4y7SeREGNF1/e7tj+lLCWQAvdYNS34XMz6OdDsjymUb+bo446a8TSeGwvO22A8fPMHEvvQ87xR8kteSfPQtghBpkyHbRvf/biYyH9IsOTWXqmbQLWz81+F6LrbuI0C0F1fxBVvzLkPEGHbAvLBT5y82PHwoSSSolH1NYuBS214Us1q6O5Rew8WRV2N7veP3xCMpKFPVPTpmkoFg3iSMbWJIDkC4eUq4BGPmDhf3EFM9B1zJgWijnhWAeWteWBXXJdP4Cvh+r2UGfaTAvvo8zq7OO8SHVd/LuT/gmGHhLlUEzFpKt53I3DkgwZ12DBH5TpGdZv3ANvTlE91gBUFPvPr7C+tVh2ip7iCp5mVPGrrEG2+jfeCAolpKAODI8+5vziwzJuwjwYcgWd33ILevbm4VHXL7xisrdD328cRD0shlzfP2xXOkUwcNVJoswydYTTyg1JmQLa9FVfph8RTvsh0xxw1NHMgDbYPfjjEDrXPhFC2Jta9zSciZr3AzOSpVAXf6yn+PDjySfxCVG1eTVQVTTIOZ5GY5saGuzifyVPiB2t7ECRPFlaHO0DvAgwlJnRhiBn1kzvx2FjVpmId3HlayodQllWtvd/DtXF/bIIi0BL0i08XDK0O2Ews6gP9SkeQmc8CRjsG4DI3DKEg464ZktoVJUz3FYngeR1vh+WG6uQfs13ntkeas7Zso2hzV7iuxFUao1hI0uF5W5Ty8DSu/DWk125wIwM4eJXhSKTdtCe0yOeQtGn76st/P3Bn+Q8SpWco+Fu8roThAcF3TOaA1aVO5PXJPgBp8UNRXyAB9tjDHuHZxm9PBrYBtIX2lZbaIks4lZz34DKt6KoaxsuxoA4hSN/GspgIHqZFfmAGohYKguFXYrzTdGGAvfksLcd3/ROgw3wTyKTcpR0e574d5NKLe5VOBIGY1L/bxsN9bHzDkQvGF8Ce3pGAztTQV/tzWBNdoyk3rcRfvzE4Kdm82109umMQs2zpo+rVj++GSACSEEp3/CkViHcKwgN6Da+QQCRHlMutKqdSABxjecT+3A/yUfZ7i4wQ4EJ09auquTsRQttIX0QmPbE4SvaxDo07DxvJ1qlzdMtWang31Qfh6x9kn6v7GZhj9qH1o5I2Z+kK1i/Iq/h0T5HvCxc2FR8HcCM8MeMVcapRXc4LMkmTm8/YO8ccqjYEKf5oOsS2e9OeDSI4UtVOpqNChOzCCe/BE1aBlzJmKITm5PsM5x4EXIjOhguuNiJyLGwuCTIw17YnzV8JPlLJ8lU0J3QtDy+OGKiwbxQuocXP0/HuUvrYb6mOsuxVhHpPg7cKLr4smeR2kySkwv8Q9qOmlUNyPMcnxw1Jj0zW9g14qsk/Za48269CfrCdfs98Hm8zAhagD4Aw4VWHL9kE2U7trQhl9fl24tj44IvEecAV8c4m+zIKmB5H/fJ27sy3l0lyD8AVijyU8Rz3DsnYcpp4C7Xi9e+ONWR9UiwBtmRoBtpSKKDUM2r3UT2ZGWPsYI1j7CCvUWW081+aOGSk3ga4nZWGTdx2ereWSMVI9tO8onil6mW1WX3DxRMJpZ+R/FG3I3KBXMpr6cVEPnAPkIXF3x423PWhnMBRWs9dzZt3767tddeD9Rt0Vls5jSA9HLwttMrq9+h9jCnpZHZZRvFK0vqdOVdUCYJpFmIHBNa3pWxlBCqcRyyb/KKNxN8SpHyhBV37VIfkkWdTFTRZrLBdiLo3+7h8eRNBf8O/esNrdKPVPYDxQYrVBwjFIX8M/cYb5rZRd8QpeZa6PwuXvgIGz6a47nuFhr/AAabMg3K9tPKWWdLCxoWYKZIfEXsk4Va91Lj5dldqPDd7HvA+dFG9yjPtoeUuqlinnPAlg1JdBHhmww5r50Huee/NR0P7gKbp7J41WZ9/uY3K5OZBIenervajehA4ka6fabXmx3SQdMTBaQlmSm6dcp2DJ2H2nI/0QW5sOFW7yLSuLxLMOfKbIzS3kYBae5OzUfxK7CE/qacgdaEDhonTSGW/imRptCYo0xlkG/L5IMgdMRQhoC+8zkyMQmp7yTXC3PMLPIu05XsFteBakpqxo/Pnt27w2MfjUMl0doKYnZO8oeCucbpiOZSfVD/4LEPe0Et5s0tyD31sLp8dL8tyOQ7L17Qc8IRh/eOUA/jBVQAhqPvZNBrFvfc2/u3kFn2A3afr+7oWeRYM7WvkcL1LPKLo+GOzQGKfb+TuUvl00MjtYCX7bQYSMPa493BpBH/o9BMhyh6dz6qkKp1Bgvvo3KHjrUsmnaOLPOMCVBQS0m86uSX6Wx79Qi2MZgfcMhBoo3rQn/rw2nD1U7rMznNkfEh0qYN83aKTKMSp2uyj7pNRGYgQ8XzVvs7Svw8YdjOIQFLylOd2T+TcALQKScRyiuyd1+aogv4CUHTtLLYGO7FzDHUIGcb3czQ3So4G6VH+DPjiP0/z9IlZXTKWN8DLhuy3Fu2n2Z7KUq9Bt21t79NbMflGSD41to0hN6XCgF2xa4XvlmhKmToyF8fUMhKIseCRSeu76NWkbMP2Fv0SDGT+3q+Uv8C9i7htcCyC4aj3Fw2xFLJhtMUMkLTAYKZiSJyEYmGeBi48LBSricYoM7IqwBjb+A1LppsoIGe1sWwr9HQBSxV3OjRKV+bBgUISc1lbbnJHYLzSasixXwi3TBqRWJK9rfwbxaCc/dbaTMd8XOWNH/XqNdLuNRNO6bMDWfJgCtj9W2RLZPsnmn9hyM00DkpuDxx16/RzUm75N1haa19JWaJ/lXKbS+1FsUPcNY48IXG3OoywLcjSU4PAqwVr/ra0D+zBWFCtjSAccLjivo6r6TFeriZF7Jkhiti9FWxkfwAfciR7C+eI+a3AeP/2z5MsDGC6g5Qw3YD0n9fyrdxQ3i9xj02XnmUjSKJRGxf7esg+grWUSLHUsWg1kKChkAUDtBKAew4Q76dIwpOmJpKViJLDq3XuYdZzQOvUekFCpQuPpXnrDZ9Oolx1BighVk7iGsVGiJ2JLayfOMeYq2epdhadIkQ2V2MpZ9KTckP4uO7dnv1LafZI7Y9OLEXCNpHBuTxbjgsehwY7WgBFZhq8HW71kdGhKXBZ5jBxJYwPjQPdViyM0/Ew1jcnF93eBoopKojgTJ++vBDpoIxwUz/WeFJF0DOXmVgAbO+Waoul2AuoHDUSgGrUMVkxiTXa5Rd2dqkt4YQn5UuYW3xr4IZVoGMNR1kdkcd4qPVjp/U3Y4oMoNFCCXGtPoRZNWTudT/VrNse2KlFUV9EL5BQY4whcDnnhV4GqTYm8FgPeupFAbOATQCC+rsVJF3NWpEs9zItX0YRH7cfgklzd1BA3yQ8pRAY+NuHh3Yy8sEENFFDVd79xCXbSM5cgEwiABMmGxXIQWr9/xEEZoMhFYWpLCbevNT8MXnA7yydmiZ9zSO61kkI/nnaQhlWieGk6LfhLQz49SSh+/m6ohP34ZqqXucVG0ee8JOzHExNockm88VAKJ8f+9kRHis7Xi4U0KiK9+2KyLxsiEWBzwdWHujLh8dTr6cL22njcmvd2murW/X2ovLdyU/xrDJGE6Np24YD2hCo6iD7QS+DBFdINotRL55bzORZ+5y/sypWzud6XZ8tZnfpNdYlpzeS+ocPQ1qUHYNPNbbHgF7vCAqGSV0REoc+Zk+2xKg63j9/huxs7Hz/KULaG6nEGEBcLG/ae75EIwxpCxAWZHPTsWuL1JseHsmz9I8laKzeXHajjgWGoHOVUHO438QXy1XsqnnSyWY6YliW9PlKy+Gkx/K+xsgJ7LJLnWHSSaySuZGGOv2RLxaFd45I6YBnOr0zR8XPfnbKZEL+A+dwbMC/Pk4MO2AGuV2zwQDQZHJJWPFwk3D6C6xEWfXjxQYyOpCw9fcuBMx3fYY5Cg1vjDgZFhA5tKIaJbJAgQk2dehpskdcRpT9pEiXBYLrz7sdYKinOp2M6Z8ul+PSCMMuHWjtezOAD3MYz9+wJZGn+SkqOJCVtuy4WN/adOTyf2rW/tiwzuMO7VBLeHABTJ6fYLGwzEqwfh7nmx2arN1J+EqTmEbMfhfnSd90FL7VQtvmMePws6qWnMfIP3wwmNZ0japcE2l16Bi+ByEyQq9fvlZEoH/gwwU2oV0lQvoiUuBLqCuHwHOZoOo01gdrD5jqW+80cOemNmpZeuXLVwn+EanrOYc1hRHiM8/7E1SBHVfGueyKmMhuIqUFVwMgts1eDAAVBRSYShGGIWFproUHEpA98GMoTzX58vS18JjOlZKE2B8gbSMpqxqxNjCWsmxhfAU4+xtLSaRcs1nLAb1PdCVfwx0y0BIYcxvUuOoW5xmWilO0PFFoDW920i7IfaODxslGyT61rrTQNikPHqxP8FEQndCMGpKe6gTyvX4RwB8Q3WU//9i3BJgo355/cq+skcyzHIsBPoCaviTiNTp70Ra654B9v3qgMZyHfA91OaZUgbSNm9krVZ9gHCufAuvDDZEInqKmEvOC/J+wCxKofUSyI5gNtZMyWIhuv0h4KjB1z6I+Rrf4orkVsRTCSI7yHiDVIXMijYd4FiZQ9Igvixruqrt/GhKcp6p0piFAFnyxPxcl9xzKEKQLHccQlAVcrqL8Ydzet1vjssoUwRIPx00YAfUPk2QE73r/SAB7R0zHMNK2HbZRZgijDtHumCMD2nA6ygWqMLSRQlZW4JvrVDc6dmGd3gdoutMuc+dI+zjRMZvKVhHHGMw+R3ss4SbfIyZmSvw6vju0LIgw4H73ZWzakQqoIilunnQDCp9T+WaddcoHBKis91ginNmI8FlKty8NQUKvg8VE6ZRdQlo99dV9oILEclqnLA5QT9vpJD5cuSSCqTRxy3+Mb+5zzanKQphLv5cwxWAzSuKkCQuhDby7+/lKma3LF9fySmo/izR64h6NJ/V+jvdC4g5WmvfHK4FoPxoXYZFRXziR+/4Tmzl7P5x3m03yJX7XgJr6rS0j6H13LNmL6bEyhKTrj9iS8mGDg2MQRC8qNd1tmz1nXVSaDRQ0pkIVcAhEVRonr0/S2sRXG6eaO9ETh9HSy8xcZGLQebQK395rLRKS2mFI8JDKATEnBUX/NrwXth4N7W0qa52Bmt94eHU0s9XMhLB8BSXnqqvDjH1sOm7P/D2bOysnd+mKQdoCvXeOv1Ih3+BdyWyuq5VK6jVAUmrjnvLsKlU4e9Rd8z4KY/JGOsbMgS8ZImKaTB54xBxYIX+HYCOnBwP3dVwrVflXZ6v22djrVlhvTTfSRUO1pwul432OP69bP3wIukMC/OusgD10n5lu/U75XwCEu21SPrmrjgPOUnd3SdB3Lk7XPkA0HEvukmOQSH3S9U6av6Gh4XqS2tLPM0e87nfgCzY3SKOMmwYhjh5TxMkdoGRqRgMcn0yIO7FzIg27vpOq70w9gT3XVbuTs5k+SqUK8yrfHw1E1oxRSXS6nio703fCMv5UEsmvTf8QHd15cNHmB1EHiU5ZR3VNrfRngwI4wasHgHMmTbN9nyoKciLVtMf89II+dmxw/owJVAGAicsrH9QW9vdE3ZImy23fmrQR01ldSbHVldT3GKs+4/bwPDQxAdy/nT0wUqa7MtiGpy6VBPR6C64JcrXCXW2p/8snyaA5KWusXSX7VYAacbL3qa9Q2ojKqVQKZURlmxb32bOGcE+pCgiiZmkfwArZ0JfMe80HiLVz1TSEFry4VkWfvePSTdRKboY++m+9ugnzpi4CUx1Wk03flIC1e0ddaNfXMWlr0ZPXy4oaJfVEV/ZrUmRVEvz1/ob13yrJpGew19I29u0Ir/BZ43zbq8iXJDp3dKbRFrWw3xZpoIxRqfMJjOgMPgisyYTBAv5ZBAd7/m4sfPfIpfaOlQdZxc90ikS7xQS7d6pBR3Q8fv5ewleQb/55bklTFXmGc6aonNI2kpaXAJVklK1dtpIDeeh41Wn+onuCkHSfLX/zxjrY56txqgDkAUu5JWEJfl+RleRzZKLPOJk7lc/1Bm1a00XTVmRXzQu1fsQIGyZQacQSffVmpXiFhAKGBAZCtouxDWVlk8CeRJTgDMsFlrUGwhKArODXi+rEOpiCmmVp3/Q2lJFUXmxlk0WNcUNxvivdwwydOwerAM9pBJZLuAeuS5GqJJWjr+MP2ieEQq7MJ4nhm1CzuAVw7ag8HKbeLGZ42L5NtEXPL8WHAdmynCm/eOJlBHAfetfTqskNhTfTKyzR1IzuuI3v1lGKBwR5ZXm3nUyLzmtKzh/oCiRoJQBBp6zhDC0eC5B5fXQC5HtyqOUz7nPHdEaWfdQG3b718H3P+/dNd8YxjIWBmfFKJebRlv/Iqpiz9d25XCQrpAvVbw/Wrse3RsJ9dW25+ZGsUeFudhebIpetpdfJimyMbKA4O/cepK9eQDLPJ7v9zw/jOAD0HiIp0fZeUyqhs5L9I2TAXuKHsb9fBmiObcIiQJfQFq4Kh/MFWDPkvLl3sQXLooOE8y63sGZe/X4PdoZMFY3Y/McmeUfPY1tqFwpYRCYeydy8O3y6m9YLgL2jPq7wvknoxspHZYx694V3c7xIRxruYZ5exWbdxLkmJ7wquHFEcx7PmRL/GTTZ6eVll+5PlOzf5DyFA4o/JKLUssJNhfItllz1/GZ6XN/0RRIaBN1GTf2RtKarD7qjWFSiw8mB6wu3+NlcHJ2SJ6j18ya3v0SX8y6lATNLWoHDf7RN2LQalY0jFtcWgzk8n4IhZLch6nCmiv/r8JlF+HceeDUciOkNxiw8rjZvwyr3a4Isao5S//uvoGGx04qdEIKx8XN7Rc2Fk4B0VR1QU6UIpjCL4Sj0EFMi6XehccJkQ1r0bAnaHwD0xQMJFYI9H7TJlGtpQKsstiKn+gQdse4LmyGEQS7lHpA38ImtE+3VPAoNNFuYwwnGUlN8bWsdXNa9YbgLgvJOh70+dSZp3LrygCpRBY/s1hYIgOh7ugO1Nx/H2ddFnj00vaSCc95gTYd88yzA+OPvMZULr5Ud5Z9fL2F7ArvaVoFSZMCDBa6RQl2y2X2mGleb6O5VAwW2iT69VIjcVqwkpUfRFCJnUU08YmIcJUSrezb0D/xjGdpY9GLFN1q2ZkVjkzPqCvmRwvnuKFghyvbXlBG05wcn6sRVs5u4r5omvLFRsomUwiPhgc5Okc056gr0IjQsPuPR0ioHRUs2HESmsKK+wacmSikxmK4xvhjDNQpdzsCjptVlRagZFfArVi+KCjBmXh0nRdogU/u9z7a7jwpffFWdYuuutjJIBjLNocC7r0pHmmFigbQSZ2ZJEAgjXFTGyF/idLCEXd4LMvkJTBTmk+six6VULEG+2f6Rtmk5lKuwqTOmBiPgR/sCyTti9TyAFO3AGHChdD9VwxJCMDDW+T7k3eBTCtVbjCjbu3VdkRymj9xo2xU1WEK/bLelog4QHhtzJyklRD+DoVYARJ5VJYZ6nw0PGiLof0Vmh6PFn7H9RMEVlOq5730YaE3frskQSx/5xaIRyy9YogsE8hqb8do1n0U9N5dVlfLY5JFQUDQrDpEzOTruSiIoyBFvJJ+K0CRaGxfzKBNlzQWnBVntvFu+Y1/QBxJHUCQ3iwbvPw5X8lpNKAHbwKr9Lez+PjiTFItnDpfc4bc4wDfPYFOgUAgXzw8usSv8Z7koiyReflRYGaHgIza9W/f7QH7mVAqPGHnXNCySgsR6P8WenRHlABQhGnizvWmL04Xm+4s+2IlD4LpEqvIDjP9xgkUQTrQo/gCGsto7G/QdgDgMwAVbuPcaBAAvw8B7mBNRwd+y7RLoTYDn0rbErnmzXhSgQTGBERrhEafq1t7RBZ5Gg52KSWXKBvycz1k8yoLaIB8qcjcmSKIkDDLQHU7HrECX+nsWSy/91SYm7zbPysvPfKpfIQxwwUWUqRYbwx0pmwZx2527KEasbOZ7pjoXGhf2l/IVE+FTjcLyMuEaOeSEFeFnkCYS4gWQ+laJQbtMvtIczSm1hAlC9o38v0cojOggU+dXAcpNCg98Q9VBO5GrL4FqDBFaOm0jauTSAIp4N8dk8Rf4nVg1Y7C9fzXWNF/VhZc6/FRLmoaSyAUNhZG2JlcfkO4fIoQWfRQMON6HaNhpuskPVvbCjkXNuV2u2I35irrkAplZKslBVS94LQALVTDW7g0c2mUQDWz537IJqVG0z1aEMG7l/sS+UANcHAmH2+POSTYCEP+F7EBrOpnJU8fvVUi0x1t8fHZA5lyijZ1hFTbY/peygkXKz6OQOK7xc9YdUJXnKHbWJCMShEyihyX3THLk3L/+L2AnZB9AVfZUlleo/p1ezYKyYXhx49lRjei5Z89FU/FMFD//95OfJUJdXzbHFWcDeq2kM37AArClyHs+Jq9/92BKBtADXwZ6yGZ0Sm5T7lWjDbo9tGCXdhMNw96h3iRGDzlbmXYMWSixzeoHGLWFoc6B2djJD4tps2c9Yh+J6q8N/kvHIaU0WW/w04ch7m0cXB6XnZiNxedakQqrbophBC84dP2hJpu5HpjSq667BaOMwn7oqh6RxFo2+/yfLp9XF3KtGMaEPG1OzITs9X/wOV2TyQ+Vx3JklNSNPSFmcdGavlJq4PbhRVUXlJWiMQ+WFdUgWqVDQqzfiVtM5TC3ZTLd/0UyqscI7sz2Bln421cBgjqRWBH3GYLfKQHoN9ggxcUvMSiHuQdQXEYKWIZZGejVwapdtfqAJGXQXDuJpAIYbJSlt/0eZKKNRa4LPzC4R4uOj+XX9sdDIAAz9o53/4XeIpPxq/beumzgqLH05V6VglCgxGg1g0IwJdCL4xF12fhX2huwHfem1ijMOrzhWhGZAgK/o+dogn8zty70NCH+vjTaQWsEwdih4Wqh2ZFGtzxyKrIQTq4SKTjxpPYoFyEFpSYKY1HbbDNoaQqW1Y+NIaId0H4mzgZWx/HZ11leVtDqegYlJivIH7rFuiTyfwj9FmfyX3m54KzLjQ1OVXo26ORfIvRDRHgpI+E/oFmxxUCE94TLRQH9cTamHuCwr3p0WmBCon7ZcFT2kar4vY0aM3YC1jFFcWyiR/+5JLvl7LruFDZfuPpwNHV7HYI35eTjQ6Np3SDi5iekKbh9IpGmg2t7fWj7QJqSqMkN3pfOk9evtOnGp898X7CBnPOXWR41HH+w7RoTsSRmkBFnPJqVfZrvvqZgp16jaBmpxbqX6jOeUCC9DcjmMinsaT/vWOh+enfUyLxd7iRMF4z87I7d+xzK7R+PbHTJs23u+MjgPI1/1LtnWIlIQfLndAEMW8Ykgy0EEc41Jk5YHI3FMV1BZ0Ix1y6+vdcTFbec37A0D7q7v4tC+O/bMxKN8K8li1L6Im6Bw7e5qiucohDXR3CQtEODmZfrouk02tUoaMVrgLuQ5bXL2ziqsxBpUVXeptbiqa+w0gzJ1pIILwFEqpCBMce19yTJeKMHVaDFSiruwyQwmpcYbGOn/YIcQcRQ4/p/eQOEiesOD6A+BIaUd+Aw2j3z2eG0h/1BBmPkz/PxpKcPiAJCskK7f4/zqscfnAF1TbVD6uQdQnS9C0YBSDaOe8KOU4clpLyvwj9DvrtJDyb1MjIK9JpZvOksDHdLAkFSLavO22FffyhAMr2I6uqPUj3RomNVgSneTE9pSNYu5rvIAR4RBAY2CnL5zqCNeDvWkDKMBDSmaxvYc3pxOB8IuoFzMOKRpuTM4DWhg5CYV4ldUadvDUiGr37mldYeANUGLLBC+TaYBHFd+GrNxWeorJM0jx48khJSwt6+g9ka4mVLMKD5howx07hMfZGdPkBRyx3+mXRkAfCKEwwFQq5wDi+lNLBit0Vo3MdI3iK9YD66v5cXXOvtOJI92yi3CGCGQH1HaeLNWOW8R4zUewfZFe/7Y8bqh3YHL+2xxAyISjAAOlPecwfq9XU4p545kbyWGV8yvS3s/B3z2bWWueJUKHCkaI0bSHnelxoDyAVE8znT4yCrMi9xbYKe66R1PR4xso6207VihWZx9GKNdNZwDSgZir4xyAdcRrWZBYiqlkbR50dH7wxBmFjG/4H3NWy4Qpo3pTk426q5a53C1t3QGWEp9E+YdO5X2DwqR8fwZ2Ck+x7rYQphk+tFoCdaX8KMY1eEMfps51Pxnyr3EaA+ouqU4c7l3mZjrLH0MKAD4IanAhdvdZGc4fWonvvJws1z9nZ5v28zP7+ueHoW1DhFeJJZl2fRWzZmCr1J2Va3gHWhZnDVGoyeBnin7N2tasPJGE8pKk16faSAvtfq+vWX8uPQygyWahMbBfsiCY56C3xdkH71u2IZJoDKWNRad4fMUJcNJLS1rmjO/RNRdc3JaXbCUttBnObu5RyI1b/sYYN7CD+z7Uv2QCg+yDh9FEdhz5PifGnTQxFO4EI8n+JyGhSHBtRrohPl4Pn8lfXtP53UadJcKLSP8yyCmmqloHdyGomLA9LOGFjodJ69GFMdBuG53OunvuHFW9CLpGeBtI3g+63lQfyB5rXxL5q/PrPi7EErEoc9dYrGP4dPfPlbRPWNMHlO6sxOTgrd/SGwheKTz2qgfq0mwW5Sf1tLzXTItW8m0aX+SbaxqSPMoDYbBmZcNYqOTUUhyNa5y2JGOc4fgzu1I9VGKPkYNo+vZLNHnjhe3UiKEFp5mmeDuQNT5D781/ywIsRX1i6jzelNiJx+1A52ziW2uqUTSfYvdTeYxD92ELyBHi+STi+HZUeeii80BmPQbP1Tv65C28PCFSsZeNTWTHdEE1vSnrdxAeXuIgVdjWGMeiHe59KuSw5Cg9EgE2UeZ87o+NkCkRUXVxWSjIRP3+hSFxkQb4Gvf0x5WL9ovSNvneTxG21YABlgUqJqnm3iyADv2EFyvKh4W5z1m68PWFOCb8iwiD5bg7Ktc4nwMRxZlIJPYnryBG6oRmS4B5+CSX7j1us4DfBqMBB1+LFZXs+8AsVR24IEJ/gDaEbk73algyaoOXi8xliA/D8lXEmpo/ZkPAa4Z/CgneRdBetjtU4+aWH5jmd+C8mOHGaoQu4HW64Jso7Y9WhFqATcpgrlVK9AOCUSDcvgzQJNxaWpyseXrEtcF5fFrWTKXnkQcXevM6E0Y22j2MyL5Z2DPr6JVClpfTwtZVnStnW4FXFjfTUml3LMiG3LGm/Cy1xEHbNpJphA/0n7TpHQG0XEC9MTDSClbIMMcgADdseCZqj/MRbHb335q2P2k58Bok8Bzy6fjIFqSynhpiPQz5NSo/BEPwIh0k8olV/JeVAScsRQWKidNkuvEYsI9vuZZ8UolPbgHUffLp+4O4gn8MFGzmph4koM1SyxUfhbSEuWZ15MQPinD11VlYtXTccGEoRwemJw41hzT4sBcfCrgMzMy56vjUiRiUh7wWHLSzbmbOdwURcXHJPC0jcmr0Ntp+WNSzbphLutcm/PwI/Kba9QFV4yMt6C97A0Jo7LnufaffNY+vewv9G09UXwoxfEE3pV5dAMTE6yBcPA47uJQWuLjgdBg1e8do+EFKUZ2vnIxj+a0Nthxps2wwsolec6ibI3dQHl3scX7M3F8TDITQ1FBPIOspCBluFXePHsJYwYj2ly2zwwBbWqIiF8PfZtrFRialoqkwtKJbrAStUB9EjcP4+V9XNw/wT35litdDj6XVE73Z4JDvn9Gq35UuDTrelZj4Ay5XQ7MULJmK9k1eUphtPSxUWdvj4VYY9AFpDh4breB0Ki2nhZKJQ+EmAHhBXi4LfPcCtdEubAX2IqEt7XSeC+RfkKdEuML9yHZxSDh1P7am+JpiZHxzoo9LyTHt2gGPVt5txDRlZZUnp97sayxYNDe0x4yqCGF0eU27DwkpN5ZE0yVRiQf7gOgsH6TM/Bf4JnGw+cmFpICvlRd1sak2IDTN3iAx1/fO/HcTu4IgETYhzAk6mPQ0gQjxPsLh7b+rNwPSkz1E98U96NEqlwHcvv0JZ7Mypepdf9jWohHE1OZcU5keR5Y2G5hj2SuLb8ALQp6RSLOk4QMsr7xk43sVK4NJjjr0apWlEKjvjnz92xm5DU77RRgFKnl93U+iIfv7EmNuvk7moOi+34iNKZFxU/qz7t2K79nmWJJQ9xBAkw92I7Cxusb7t5BVJhIughGkVwfN+KtyZE0gYCfgnPc0D65n3J7pBSGQQeL9dxndh4T7a5IW+Tytx+Z13M+XMGFc/xchFxJeZ/B0TiC292KPksMoroIds+NClc08zPq1+F7+E/w9pURiVIX/LrlN+skCePTboFqBSPjMKv67Z1E90kHHyPJD1OWlQtDCMLOKC7xzq8g5ioWlfoo90Am89geXf/SeT2KIqasToyhy1hADmdnoy3/uhYZ7DceCvQAFAFW55OwNoFSYV+NLZEsodZZhTBMVMpUSN/1bqvkjbMLE4VUJs8qdfpQrmEcsB2TwNTU6UPEFRRU9fi+tb8KvoGkBFOKntjK0pBvX/098+0iWEjxkTai1jvn5hfCLfvFKRRBbc2jXUQMAUWK6CGRhjDGzLEaQPgmsk1TiHPmQjvrXaZWFpfSzDvuuK7jzWHLA3PxtXTThPprQS0kNYBgElEIa3ZBGQhTwMiQ/bAy6TWsDLEZFdtDffVKNzkSwTH+yvEYlVh8Qv16vlPw9ZWbgDYoCRNBveGHG1zl9QhxC1COudzgaEuVADVnl+U/cfKygT42ZfcFihpZPeo4U9+DAgH6fK4S3+TkY4ibbabsrdksJENvUwnOIfZuq2RPD62H510gTVlbdRR6mq8SroEGxN8TFGmkuaDvLjBg+SunVp/uwGoTVqC341wfq/WOhA0Ds1ygrkIxtim8x8hKaJ2u8NzGehsimLOSg3PAOsqJ5w8Bm/tkV+z1v0KoUmo7SI51wpS7JzLeT2rwgXkr+NftvVx0Z1crAw2LSSBY/2IU8LRq6TZQAch+dPwlCFafVz2vxalGwlw6VOC3oCN4rC9XbndbxmLTXZugaoIi3KbjTS8p5yhKl7AW3MmRm3wGdMCyOCZlvU+xbykQKFWBCBQcbtIYw6o4Nsx1UK/2yAEztVZs76COA5A9JDkCIFy5sB/IF78Lpiq/MXoe8g997SBkoFwZLT+O90RVwjmcGtPT+cRfimt/RDYAFTlMIKdWx9GoeJh1KaCNm38mh8vkcY6h+goMaXKHJyvsje9bFIVFDW6jQ2BJdHb/BszKuJsNHzVUyUy+NSH61YetXlMgqWvsHm3bLTqC9EeRmQ69GETaIeuSf87maZWcxFE0Qo3hE8tUIOyK0w5wh54Yii6Ggba0xTe4zn5IQ4Zkh2sj1VqxjE9Hlroi3HtbDVFyxEN+Y/iwi/ajhAoG0tHmMRxWaCyn4BVTAQXNPryDUgCoYKxQgawSoouFxSuBH4e03j7+wEaUpQWeFS7iZkjd5BFvfPcxPYgSUK+SfQ1gtnR8CUmlQ3H6+8KecZBU/bt6VjHa5F0GbbG6Igxq2HAypIUT6X9K7gkseKbaXHY2JSgKlMlbrQGOYdpgyFo6KLVLSxSNWrwSVlvgOeH+NUe9Wwu3Hgv7/ZOeuYuwfpRdjOvAXkoEfOaods+48TP9m+XoLIsCWdbENcw2W71GMTJmmv1XlVbi/k9AhHqzBzvBcORMGzxtyIZfBrbneXEn+CyCDASzraHHt0wv3bTTrSL/TIWXMPcwD0lil00GowX3sCSW24SZgTzxO5zUCSqlXqvfI0uwCeHn2Ffmjt4MrbAkYWSJhW20gr6Mu4ig8uJ+fjqN1Q0ichvfxqt47ValvR1va0oRrXdgPGm+Aslkpz0Kz86Mm4XzZpE901i8lq9kXzCupMPMx+bG2zuoZLNDxzMejYEhEZq/cJTaQrm0LQaR8qEK672cJrQaMJ4GVYF0Keg+tHZnx9aUcQNAaiKOJq2EXC7/4UGjdsxutE4xtWF8MTphtlRKlrwfJPQtLQ2q+IFpATwNIh50ysdNnDdH4i7NCuOcwbnAwp48j1uptWu+eJiqW9tiC6BbhJYHx51LBBTKhkGdIH/2Y9vpe/H+EwDNxEVR8M09tJA1jV3wT4S9INE+6PuOR1a5PDsWzVHE9viwFPSPPTEeVn6BCVkLg9UQbbMPtE+mDw8hjN5A0nkUGbZ9r6BNAafmmOFLfDdOvsXCh4/GTOaA6haCOSqTaJ/BSWU06idl2Fh7KsWb/LlXdBiTLdeegn2tVKiA7qrmU2LINBEIMOpnljrLa7Ibdl2I0OvknpaY1gV4xDHwblL5sZtjScJbtmBbfnkN1gJNYVoPdxyKRvD8cBDCJvNW7Ayx0vRhxO7w7grHWcsIdGr2vXAZ5VsZ4ht4a61Pn5HhBJVWuNRf1GhbwSNU6VMODfrajvMlqU3gTQRdkbRhC2ow1tISdFys/hhdZcSCyBPvvhzPiD68edOUny1/BRpw68ddXt0/4vZl5Bhgz8R1YPK+yU/lFWUsESw4h5ujxAAApbDvFU7j7f/M9dZyVW1v04OwgxFFnVc9Tw/GbWl2s4n+vqx6pSus/ldUjk4DzTXuYz+kaP34a1RJjlaBNc5vEZ6WysMNXXfS7pDUuE+WRiltShFxHFk2meDsKgrBWEAZHbpac+pMoh4koYx6YcGWfHLGNye4hfjf5V5n4wRFWDtUEaXLBxatKfkPogbN2p+zMBegnsJOxwWRbiABXJ5yOqfG/xzFKMVWkUxAacV01ny8GiExiBGjAjHJP4yfHpe1ulhcn5Tphd/L45gfVgVe1HgKqDRlpc8kAIxN3Z4RwU5noUdgFAx+jWa5PDmSyl9lOH20eBRnbYCb41Kq7EU/0ZMI7nepP5OomFSDEOHp+haONUd6DYB262zZmrkZLlhFtaLav5fpVxPm/OAI+pJpOXOJrYYjxf2yxipYeb4kP+V8S3hzxpouIB+ZvBBE8eR+Vciu6UwWPC1Kh+Tl5u6wLZiTV4Hv/4SdPeAq9TlWw1xfF4eHN3Lm+qt9PDGLudtYq0Fr9/PfzFY8qqvkLsYpap4f+YjsIaHITUZRI3sgC4XjTP/N59Esx2KmF1stwoSy4LcQiRZgppOlzlCRVg2J+JpXRzhtBwOVOCv7VOP45ZKR2hQk5JXd81Ij3BHQffZg3QIfphugJC2VzGqrMyyqOnclzZ6fovZQ2iidVGr2v4iLiTQQ5DQVwfh4Uzg1VItEfZyfsi0DjLMehzU2ckhn6R9Zey5olDpsU0v4jmA6pz9mw0f1zl945+UAccZ3sElML1x+Z2eOxD1nGdWEBeKKIjqGQQpvY2Wqr4X43Dxy1/oMOweE+gwmBakHqGOORuFcR45riSkM3BiT+x6Vme2wAVml0d2Op60jg1GOl4Cq/JrGBCkhZyYGG+9waDwzsKu96zAROSR57GHN7+esm68o0lk7ckbNTnEAU7HnfXxflAkcCdyeLnu73u/nJ4TJfl/pHnSdeJRqbRJg1BGuXZ7fZY6fnOIJju5LedC9T0CoVVA4V5mCSNfQTzAnJ7TMQw9yQFtvxupj3prAENy44Pl4L8ViSnFAMDh6GTVdZygWL3tY3bzO8tngnLOkpSWNaRMtU81b2NY5ZEsyUV3WWOnkv11P9kxEQFuhTDazVjbeyT/rlQtqD/u0QJHf2f2ZTPTETpr3rLHhUT358dNrrHFcpGfQAsgCbpvy48nzXw5OquUaIHKYPjuCX8y7V5forO/szf/RVPlZhCCkL4mjj46NiyOhc7Z4tTx9Jx1x7vUMpfftpLgrZY5nLo0GuIwrXwQfkDCiumrnz8ANrsP7nblHhh1KNO9w36KUhsGrGfhvOQluClC9ZBYcjYiTEpYXgu6KuLdz8LQ9zFnt/nIGSf/54EEuPRgsuSJHnEfqbgI5zq/pmz9CJsO1wS4duJSvywxWhH/YyVN/FRfYEtWR3ZCo+1aEpJsLdtY1UFi45k0ofhqvJC/4XGIoKLZ7sS4Jbj37hpRZdKZJ8lkLG0j1OoDN9MNm56pcYmu9KrVl4hmZtKBqiyXsLoIGKNzjbzXxKda88nWtXDnX0W7URrJv6F3cCOHzMsEqg9YvK86mwyYXSCBrFo45JsaGzyNkaMMT5dczKCbkgHjpcUe7T2vjgfcA+c65kaYPAGO4SOhTolvi1IezAUAyLbQX6fI3CuLdnhgX4IcEBME6HZiPBZiDl7tnU5fdUw3pcK6F+T9Pj6vdQ3Loa2wXHXMX+NOlSq7awtxKRflFqHEcEUcQkwFXdPgyX25cZfIhxtZO0MZ3jSBVwmWqQlNTi1RgklZ0FnUWuYOmCBxYFkwzq9huK+1bbp55dTQ17ojQMsBJx6AN2RUqAjfzA3u2UtATJzrLMA7sz+eU8WV6qE0VsbtNzqxW9tpjlvrBN31Wi1h/j3Q7+SjGZlW14uI/8QoqrBON7CyAW1CUdGuATO2lJrZtHlOxwBu3HJlstSzfHofkPdp++9x3q7wOYVAZYQS89bDryiZsy8N3BWUC7FvjfM6+XI9ifHFsDzOQb0tiuMPt3eG0SR2DkC899wyG4HHTW3IHVOhfCS6Pn8v0LC3jVIexVJc0PiA0FzoA43LR6A+pgxf7Ln2sAJVkSUsYB8vgrHSfCIuZgHwCIznVS7KXsmfuPDFFOcN8FLebM7/3nFETCTPQoa681WPYTsGjbHcxF0Pgw1t0Q/f6z1C9Gn9lYUK6zY31pPi++ano8/DAiVFHK7MPAAMXHkjm8h/bIuOZseYzDP48Evx3GcP62iT9bkHTs1R4WSfN4WFTofF2GUyNvlNmiPxttaoYjFjWSAq8Dc5gKnqO+TMsY9rqSd4uqEblnxnXSNEPadGh5Fze+vgfE5Pt6gnlZrEnzMM4pFsNNeI/UhPAOf51X16Q8UjdNYPV2IjTKloYaWtFk7iASut5cwrPL1eYx0nnTq7Gbd3jAo2oARTxQJ0X6M4IR92cxkYSc6Nft9dgDFGnK0JefDkKsiceyCFt16RRDOvVJ2kl+jQWKcik9BuROWlE3YosrefjnVGeHsrYjH+Qe+Lv99TxBQycjqr/bHZHoOskgyVqGcVJsSKAuGa8l27QJzifBNpNAOTqUhXPKoXK7CnoKCGEfpOQtVS4AH5jim1nAqKQjMtIQuZsHYKeZbBVaxlklHJdPPPZXVZAbo6yjQfA6goX1+sMA+Xyxw383ptFmJKkOnLGgrPKsEMsp6OxsMaSxFaDoyVx7Xh+r5ELo1wD6ijMWd2/2SYAzOHF6n3pDmOP92WbHlyqOa0Aoy0rb8VyylY0gIfQ7tkj1Ja4u4Z6uDI1lgkj+WF2sIOTWv8npRHuMutIL1H09WOmuPXIUqsuO9w7y8girjtMYNz4qyAKZvqNSpe7f+aN0mGxboQ1fWZrX5Alhp6oXmUmAo8wYbcSQrfqz8NuUD6PenoqT64Nfv/9M8W1uljYELgicDa5oF3DriyhT/xgeHrPneIYhDuZehOFbtiFedzlZOEGuKjVmC85scAxt1HfOgBq1mIJu5A1fg/wwhWz4Vuq+xTtcY9DSoUZkTzOdmqVuGkPFtW0WaodJUpqxN3Z6CdytqSS+OvSz5tKtMpNuTYBECcw71NevnCDbn/4A3mpMQWBEr4b7Cp3HaUZKIIyagXXkaMRqkIvO2OT64YZTutBU4ZGMJkeMFrGgt1YCjuFWZGlRKIaxZYinTS9Ipav75mg6limito/MkbBNTr2EEUanOld5VJ2kOmyvA/m2L2PQ0FTxAtb3PUkquxvQ/dWiDJdU9iEol8J6PMCr4CWjJq6S70tjwMjUq3qnBMjnetJBhPgjf+mRXDMDS3xAJgVTHWNFQKsrp3jJo0XRcSWN8w53eWXzl6xb78HD6Rw7XYbDS1JzLVprPnn3VFj63BpDB6cdOkekf7Sc8TGyDdGQdeX/M8/5+Gm2LMnWE8tt6c85vKGcuQPvB8FtybP1qmG6v2/Bqp1iWe27xWLDW0WYx0kbselM3a4N41hhyHnRtZqYDA0CrJZ4OU8ejEOHs1geSKBLbI4j5iWLtC0mZxaJ4FY+Tp14Y+cdyLuIb3umOST3AvGHYAgx64UeMuD3zWSCiMcVYgPbyLU1CC5wQnVC7yI9l80pSBSJ7X4e3+MoYtzQ55wc1tgXNDyk/wJQ1VvlzCjfc8d5EWi4rHFRjErcAf0YhuFX/zXNJcA6476w9/8zT+y4NFilH2kgd3GVxlOxjjYsBxjIb8WzxYgWQgBBfRz6NtqhEWttUfx4YoHFkQk1hmpKbn9p3g6fUpAleg8mEU8+meHXE4F4UhN1RMfIHvS6FQVKeqXBmmBfNqjsKJCNjXz3LcOTkXFQoVb4yCFcXfB1w1Gf21nzjrINZFWcnIf9/TrUzkFRQQjlW+TUIQYSkK4qf99qIiZnsZJFMEh0zF/FajocVtVASOIbq4gMNfzZ6/IzMD6dwJWp/YQq8Otg+WW7qr5JOd5yAnfQuoQBOFzqVvTeHd+4FLrrzw0iUybC+r8zIvcocMMPKrO5EwK35kM0npuYRArO0BbZja0XEu7Q9+j1lJBTPWba3Xj6BPxXZoRJ94nrXEoTmlDqknBetA3VbixF2rDFODh55pKOP7epmBis4Evx9t2uSFYoeoEXVRs8hXMM84kmLZ3IrxL0GCWRowdlgmoojjO1ZI1kEWIDPfkOMDpB49OEPjMTjVO7DHqNuLCQhdI5qOVYJ3L+OdG1seoHF1+Np3elnr97DNnTqWe9JOmDFDwIdE/wGcmsKUH4URMXI9ozAROkddMKr8o01BZTC6XrM7/dAL0ISIg/lOwdUkmB0zM1LPoqaY3WzNTr7wLRy75zbpxOHi2KHnzs2PInaO6E3IR08L7HYNBJUESLzfDDR2lENBnYYi3l+lJ6jJ9LIbv0SJjQP5sOUaxFEN9fX7RdVYXxvZgfovk/EsktVWnB7rYXfh0CDt8ZJLUds77wh//EQHq/9cC31OA5iymWFOHlaeK9JLHxuO5l60vuKaIz6Rj4JcKo9ruygJ77PFO92tqLrPjaDh7cWcVdb6ASJrcl9hQYBUzFBlmDQ3kKRztglVgkEGDs6JRA3CFxAlvqsirqr1kIu8jBj+4A4r0Sk5pvRf76Qc/YyRzv9q3yMeeRY8I3TjcJJQ416hpBP6WMGcF6E6rC+vKKhyghDvc9BhLjIfcsk2xA1BlaGnvRjNXbUhwUwICbGN9+0jp0sSTRCZdrcS7Ga0wnEhwzVeDHLB9tlBn5mehotTQt6zl/b6im999ByDLB4YQxZDGKt2R218UA3I2xowtrn5rg6VMKksjwcmTf7sYJ+hESm0hQr/Iy4UbyEM4xXLGkxfVRusz9eyttxYASqLmDOO4O3QxiWLd0OO+GRBXZgUlP6plZZb0l95ogyclPS+KQU+zf60XiBKfAo/wJPw172UKIrZvOBTzLUCy+UL4OZZ7e50YhXbXgqWReHgwA/NcAlT4ca7fpdQNenUnPRG1ORtsLboRM1dY73O/z0ivnDACWCPM4aJaFN+5tOy9fq0RGOnsRabujpKi5n5ETLz8EZZvpNlNtRWpqlE8rcqwn99p9GrwI1KYbCKPL7VyRiNdPNe5+caUlB+QTMO42cvIfW5TZ3WPORTbk1vAalGR4TUo9+XOMakzyrhoNK8Qe69/rdLgGcM/XOtG5aKCwVhcHuNzQXnRvRsP5/CFilogUh8e+kOmaJmKI/ePnHlZ6/8Cd81mIvqjHLFeb+tFDMDKY10Zkl5jg/403RNENeOH3Yhe7KZh0m1YJi2atFYeIsTJKkftlNox9hNya8UXICr4+4e3mjUVWNbvxcqdZUHWEcQMps6v95BIIU+9QADrebuNrALkSdqQvAwoNO+5N/HHhaqchkQYx6KsEtn8LCcRjSotRcy2jPUpQSxIgH2iStZlslBahhDN+wRmBizGh0riN/durDsmP8mhb/IGdTw6dQQndtFBAt1Bf5nOWP3xgjhSyct8UknJG+Rexhl2wXAt4DJJ8mcB+roybKNh/KaePBSWnXzxx5BxEO71IiiTCtbUIz3IhJSO0WWgjPdwHGho3bcs8BeXQjV4spdxjvEHUKIqhA3UFpIuIz/sply9eRlqzqlZNTEaHrBBIhzyIji9xmiZ+2tYbA7MssBcK8x9/oKQkLv2I0uFXne8XhV+juEdE444GlBsdLShgi9FhpoK7pXrfofLY/IbA3iZ+35iOWLRbCW8vIeT3Kdt3GvXtg2VNE6paVaHUHuVglYL3GuoyBRlEcms8WuI00vVGEj3iWcMi1T2PfKPaE4FtvjoE0Ba1ncbMheWUaJm2q2DjMCL0H9BdJ+gmyshhsBLnyHupCEYEGiI0acEcbXWbqyFQDAx6VzyKLQbxv/d6CB6if8pCYfFq1hBxVHlUVwt2LKx70o15Yp04jogQnW/TT44OWQ+0GX/Zv/+OwpRiMzqffPz3VuxcvdQlNMqhufpma57gtoeoDH12D2Vk4QywNJ4ZQchf3ds+am78go92gh5Fbj9EmZVMZQ+z8gkyQt8XplApNpGoie7HM9zKOSmvszQ4hVdCpjdSX1ajosH0XFO15zR203OOBNXBbukHMPHQGyv6aMpGPymWcvoLm/2tNsiArLhMXReuSSaAKkqQOU/X9neBNdwpfBKQedYsar00sHbG7aKjXoqr6UGBMTO/SSRVacXugO6ao7NCgDGSGM2Ch2MxBJI4qsZWmRCUxl1n9jKQo7Q4POkQCPe2s1iQJZRpPTwKjAdz83to9SmX/50JjXYtr41hQF5ZJiWJ5tx1UXVgxIuLNqRKNXKGjMzu03rAuQacMG8kpeUnNOuaf6UX/XLLaPSOSP7eFzBKhpX2hSJdV+u203cx37vQ6qMfIeq14PFYhU/U/N+wCuQdz+HXc5BMPxnNsd4THFZfimE/E+/JCTEN7p1LkOzOy2SAmyl8HurJDlZpZljXDi1fJoZ2HltOnOs298SIhTgz0rEz+3EqPh2YcLaYEsCEtIJ8S9fiPfOraRDZsMwgqzJ2A92A5QLS29TKeQ61BkoBuK9hAc5X0F+ys+ElsOy4vaUWDcKeIheEICADtSQxdI4hIAmmGAR42StL+GRIlGN/73dsGYetUUIKcpJK5s3etwwT9hXqX/kynRJDFZjTDZ+EpsH4flC5JrRnwgxLCagpbK+CD1Ou794d0/5dafb3kurBB3QTBs+vhBxLwsSxZ3BA5fRkIuB2xEHEORUMH3uxl1HBnkZtg9qSHebPaVbQeETyV8KS2WDOq8ipT+LndjsDc3wDmPhSdM0uNr2lrP7UNb4H+3MY4Sgbo0wGIQEeyYxAJFMwEe6R5lm9v7OjTECx2eEgusQoJO2kyAtkv7yhLqOQ0gnLFp0WqLOW0TzqVSg0mACJ4sjqdSdrk1iIAJc7AzUyuzo9+i6cOZ4QuR+uK620DlQeZ9IkYIEj3BHJRcj8Wdp8amMgq3MjqmwghtJsuoqm1KbCqgegT2ivWOEiJXd9K57qTG2ss/wwGJDItl19WvPc4bziYH4pb1ImClGI2+Jcw5OXJjnntm1MJD6RV3uLpXqnofLRg7G0SCdBubjl6keogSXd+UjetBqYImE12zvCQ0YDmGyZst0Dzvag4QxYZhiLH4HGAE0Be36UuJJ40OZ0OVWFocGr+rE7CY1Zc6NuaDvwS9CnM6ussvBuFGk++mvk07+nrQRhD/DVk9twQ9hEwU6b4PaE6/WZqlIsEtMfmqm1azmykZ3QmT45xzXf9P8nclf/UPhSEHghdGeS8grT7KOzk73Updge7619P0QGXx2TrZX3p+NKc1HTNyCILVQegw9jq9vzPxTLLKEYljxJESYJhIzICDlqADKJSg5ezgZHFDr36Kwgm94EnIkQzM3BEfE3y14dPZmppS+JxYt/hGsb/SFyLjFDNFA8H+2bVxWNbo2h4hMyZ7y66TGOs6HaxHJr3z3E4Q+eKikGoNZhvDz3qOcGeklgZ3xHIgSiLbCeUQY73Cl3ehFCHUEprPAaCOyQxOyFuE1enX0GbJxk5YnmcrrWAB1vgW81oFHEeOOE2ivHvjaos5zldBvaaRUPrSXCH6+Xqg+tYhv5h2w56fQc1iZ4p3OIkSBQpdnK5Ag/Rm0eKqL30Z59yXrCbOABT1NOMfJxGXxYqAwSiHBaGv17u46sLTky/Vvo0/JKDLLB/ohM1ihvPoeay9q5R2KeR1fKhhg+Mkh88qsIpTPbiFjgJ5mhXNBUUbvBMv/qnLduLwSqWPr3rmlXOhNyRlSVdlkVXnUKGgnOvKzdMmJZ9abhjVBU0GmJ7u3VS9hiZQpX41fwC55r2+zy2E0Fg6+XgcZk9CYp29pvGIE4SHqcd6l6MGrrHyULVzEdIScvXMh0pTlfuhTXrUIhJOFaIcqS2PlcSruATSvkNOBt7kAWR1P6aZOBsepqpyTr9I5tSIJ6Vwy/birx42andCC1KFA+XrfTkRwaqR1VWa4ipVuEQvGuCPiOz5fYAbEniBnbTTP4AgxwHWeOv+lW1AKZXPb7Bt/uEoPm+k2beclmgNO3nZoVioSjWqEHtsvdDYadJy6dKD3mDWmfVsTS60s6oNsuss/kkryhqSSluiyhff6FADFeS1XFag4nhKrD6A21M9mce/SK0unChx0PjGwqv5Y7JWAM+/Iif7yE+zfOoZXlh0ZhJWBwhc9NauGxD+dESS7YybxboAUHCyH61UMAA0kSTJe7SkrbJJm1QKbb7pAR9+VeoKuuzsmu+ytIjibmXcY77lA9jOuyTsp8S0m1FZ+w9nuzneGdERgOjFEkgneIEWg6VfRL9SZFw0iPj0x+gn0q3Kl+yy1jMFIfzK+ragyysqgVy5nTEzlWc/O2CYwvttAkbLU+j/XAp0LeyJfTp134Bj88loh9wMyEt2YXQe6OjXaiOJvxWYcsR1b5FPmihjRazILMe8KY1YQdUxnU8DA6b21BQXUxPzKV4RRHOI6zBIYjHKsLRGgBUBqzBSaMKocDQLKlCKRErPxwuzjt6CG5uZOJo28xC+QaxKXaDzZ2LgUsBEKf5QTlfNBvY0c7OVpxxHjata8VG0wMLWW10jI0fKvsJT0fNfSP/a0nGn1kUkKX3X4WCZKO15ZzpFkfw9hIfX/8Nk/+o5T8uJHodCQDCHP/PZl9zoqhY4hSXot+Jtx507KZndUnV42+4ZhgSzfrcT+/Wd6McW23IsFexWMKCTg4cIaKE/QLnBhF+Ep42o3ClNy+GoNzzOfElL6aIimwqvDrbMDeQc639GTWiKA3Y+BG21oNZ/KxdkpGYhmSMoye25sMCAz5axHGkHbW7lQpP8yzGXitY41hok+KHRCRGUUHm7eM+iRk4gDzjDlAZhsfWsaMXxtcOCxhgQqcUkFylsxa4NHCU5t5v7lFarOCgN8fzw6YLdPxU05r2fjV/TX5qahnzGj89XwDMTNiyrg62GPjLyvkl7zMpVDUVtwO8TeVW0s3H2DJTct5I9dmhSsaT3MFMpByCaZ7cQ64qb+8VG5LAhd0s49mF00Nc22b4jp2KjQaqRYX3svYkPfELTnq0iaqbyzvBlHKyKd8Dc8ajL6yaR/kRAD6IS3nZTJnEQ/0N3OvHXdGNLgaHavX4XEzQOnJY0SzB1jtf7zKbjLDLAFFfybnYZvSwsVXQINi8m8uL15f8aT6W9mQbu6bybzb/FJlp6j3DX/dErnDFUKFJYO8flztPOtQxXB2slkGN0nRIsGz/+UIBv9JnuEwTZJaKOXBnvR+z7AijqRvXPjg8Nj+S2FVpsPZxIB5srdGkTw7obAgRRdgTuqHyFTTJmaxrdS8qwk5Q6zUvn/27vfswiZkZnC3rYkGBjsyfAboi3du0Y7w4jZGMAQ+7+nh2qSR81loqQsiArf0D068CfY+8ZaOskAgCGmfq0LX/xtcoTuJb9cHaklUPWuxsHQw3uaZ18mWPYA6uJii0JTJkHPqYYIhkbVVAPCDmNuVyOL55nyM//OtMJ6EgMQYzEo+NclhqwH/gI3g/uZVM+V2j26HYzlTSVscuEz2RWkmoTxNvhnWmR9lcPBWL/3P02EH0TkLXbRFrreUusECR2b/ojBXVRo+u8yDTo6wsoJHDLgtzxERB9qbac9Ztlbmjp1PGDwDlScguiGEeiIQjcIEdNB2fksyECWD6VPsMvJ/9J9Xisclfilfiw+ivWSZAnIBqWXxaAsYKQngvAZyI+gtD6lvjxyTjleyaLt3rkMKUXqoX1c9t0VVHCOoGtS8/fHQief7F1T46rohK5iJ+X2G377DYgabrt8bg60DZkqB2sCrtE9TyRiBmZHAPtITpca/yS+/mTDYoasVKhSyVd6RhiyZOFgqWQzX0AIO/2TQHpHmxA7dMeVv7hQJlSem9fKrVMNTFmDe68FCpY7p+OJm28v/mJ0Pe4dUW1Mt5DaHWVjMiWfSWa9UaphsZ0SVTH4XcHdljyj4HTSVQVYlXxQZkRk8VwMW8Sa8sOTw0WShsM4bDCxxxDECCGKGbiYxd6mwDfG+ErNw2zc3/3Th6EAF0jpa6bqmh75rJiCWHPlC6aEhfeOWl8QEWFcps/oGEzCpQF0KKCebj/Zz6zcRXv/vejwZFBOz0r7hi8E6YHRig5DJErjk9mtcm3KJkFNw3pfcYxnYnCTMODKxdg3GGjlt+mPzLU6AC2VKQSctWte7BunJl6y28Er9K88tW9NhUELofXUXTBmSo9dztaOoXln39kdL31YYNsliuUQ1isy2gxVStCdGfEh26HHe8hTSURL+qLm4eIWBhqomdJ1Rwhwa+36oEvKS4Kk98AGfxqoj6mORd7dm/C5cM06+BpxPD40Pus+xZ1Z5rYuswTSBDtsI8qgZf1GclcLg2PQ29FsKLiR9KoGg++3E2PzVPSY5lDbRFlT+DHjX5xHwHvpSWoDFcoGcfrJgOE4FcXgF26wPgOEV6ZZN4pZLgH3YyR9/1rDNBY3VEAGNA/9vQqSiczhTrAAYjRYcCWs6UYn1Zh+aU70DfJu0RYF4Aii0y24dT9EroN+MKcvP2X3AHr9b1YHcainKIlKWARAT3ylnnZlduoxoFJrbX780jF/YAgTTEr4lvHLIfDga4oVMd1A+3zty1GR3y43ndI8WQjkwH0LhIKLwt5XsRDw3JwKqfWgKSiKsYCc3F3YbE0PwjCzawkqljhKwRR9fzJIJL9kAYE1B3Jlq4/yKE/UAiBhL1uXPPQtNEksNZZ70euvo7R5cYc1+0i2qcy9XktaX/i0ut4yOgTGk5Ghz1UbKfZ3YpAEwmqoEg4Jvni4NmIzeJexKsmUlZfIEQYwr+l/MXjcsIzRatUaXAu3ND8Tb/WFADjU10UasTcX6nAG1ACWbM2coMQWovCD1WdEUPUpYJOayIkWzf6s31qk/rM/EbbuFVX3JWvfT2ySb8clPc2CDDpnZURUKCHhjn2PgLqpbUHX3CY1RcNijfkIANQGVMaGMKvA6pSxOeZM1TcqqWT+bqDzAANbyksbE+QU/+x8yVOKCItd0zs6UaXc5yHCVZ5BU5+EIqDbXKqCsM5kdG2jjgd+NAN1HZe6OnBZhoJzfGHw23G86njCEPEunUf0XT5DUvhxJqAqUAuYEkRwsdhRUEgwQDgqKwB9uz60TOplZDF6MH7NfhSJlX/MQgGLSbjnY+pYmQ4WDcp1wb4zW+p8uEdsMDYKF8P+AM16mjT8DEsY187a++AX8536BxC1mvsiIqNB7nKzvHxh0kgYfwnXapZ9m2Yx2XfF7rN4lJ1kyV+bowTevM2hxg9g5qGEt4206ltorv3GL1jZjFvNT5SnVqCaYeG3dHHyhHicaByu7Avq9oCRV1dx50knvVQbgI6UwqVKkm0BcfItG2GY88d5+qz4EPc8bFnP8Iq+NbR20AJLfpyo4Hvx1sKiO5loTpjVLui4FO8bFq8ys/BRGYtdzn4Lhb29lrwc9uw4O+nABnyB8UAH41wceZpwVBvrfqqH+Y6CHPh+Ne17+0nXvlBU2odJ9tkaPf9OcG/qCYwA0fheD/1WIazKcUYhzcGb7GGydoAqytgQ58tBHh7uph/zkXJ9eq9SXoT5j9iLbOj5V5YRjiphJpUbOyflNpsj5gvGMIzF1tBvfmasene3gRjml67ZSmuX5Ae4XHZrzDVSi6po3P4nXn7D62JmUa8VvQmkipeKtyMsnQfecedh7ounMAw3bp3q1EWhJCkH9LU1sZTpmi6mvH5BpCb6odcO+wntCUWO9qEoYeUMP+n0zAJS/uHZChF8Es1oRVcuvawZek1tj/AaO4KVdgmyCK/1iv0KOOxFYVWMCMrHp7qTS+rO/n/ODBD2pk2XXH8qmkBVwSw9UPkaQyO14BSqIvzosq4VJy+3fnqTRfY29EItJOQYmQTjuqZQ+9cpb349+8z5xYDXjt7mo0lk2I8zcz4CKb19LeHD/gzXM+I+yQK3tg0wf64uW9iA3c+Y2w1nXUba6TkOAr8XHNfBduQqldB35CjPbiEvHVUMeSO+RtFm2L9YtX4eym9I9SAs+cNtcv3aqpb3wU+OGdkbheYvTjitLSAlMP8OrBTDvYAKmLz0NXXV6LBgqvvOukIr4XHEHmPpNCFDzv8wnv8iVhDiWgMjSWC2HNLeDqKUqw9hgO+0yIsPJ9NIm0t8pBK3IAPaogtdkL4bq38kxvCJjGKVoPEUP3nk+NeMXg8fpRYQWFjqLDfFohD9bm0yQzuvkSJS2GwK3ge/O958Y29MzFjwCRYybfo7kt1OSTsGxhSPRtEKRTITia9U0onwb1ZTdN13ehK5xVgPvkErEgROYbhuT87DsgRgL6g7Kv6CGEQnpN3YoGq+bQOLNgxSoccHfcBADZJNO1wCaK76eBFA93qUWm5uOxdqNvkF8FwYlTZRITR3s9OqGo0QKA9aq59SGPYtHPFBUE8ERQ/Yk3nbwgC7KlBEkWWzf5i4SZ0MLAH4cmUI7st9RwjUILo4dh8jld8Guy4X4uvA++FD848YYdIGVQCbNIE7NiEf4NUhPA3RKWFUabGLET6D4aQRkcyavooiDrFVhn/ZD54VITByO8r0v2GclW0zC3SmvqLxLCRPDVwrgEkMFRMrPI+DuJKzVvjaiVscmGI2iFev+qRqZP0l3118YBrySPwfJ4YinRYjaimxb/wBUJjzJhe8JHUvg2cAHkbzO+pXH6YRPzdbW/PfTAzoJza4/86Zeuxz6v31jH7KOMvcdtGPrmZGF2qvhf5CGx/BzVp2Ovk5wJtXLXVP7ywsELsWTtx/Z7/fr0eid+TPuKdhmlaAzF5P+euXy8Lx6HCipoXHHzZZZBTTZtMZr6V4xLvVkpdMx3NgnZEu2nXukLfwq7slEsyPqPTpIZCPYoiFhMQ70YbZEaP1oaPRLhtfpY5+liF4kRKv9ftshkWY8Xx7zYYJmV/4CRrGYHu03Ly6jqvu0QQDaMb8iYwrDKvCHxfMWJW9IFwblOP3OSsPLGQL6MTyBpU/JD45SiegIvIuSvdoqrBotqsv4uDxnlAgcOAUv76X6brn4dQpf2yZXr1vNPaCcmasCDzC41L24L8029FdBn7XuBECCHax4EHeXE+h68GdS51VFSK/QfNiq+/vjQ+mCHn8KoUlO6xRpGkMgUDVBET4R/DXy9+4gpMwhlNlCC4mRaJo5jnkZyMHa3exvutKDblZLEYwXTeup5hXrRKu468gz/QeoXNEB4+T+OS5XUdzz6Po2/kYabZ6bWUEim4v1nfGK0zD32Qqh9tdtzvjtcwP7jCLYDU2vJ8HHKfuk/KPlo0TMEWqtz2KJgCOWHvzhm1gjBsj3ZUVGXzA4w5JpE/LWlgNdRiaoO9yaSfWdyMinHaXg+/R51BJoN5xooCCh7hn7+R75zwHvw8zx0kIGj/bMpypOqR5EIWQd7YnVLZvlC6+nwipvjyCNBzSXtHevu4enOUn0rL8h0zWqIiYXBNsv3iVG8/eCLXyFZNTfGVtikvX23nLRw4zylataO2Q/gYFNYBOhmB734UCBg00tlpUc21d4z12otYnfh8YqAlBgPiOmuHiAqVAuTdIWWGbrKfLhkg/xBYvVJGYGPow5pxIniTi2foUc1Z5elGp88yO+ndHrGw/WLwIl2txA8BhfchxR7MwLkqUY75LbtxkgqoN5587q9Y5d5cZO6uSGh27w/8fnz1o2v2Eko4hNScGfxgQkgTyGKXs+ZW/6M8X8DaI6KY0XBsLPd6py9nG98pKpO4sLye3OqJ2Xg5E5ehweQuDacE81+0/x82npD537JOe6k+H19dixSMdrJpwJw0YXDaRNKV9KzCOwnMjuF3CSVtaEGMoTmNya9Gbmgsy4CuGedRYCN7ph1/4tR319vnBC06kk88zRuUqXvpKW/1gkMRXP3oHADqvAAuKZS6yN4OG9EBrXE1/RAAPC84WArrtaRdK4k11reysvcYx7dBXwN4uQRNgKPjDrNU1Ooi4CJyhNbIhPYy+aZnv/3izm3f6ZGPVpU6sQLpJx8T0ATLfw3RKXVJZUnC36RjMWtPXld/PWnaESok36Hfdo7lKKOeDSyoNAD1xqj4AjvA2jEhwWP9sUz5yImkFDRR107dVcXGt1xSWkKLqcTDoUTsM+ILZ4i5fiGCjopx2pzgfr1P84Su0D6n7N8eMTlq4UjLXvg4iJviGKrll4KTO+i/1QGlYnVD0LKR2YMBzcp9UhFzR5x26elcjAjHXSPUmTdNm+dDJ9MV0EC/YFH46y22na5HyKF7fqFeNcI9alRUai+tjREJu3KsEvFDSq/KOU04tb7bbf1vKkib20DSrRjfoYAu9P5pB0CCdGLm3MZm3NHuql6yjCz7L18fcnhq1Ijs4O9HEskXxWglufXn8Ig7v+NobbbB4qa6uN3brt+HtI+yobzQu2YzUu7ActGAMVbil7/qyz8tJzpGGKUukDAHP7Y8jxMJYQHmgjfwYEGh9nOIP4eSuVuiv0mjtzl/dnzPg0uJErqXKPSO2z1vONQFXIdkME8Wjl6SG4Dt9Dduhn7ol4v0g6FCoYBGSxMDr2/+hHqIJhocSFj8X3hoUfrm7j0SdkwBRHlXTTRSCavqK23+IESKh9+p5WEifY7Pzd2hGw3c5QIHw4d/P1Gm8HbLE+tJXuPheHpTmi8tx5TdOaagt3aM0xKFxptlvWP7R4F2GSQuLdPfkCRnKs5DYfwyttV/HQLfa0Y7JspOPpNF83u53IlBtZt4p3AUnf/wtVhtiwYh0+CJgOhON+3MSJgEySw9IE9dBJUGQ4PvhF5BhHFG8SgpaUmZHmwDVGMNMBr1tmeQjQjYCJv3r9J23VRuSF5QkF48411wbeIr4NoZfzhNncYFvlCxZymNavfWz32rFCMmhu7a8ksOnojpjm1FYbugt1qdvlsgdsSZ3GJiFrCwfARi/1FWPWTKHydVs4rBZuZSQS4s8fCamgOmRQLURu/FikpAibKoZ4Orh7AKqiMbvbO9nUgWJJTBmIOaGF64YXpT5mT1Gyip+62XLh+gQVihVyOlw7Cuf247RWyiTnxZFCiHx/cQbd6aC0ldYxk9WQXWp/u8zSyx9YmnMPSKaM7/IGh8Rj7ivF4XhIv+XZdGcJfUMCjwtb0LqhcNEFMJBz3KbWHsMqIP04i8UFZPDkwX31vupWLIB+GnDHupvkLHrIZFUdTFtAwUujLVI7N+z4tKKjF7+CHsIeBOng7P85ZatO2KEasjG/Cddh2rzguUXEE18+dxyHLpCC97SAPsvcNEuuxtiC04ihCSTuaZWhE/tyqULSLaF/iixm3Yzy6zCB0wBxtV+4TD6smY0kYK2vcLxQm8R08t89XQ6Uus//JYO1u4HbsJ8jbdG+syh6UOWo2V9XL+hm3X4eIjDtrgwPUUTiLKkXYQ3vfG8soM+s9aiXoi76tIwcGIM3v0fF4JkUo/VDfAY/P7pnncqesmATnydZoQYU7e2Bbc8lEFaXz8bJKMM4ai3WPPTLPv2YsabP7Z8lU60ovvxEmeCHDinXCgYwj7o5vT4H6Rf1S1c9HcyT4YG1IN5QIwLn687ANg8/Vk+kkdudRy95Eswm4At0CSBlKdJVuiPNx/gsLosSw8AjWnhs+W/+RxW5BKAt46LcieNF6Z3ySbOJNNDhyZLvbNz7dbGUuKc7dvSNj1iEDsLml7X7FK9UVne/3Zl3WCrMZCsySUb1Ns1TUoRUb104Q+DFLSV4nbUFEWfr3W45m+s81Y6D8i7R3ibXmMUxxEwEsMaMBZoMcj5A44UoD7KZQer4DNW3XahjBetFNr1x3RZ0odvJ2WeHLYBfDyoqz1TnVLoZpInp05o/EYQIIBaTJX/Ev9tN0se6LhEypDp17M/GjHuy6CQMEZLo8sCdZGEqsjAyrYOnGADm+Lp7viUS2c24fZKjkWjQO5Wo1W4F6eo6ZXbsjORm0JXFw7jC+Q4Kzw8ZosT7BSH0zWKfIch5NjbrtLcGdTyGaZLCeu7joVoKXdS781HfbaHXXeubjxWge+5g4KYhBErqLym9K8GHGI3girshj60GsFhVA5ZBlzbd8762WAwYkBnvjZgFt14iWSpN4aA7F+KnyRN8nL9z+brtde8V3B1byU4tPTNwF1eWWarFpIqfDI1LG0F/je33reUOmFdhFQ/o15YKqoSVCM0eMky7n66aCLacmIJf+Tldo7F/AWq2QQHBQ7MaPSRbPZE/hI/zLzMRHVnUK+TVi2oJxSLymz6JyAigiB0C7YmsySe9dLMBcjXdCwYQ5iGYYQFGApBlxz0aRk+hRX32K9oq7Pw7JcoR/mNO3IsBYtNmZIJZDx8F1+IlfYfrprdsOE+cClQQJgkQSrWPNUtnTjpXDOIySdB45M3h+0fk7TnMlvIYIuwqSUwU2ee1MJrww/KcgAMRlKZ6Cg4DT2kqCgrB31jJluTyvIHzQD7nRztdStDj1F/wcxS2Hm5vkl9Dx7q5gtz8XqgLiBGetOCK4X+QT3mncjO5p42UZUCyNlMB3RkBevMlVo+Z9CNiSDGuEdvNnbUmUJ0jETNQXBXbX8fDHTCTqv0kqiLVuBTYSko3tpoQWlbz5DtVS1BM0LArv1wzxUFdCaz4gGEu/DZIMqhl9DcTR026mlTN4/2l0TJSWAW4GEqYsYED3SvOdpYKpchfAj68XBw/iDXTFVu/61nnd104ZSd3Wvk+Dy+c5ulnoSPcXfXtmQx+c0Sp3y+wibPjycfc4JoGhm1rIYT47o7ISsvp6hy1G/IGe9oUW/xbR89UjBtL2mR032GWI8D4osYhZ9IZ6hW/bFgs9s37Z4C7fn9xqDuXuMdGjcs3tLwqp6X4j00CciJiyh78XyYd6/mIR1c/E571msqaWVJHhtJRaCdXYpdqzzGyJFREPzeqitc5S3DjYaMEmU2QhNKABPMS87JQRl6P9tBlhEZ6pp6RsCsx//YI6i+6yVdQT/Er9DjM2mY/wBVFXgf+tOG40jjNQPxxCXeuzvVWz5SPhJdR2pIsSHHyQJVz14eSkSutmMlEZFBWCRQu5qbtHRyFwNsQIsr7robiGcYOcagODaWJTkMWxKqf0XAaBRMoG08K5jA1ICwqEAyzAIk8SG09QT8oG56CpAsNg0HcNvUMWY7mkmwAy91ROUPIq6kiT9B9WxSaBcJtm2mXSLJTVebhu+NII82jTB9nu35LaZUxqySvgRbz/5buiaXyvnJZ0cq35rbBWz1nbRGPWZYnhm4e36lanSDab2WZCnmRQ7uFG7NR1s25FHCjRVEF9pTDnDrr2zMiwoKHxvn6imkeihFmx1mysPUcWxOt2nIivdVjB9Dj40GwAg0mBolsybk6uqlrro8GsdH679C7EmU3CfWSxMIWTEQTxhDn2N1rwgnBd33rpSat9b0SiOiyUskasIChHOjSWw34ZHwNNzeuw5JSonFpIZXYyKO0BKFVOhSlMoJ9UXmIddiXKKbaSVYM5qEkKqK8TAAXIt0o7wQCbp1YzzZdTZf5uV2qcUODfW+wah3FJQP5FJFs1ljhUTJA8/+3zwnw7RDlTIBnHYHbcEuy0wePNh7D52nBtLMuAdIMShnz9kqQOcv9DHyQ78eJo1empicDR5+nvfNsI2V8JTCHiXc+UOjMLb+UcuOTwiBKU+p1J/g/XAeFrPOVzbWBIZGm8/HTV1w2rLjv57AuV5h6zOW+nnEWUh8BA3Z/ZdcNQCZqIx4b/H4aU15I3BgoGir3QTPBAPc0j9cAYLAlRIwJzDuPsY66xxLNnEbIrlvhP/JQgU3L+6epW8bYL3Q253HUp8xQjd2vqvZKwqQ+F/yD8YjuEtnC5Wq4OUac9Lpyv1UzWHX9L9R9fSgAxVNmCfu39MeLIQ1iXwqOhlHOM7vVkMU4L9Xy3izzyYZ3qwk+e/rog46h9SVcTGThSb7rnCPWJIGrG5X5m40wf4cRwkDNknjM3RgCS9T9GtKfizVPM2jC/GjmOwDnH2qw+O2eLm3561uOZYAYWMMWyBRfSRJ8ZCrlO5Xz6sTwnUYU7zANW99GGZm9VoB13/8Ov2lt3wC3taXrWOwMfhtlefGQKSWEX9oyxCJ5ewoMwwW78Y2Z0XWNindLHCVPhLBWGjDaAQkrhIgyi7ZJOs/nTCEnuOtaen3ORfaSNoMCAYKQZGwAuig2DBbQcvIEe1teG02u8PoryRUyN4qTJlKeY3SudUf+1cj8fBaP3msZHCsenArNJXqpt0NQTvLYCXu7lKKJ4ZodD0iGhvcLvk7CByVfq4QePQF79emm4loTuym8TN52+nWC4H9jRvQKWI9e/NmiUvnzq6SevCKdUoSlK9x1panr0t8XGX3vgXSCiV/IKaWIkzt9dEP3U65xO9qfKaBxdrI9lThHraaKFJFmO+p1KnVyhYETMB4ixbmI5wW7bB0OOHnfO1cSjnnVbEpvVJsrgSbMBsyPln6xAbZe8plFYB8GnVdglCISDI4gzMsgnWstpNmFT0zXBGf/7NJTCTL1Pa6hSRfx6XMKO3XjUbH/mkt08RcAS4z+NrrMBnMeD9rdxS6hPu2gE+GJbB1LaVWSSNknoHbCunda7GRT3O4fY+K3104dvm+orZQ27veJI5MtNL3vN+J0Q3KnvYhfEtAECAKhwhhRuME8ul9f7IikSZ2a6PWpoz/728d7ImQcbcCwb1EUteNS3brC50/QNZn7ffw0DhpS5G5t7GzodNGk2O84+H5QfipGFq+hODfICdKmgkvkAeGyVZePHb3ETJHjx5Cj9KET3kGbGXqdUGILOewjrQaOypDwRHZbwoZVY6oW3dksiyJ8uORzHyQOnddg5owzGxnLq1rLo7gmPOuP1CVxaxTKPI9iB9P1qVnMVQXY5bk20990sbNWhicrDbRu1Iym1vPDiR+soAuH9plf3wUW9zYQT8vddbFISmG9dMa3NFpnryM+24PCHNBtuMXUqG30z3g3UL40fSmNqgGUZLgmQ7aYeqCHIjLKAAvN+sixjp9oHpr+/+3EcG9HcP0vdCpyMr3mjxjkT/GIfXAvZ71imhsbXc2VrUtXVQutaWlKTVeKi1aKVK6t9M486SefiFk7vrZSJ4xJgxgUHFTIcP6TpwJg9KKMsSTj2mmjWUKMV2SwDh/zHW9GQzg5es9I6tXDUssn5lnPkWx3zbdVT+W7+XLx/QTdBepMbHk7AHSvLFzdsi8sYFSld/31DRAfsB1w8PwGkmTmHaolmSajjQlMjUzLjdsXiE5yY1iHPcN4wfHY4U/kJvhUZjZU1m3y89tWzLjWcJnC3wOo/TqOwDR24yiabEEcXUwDhopQiHZq/W8i0JIfyS07iHxkud0hiu4YyRXQTLzdyM3HkT3fItR8DRBlpS7N7VqhKummgISDqwwVTA+W9P1N50+Z9JO4fyLVxUnH77E0NfVbKVMLbWzGSx3ojyAhmyIPMe+egmTQanLBEoLb+8yxybc0kNo4dRwJTnZxMUyRbm07ZH4qUtYVe/zuruvwaJUI+eSbZfriNWW9CEoMi9Vay9DbdP8UhUjit1KKGiammXwR2Z2g3ckBak4YZiTKSiqKIDqHF3BxS+0nM3npuhBz4ZvTgHyu1BfrahsYBkjAx5fFr+cTK1aGIkWXIFYwGp8QGH7YcXKTZXGrurMpUsICGpslu+Q3Zw6TzhZWOhf40hp+Gjqxghd4FZfnFdIam4+RC8PM5pWmoTxVuATxmN1kwK3L/InrKzjEdMHMIdJj7cX/mMyODS1xym0s+iwlUX5LvVqntEnZ6IeKo1c6paY+b/cezYAShVN6WfUVgdgj1IXz9zHfUkpR/gSGJW9tgV3Ip24k4G+w47Zsmdofc/xfC/nfOotWqJX+UinIk9a/jUCvBIn1E+bftTCPbybG9Uyan71xILBAyNYUBzWm/UlIqt8O1xDLCOAqgLL630tjLMZlUpTv72uBC3aKxZBTKh1GGXwJSjSTtwL0hIDm1cAc2nOmvWNzhyDGdWmZD3AEhs899Uxm3/2Kp7Vnab0Z/w1gprW0KASigtOZxczXHnT21Fkrmyjc0XOiy7yvF5U73sKTm4uBDaj4efutE8b/efzkxVWvFrg8ns06oeSH4jPQtid/l9LP/afHQttMLpcxVVRWByKUK82cynwzzseSWtD2x3Yj2YCXH5LaKXBEWfvj7W1m4mMC7rljBL3ghJ4NWqQC1GzHaPl87vBzFp+df0U3SQqRbUo1STXIynzVeDQYuRjdobcHNBC7zmXLEiZDp5pa8E5F7Fr2hpHwa3Hm/2zdioiPIS2fAgIY16n8lQrnRvgPVH8XiktKT7umKMDwNtOYwHizpKNvn0MhK4c6vque8VgNrAtDAYJUxkiPcjc0zJYr76W0mNyyX/3/A4xAiKnHcqt9IjreV6xCpXULIv0olM91xPs/xUjbY4Ohj/7X4q79mdxHaBBWgOdAtloxrcUjCpXyitVTxwxp4sbevFVOFqpgNLXZ8fVygNF29/05xq9lE8Bor25li6R6/4ugniIF5VuDW1UYhwobfdq0AQ7YPQ5IsxS03pflfu2Q2s0eWRRKT0A71aCukFp5W+mcMRqtO8Tndj+LWwjxd8m175L2o/zoESEnVsiI9t2F9OIjuUETYvR0ucMxqALj3xvg3mVDXRu+ZDCjyDQElza/6/fGrb3R+RUte7Ohft9jkIw+h5pZ3Qeq0AfINBXyuJS81m5PF9u6rY9VG90w3dzTuihClmq7Xhbx+G8Cgc8ubZihbFPJjkDh4y1dzmLdKcqwpBYPgjG/Zi15A5clkxwME+Rd67veGqtPcP/VOwbyOx7zlZPiaeojH4c94W+vPSXZrTsSIICEnHPZkV2JKIC58wMIpJsG7IyqVgb+Wa94WrNukh4uNcICmwKijdR/WFp+YJqAc5RxXogSYjORI80WkTIHyvobBn8h4PHRdE1jsQkSWgybUvJmVP6DG4yk4a6Q6zd/h90zkRFb3r3KBJA7a0mxz+a6X0A4X63/SYeCm7wVP8I/dX7MHbM9QxpKJnR+RS4lraTa17KM2r6MjDk98HL6RjnzEkHSvU5vtBVLY+uedJiV7ev2ylSk/94lLItdGY2TswL6dWHz4EumlDVyP3xDbqTG/wTQMflmPOPFgwVhiSf6ACa1ZJB98OG1qLBzF6433Z9OJs8vxAz6PQrFW1dvwwP1I9j9IHk6h0/g+b4Y1sJMQPt/1Um4bqxOBzY2b4z/wytqrgsVh4l7Q5TFjVHlWHR6377aH/JhrW3HLTSg4HVTIyKuxs+iWHiUst/zqiG/XCpiZHJZpGv3NIFUBzsdSbWy0cOi0sRmafiVVZ+2bkW7/olBT2UQCZeFgyJe84O+iRuDoOLhYCF4OFyiwMJBpKxHkFq9+JaPy9QkZhzVvV9kVlhF7sFIVUC3kdmf017KoTqP14U7Cr4Y9cEM25Z1/jFI3B2zvotFZCo3O9o5tckVuRq2DSOQBYcqYmWed4lNO8/YmyfSMWL7a+nm6sB6KKSoFfxLasMQu7c5HulY1cwmNQRrmx11Pj4V7FeH1+VDFKMoY+dSJM4ewYg73B0xERKjrOsqXNEq5KtXa6wXeHAUx2PPhwxOd8T3nd9DWpHXaxy478L+wjxIPC+EWqUoW9GXaYA+cVf8F7KU3YdMvcW2dGLQz5rZjgZK37+rqt86bWElj6CjhYNw6fi5t163UMm4bDcXy3G8rDXp7Qwz8Ns3jFNGXf/iCpr6RLeiywa0pTEnBz48dbj0g+CEHKOVZyf/27XOJAdQVfb29Mg0xXLEnncM5m58JsyQEB/44Vxt+sYBn4Bh8ycsr+ogLT504Ce/0q+Uptab6uOkvlqcRCgAff/Lyj4BWkVGTAJxKIE8+zUL0fVDrKYTSsWk8I8Y9wxROhlmpBadtwHcYl/UEdJzS3n88fk7eDBtRGgCrCPvAVI2oUTuhStVfNn3GXBIzzRx4yELSOYBXtmcqYcZD5k9RRz2N2ZnlLiWUOxoVuUeQNLhlF+b6gqJzIUZQijkvKrVYqz2vxR9XXZeUqvqpR6IvtYn88HGv4TTgXJ8VxOwisW+kILwco6qksH46GY+uE/wcQ5oliK/xI0YtH4S/Rwir/wGCfByYAOOdlYRww0NIfVVFVoEulTikLA8TexGdJPsXEp8v6JJ8J3lU0pY00Hxw9yRFVk7QQ1awfDurRyfUmbveU9ZLegP8zBMZ9phJVWNlMPRASkEabWBVnfD1An0YvmfLmBRGLSJkl5wvSoWVIKwip2aaKI4LhgmvlTckm52RU3DVrldgCPiN7lpCf4qxoGt15nsNzYp7obpGDktPUNoalVdEPxJuhCr4O01ZrD6xmcvf8B4UI2D/Y5C/N27T3/KlZgP6h5EMZsVblvP7127LRi22a+oq/s7HpydBubW3dglUu/d4A2Cg8j61mCP0xg9oktHrjijONFpOJdw+MUYseLLOUD0+zdiaWZdHHYIhiacxuJWi3eoWTUhkxGzGcyzZ+h1t7tMvRX7rVKMyKTA3tMiq9rtnFsUyEA9M9zp/zwemXZhk3wKFJcLUoo22gPPQjdENMpU/keMiIhne87dTMz4WgIpoeltlNEf7uzFeMrNi/AshHYYo7zC+Tz4tOw9J/dbwah8TacBnrEdIXkUVM7c9ZXlrNKbo9UTW3O6w0PuEbxUg7QT1eMN6Bznpt2Sb6q0IHxmEoji3kEpkQUjV82AOtHCX7fN9Tvawc5ecCnsvsGWZP8ZrDN0wxduqdf873WZgUvzYwc9FnCfGLlzcH5jrMte0YBwafoP88KxbDy/Csz7LEUBb96fBMrZyZZx5UwNE5VVkSv1dtKCzE5lYN/v/C8XHHWq+BwMAgwmKDlLAB4Pukxj4T2VG7yQtHDruw6UVTVzftoytw6ApWuYPAKu6Lu8CQZfRlr0yeDr7VeXx6xyHPYhw8V3EnO7t+1T8Fd1H6rTUswMQGPdpLn0EoocO9/M2fNAAlq+IWKDWFOkXAcFzGEWyGhKrcNUJteE5GErVRjQ4vxT91/RafwonMjS6e6nlH4E+168waOBElcLc4h0iGWHC1npia4/vDzSB2TEhau1JOwOKsjNxrL2RMIkGrY7XaPvs2Xx4bkHX6/kpEqvTg0qRnjN9Ypn9FmcA6L5L2ORX6DIxDZWGMwSD3qMEgPw11fOgtHa0P1xNNctk7q0SZHODaP82/hFzfnSzd6ygwghrbWwuumWMvXbulsKTv9PInT5bPhlVi+UnwxmzcicdDRrOMTuEDgURHrbPu48yIe3bBnj723fbiS8cBOZ4DXuiqJGSYRywMdw2aHCy7kTipXBWnnqlSRNaIt7GkL2tILJDxeyiRGodrrA9fsG9HUOLZo8MunMEpzwcAf8KhxBOhPWWMWwWdKM0IkkvRfzn0/6ic5lhI8TqncQxkgiqcG+8KJ9evet5FK+1V367cnUVn72/Q0ZyajPOBL0At4ggyt0ulAfM7eM22MYMgTP3+VH+UM8QQ1oEWVfy3RPSKEtW/QsL2tRKC+41fFw2g3qD7UmggUGU8JsFIWlNz+MyFqTFRxBYQBxxJ1UEnhEqFD0f4bYWaY+kXDGRNtNO7ycq9gnc9bOAG8AHjI7QfmgAuEJsAeoy7UtOpxq9pLjbchf0G5YVb3c9owKmQlBUMq9YwOxFgjIumlVYZJDCUwojlWOW9o8vKg+YdiI+LOacT4PBgmKbkGdXj+XUgbsm2JpEwXuUx5A2Wdr/tKY2uOHcZgUXXo7//FsakiFXfoIlcEfFZpvVde2dUtRHOAOjCbgRfmoRsPxXZC/sOzC5CeuArCjS6K+JkMqsOUiSVpqSwusXlkSfBqVa91eqczGUDkIhrvzYECLNPl0Ah/vhXC9bvVf2Jrdi8KgCxtHBDPt2bakOBGIGolyBo9/avPKCOLSaXsURk+Edb8iEFinP5VFtswRQl3jT42n7pBnBtC8MBEOHJJtFhQLGWbcUelh6/MA4CVOvkQDcdUQsYghkQn3fKA/Q8LMjnMK0SzXl4a9JWkUU9FvLAMHpAhPBu80p/aoZm6ZRnja729L8PVyaplQKy2qPo5ed95QEpIwm4O1rAYsKKQ1GP+vW8Wylt2OuPxTmU4Huqn86v1TXx+YVrCwg1oHu7e4pUPNm0fvKsczJR5ris4vWvV0kMD1HrqhFi7aSdr9lCQnH+UqnyPAon/L67ZYHd8a5HirwwNobWcSaFzoZ7gFallEjncG2K+dmJLEei6xDF6d2mh1VJB59xCWfOl327YybcGYDkqOqox3lx7Bm6C+qIeDa8PNU52Ygxg/q6ibksMwDUZucorpjWyBNggMHPKlWw7MZTsuHUekFjC1W68m4sd/c4gQrnDQy/1Wa0ANytfC0g72yVSQVj4zLFQQzcJelrRBAZmQ20UAyfzzScj1f0SRE1fQuBpoM42q+azM6S94CFcd07yzrzuvUzde3HqBhoDL13i3zV9oMBeIfMPi3MPHmS18HfULziNSRMssXnZBGEEtZrVbJimuAlnd1AmwVJ0I02n90InA7NovrjZdPuFWu+Y77q9JtR1nLMsd7E2pqlPkpzMv/af6VyvtuZDP4CwSWmwr0aoipTuzHqiBpjnmnMKIVdbB/8JmzLxONKIZJnHbXUcGVLd3ma6EYQB493dYmjL4/TkoIWyJ6OC7pwGueXtkJrY3qnodBGvjHTjKNAIKKEwet29+TzrFTY6IUVsyYOpHhu0A45ZPD169Y8yRAy8WzxC3n7uOM+p2RIc6vJo2DBzssS9x2CntolvKFAKgXOOUvgwzbZrCYFACmrKtJHba/2SCY3VMZwV2WBBFfZDRa0+IxKDpf/ckLk5pv8+6WakGOyVpXO7NW+c08uyVBnagRxt4/jE3PCeAu4bwA7bL9odRcYGKXmGwINvuILP+oA16B66QYx/y0qo1NTZ7XS0AQN7jlqmSTMw1fhS6J8f57pfEYQpsUbznGMYJe+dQVgmRZ6aYB0KLDd1xofraunDlixaEq0VgvDK6+dFAGLfxFYYhjDxtnOkwW4CHXD0or0ByEpMogMKthrQceikDLSvDRncUp6dpLLUQZ9IAMCBxDT3ATPPaH6iVQN0a1GZlWO6p7XpNE3AbJtQFcWV2sMaO3N+r0jL/6mCXcE6CdL12KqzG9/STUcs9g8WUXkTYi1YKaIGRPsgRFjF7bAB+tyDzDvlBFvDtIB9/K97BMyzm/7aZ4mZpm4e8oL7fB6Z7eMsgoHKJH/oU+QIaP2Y6ncl3bZ/MyP2AS8Hb+Z+Z2TeGNuXyedXsz1sh67tM1FGJO6zPmnj8Vkm3w7CQhFLJfVoSemie5ogeLjxK81GdFu2oF+oeNFiG03/ueFOJ9BCCb9pUX+O7F5Q2VksgJLX96qeCDVEbEFpRts2JfJzr1tCqeIkizkO3onf9NADLQksdie5ks50tQq43Ocalg9mlmURud524dLfx2gAZgOPO9/Jo/gS1YQf0V8cS84zWbBXH3yNe71S8qK0QMYSvhsPy+d0Oxa7BbOYrqS6oKKa2FovaoMhaqwbLfH2sVCakw5rp7tok0y5LpPAhF8otY22Dcdn7iv3MaqtmApY87r/ZOP/OUWLK/slzbbL4/5ETVG4s+1ii59VpAmuvsXig/DR6Mhha1Ueo/GMGUsK9IGY54usaVijMzuqbs6ZFqTSpRvA6jClLOxDgpdejmPeo75neFYWzmhXP+15E9dQsxBykGNCkQwHhUQ31NLaTHFOi1dsiXD13Ph/FlvoSkmPfjwX0hu+mUNaFHggv4kd8X4wWHI1I9ryTrRif205JkbVrQ0REg0bLy0h116n1nWvkOUTXo+6XKy3xEAB4Xq3boNOVkbYeA3Ka+bw6y8zaBeGScKlQa6j0I6zYhRd9R5S5ipnFtx6Lp9tZWozZyeTpEQkM1TwcS9V4EoPtxi8S7NFJ3ZQIZInOGVnETMDCZd4GSJiF0c7S4c4buPOBTRcAlzM0OUFyngr5nxwY9jtcry4KHCG5u04b3Xj+w7khpmN4kznDlbAS31rx3jxYIDBky6+jYpFdcQ+U1uXX678bML/JGpHl1sjyFzL6GVlhkPOeAJC9n1iMcpXt/xaL/0LAm2gZmhdMISelIKogWh+WnImmyn6gjrU75ZXEhedM09yp76B+A94aFEebdASgNT/kBM0+BXE2os9n58Kw3RgK1mj21RByM+VODkEgJnCy50wmuiTp4eYjTjxwipQbKowwIDWA81lid7BJyhpCjB7xoQFRMgyiIODqL73WcekR17H6otVFC7E9Gy23DoNKK4e5oQkbKhsTrkmJzh3IaSxjXws114wLOImxHs56Kt3FZq9QIumr03orr1raI4wmEi2llzHSlaARlZwLvHB6l06KnXeWjQTn12CQxwxsaZn5WwK3E2u8dxv1DsqYFqStC5es0V89yC4vgWJxlb0twLqpmYaNS/96QlGvdGQVOt69E4+cOjaW7M58jXojKEuPVyY/yqE/xpeU9Gj2kICgUfPuci4DMBekFt1a+S8PC8HNHy4zxXkRObLR2c9v6+tdhJ3/8RZSwf81pYjcpT7hbP0mLNVopAVfBYvWwayMg5MryzdlUauV8CWMiNFm7wDLiw+InvrCKCPE3+QK33xsbbzaDlUKbRM7+5jkjjCS3rpMLpVHS8oKm1bigXDTxAb5CRDoyvwxqUZfSWJVrc7jkjEE96WQiP8q/RrwELUuwCeTOGI5z7nYiK7qt1IQIgUTKmhuZnkMifoj0zzN+cNJx3FEN0um6V+uMAeRoYa0XMLfmHVAVURvHtvZ7/wNXwJU2I8ELqtI0Ky4Zm66G+pKw5qtnQMKf39zkqWQkZ2YIg/1sE+RLmK5KntC1oufS5mvgLA1k0Ct34R4EJlS171SkcTdv5FOCpgAC8FXxDobicWG6WOC5piA4zQbouZ5kcHicPnNpjm0MEQ1W3IwrbFLSGEOGxId+AhaGg8dPzZwTHDGvvY0d9nAYgZCl4AV5Yo8QLUOnaUFBiHdaJsmm7TcgOF9KHAFc/FJL6UL5OyhFxzBFtZa/20L38UIBpTWFs3+BfD1gVWNINsJgIkYfbrmqKFRaMT+Hlh0ockJFq+2ZiEJEhHaf4U5vortZ2nAqZdIgD0iIgN234E6w1AurnBn+iJZgxeU3a/PVs48KarbEP0w0i7iZduN2L9V7pzK27IjLWLQOQFEfQxHTI5fWokrqaKlXHdGXVBHL3HQgT14aJBx/Jqd1L04ixWj4yvJv+yLwlsDAXllLMtQme9JT85Hqv2lT7ZXUDPUGbK0qrjCv/ulENuStBZwNBUzgWTVlM7VLQPoOLxTWVeMlua2tq4QnX8Q4ixtWchxnn2rwZXPZgGdfYgGWmSd1PB8fmIdUyDAZ4rC48sVu7GUuY0I40Jib7lnCYuR9dQXCocsXih6VA2JAUjiY2h6v6mfz81MTKPoDSd/7FuZD4DXsEs7cZGwGKKHfGAJsKn2mMPkGIqwFP7eTYZKiHWrwkV3Lk/7wiAW8uvQ9iMnW+kzhhh5jYehn7VGr1i8cN0eHNwAL3gd9nbnarskTUuK0pQSRQ5pgnDB3Zod0fsEiigoq/F6WnPIdFGN7Bn6RTII+LsQBig9RNs4TjFpNtu068mK2N6qbBXt3u1bd+gk2i2wlsKSI69AfNX6k9HBnkKI3hioBtXxYSMbvd4JNIpGG+XLnfdqdN8rwCudIfxZidxDkCnLydRn7Zps5pm28LnFOgh8w6JQRx7IIUWCLjm3TMIE3RnDaY1bWrx2RilKuC3H87YPKCN+lgP8VMBis7RWiwTX7ib6SK7G3hRj6RTjlHJOn2P5105eMH3Lrl+AVWdSMhnXt4bwkkDOT/zObVBexwmqXI9U1ijk8tlPzgZKf/qDkCsIFdGaj3sojCs9eZQWzmTBn9hpZfptbPojUEwlgLruUrzL3mB+02Hr5vRBK45xFruWBUJ0EVu1kgugbS75+BfQBG2I1qpxnRcqZHcFMkaGICGzBTOkqJiY1qGbAYsGh4ahDbjNpw8NXyxqOd97c3Hf5qhHkr633devddWBcIsmMJJyHS3oAjONKHz8rdnWgp6GdInEzeHw4QT7RCM66M2rrGyqZ+0AUd+vrUKOwIjOXGGzBymuE+Zex+CU2ne1g/zH9bYrGB2y7FzU2oh4rTp2wMNJ3iTdQaHkUjDB6PodO6Tm/EYttTWLN2KOKnNGmf3kpW6xaOhALYW+vRMtbLExZ9+97l8wjGTRgb/m9YZ54ANtkLfvk9PraEBRDGY4e461wwzHcKORoO98K1tXpHF9Fg3TGApm/bi9NjfYQHtu6wg+eoRPPIDuaUY0oL1lwnpszwDhwYePun3pEM+FpxTnX0s32+2vcgg0olNlpX07/UI4GFxksBGEHwKVjj6itZaT0aKNV+nLGcwKWrRK42QDKvol986x6T2tr3fyPzQAPndOnow4OeS+f7VhaRZxibg59TpHl2B5rOvmt4Z7LHHHPnE+d9V1HAdIbBjzAFzvTWvhAq4kdp+zPl7Q4cszpGi9UufWZV7zElLYTSkNhc5NXMvHNGNYCRbeOLBBHLkUqcdPqr6vfvikidLS172EK4VQ8ooKV8n93JTd+ket4+hWAtJnAYiboB3DVTzqSoeGuC5f0wYBnsQ9pUreeM2GM5kPp9WTNUBRvC9xJu8N2XfW+XCIWSaPLk6TMhnIxEJxwFVq7c4EeMbQb2NExK1zSXDL1AFc8hryp7eOAeClMmQWuUuTjC0ZPd4rpR4XIm/i+Vah5meLICc3Uc09T/nHmV37Cp3dtmt8MGUGY+3CR2UY7Feivr/3c1NFid9bJHnpUnvUQIjo1djpurWnXcJH2A7h4pTIToTQRAApR5V9wsL1jPgYWop+FUjjG2X8y2cy8pSqxG3OSzIHRflnEYQ9zgjSUK8bJvuDFt5fLWhrvtbfsQedEoZebRa2QEN5sRI5woGhpDfqJnVYnT/hczcYeZf8dmL09qRW6CNDm5/0ebojdtb5FEn+4bU3dAVIQw2k7/VNMRV2q37j7b+Tk7mlPITFpo15MGXiAajBnT1ldU2uIyIzSpcIgS9bi61F8DJMg57jkat6zOtmfqnJa6cAY0L+JDDrlFjdgSqTZndG2D2c+CIn4oBDqufagwT/heOT+9QGYut87n7GjCVatYXqm1Ca5sRY9W0zAefhhoaPr65chZoVHx+lqExSxNHDKui9MYFN7wTtZbsA/UUwiz8gz5wVKfKSutT74MFuZPrNqlsxcbqOco8uu59dhBGt+ScqAol61F3Jn+xFgG6pwGFlC6K00ZOpYNfqp8b3Vzo8ce0N+x3yq9WNtBWqDf46jK8ONGeILSFLsggQcEvSXI65zzVa/imLILDrcEFj64msTC0P977oztGLb41WWtLkgwM5wljCnTPKC1Ra/G5RpQD++toOoW09Z/Fj8JVXfoF/3d5vQ8E8vM3rwqq1eNvDhlFw60NfU/OKzRp63ULJaI8LMTkKUwne+Kgw0Ter5uNVwkcTdOF8EO4x3eJ0i6al2tj2c80dABo/dwZHiq5r84v7fnHwD2uwMRuOZegIZ9IX37sRrZvD8Dkot0huX+cOJlj33mvJAYd7WrLdCyu25XyNdsj+tsEhXDgKGpLxURSYQkT4q0Y61wr7SrFGgYUzQDFvQCM3Lql7eHhblpLMPrUXSBqOKrgkdaTbg+ANzq2q6/vLEl6uQF1j36nn9tDK3B5y3w5BYQEa0NaIKXwrOusFESTvW6aFDL/3tqcE5+bngzAfzkl2mPvgVWKd91hrI5GenM+sXbz3N1pXX/wUA3D4P2/h9IxdxStu4VeNBV4iPKjGDfFyE+04WVSt9mpmZwtPptLd7qHjhKKMrvNgrcIV/pfySmmqVszf1u4l32Q+coRQ4Qf4pBHr6mhL+71z1jLaOk9VLptZvIx+SoD5WsI9q94j8nwUDrxiwfBkusqxUi6h63sY3PpVlxM1NniK9PLKMQ335MhuyNIwFfvmv9TB/VIAgAowhm9Je0cL1HAof+7Ho/j09i8CKAcLXxx8ViQ+puXrk1Ijp7m/6mzHu4oY0IDZb4btedZrOOhbRJe9mx/u4AnQ9DGbljfrXJouoPpRItcB7FyvTzJqxv5z+jC/xpwKqonZU+uefV0gY5oHDoXzlFm5auhHHAZRVuqYu68itWdnAWu+85T9XSEF62lUVnus0nmd0SKhQGgGPbpkTfU6puqfSBkgOshlgHAY6dAgGA1TrwjDS2f56W0WfAkuwKTmGMeg6epTlCNSn5Ec1Jq5iLe2WXWHtwnObfPFo/JLH+99pEFKpwbEw3TMFjGgwNiaa9pWTui+14jc9NHGpkm5F6lcVq+Z38kPY1ev0v7gU/paO8KYUmNCfRoP1jwPH2Ygf1FNXnz8DmqgtQuTMiwuRmwiG/Jjk3FjqIY4IXEjlVF2vkRy9tS3Br9irY21r6cV8PO5tbKfIIqft78hoOrqBOFalvVwEdJaIOeM6kMYFRFQq0hEsduZQ8jBD+72DqFIu5qWedVxRgWsmvI+S/QS+Q4ss2TRAJp9YHXoNitbKxWPnefV6ufZZFMxUIZso5zJyLm+7IevQeCxfSLu+89qreG79KjTTq4pcU3isYSG4hIocTTeuGkGguavcBFuPizpvGEvCWHeTqhLOzlG+MPh3j30m9aOlAx/XsRvcU1NRxLayW0TEGIhQJ12P46j78ts7XfHrwha8yHKAMDDVLA1lfQ0ftKLmk3vx3O3lWScPjm4FDbaBIDnmOndgBG6Mm/Eptxqsqu2ghJd4ulzY5MbVcySXG+/hLKgx2tfBRzL26x7NOa2t38/WlcLLHzQ8jFW54s8pOWjQ1/U83rq2Hh18wPQxJqKMnldRwKRt2pUvEGWVOWDpqzjycZMVW3ajjyv/xWbUGezZpiDNmY3IK5DDh6id+raV8XQMG9/fRxOlLlokEHDX6bvlqjQ7d2dFwTcolEr1UDFuK148/BhD+2XgcFZyDDmJbNxTFb1eM1UuVdK1u6al8OKcBB9uwjoIuqfiqrsm15+j4VkFQVyR9NQnYSr2lRon5suF+tLf+oHPRjAo4UWK4ev6qLc2f/A3aUvGWezvys5lZciWvx1cXsMG/rhc7RZ+KqAzpeTkxL/fn25AIY66XzloGqh8DzBrnz/oRj9d5CR06S/dhkquMM+r+k34wCbRSJM2P9RDRaT03CcYFpVVQrjjJtnbcXUy8sCcAkUqxp28AYx6y0EsH6oo+Y7xub59cwafIO8eoZt2akTjL/g+Z83Bpn72lNyUNngKsLjNe0OeU6rvLC6y2ALm/L5YRH3OW2G/QTVRReM6AO2RG5kopKUHV3jbGCuXBV9kpMO2+hSmTOBAYJqZthp+zPXU8O81lwhgtmjncvkfnBjodGt1TuphGXVgwovWBvsMaJ3u70FktH4hoxYpRP/JZpZo6JaiQ9SVMB1l1x6vyJN1rnluUWmj7vvrYb2e8fhhjVDDvpmzpnUBSoguKZKZJvbcX3c/phKVFD0YHT7bbKV/0MqLvan5tU7fFEq7XeQubd8SquVJ7Zghtr5fh0ChJ+/jQPepyLKGHX/CUtMCe5YgAZxolTGbNoz6QjPsOMX1V4FPX3WgUB46AOtfp0iF1/rl8Z+OzQvZw98woC7ZO+/FWSlZL9RCzmUNFVXgj2sZ2bX7oho7C2XxExZIjf1iFiOEvnRas3UMl//gIYmTb9J9zpmdywSoSORubagrB0aMPDZnCGwoI4MoSeEeldaYBdY1x8KzI+O4Z6VkLdHoN6PTDj1JRXSVypjGtqp+M1jwJEBzxepe1Ptkr8TlSTq8o0Nww44WaUnbntdzoCUfYEdkcE5CQQXJi1pM7OM8H1pJopPP8loQvBIv37GMgcybTULteuncaq0epJ/sewfaxbTUaERwO5YJcxHeg/U9ctHqRJOIYtljlmUJwkVN95ESu3Si/NHMpHzkpL2hXUMx5Te7RhNKJUWUN06KdJmyv67HDId84nTGoqoGzAAvXtMh3brcfbdrJZY+VIpLrSsoODfSu1X6vJcFJqCQQKTtDKCcnclFbpJF6zGz2KHZ3nk61NmA4UqBA4xxLGPmcyQAY/ZxyLvUudPWqKYjkFoPx91tFsWIFz6gJxNDvQRRnfBPinPoqa1olxjvQmZQ1slk59VPrwZDVbT/8piVOoyfoUEuda0kVHx3U8682u3LtZ9bpAihJNT6otA6YcHT7TtaZ/Tym8PgmPgZcTCEN2uqAqzIS2H+jMHDtT9Rj+tFhV6smgaq2ND8rjhKRnC3MBvfWLAIx0b99c9mX/LZeOFuVVBP8UWcidmlMrekfYTd0/ZeMZ1ZZPzRXXSn+23gcFN0XVrdzOPmzzhF+OT8eRAGZ6tMkth0sEHENj7rQHWIDEHyYHikz74vu5SvjdCsKi468TmVCQaZOFyoOcGUN65J5kLjlu6pBcB3xG8IpJSStPISegaSQkh/Jg36u7n6YXr/YxHEkdSurSPB8rUS7XcYzXWI4J49ZGw58N5+NatOAvVfEDF+UhjcpHnx6zoBUhOwMtBcbuPF05viVUs/eqrLYY/tqIkK/tBVC54SwC8WskLaObpSUWDZqJqTEs+oTIEUn1Xz3UMJ1LrhQO4wwSnZZnAzE+QB11OGr8GWZD4Qmb7THt0jca2Vp7q/z29H8mKkw0hNYxFi5RJFhAr1a4MafAUQzYescAcBce1G6378MZgXqC6tfX34On61gf/7usHdoWare3g0hoWRhI3Zt0EHnoUELqbogg838YIAuTUj7dQR4n+hb3WUWEh/SsUqwl46BWfzpHvKp4f1fg87tnptVdaTrQ4B5RZFImMmFdJeAKBxBDKjuEs2GGk1TaLNHkuuLXrXWoudEYg/rSVUfsbFOcyZUputgfdKDGDuGNc5cN6iQ0wMiEoteAfkbLZ0tpKvMax1nxyv2ucPdR+Gby6hOuYeWQglH0CUv5shKGGJ7t+ytsnDzFXyKKW135Px3U4mKY0yAXs2dcPmzXWrRIjvd6uAEjAWSiJkhqPnPFg7YaDJBSavpqXoXuQSXb9eZscmRiXvkRwMklSoarzYduKzpJJ0fBTpvNq/0C82BZmIxi/vbbqsz8r4I7a89pv3OklE6ptSRXQ+LxdPlDAOzJKM0pA4XSjXTKi0L576SaWXPJMaXdjpjr88SuGzeLahIaStfohaj6ri7XC6KoQgJtkH8609OmIydf0dsZ0IVuUoxbrSK+muYVzZxpdsjdAhhJ5admq9348zXmOk1hBI+TS9cYBG8K7vfI07H9gh1DgmW+/Zn/rPzXuVLojm+yVw4mMhUvYKLErKzQfYfH8zMTFzVOzGLFRz0ciY0eFM4R4iMFk2Tc2+TdwvQ6r69FX+u+wS9M9HcFHfEoPxt22wJa90p6AysRouP/zrfCXmdWDLYpeAsgo5aBZeaCUn79CMkhat1zU043GWJnetSrq68INLpFowQK4f4d3qjFzJH87dpJ7+alSm4tsVIGW4moGBEhcC82unOyrmEcRAsr1Axs3uQHjZC2Lh8eZwPOu7GYarsalfuC+Bv/TcdUJcc5XUI+olOeKq9sOqwNn3szgxVfYMT2blBCkBQgxOR+xeGpI39wd4eRursWnBIRslflW4WqLi8qvH8UM6wZID0zCNTYs1OF6us6GorCVvHNdC9stIuAv5s4dFmBrov0LtUDK/1FLZzNrIN5kww01+UVDRCh7RsB3THDqDz7eawjFO7M3uznkgjPSJa0G1MrB7Io9EgGmU2Bnae7ICNBKNzpWgRbmXU9ywh8XLfOwXHyjDUVYPz3vLS19K5RgcJCGSUPKew/zMsR0ku7H5TcQsgu2HIHlkocuDKrapcORsBylz7YUBiWy48pP0v8rO6VQQOhhys0LMbEeI9FruO7Vkhpv72MlQtxUBCdotUiOxOVJ4znjYfwMSZBR4z29dGyTOTO9wromXfE+2p5jfb6kBNunnnXVRsMPfOJ6suRlQlx4rWsdRvLlmTcFjKmHN58Nr1znJLuzW+of0gUJmf8D1PC0MEVtX+660ohy8dvs7Fh1nOP3j09bBu3Klck8o5uv8RRy8om4s2r58OTjfjhG4dAGyvblofRhJ6tMP4SwOUCrltwwHCC8RSyjuhzaSjOX+cfF0c6Ndn1hflkDfOFKe0YlbIoMYG64T9UciNzXO/6MucYIiV/D8PNGjxpZ86yiP6GZOa1k1wXX1RHvWg/v9KAUYbeoErZLnE9xJd6f8HZVCZna2gwRwmZyRk+agKDzMTEkh0LqwKZloWINgNI2BNljt0Rn6g7o2YqZ375RdH9FLFoF40pqRDP4sSwtDV7x6b3BFJ49lsmpaWiOwlC4r1fyN8WYA9LuGVEp+UrLE5VP8zKeo+DgOr3YjU4N8pPRVMCmDG0UqFz1Nggf4tjIARACKfnjG6IwIHKInIcLCMLM7hvByt+TPlKRU9d/xeFhAoIKAJBKDTOj766QJTXy/bHMs4hi+YzDIIYAsWX4yXa5cNEjNnnQiZnvbW0k0mTX3mj7J5k9Nooi42rfrgJssHUihNfNpI2pylaZpdG9qG+CDJb4YR9gZ5uOPaNx+ki0sMN0TXw8/+dNtfkjSBfsvnnaHLQawm6tPFO/88vqwsNQ+NvOF0N79NedKdmriMKv7T1NKa82CYKXAbefLqQNs+yiFzfpqpbje2M5PLtVqeO5QCisBSTIVXsuU8Dw2KPeiXWYrEY7tt8CmLdoT8+K+HEAGJm6eRs15/sQuZ7Qh1FUEeDUEcWQFqCH7CJxUzAaXwryB6ddlQcpSJwH1Tkw3vUMw6Ooy9ctjd+RRQrVjwTWx4roX16dihx3C3+s0bQTOLwg8eL2xHrm4c4ddbn1AOTWszpVRo2vEJDAKfNngDiBxsolRVY1XEesxB25DIQWjY9z5R8yiqyiSDEQ11fnmmme0Zmq+9LrHQi9hzFzg2qqlfdzjwuHz1+9pZn4+chEOfWpOiuzp0ui2L3bV8eB4ef5yuJacYPPLmA3MMfQs1eU3XtR9RYTVd4v5rlIaT7HWRKVDYRdwHHn+aedC80+qYsfyr0CF7UqSSDEXnY5l/gMzcNo2kBEczOqYqjDT9cHV/PSMWta5CDEWIDx64JGoBlOe8FAk7ggyE1J72cU6nDWL7UJyKMhxRy6Me3ztM2hPpGRrVUyZeMSZzsjQ7wpPEKF0zm+rm39CIB0+29L1sZz4ximfkmcVqXmdKZoB5Rt30YaVMNmfzRQ59dgxaj5RLn48d269PceP2M4ox+p+WF9GdyAdoDE+FbeGhIp7teuG9w2h+NzoIyEruU9wEldGq4MoLCrMVDqJu44tVC+q4xCB0v0O7hmqQWwjM+WqsW4xxALjmrVLFz6lK1GsjxctNvC3iA7o0GiHpwd+MCzhxubDxrl3sORnayXVTLlq8CXdCBxdqKVHwq/MFbyRFLCldvDb1vuhsxFqNfoejliCCS3XMyvt4/zxFG2ejo3OhXqMn16vak3k7eXYehjjqY1nGH4ryGt2CBOH29EPKUJgKMV3OiVNt3QaCCAwplEBTlff4oBHzYdANGu2wIrgyvy0gHemdGkZvn3nPse5bVLQ6rmq16kvEl1qYBCuPlPzotyqj3F0vyuOWC/kRct/BB9vLOO+fmH7shCLiGXqWTcJ80uN6PvIrr8SVRKHgZMRvwMdYfxO9HhMzUAI9PyWY6tl6hHyv4TLsIkBxfVRX8PB95MZHHqt+kFVH2NeQhadEy6YNKz0ojQhDepRPUMpjJoWE8/e56lLn0EHKlHDXOIuCDZbBKkSmpf5Sq9GpzL6ktL3bbe8JQggiNu2hCBKpQkwNlUWPtqfeq50MFk1/xBbmAx+LrubYa/6U29KQ4XLJIuZ2aeKYwbGv+MZhZqms85t/l6Hu1uOr0Y949j0SUEnFPHjE0IAfSCjiEN7iHkR+x8LnFHkb0W8foCvRd+TpR2OqA/4yO3fFMeA+PZ3194fUQMH4ETIanUp2g4LFnfxjazsOkdP8tFhapfI05rdRV7DlHDQ4ypMUJXiPdR8oVQWXXJNxzxjWLMTWDecQDAs6rblQFKnsYfg6DifQjnzywDjWtukb/FMIHr7K72cAChd4KDTQ55dQON5iQhOrDEIbL/SQcTxvIkX6tfjHdOK0bP4iyj8gQ+/ksuvKWjN+2gwCdSviJM+xfZIu4YEf1xVuoQTlfv1tsRvCF1Iz97ucL67OaCCSPbvOzBxA9YKZPK5f1TaKMoiOrnpdj6/6hCyUT5iveoYxbCz5iGYDqEn3ezqk6UA0SHToSehiiav25KcAhlpP9AoZo90zrrx9XnIm/4Pu+icB5K9oqY8ued5xYxzxN7JNUuTbJmScsZNb1qrO2QI64edZaSEOuUHerZXmud2gpZvms/aSJQy7DK75X4i66GPZZs+uJFknpTy+El5FKQBi0Sr0PWuumTbU0sC9Llq/eftKbG4plWtUpX2Lq6es86VWJ6KpzPgvOn1BlkNnIuoOF31WGpHe6eExFKpFPXTL56IcsjFCCLGJU1yLtiZQ7vA37p7FeswVa6gsiJdUsGqP3GPYwYudQEHt42FQuiS7gNi7pvAbLfMLoNeZSCydV+e+khp2IXj8KPsC4MfT7HLVphIiAeSGXYcjs60U2j0uGuzwgEjvCxm7D/toLDDhqHARwwIyGe+Li+GtUDsbTTJJmq0HGOvVq5ZB1mLoxxUMrtQcs5AkdfGDoIckv4oLCtdnM6ZUFDfblxCaho7DJS1FsrGdQ75yTF/1B8K2Rvm0NgijrkBetK8jZac/e3tXrEsSxO8VF33DgoBPdGzz+iHqQZ7IPZPv0UI7TFlOCduHtxJ1aF792M6gfK8I/Yd9JT+PGveLHvE9V/XrZoxBZywDcsPo6CC2E5k6Y1C0wDCWdNcuaDbtfms/0Kn3lWMtDwlzSACmGzP1s8fliJRuIIHj+HLR0YTE1UC2lzwKFku0vaST5e6wrIbVTJphFQ/cCo8Cjx/PPQbmia67pUfrZ017mIHPPnEyLt8UCNhoFodBdogD17GKG4psgSvXzdBZR5S7kuzUPSfvCfNmHpE1p53NqOqsmmDy/8Wrlutx93VR8bjukVTZ0uHqj5yWwrh0r4+9bmpJOXjCJviw7jOl+dI9oD7lWEjDCt+qVZedKM1RXGp5ePvY+YpaR8tEOBHmOpAlEPcxZ1HM7fNk2JzZR1VIrALUpZX6c8ExaPL084uUrhe181IZXXdJlikqMsTBC0SLS+Sy1BJ/2Nzdozm3fL0OIWdpYs/LAKQrWzJzyC5ZimGAuqvcrCzA0cOaod+uSOBOC5GwmlgP0vQ9MwlAR6UBodJ8+f9wBU7fk4onLO48Hkawk58Zk6WbOxzugbG9GyYe+FUBAzJK2GMmLizLcttz+b1RAVz1Gbj7cmkVQzstmLAXw9dSCVdQXCouhvH3pH638fNj95QeETIz0lViHQ98DrPEMvFi4G2Gf0GYbi06rD1ZNjqr5XElBcNfNwRpQmIRXsdP8unBE2fYXuY70b5xW7UjoW348wzXjqCcYwr3Y6EfaDe3FEb9iKiezeDhLOsd0lrtJPbfoUCLnjlcUO5/dKUy4f8Xd7Ywj8TYvCUxOv/D7S77bTv2JlDZ9W+Vv0EMQNTVCPdK1FB9ERIpZRs8YkZtA4fqdHDG4+kHitAZX+RoKb4YXSWMoCCfFU9NzzFQW2rZXQAA4kJg4EzAjxt45lNyBS8W8t8RTZwwZIQYVKtZTPt6ec4xbMuCf7fEJ16GlNKvgLgiPnHpIBX3lmjSdeV8A0+s2gsQZfmf9um6/BEjB3qZBPuMspfXL6N1s0LhxAV2NhqrTWwSX/LVaVJsxZvmxlm3B0+PiAJ2nXfTYxWYgflJM+HKWcp6oH+iCKqwbV52fwL5chVLOlkCTqljqfpD1mxmoNvckOUzPxuP4LD5nIR6p5l4cG4SeaLGyN8/Fww4ZMDDJIwihP2wgDkH8z8h4bP0wZrvRI8nQZJoSzggYhQH+xQPWgo8CsxaOLN1WCGONG4AUzoyAZo1fffMG8evTvujdfM7lUR8aTolIhaJGImwNb4+3aXbM04tuF6MSU/yRfhoPMCuHB3ndym0ohaMkSqjEqrdW0iv7a1wvCKJRG9fz2mo6oqbI+BJ91u/EeQAXSVyqag8bqIdkS3v865OB0OQ6WcLRK0R41Hlu6sNMIoTJ5R262ylSvRVRoWEpx+dvWpri/tLA4u8O4u+eoqgsSRrYXPEc07ujkCrVEdxS2IIEOFtXS2ZBTMuig7y+PiTrdawIz+SGD7Ga0FtMmOw+RhzBRBC72nna8kWstwE9A8qzPg/3zEI8IK/tg461bDnX5xXSevLUQOKYAZ4DrYCwPVDG5S7TZVLPL79JuzVCISrRN7ZkIOhwfqOKrWHEL+6jP5ZrFv+0CrP14yoBuDkF61V/jyzL8ez5LW5g8hqyfm3y0euzDQGpxTdEWd2jiYt1dJUy4WGk+b2bmaZ1F3kWovUdLJimgwVYvzaGGD1Y41kWXhyRF2uKx+oePX72dNUyDicGVLCLYmA/580PH5e2Bt4UeKqlfidNhCBrdk1l+Tn5qx7Vc3SUY6hOfwb/PH9tFFYEuy7lBdsa8uy9E+RauEPLpTyyxPed6ICfq8UIYXnNXshVYeKJ8sOmLQrfo1RgfnrnRjsQ5V5k+8EW9LNfzpsIJjoJinkGZznWLB2bql/dkHA7uBF35GJKUAKzgcwz8W1ZNF7RXYOc5HZJE9y4uaKtVmssdw+hxhv7AtpOYaAKCri1i6pZhXnrZ5VD6oEXQ0oD54xJXkPDsMdlFDUkTnb+D1CTy9UQSahjvHcmgs0QuK2ikgKowEZPSc3l0ZtKj6gy+wwWo6p2I7vr2IMQGKJc32cYnt+LAXcV6rOJU80ggdSIoLHuZ16IODtSjIQ5uys5gL3ktNvmklDeTuR8LAB7/1XShsJjvNZ4BiBDnB8X20s+thC81vfLCUFABenXUZhHeAJSzIvoAcLgZKCQbqKiC9I7CTjqJYdVfHU95Yy3QFY6TPvgXRSxcZs02aLhgf64TRLs3veqf0AhKm3ByVgPTGWCF7U0WlCC6uPkeh6I+TEeTXqephVByS6fqaHXJpxdKoV/U4O152sdjq5/2lteE43rRVXqvZ/dE/C7Z/gf8E1R+HmLc7TyhGIin7U5EGkdLQwVfRd89QGn3HJ/Z8fNxV+oaLwALR+0GyWQo2aHPGUpSM0Dq/0bG1Z7SpRFKWT2/dI6Ls+20P1zp1xroTjIGRLPQEzEUgVv/ufQffbqJJq/1jlbmuc0ZBVTHjSc+BuXZeWtC+xuWLSOrS5/0u5KKS3ZngtKi/cUw+ZljIoRuK/N025TOMTcdK+HaMUq7u9FZc0GiukwL2x32Xnz6t+vAFYT6GuwLVULLM+g+HbZTv4tMEL8uz9SJH/M3/YeuMZSmWCVvgF9H+wV8Cu81uiUbwCzpL6E6PiMMNzi2sO1/wCpAYyykkHjetg0lqnOUmraZIO71Aoqs2L3EXvFjCxR5OqTEOWJQel6pt5CXSX59Vn1i0M0dEHn4Wun9fZN3U2zyk6hMAEaZ0vJBvgk6zX/1kDbD/kfATZ7hjNm4yYmuwCe2Y4rgHQb9eP+8Ob/bRs5t+sMX8RReQxeXdo7ze3pp2ulaTbLMcz8H0Uy2vZ/pb94/sGj5B+RNWuVo+aqPoCgIQDX3EhE2bWnItvcIuL6+9/8kjUMO8yWYJuPKpcrGhlSQGci2WCJ5hjcxhuerIC/irKKynYQsUbRSIF/JFhetV/W1KwB95j7F90zTSZOxQXCxXm5m8lof80LnpZoUNvJ7G/fbGzVPFHYIiUSNqOf+137q1K2n3A6bodCxlI3AryPca1QOCIARWAXPg5YEFzds6IwVCbLDtnpOxuy3jB8DD4sYwsy+ljXrYUrBqabbYc9ck20eWG2O8vbRh/gMP7PlWiuYnucDJZ7e/LCvOkwHdAvzYbmkl17FfTfO7XmnERWB0tjjwRASc0wfYD890/6JLditzewqEzXJa/Jv8cKQeLC8Q+4gwyz/sT/ZuP4rP+6CbnJWzedN9X0uM5Q/hSI5fKfpdMq7v5elKEnrOs6YhEQKNIn5Vn/Q5iBHEAMYmC5jKkqJid/n1Zjle5yXCv0z6/TkDAwrZ2JGbY8iAq020KBh8GeiKXZIDIKcsSce9RY8BQkHB8KEFjZbGPH+HgerfHnVgFc8q2n9O7OwJnELJfqYFVz6NDgWaF2nhApk+sZQflKv4rYEF4Z162tbVeuZYTE89MOFR0NR90qDv+r86JbZ+kQUK9HfUJ6ENbzLRTt1pSH+rOB/e1dFKie838CkvceNrvS5k38k7S+yXt1r4CmyD2X3zVq9WJzrAxCqlhRxME8/cq9nDNi5GOY3DGGAAW/zWHX7lUv8+e1+U8Askl/QuLZTQhGxe6kVAzMij+ysTOhFcCn6KxZcBizbzorOztM9KazW6PWFq221+yQ+I8hzr5coL/qgTT4nTRIwuM8jnEb/rL9JLd0SnZgDJUIjhMBycybqxvxw8uG4VqTpjylkB5bBxIswpZ/0o3rhTlL7tMAMoPoLkfScK9MkBTrmnAh05NknCWpCSxqHBVLmkf8TJcFvIyZW1CECudAjFOVG6PkWE2AoeyVAFdC31vydTzd1eYqYnYksm+P/2GbBnbCFm8nB7s1hGplzLeW6Sy0czKl/Bj6+qOjZ1FaTHux/ZvUYdkRXEpCpd+NrSORbdJiWJG2piRIcKT38yXfsEiqRHDVb7wgeHHtnMED3bwS77vf7yTvXXbq2JBDUncjNtKQkuZnoFU5ZlEPmveNShfbdlXYwMlolBRvVZT30Scmg9A2u1r6NirUJLn38M1nv0htEZ+kF7tovMIJ4EFGjCbM3QspWi3+rhRnqURnW2K8dIOb6cfJVQX3aZM5Vn1/IAsgexU4HOancVL2NrJKhZRGK0BOYdAeU3Vucx6jyH3eCKSuZftPuZodx7mV+99hzh0IFXB20MBAgp3hnqYFC4gkqj/8lDjdZDdSZP9GNeBfGX7odRdF6Sc8w/bc64vfn9VMwBJeBCESiUXpGaxzjAFnYDhqIa0rA/uTiC9SBYcbM3iM3T+g/dfmPhr46cpPLhmPuGF+JpjDPjFeGlzCKV7uCEwvij39sgwC6sIe2IG/72mMzY2iQvnkz5ARuClHfJmrIbJnUkRVXTcn8H3gvwCCHR0pYlwZGW3sG9cmoPOCUJSoxyfPOExk6dMUDrFwXCtSTL1Ac2YAxX3cyU2D4ideOOkISkGwVA/YaxdLBe+2esRl0O9PQBDFdxJ/owOsdVE2H5M1SD32pj4eUuanrgjBotoCQ25+VCBtuq5Xt/3gchPH1jHVTwDEgKLxAzpd3fFX+x4xMDkUEgXCuX2pNp7BtFDsNDm16FatHoz8yvLHeNx/hA7e6FumpOEKWriv4YMPYXSXdHbKx/rOlABC/lNrsfPGmZJU1/g8y/pO6isfgSHhvQ9SAwF1p5/ag3/Qix9K7PFPWfJGQ1XZXqA2bRbiU8n8xdRyyCikC/fjD/fbDJkZHuELap0Ofy1hFHuG6qtZhlgu2OA1EvVtGFyZDS9miUKMWX/394bhaTVeYHQo9Z9UbcQvwkmBjMf5PHzogGukltAiB/1SZoJT9tfx29u88LAqwWXJlQfJpR4+ulcey4ivR/HzYVRf72ltwTKM1Hzcq03lNdgxjPjZhZowFCIsV8aG2ACB3YrR/aUc6cTefphAXiurvHl53Otfnq6k8c7x95AjVFpMzi0D75ghjBNuV9KyWtTLDCUVNdYq8i/xiiEyL89XXDBms5R4zPc5slotNj1sWn6ChfVxcq6dSZdyQGxelmb0XBhl6oEV4UCuu76XybdAq6ote8YIeZZXLBSL5yAekABc4fUWzKN3izjIeGqbofASFg5XelnwFV6GgBmyWJT0fKdXMcNzCoDAPDNvwmxKgm+2K2TFWJMo2bIiHLX/yuXAY4gEgWqzNnRa8FX1avUxnzulCk8JK4F9gM4hjVIQaWOH3i3KqJyhuzN1koTqPZ5gv17HXpE7AVo0P16riyWNpS37N6djHRlceARYE3zKxoJSmGVTEj4W/Qp1FmiJUdJH4mlDkBWQe3nvHvUIWQZ7/XZm9qT3b8oJ7645iDd4mJZt2N9+T6SR2YgYjmHTAg3KQPkZxZyzLprgaYJwO2aKd7F/ZGPMatDhfvv9OnGrAX5P+zrk8jnSVGlVl/BGxELQl1mwBc/v97wJkwDykvodNUqmn1rym+45iGP5PqoQhSVgvQhg944337TatB0hXKdRcel4JOw19XJUMyZkgeybAIE2CsqKhZz1avD8P605ncwpe28CF7P4YWXO9MmiEeo3/19xjVcxIJ0On+oOn/w1Mrpj4fRl0sX75DBkoteVMuxW3yWBVuzexT0/VQI0Y7E+UR9jDKsQmnuVJHwCLjDdwuKJPfSSRmiJnRhSM/YwKvamo3pL99wS9m2yXrukgTTtv1AtrxuAUDUvASxo323jQpr2PY6LzFySUmhsUr2rTEwUty7uTB7wseb5UJgdoJEb1XFDzLXtrKrTHskd1P87y5kcpy0UW1O6/FtqPrmKI31EuMydR8XXtN/elW/EdvTHwtrrZ3zLjVpong4EjnD49fAXq4GMeGfRqnn9frG0w6cZLtMTpBBWTG6hRfa6PLK/ZiYm9Zhfvr/Oz1v/3jRHmkprZy2BkowVKtJ/0smmAf2nnibIfYrfLhYcnaQlAsQGjthU5Ip4qCfiNeQZL1v/lbqBM2PhrA4SIvmqZHblBf033pa6atrSZPHE6Ea2oN2mlsmikXI+JNy3z5ZvXkavkTIfWS8d2Vbc87zr4Ap3ozWRm6z60tyrigrA9pdCJO443L3j6LcrGgfeXURqK4+JUekbfh/CqgfBuRhrJ8GWoQhsrEEFz9Qs01pxp1fSbgveZ/TWAlllMFbG/TiiaCCqPJBy2j8iY5Wetu1ajlH9x3LAoH+8Fr7HTiLGwDH0P2Cve9/Xfp1qqVqAwCV0yFFimFb0XOpbFd40fmNDE+mTGFMHpOcxl7udQTQNbuwyeiMyYso6xSQnaNDpU7fY2b29pvT/32JeUF/KRdzN17bHuApdDyvufBxw4WBnHsvziEKwcl0/VpYYs6SRPB5dhoKRd6c+FrAn//cjTiADOluXobTomuj4Ck9dFwSz+psWtVWUAG+s2sr414Of2ONwAVQkAkVYnKdyG78YDghOf29MkbG467YMZOEsq9gD8g9yG3LRoDqnZpFr2Oh3U8KnVfnEIRpHPM2eSsFxG7UaEzariKAiZtTwCYQjwUpuV6AGgkmBZn7FFotlcOi8fZEu0SlqXVAPLqLPkOEhBDmQ9SjmZhTGccH+8toUprRIHgTGWtLGYXePuwXM78yIyW6atlg4h73Vjc+SU40aaoXOgen2FpxIaGDkeLi6jH84XHaCze0qzkoI8/Xx6xZG19pT19ilaqIULmx8vWTIoXl1sh8tjXuucplghMKslTOWMkEbAkmG+ntQaCcCj6GKFwdbslFWOdG5i4PZK5ZOJzhCpjOFb6YqcyZ2AgoMy7ju9CtX34OaDLZsq08CEPOArm+op33fsLUxZo4lS40w5D9PWIn5DN8c/PH9K981ACc66fnkeQ47b7nySA7Uax5cbL1d2QkSdbAKC/33TrxmEUpzynnLd9yqV/wfzhhOHbNMUoGXFUn/2uE1o2yFo3gIHU0lUud3od0lP8lj00Txz+EeRTs/EehzoaHA790PxfMair0Cp5At4Zth0YMHTIEIiC89hJ9LdQzL0+x5jKhKXFFNwp4S3btxRYBeOSeGoo5g+c9i4W/7+OJZEj+fju9TgieacSbpdnuZdZXY5KHTX2Sn+mgjeE6Q8/g/AS5ZKKcktR2r60mnn1r18eo+zp0XqfWwwUgI60rYG3ztP0SHelqYWLgLJh3xk8KA2VQkhNkedIlFa3KMAwfpi9Sq9ZzfWv854IOsN5kKlT1Ka3KNc0QSbFnTN8Rkv9RrBNWN8ow7DDAKQ9DHtyN+S+XItEAyeplbDsJ/9HmesuUr8caUgElAxTRUTHjewCQx0bKeUXn9XzHFzK2FCJCzaHQNjH4DUad5lybr0VjZbcnnPANsnep6+2Tz7/fk0tspaaUfohNAne9Xr3TFIlvEElbaMh2IR9PRgMdQtVoJMSMoDnUBduZWcvgs5/qIf19DHOXkrIda/TiEgzBNILGx/tvYAz5gKLtnaMMFnn4hX06/UdqFLG0s8/4jD2yuNb/bxmlOr+inT9C4YP0HtZdmEoid5YVn8+cvOn4cutL8gjbx4IWKWNx8NBGu2LkCKSrZPF/s9vq9XrA8G0ODbj5c0p9Te7cHXXXCSqG/zbpwgNRzZ9ib4B82yBjRQ0DjAhrA6lKCUTgSoWike3f3zqbR250Hs7N/q4FCdB4KnqTs/ab8esDN0SEqr8qh29olXtplGL5g0deWOuxpPsnRL4PH/Y5xTtpMiyrMDLH3LfTaOE94x81cSRnfg2wrBsXhWYx5WVODPGEbhMbd/fchXrP1EghYspkRcTz1GBprZXXmsuiMzObRHkC0PVOZbE3lCTYBbEIKysCWurtO4Q14c6WorlcoPCA+u/fvEHWAWBqFzQNOEhT8kugyTFXilp+JC2j3m61OLnH73ypTBjDAXlf+14SIpBqI+dWtCsQeHl+cHnpprI5x1BOSwqLJTLpx0fwe7tNIamdv0GGPXlBpEwvyMUv3IcEtXff1q8TLNVFtXeOBLCDEeezcsw8rC/fZi21rMgGzBUJGmcMGlaCZ6Jv3ree0z2q7UTUjYZ5k3/NS3Hws6IcqnuD1J7FwLvFRxSVCk6cZZDILKDwx2efFL2qcI0993fYgK7gaQ8B6KEjZyqNTQsvkZLJlomLdV/pZXvWCwjRX401KNN1MRKXdk6ic/crDD0a2oSDuI2YE7UEeCKSPcSwbzkCc7+9YXPA500ZW1Q5BpRDSWhW1d89N5nIc6WAnVJOMQc2DPI7PMSBFYxPMPbiMWyWhq4hlQes18dskJtaB2W7njJITC/4xA0+SgCyA5v8m8JM+z42uzty1k7UTGq8zDJh56G75yo332viraEv0XckIBK1V55zirelY8u3XJAGYTbtjWd/ABHV1U2SkhuHD4QtfG0bzrNf86rr5eGaE/kaPiRS6c6ABg2GGu1xG9Vb/2emW0OvYWnHkaHzul59Ga7Y6Cr/qCAPJn/I3jbccF3ho1gNLQCzmcGd0JlFOTQeWaQmC16auHoT/RPIDJ/LQYHZueM7GGc7nwvPkw+OYQ9lzzGxAYTlS9EzIBh5X4dEQaWxwY655UQX7iZ54+97LGHbFFC/ZnO2IF3Ew4zMMDBi1iCNHF3gn51Bvb/a6QVwMavDTqh7rpGGXBG8aHNMi656iZ0E10EsBH6cxUiVczeq3bgfXj5SjE/aQRaNBjTtiRzCVC1ytpfELzMy9UzViy0jEmUpd3ThIyb+n4JBbiO+bJgS/MWZqEw47jVhAfby3itME769hQ/QUgfBcSvSvYOlzShK1Y4+JQOMB7AaQ128stT1lr4LumR021G1qoH6vjm/mtThWn35oCQ5HVfvUpJN/bfNjZCuzJ3JNeYdM+4Z50B2gXvm68zvTd/tX1EdPcFHN3rdBh2u/0Z+zYzHm9y5OSAbwED/Fstx4v6qICGb79+vQegAgQtQOOvJP1PtIClUgMGTO69Hjy6w79k4vChD6hDv/52yhJ0GRtpxUREOLtbaoBMQKUOH+BhHxRdrDbL3GJc95pnzk5j89QvHRtsAOhuO0iS6gDd4q0uHEU/lzyaD/NiFEMDFj6MKYZ8KgubDHw0DxNMX5ddVzmgxBkEyOEnv4GwbK95IzEFu8hxHLc5qKXZdvvw5gZriJp6NN9+Ta5sbCIhS7OoGjb1vpHjlvVu+AEvn6/1kT19+jcAvQreskflvEydU+8cAs2ULiezRAa1WT2Z1QeVqHxm7wbTJnRZGZW4YkjeWgYnKy54J9/B2z+JQVws0mtyO2VAQJXwIRJK5TL9gKlgj9pIbq9Uw8d1xpf0q7/qac3PwK+yGCStVDLxvRbB2WPfntL6jEN3kwfg5MFioNXsOT04Q6vrmvwNLclWJCx/Z5kqw+cU6VQPBvx8Dfzu1wzw/Wj/4JvRvhtt+16Dxg+W+Vr94ue7sY2BAV/f1Xaks4lDxVLkIWiUu80tk452lBhaO//w6Es3pqWxjMupKgUNF93mKEQKAdMMeWIZsjz8OwnTNZ8WgGvoBMVsQ8tWsCjy8QSaKgr8QUY4QSJqixL3u2kNP/iEdqsuS2bsYQUn7AvSM1GFZMpUgfIapEZ4l5k6yVIxWYICOxlRwRhGqShm/S9/GZ/8Q9nXOtnSyoK3ljd4UUawDhbCTVlpXZbpqs7To119UkR1dJP3S2tEAYkQc08QMWPx+neNJ+sviA7SM2Nwn+Ntst8SKoDvInUZWVej8kXNAaovYu/tgL1UIzYTEGwRuqcWLOIcxMPl9D1pPElWhH0kxhwgw87UqNkSZPVuch30iRyYkpVjzZeBj3LB3YK2JPDrn2514sqLyrT5JqTLpTN9RBy9+mTXzthmOgQ+4dSs2CoS1AzVVL+U4/+4Fu4ujEG0Qz7rVW6pZxEmoisggIBVO2g94xyBFmkt52r1ipwFJ1djpVi7hCBCDzVUqhqz1HOmBBqO/2i9LWyKhxqvl7Y+MajhA7sZJQV0kgF6E3BSPwA9Laqx8XDni8SP0/LNeHxzYhrYuolzkB6WRPKcriQsGc+szVfsJRtm8UHjSrkIxWcXWzWAMuOkK01WxfHINldTKfkZFReTQO4umw7sxW+WCqoOtQVBk35K7YjDf1a7+N5XTL1LF+OiK4EDlnrKV9N6KgYvmNzLhQKwVYtjZlbJer6QqASC2wmBGApWPirKQDniBpD+Thln7UTIgrnT/6NCHPDiWmnCy7280Qlfl+Z37WAUCtXVYpP4oJHA2vtt+lUIjJwCOzZVlBEPbCoXi4UCI0c7hAaJf/wmM3eSQ6T4AzeN0bezSeLAKVdMM2dZPOfWBnaELzGlx8czMEeEl6GJ3qvpxVUnkGGuGPfGYGBg6N96LLAg5GFHLVsg6ByRddGYknSp3IHITGZupGgCgmWhV1amtn3+PfS5VvDzlb1KdeKsC6WVo2VAd914uB0pThWtdBffThCDEM7FaFgqe7qVPUVXtdiCXCls+Pjh1zw6QsOwFMb/QOKPpcRPa//JZqNb5PN1KN2INxd+plfGWu4WDBWWTrX4ijtZJaIKnwbdCv3ar1puDdF6eBeDREr43exEyRR+EK8MjWXi3seb05yFPlvl4VhxpNv6ts/NCR4NHTiwn66BAx6bm/LcIAs4Z3qzBxYFdKaiLZXPldRmr2SR1jf+b2UmfHBGKZXqp2LVAHrRqDKQ1fAv2gJU5L6sRqTI1TkuVChLi6wuk0+26VwwHmxHan39NehMbjvGuxOyGzvBreczl4rVUq1uigrhoSAjO7CozhXyKZ5FYR4PkRBqsjtRtH0KwFxFXEFwA0GnrPpfGXrP+84MZnJAbLgRi5qY3tBstNayRjr4QLs95APFfIrbygnqsv2naKabaSqqQVr0UM+2TpRRylTQTnYVHgCpdKmfAy1GvGMI6GyZ7yIadhRBq97LFs3mZD+Pc5UfNYevgiRyCkfSL3KTUw2BrF7ZWAlyiUCRyoBbn4oQbBGdY8i6NuCKNgiabXB9s1o7+Kb4Rzq27MZ893tSpwd+QRpQMeXie/4aC3vVIK9JG8zVXpHe3llLYGqsWs9BBgmMN+R0NPZx1EAihyqPgRYB8rbIuwEYzY+u41eLs/vxr5aXEYO5r/cqtj51/cnoCdOw4uT6W/kaRPjc73BBvrsKI6uKaWtIZT1ESLdRt4EUdQYlmNmjkJi1NlqbodgcaxlLBodZlxfcwSEUb2NcV/th+K9OpPJvl/KsjSW5xTE/rIkDVo+F5AVT+NYeaclwLTf3W5n7HEQKYP71JYZFVh44P6g5WV5jHJ81x+yzgAcgiLty3p72nvCkXk2DGDNAqSAqUkA+jsDvNeJtpPb4Um0SixNBxVeHFsD59dH2NOX914fOwqToEdLnV/+Q5NsduaJBhy47rYVg+3ti1uYdp5VuN/vpZhnAEx1HRuAcCrxXVRvy+Kq5D8jwLMJSW0l5fwEsgWtzcOtFliQP3weaA90L1s9xdNvlW/GT4bPHByqbwj/K3adzh9gIYKi1UD7DCwX5Uq+fU6CKKDYmA3plzfFgLjM7SuZ/D4SzTRDaCtTWqxJNVEAHh8IYWwT3SRkoan1Ar8UIq95oYgQ80CvqXg9bgLX9fI5LCkgC9sQ8rvFDn+MHz64p/FYFoKCxzVPNQz6jgh7CjB0EQ2vd+lCTnieSl40c7Z9P50FOqjhg2dJ5xZB3dFhOH5/RelEhjWHOCGu0ftfm24oRAOBGoYa40tPr5m1immQpsqtE3o74OVbOz96c8Wc+0dEGb6QSmrohnxkLC0pAG9Ck3jObUOs+uvntNrHM7zgOhh89bFb1cHODoSS7TagvSrY2gzB3prMuUJ3wYPol0hNWKqdAv9Qcls1dJ8L4X6jkwwlOhGxtnMkMi0D6Q/1Z388YqIVGE2b7TJUEebdtUr3495zH5f8pyQr5bDUZurW4Gpa7gP+xRNdxcCD5+IMO2Ut/NOV+BcBZxJcFKCcubqcWzVkbzIKT1nOaFnEoNGa3LqG68n9lQ9G5flZ3M20G3zkfaNBDa+JWkLddVpHY7HU7MdLUQjkFbHXp3SPsmv0VlOmjr55B1OHj96kQB2wMzXZ0lTAUSNR810HSHXA8F1CrYAWAK55U5Eg6qnhgqYUmuT0wmLWwYzPZoYnyWA9wBo4VzZ6heKA1yISrVuS4hROUpqWMVNghNz9A/SkNSpJ7IRNQvdDmXfZYr4K3X9SKp/XL+7tee1WTGbygzgXyxBicYeOWCKnz2wzZb8XvyBXl5gHUTxWFpii8BkZ0+t2jYt+yoHXoPLDOKwklRBPT3niHugDtTAuC3N3j7GXLImfoue6d7FpPT3MJOr9d2ZvT687fKzYEZSBUDk9ZwUnoDciMzRUdRYzo0XNTl3jmKwSGqcpBc3KG9ixGgTeBkcU4X43VSlv8ZGLgrcqO9qmmXbKFT6vVDHKnL6m00+auKlfDNPy35gml8TVapCxi509685QTUZD7ruBdVyzQdx9izaR+hKn0p0gRA6yNECdpu5/3b4LH9bdvbahnyQkrBD2bLApKqCJPRH5S6FzjJj265QVyF5F3t8HDdZ/kiRlnW6qaJl4bwm8en3xY22Wxng8b4HSkgIDFn66BkT/Jn/PdJYaTf9uIZ/rpoatCPkP1hh1d3xMvW0imhxl9BNDBYts0VE4hAEG26tiUM4SBPNiBr9+3BeOnQ8JPYV9GooTnONymCLSkM2aH3cqxdd6L5g2UInGrEUYGGJ13hG++9umtrqC5Pu2BKk4ZdJG6AviY2m+nfdMQiQRRtKeiDVfyjAD8Nlft0oX5CNDkcCypt3262OBovF+JIm7ra6FxRYRFv0gG5ApEd2PxZhf/1igF9xcYKgvsfZOju/rKtGXajxKF7X/Az+p/eT0LyP8p3oub7I9VdfuSyIeUs5PwfD2O5fI+jkrNYb75uJJH4MN3TjVkFEMOIr8No+GvTFivDX2ogSTRNdjfaX821nkdtNTBv/Wt8dk/vWT5bO4BVfFHfbSrgh7ku+fd3ruaOSitSNZK/KpaD5ZpuJoiTIiU5dQ1aes+u7NA9b5kIaav5oPkQ3nnC4ZCJDvC6qw/tywRq+Lj8MS5jH6oPcrKNnNswFv05byEx27VAraVzO/4QmmgAvXJLSHlFNqPkPxHknSTh6G4hs2lCQnFesfio4t11dJqfmUy0bbe/qQo9WR4erI7UQhio8SJsZxR3zU2GB8ZyKAO3yc26x9JLK3AhBeOqW/KjnUmao7dPSpF68t93zw/g3hCG+xetoJNJlY5QnGiaTc6DHOLhQRAc91BnEbTCNxs5cB037qgXD9nPPCQj9nGlXWkM+wRbFuc8kWDz9Ggzix3+91AP6behHn7CpYmC+1Eb9Rpqc8QMTAodlfpeFd3aGPzUP3/hMBwuL7AMeMm9Zi7MYriawcpcWjPgnIeylEd587/p6FCJI6Es5p8/PKh7INYZvMW6AexNtpgNvraTPkrroTwYuT2neLW/sokNEqcGCs93LzA1k9LZST8ZHd5RvxWKp52zg8nJvje9H++yYeyhvjqmkz1S23APFjAEt/PPu12Y5qThLmCsDSwIX49lC+lZn/Vq2r3+rYc6a4gHnGpsKvCNJdUFjaHSMPyN8MoxJgqrelq6Quov+mjnIwhrR3U/mOIuigFoA1CfAKqq+Mb50nzrYFlu/9M/IXRksX6BA5yInOO/Oj+b+ODbkQ1MAe1XnapjhpH4wVaiTFtApOC9ciXjU4hoKPkQWiHzZEYvLn6gRo4IcYD8JAVkCR/5D3szx4ojyl6dilnjk4s6jqkyIcg43HQVg4PiZYTxmna/syXHBnVuJS5oE0yP4AXn+1KodXLIiSYAN+ewFrpujeqEy1DAWG1XPtyzQ74wVaccIPX/ZEHeOWSHm/2LdBDrwlufNwFbI7AornxxxZHcNPwI+U+1mMxIToDTiPakZGSlK5nilVIaoINZrGylBEbJul2NerX7VvBpmTTC7Z7aEvWmTwX3WTy018eGhT7p/+QC5yFPsp4ui6H5mSg3M+YcDJncLe3DuZttuhhgeZP+BhB5gLGRT/4qSc6xkw/NkjLehFn5dymA1XxjAvJ9gvTPIhzunkDvAfUeC61H6qifS2Q7P/0qX4I4Y/YFcqumpMeK4r8uVGlo0EnWQ5VODYZpLVOcbxlphdlrk6UM2LoqLCMkaIadqaDDeMhCkg2iPgdRzX2peYGNo/r3cCVvkJYPeRiB/oxHUsaW0owgzlUuiSC3+t9/WQrjoAYs/979WurEnECpUROZgYMrDuNgp1izeARMepg1XaV3nHhF+eC8Z8ItSwZY440CuRyirWFG44LILgZH/8IKdHjT369KaKqQ0msLZcCbRTMWDGo3oQrp3JArPaTL5PPei2quIRGQnEwfC4BMLBqao5+Ha0Sy2t5CwNcP937G5tDdmdp0qOUQu8CBfbG/ety+467b3ZpZ9Z3asrpNnK8A7ODNmOwt+Kr0bNBzV+bSVHc47gqKHBy20I2N/dAjnALJYTviRz/5PfpPtnG+nS0cX2AjMXhvfJ90RC5cxjc3RbuvnPibJMcCUfQO82cxS+eRt96+1hllS1t/Vmr8ORxaJIUOKXCXRon7I3Fw/hG06BBSlfsJBe/K6f4Et+2BfCj2nqj4vuBwlcCuT9R4qRH6A6EMG+LhpDEVxKnH1Th5G6FvByOmRoxBhn9bFjvIRJwdmV03OVbJ76+bVjbdd1+yFZ/LUQIHLh7KA5I5x+IWUCz3tbTJobQf5QMvj+OFae4JDS3f+UOgg/fX79v1TQiradxdJSy8qLeFNo71c+nvo33lPm2Ah05WLnbxzVy8AS2adT6n0pxdCWgyMsBrWsbcT8u8DEx7M4Zws8eJuntImsC8e6dAkj8G1MSEX9EGsl0eMF3jzxLFbMxdGqcJAUznfJDW+56rtJrDMiHqkt/G7kRhrBHCbQKSnVj4FkbSpoXO7trsYDa/oHjWrLcr3rUU0G13lfBeBizVq+84mVqmMvR2hR2+JdsS1LOx7PFBqRwnumE1iDCiLMyCeIixmHoJ3dIqYyXAm/Dlvl4RMCurQzQUk1HFVXGQ8NxhkuJABzmj6ihS3zz5AZhsnhoq04UdFnn2yGwt5KNfbZ0hGJL1XHSLruUFJZ79lseFO8sBtnnNrn+KMA5Wj4xbmvgwTDn+rqvCS+MBSVH0H8aRBPruymNOfEDJdgQC/oyU7MOpDoi4hbe+ADTkuJnQ8K0AhyWtryd4MzqzeYiUw2hBU5tE++vHgj2tK0xaMmsMvC0s5nf0zlUS0W0G6qAj29P6/J7D7IlMLjrjuI839w4C+mdEy+x4XryD0LIr71Tys3FRDJmM0TJhAtXH5CtjvIYHOIM9TFdORyr5pwDY7hKrRFz9YB6OF9pC1G9n5JODf2PVU43zaYL3SAN1oX+nUoGrzoo2zPR/csGq1SaUjmT8KIzACbuKHvoPJfDQ971rrF40ligYWORouLbwrlkN6zUKhhqYn48GjeAAoVg+Foq8inbqfN3FcPFuhjSkyH5voRgkb4Au5c34v59vv8CYxYyAYz9nkO4X/GheuhHK3ACfQWuTuZv3QL0d9QypOPXmofa4Z+vQQjQKvSET9g45CPd5O/iszNQcFx/Qhyg64eZOXAYh2bNzNxCOX0aqhf3+EiAeDkLvXThjgSkN23OGUxexFcG8sXczPg+Q5kexFxnnH8MYEGb19ebZavt+9iMyXpHcvHIPKf9ULLGn0FOxfx1W4l3DJ10ITvgaOLZBOr2VUlrsD64ynSbHOU6T0QF5BUEq7OSjAatbNTlf2e/EVcjmhDWxMz93Sxt6vRlxlloZ8te0kmRsOSAgS6dT6M/Y+jWyhMQQ+JFxMmS8km5NK3hNKEes9xARv+4zjO9BrGygrtBSaVmU1XTJon9cihiGgfZFlVbZUHb+8MmqNueg4xRNIjhWyGZZihHDP7oMnBYP14oX9lgeipfSij5jFkYLbbm5EoFHcooREZZec18PRlOF0xE2mciSM+JcSGhIoGkWSzCRwPbIjnwloB8wO7U0w57ZWBTGKWzYM1rESTsqwG7wGLh1t9s3hpYXW8negbpVRfii7XpTMalh+V4coBwDUHQbqp3eBpxLL8VlWrs/SjnGQu1GHYHhUz6OEGdMUq5HNuB54yWwjsRtF1k3CmdgJZd2hF2nAvHJQ/87gyfDS1IR58P+mi7Yvff6lig9OVdXsCQkkYALESaiJ5OzgLI+IBfyRMUej7138lJ23+RXQip0B6SJWfPI2WjUxq/yyMITAmCJJqqZcEdq3KemqLSbSJu2U3jHUOzooyfH+FXeY8/8lxxbnsb2piw9UxTT4e0AqxpxoQFsAyvT+FVsx3+lIRKjmY/gNZhbu2cr8Ln72D1H5l0c8wWB7Ht4DK0YZDRsu6uXVLbRn/D13T6dAFtFjBiegKyruGofZPTjyZSun+jqjx7wLAnCwxUWVAVmWo7u+2niJ7OhdH4yX5m3Kfns6H0IvigY3QKjZVI8sp8qwBlaTnZ9HRA1XU7/f7Igq6mk54U/6MhF68l5jyuXF7BzKuKuJCPwEypbEtbFNHujtC0S2YwZR7Lx+7tJULr6Dyu7NfiZevWZdgPhzYFel7qU0oGzcu2A95QOkvCErLyycUe9zpJjK3mNxblY9G9LtW1H9WogjldaUKwkwaNpa7K+j8gIpXfkfKLkk7KBqbROSknBmx830eReQ5Zv3JFmpnWR9EgHLc/UZnRIoNGGJLATmJIQRwYOzLBXJ8YsOe9A93YQyJumLgrHnoPMtK9Wh0Qcj/tDpXgjRgRPoeTU6kK5C9Lim/AvrrlQS5oGkZSSEd2oJ+lEdZR74wAjWU8bxkTQ8KEAIQ+cWd2scvFOldHWlJ1VX5uH52r5yxdS64dGDtoUnQ3dEad1+JsrHw8ffjxdO9tsAr8L2vqTRJLuf0wRUygvO8MP7yRfp6eciY4vDnRFl2pVgk4iXT4BAuRW6G7dtdENNRs2dGXXclQIKXFpplBkEIbwBB6noNh+aN1EWDNc0xv4pCeYmfKaFxikdFgEvKB0vWE/qApJ12Kgul3w2W+6Qdp0nDgIwlT9UsuDnG+c2Pcs90way+wnA6tPa27r2/02NC8ieObqcNtInxQizHWb6ZwmhNH5l92UgfFP1r8m+m/WF+7C0ZYC1b3xTNbNDbaUMWfBxbMxlo0IDakKZWmKl/84isrQam5gMtVrAJlZJCqHV3+QGkPRSs/ZPlEleJ4wBpx8dXBtMuAZEPldMS56eP3oQz5KqY0GVbr/puBOhBVs59HMVts6/h/w9WMNPBuw3N9XM6n0UZLqBYUKzQGjDbji3ZNflA6yKhHBr840n/Z/OwVunoZQuu7VSW/U8s8uXFBrzklcQ7k9fDNMsO/UkuGo0VplNo4eH6ClL0TufIHU8qnH67IrNqOmqPQCPjsjZwqydT1Gi8p1xbwod+wyIFmYLki0YkyQrXAb0uOCCe7IzZWRos8mBuxq09VMdqJAPKaNjP8eB6KMAlf/1Uhikc21U0OCeUxSSGyAmWfuVtNCyiYfhaZxdTulGocWy5DTlX2xKz6noovTg5GOj5FhdNhkswZQNdGgLoWc8V1YgGo0bKirE+BZQu83lmxrKcPyPHd5BZjqbtB12j0rq0gPnjyYnQCPbnp6J1poCPoSuNtE0iAgDupIst7byp+esafKHm3obqT73mJwfgPdLxY+tMw5cW2OIi8vkX7KOwXJ7tU5KZuXAjyj8OkEYT2GixaHXnh8GU+nIyv449fCWe0QLBT95lQnpyHjTxj4YhdNHhy2UYirtsnHmS3LcLSqZYp/7Bh5cag7IGd/bsQZGWXByfnFa1VVZsQNgR38Doh/dsuTbI3LNR8aXwUXGLdSCJ1hp+H4fYDBJlSvwGOEUkoAeuPndScdYwnTCvYZEbhG9uCTyUoI7rNZLR6X8T7YML++QLh/Sk4obYGE9okfKvyVvkIvlzeN/wjZzk36NRINgRsL2wrMq82ghBKpM2jlkBL/BHAsZlPqiNzkftDf+QqGTJ/O4TW5Ct+9V9a4MX+NYu8Zw51uuZMz7Bk2qwah4tD204d+k84+xV1BcB+aWvO6vCcYXkv2poXh8bcXR9SaF0HhO+6E5ilyMpmuEQmlBK/V8uHRq9mYEVafJt7UlW083WekpnltiZ+mABus+OuXoMAiREt8zTpTuELyb2p78My+xGbnioLffkZf0tbayq8sN4HP+dyZNMA/CClbGMUlrC2S+rRz81J/l+VIAHT2/uSp1TnnZjdg546bQuk63+IVoRT6mGwhm9N766lCmBXi+hHW9njHUHQm0aOpcZaRMomupn22jIfuBj+0T0Wy2/HV/L/w8ZBWPaRgodVEiVGz7gvhcJmQ+s1Ek8kY4BDFOAukkpl4g99TspvSCrxvt6pfPoOHD1HMKpqFDLGTPnE8wyTcZRDpwCkn++Qvgs420k06rfJ5J0axDvU/I/xhedkB+bVfzGEO6310rIThsbuNPBYlolCyhJTdjWFFbviaoVm3DPAP1UIWjTnHacF9hx4Xoo8wC9cSw1jTth3WnPf6Yua6nlYWvRqmrknnn0ho88+K/3qdKvtW2+UDHo+BrNiPeWfJgEQlTPtC00njGFHP9bLJemG7loN8UbhnpniSUCHvc+OppPw2JGloRyBbyaU31N98ZwkY4Ud13PidhgjIM63+ehLB7rhqCCWk5ck2gYNUMXAfi+U9/51cZep6Po18bmN24rCDs5D2YPeuSX0NnRkd5uau56RyaoKzvXxP8rri+RWmZO4XpuC74VO4QKuxnB6Ieeiza74xKGkEa8ZRH29VAJe5t/aJ//5Z2xDulnBqoMXwVL/fgwhCsfrmpoQfQnAEKCkxiw06R2R65GXT3O/vsG+zP/3zruWAORb5hzw6sqzB/xnfHVdIblKJKetpKbxXTaA5VFVRE/kvpmBtG4+MWKsFxRePN1lOXTgorDhHrN2kszd2goPiI+gxvhCMUhm6zCovtDv87OSbVHsZ54JFmhh4qx6jMK2+TO5QxJasN67Ew3egiZlUrRFT6N1jzthSDVp3Wf/i1IXzmmQjhgYiZCwBWbKrHOHIFHhKdllHHnFjAw944pjn7c0Dcb48N6uH6T7J0YMDjoq2+GCWshUeJldP+leDm6Q2SLM7HVRdzee865np0pitbU75c0lm5CuIPXgc6KLskaghF7h93yta9tMDCqN+jxXc7tb/xt4FW8dUaHsREMoeXBNXMiqlsCjidqwY+/h4Iv3zrPmFrGOjrITszqopvxdr6nNGPHwQjKd1ue6/82Q5aNSHnpPClUv6EQXl7OI/dlHWtnSYxmoGNmaGmN34ysg+V9KywfpNPvMFGiep/TLw/WoOP06QsDQnFsm0HbiyM+CKjqLdmT84KYP7cLOxQZOV6QSs+M6TkSSFuwQQoKtDCPvYo2/xloeCtOop3Vu6Vn9c5d0Eb0ev62+fDrSBqyi2rV+vm8L4T76uH9pZF9W1g4iBDcrmTiPBQ4sjCxZHhRVSPVOfX6rPX1Gt645cGDsQ7dm/a350CEF0Dsa2K8L15hM+Xi3PDnKUrJOPPvagf/DsJ/xuy+B2nOXi4y3y9keoDYwU6gms9Whcm8R1k4lvtQvovtTicRRZcyepM0mv10+vhw8Gaf6TRsjl0ClJu3QSmFStAZc3mViQk2MPEfVOuGPPtSq691k20pQC1SdbBwIgrpQedNxkQBYy02kgiBo7vt+brOUkds8RxgK7gyOCCso6nSAy9EH5oKe/rFwxIkmbHQmnVkOhf0Qk1x89TSjXZdSXleC+xAM0MB1BHw67M9ungWzIXldAKToCUMdKAnnjC7oajneyoI9U3nOiiB7q1Mz9tNstgfHX7o8wbN69kIje25+BMtHsQoqI4twcSykAe6P4pQVIdu9kjFqGo1XTC5EonBQtJuYYnfcnGFwKkarzoLmnexbp0XNA5ZEyxStSNo7IuPhWUQn42IGCjbNWtpQ7LIDpqhatmBMMunKKIX4iPEE1xJv5mbThDLUefIoyVUPFlWGsOsQhCuVcGW8bemJ0CID0jSv4Lnc8yqWbq1pDle24H9ycIGoJnRnfZ6MmJppv5VzU2Pkez+F73viIRsGCcwE37tmdO7N0I7H55GZhtQ2iJUdNiooqvwrVeGt2YI4KtayYXQLifphCktGjQpHngR1/ys9ud9ghTQjVF4XV8tJsd+ej2zg8aQraIx0wMvN3rC3x7rI/NzcuxvhG54kCjI6jCySsIq+bVUYGRJkHxS5eO/1ZEKFAb31fkY318AMN6k80O5Vx3W4JlXCqDl/g19PUNkbehgR0t+OgwT7yFxYGAnTpCc8RZJBMaHp+Y+CxrIGj/Ktp+HZnmwF3Fys4v4o+dFnogdSXKV0ofWDjqT5lNufHlxnUlhg3Ganj1OKl+4FRoEFFZ3/jiYRsEznCfbbqTEjBVCpzczjSt6lDx+PsQHrf4MQMIjvmeCCA7IFbyuYWzBN2jm5GsaakIrxoNkKwJaD72/hviGR73GPr6QtGTvM7z5nbOg2pWbm0mSUV0NecSkjz6QhBSccaeQEXuFaGynaAxcdLbzwV4CrjQCdCvdutWcD1Pu7Ga9grsjqfF9HYQU/VIkCmW/o6xvH1Djgv/3WrI26sb5qfB5EDJJlrhv+2GwH/MsQOkNava+nCJxM9syVkpGuYWE03LLzGbfObNXi4G8q9XMq9nHpCnBwTYFI4b0lfGDobgjOHZJKUf5H4juOIQ6KCjJBwRW2IDyqXELDbFOfWnNqIPzNLnyRKA9H/8tYnhaL6I5gKgI1TuVMnYYI4ltHM4z01s3u6gE9Zcn5Wg9V5piMQXllZ74YP6o18/hnM2bKSAxZ9ZOzGpLFaua5n60FSMyX16gJvgiP8CUJwAkgnbbsKrEUHH90Ptt2RThB9eBf6/j/0jh5qrDoyWap75Qrt1fIBoXNDmxy+kjfENjHKHHKyv7EnibyIbIqFbGJrpqWz/hRkZvCjHHhWQYT83TRCN779ExRn+PWzv7Pwf1q5wxuzJeIoQV5XTdrfcmgLcGh8aXsHXg5MuaBRnqEmC40CQTSX3tOihVWaCjl91BYqPZKUr6OMN1l1iP/yIRRFyetPnb0Z8N9LDh70cqTgc5yA+WunYKAonab8txjieqO/4AAnuQCWsaSx3OB73JnE0tsxAC+sGE1LU+CBcv5uk0lY+pRDzY7hhflbgdOD7YVQLQXmRURIe0JRsSnD92P0445PFjwf8EVN4zGk8hZD2gfGDeKXPGw7IZmYXQuPT0pavFrkyLiM1RFuCByGE6oAWEqM1A0pYgiKadPk3H3GAWbpYRzLAIyG65VErJBNs67ibh1XWlyKFuhwkCurmSAERoJ6vdrj5M2IbXbkd3REjQObl++SFbQhilqYc7Zo2/UOCzHOpHkjicMUKBH0Saa/wyFzsWa2P6gtnxCoC5UuBCi6sBqlLDduMFGD39xRZgyNCaK/rUwhNg4GaacoZvXhHg4Us2gyBGF1DDvcI/SfNXR9mV6D7sOSFdCZ/xocT+StE8YwPhClIm0MI/1rOuVaPMtEHvmadk5dKZp4wvYm/UgUnZaZHRo+IcoeR0m10kY37TZ/CjjN3buHydE+UuESAKJONra7P+VXmDpM4VUbbHw6n6grJFcLPQw8b/v+hEdfcjPVX4Ic0MH8JBcd+h05qwAoc/6iRVHUwr8b5oK+xdaVi9kBrkNwSl2y7iENdCrkDNNaPKAZcD2vGFW5pgnJIz4QaCf4eOpr04o4c/ZQISNzvvYBod8hCp4yPJ0MDUu4Uy2RXpYjCvuNR/pKGejMdPf8lnPjqwch7KmrwOT3YCcI/Me+O0WiVmh69vwsl+rT04P1QFleA/RxCQfPQrQxgRo2DMlcnDYisiQFe5G8/CE3Gnvmpalo2qmd6YMO7+OJf9cxtjChumjOMS/dZUSi2Z5CxWNx0ToseL5916g5TDLuXRtArNMECjzKHWLQctKjUujZDMeTcpRPSuhXAkpapf+xUkTLMKCX7FRytFUBMLmz72ybVv9l+90f+EW8nZWYhWBUA453XxI6JB7ifrhlM/YQ37hu7vEUfm80SL4r3IHYJo4HKXqNLpK8inK9d4zD2cYAGWeIfed84CgQShHZGaldF3Fem/DSa3Tny3NtbM70xtPijwv2x98/HCxI7SYlGKlWJCNc8vvwOTm9hJfT+rcF1pV6l+xr2h7H2mfmP9RVF4JG1M/9lK/xhRhL9FTl/obIBq4wiuuvHx9qfRL9runBZ8gU6ig+Cv1dt4AOEv1bbROkRQrsXGPDUHsgFMff+Xt+bGAyRe+rglBqXQAK5zSe7MiJ/pXwC1mNzdigMi03Q3qgLVtqU5peonDIfsnYiTpRiodEqdqOsN7CauJ4vT0kQ/ZEWlYLKG0T8gZH77G4omCUK1QcOvIK7s4SuTJQN89321GlTHeTEMpYx+QZ2EaKn/fQb5x7teRkTgdI9pFMa6qsywcfBdmNg+joepL/fi9++IaWOFlpUmcts88QzPkQEJwtsaGN5bcibzTxToYgLp7qneRz2i/YRMFN05Vetkl3skmjiT6Sa6rTo7CIm9xQoNibXa5pNb/UKUhVMfcxjQtpk515Imkl+c3ziXi1nvd/p4+Tnm8HJ4fGZhG3i+jmF4EHmobUwswvrXlQyhwj/VEkj1c2huse+JE3+jgfvWNpuu0dBjvIPmO0cwNbl9SFTVyKLN/orBT3MI8W2VZo3gIocKdL+P8zwhH17q2vAsflGUquG1IOuXwC1OYsFZON7MdjSB0E9i1UotlV12dBOBIdLMFU24OxfS1Gz1KYZDoNOV878tSJGjgNsCbh5fuDG+VNLGhONNkmt2rgFifAgKogzh6K/T/NrDW+0rgjVaqYa6oVD2qbipNE4vpYUcEMA7JkyjCAhL9TCKXlm1w4oUs02ZUQUDNuVv1MWIjYRhMZok2zLBa0d6YTrdyJFSVsHfBKdEGgkj/O5aZ6u7LipSfPJqZOfAipmdNXsBXsf7FOQfv6zbNQRNRHCrfyA/nXh7W9xdrM6yUmhwT6iTQkhANmNhZavPAv6RRdwleMoOua2BMCAE6bWUOQWLqqwA3YbZPB2IbUPXxVhKnucBToH/qq7N14cf9Esz0bu1auCsT/sDP0zG3ucRPcd5htUeKLjIeZKhzjJUZ/ZJdGX+0wGdCiVKgg908rnHCo67fAH4uuHjzDJxoo4j4fB9cHs+7sV+322evtsFMmaaEOpjIyqSVUB+vluXCPZomH7AtqU2FNjqdpeh75MuTwBUGmSxuEr1+iS32ZRETqAELoald5dTzpYDrRnMyYzfp+GrX+1jeji03i4FdWZCVJ1SATTTpsSzPgadxV5ekZoitckaYpGFFD5HN4PyfyZtvwMlPgbyphx8Jc2MYKhIbL8n52xvmCE3JXNZ8iM4XegpsXEuFbWqmO1ECg8AGEkBLHGsPQnicu2szus1KDaArivyyyI/bB1ugISqjC/ON+owokHeirIwIkJvlL8qA9euDqVZParEEitcOCBRJttvJQXHrW3Lha91HLusTauSBMTTYjpS6dW2XsB+kW9cmc1gEKFfRmLif/AeUsGCbes+qfBJ6/oZUhg+w2SPsUonpMppItC9ICNZnrtmkToRdv8EM46IPQu7C5K0fFlLDG731QwXkXp/+IAENzF4qLzlKrX6I/QQvCT7vuxE+ivh5CCSgdFP8LwyzRYbxyF2Yr+4ybuVvgOc+CFL7Qe2FtCLz1BUkNGeWauEpZlignKJ9vEhn4bBsgi7HD8kdl3i45HzLDlvC+nrnHOqkGSmdFHlSYq8YzFaA7C10CmQ24Eh/YfIS/1sRILmnwls83OHD/9R1uI2UvhqO5BCEUJS0dAuhDqvuvKc0uOQcZ89aiiTbWSHaGOH2QnVYAJMJYKB8eBCqeXEmrPztjY8T6f+YFccm2dlYsGhxl7Z+cJHofivtyMObiFWD+NW116ECE/wKGiqX+6NPfx3NTqQxMSbpHgw+B3YAZORj9EWf7PnPBUBlYYFGy6QwDwvQX9GaVE0iJNE1xJJBJtXmRDXgjI6wJlruk0k77MEKLF9Svucvo4HUmaaHN5NWGIfOndioHifp13KrRSP3PgMVVSpyYh2/eqDz6Izv1mBDoTjLCVp4806AJDJMQQdzelFVjHKSblWSf7bl5NB4qlf7a2EPhZViYyQidbvAM4HfArFIxkvko5KWYLxouQtTb3RNcWVp4yqItHATEkok6GuNpNL5VtcNBfIUetf/EMFkYagbZ6FoXLzDn7tW1PpsoZla477uiWCQRcodM3VYTlbSwzfbhv92bs3aM/XvH8P/N4nWoGKYFBUndqh7tEvciptlWtRbch/in6RC2Mqg1hH4cRJfEajVAVpPSPmeezKbA00PUVYgNkUyhG5PbHsVEp4XQpJvg+8y04qR2fKEYey+NMHlnVzt8RM7DGPnJcAZ1n2UKmGYbOSHRjw4gPthPPLZNtxcgcvJ2EvHj8PHue33Ii9A8DK8149EZbVgB4kG81ha+IdjJRkCCS0krT+t4SDSamT6i2DExrWNlvaAT/PkZSa7UYjXeoqmI3ftaos3T5E6ieEI/RUpYXR87fnYvOehUubFtNkz9AI/pKUZo8iV6s5/4L1lbCgJ0uUXY5JyQ8APQ+OPIBvm8fSPwdlcRjo9oUeyRO9lKcccvcibQQtuG96kGD6Dk0PN7hayqtGyWvH0sHJiMcC37cCnD9WQ0bGDW43QfcL9YLUUfGJsBNVa+BxLz9vZfV3+zsi5ZKTm+jDVSr/FxGBsX+bXptIXIVHwy/GMLpLL16DCqy7ARZNeP1ysCWEcENQ9XyORDDCbdUBqlF529HLq44trCqpQpdrxVJaRTXnLzHJodtIaHSFQCiDPiRgOj0y1NhcUFpo2Fj8VMQranSZwdnoRbjfJ1We/OG7Ilzr7K5xcHJBS/yAjA9aZm/TDTsTIp106F3Z7CDCpXk8p3kYoctmXwIswMtrOGatIWAw9Tgj06xl3MybydjcCi9O/JDwVPQCf95Q+09dU0rDDepijWXJcnh/1zcuFHAZUMY+RNFdSIM0uS/kFpERQXpUWyLwmEDzPnqsmrgny4lalSWbGWL/T+D1bYQkJHthIAUyLSf0loj8K9s6G4KojBRbKw9ICwq983S77pAjEubFmpx5rFJdFYrA4z/CjcJnfeb14eAoxqpGWPBczuIVU9mA1/rvgHJX+wEjWxCZabUwK3TCbRhJK3KhSj2nvrQkNDUw3/AelCEEYSetJTlRx9iOCsSF3EjruHt+1okovyiKQjdSvexB0pWZlOxHCrQYLAM4BgPLf3UTfbavJxLE19wAwCef14VCz5tKU4D5yG2vIc7fmD9445N+99t4CRshLSjzjbafRKjJXNcyInnBjVnswUIkZ4EFZ9jguPNeJ9ezmisCSa8CI4VNd7lzYBNS1jzmoyIYQ2bwamiSsEjMC/ZnWihZuwHLLBD1/zhEjE1uqs/c/b9FauTTxjGa8zyxjF+C5rTeC5oTKKk35+MTYuQFZ/BsUFUIx4meZrSmoIxr+HOrJ5j0oD2in9o7LePBQhipkRqZUa2lpIDdONbHeV6Ngn0uzVXrzS0hzrTR/RtpuwS2FpzErXa1wlx3OQ7chbBtKkkWidXhS/t8ZQNlz83A937VjO1x1Kja62Lo+uPUWwllbSOLFr/dG/A9cbhI5nG6FXcgYE+CmdZluwGJ1EWumAt1UP9zZXWso6jUMxnlDCyBoDAf8FShK3Kyg8A7tqEyAcBJOApshlRn1fmxllA/NKYl9AAmBMSq5CE2kHL5pgyRzVEyBwGFf6KEakOEVWiF6gbiOhCjhj+KtS21kbGe7lMRE+l+q3OoZYwl4DiQtf6XvCA+gCxyq4lGbE0TDNWD6BuvKYz2ZlndfaphmMaE77msHt7cLeWI64/7RIFy3Ngzzj2bn/yOlz+J/H/G2lHJar7p6m1dcEg718JIJlL1CgbisVgmBJLCGTCwVYF+HVZwna3ZM5XdctWmycHyR7HPcyhdkXr1HRsPW3/Q4RU1bbuFnXvD+p67XaUMvX5NnD4tBJMhAjMMG4cUXroxNh+rjwniCq+1lMDauBLvLm/IcpGntlbSVSIp0lieucgEd3XeMiqr12dfe4RcbWox/N5ydlq19tgYnFKtqCMAGXEDQdJPCxW9UMxn/j/GBiP5IJ0+NlValkX5cV5MFvd676EPRrfcfpYKPXp3FCfuIazXk4usymLmDASUifMn+qbK5KxXgK0/eRK8evGTNhDg/ITf5261r9T0U8+B4wKyV4y2YTb8XeT9K9p7IYVmb5VrcEE0tWudXb2cnZ+zplJ93xP0MPws73Fw4wtWAf4mxTaDC83dqy/1pguZY8b0snrSfSEV2ywtbcUV+tfNDz6Ra6Lz14gE/2FdbiBqQEls0sCFCFO3VaOY3t1hR1S8aOpy5eBK//Pb33RnzTRnRQvHFIGAAMwFZe3kXAhbnUmCbRzs332Omn/d9EWpKI6xwK6fbsr8JH628if9IuycSw+vzmHbCo7RuLNRW/viWwJ+3JeZOwj+enEXc9h3+K6opECWMAFqwSEMzasemXt6qLa4iEOCQuPSfd9lQAXHT9nqNZC5hat+TUiYxnEN1axlmMQ0M8I2qocWAHlcI8GNUIwLoSP9gAFieFVOSeflif2gEezsAi6RTXl1mJfYmXBYRfHfadEjJO+qV5W2pg0j2qoFXRnQIkkmXl8ibpfr8mp+Lwdx2UDVAiU2j6qfqqpU/BJ6z6Jcsqfgj3piCuQcfieq81WqYejzXrma3LbdRq+uIEutFEgbUzKr2EUV4D4/YDm9a2CFgFpklOJD7y1JJvkP8AwhXSc6N3D2QOSvVB8OsNp7N2RwhIfAwf4YojbOxmJ5TOCCJJWT/aZaO24ExizQ+4ooSFzQLEqj0U/NmNn56S0Z3/Pgq32nEv5EQ7z17iPRWtZEsTNTW3R+hSx5+rNhStTJriD18rBGEsdaA6m6j07GhWXLDpVBwtzalTxQWfB56WbPQ27rG/HewG2/XNFBGAVihhykZlRV3UCcA3oE99fmKdaXTvMZCTIH7NH6N1/jM6UgoQiAmaFQ4J2cxmf3noGRHhOjMCVZ5t72szrwUrnQUMUqfAY22EyUyENBDUMBcfC5Bx86gmuLM6wcHXNkJ364YHePt4UckzSL2UDMZmx9ig2p3uiCchiTVgoeYoR3nKmYRNIumrGtyDsY+nPpDtWojtNe4SPdUBO6uIvS7usP70/1hS11tOhdJ2Z/DDXslUBg1hPPmbs3bfxCwwJKornF+gvuQJ8q1QH1B2MB5gH+d4XPYGSk9iBDMZjI1osWzbGPQKLEwol66Opx/JBuly3FUi6JrXvqsJaToTnVlMDRgZrIOKvaWAGw2uZoOwqZ8cAPt8blhgKkWt+AGJ0E9KkRqXdOHoVoP0qgZzV23/F21wt3+pv5R9EQCfcALrsyp4U+Yl1EbRDP6Q0NneSfdyiB7wetf5+xdz9EMLYAIs9p5Qj1haLslpRcpuPbktZ95wYJvKbj91pNI4CMIHb5F+GVbm14jRv6lLe99wT05I7RBJg3w7U0pjikuCZKrSedHT8s2MT2erTIp0/vY8wkA+inITe2TP4WpB8UdrYLnpYy65GOIyuEFJW9YW+amo5jcO1TuJqC44QNmFaFOZ5Ci6FUUlTQbq5c8TlYSwG0VNJiJCHdXMq6TG1BDiuK2xhq1vevP5k4iXd5stN/qTcsmdtPKgi6U3Xx6pSrfa/L+HkO6dFyhH1G5O40Wi2u8nTnTpkdw4UwaQDTWEC4nuyAGwpTcGLo+M15YBibUKTXNndrzpzOwc8/0uN7aqptXO0OstW5NP36+EMt+WAkTuLkVzRhSRuwGh5cSq+A91w0Z6t1ZOrrVgdR+K9u0rEDug/E7mIHY2wYc78piUa5VSQsl0LUc12NdalImyEYHcrSAMcyTFXpJ5LFNviE1RmDoajYnFrVThOhlflWPSAVz6gPVUl+tYDwmX7CX3etLyW8BarL3BVMzrzk05teomq1O1GlxsSrB9aokUdjFK9JKRVO3XoJoRKA7Jrky5LTvUn1fHZNDTzjJX5AozqbxNb93kE+IvyDGPD0EIOcv5/u0NfWb6b/Nf6DKfUBxlS0OAvo4aiaXbxIfbixj3ndUKdwInYBmZJCgDHSmO1l+GCkx6hxdEcZRA13+S+bke4IbczC2uEP48OQVFtmTJFHLXnvs2IV/C8lDV5zhftYJczwDE/rjhxUrqf3IToSj9/dE7Y+3dDxahTJj3AvV232fS3rzacwXHU17LG/oQt5bDQQz+przNV0zV0Uxwh6YUccl7aaRX8vgtYCq8mvv4yrnNkB3crCypqbUWPpe3ouoj9LcQMFSROu4lxpMmKWy8W8WPKpiaggabKhoy6d+Lj9RawTS8n0FAPwCIfQEwheTo6ao2wzQsbe+LKWNNYhcpTllI+vsmQyYdVoXFYZBZ8s36qbBwz3+FkzJYZtFt83/fgLKlPylaSFyPbKsjVyhHeVju876SMlytbgGXvxdF6CnTVp8c9l7fN4i9jM+b2SZ2cw2B0JGQgT46GyThW3Oej4QsNlqP4CbDjLSPeddLky8XBXUOyg8/9N+DVfp3CemnW1E52ZVvpYvnVs/LyDlRdJ/c87vbgoPm7Sl4k5uFg1FOJ/WD4HQVe+Wf7iXHbg9g+InIPs3iuJu9X7ZPmTZ0uPJ3MG6bLj9NiQfXJaH6DKkFKGtNSS6P7A3OjUsoy2ds7lv25rc8CPXq4jsNiNjkghO2/sUofIhK5muDX9USxgMi4D/yZ5BxU8ffg7VS4eTJR/Ble50Af31l9A8HytPjf4KFhqrZj+NqgD7nCz4JZaKEUxZcFAyMlBslKxg+TBgK7xMA70f18tMC5HVouBDVQrdVUAfmz2La9G2g7elfI8W/+lvy6cgNajxuvmV49FLeel9gb1ovqkKamGBV0ku3gcthWQjqef4M+8si7hizSLIO09VGO1HxtnGFPM4rQRCcdtZESfGvHKufcboa4Ae7PZk6cIyxSvXKs/MFAToa7uStU8wQpyj89GBgORy7xBlzoca6GdzK4062ehRGwBYg0u7PNt/tpQ2WH4tj2B6ekiWpnLr9d4da9Z1kEpPpLOZ0foA/DxHIQIz5RyLFqmeCdDS8ThdwDbzBRKYCyLPKR7QzxK8sp+79kxzD1EN/W/gNPPqV7P9mL/NxA7p99mfiJnZ5TslEsdUTUJBzcaog2x7GuMuxjZrZY7tFdS34YArErq1jTzPfF509DGn/OsdujZJbjZEIFkZPw+9opBw5XJuq+JOE9sSoHm6A52Lg5rikV7rVLdS7Cv76328/zk8lRdJBnXKsutufoyZHBenAhQpbv0Mv/lYGd+yFsUPlSiN7TK9FYxnaShFEOYiwDSaRj33CjVZqBVlJvep9oBlSciqXgz1jSDZ2Ze2zO7HwUlf3lrRYzaXrogTtZrnBs7eL3VlVDOIZ0P7KIe4IXx4cgHs0uQz8aQOkdvoLdwDQVpVYubQM5DLzjujTWWQNEvemE4oRGyNKjsebA7qTMzOUPfjmTe8IfS5pui7U0aHOuiHH+bIgim9oXFa8OJio3wXPI5mmMGZ/X/5+pcES0vMyCGHiIRFHtbzhZJOknVBudQx02/zMNKs1xlMduNWhg1WIGeDMIng7IK6f5KLnAHaNhvea9o8KUIdYqbbibv/ifKz0fOWWqrzmyysd7fQ6tPrx8ZBIu7uWdSzi0z7k9ZCUswGy3j90+Lt6Sk/Yrz+J4pT2JMngb4pm5CnbZMjnJkRou2n6I9btJmniUwj/yuXYSunfVHVi/VNF78MFd0GoBvrzYnNZ5/XUWCJjE1haGVQEeoLug6FnaHbvLGeWlC6M2j3bUn6m0SYVOsBYCvg5KxD3MLAMBi765InM1HZ5Xkm6vXFs8DXSNuqIW+1Qqufuy+R/HubHIHsqCQEU3YtGSR/d3KcIJR2+6N7ynEjzz5i/CL2j11hamrCg1V41CZbbVN+o/hAW1tlgMdPBo1hNaiq/WHZj9Xi5N57K5xXIw2NfessrupzfxdO2aqLW32TtN5lRGGoana5jIvweemv+txzsr/N7hdxAt1AFEHLXtYGgBja/7nEXL06LTfMtGLiG/uWhpw4BSNaMhnPvzlzlW0Y6QWBKS/+hp6uuh6K68nWYJHCT3zHlDZtwWuNnGgSAWiSj85oA/n+YOhKIg4fs2v9vbYIFCUNIT3oQ8oDnVGwZwiIMQ8Xxay5jHyfXd2HzMA3lMOKVobdtF871gnGKxYJOou2Z6AcBLla+ILhdwwWvSuZcoGiFmyHFO69jsQELJ7Bc4NWmiT16vudSqKI6CUzxaFbllb18C/AsSuVs++3US6jwqOkoJBMByuzteBE3EMy0vH6Ptx854D/7WrVoY0ga9JZ5lTfa9X6nP3Y1+3TyPJDGoyU2jTRPH3BK3tiUgms37Z6uuT0qdcnchRzDVDvX6z0raQil1UyR2obCcyt7jaeBCl+vpd8R4flwZWcGNwqFB/EtNUQ/ssbgHZxtRJv8VX+PRVEKL7ThhTKHrltHNNM4TtyvmkZBrDzJlze7h8Z8ecXu455cifygr9t1EBmAEMDmKFFIylVlnKnEQO+uxkqGuW1hhNGv0Rc1b8wpyesYeSIAP2YHuZS5+2YqRnHZ5FX8ENUYin9DYj+P9nK9+sbs7fN2xF8u9m8O7Z5OjldVMNhcLUpsoh7XgB+9jGM9i2fARa3IHgXVq3k3UWD89GdG5l9wY1Q2AWnHBRyvWV8bptFYQn8j3n+bXMCnn3JjhmyZv1GLBBT37G92uN49gMTOBto6LYLg1IR+N3H0Ux6L/w1Pf270MWa3MLjJtX4K46mPUGOm7nvhUb1zQZu0L4pq/Jap7z18XuR0isMstEbslVnL3diuhqbDmuzxORk8mPT70GVREFWXJi0coSTY+ezrkGiS960CLLyV2rzIia3jg7o7PzQJ265R2WdYVE2idh9+63feuvycWsP2neqUIQD33m3U5Db1nMRO9OxhYPLDUA1F0yslXEjP5EY60BhPiV2xloz1dM6EF7cCPJPqTut6C1TTNmRumDySmX7hBxXwvjF+GpP/eY/oAK+rF2xTd0xH9D7yVL8ZAFd06q4M/1py71KRAWzVN0mWSFZnktf1OBmSg3Jgx2GCSQzRz59RuMlSrnLi/VnUXdgA2Zmlbms2/niHRp+rCU1n7WU5mDtqtnTuOcUFHI67F5e6MKoh0DRF9PEeskvpCiuJUH42p2ThW13NOUp7GEkC/j50VOt8/HMhLAE6g/qH61/NLhnD2OkRVrMMwz5cWxCZxkKGGy1ISeRM74Qedt2z/ausMKPvv5G8/5cIbdWIXbr/udv/ofoBW3BQs//fNKJivvtqyvqO4tV9G4qRbdc1TZCFFACgp6CiqVAjwuKR4tgDjFpUenI+VXiJxYA4kLfOdgFguUJ3aBgEjEL8ltMtep5SXahHcufMhttyyho4P6Jg7XZh0Tg4ds+Ch8wZZy/kRkTGx1/ZsOZlGTMnb8YP5DMAjJaLKxkfLFtVq5f/B3nhMI0YnU12mNuvToTECQQWw1l9tNLTtH+GeSqUQchD/x2mXvD2VmjJgzK/aEHdc9d+/QuQRV2N4srTsAI4DNuHm7FHUn5kL8g8JBPTbQoRU3o3lfAmHEw/d8xRbsBOdHIhGxyM1TwJzw4a866YcxUbzCrEWWjOXFNkdt9lHzPMPlC2szcgQVvK6ktlyCnSUGqPJKHgWfVzlZjR/vnW3QdAM89gb6Lcxy+tUR5wqBAPmsT4ixifYvavgVJIX4H4+/2vGYElpQxv5IqtmhihUIXg8Wvh/NAXUysv0mpqp1r48Nun8prhiRdijlQYPDmho+2egwypPxEAKQA/B/KxL5n4hpUBbmJ0b4TzStFONxbdYPYPVfWUILUW84DWxRZKfLGfCmIdSsWcW1ZzfribLR+8aJUnjjzyrFLOkJW/bdib0P06EtmeKPSw1yA7L6uNSLWEBKoOtSTllFwZ94/XQl/ArCTSEX9Hday5w2ZEDlNbmClBNsknHLXh7f6mvfRwxdAR6uhRuMWTZKztNR0YGJGuFc7DMuLB9cEW5FjEfB6Lmt4UA7/Rsw4RQuZQzosBBqWZUsvuSdbEBPjxPkmdQTFEYrisSqE4cdRyHSHSUeRGYpgU7I+Z2jFvR/lg6Xb+uYUDhHKsHBg9DepqpqNVZxFVmIQ6yc77Amxfq3dMbYVslwx/krFRC88duY97zktB5eYbP54l/rGoI+CWZ1zNavm/5dZrLC0GeH2roF7xIxv7TbytnRGKeuSP4V1VLCoVbHoX4kVmv30gAPBqpLriJ2gu0A+O1lXHDRRC0Q6gAMlV6DyWreV0A0jws9vCbKEPKyQE9MgXcWUG/q+8FltJsky486CxdiOp9LYnR877CMtms2utCLmEmCcOC2IsOXFN5032U0mbXOA9qtOJrVAe0f5vsGCNB+ooqU4k7iONXv/Uu3nocv69ApsbZxEqYuHVjwmXYBgNkGgwgJlZul1xQdvSHLAfZoEDU7UkFiMgZR1z7rJD9sem8d/RuHW01KkxQFoRYQE6JBuopjcjTFwdiTV0nfE0KyKA1zMXEvmb0y6LlkMdfXLlDauV/JuPT6mxFQgy5SIg5RsqUHvfHxCunzg4/Q6Pn+CiB3yGz9m/qOqY0jxQtECbR9eWKgXSyvGBmXTrAHEReIEmoTa6TN0YzdIaf+FmbUSYcZHU0IEW6wWAUbttT+e3cdRWfNi7YSDhD8PIWMqPcx9R0Owb3bLaZ0/iZufYTZ2xud6dV0K5jZ/GsH7kMqqLrUK2NkhSDuJxsHXCUvIx9IhS9QKypKezFV9QDyJPxhESHD7ipCPqU1VruusrLnnOi805JE79PU4ufX1ncleH193PdlqY+180l3HbkxCgOMcJCJRtV2Su4JIf4Bo0KYEfRgNGJyqN3zqMClmoFreG0hl4ouFhOkKPtmqRJ0W13tMSqNiyZfNdiO2vgEFGkzoizVVqAFaGT0UwwzrHMpxPMhGW5bpeaGzwa2KHItARZ5kJMQjZE8mgo6taUaabrTvFNJFUjk6Zp2jCvDXL+Hp5vz3eS9eUJuTonCD0uDyUzM2l9ZYwy3tSs3VJ+gtus7gmBaUv4rN9tf1v1IdWUsV/NGHaq+vW0GxkAFpLmf/fuEMc8dtjjLKak2Fq7MvlkDsl/w8ABpfN7PgmpI+ZSVX68d2kk5n8lFrjl/ahe+r4WXQYylGzn5uKhldTIWNwf43A/m2Sj9vQlclR9wKPdB6tE0nvmztAkFoTnd/yQv0hQPNyGtcK1RhmNn/0MMj+jFIN81urSZEQkdSRG1IS0vr4RmOnheGbkr/uWuhZFAZXOEP5pboeewtMFQa+DHCyxkfAYyYmPNykv9mqLvQ9UzPDEAnrR5fUFUt7JSImRX/OpN/vyLo0yygjIRndd0ugySOEGu1Qsd6hrx0Hkfwvf5mR5ouxl8tEzBKNNLL0b877cS3byeIHQWf9FaJvzZL/W1IVlAG93pBF1x8cLuVh/tNRLQTnqAbPolJuhznRSlfPwVEI6QnGLxjRPUn31rI5dtvv0kZbltXIYST/k2mH/jnkLG5/M6aCEQnZccHVIZ/fTk2b6mHfR+6ux8WQGsH91qp6nL6ozuuKeBg3EgXPA9qutHrGiKOvdysFo1c3b1866JZiE3zvedSjnK7rIHHK5Hvd3JNFJ1Nup8Ju3C/bKz6hMz/Atp/93LhHiu31HFMZxGzEE4dYXeJHpD6O8Pq47TMNVJB4TvNx5Y490dKDKMpgP3vT8tPIb3pVjTuCNM5GXFUeKc9ThGJStLx9Mm+CsYn/cDpazo18E9MrXg0x56JYBr1YBS3AgIGnE8GjKPPLtV6d+7fG/8RGcKCi90KRMOM5nEv8/O/L8RVRBvbEVsuxO3L0Maa8uc6I0kmbcGWtkBgatNhR0RxXlFWe/ML/jvBXqFj8BCnXD/avyRvIMsTMVhJ9pTRzEy3eo6gn8cNkr/iL64IIFWh1rfbefuZ0O1Q6C+TpV31sZNYnztMyLr4odl4J2UP8svsCGjfXP/p51+tQsoD/Je1iwhdC3FT+u0DGBoYcVAmMX29IzYSS476DENjbpm6fYcCk3rVw7JiaVt+T1aiNfZNVrN+P1WBV6NWgEi3kMz+HN7Z1HIBgOmAZN2UHbYjucOBLlFJqnyPhXxfsJ2ieeioyKmqt04BwlAighhYUboGArjw6TWxySOli+CiNkPIT1u1GWhOrtyiTLsP/4qbmbmFFKzW9B35VGZ58zXMuwn3gnE6DULiW10HAqZqP41NKcd7gffu6o/xYIWdG4FTH113c9Tk1MZ3WfR1Cga8T0Nynj2kQJwpczabpHM7lLn/z4o+nGnLtaTna128gGFpv5wArKSQwjKyI0QxnFL84AN0jWfMrAuOwPRRsDU8ZXVwHQx3SFEwk3a4SFhcIi485XItY1TS92L7gcpkvJRz3DM4Zi4hUGpZrPzxBZ7a3umVw4txC1wSHjkRTvp4a6ZtYnN4wTb1gRclmN92uoHnHRNjNA0++QAw+C8v7avVsBLnCWOmXGTqMz6kgILyDXK464tn0zj2C1vG+hRATXQEeUSC3p68zK/6MK4oOL9q/kaWfgZnLFv+PFFU2arzzS1Nq8Rs3z5lXVKuErTADXdWmdgiAzcYvw70fncBWHNDXP1ExI+IJh3igSGPAFFcuQwarERMIzDaaE5DOw4S+Ymn997S9dLFK5J+oV4vDaHf/mAK7IYE9XkIp2sFuLwVjtO4A5B7QxL61b4u5BI4j0kigwcNaRtp8i2hFJ5uH+jTQbG3Jn0W0ANzOeATzs5l89NTLKd9qQ/VvvJevFQW2XCZhpiYBtISpBtsATL5MIVpwDaSyfrIm2/E86lEr2ObR7OGGwHL1d618EJr/lQphnLrCaxpAgshyQL2G6dSSj5WE7Wk/a+Nr9K46sAtja2urVqiS0tEIULerKuuJeT7o7EzAnbQPkzBjjKPa7TymKLmTzAiyZiPvN0jI+RvJdoPJ2U9vwHYhtjKXo0at9PzGLhpJrDRXD6tyvz+DeWy+yQchc09jpl2+1fJaeVSTF112f+R9jE08WK/w0qbQ90t1IPGmQgtGzZ6zufjopHbjOybP8Vw625fZvCovNTAf0S//JuWZvfHfyeKGIoJk0Ch7+AzfP1WVRcOSwjE4YNQDAhg==","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"calico bug","slug":"kubernetes-calico-bug","date":"2021-02-13T07:51:41.000Z","updated":"2021-03-02T08:15:51.878Z","comments":true,"path":"2021/02/13/kubernetes-calico-bug/","link":"","permalink":"http://www.digmyth.com/2021/02/13/kubernetes-calico-bug/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"prometheus","slug":"prometheus-01","date":"2021-01-25T00:48:08.000Z","updated":"2021-01-27T03:00:54.371Z","comments":true,"path":"2021/01/25/prometheus-01/","link":"","permalink":"http://www.digmyth.com/2021/01/25/prometheus-01/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://www.digmyth.com/categories/Prometheus/"}],"tags":[]},{"title":"kubernetes dashboard","slug":"kubernetes-dashboard","date":"2021-01-15T12:51:41.000Z","updated":"2021-01-22T03:48:33.336Z","comments":true,"path":"2021/01/15/kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2021/01/15/kubernetes-dashboard/","excerpt":"","text":"重新疏理k8s dashboard安装github地址：https://github.com/kubernetes/dashboard 在线dashboard2.1 deployment清单文件1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml 默认type为ClusterIp即只能看到Service地址，需要穿透集群边界让外部进行访问方式有ingress、NodePort、外部LoadBalance、pod HostPort端口转发、pod HostNetwork 等方式，这里采用最简单的NodePort 修改recommended.yaml清单文件123456789101112131415kind: ServiceapiVersion: v1metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboardspec: ports: - nodePort: 30443 port: 443 targetPort: 8443 selector: k8s-app: kubernetes-dashboard type: NodePort 或者跑起来后再直接修改svc/kubernetes-dashboard1kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard # type: NodePort 按你的需要添加单独的NameSpace12345678root@k8s-m:/data/dashboard# kubectl create namespace admin-ns --dry-run=client -o yamlapiVersion: v1kind: Namespacemetadata: creationTimestamp: null name: admin-nsspec: &#123;&#125;status: &#123;&#125; 按你的需要添加kubernetes-dashboard123456789root@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-nsserviceaccount/superadmin createdroot@k8s-m:/data/dashboard# kubectl create sa superadmin -n admin-ns --dry-run=client -o yamlapiVersion: v1kind: ServiceAccountmetadata: creationTimestamp: null name: superadmin namespace: admin-ns 创建一个clusterrolebinding,让内置的集群管理员角色--clusterrole=cluster-admin与刚创建的serviceaccount绑定1234567891011121314root@k8s-m:/data/dashboard# kubectl create clusterrolebinding superadmin --clusterrole=cluster-admin --serviceaccount=admin-ns:superadmin --dry-run=client -o yamlapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: creationTimestamp: null name: superadminroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: superadmin namespace: admin-ns 获取Token登录1234567891011121314151617181920212223root@k8s-m:/data/dashboard# kubectl describe sa/superadmin -n admin-nsName: superadminNamespace: admin-nsLabels: &lt;none&gt;Annotations: &lt;none&gt;Image pull secrets: &lt;none&gt;Mountable secrets: superadmin-token-gtrj5Tokens: superadmin-token-gtrj5Events: &lt;none&gt;root@k8s-m:/data/dashboard# kubectl describe secret/superadmin-token-gtrj5 -n admin-nsName: superadmin-token-gtrj5Namespace: admin-nsLabels: &lt;none&gt;Annotations: kubernetes.io/service-account.name: superadmin kubernetes.io/service-account.uid: 339d914d-3ae8-440a-a590-4a304400ef17Type: kubernetes.io/service-account-tokenData====token: eyJhbGciOiJSUzI1NiIsImtpZCI6InZk--xxx # Token字段ca.crt: 1066 bytesnamespace: 8 bytes 界面自带CPU、内存监控图，只是数据是来源于Metrics Server, 需要部署MetricsServer才能展示，如果后期要部署kube-prometheus 就不需要单独部署Metrics Server，因为它己经集成了 metrics-server github 地址： https://github.com/kubernetes-sigs/metrics-server 在线清单文件部署1kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml 发现老是无限重启，说是就绪性探测和存活性探测有问题，我这里换换镜像以及添加2个参数好了其实根源https TLS问题1234567891011121314151617181920212223242526272829spec: hostNetwork: true serviceAccountName: metrics-server containers: - name: metrics-server image: bitnami/metrics-server:0.4.1 # 可以尝试更换官方镜像 #image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1 imagePullPolicy: IfNotPresent args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-insecure-tls # 禁用https - --kubelet-use-node-status-port - --kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname # 添加地址解析类型 livenessProbe: failureThreshold: 3 httpGet: path: /livez port: https scheme: HTTPS periodSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /readyz port: https scheme: HTTPS periodSeconds: 10 ports: 总结 dashboard只是提供web GUI服务，本身并做认证授权，只是代为拿着账号向kubernetes API进行认证 dashboard 运行于pod, pod代为向kubernetes API进行认证的账号也必须是ServiceAccount账号，不可以是User自然人的属性账号 clusterrolebinding只能绑定clusterrole, rolebinding 即可以绑role,也可以绑clusterrole,口决是： 小绑大降权 Metrics-server用于收集pod内部CPU、内存使用量资源，kube-prometheus项目内部集成此功能，所以部署与否看你需要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes ingress进阶","slug":"kubernetes-ingress","date":"2021-01-12T12:51:41.000Z","updated":"2021-01-14T10:04:01.904Z","comments":true,"path":"2021/01/12/kubernetes-ingress/","link":"","permalink":"http://www.digmyth.com/2021/01/12/kubernetes-ingress/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes rbac","slug":"kubernetes-rbac","date":"2021-01-11T12:51:41.000Z","updated":"2021-01-14T04:50:59.033Z","comments":true,"path":"2021/01/11/kubernetes-rbac/","link":"","permalink":"http://www.digmyth.com/2021/01/11/kubernetes-rbac/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes secret","slug":"kubernetes-secret","date":"2021-01-03T12:51:41.000Z","updated":"2021-01-14T08:47:17.288Z","comments":true,"path":"2021/01/03/kubernetes-secret/","link":"","permalink":"http://www.digmyth.com/2021/01/03/kubernetes-secret/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes configmap","slug":"kubernetes-configmap","date":"2021-01-02T12:51:41.000Z","updated":"2021-01-11T09:55:46.529Z","comments":true,"path":"2021/01/02/kubernetes-configmap/","link":"","permalink":"http://www.digmyth.com/2021/01/02/kubernetes-configmap/","excerpt":"","text":"创建configmap12# kubectl get cm/calico-config -n kube-system -o yaml# kubectl get cm/kube-flannel-cfg -n kube-system -o yaml 12345kubectl create ns cm-nskubectl create cm -hkubectl create cm filebeat-cfg -n cm-ns \\ --from-literal=redis_host=&quot;redis.default.svc.cluster.local&quot; \\ --from-literal=log_level=&quot;Info&quot; 1234567891011121314151617181920212223kubectl get cm/filebeat-cfg -n cm-ns -o yamlapiVersion: v1data: log_level: Info redis_host: redis.default.svc.cluster.localkind: ConfigMapmetadata: creationTimestamp: &quot;2021-01-11T05:58:23Z&quot; managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: &#123;&#125; f:log_level: &#123;&#125; f:redis_host: &#123;&#125; manager: kubectl-create operation: Update time: &quot;2021-01-11T05:58:23Z&quot; name: filebeat-cfg namespace: cm-ns resourceVersion: &quot;573737&quot; uid: b06442dc-90e6-446b-8a3c-f119f26226d4 启一个pod运用configmap1234567891011121314151617181920212223242526root@k8s-m:/data/configmap# cat filebeat-pod.yaml apiVersion: v1kind: Podmetadata: name: filebeat-pod namespace: cm-nsspec: containers: - name: filebeat image: ikubernetes/filebeat:5.6.5-alpine env: - name: REDIS_HOST valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: redis_host # 定义的键名 - name: LOG_LEVEL valueFrom: configMapKeyRef: name: filebeat-cfg # configmap名字 key: log_level # 定义的键名root@k8s-m:/data/configmap# kubectl apply -f filebeat-pod.yaml#pod内部是能查到的定义变量的root@k8s-m:/data/configmap# kubectl exec -it pods/filebeat-pod -n cm-ns -- env | grep REDIS_HOSTREDIS_HOST=redis.default.svc.cluster.local 定义2个数据文件123456789101112131415161718root@k8s-m:/data/configmap/nginx# cat server1.conf server &#123; server_name www.first.com; listen 80; location / &#123; root &quot;/html/first&quot;; &#125;&#125;root@k8s-m:/data/configmap/nginx# cat server2.conf server &#123; server_name www.second.com; listen 80; location / &#123; root &quot;/html/second&quot;; &#125;&#125; 创建nginx-cfg1kubectl create cm nginx-cfg --from-file=server1.conf --from-file=server-sec.conf=server2.conf -n cm-ns pod使用nginx-cfg12345678910111213141516171819202122232425262728[root@k8smaster nginx]# cat nginx-pod.yaml apiVersion: v1kind: Podmetadata: name: nginx-pod namespace: cm-nsspec: containers: - name: nginx-t image: nginx volumeMounts: - name: config-vol mountPath: /etc/nginx/conf.d/ volumes: - name: config-vol configMap: name: nginx-cfg items: - key: server1.conf # 定义configmap时的key path: server-first.conf # pod内部的文件名 - key: server-sec.conf # 定义configmap时的key path: server-second.conf # pod内部的文件名[root@k8smaster nginx]# kubectl apply -f nginx-pod.yaml[root@k8smaster nginx]# kubectl exec -it pods/nginx-pod -n cm-ns -- ls /etc/nginx/conf.dserver-first.conf server-second.confkubectl edit cm/nginx-cfg -n cm-ns # 修改能在60s生效 总结configmap也是一种存储卷，特殊的存储卷，用于保存pod内程序变量配置或文件等","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-csi-nfs","slug":"kubernetes-csi-nfs","date":"2021-01-01T13:52:41.000Z","updated":"2021-06-16T02:58:24.839Z","comments":true,"path":"2021/01/01/kubernetes-csi-nfs/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-csi-nfs/","excerpt":"","text":"简介要实现kubernetes中动态创建pv必须先创建StorageClass，每一个StorageClass对应了一个provisioner，kubernetes中内置了很多provisioner，但是很难受的是没有内置的nfs provisioner，对于我们这种没有钱的玩家，nfs是实现后端存储最简单直接的方法，所以不知道为什么k8s不提供，但是没关系有方法实现，k8s允许提供外部的provisioner，而nfs可以使用nfs-client-provisioner项目链接1https://github.com/kubernetes-retired/external-storage/tree/master/nfs-client 创建nfs server1234yum install nfs-utils -y[root@node02 deploy]# cat /etc/exports/csc-nfsdata/ *(rw,sync,no_root_squash)[root@node02 deploy]# 开放防火墙123456789101112vim /etc/nfs.conf[mountd]port=port-number# This adds the -p port-number option to the rpc.mount command line: rpc.mount -p port-number.firewall-cmd --permanent --add-service mountdfirewall-cmd --permanent --add-service rpc-bindfirewall-cmd --permanent --add-service nfsfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/tcpfirewall-cmd --permanent --add-port=&lt;mountd-port&gt;/udpfirewall-cmd --reload 配置NFS-Client provisioner,首先clone这个项目1git clone https://github.com/kubernetes-retired/external-storage.git 之后进入nfs-client/deploy/文件夹 可以看到有下面几个文件12345678910cd nfs-client/deploy/[root@nginx1-pro deploy]# ll总用量 28-rw-r--r-- 1 root root 225 9月 3 14:26 class.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 1030 9月 3 13:17 deployment-arm.yaml-rw-r--r-- 1 root root 1040 9月 3 13:30 deployment.yaml ## 需要改自己的nsdrwxr-xr-x 2 root root 214 9月 3 13:32 objects-rw-r--r-- 1 root root 1834 9月 3 13:19 rbac.yaml ## 需要改自己的ns-rw-r--r-- 1 root root 241 9月 3 13:55 test-claim.yaml-rw-r--r-- 1 root root 399 9月 3 13:38 test-pod.yaml 首先你要做的是创建一个独立的命名空间12[root@k8smaster ~]# kubectl create ns csi-nfsnamespace/csi-nfs created 之后修改rbac.yaml和deployment.yaml的namespace为你创建的namespace 修改完成之后我们修改deployment.yaml123456789101112 env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.1.11 - name: NFS_PATH value: /data/kubernetesvolumes: - name: nfs-client-root nfs: server: 192.168.1.11 path: /data/kubernetes 执行rbac 和deploy yaml文件1234567891011121314151617181920212223242526[root@node02 deploy]# kubectl apply -f rbac.yamlserviceaccount/nfs-client-provisioner createdclusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner createdclusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner createdrole.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner createdrolebinding.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner created[root@node02 deploy]#[root@node02 deploy]# kubectl apply -f deployment.yamldeployment.apps/nfs-client-provisioner created[root@node02 deploy]# [root@node02 deploy]# kubectl apply -f class.yaml storageclass.storage.k8s.io/managed-nfs-storage created[root@node02 deploy]#查看cs [root@node02 deploy]# kubectl get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEmanaged-nfs-storage fuseim.pri/ifs Delete Immediate false 20s[root@node02 deploy]# cat class.yamlapiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: managed-nfs-storageprovisioner: fuseim.pri/ifs # or choose another name, must match deployment&apos;s env PROVISIONER_NAME&apos;parameters: archiveOnDelete: &quot;false&quot; provisioner就是刚才deployment中的PROVISIONER_NAME，还有一个比较关键的参数是archiveOnDelete，如果你想在删除了pvc之后还保留数据的话需要把这个参数改为true，不然你删除了pvc同时pv也会删除，然后数据也会丢失1234567kubectl apply class.yamlkubectl apply -f class.yaml很简单，只要pvc有annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot; pvc就能动态的创建出来 尝试创建123456789101112131415161718192021222324[root@node02 deploy]# kubectl apply -f test-claim.yaml [root@node02 deploy]# cat test-claim.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: test-claim annotations: volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi[root@node02 deploy]# 查看pv和pvc[root@node02 deploy]# kubectl get pv,pvcNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpersistentvolume/pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX Delete Bound default/test-claim managed-nfs-storage 29mNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpersistentvolumeclaim/test-claim Bound pvc-a0b85043-84a6-4f8a-9016-bba084a3f014 1Mi RWX managed-nfs-storage 29m[root@node02 deploy]# 尝试删除pvc，查看pv也会被删除，只不过pv中的数据不会被删除。需要注意的是删除pvc之前要把所使用的pod 删除掉 pending排障如果你部署的kubernetes是v1.20 v1.21.0以上,那么需要修改kube-apiserver.yaml支持selfLink功能 查看nfs-client-provisioner容器跑在哪个节点上，是否Running,确保宿主节点己安装nfs客户端可以正常挂载nfs-server卷123root@node01:/data/nfs-server/external-storage/nfs-client/deploy# kubectl get pods -n csi-nfs -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESnfs-client-provisioner-56f95d5b56-k5cjl 1/1 Running 0 37m 172.16.18.93 node03 &lt;none&gt; &lt;none&gt; 到运行容器节点上查看日志：nfs-client-provisioner-xx容器日志1tail -f /var/log/containers/nfs-client-provisioner-6b4 解决办法1234567891011121314参考： www.orchome.com/10024解决方法是编辑/etc/kubernetes/manifests/kube-apiserver.yaml在这里：spec: containers: - command: - kube-apiserver添加这一行：- --feature-gates=RemoveSelfLink=false然后应用它，即可kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml 查看pvc状态，确保nfs-server 卷权限777,否则创建pv失败也会导致pvc Pending1kubectl get pvc # Pending 总结 参考","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes volumes","slug":"kubernetes-volumes","date":"2021-01-01T12:51:41.000Z","updated":"2021-01-11T09:55:36.757Z","comments":true,"path":"2021/01/01/kubernetes-volumes/","link":"","permalink":"http://www.digmyth.com/2021/01/01/kubernetes-volumes/","excerpt":"","text":"12# kubectl explain pods.spec.volumes# kubectl explain pods.spec.containers.volumeMounts hostPath 为node节点本地卷1234567891011121314151617181920212223root@k8s-m:/data/volumes# cat 01-volume-demo.yaml apiVersion: v1kind: Podmetadata: name: vol-demo namespace: vol labels: app: vol-demospec: nodeName: k8s-n containers: - name: vol-demo image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: webstore volumes: - name: webstore hostPath: path: /volumes/vol-demo type: DirectoryOrCreateroot@k8s-m:/data/volumes# kubectl apply -f 01-volume-demo.yaml empty 临时存储，pod重启数据丢失12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 02-emptydir.yaml apiVersion: v1kind: Podmetadata: name: vol-emptydir-pod namespace: volspec: volumes: - name: html emptyDir: &#123;&#125; containers: - name: nginx image: nginx:1.14-alpine volumeMounts: - name: html mountPath: /usr/share/nginx/html - name: createpage image: alpine volumeMounts: - name: html mountPath: /html command: [&quot;/bin/sh&quot;,&quot;-c&quot;] args: - while true;do echo $(hostname) $(date) &gt;&gt; /html/index.html; sleep 2; doneroot@k8s-m:/data/volumes# kubectl apply -f 02-emptydir.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESvol-emptydir-pod 2/2 Running 0 2m47s 172.16.234.11 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q http://172.16.234.11vol-emptydir-pod Mon Jan 11 03:30:24 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:26 UTC 2021vol-emptydir-pod Mon Jan 11 03:30:28 UTC 2021 # 正如我们期望的那样，每2秒钟生成一条记录 nfs 存储卷12345678910111213141516171819202122232425262728293031323334353637root@k8s-m:/data/volumes# cat 03-nfs-pod.yaml apiVersion: v1kind: Podmetadata: name: liveness-httpget-pod namespace: volspec: containers: - name: liveness-httpget-pod image: nginx imagePullPolicy: IfNotPresent ports: - name: http containerPort: 80 livenessProbe: httpGet: port: http path: /index.html initialDelaySeconds: 1 periodSeconds: 3 volumeMounts: - name: html mountPath: /usr/share/nginx/html/ volumes: - name: html nfs: path: /nginx_share server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 03-nfs-pod.yamlapt install nfs-kernel-serverroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESliveness-httpget-pod 1/1 Running 0 16m 172.16.234.13 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# wget -O - -q 172.16.234.13test nginx for nfs vol # 成功 redis Pod挂载nfs类型的卷,实现重建pod数据不丢失1234567891011121314151617181920212223242526272829303132333435363738394041424344root@k8s-m:/data/volumes# cat 04-nfs-redis.yaml apiVersion: v1kind: Podmetadata: name: redis namespace: vol labels: app: redisspec: containers: - name: redis image: redis:5.0.4 ports: - name: redis-port containerPort: 6379 volumeMounts: - name: data mountPath: /data volumes: - name: data nfs: path: /vols/v6 server: 192.168.1.10root@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl get pods -n vol -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESredis 1/1 Running 0 12m 172.16.234.12 k8s-n &lt;none&gt; &lt;none&gt;root@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; set name wxqOK127.0.0.1:6379&gt; set age 25OK127.0.0.1:6379&gt; saveOKroot@k8s-m:/data/volumes# kubectl delete -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl apply -f 04-nfs-redis.yamlroot@k8s-m:/data/volumes# kubectl exec -it pods/redis -n vol -- bashroot@redis:/data# redis-cli 127.0.0.1:6379&gt; get name&quot;wxq&quot; # 挂载卷后数据仍然存在 利用 nfs创建一个pv123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 01-pv-nfs.yaml apiVersion: v1kind: PersistentVolumemetadata: name: test-vol labels: storages: nfsspec: capacity: storage: 2Gi volumeMode: Filesystem accessModes: - ReadWriteMany - ReadWriteOnce - ReadOnlyMany persistentVolumeReclaimPolicy: Retain nfs: server: 192.168.1.10 path: /vols/v7root@k8s-m:/data/volumes/pvc# kubectl apply -f 01-pv-nfs.yaml 创建pvc123456789101112131415161718192021root@k8s-m:/data/volumes/pvc# cat 02-pvc-nfs-yaml apiVersion: v1kind: PersistentVolumeClaimmetadata: name: test-pvc namespace: volspec: accessModes: - ReadWriteOnce volumeMode: Filesystem resources: requests: storage: 1Gi#storageClassName: slow# selector:# matchLabels:# release: &quot;stable&quot;# matchExpressions:# - &#123;key: environment, operator: In, values: [dev]&#125;root@k8s-m:/data/volumes/pvc# kubectl apply -f 02-pvc-nfs-yaml 创建一个pod申请pvc12345678910111213141516171819202122232425262728root@k8s-m:/data/volumes/pvc# cat 03-pod-demo.yaml apiVersion: v1kind: Podmetadata: name: pvc-pod-demo namespace: vol labels: app: pvc-podspec: nodeName: k8s-n containers: - name: pvc-pod image: docker.io/ikubernetes/myapp:v1 volumeMounts: - mountPath: /data name: testpvc volumes: - name: testpvc persistentVolumeClaim: claimName: test-pvcroot@k8s-m:/data/volumes/pvc# kubectl apply -f 03-pod-demo.yamlroot@k8s-m:/data# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEtest-vol 2Gi RWO,ROX,RWX Retain Bound vol/test-pvc 11mroot@k8s-m:/data# kubectl get pvc -n volNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEtest-pvc Bound test-vol 2Gi RWO,ROX,RWX 6m47s 总结无它，唯手熟而，理解运用更重要","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Ubuntu20.04 Run k8s","slug":"Kubernetes-ubuntu20.04","date":"2020-12-30T12:51:41.000Z","updated":"2021-01-11T09:55:23.613Z","comments":true,"path":"2020/12/30/Kubernetes-ubuntu20.04/","link":"","permalink":"http://www.digmyth.com/2020/12/30/Kubernetes-ubuntu20.04/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"ELF日志系统实践","slug":"log_elk_实践","date":"2020-12-15T02:12:36.000Z","updated":"2021-04-19T06:15:27.618Z","comments":true,"path":"2020/12/15/log_elk_实践/","link":"","permalink":"http://www.digmyth.com/2020/12/15/log_elk_实践/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb cluster recovery","slug":"mariadb-cluster-recovery","date":"2020-07-10T01:41:54.000Z","updated":"2020-07-06T10:59:33.024Z","comments":true,"path":"2020/07/10/mariadb-cluster-recovery/","link":"","permalink":"http://www.digmyth.com/2020/07/10/mariadb-cluster-recovery/","excerpt":"","text":"mariadb cluster recovery列几个集群检查命令1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+----------------------------------------------+| Variable_name | Value |+--------------------------+----------------------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306,10.0.0.53:3306 |+--------------------------+----------------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 3 |+--------------------+-------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_state_uuid&apos;;+--------------------------+-----------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------+| wsrep_cluster_state_uuid | 345098abd2-291a-9893-acbd3-30923abcdef9 |+--------------------------+-----------------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_local_state_comment&apos;;+---------------------------+--------+| Variable_name | Value |+---------------------------+--------+| wsrep_local_state_comment | Synced |+---------------------------+--------+1 row in set (0.01 sec) 场景一 只是很简单的某节点掉线，重启让其重新加入集群即可1234567MariaDB [(none)]&gt; show status like &apos;wsrep_incoming_addresses&apos;;+--------------------------+-------------------------------+| Variable_name | Value |+--------------------------+-------------------------------+| wsrep_incoming_addresses | 10.0.0.51:3306,10.0.0.52:3306 |+--------------------------+-------------------------------+1 row in set (0.01 sec) 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 2 |+--------------------+-------+1 row in set (0.01 sec) 1# systemctl restart mariadb 场景二 唯一有一个幸存节点1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 1 |+--------------------+-------+1 row in set (0.01 sec) 幸存节点刚好优雅关闭正确提交了数据，状态为Primary1234567MariaDB [(none)]&gt; show status like &apos;wsrep_cluster_status&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_cluster_status | Primary |+----------------------+---------+1 row in set (0.01 sec) 哪果是non-Primary状态还要单独恢复幸存节点上执行1MariaDB [(none)]&gt; set global wsrep_provider_options=&apos;pc.bootstrap=YES&apos;; 可是 我们一般不这样做，常规做法是直接指定这个幸存节点的主节点，让其它节点加入集群123# systemctl stop mariadb# galera_new_cluster# systemctl restart mariadb 场景三集群崩溃完全不可用,这也分为2种情况，基于最高seqno值恢复状态一是没有集群UUID, seqno: -1,数据定义语言DDL出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 00000000-0000-0000-0000-000000000000seqno: -1safe_to_bootstrap: 0 状态2是有集群UUID，seqno: -1，事务处理数据时出错123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: -1safe_to_bootstrap: 0 状态3是有集群UUID，seqno值最高正值123456# cat /var/lib/mysql/grastate.dat# GALERA saved stateversion: 2.1uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4seqno: 31929safe_to_bootstrap: 1 此时我们认为状态3是OK的，需要修改状态１、２数据库配置文件去掉IP地址配置项1wsrep_cluster_address=&quot;gcomm://&quot; 这样节点就能正常启动了1systemctl restart mariadb 最后再修改配置文件后把这2个节点正常加入集群就好了1wsrep_cluster_address=&quot;gcomm://10.8.8.53,10.8.8.54,10.8.8.55&quot; 最后是基于Last Committed恢复先修改配置文件让服务启起来，入库查看wsrep_last_committed123#systemctl stop mariadb 编辑配置文件去掉IP地址wsrep_cluster_address=&quot;gcomm://&quot;#systemctl start mariadb 1234567MariaDB [(none)]&gt; show status like &apos;wsrep_last_committed&apos;;+----------------------+---------+| Variable_name | Value |+----------------------+---------+| wsrep_last_committed | 319589 |+----------------------+---------+1 row in set (0.01 sec) 找到节点最大值认为就是主节点，然后在这个主节点上1# galera_new_cluster 其它节点加入集群即可","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"openstack-HA","slug":"openstack-HA","date":"2020-03-14T01:41:54.000Z","updated":"2020-03-29T03:13:34.557Z","comments":true,"path":"2020/03/14/openstack-HA/","link":"","permalink":"http://www.digmyth.com/2020/03/14/openstack-HA/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"calico-原理剖析","slug":"calico-原理剖析","date":"2020-03-07T01:42:54.000Z","updated":"2021-01-07T06:05:08.285Z","comments":true,"path":"2020/03/07/calico-原理剖析/","link":"","permalink":"http://www.digmyth.com/2020/03/07/calico-原理剖析/","excerpt":"","text":"arp之calico本质参考戳穿 Calico 的谎言 什么是代理ARP？当 ARP 请求目标跨网段时，网关设备收到此ARP请求会用自己的MAC地址返回给请求者,这就是代理arp. 实现MAC地址代理,最终使得主机能够通信. 知识点： 跨网段通信时会发广播得到网关MAC 之后发出的网络数据包目标MAC是网关的MAC 网关的IP地址不会出现在任何网络包头中 因此，没有人在乎网关地址是否真的存在，只要设备能响应ARP就行了 我这里用了2台linux主机实验，主机A：192.168.1.109 主机B:192.168.1.110主机A：1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.10/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-A ~]#ip netns exec ns0 route -n # 命名空间里的路由Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.10 dev veth0ip route add 10.10.10.20 via 192.168.1.110 dev eth0 主机B:1234567891011121314151617ip link add veth0 type veth peer name veth0_pip netns add ns0ip link set veth0_p netns ns0ip netns exec ns0 ip link set veth0_p name eth0ip netns exec ns0 ip a add 10.10.10.20/24 dev eth0ip netns exec ns0 ip link set eth0 upip netns exec ns0 ip route add 169.254.1.1 dev eth0ip netns exec ns0 ip route add default via 169.254.1.1 dev eth0[root@testarp-B ~]# ip netns exec ns0 route -n Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface0.0.0.0 169.254.1.1 0.0.0.0 UG 0 0 0 eth010.10.10.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0169.254.1.1 0.0.0.0 255.255.255.255 UH 0 0 0 eth0ip link set veth0 upip route add 10.10.10.20 dev veth0ip route add 10.10.10.10 via 192.168.1.109 dev eth0 Linux主机打开路由转发1net.ipv4.ip_forward = 1 网卡开启代理ARP功能1echo 1 &gt; /proc/sys/net/ipv4/conf/veth0/proxy_arp 主机A上网络通信测试12345[root@testarp-A ~]# ip netns exec ns0 ping 10.10.10.20PING 10.10.10.20 (10.10.10.20) 56(84) bytes of data.64 bytes from 10.10.10.20: icmp_seq=1 ttl=62 time=0.951 ms64 bytes from 10.10.10.20: icmp_seq=2 ttl=62 time=0.484 ms64 bytes from 10.10.10.20: icmp_seq=3 ttl=62 time=0.556 ms 1234567[root@testarp-A ~]# tcpdump -nni veth0tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on veth0, link-type EN10MB (Ethernet), capture size 262144 bytes08:18:15.999200 IP 10.10.10.10 &gt; 10.10.10.20: ICMP echo request, id 1486, seq 1, length 6408:18:16.000288 IP 10.10.10.20 &gt; 10.10.10.10: ICMP echo reply, id 1486, seq 1, length 6408:18:21.008712 ARP, Request who-has 10.10.10.20 tell 10.10.10.10, length 2808:18:21.008757 ARP, Reply 10.10.10.20 is-at ee:46:7c:2e:d9:ba, length 28 注意： 这里veth0充当路由角色代理ARP, who is 10.10.10.20 ,返回自己MACee:46:7c:2e:d9:ba来响应. 转发过程分析：1 广播寻找目标IP对应MAC是谁？2 根据路由规则所有数据包都会转发到169.254.1.1，寻找169.254.1.1MAC是谁？2 vet0开启代理ARP进行ARP拦截，返回自己MACee:46:7c:2e:d9:ba给以响应3 封包目标IP为10.10.10.20，MAC为ee:46:7c:2e:d9:ba,发出这样的数据包4 主机A查询本地路由，匹配10.10.10.20 via 192.168.1.110 dev eth0 会把包发送给192.168.1.1105 主机B收到10.10.10.20的包时，匹配本地路由10.10.10.20 dev veth0 scope link,数据包发送到veth0上6 完成通信，回程类似","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"corosync/PacemakerHA","slug":"linux-pacemaker-corosync","date":"2020-02-15T01:42:54.000Z","updated":"2020-03-29T01:27:23.789Z","comments":true,"path":"2020/02/15/linux-pacemaker-corosync/","link":"","permalink":"http://www.digmyth.com/2020/02/15/linux-pacemaker-corosync/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"ingress-nginx 基础","slug":"ingress-nginx","date":"2020-01-20T12:51:41.000Z","updated":"2021-01-14T07:57:51.296Z","comments":true,"path":"2020/01/20/ingress-nginx/","link":"","permalink":"http://www.digmyth.com/2020/01/20/ingress-nginx/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"openvswit_vlan流表","slug":"openvswit_vlan流表","date":"2020-01-01T01:41:54.000Z","updated":"2020-01-13T03:44:37.630Z","comments":true,"path":"2020/01/01/openvswit_vlan流表/","link":"","permalink":"http://www.digmyth.com/2020/01/01/openvswit_vlan流表/","excerpt":"","text":"如果计算节点关闭防火墙，配置文件如下，那么就不会产生bridge桥及相应iptables规则 ml2部份配置文件如下123[securitygroup]#enable_security_group = True#firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver linuxBridge桥接口就会为空12kvm-app-6:~ # brctl show # 为空bridge name bridge id STP enabled interfaces 查看某虚机接口信息123456789kvm-app-6:~ # virsh list Id Name State---------------------------------------------------- 1 instance-00000793 runningkvm-app-6:~ # virsh domiflist instance-00000793Interface Type Source Model MAC-------------------------------------------------------tap790c394d-70 bridge br-int virtio fa:16:3e:1f:11:99 ovs-vsctl show1234567891011121314151617181920212223242526272829303132kvm-app-6:~ # ovs-vsctl show8ba4a76e-8c27-4807-a65a-f05b22a3ef76 Manager &quot;ptcp:6640:127.0.0.1&quot; is_connected: true Bridge br-int Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port int-br-ex Interface int-br-ex type: patch options: &#123;peer=phy-br-ex&#125; Port &quot;tap790c394d-70&quot; tag: 1 Interface &quot;tap790c394d-70&quot; Port br-int Interface br-int type: internal Bridge br-ex Controller &quot;tcp:127.0.0.1:6633&quot; is_connected: true fail_mode: secure Port phy-br-ex Interface phy-br-ex type: patch options: &#123;peer=int-br-ex&#125; Port br-ex Interface br-ex type: internal Port &quot;bond0&quot; Interface &quot;bond0&quot; ovs_version: &quot;2.7.6&quot; 查看br-int桥接口信息ovs-ofctl show br-int12345678910111213141516171819kvm-app-6:~ # ovs-ofctl show br-intOFPT_FEATURES_REPLY (xid=0x2): dpid:00002a77dbc2860an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(int-br-ex): addr:3e:38:8a:6e:c1:de config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(tap790c394d-70): addr:fe:16:3e:1f:11:99 config: 0 state: 0 current: 10MB-FD COPPER speed: 10 Mbps now, 0 Mbps max LOCAL(br-int): addr:2a:77:db:c2:86:0a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-int流表规则ovs-ofctl dump-flows br-int12345678910111213kvm-app-6:~ # ovs-ofctl dump-flows br-intNXST_FLOW reply (xid=0x4): cookie=0x8372d932b48e5321, duration=5395.262s, table=0, n_packets=0, n_bytes=0, idle_age=5395, priority=10,icmp6,in_port=2,icmp_type=136 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=5395.261s, table=0, n_packets=505, n_bytes=21210, idle_age=7, priority=10,arp,in_port=2 actions=resubmit(,24) cookie=0x8372d932b48e5321, duration=7776.549s, table=0, n_packets=366813, n_bytes=36441400, idle_age=5395, priority=2,in_port=1 actions=drop cookie=0x8372d932b48e5321, duration=5395.264s, table=0, n_packets=817, n_bytes=74814, idle_age=4, priority=9,in_port=2 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=5395.379s, table=0, n_packets=840145, n_bytes=83511042, idle_age=0, priority=3,in_port=1,dl_vlan=11 actions=mod_vlan_vid:1,NORMAL cookie=0x8372d932b48e5321, duration=7776.964s, table=0, n_packets=4, n_bytes=320, idle_age=7776, priority=0 actions=NORMAL cookie=0x8372d932b48e5321, duration=7776.965s, table=23, n_packets=0, n_bytes=0, idle_age=7776, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.263s, table=24, n_packets=0, n_bytes=0, idle_age=5395, priority=2,icmp6,in_port=2,icmp_type=136,nd_target=fe80::f816:3eff:fe1f:1199 actions=NORMAL cookie=0x8372d932b48e5321, duration=5395.262s, table=24, n_packets=502, n_bytes=21084, idle_age=7, priority=2,arp,in_port=2,arp_spa=10.8.25.220 actions=resubmit(,25) cookie=0x8372d932b48e5321, duration=7776.964s, table=24, n_packets=3, n_bytes=126, idle_age=5357, priority=0 actions=drop cookie=0x8372d932b48e5321, duration=5395.265s, table=25, n_packets=1319, n_bytes=95898, idle_age=4, priority=2,in_port=2,dl_src=fa:16:3e:1f:11:99 actions=NORMAL 查看br-ex交换机接口信息ovs-ofctl show br-ex123456789101112131415161718 kvm-app-6:~ # ovs-ofctl show br-exOFPT_FEATURES_REPLY (xid=0x2): dpid:0000aa081303781an_tables:254, n_buffers:0capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IPactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst 1(bond0): addr:82:01:9b:1b:28:c9 config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max 2(phy-br-ex): addr:c2:06:bb:33:da:7a config: 0 state: 0 speed: 0 Mbps now, 0 Mbps max LOCAL(br-ex): addr:aa:08:13:03:78:1a config: PORT_DOWN state: LINK_DOWN speed: 0 Mbps now, 0 Mbps maxOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0 查看br-ex流表信息12345kvm-app-6:~ # ovs-ofctl dump-flows br-exNXST_FLOW reply (xid=0x4): cookie=0x90f6220dc9413e6e, duration=5441.562s, table=0, n_packets=1328, n_bytes=96564, idle_age=3, priority=4,in_port=2,dl_vlan=1 actions=mod_vlan_vid:11,NORMAL cookie=0x90f6220dc9413e6e, duration=7822.731s, table=0, n_packets=0, n_bytes=0, idle_age=7822, priority=2,in_port=2 actions=drop cookie=0x90f6220dc9413e6e, duration=7822.733s, table=0, n_packets=1213423, n_bytes=120613616, idle_age=0, priority=0 actions=NORMAL","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"linux disk","slug":"linux-disk","date":"2019-12-15T01:42:54.000Z","updated":"2020-03-24T13:52:16.618Z","comments":true,"path":"2019/12/15/linux-disk/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-disk/","excerpt":"","text":"Ubuntu系统分区信息查看：fdisk /dev/vda1234567891011Command (m for help): pDisk /dev/vda: 60 GiB, 64424509440 bytes, 125829120 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x630fdccbDevice Boot Start End Sectors Size Id Type/dev/vda1 * 2048 1953791 1951744 953M 83 Linux/dev/vda2 1953792 125829119 123875328 59.1G 83 Linux Sart、End、Sectors单位都是扇区， 1扇区=512bytes，那么2扇区就是1KB 通常称为一个block块，那么就有了2sectors=1KB=1 block,可以通过blockdev --getsz /dev/vda得到整块盘扇区数像上面1953791-2048+1=1951744扇,953M=1951744/2/1024KB CentOS差别可能就是 Blocks数显示，上面说了1Block=1KB12345678910Disk /dev/vda: 64.4 GB, 64424509440 bytes, 125829120 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000afe6d Device Boot Start End Blocks Id System/dev/vda1 * 2048 4196351 2097152 83 Linux/dev/vda2 4196352 125829119 60816384 83 Linux 我来验证一下14196351-2048+1得到扇区数，(4196351-2048+1)/2=2097152刚好等于Blocks数，也就是2097152KB=2048MB=2GB 我们再来学习下dd命令1234bs参数代表逻辑块大小，默认单位是扇区，bs=512代表一个扇区，也就是512bytescount参数代表逻辑块的个数或扇区数，那么处理的存储大小就是bs*countskip 表示跳过if 设备的扇区数开始读数据,skip=200代表200个扇区，也就是100KBseek表示跳过of设备的扇区数开始写数据,seek=400代表400个扇区，也就是200KB 那么学了这些有什么用呢？一个裸盘有硬件raid卡信息是不能正常被格式化的，这个raid信息会存在硬盘的最后63个扇区的地方，我们可以用dd复盖掉12snumber=$(($(blockdev --getsz /dev/sda)-63))dd if=/dev/zero of=/dev/sda bs=512 count=63 seek=$snumber 总结： 一个扇区512bytes , 1Block=1KB=2扇区 dd参数的skip针对if设备，seek针对of设备（跳过多少扇区再处理）","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"nmap工具详解","slug":"linux-nmap详解","date":"2019-12-15T01:42:54.000Z","updated":"2019-01-15T09:13:55.828Z","comments":true,"path":"2019/12/15/linux-nmap详解/","link":"","permalink":"http://www.digmyth.com/2019/12/15/linux-nmap详解/","excerpt":"","text":"1.1 nmap基础在运维过程中有时需要主机存活性探测，一般是namp、tcpdump命令结合使用，相关工具包安装1[root@ ]# yum install nmap tcpdump 列出几种nmap命令语法123-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans-sU: UDP Scan-sP: ping Scan 下面我们在2台主机间探测，一主机发nmap探测，另一主机tcpdump抓包分析 在A主机正常发一个ping包看看正常情况下的icmp包 ping -c 1 10.17.200.36 在B主机抓包发现icmp包有去有回12345[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:08:38.392418 IP 10.17.200.14 &gt; 10.17.200.36: ICMP echo request, id 5220, seq 1, length 6416:08:43.400811 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 可在一台主机临时禁用icmp协议,再用ping将探测不到这台主机1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 1.2 nmap ping探测我们开始nmap ping探测， -n表示不进行DNS解析123456[root@ ]# nmap -n -sP 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:12 CSTNmap scan report for 10.17.200.36Host is up (0.00030s latency).MAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 0.05 seconds 在B主机探测发现只收到了对方发的请求包，并未回应，但是还是认为这台主机是存活的，这样提高了探测效率1234[root@localhost roles]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:12:28.972321 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 46 1.3 nmapSYN探测我们开始nmap TCP的SYN探测， -n表示不进行DNS解析1234567891011[root@ ]# nmap -n -PE 10.17.200.36Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-15 16:20 CSTNmap scan report for 10.17.200.36Host is up (0.00014s latency).Not shown: 998 closed portsPORT STATE SERVICE22/tcp open ssh445/tcp filtered microsoft-dsMAC Address: 00:50:56:B9:21:18 (VMware)Nmap done: 1 IP address (1 host up) scanned in 1.33 seconds 在B主机探测发现，A主机对B主机的各服务都发送了TCP SYN包来进行探测123456789101112[root@ ]# tcpdump -np -i ens192 src host 10.17.200.14tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes16:20:07.124327 ARP, Request who-has 10.17.200.36 (Broadcast) tell 10.17.200.14, length 4616:20:07.148867 IP 10.17.200.14.40911 &gt; 10.17.200.36.rtsp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148882 IP 10.17.200.14.40911 &gt; 10.17.200.36.smtp: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148906 IP 10.17.200.14.40911 &gt; 10.17.200.36.domain: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148943 IP 10.17.200.14.40911 &gt; 10.17.200.36.https: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.mysql: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 016:20:07.148950 IP 10.17.200.14.40911 &gt; 10.17.200.36.ssh: Flags [S], seq 3791226815, win 1024, options [mss 1460], length 0信息太多，略过...16:20:12.152833 ARP, Reply 10.17.200.14 is-at 00:50:56:b9:b2:fb, length 46 1.4 arping另外补充一下，arping -D可有效检测IP地址冲突问题,如果命令echo $?返回值为0则表示地址冲突，1则表示不冲突.12345[root@ ]# arping -D -c 2 -I ens192 10.17.200.36ARPING 10.17.200.36 from 0.0.0.0 ens192Unicast reply from 10.17.200.36 [00:50:56:B9:21:18] 0.887msSent 1 probes (1 broadcast(s))Received 1 response(s) 1.5 总结 nmap -sP 可进行ping检测 nmap -PE 可进行tcp SYN检测 nmap -n -sP -PE 可进行ping与SYN结合检测,以免漏扫 arping -D 可进行地址冲突检测 &lt;完结&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"k8s_pod资源清单学习1","slug":"k8s_pod1","date":"2019-12-01T12:51:41.000Z","updated":"2020-01-19T09:37:36.257Z","comments":true,"path":"2019/12/01/k8s_pod1/","link":"","permalink":"http://www.digmyth.com/2019/12/01/k8s_pod1/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"udev定义network","slug":"linux-udev","date":"2019-11-15T01:42:54.000Z","updated":"2020-03-29T02:10:23.637Z","comments":true,"path":"2019/11/15/linux-udev/","link":"","permalink":"http://www.digmyth.com/2019/11/15/linux-udev/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"helm部署efk日志系统","slug":"log_helm-efk","date":"2019-10-15T02:42:36.000Z","updated":"2021-03-17T09:56:58.567Z","comments":true,"path":"2019/10/15/log_helm-efk/","link":"","permalink":"http://www.digmyth.com/2019/10/15/log_helm-efk/","excerpt":"","text":"efk 日志系统3大组件elasticsearchfluent-bitkibana helm部署efk日志系统heml.sh 官网https://artifacthub.io/packages/helm/bitnami/elasticsearch 搜索elasticsearch Charts 1234567[root@k8smaster efk]# helm repo add bitnami https://charts.bitnami.com/bitnami&quot;bitnami&quot; has been added to your repositories[root@k8smaster efk]# helm repo listNAME URL loki https://grafana.github.io/loki/chartsstable https://charts.helm.sh/stable bitnami https://charts.bitnami.com/bitnami 12345[root@k8smaster efk]# helm search repo elasticNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ... helm show values bitnami/elasticsearch &gt; es_values.yaml 有人说k8s 中的APP JDK 最好11以上， data.resources +1G = data.heapsize 这个预留一个G给进程使用，其它才给JVM使用性能更佳12345678910111213141516171819202122232425262728293031[root@k8smaster efk]# helm install myes bitnami/elasticsearch -f es_values.yaml -n logsNAME: myesLAST DEPLOYED: Tue Mar 16 10:34:09 2021NAMESPACE: logsSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:------------------------------------------------------------------------------- WARNING Elasticsearch requires some changes in the kernel of the host machine to work as expected. If those values are not set in the underlying operating system, the ES containers fail to boot with ERROR messages. More information about these requirements can be found in the links below: https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html This chart uses a privileged initContainer to change those settings in the Kernel by running: sysctl -w vm.max_map_count=262144 &amp;&amp; sysctl -w fs.file-max=65536** Please be patient while the chart is being deployed ** Elasticsearch can be accessed within the cluster on port 9200 at myes-elasticsearch-coordinating-only.logs.svc.cluster.local To access from outside the cluster execute the following commands: kubectl port-forward --namespace logs svc/myes-elasticsearch-coordinating-only 9200:9200 &amp; curl http://127.0.0.1:9200/ 部署日志采集agent12345678910111213141516[root@k8smaster efk]# helm search repo elasNAME CHART VERSION APP VERSION DESCRIPTION bitnami/elasticsearch 14.5.0 7.10.2 A highly scalable open-source full-text search ...stable/elastabot 1.2.1 1.1.0 DEPRECATED A Helm chart for Elastabot - a Slack...stable/elastalert 1.5.1 0.2.4 DEPRECATED ElastAlert is a simple framework for...stable/elastic-stack 2.0.6 6 DEPRECATED A Helm chart for ELK stable/elasticsearch 1.32.5 6.8.6 DEPRECATED Flexible and powerful open source, d...stable/elasticsearch-curator 2.2.3 5.7.6 DEPRECATED A Helm chart for Elasticsearch Curator stable/elasticsearch-exporter 3.7.1 1.1.0 DEPRECATED Elasticsearch stats exporter for Pro...stable/fluentd-elasticsearch 2.0.7 2.3.2 DEPRECATED! - A Fluentd Helm chart for Kubernet...bitnami/grafana 5.2.4 7.4.3 Grafana is an open source, feature rich metrics...bitnami/kibana 7.2.3 7.10.2 Kibana is an open source, browser based analyti...stable/apm-server 2.1.7 7.0.0 DEPRECATED The server receives data from the El...stable/dmarc2logstash 1.3.1 1.0.3 DEPRECATED Provides a POP3-polled DMARC XML rep...stable/fluentd 2.5.3 v2.4.0 DEPRECATED A Fluentd Elasticsearch Helm chart f...stable/kibana 3.2.8 6.7.0 DEPRECATED - Kibana is an open source data visu... 1234567891011121314151617181920[root@k8smaster efk]# helm show values bitnami/kibana &gt; kibana_values.yaml[root@k8smaster efk]# vim kibana_values.yaml[root@k8smaster efk]# helm install kibanaui bitnami/kibana -f kibana_values.yaml -n logsNAME: kibanauiLAST DEPLOYED: Tue Mar 16 15:21:01 2021NAMESPACE: logsSTATUS: deployedREVISION: 1NOTES:1. Get the application URL by running these commands: Get the Kibana URL and associate Kibana hostname to your cluster external IP: export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters echo &quot;Kibana URL: http://kibana.local/&quot; echo &quot;$CLUSTER_IP kibana.local&quot; | sudo tee -a /etc/hostsWARNING: Kibana is externally accessible from the cluster but the dashboard does not contain authentication mechanisms. Make sure you follow the authentication guidelines in your Elastic stack.+info https://www.elastic.co/guide/en/elastic-stack-overview/current/setting-up-authentication.htmlWARNING: Rolling tag detected (bitnami/bitnami-shell:10), please note that it is strongly recommended to avoid using rolling tags in a production environment.+info https://docs.bitnami.com/containers/how-to/understand-rolling-tags-containers/ 123456helm repo updatehelm repo list helm search repo fluent-bithelm show values fluent/fluent-bit &gt; fluent-bit-values.yamlhelm install -f fluent-bit-values.yaml -n logshelm list -n logs 总结 helm安装好处是一键安装，坏处是自定义容器内yml配置文件难度极大，如果helm charts提供的原始配置文件里没有(此处不是说修改values.yml值文件),需要重新制作charts部署","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch API","slug":"log_elasticsearch_api","date":"2019-09-15T02:22:36.000Z","updated":"2021-04-19T06:13:15.498Z","comments":true,"path":"2019/09/15/log_elasticsearch_api/","link":"","permalink":"http://www.digmyth.com/2019/09/15/log_elasticsearch_api/","excerpt":"","text":"知识点搜索引擎包括： 索引组件、搜索组件索引组件： 面向数据存储和索引构建搜索组件： 面向用户提供搜索功能以及将用户提供的搜索请求转换成可用的查询语句并通过索引完成查询过程或搜索过程其中一种著名的索引叫做倒排索引 获取数据的组件：工作在pull拉取数据模式， solr/Nutch/grub/ApetureES: 索引index、类型type、文档document、映射mapping 每个索引的分片数量： 5 每个分片也应该有副本： 1用户接口： 9200/tcp集群接口： 9300/tcp 数据类型： string、number、boolean、date、 ES中搜索的数据广义上可被分为2类：12exact: 精确查找，指在原始数据上精确查找full-text: 全文查找，判断文档在多大程度上匹配查询请求，用于评估文档与用户查询请求的相似度 为了完成full-text搜索，ES必须先分析文本并创建出倒排索引，倒排索引中的数据还需要进行“正规化”为标准格式：如单词复数改为单数，助词去掉，这样的分词加正规化的过程即为分析，分析是需要分析器analyzer工作的分析器由3个组件构成： 字符过滤器、分词器、分词过滤器ES内置的分析器有:1234standard analyzer (default analyzer)simple analyzerwhitespace analyzerlanguage analyzer 分析器不仅在创建索引时用到，在构建查询时也会用到并且前后二者的分析器必须一致，否则无法解析 API调用1234567[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/indicesgreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 1628 579.3kb 344kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 14 4.3mb 2.1mbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 3 0 32.9kb 16.4kbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 4 0 48.7kb 27.3kb 12[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/health1618472240 07:37:20 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 123456789101112131415161718[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/health?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;status&quot; : &quot;green&quot;, &quot;timed_out&quot; : false, &quot;number_of_nodes&quot; : 3, &quot;number_of_data_nodes&quot; : 3, &quot;active_primary_shards&quot; : 7, &quot;active_shards&quot; : 14, &quot;relocating_shards&quot; : 0, &quot;initializing_shards&quot; : 0, &quot;unassigned_shards&quot; : 0, &quot;delayed_unassigned_shards&quot; : 0, &quot;number_of_pending_tasks&quot; : 0, &quot;number_of_in_flight_fetch&quot; : 0, &quot;task_max_waiting_in_queue_millis&quot; : 0, &quot;active_shards_percent_as_number&quot; : 100.0&#125; 123456[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/master_node?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster&quot;, &quot;cluster_uuid&quot; : &quot;exgsV0fDSCu826nXkN9w8A&quot;, &quot;master_node&quot; : &quot;WIm1WA75QhSegglRpCn4-Q&quot;&#125; 123[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/state/nodes?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/stats?pretty[root@k8smaster ~]# curl http://192.168.1.40:9200/_nodes/stats?pretty 1234[root@k8smaster ~]# curl http://192.168.1.40:9200/_cluster/pending_tasks?pretty&#123; &quot;tasks&quot; : [ ]&#125; 数据提交1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/1?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 0, &quot;_primary_term&quot; : 1&#125; 1234567891011121314151617181920[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X PUT http://192.168.1.40:9200/students/class1/2?pretty -d &apos;&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, # 索引，没有会自动创建 &quot;_type&quot; : &quot;class1&quot;, # 类型，没有会自动创建 &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 2, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 1&#125; 获取文档数据123456789101112[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/1&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:0,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing&quot;,&quot;last_name&quot;: &quot;Huang&quot;&#125;&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2&#123;&quot;_index&quot;:&quot;students&quot;,&quot;_type&quot;:&quot;class1&quot;,&quot;_id&quot;:&quot;2&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:1,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:&#123;&quot;first_name&quot;: &quot;jing2&quot;,&quot;last_name&quot;: &quot;Huang2&quot;&#125; 更新文档可以PUT方法覆盖原有文档，也可以局部更新用POST方法调用_update接口1234567891011121314151617181920212223242526272829303132[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X POST http://192.168.1.40:9200/students/class1/2/_update?pretty -d &apos;&#123;&quot;doc&quot;: &#123;&quot;last_name&quot;: &quot;Huang2_222&quot;&#125;&#125;&apos;&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;result&quot; : &quot;noop&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 0, &quot;successful&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1&#125;[root@node01 ~]# curl -X GET http://192.168.1.40:9200/students/class1/2?pretty # 查看更新&#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 2, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1, &quot;found&quot; : true, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2_222&quot; &#125;&#125; 删除文档1[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/class1/2 查看索引123456789[root@node01 ~]# curl -X GET http://192.168.1.40:9200/_cat/indices?vhealth status index uuid pri rep docs.count docs.deleted store.size pri.store.sizegreen open .kibana_task_manager_7.12.0_001 1U4c04_oR--NoqAssK-GhQ 1 1 9 431 1.3mb 630.3kbgreen open .apm-custom-link pxk-mw7-TrSbOOkq-YtGDA 1 1 0 0 416b 208bgreen open .apm-agent-configuration qXAmtdt-Sxme3_b4dAXDrA 1 1 0 0 416b 208bgreen open students em-XgwfsSc--wFnCcLC7jg 1 1 2 0 21.5kb 8.6kbgreen open .kibana-event-log-7.12.0-000001 x2AirAinS8qVwxFEVEyaVQ 1 1 4 0 43.7kb 21.8kbgreen open .kibana_7.12.0_001 dnQirVu_SFukMa2QEvx5ig 1 1 45 4 4.2mb 2.1mbgreen open .tasks JpRquzGeQLWuWLBhT6XTHQ 1 1 6 0 75.8kb 40.9kb 删除索引12[root@node01 ~]# curl -X DELETE http://192.168.1.40:9200/students/&#123;&quot;acknowledged&quot;:true&#125; 以上是基于query DSL language,用于实现诸多类型查询向ES发起查询请求的方式有2种：1 通过RestFul request API查询，也称为query string2 通过发送REST request body 进行查询 query string方式查询12345678910111213141516171819202122232425262728293031323334353637383940[root@node01 ~]# curl http://192.168.1.40:9200/students/_search?pretty&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 2, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing2&quot;, &quot;last_name&quot; : &quot;Huang2&quot; &#125; &#125; ] &#125;&#125; REST request body 方式查询123[root@node01 ~]# curl -H &quot;Content-Type: application/json&quot; -X GET http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&apos; 多索引，多类型查询,一般格式为：http://IP:port/&lt;indices1&gt;,&lt;indices2&gt;/&lt;type1&gt;,&lt;type2&gt;/_search?pretty12curl http://192.168.1.40:9200/_search?pretty # 所有索引查询curl http://192.168.1.40:9200/students1,students2/_search?pretty mappping/analysisES对每一个文档会取得其所有域的所有值，生成一个名为”_all”的域，执行查询时，如果在query_string未指定查询的域，则在_all域上执行查询操作 不指定域查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 指定域精确查询123456789101112131415161718192021222324252627282930[root@node01 ~]# curl &apos;http://192.168.1.40:9200/students/_search?q=first_name:&quot;jing&quot;&amp;pretty&apos;&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 查看指定类型的mapping123456789101112131415161718192021222324252627[root@node01 ~]# curl http://192.168.1.40:9200/students/_mapping?pretty&#123; &quot;students&quot; : &#123; &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;first_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;last_name&quot; : &#123; # 字段 &quot;type&quot; : &quot;text&quot;, # 类型为文本 &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125; &#125; &#125; &#125;&#125; request Body 请求查询 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;term&quot;: &#123;&quot;first_name&quot;:&quot;jing&quot;&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.6931471, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.6931471, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435[root@node01 ~]# curl -X GET -H &quot;Content-Type: application/json&quot; http://192.168.1.40:9200/students/_search?pretty -d &apos;&#123;&quot;query&quot;: &#123; &quot;terms&quot;: &#123;&quot;first_name&quot;:[&quot;jing&quot;,&quot;xx&quot;,&quot;oo&quot;]&#125; &#125;&#125;&apos;&#123; &quot;took&quot; : 3, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;students&quot;, &quot;_type&quot; : &quot;class1&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;first_name&quot; : &quot;jing&quot;, &quot;last_name&quot; : &quot;Huang&quot; &#125; &#125; ] &#125;&#125; 总结慢慢实践。。。","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"elasticsearch基本使用","slug":"log_elasticsearch-基本使用","date":"2019-08-15T02:42:36.000Z","updated":"2021-04-15T07:13:28.047Z","comments":true,"path":"2019/08/15/log_elasticsearch-基本使用/","link":"","permalink":"http://www.digmyth.com/2019/08/15/log_elasticsearch-基本使用/","excerpt":"","text":"介绍官网： https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-elastic-stack.html elasticsearch: 借住于LuceneAPI 重新封装实现的搜索组件，增加更强大的能力，将Lucene提供的索引组建成shar形式，分片后分布于各节点上从而构建成分布式时时查询组件。 是一个基Lucene实现的开源、分布式、RestFul的全文本搜索引擎，此外，它还是一个分布式实时文档存储，其中每个文档的每个field均是被索引的数据，且可被搜索，也是一个带实时分析功能的分布式搜索引擎，能够扩展至数以百计的节点实时处理PB级的数据 概念 文档只有被索引后才能被索引，这个文档就放在一个叫索引的文件当中。 在Lucene中每一项相当于MYsql表中一行数据，多个项在一起就组成了索引，但是每个索引会尽量存储同类型数据 大索引的多个片分shard散到多个物理节点上去，可成完成读写负载均衡，分片节点挂了所有数据将丢失，但是分布式不应该这样，它还要通过主从副本实现分布解决单点故障问题。 写操作会自动分配到主分片完成写操作，副本分片只有读权限 索引： 文档的集合，类似于表，索引名只能是小写字母 类型(type): 类型是索引内部的逻辑分区，其意义完全取决于用户需求，一个索引内部可以定义一个或多个类型 拥有相同域的文档的预定义，类似于表的表结构，文档是schema free模式自由, 建议一个索引中只存一个类型的文档数据 文档： 是Lucene搜索和索引的原子单位，包含了一个或多个域，是域容器，基于json格式，每个域的组成部份：一个名字和一个或多个值，拥有多个值的域通常称为多值域 映射 (maping): 定义如何切词，指明一个文档中的数据在被存储之前的分析过程该如何执行，原始内容存储为文档之前事先需要分析，映射就 是定义此分析机制该如何实现 例如; 切词、过滤掉某些词、域中内容排序 elasticsearch集群组件： 每一个物理节点必属于且只属于某ES集群 NODE： 运行了单个ES实例的主机即为节点，用于存储数据部份分片、参与集群索引及搜索操作、节点标识靠节点名（默认会生成字串，可自定义） shard分片: 把一个Luence大索引切分为底层物理数据，完成分割存储机制，或说将索引切割成为物理存储组件，但每一个shard都是一个独立且完整的索引，创建索引时，ES默认创建5个副本 shard有2种类型： primary shard/Replicas shard Primary shard 如何切割定义好后不可更改，但是副本数是可以动态更改的 ES工作过程： 通过多播(default)或单播方式工作在9300/TCP查找同一集群的其它节点，并与之建立通信 集群中的所有节点会选举一个主节点负责管理整个集群状态，以及在集群范围内决定各shard分布方式，用户角度没有主从节点，各节点都可接收请求 安装elasticsearch强制要求工作在普通用户模式下，不能root 直接./bin/elasticsearch启动服务，好像rpm安装没有此限制同时启动也有很多限制，否则启动失败 修改系统参数达到启动服务要求1234561 普通用户模式下安装2 安装jdk,要求1.8以上，有人声称1.11以上更佳3 打开文件数限制，包括系统级/etc/security/limits.conf 和ulimit -n 65535用户级4 打开内核参数级限制,临时设置如下命令sysctl -w vm.max_map_count=655350sysctl -w fs.file-max=65536 配置文件修改123456789cat /home/stack/elasticsearch-7.11.2/config/elasticsearch.yml | grep -v ^# | grep -v ^$cluster.name: wxq-esnode.name: node-es3bootstrap.memory_lock: falsenetwork.host: 192.168.1.30discovery.seed_hosts: [&quot;192.168.1.30&quot;,] # 集群模式相应追加主机cluster.initial_master_nodes: [&quot;192.168.1.30&quot;,]http.cors.enabled: true # 方便plugins head插件时跨站请求成功http.cors.allow-origin: &quot;*&quot; head 插件安装安装好后直接访问 http://IP:9100/ 连接地址填入http://es-server:9200/正确1234git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start 1./bin/elasticsearch # 直接启动即可 集群状态 123456green 可用状态red: 不可用yellow: 修复状态ES参与集群事务的端口tcp/9300ES接收请求的端口tcp/9200 API接口使用123456确保集群正常； API接口9200Restful接口API： 4类1 检查集群节点索引健康与否，以及获取其相应状态2 管理集群节点索引及元数据3 执行CRUD操作4 执行高级操作：例如paging 、filtering 12345678910111213所有_cat支持的API操作[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat=^.^=/_cat/allocation/_cat/shards/_cat/shards/&#123;index&#125;/_cat/master/_cat/nodes/_cat/tasks/_cat/indices/_cat/indices/&#123;index&#125;/_cat/segments。。。 v=verbose显示详细信息1234567891011http://192.168.1.30:9200/_cat/nodeshttp://192.168.1.30:9200/_cat/nodes?vhttp://192.168.1.30:9200/_cat/masterhttp://192.168.1.30:9200/_cat/master?v例如：[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?vip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name172.21.0.5 36 98 14 0.22 0.60 1.09 cdfhilmrstw - es02172.21.0.3 28 98 14 0.22 0.60 1.09 cdfhilmrstw * es01172.21.0.4 61 98 14 0.22 0.60 1.09 cdfhilmrstw - es03 help查看某接口支持查询的详细字段12345678[root@k8smaster ~]# curl http://192.168.1.40:9200/_cat/nodes?helpid | id,nodeId | unique node idpid | p | process idip | i | ip addressport | po | bound transport porthttp_address | http | bound http addressversion | v | es version。。。 查询某接口指定字段1234# curl http://192.168.1.40:9200/_cat/nodes?h=id,pid,ip,port,http_address,version,uptimet_iA 6 172.21.0.5 9300 172.21.0.5:9200 7.12.0 56.8mWIm1 6 172.21.0.3 9300 172.21.0.3:9200 7.12.0 56.8m3bzJ 6 172.21.0.4 9300 172.21.0.4:9200 7.12.0 56.8m health的green状态123# curl http://192.168.1.40:9200/_cat/health?vepoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1618470428 07:07:08 es-docker-cluster green 3 3 14 7 0 0 0 0 - 100.0% 总结 带着概念参照官网安装还是挺简单的，练习接口可以了解学习集群及ES的概念","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"mariadb-恢复数据","slug":"mariadb-恢复数据","date":"2019-07-25T01:41:54.000Z","updated":"2020-07-08T12:30:31.812Z","comments":true,"path":"2019/07/25/mariadb-恢复数据/","link":"","permalink":"http://www.digmyth.com/2019/07/25/mariadb-恢复数据/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"搜索引擎与Lucene基础","slug":"log_lucene-认识","date":"2019-06-15T02:42:36.000Z","updated":"2021-03-17T09:47:30.627Z","comments":true,"path":"2019/06/15/log_lucene-认识/","link":"","permalink":"http://www.digmyth.com/2019/06/15/log_lucene-认识/","excerpt":"","text":"简单常识：1千万条日志记录存储大小为2G1亿条日志记录 5G8亿条日志记录 40G 程序： 算法+数据结构存储+前端访问接口 开发全文搜索程序： 算法+支持这种场景的特定存储结构海量日志分析： 搜索引擎搜索引擎： 存储时需要有索引链–&gt; 搜索组件（有请求接口有请求返回或展示UI） 收集日志 –&gt; 对收集过来日志检索原始内容–&gt; 构建文档 –&gt;文档分析或切词 –&gt; 建立索引链（创建倒排索引）而SQL的索引： 正排索引 文档数据库： Mongodb、elasticsearch(每一行中每字段文档数据格式各不一样) 著名开源搜索开发库或底层搜索引擎: Lucene添加收集文档，搜索引擎，提供上层搜索接口： Elasticsearch 包含一个或多个域的容器，文档就是由Field、Value组成Lucene没有全局模式：no schema,没有预先定义字段及类型域有很多选项： 索引选项、存储选项、每个域向量使用选项索引选项用于通过倒排索来控制文本是否可被搜索，成为索引中的项才能被搜索： index: ANALYZIED 需要分析或分词并单独构建索引项 index: not_ANALYZIED 不分析或不分词，把整个内容当一个索引项 index: analyzied norms 类似index: ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.Not_analyzied_norms 类似not_ANALYZIED，不会在存储中存储加权信息(Norms:加权基准) index.NO : 不对此域的值进行索引，因此不能被搜索存储选项: 是否需要存储域的真实值 title: This is a Notebook. –&gt; this notebook 有效信息即可 store.YES: 存储真实值 store.NO: 不存储真实值 (每个项或每个域)向量选项用于在搜索期间控制该文档所有的唯一项都能完全从文档域中检索时使用 文档和域的加权操作： 通过改变某一个文档相对于某一个词的加权因子，对值改大改小可以决定它对用户的重要程序，如竟价排名 加权计算标准：方案很多 搜索：查询Lucene索引时，返回一个有序的scoreDoc对象：查询时Lucene会为每个文档计算出score,API: IndexSearcher: 搜索索引入口 Query及其子类：构建搜索查询语句 QueryParser: 搜索分析后返回结果 TopDocs 某查询分值top10 Lucene的多样化查询： IndexSearcher中的search方法，完成搜索时传入Query实例参数进行，就是告之到底要搜索什么，你键入的搜索关键词分析以后作为Query对象，传递给IndexSearch方法 常用几种查询方法123456789101112131415161718TermQuery： 对索引中特定项进行搜索，Term是索引中的最小索引片段，每个Term包含一个域名和文本值title: This is a Desktitle: Tis is a table索引构建方式： This： （1） (2) Desk： (1) table: (2) TermRangeQuery:索引中每个Term对象上的值都会按照字典编排顺序进行排序，并允许在Lucene TermRangeQuery 提供的范围内进行搜索 大白话就是TermQuery指定一个域中搜索，TermRangeQuery可以指定多个域内搜索 NumericRangeQuery： 只是数值范围内搜索 PrefixQuery： 用于搜索以指定字符串开头的域 BooleanQuery：用于实现组合查询，与或非 and 、or、 not PhraseQuery： 能够跟据位置信息定义文档 WildcardQuery：通配符 FuzzyQuery： 模糊查询 levenshtein处理 总结 Lucene是底层搜索引擎或搜索开发库，基于Lucene库开发有了Elasticsearch存储、搜索引擎系统","categories":[{"name":"日志系统","slug":"日志系统","permalink":"http://www.digmyth.com/categories/日志系统/"}],"tags":[]},{"title":"kubernetes-dashboard-TLS坑","slug":"Kubernetes-dashboard-TLS坑","date":"2019-06-11T12:51:41.000Z","updated":"2019-06-15T15:11:45.437Z","comments":true,"path":"2019/06/11/Kubernetes-dashboard-TLS坑/","link":"","permalink":"http://www.digmyth.com/2019/06/11/Kubernetes-dashboard-TLS坑/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"python-celery-Flask","slug":"python-Celery-Flask","date":"2019-02-10T09:03:01.000Z","updated":"2019-02-21T10:31:24.286Z","comments":true,"path":"2019/02/10/python-Celery-Flask/","link":"","permalink":"http://www.digmyth.com/2019/02/10/python-Celery-Flask/","excerpt":"","text":"一、基本使用Celery是由Python开发的一个简单、灵活、可靠的处理大量任务的分发系统，可以实时处理任务，也可以定时异步处理任务。每次分发任务后得到一个ID，然后根据这个ID查询任务执行情况。 并且celery需要rabbitMQ、Redis等充当broker来进行消息的接收。 安装1pip3 install celery eventlet # windows系统需要eventlet模块 下面我们来快速上手celery编辑s1.py1234567891011#!/usr/bin/env python3from celery import Celerycel = Celery(&apos;xxx&apos;, broker=&quot;redis://192.168.1.40&quot;, backend=&apos;redis://192.168.1.40&apos;)@cel.taskdef f1(x,y): return x+y 然后把s1这个work工作起来，进入命令终端,如果在linux系统，不用添加参数-P eventlet1E:\\pro\\xxx_dir&gt; celery worker -A s1 -l info -P eventlet 编辑s2.py1234567891011121314151617#!/usr/bin/env python3import datetimefrom s1 import f1# 立即执行result = f1.delay(4,6)print(result.id)# 定时执行ctime = datetime.datetime.now()# ctime = datetime.datetime(year=2019,month=2,day=21,hour=14,minute=8)utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp())s10 = datetime.timedelta(seconds=10)ctime_x = utc_time + s10result = f1.apply_async(args=[1,3],eta=ctime_x)print(result.id) 编辑s3.py12345678910111213141516171819202122232425#!/usr/bin/env python3from celery.result import AsyncResultfrom demo1.s1 import celasync = AsyncResult(id=&quot;f43bce52-9503-475e-9d19-4a46ed910a8e&quot;,app=cel)if async.successful(): ret = async.get() # 获取值 #async.forget() # 删除值 print(ret)elif async.failed(): print(&apos;执行失败&apos;)elif async.status == &apos;PENDING&apos;: print(&apos;任务等待中被执行&apos;)elif async.status == &apos;RETRY&apos;: print(&apos;任务异常后正在重试&apos;)elif async.status == &apos;STARTED&apos;: print(&apos;任务已经开始被执行&apos;)else: print(&quot;任务执行失败&quot;)async.revoke() # 取消一个任务，当一个任务正在执行，不能取消async.revoke(terminate=True) # 终止一个任务，当一个任务正在执行，可以被终止 二、多目录结构经过上面快速上手的学习，了解了celery的基本使用，那么重组一下代，形成项目中多目录结构看看相互之间如何调用？ 创建一个celery_tasks的目录，里面一般保存2类文件，其中一个文件名称必须为celery,另一类就是定义task任务的文件，可以有多个。 定义celery_tasks/celery.py文件,如果有多个task任务文件，可以用includ列表包含进来123456789101112131415#!/usr/bin/env python3from celery import Celery# from celery.schedules import crontabcel = Celery(&apos;xxxxxx&apos;, broker=&apos;redis://192.168.1.40:6379&apos;, backend=&apos;redis://192.168.1.40:6379&apos;, include=[&apos;celery_tasks.task1&apos;,) #include=[&apos;celery_tasks.task1&apos;,&apos;celery_tasks.task2&apos;])# 时区cel.conf.timezone = &apos;Asia/Shanghai&apos;# 是否使用UTCcel.conf.enable_utc = False 在多目录结构中，跑celery work时不用指定到文件，指定目录即可1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 定义celery_tasks/task1.py1234567#!/usr/bin/env python3from .celery import cel@cel.taskdef f1(x,y): return x+y 有了celery.py文件和task任务文件，我们就可以在任意地方调用任务了。 比如定义test/exec1.py文件来执行任务123456#!/usr/bin/env python3from celery_tasks.task1 import f1result = f1.delay(4,6)print(result.id) 定义test/exec2.py文件来获取任务执行结果,需要提供任务ID1234567891011#!/usr/bin/env python3from celery_tasks.celery import celfrom celery.result import AsyncResultasync = AsyncResult(id=&quot;be6bb021-da48-46a9-b1bc-94b987f7c8a7&quot;,app=cel)if async.successful(): print(async.get())else: print(&quot;任务执行失败&quot;) 三、Flask中的例用有了上面celery的认识，我们来简单写点代码，看一下在Flask框架中celery是如何使用的？ 定义Flask项目启动文件app.py 写线上代码时是要把任务保存在数据库中的，这里仅作示例就保存在了HISTORY全局变量中了.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/env python3from flask import Flask,request,render_template,redirectfrom celery_tasks.task2 import deployapp = Flask(__name__)HISTORY = []@app.route(&apos;/index&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: return render_template(&apos;index.html&apos;,history=HISTORY)@app.route(&apos;/publish&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def publish(): if request.method == &quot;GET&quot;: return render_template(&apos;publish.html&apos;) else: version = request.form.get(&quot;version&quot;) hosts = request.form.getlist(&quot;hosts&quot;) print(version,hosts) import datetime ctime = datetime.datetime.now() utc_time = datetime.datetime.utcfromtimestamp(ctime.timestamp()) ctime_10 = utc_time + datetime.timedelta(seconds=10) result = deploy.apply_async(args=[version,hosts],eta=ctime_10) HISTORY.append(&#123;&quot;version&quot;:version,&quot;hosts&quot;:hosts,&quot;task_id&quot;:result.id&#125;) print(HISTORY) return redirect(&quot;/index&quot;)from celery.result import AsyncResultfrom celery_tasks.celery import cel@app.route(&apos;/check_result&apos;,methods=[&quot;GET&quot;,&quot;POST&quot;])def check_result(): task_id = request.args.get(&quot;task_id&quot;) async = AsyncResult(id=task_id,app=cel) if async.successful(): result = async.get() print(result) # result.forget() # 将结果删除 return &quot;执行成功&quot; elif async.failed(): return &apos;执行失败&apos; elif async.status == &apos;PENDING&apos;: return &apos;任务等待中被执行&apos; elif async.status == &apos;RETRY&apos;: return &apos;任务异常后正在重试&apos; elif async.status == &apos;STARTED&apos;: return &apos;任务已经开始被执行&apos; else: return &quot;unkown status&quot;@app.route(&apos;/cancel&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def cancel(): task_id = request.args.get(&quot;task_id&quot;) async =AsyncResult(id=task_id,app=cel) async.revoke(terminate=True) for i in HISTORY: if task_id in i.values(): HISTORY.remove(i) return redirect(&quot;/index&quot;)if __name__ == &apos;__main__&apos;: app.run() 定义其中用到的templates/index.html123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;发布系统&lt;/h1&gt;&lt;a href=&quot;/publish&quot;&gt;添加发布任务&lt;/a&gt;&lt;table&gt; &#123;% for row in history %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.task_id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.version &#125;&#125;&lt;/td&gt; &#123;% for host in row.hosts %&#125; &lt;td&gt; &lt;span&gt;&#123;&#123; host &#125;&#125;&lt;/span&gt; &lt;/td&gt; &#123;% endfor %&#125; &lt;td&gt;&lt;a href=&quot;/check_result?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;查看&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/cancel?task_id=&#123;&#123; row.task_id &#125;&#125;&quot;&gt;取消&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 定义其中用到的templates/publish.html1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;version&quot; placeholder=&quot;请输入要发布的版本&quot;&gt;&lt;/p&gt; &lt;p&gt; &lt;select name=&quot;hosts&quot; multiple=&quot;multiple&quot;&gt; &lt;option value=&quot;c1.com&quot;&gt;c1.com&lt;/option&gt; &lt;option value=&quot;c2.com&quot;&gt;c2.com&lt;/option&gt; &lt;option value=&quot;c3.com&quot;&gt;c3.com&lt;/option&gt; &lt;/select&gt; &lt;/p&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 定义其中的celery_tasks.task2.py文件,这里的deploy是真正定义任务的地方.12345678#!/usr/bin/env python3from .celery import cel@cel.taskdef deploy(version,hosts): print(version, hosts) # 定义想要执行的任务代码 return &apos;deploy ok&apos; 同样别望了先把work跑起来,再启动Flask1E:\\pro\\xxx_dir&gt; celery worker -A celery_tasks -l info -P eventlet 四、总结还需要多写代码在项目中总结celery…","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"ansible callback 重写","slug":"ansible-Callback-02","date":"2019-01-12T12:39:12.000Z","updated":"2019-01-13T13:01:21.969Z","comments":true,"path":"2019/01/12/ansible-Callback-02/","link":"","permalink":"http://www.digmyth.com/2019/01/12/ansible-Callback-02/","excerpt":"","text":"1.1 adhoc callback重写adhoc-callback.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象#^#Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)#^# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)#^# 重写CallbackBase父类class AdhocResultsCollector(CallbackBase): def __init__(self, *args, **kwargs): super(AdhocResultsCollector, self).__init__(*args, **kwargs) self.host_ok = &#123;&#125; self.host_unreachable = &#123;&#125; self.host_failed = &#123;&#125; def v2_runner_on_unreachable(self, result): self.host_unreachable[result._host.get_name()] = result def v2_runner_on_ok(self, result, *args, **kwargs): self.host_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.host_failed[result._host.get_name()] = resultcallback = AdhocResultsCollector()passwords = dict()tqm = TaskQueueManager(inventory=myinven, variable_manager=varmanager, loader=loader,options=options, passwords=passwords, stdout_callback=callback )result_status_code = tqm.run(play)print(callback.host_ok.items())result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;)for host,result in callback.host_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.host_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.host_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultprint(json.dumps(result_raw,indent=4)) 1.2 playbook callback重写写入示例playbook文件site.yml12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 编写play_book.py 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;, &apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;, &apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True, )# 重写CallbackBase父类class PlayBookResultsCollector(CallbackBase): CALLBACK_VERSION = 2.0 def __init__(self, *args, **kwargs): super(PlayBookResultsCollector, self).__init__(*args, **kwargs) self.task_ok = &#123;&#125; self.task_skipped = &#123;&#125; self.task_failed = &#123;&#125; self.task_status = &#123;&#125; self.task_unreachable = &#123;&#125; def v2_runner_on_ok(self, result, *args, **kwargs): self.task_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.task_failed[result._host.get_name()] = result def v2_runner_on_unreachable(self, result): self.task_unreachable[result._host.get_name()] = result def v2_runner_on_skipped(self, result): self.task_ok[result._host.get_name()] = result def v2_playbook_on_stats(self, stats): hosts = sorted(stats.processed.keys()) for h in hosts: t = stats.summarize(h) self.task_status[h] = &#123; &quot;ok&quot;:t[&apos;ok&apos;], &quot;changed&quot; : t[&apos;changed&apos;], &quot;unreachable&quot;:t[&apos;unreachable&apos;], &quot;skipped&quot;:t[&apos;skipped&apos;], &quot;failed&quot;:t[&apos;failures&apos;] &#125;# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords )# 把重写的CallbackBase父类加载进playbookcallback = PlayBookResultsCollector()playbook._tqm._stdout_callback = callbackplaybook.run()result_raw = dict( success = &#123;&#125;, failed = &#123;&#125;, unreachable = &#123;&#125;, skipped = &#123;&#125;, status = &#123;&#125;,)for host,result in callback.task_ok.items(): result_raw[&apos;success&apos;][host] = result._resultfor host,result in callback.task_failed.items(): result_raw[&apos;failed&apos;][host] = result._resultfor host,result in callback.task_unreachable.items(): result_raw[&apos;unreachable&apos;][host] = result._resultfor host,result in callback.task_skipped.items(): result_raw[&apos;skipped&apos;][host] = result._resultfor host, result in callback.task_status.items(): result_raw[&apos;status&apos;][host] = resultprint(json.dumps(result_raw,indent=4)) 执行示例python3 play_book.py 返回类似如下结果12345678910111213141516171819202122232425262728293031323334&#123; &quot;success&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;changed&quot;: true, &quot;end&quot;: &quot;2019-01-14 04:50:06.190607&quot;, &quot;stdout&quot;: &quot;&quot;, &quot;cmd&quot;: &quot;touch /tmp/site.txt&quot;, &quot;rc&quot;: 0, &quot;start&quot;: &quot;2019-01-14 04:50:06.186466&quot;, &quot;stderr&quot;: &quot;&quot;, &quot;delta&quot;: &quot;0:00:00.004141&quot;, &quot;invocation&quot;: &#123; &quot;module_args&quot;: &#123; &quot;creates&quot;: null, &quot;executable&quot;: null, &quot;_uses_shell&quot;: true, ... 略 &#125; &#125;, &#125; &#125;, &quot;failed&quot;: &#123;&#125;, &quot;unreachable&quot;: &#123;&#125;, &quot;skipped&quot;: &#123;&#125;, &quot;status&quot;: &#123; &quot;192.168.1.6&quot;: &#123; &quot;ok&quot;: 2, &quot;changed&quot;: 1, &quot;unreachable&quot;: 0, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 &#125; &#125;&#125; 总结 adhoc重写方法如host_ok,host_failed,host_unreachable playbook重写方法如task_ok,task_failed,task_unreachable,task_skipped,task_status,task_changed 返回如callback.task_ok.items(),其中键为host,值为result对象，result._result得到一个字典类型的详细结果 &lt;&lt; 完结 &gt;&gt;","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"python3下ansible api学习","slug":"ansible-api-01","date":"2019-01-10T12:39:12.000Z","updated":"2019-01-13T12:36:03.633Z","comments":true,"path":"2019/01/10/ansible-api-01/","link":"","permalink":"http://www.digmyth.com/2019/01/10/ansible-api-01/","excerpt":"","text":"1.1 ansible api基础环境说明： python version: python3 ansible version: 2.7.5 inventory file: dir1/inventory/multinode 清单文件定义： dir1/inventory/multinode12345678910[control]192.168.1.6 var1=&quot;ssss&quot; ansible_ssh_user=root ansible_ssh_pass=&apos;123&apos;[nova:children]control[cinder:children]control[glance:children] 一个单一文件进行简单的接口学习: dir1/f1.py1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/env python3import os,sys,jsonfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.plugins.callback import CallbackBaseimport ansible.constants as CBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&quot;dir1/inventory/multinode&quot;)loader = DataLoader()inven = InventoryManager(loader=loader,sources=[source,])# print(inven.get_hosts())inven.add_group(&apos;test_group2&apos;)print(inven.get_groups_dict())inven.add_host(host=&apos;192.168.1.7&apos;,port=22,group=&apos;test_group2&apos;)print(inven.get_groups_dict())host = inven.get_host(hostname=&apos;192.168.1.6&apos;)variableman = VariableManager(loader=loader,inventory=inven)vars = variableman.get_vars(host=host)# print(json.dumps(vars,indent=4))variableman.set_host_variable(host=host,varname=&apos;k1&apos;,value=&apos;v1&apos;) # 局部的x = variableman.get_vars(host=host)print(x[&apos;k1&apos;])print(variableman.__dict__)variableman._extra_vars = &#123;&quot;k2&quot;: &quot;v2&quot;&#125; # 添加全局变量x = variableman.get_vars() # 不传host说明是全局的 执行测试1python3 dir1/f1.py # 输出调用信息对照接口就知道只些方法是干什么的了 1.2 adhoc模式示例学习编辑dir1/adhoc.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块play_data = dict( name=&quot;Ansible adhoc example&quot;, hosts=&apos;192.168.1.6,&apos;, gather_facts=&apos;no&apos;, tasks=[ dict(action=dict(module=&apos;shell&apos;, args=&quot;touch /tmp/sss.txt&quot;)), # dict(action=dict(module=&apos;debug&apos;, args=dict(msg=&quot;&#123;&#123; shell_out.stdout &#125;&#125;&quot;))), ],)play = Play().load(data=play_data,loader=loader,variable_manager=varmanager)passwords = &#123;&#125;tqm = TaskQueueManager(inventory=myinven,variable_manager=varmanager, loader=loader,options=options,passwords=passwords)result = tqm.run(play) 执行测试1python3 dir1/adhoc.py 输出信息和命令行ansible直接模块运行一样，任务正常执行 1.3 playbook 示例学习编辑dir1/play_book.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/env python3import os,sys,jsonimport ansible.constants as Cfrom ansible.parsing.dataloader import DataLoaderfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.manager import InventoryManagerfrom ansible.playbook import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.host import Host,Groupfrom collections import namedtupleBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))source = os.path.join(BaseDir,&apos;dir1/inventory/multinode&apos;)loader = DataLoader() # 实例化loader对象myinven = InventoryManager(loader=loader,sources=[source,]) # 实例化inventory对象print(myinven.get_groups_dict())varmanager = VariableManager(loader=loader,inventory=myinven) # 实例化VariableManager对象# Options 选项Options = namedtuple(&apos;Options&apos;,[ &apos;connection&apos;,&apos;module_path&apos;, &apos;forks&apos;, &apos;timeout&apos;, &apos;remote_user&apos;, &apos;ask_pass&apos;, &apos;private_key_file&apos;, &apos;ssh_common_args&apos;, &apos;ssh_extra_args&apos;, &apos;sftp_extra_args&apos;, &apos;scp_extra_args&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;ask_value_pass&apos;, &apos;verbosity&apos;, &apos;check&apos;, &apos;listhosts&apos;, &apos;listtasks&apos;, &apos;listtags&apos;, &apos;syntax&apos;,&apos;diff&apos;])options = Options(connection=&apos;smart&apos;, module_path=None, forks=100, timeout=10, remote_user=&apos;root&apos;, ask_pass=False, private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None, become_user=&apos;root&apos;, ask_value_pass=False, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True)# 执行对象和模块passwords = &#123;&#125;#传入playbooks, inventory, variable_manager, loader, options, passwordsplaybook = PlaybookExecutor(playbooks=[&apos;site.yml&apos;,], inventory=myinven, variable_manager=varmanager, loader=loader, options=options, passwords=passwords)playbook.run() 用到的site.yml文件示例如下12345678---- hosts: 192.168.1.6 remote_user: root vars: touch_file: &quot;site.txt&quot; tasks: - name: touch file shell: &quot;touch /tmp/&#123;&#123; touch_file &#125;&#125;&quot; 执行测试1python3 play_book.py 输出信息和ansible-playbook命令行输出一样，任务正常执行","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.digmyth.com/categories/ansible/"}],"tags":[]},{"title":"veth-pair+namespace","slug":"veth-pair+namespace","date":"2019-01-10T01:41:54.000Z","updated":"2021-01-21T09:00:43.702Z","comments":true,"path":"2019/01/10/veth-pair+namespace/","link":"","permalink":"http://www.digmyth.com/2019/01/10/veth-pair+namespace/","excerpt":"","text":"查找对端veth pair12345678root@k8s-m:/data/dashboard# cat /sys/class/net/cali3b4bae3cec1/iflink 4root@k8s-m:/data/dashboard# ethtool -S cali3b4bae3cec1NIC statistics: peer_ifindex: 4 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0 namespace场景参考如下1234567891011121314# ip link add veth-a type veth peer name veth-b # 生成veth pair对，相当于一根网线# ip netns add ns1 # 创建名称空间# ip link set veth-a netns ns1 #将网线A端加入名称容间root@k8s-m:~# ip netns exec ns1 ethtool -S veth-a # veth-a的对端编号16NIC statistics: peer_ifindex: 16 rx_queue_0_xdp_packets: 0 rx_queue_0_xdp_bytes: 0 rx_queue_0_xdp_drops: 0root@k8s-m:~# ip netns exec ns1 cat /sys/class/net/veth-a/iflink # veth-a的对端编号1616# ip a # 查看编号16的设备16: veth-b@if17: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether be:ec:d2:fc:64:3f brd ff:ff:ff:ff:ff:ff link-netns ns1 利用ovs实现跨主机通信的简单应用12345678ovs-vsctl add-br ovs0ovs-vsctl add-port ovs0 eth0物理网卡加进ovs可能会断网，解决办法：# ifconfig ovs0 172.16.10.10/24# ifconfig eth0 0.0.0.0.0# route del default# route add default gw 172.16.10.254 dev ovs0# ifconfig ovs0 hw ether $eth0_mac 注意： 完事后放在开机启动项，不然开机失效连不上机","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"OpenVSwitch","slug":"openvswitch","date":"2019-01-08T01:41:54.000Z","updated":"2019-05-26T15:16:23.168Z","comments":true,"path":"2019/01/08/openvswitch/","link":"","permalink":"http://www.digmyth.com/2019/01/08/openvswitch/","excerpt":"","text":"交换机端口查看12345# ovs-vsctl show# ovs-ofctl show# ovs-ofctl show br-int# ovs-ofctl show br-tun# virsh domiflist instance-00000017 open flow流表查看12345678# ovs-ofctl dump-flows br-int# ovs-ofctl dump-flows br-tun# ip netns exec qrouter-c266eb04-0be8-448f-986f-6eef3a9bcdce ifconfig# dpkg-query -S /sbin/brctl# apt-get install bridge-utils# brctl show 添加br-ex网桥：123456# ovs-vsctl add-br br-ex桥加载到物理网口：# ovs-vsctl add-port br-ex eth0添加到不同vlan与端口模式# ovs-vsctl add-port br-ex eth1 tag=100 //设置为access端口# ovs-vsctl add-port br-ex eth2 trunk=200 //设置为trunk端口,允许vlan200通过，默认允许所有vlan直接转发 列出所有桥：123ovs-vsctl list-brovs-vsctl list-ports br-intovs-vsctl port-to-br port_name 列出桥上所接端口123# ovs-vsctl list-ports br-ex# ovs-ofctl dump-ports br-ex# ovs-vsctl list port 根据交换机某个接口名称查端口号12# ovs-vsctl list interface tap0_br | grep &quot;ofport &quot;ofport : 1 流表操作注意： 流量匹配是有顺序的,table0–&gt;table1—&gt;table3–&gt;table4 –&gt;table5…123456789101112# ovs-vsctl add-br vswitch0#发现有一条actions为NORMAL的流表项，这是默认存在的，用以实现交换机的基本动作# ovs-ofctl dump-flows vswitch0cookie=0x0, duration=267197.837s, table=0, n_packets=459, n_bytes=42190, idle_age=387, hard_age=65534, priority=0 actions=NORMAL# ovs-ofctl del-flows vswitch0 # 流表删除后所有流量将被丢弃# ovs-ofctl dump-flows vswitch0# 可以在table0添加类似规则使流量正常转发,没写表名默认table0# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot; 12345#flow优先级越高，会优先匹配,以下规则drop优先，流量被丢弃# ovs-ofctl del-flows br-int# ovs-ofctl add-flow br-int &quot;priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow br-int &quot;priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl add-flow vswitch0 &quot;priority=3,in_port=1,actions=drop&quot; 将table0的规则添加到table1上，发出流量也是不通的，因为流表是有顺序的，table0没有匹配到，流量被丢弃1234567# ovs-ofctl del-flows vswitch0# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot;# ovs-ofctl dump-flows vswitch0NXST_FLOW reply (xid=0x4): cookie=0x0, duration=3.485s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=1,in_port=1 actions=output:4 cookie=0x0, duration=3.033s, table=1, n_packets=0, n_bytes=0, idle_age=3, priority=2,in_port=4 actions=output:1 现在给table0加上一条将数据包发送到table1处理的flow, 发现流量正常，这就明白了多个table之间是如何协调工作的。1# ovs-ofctl add-flow vswitch0 &quot;table=0,actions=goto_table=1&quot; 组表操作添加一个组表1# ovs-ofctl -O OpenFlow13 add-group vswitch0 &quot;group_id=1,type=select,bucket=resubmit(,1)&quot; 查看组表1# ovs-ofctl -O OpenFlow13 dump-groups vswitch0 在table0中增加两条flow，目的是将数据包发送到group table112# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=1,actions=group:1&quot;# ovs-ofctl -O OpenFlow13 add-flow vswitch0 &quot;table=0,in_port=4,actions=group:1&quot; 向table1中增加两条flow，真正的数据转发在table1中进行,流量也正常通过12# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=1,in_port=1,actions=output:4&quot;# ovs-ofctl add-flow vswitch0 &quot;table=1,priority=2,in_port=4,actions=output:1&quot; 虚机挂在网桥上xml格式定义openvswitch网桥，以便于virt-install –network参数指定网桥启动虚机1234567# ovsbr0.xml&lt;network&gt; &lt;name&gt;ovsbr0&lt;/name&gt; &lt;forward mode=&apos;bridge&apos;/&gt; &lt;bridge name=&apos;ovsbr0&apos;/&gt; &lt;virtualport type=&apos;openvswitch&apos;/&gt;&lt;/network&gt; 123virsh net-define ovsbr0.xmlvirsh net-start ovsbr0virsh net-autostart ovsbr0 在安装kvm虚拟机时使用ovsbr012345678910virt-install \\ -n vm-name \\ -r 4096 \\ --disk path=/data/kvm/rhel75-vm1.qcow2,format=qcow2,size=60 \\ --vcpus 4 \\ --noautoconsole \\ --cdrom=/data/kvm/iso/rhel75-x86_64.iso \\ --os-type=linux \\ --network network:ovsbr0 \\ --vnc --vnclisten=0.0.0.0 --vncport=5901 也可以将正在运行的KVM虚拟机的vnet网络接口强制接到ovs网桥上12#virsh dumpxml $vmname|grep vnet 查看某虚拟机在宿主机上对应的网络接口add-port ovsbr0 vnetxx 网桥接口划vlan并配IP命令12ovs-vsctl add-port ovsbr0 tag10 tag=10 -- set interface tag10 type=internalifconfig tag10 192.168.10.10/24 up 1234# ip link命令设置vlan接口命令ip link add link eth0 name eth0.10 type vlan id 10ifconfig eth0.10 192.168.10.33 netmask 255.255.255.0 broadcast 192.168.10.255 uproute add default gw 192.168.10.1 dev eth0.10 总结：这里只是命令总结，并没有什么实验逻辑","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"download technique","slug":"linux-download-technique","date":"2018-12-01T00:48:08.000Z","updated":"2019-05-26T11:37:37.080Z","comments":true,"path":"2018/12/01/linux-download-technique/","link":"","permalink":"http://www.digmyth.com/2018/12/01/linux-download-technique/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 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","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-socket-高级篇","slug":"web-socket-02","date":"2018-11-25T12:51:41.000Z","updated":"2018-11-27T02:19:03.844Z","comments":true,"path":"2018/11/25/web-socket-02/","link":"","permalink":"http://www.digmyth.com/2018/11/25/web-socket-02/","excerpt":"","text":"前面我们学习了WebSocket，我们知道客户端要与服务端进行WebSoccket通信，客户端要和服务端握手，握手成功后才能通信。 握手： 客户端发出握手请求，服务端在握手请求中取出“Sec-WebSocket-Key”，把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 如果给定了“Sec-WebSocket-Key”，那么摘要算法代码如下，服务器会把摘要后值返回给客户端完成握手操作。12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 如果我们己经有一个socket server，真的能收到握手信息吗？socker_server.py1234567891011121314#!/usr/bin/env python3import socketconn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)conn.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)conn.bind((&apos;127.0.0.1&apos;,8000))conn.listen(5)client,addr = conn.accept()print(client.recv(8192))print(addr) 如何发送握手请求？方式一：可直接在浏览器console终端下手动发送socket请求，请求中包含握手信息12&gt;var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;)undefined 此时浏览器会报VM44:1 WebSocket connection to &#39;ws://127.0.0.1:8000/xxoo&#39; failed: Connection closed before receiving a handshake response的错，是因为服务器端没有返回摘要后的值，表示没有握手成功。 方式二：直接编写client.html用浏览器运行12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;WebSocket test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;WebSocket study....&lt;/h1&gt; &lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 此时服务器会收到类似b&#39;GET /xxoo HTTP/1.1\\r\\nHost: 127.0.0.1:8000\\r\\nConnection: Upgrade...client_max_window_bits\\r\\n\\r\\n&#39;信息，里面包含“Sec-WebSocket-Key” 如果我们用一个函数手动取出“Sec-WebSocket-Key”，然后手动摘要后把值再手动返回给客户端，这样就握手成功不会报错了。 处理握手信息的函数(get_headers)如下123456789101112131415161718192021def get_headers(data): &quot;&quot;&quot; 将请求头格式化成字典 :param data: :return: &quot;&quot;&quot; header_dict = &#123;&#125; data = str(data, encoding=&apos;utf-8&apos;) for i in data.split(&apos;\\r\\n&apos;): print(i) header, body = data.split(&apos;\\r\\n\\r\\n&apos;, 1) header_list = header.split(&apos;\\r\\n&apos;) for i in range(0, len(header_list)): if i == 0: if len(header_list[i].split(&apos; &apos;)) == 3: header_dict[&apos;method&apos;], header_dict[&apos;url&apos;], header_dict[&apos;protocol&apos;] = header_list[i].split(&apos; &apos;) else: k, v = header_list[i].split(&apos;:&apos;, 1) header_dict[k] = v.strip() return header_dict 把摘要后的值返回给客户端1234567891011121314conn, address = sock.accept()data = conn.recv(1024)headers = get_headers(data) # 提取请求头信息# 对请求头中的sec-websocket-key进行加密response_tpl = &quot;HTTP/1.1 101 Switching Protocols\\r\\n&quot; \\ &quot;Upgrade:websocket\\r\\n&quot; \\ &quot;Connection: Upgrade\\r\\n&quot; \\ &quot;Sec-WebSocket-Accept: %s\\r\\n&quot; \\ &quot;WebSocket-Location: ws://%s%s\\r\\n\\r\\n&quot;magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;value = headers[&apos;Sec-WebSocket-Key&apos;] + magic_stringac = base64.b64encode(hashlib.sha1(value.encode(&apos;utf-8&apos;)).digest())response_str = response_tpl % (ac.decode(&apos;utf-8&apos;), headers[&apos;Host&apos;], headers[&apos;url&apos;])conn.send(bytes(response_str, encoding=&apos;utf-8&apos;)) 摘要后的值返回给客户端后就完成了握手过程，客户端就不会再报连接错误了。 接收客户端发来的数据完成握手操作后就客户端就可以向服务器发送数据了，只需console终端sock.send(&#39;dimyth&#39;) 服务端接收12info = conn.recv(1024)print(info) # 这里是字节 服务器端收到客户端发来的数据，这个数据需要服务器解包，解包过程如下1234567891011121314151617181920payload_len = info[1] &amp; 127if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:]elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:]else: extend_payload_len = None mask = info[2:6] decoded = info[6:]bytes_list = bytearray()for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk)body = str(bytes_list, encoding=&apos;utf-8&apos;)print(body) # 解出真正数据 那么服务器给客户端发送数据要就封包。123456789101112131415161718192021def send_msg(conn, msg_bytes): &quot;&quot;&quot; WebSocket服务端向客户端发送消息 :param conn: 客户端连接到服务器端的socket对象,即： conn,address = socket.accept() :param msg_bytes: 向客户端发送的字节 :return: &quot;&quot;&quot; import struct token = b&quot;\\x81&quot; length = len(msg_bytes) if length &lt; 126: token += struct.pack(&quot;B&quot;, length) elif length &lt;= 0xFFFF: # 65535 token += struct.pack(&quot;!BH&quot;, 126, length) else: token += struct.pack(&quot;!BQ&quot;, 127, length) msg = token + msg_bytes conn.send(msg) return True 对上面BHQ说明一下，B代表1个字节，H代表2个字节，Q代表8个字节 客户端如何收消息呢？1234567891011&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; var sock = new WebSocket(&apos;ws://127.0.0.1:8000/xxoo&apos;); sock.onmessage = function (event) &#123; /* 服务器端向客户端发送数据时，自动执行 */ var response = event.data; var newTag = document.createElement(&apos;div&apos;); newTag.innerHTML = response; document.getElementById(&apos;content&apos;).appendChild(newTag); &#125;;&lt;/script&gt;","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"web-socket-基础知识","slug":"web-socket-01","date":"2018-11-06T12:51:41.000Z","updated":"2018-11-25T11:24:51.562Z","comments":true,"path":"2018/11/06/web-socket-01/","link":"","permalink":"http://www.digmyth.com/2018/11/06/web-socket-01/","excerpt":"","text":"WebSocket在什么场景下使用？页面实时展示数据 轮询：setInterval()前端轮询请求，性能低下 长轮询：把请求pending住多少秒后再返回，量大时也损耗服务器性能 WebSocket: 建立socket双向传输数据，高效。 那么什么是WebSocket参考链接 先来看下http协议 http协议： 1 格式：请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接：一次请求，一次响应，然后断开连接。 那么WebSocket协议是怎么样的呢？ WebSocket： 1 格式： 请求头、请求体之间\\r\\n\\r\\n分隔，请求头或请求体内部\\r\\n分隔。 2 连接： 创建socket通道后不断开，全双工(full-duplex)通信，可以相互发消息。 WebSocket实现了浏览器与服务器全双工(full-duplex)通信，能主动向浏览器发送消息，但需要浏览器支持websocket封包解包或加密解密。其本质是保持TCP连接，在浏览器和服务端通过Socket进行通信。 WebSocket特性 WebSocket 是独立的、创建在 TCP 上的协议。 Websocket 通过 HTTP/1.1 协议的101状态码进行握手。 为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking） 总结起来：WebSocket是一种在单个TCP连接上进行全双工通信的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。 WebSokcet工作原理首先客户端要验证服务器是否支持websocket协议，能不能一起玩耍？ 客户端发送playload data之前会发送握手字符串，服务器把握手字符串加密后返回给客户端，此时客户端也把字符串按特定算法加密，把客户端加密后的字符串与服务器加密后的字符串进行比较，如果一致则客户端认为服务器支持WebSocket协议通信，可以相互一起玩耍。 握手时的特定算法是什么呢？代码如下12345678910111213#!/usr/bin/python3import hashlibimport base64SecKey = &apos;sN9cRrP/n9NdMgdcy2VJFQ==&apos; # browser 自动携带的随机字符串Magic_string = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;def server_algorithm(SecKey): str = SecKey + Magic_string sec_str = base64.b64encode(hashlib.sha1(str.encode(&apos;utf-8&apos;)).digest()) return sec_strprint(server_algorithm(SecKey)) 能不能一起玩耍，官方术语就是创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）. 不管怎么说，WebSocket允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。 什么？看不懂，一言不合上代码，下面是一个典型的Websocket握手请求. 客户端请求1234567GET / HTTP/1.1Upgrade: websocketConnection: UpgradeHost: example.comOrigin: http://example.com:8002Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==Sec-WebSocket-Version: 13 服务器回应12345HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=Sec-WebSocket-Location: ws://example.com:8002/ 字段说明 Connection必须设置Upgrade，表示客户端希望连接升级。 Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。 Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。 Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13. Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是,与Referer不同的是，Origin只包含了协议和主机名称。 服务器解包细节官方WebSocket instructions 注意的是客户端和服务端传输数据时，需要对数据进行封包解包。客户端有 javascript类库实现封包解包，但服务器需要手动实现。 当conn,addr = sk.accept()时，服务器端代码如下12345678910111213141516171819202122info = conn.recv(8096) payload_len = info[1] &amp; 127 if payload_len == 126: extend_payload_len = info[2:4] mask = info[4:8] decoded = info[8:] elif payload_len == 127: extend_payload_len = info[2:10] mask = info[10:14] decoded = info[14:] else: extend_payload_len = None mask = info[2:6] decoded = info[6:] bytes_list = bytearray() for i in range(len(decoded)): chunk = decoded[i] ^ mask[i % 4] bytes_list.append(chunk) body = str(bytes_list, encoding=&apos;utf-8&apos;) print(body) 要看懂这段代码必须了解websocket解包细节. 当客户端加密发送了socket data数据时，服务端收到数据是这样的. b&#39;\\x81\\x82\\xac\\xde\\xdd\\xf4\\xdc\\xae&#39; 需要对这样的数据解密才能拿到真的数据，跟据第二个字节后7位的值取数据.1234567891011121314151617180 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-------+-+-------------+-------------------------------+|F|R|R|R| opcode|M| Payload len | Extended payload length ||I|S|S|S| (4) |A| (7) | (16/64) ||N|V|V|V| |S| | (if payload len==126/127) || |1|2|3| |K| | |+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +| Extended payload length continued, if payload len == 127 |+ - - - - - - - - - - - - - - - +-------------------------------+| |Masking-key, if MASK set to 1 |+-------------------------------+-------------------------------+| Masking-key (continued) | Payload Data |+-------------------------------- - - - - - - - - - - - - - - - +: Payload Data continued ... :+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +| Payload Data continued ... |+---------------------------------------------------------------+ 1234value = socket_data[1] &amp; 127value &lt;=125 b&apos;\\x81\\x82 \\xac\\xde\\xdd\\xf4\\xdc\\xae&apos; # 数据在第2个节字后value =126 b&apos;\\x81\\x82\\xac\\xde \\xdd\\xf4\\xdc\\xae&apos; # next 16bit(2个字节)，数据在第4个节字后 value =127 xxx... # next 64bit(8个字节), 数据在第10个节字后 其中头32bits为掩码，真正数据还要去掉这4字节，取真正数据真不容易。 好了,WebSocket所有知识都在这里了，慢慢品味知识的韵味。","categories":[{"name":"WebSocket","slug":"WebSocket","permalink":"http://www.digmyth.com/categories/WebSocket/"}],"tags":[]},{"title":"kubernetes-dashboard","slug":"Kubernetes-dashboard","date":"2018-10-01T12:51:41.000Z","updated":"2019-06-15T04:02:25.581Z","comments":true,"path":"2018/10/01/Kubernetes-dashboard/","link":"","permalink":"http://www.digmyth.com/2018/10/01/Kubernetes-dashboard/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"linux dmesg时间戳换算","slug":"linux-dmesg","date":"2018-08-16T01:42:54.000Z","updated":"2021-01-29T09:46:40.249Z","comments":true,"path":"2018/08/16/linux-dmesg/","link":"","permalink":"http://www.digmyth.com/2018/08/16/linux-dmesg/","excerpt":"","text":"dmesg系统内核里的时间戳转换为人类可以看懂的时间 dmesg记录的是自系统开机那刻到出事故时的时间戳 开机时间戳=当时时间戳-机器运行时间戳dmesg_time=开机时间戳+ dmesg记录时间戳再拿着dmesg_time时间戳换算就好了 123456789dmesg_time=`echo &quot;$(date +%s) - $(cat /proc/uptime | cut -f 1 -d&apos; &apos;) + 84679.822059&quot; | bc`echo $dmesg_time/proc/uptime 第一列表示为系统开机时间，根据这个值和当前时间可以获取到dmesg日志中时间发生的时间时间戳的转换为时间[root@site1 ~]# date -d &quot;@$&#123;dmesg_time&#125;&quot; &apos;+%Y-%m-%d %H:%M:%S&apos;2019-01-03 11:10:54","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"cinder多后端逻辑","slug":"cinder-vol-多后端","date":"2018-08-08T01:41:54.000Z","updated":"2019-05-26T12:41:06.912Z","comments":true,"path":"2018/08/08/cinder-vol-多后端/","link":"","permalink":"http://www.digmyth.com/2018/08/08/cinder-vol-多后端/","excerpt":"","text":"cinder配置逻辑123456789101112131415enable_backens=backend1,backend2,backend3[backend1]volume_driver=cinder.xxvolume_backend_name=sata[backend2]volume_driver=cinder.xxvolume_backend_name=ssd[backend3]volume_driver=cinder.xxvolume_backend_name=rbdcinder type-create satacinder type-key sata set volume_backend_name=satacinder create --volume-type sata --display-name vol_stat 20 vmware启用thick配置123456789101、运行命令：cinder type-create thick_volume（注：创建云硬盘类型）2、运行命令：cinder type-key thick_volume set vmware:vmdk_type=thick（注：thick为Vmware使用）3、运行命令：cinder type-key thick_volume set volume_backend_name=fusionstorage_sata3copy（注：指定后端）4、运行命令：glance image-list（注：查看镜像ID）5、运行命令：cinder create --image-id “镜像ID” --volume-type thick_volume --display-name vol-thick 20（注：创建一个20G大小的云硬盘，使用刚刚创建的云硬盘类型）","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"kubernetes-入门","slug":"Kubernetes","date":"2018-08-01T12:51:41.000Z","updated":"2018-08-26T04:03:32.956Z","comments":true,"path":"2018/08/01/Kubernetes/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes/","excerpt":"","text":"k8s 的世界12345678910- charts , k8s 的包， 类似 *.rpm 的东西- helm , k8s 的包管理机制，类似 yum 的东西openstack 容器化 ( docker 版本）- kolla-ansible- tripleoopenstack 容器化( k8s 版本）- openstack-helm- kolla-kubernetes openshift中有几种网络端口模式(暴露服务) hostnetworkhostnetwork 就是Docker的host网络，pod直接占用宿主机IP及端口，没什么可说的 hostporthostport 是在单宿主机通过IP+端口来映射容器或pod(-p 参数), 实现外部能访问容器服务或pod服务 nodeportnodeport也是在宿主机通过IP+端口来映射，与hostport不同之处是映射ServiceIP+端口，再转到pod服务 routerrouter是以hostnetwork网络模式跑在宿主机上的容器化haproxy pod, pod IP和端口就是节点的IP和端，对外暴露80、443、1936端口，haproxy中有service query 信息来自于etcd, 再通过service访问到pod服务。 注： router是hostnetwork网络模式就意味着一个节点只能运行一个router","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Openshift-入门","slug":"Openshift","date":"2018-08-01T12:51:41.000Z","updated":"2018-07-29T10:51:12.609Z","comments":true,"path":"2018/08/01/Openshift/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Openshift/","excerpt":"","text":"前言","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"kubernetes-kubeadm","slug":"Kubernetes-kubeadm","date":"2018-08-01T12:51:41.000Z","updated":"2021-05-13T05:42:11.860Z","comments":true,"path":"2018/08/01/Kubernetes-kubeadm/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Kubernetes-kubeadm/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"Dockerfile-详解","slug":"Dockerfile-详解","date":"2018-08-01T12:51:41.000Z","updated":"2018-10-24T06:18:33.872Z","comments":true,"path":"2018/08/01/Dockerfile-详解/","link":"","permalink":"http://www.digmyth.com/2018/08/01/Dockerfile-详解/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 U2FsdGVkX1+h8sFMzBB7fC5a8pFES/whTcI/Lu3Jzoikf83FamhrEPkh8Fny/WlDeuEtqg6oact1kkCZ8N1EQgLbbbSEOwJU0fN6fcqrbNx5wTzKiEXRv/zZg4K4ronXCgcX98MvH7z/9dahBAlZga8KTheapJDxJNtWDRlW67pC8dstuiiS0dkxrCMf6gWjiuOkyOztwatFAbZ9lU38JQGZTUEeq/MO8o32XUZUsOoiXZ6cjjvDm1CY9bg3X9IsaikPxEsznAyLZoPNNVxu6O3eGk4epP1nLFZ+ZMncSHlJp9K1IGeJe0TgrK8MAAk7VbohwZlUtjpfwlUztMusI4Bn1M8yJVseIjahLpSyg4nVp2WlUyq/KFtoQKq/hqc+H9XoFCIa3+mi275BRsQsFQW1bfIgBGw1M5AE6Ap1ahAAlaoCNYoqId0OZRviqJeTj/qv9ULf/QIybpyyqsEkw7wC5+r5BR28cXxaNyx0H3kkcqo6/4xSVxpFzitPaH/tihtpvSmhYzSFqlyheqDyAflLOIANqZ3Pju8HqQsH021Xetmyip5FcZD/gx1LifTZ6CJXdh03qCinE/skKuGLk30jbGjMP03G3rO1bW17JE0Uc8+TCOQ4k+KlIjwTvvQWvlTQRSin1vcAyEhVmvAamN48UuKDQDCAryr4CAsu/tjd576TVejJghV6A0jcfo2wYJogZgQRZbJ00lC73AYiI58K7PIHupK5xeQPn4RqgQUJxELBpO55wXgnYeeTXeqsvJj7VSyVNGWoPTgTrZCx5PEwZdccFq97ByMvHuVv+Zte7MhsGb54D1VLrfwI1O13oHGrCdpx/Yv6jJfb+mwn+56DqUWr11E3t7WjHysCJbeulthvnQNeCB9f1VquQj7aojfAfDFfkBCHUcGciBSonf4X2z82GZB2pr71w/DRrrDokT1gGV/dEIBN4XzFhmkxaQuXJ7dcqAPkibJ/8tSA56DvYBLaixc6bFHSX487URIs9dLs6zM1nyCKcbagR+90FZrwyH//exNbR/GoLnXcWlozMc1x1mqA2Il2nHCyJiCLoK7aoBE7nQtsBGk/SsOg0wGL0UzXGsSQ6M/6M1zjz7x1Xs8EGkhVdbTp11q3ydaNAOiIN/vNEdMD122gaWgqljHVFAM7n2lEpFupLOwKIyD73/38KVmr7MIsRC81fdAaBNjxSdtncQIjqdQ8Ygty9gB+4x4D7wf+n9/FA6Z/Lo1Lv799gg+hAq0eXqJCY450RPk0ZYMg8eshztM7dH8+j/UAx3n6yXvSjelEgUtxcHz80Yqb/ryWnbfSgHp3cDZYpURWISxA0pe+gHHKwhjOo0Ng4EzLfkl51rmdHq3iLwOMIepQ5+dHc13jcIta79P2XvRUKX6jEjkmS/f3oV44i/zteM0bXB543E8aN7tXvFXNLM7ljkSTwABN4hqiv4T+CIAE8f6C2SrHoUt8HJQTSzY4i0aZKjyeB+DwfIW045Lbz0ep33wy8g2ssJOzRY5GAnxNo2bAgr3uA0qNvopTxtV3U/52w+ZNa2206NEq/TsOMAEf82bBTvnvYUzKyjKCWlKxmkHNIeOE6I+LH5CwaBoRAI79qvgLQ8OIiIqBCzQj89gmWD7xGbNJLN1wA/7vWgDmkNMLNhQJERkziN4NQMLFHrBvYBa+APtAOzVZibIjxaDfNfM4dgUA8xg624ZCF6tTAJpazHdcwRyUAGl+jNSSVc3eOdjeaF29ZUzvo+bJfmC8NL+bGLMG3dl6swD+et4TiS3sbD8HH7N9GRbSWFwX/KuMPok5gDJCnFNFMO4DtYcEStp3RAonM2OA2ewqLMRNUdBjbKzA5VLxbHP0IOgQ6ViEYVxyJI2tAiTZRPylIn7KspLYGrVIScUjVoTLPfwzbqrV9ggolaTLPux3Kkj68CRJoQY1hZZuHtc8Euns8+OrSAjKxSJSbv6wudANIFJj6Y5nIWKqFUjvuxXiN7k9VeAL9SynPu37UJ1sncq/0n3EjvI7NjCKjkezp0kQUMA69QeZ7AKA8SPytgspMyxzGmi2N4oOZkGHQrMu7AaaGc4lZ6A1GdFRrOOYDyiDgSqCmmZzNiL8Tl6VlaAkdsQ5m0ZVhYaF7M3smuFGKEKZD1cVkzLMbLli2+cHHXOmowesqxqEehxVCybsRO2Tj7bZ5WS4I4+9vh/U0b12sjy3ZY9kqQroFEM03o/paYgDJAABk4QDvrrgHLq3XEgCnlwy3HCHPXPIbsHF9xuPajKHirzPhsUdZqJMZHfhLniKyClgb46KI0cuGyTX/HNFBrSvRglUIyEb7a2DgBR11aw8lT3TJX5ZZ92VoFRA6OCBUGYiZOKSVaqac0/dPwyr+jLwcwqYnCBroI5QsZk4EdDhSIEU7Hdq65rq3MBQjayxMFrkhvCTYvf3McUu1YFlVhKKd9zYp+BTU0CKGx+ygI87w+BOpeB1nbe+v0f2Ggero/YtjrN5uZxf6Wwss0dy6JtNZ+jhy2cS0aU4eoZk1CLPlsy2Kwe87JiDFVs6fa2emdcLVTQQFyFpo/ieKIQrqcvn/8TAj+Czz5kVkhg1/G3yHGpoW8fD9fc3qw03YMZNEpFKwvmTKuUpUdQo1DDSJ97zcH9/bCmRpJ04LyVSsTUNKVUzDgCknP/kE4wrcILE0GcnsA3ZDVJoas00C96fChanwTnjSrIuXrKIxrv0V41Ub0zv7Nl6FUg2hCDpxBfosaf5D2xY+wBTAMGwXCClieb6ALbvgQxDBF3xdhyYymdWQiN/wo6l5nuk/magQd1a0x2NOr9z08ZwSbMeowsADU31d9JBECmqBE++K4gMI20lvfW5msv7E9S0EVFY88z+XFoxZMBo77kYunOIeEVaJH4hxt84Iw9aeYuT6m3R77lwcSs+r5K5m8Iwlz4l0bj6o2Xbj7B4n+kiPjtnzsJzUXTj+gPY6upiyo4Ydsw05WNXfHaO4lR3yoDpEiAWeIXCuC1mC4MlmmE9O2GOVpr2w7HhIqLdSKxvUzJhhLGV1jJxcz2L03NdwgkhefVZlD+c4M9JcTmlbToMvcciKZz1eKYsZAb1AjpQCeB0w81f1tURWzpHmaTJljOKqbMUy01TH+UHMYY7uRA36uyvE5NMk5py6swKCBxRE3Pjd2aIJGq+oqkHMCrTzYbzEtU24p64An7/XuIHFm8RhR9gFvoFAUp75sYGe68Uuli80JYiGXnFKRg6cg824zi7tExz8IzTxaXdF9Y5YT2VxWQkmuAfOPMTDPfTwZBPOtxrqNsg/x2naeaxFeQunS2YDKhwOMURi7qQ0irUK/GBpx/TFfA6u0P7nbUmpkG9aope9+gqeNEaGzxMygepx/7iNhhpNpokRAWIfOXbmSPIHm/x+ZIELaEYg8SNr29eUebzvhPOUR2j1YvCFa6MHxcCrJaUO9ijaFKOW3iHivvxKOePlaZkh+ae4nJe8lVtqfkUplwi7k1TQUWIIeWgduyrbkgSvkWPPG/6aIYw7etTdLes+VBfopArbsfMQVzZflrAb5Iml0hOEBF9V8/yU35h4kMe9TSFQioGVWu16H4kIeB+9ZKwhskBrSPkdZtEpN3NlbZHyvYIG9TJNhRq6VXtksY5Y/6QhK2KR+aa1ek5WTOdCpJA08wrFHLrIgvnUs8BKOac8rDE5Mi4cU64wNGFGuEpyQy3AFjv0k/h4dhQxFwmResZpQzcOyNCDVbvXtlzeXaoFgcHd41t1oKGJyVCk7OAnuDOJPpgFpaf6WTqOmgYX5TKkV6Z8MiCyj/TZ7O5c9bWtXQoo98QnJ5lK38+SvOYKeGFwSBzAJw5wpmyFsQKycppluFQ0IWD/GjkqlNo2AoBOPC7+20/5Ja+3bkKv/WReOYcIeqrq9Atg3HTQv4Hg8FDTe+4zMgA/fmPjvq1Lg5pXJhjxJ7wNSn22r0Se80KzjYJPu//J1zYvKTzjPol2LUpShnllr3l4puT9IDDn/mATM36VC7HCgdKfyBqenEK6o6u5MgSqoadN+gP7ANh8A0BY9A7qVQcpkvhkzF0BoGR9gra0v7k3Qx/fuBIpoTAGqlrWYC6z+dByseZEBvyXWTIQNvLT9laklwqVfPrCToIYfWwCMq+R20Q0fUrgqd2QdS5vxkiABa/TtmAFSBZOwThuGlDH52Oeqra7bBMaNfh9Xic5mwoUJoJYDTiqzhYDQ9lSWSDc/R6Zs9TFH2JLnb+m4fl2xGEq3Sf6dPQ9NVrbudBCPDxAse0QxZeO5HFmhMOSdKpdy+DXUhX+G7L4LoLowqSFQLOZtf1nx3u6COf0Kb6KVSELpmU51JtP7EHCc9/R8TpcpVd833PmLzaxmrCV4P7j7V6e25y7nexq+bpvlfqCdOv1UdIBoeAYvUtecvMunc6Wnli5kxbBFYtMsTMw9lj3+Jj9oi2nEzSH7tH4F0E/qaFS4ik9hOyNeF0LlI5/H6qBdcjqZkVhGrmeq+RbrtggxHS8VicO1rSX027jFWDN1e91TMuyt9eF5ln27kPR/qCmCqrGtbW3fKSmuthF9Zp7NFMEAWK/7uXlLnIxngVhsQNa7n94oAXwzRK4Dzph83+7687LH3Nptkcz67Q5thBbQ1UVumymmq2K2jbK9SFCupINCIcCgjBq2Kbrng4d670hL6aQcoKCLNgcMyzAQpYyK6MsF6Mfll/wo7nhKrzfXIm0g+lKEboSs+PLNCNObkQVIueKLqrh+s6JyRu745R+ElKBjXlkSzxfRc57sidHXODvYPFzbDrrfOh4GSOThvCm59pljyr3q6uZTdf5iMewOJB1LnJhMOLwqTRhwxtA4luv1Z2Iwt8gv1+oh0ePjeDYptLUDhe6HvIm4/OubAaIiJ8r4mg1tTMWhLtSH58f0zRCkie7LGD/0+8vVIJIe3Ysr4Y7x1haUfFVIVH3sBj3fpRVzgrZ6BXZp7Y/OFM/ykWt3EhWwWTcvQyfQd/wMxveY88b5T5fi+UnT2BIt6PVSWH6F2fLjeBhVmxqpQtsOqIV8qbv+aNd6m/jDbkyqyBBw0MZsTGwf2hz2qxDscs/jkYjuxghoRIkUpXH5suiiKuRq18TmYn5azB1We/WJ/X56NN/CZSofl//Kxu5RaeenZNKfE53eDKWjbkYHrJC7mJ1Fkhtsljot6WVPN7IqObKO7O55wmSUCZ5h7PRTSmx+anuUFfcPw1RzjNN2PU+IJDrQtu6aChUDoEYtbHF53W927U37kiPCPfzy3+JBU4ZZO94KVj73fiOoJ0kJV+LTyoQCmO5IyKGC1on2Zl5iGbAOZaYN/agWFETRlXQ49Fc4UEoRIlcr8Il9X8iprUbCHIPlXP399TnPQWLaAVuwVqVx30B0kRGhQ7COgLTsgvdw1C4Pqnz8OzR+ROsoI4QZVDFAF9Xr9Zizj5VPrtNeGbRRzliOyXfxbpBF6Qc8sem8EyPtUpxaHj5crM0AwM7IgoXYRkrU2M5fPNmUG45L8f+fJ48F7KP1Fmo70PgBYkT+55Co15c/fGf4dl751pVYGBRbfm+XCuxECVdTNLeVWW/rOFqsHFZs3d18SnZ3lCcNBIG78GuwhS2CBTE8H1Wle6rL3pbAYA+yHJQFnzx5JV8Nj4TnRQXiitYLLiGFZHL6vTzOTSx30JvhZjk4PkXxUAnAfX57dbv/Qp9usZd2kYvCqk6WXnen83x1tv6n+mZ+wPACcgRZBOHpHlmKnT3Xm1jgeWrt6FCRNMj9/Pv3rW9l0GQwSzQHK3HeqeHOt5vGFlfN95aSRxtTp53FE2c8tXKv5LIc6hE4rHo49itegM0QLel4qeQ1JC4Yx792PfhGeOuuOWyvrKbtOG+Xx6pkniI9WLRI3mgbBV2NoWCC8S1d+jOf8qMd+pWrpC3MxfTgVVd1Wv0mmc6EsRp0vNX8T6N/xqAxFBc/PPwe3iRyqUVb52L9DiswTgWS35pvWd4sesIZFFg5zunVjiVReoJaciLzHvDM9Zf6Cw6xJ3ViX/1QbMXKUZBOKJrUhJPtj+Zaurt1D3RcQ76+2nC1tLaVEI88CkgsRj7gP0KbQC8H6yt0xTPZD4FTrEM6p92ifIY9piMWIEo417t9yytpzwces3SN2tI52i2742cmfUdy2gVCnO49GjPap61NTMSBVr9zOUrbvjrOfhyMZ6gQzRXMscLWHQRtR/hs3K2nV08qnNMde52mT+wpE3Z6SO3ODH72dTao1zKsjfUXfsuPhma/dp7oReRj/c19Qg9cVEp7T1rE07yYzM3QTPcAfoVzLaMgYnxEQ3IEoj9ghuES9DqzJMFUHzBJucuokIIcEnva/Qfj0751p+vymbovMMCuH9cAdQkO3jy3riJSo5X62r53P3QlK+mTMmeX28vYmEYY/OrNAGcVkujU28diz5hL9xpF5aPxMRVmwOjT/KpdsqY87hKJ0LPUOnk2JiDOY2ZM9H/tlIUELzr/KZhbxXkk8LdJZdopGCFaZtCyZOpVz7e235igmoUifVpRdxqDJePGoHJWYHhQ3IPJHA0MRB6eg5VJdMSUHL4f3a25i285CHhxEJ6AJerI+2gEIjq09/vkj8oENF6gfDe19K4J++sJCAmKB8aBBbw8cKZbRaUYkncHuRzJ49LK3BSLtLY5ahDZXJkLw6Zwu4FWm0xtylcwrJz7rljN75ccc4EOTuG3R7uG7XdblBkjbvlNb2gIrZzScgn73i41omK9qaUB2evqM9N0ctfK5aXRPEOD9StVHSV9g+xflTLGlGVh7wDGRduClHVu9I1bqrMO12fHk1PCUro12Rk/6TwYIz0zKVtKRrxe0zGbOGs4S7NWP4XOul4q53QxYWJjXG4fyEeDV3XqcVEZpzX/mdVtWQ+6iOYGQMAoHY5l+25DaXr9RJ+wwOYucbAXkoaaHPTkzCGLrF3lsZqJhspS12AI7IYB4jGhHyW7uNBi3sKLMbFsGGV7R/ChwXC6X3wlZKWf58KFRAv28nFxFixZgXUSeNgiugDp+w2WUng6DCY8GiCNMI9FXjHXobwyVX5dIExLNhSaAH0tFS/zdVRTCOhtdWOMI78CRBwjQs0CEDV/9WCF3uZQiNAj2WVro7d8i/ftNnuTfADpT9vmc/TJAtC2M0ZURZjgLZxGCNe7KaAux9GgZ+80Hqlirxu2HB9HE3rFV5kaigXJ5m2ws5LkVH2q4l+7o+ZusbgUcpJgJESPTLzUVmgL6P2CsLlPPE9UaRzoHfvi7rbzpLjPpJVv5aM7YGLZDFgDaiKGUH4LycoyxOtj8jA9tQJ6Af0zrR3YbLhFmAfGLLT287CIq8EYgpxmgBzSaI1uUCcyGv9RA2S6o93CSkhI/D3lpvOgq+AP0Bqlu6TZHcBNfG0Ychya6qmShzSv2z88arZDSDHIZuwP+TGnKndjxp5ptK9MrbcFibMzfNq7czEmtj3NNzmnp4Srkw1XmevavvgCwhSz01WvssSs7qNkLpbwT4Pq+dYqysDVvwGHrQ0ZcrGljv1xUOEb7nWQC7qCPmu8G/vhSyo0l3Y1o4i4QxvYbbQSOauWrvm5t6aj4SLH6Ww8UEkYa5ttnPJ1YLclTSvcNJYAU0Hrqtst2NtA4u24+IBMzXML+WxnpnqpVOxDBrPB40QayupShsJOFwc9M7UcC625DSUGTOzyVJxHXH5stT+o9+3kZka4OBs8UBp/rKb1s5q2YxuiiQoKHxk1KEfXDs/jcgbkarUfJg4zeZMdcAwoGh+YUb120Ms3G7N+EkRT1hwNWFrjKgPaUmLdEqT4fm6iyRYCeXro30kmDido6xbfnkIRXEXujIiUQEZ/FnNITv5nuD3XOpKQOgoBnQQ/bP4SbU5EAjBQcEcVMJFNKFJXAtMnAZJS5nI5lF3g68QuN5awSDYJ4HbsSrjut+74WanSFkprTNHPEdq2lA6CXr5eb1XNcpLEX9YR81biLB8zSJZDXQSm1bgwygK8ZZ/R2LJJ7Zy9DsV+0t1/LclcpwXCe2fCeJY4dJ9pJhc6ZWit36TEAvim9jquoA8mR8YSX/cgBYmSZ7TTBo+tRn7j1PREWEDVcPj6vsiOieX+mT1RoaPc0bLZAzICkBfwnvJuJwPLszO8ctwcj/dqfD/XmT2vfHDUlcoOSJb781DAVjD7a4Jp7jtRjPismg0ot+OWfK6HfXhVr1ToWLLZQdtmhAneRh4JoBwYsq01CW57L/0WRJECsuTt3A0bOUmbzihu5ZYgqsBXyBRzApeCJZD+6Nbd8Om5vJ8qBZ/iTqb2fySElivBGco/AeVvNj8z74vgT6cRf0Em/XTDeffD7v7clX3epxf6QmYy8HkGOMG3enbm2XKmorlJ3EQCSE3/VXPpDn7bkxqVTDRisZUqlP/cJHc4RoCBZy+1+eN9S/QMf7vRSEP3ZPXXyiz+i3hpYIiJmm2c2QLjQiC2EHsgugzUl6J748YVEnSWnWG8SL26OalHi/Y3ifIXBA88JnTSkgTwlpuzvIQ1Q1O/ERxNzO4hz29GNXW3L6mi3aIeL7fbH3YBVOhLgdmhYV6wvddIXdURqLlGlqObUvJJbAuLJYsr8YihJ6N7mp1vFrIgNH2oRfSRh+3AFwSouQrYJZfkAfWyr9LWAcLGGv1iwgtAlHRJm5YLhznxl/Fjih7kbi7u+o09EhrqQ0/vCAp6AwvSUXsWI/PsWmFVmP54iCyId6DQ8aClH37y92kdgswkhgJJnHZd91r+ayD5jH8SPA3tMYX+QJQlQiGNQfO6ltnSuXNfGCjJtjvhFqLvvyUvk2R5UFzSkA6/9RZBlX8qp8uGc0jIpaWkTFi3xpLenM1zqIKVuLjoBdFLBeQB5Tc9UC7EqCGmwQ0ynYhmH6v755zrL46uGCEVaycs6LLJblnsg0TqN3wPR1sLuXBkYw9e5ZHL+wt3Q3RwKz7N11VYAPB52H8Vh4o4XJhVhcfzc2Qq2frKEzpTff/IkGxmaQEW9jIin+aVf+MNoKGQ9obvdrPTO2uuu5pSR40QUZ/MzlxF0NtdIbipSNJd7Pz1+lYy/eYd95RKlXk0lqdpBPAsWqmmkzCIrx3PyNix8baui7wFQjIieUYR6pM2P+xdBVo1Z44GbfuZKayTvuTpCfABa+hJLfIB9FjGvpGHYWTI/v/H3xr2vuc/1PXvgbxnY0+XzurjHck9Jhwzije5xMrWNdbkjgmdhArZDETTYrLTPQNkX15rETxS4TwzzgbMVTFdtW2ynFeOdTSafD5Ijsrbs/cWpdAn7c1gNavUWFBbdDpbucHdkAa/vE8GA1FnepKcXa5uU/VFCIMG0ydLgH+oHZBuMVI3nnv6wMM8EJyHMKAADTB37JLIY7kqX6jWiVx9Cz7fEw2BpTmBe+skX571AkLNaEFcwLra8V0oBy/5Bot64b0fXLetQ7vHrB4tMd/z4YjOFQNKie+t0WU37Hw7RV2BM8JMUipCcqq7mGepGS96PVzCMgubbNXtHKx6TQmHu43Egcfu8DTNe6Vlw8kgZ1EeFlyFBs4nb75soesJ/bieXsKvtcnlVFM6Z+Ln5UXTOsN1n8HHsc+wz8xZYSbiEpDyqcjQ6TIZmtzIAuQlkxqPBBjDuuJOqdiAjY2VRJ/cOUyVwXquCK7SKZD1GZdb1QIYXJame5MQuRorMoxbPOFrXUHDBmVyppADfO2ZTFY13lfEGUiw/gwMjIMNTbTQPHte7E23RlLAJwA/0FGJHIIokJkAvIpU8owhSHmxAhKefm6gf4oqgGkKxOBzHuMReCfnyrouvyTMU+F877j+w174nSmjajKZ5hXTDxY6t9LGNEOOB1bo7j2FVkfZtx/CpyWlFspYzHu+NP/f45SgfjSUTl3mkJzB3/Ybnirykg1xJSpHADOlQ9bETuBrOLHYdDOkPz7pcluk17Dxu3lVsS93MFMG7XAce/e0XZQQMUqgysD+uFMlJB73hy3CnNmCCEz8u57db/5p6qKNRkLQ32GXnwqlxGYzcZhHrMVqLi0F5kBnm+UBs7Ot5ogIWGhM1ySTA2YMfXDTsXF3mitHXif0Ac1Xby9wW73iWc12XB2OqMXy388XobG/myIQwM7k82EWWrvZcYe2OQY4QsjkQiu/3HwgSxh31RhWbFZBzoyh/4QD+DfXrTQLv8TEtMjumLJbsWa5wKDBpH/M0nytTFA5abWV7t5uc7++ioLvfz62zmpsFusiQS4vLGal/k4x17P5q2YT6+MEDhW/BC7ttx5ofknAmgnNSZdoZyuJHdsE38x3anpNbOEzrM/bgC6F6t2QJPOyYg2Qyxueh1dKGs2TYy1FI3CiOGXvuOJ7z6xhjz5Bkxm6KwpSVJs7aNpGESUUszZYUGkqRfbf7ZBWiHOM7PTD09AVL+hQFJnTHMmlOpUqRt4Bky5VJVfah7GVELV/gZPvtNIV0QKBbuj80AOMzBjLX1q+a4JEO8Spij0UVwAVOS/geZqu/TlIGCEXHkYwbgVGDIUCuIYoKriTsH8pEivwQes6BN+8qFo5b67kBy8a6dPWtIw2sL6qUPT+dEJTTxmUR1aE7qeMGlFwBlLmaH8Cw//9mCihoFGg/qdPxxjNZP6IF0YGtdy8n6awvUF4lSDNj4YIJ0hSJvE9AW7aw2F2I9jT+3iFziRwvW16zvSymTPKvdT+EmUt/Mah9Tky+b/oQw6pxaCQQ1wdazif3waedxSGEWu8NMIj3BfeYKA4jRFTfN8Uz1aVw6D3agMS1bqJ3Qa9cPGpYtp62QNeDuizNuGXNzrDxLczt+aPYanKqPLt8qzqxa2EmIymYkALDw3LIxlMc3/BukD2d91AOg2c8a2Zzxlokbfxfnu7fT+lQZFF3WxCfCSkf1y/wt2n0FkCuUU1syoylO2Vl+EU7KIptXi0dN7vYBcoiC37jjDgz8BQAFarUJnvKG+R5zQcVlLloNBAPWVWDxu9a2hgA2KCakPgm0nlAvnQkHZENJMUgSoBZbM41cUkKNis8h2qfZLniRDgWuk1xoPVMt6YVzCAsvFAuZxs2j1VCWryUcEptemCbdxA9zvbfVScJQ+KPKqcrhydqgur9zQQF9ZYTZsBIifwXCGiNF0KRjW8t/dPqe2bIQ13NEhD+pXLiwPX9x+dWl0Cr7IHpYnj7GPg6xu1IVeaq5YYCsg8wAKl3IMhF/AvdO4Rbu43L3eiMgdKBxw8jOHmzkZNmuzSwOiFr421+0jmj5MlCNEPJdwBAfbwPE6bEjyYu8Pd1vP/XyR/EPV82eINihjtoTBRCPhRt+Yh1f7Bb2TNihw/6uozgjZ6/8BqYxvARDXupYwof3DJwAKMWYm5Idl1bCMxj+NXmYMbhkbIDR3KHQa91eHYdVrIwGXHyL5RFnlOhKgjtlz/Wk/Wd47BcP1D9GI29ghlcCj3Kv6M3OtTNSL28zjB9S3xIhcmRb+XUNKgI9M9JXK3X/LJ/3VFCZnd/JwCQKIkZKZbQM945sQtMPUg/4Rb1/4d5pnBst9Vmx/kC2HPx2noUimn5hF9AK6Zo5re3HbrmsJWkewCjr9wr51zAgBCzQJyxw4wdM+NpgcmU9NvqAnXsIZtlHrn+swBL18v9UPb+k3luRahdfQ5a4S8k8Rbjh4Go2mMuck1JIXsh+f+H+Q7pGaycXxtbnQdE2cVrcXVJWgKQmHqkFxAx4JXG8Wc+AOWNTNYsJDnFfdgeaJzAm8rn8VdxBFD2f8kUqqMwvsSuh3geHUJFZDgrZTLRJn3Qhr5D+xiLaN3YAonQfJtp1M9isF67SIwwTAyRDYF3T32d7mX8CB9mUajnysVFB6PV5EY6WPcvyVzSo6sVtP8mFSWSgndACX37NUUAsCwjh1om3AFbEpo8oNYQBFdOPg5Af+Y90HQojxy5GkqcIcVjGt7ehEdEAmbJaq8RVbCdcx6nEb1VfDMVue80ejeRuGe8gRm+qWDMywQqaLMQlAh8fyg8cx2psa4uEqWj4ta1YXNoGm0CjVCm1QVSdSe6QILmCvDspqkHoR8ChVlD/lTq1xbE5wgqVIzHHDAfEAc4MuhBG1oxXCF4sLdtYv75iTi96VCCqjyeigWDVf8rkGU/ePWiGXmlai/1FCNOXiY9CR9ohA0ouTrxpUrsMXZCamJt+GvzxlugooLhQhqs+k2sv3FLlJyvlZa6eDuOrDDkOSnH3qqG+OCUE9aw5McS3PAUAnmqxyQSKVLGDIzd5/bIRfz8qaApCGhi2aNkkXo2Jns7x2VdjgZlwR+8ZOTCxJbh5oDPt21DR1uKauaY78txb7JgbJjXUbYWBgqzcQG9iOh2gGjkOPGm7kQy3k5XemHzijfnUPQn9PnnfLPnNsqu1FK6BAhhbAo/tN6IEdDPVnZOu91t7Z+etg30tfVoLxuCF5A2hLSa73Lj2DpEbWZctitxxhQ6zHXG3BWq30mh56uK9HDXi3Tx6hTAh5Jp1NKJ5l11du5QphwZuqiPodAxTsUHhCYSmTKxyj+H83LNIsSA48O4+O5utxeeKarbKk5C/DoMsaDDhdMOJAItqqivzjthATPhOpGTH7fCaNhUBj9EtVHqP5uzAb6c5awf5lIiXaWUGrUW+gkw5qLxoFOtl1O4Rvqv/7okyFAi/pixSPfobi/u9FyHXo6PWv8GFqaFt1q31H/b7CNx8WCZPQgsSNnsr6eWiO/40UP/UzNXvqiBEP8JTpwt1V/wy6SvlaZDo9hhuoA9r8LNunstn1qrDLc7x9SmtXA8qhDSMD2MMd8hXNk901fs2Ut3NcowbnFiDhsQat0HXg6ckq8Uu5PxJlHUqZkl9Z3HTTe9BQKQqo6V/L5R+tnU4jwGBT3+ajgUPwUEpPtGQZNSf4nid3KOHmZ2sA4gXNW6rlfWCmkAoRP2cYidaNVzQaKi/Qk2A66f/YUJSP7+c7SXiM+E6VWyuPBdCliFnAidGBXKEz0dOH2nmp7yzaZZVrY/GW4Ne+h3Ul0iVZVUfm5MuBgfby5rNQ2uCsW21rGtVuSnEwlRB/KtDbW78KVPO9pjc1VS/cZ68d3uBYqmt9DRH8bjLdBgU7BgmFtReppG36uFdmsJNvqG977C+zMAh4suJmuuhEu0orTl9obZgQGV5VCHeBNFd/QDhOQd8zFQnOm+jmnyToRPhRGLjii4Ve7XDvSUwy2Sku9mvDWySFMLQgl2/gyLsfONfu2Fr15m9yzeiAiFWMm9T2L7XAFBtmfl1BHQKlETxeMmHs+q0BKRL9HCNemKe7bNRiv2lsCHiURDPM+glFYTCkzzjzrOvY9UrC6eJADapylsYbL4MIejBriRs6WztgCxxoyj/CfGnqnxH8+RAZNJl0atEYjK/Qs9RflHiXbaWpe/U1ptm46l8Cg1ZmmrCzdHrxguawh12tHXN0P9Zk3vUh6n58+Nf3Svv2U//iHA7L/XzVOJwBjysE81pXkAwjfpbUfoinWrF4QvdZ9CMAvUfpmdcLMlQDjLmE0bZ8o8i+sqPfdNRwbKU9u6SW+uu9iidjBHTx9OQpo4GEEU6Gd6r/S8jzqTH4wBVrxHPjimlqP6+c2zQNwVJrcd/jy34j+IyaJVzGSqtTXfo/8EwBBdLM2PYyV121qvw+27S8COJV/B+V8wxf/cV314BMKv6NpQq8glOh1TrF43aGqlm9wmhYjRb3je9kHqrZ++UTcyMPCX7YCGERUe/DFYMi0kYsxSLFGgRHYb8xp2LmxTg4HcybCIwjn9K9bmWAWmt03mG5zPQRs67RHlIsPvTJ1ND/59JRZPAeYS+9MXE5VVsHKL8cpg9+xGKluw+Bjs783JYH9+d2ViR/QWF73DlWLkpOGXMzyHEFr4ePBd77I4a1+y8khfLcXIozQjPDVrJc9Vpyo4f1muBVg+1rui/hXNGjwO6usBZrOLt4IXObzmEfxOZLC3Nft4j+X4RhwZteT+MMygss3obcv5IJMyAurT2HoZgbeM0YBRDjRouYf1e6jEhdNX/1walLDeVpSH9Y7IoVGkRQmXJ5IDkkr1LJyxbIlulfoex8IKLJEyVnJ/msE+XCE0jpQsFASwRqer37GhNnqwKEkZnX2u0RbvQNnbDUt2N/h/UFaVqVKn1maHZeiXFG2hkFgfwtE6FCIG99CUB0JtzYDSQKEl9VdBCr5oPC1STGtLA0IX9TKh+FCxOCNWHFnZB/VvmY2gNIozCIXFI+YSFmGLc1pbDAfRor5FXkUFCLW++BnmHd8+TiWXLgipQ+FY/2nrC+CkV+ZawxoEcyuPLd/670AMb4maxHpYK7Y6Yr2BiJKDeXJrF6NC32zx9tlu6nUvbH3dRle2IxCSkHdsAvjG0WVYdniM9ejI07kUrs7vYVEhGvRj8lDGh0NYl7axa8E3Kfx911c2bp5wvDCvEbZ3B08yMGi0Sv5QLTMbdSJAASoVyn95M4uSwhGmzVKx4yLyw+/giK/Jmvx0hONlkkzQhSUkj8v0w82+S2AG4COuujuwUL+HEA1EV6TObWsnre0SNLJdSz5bOnOijbhx60khuhXqVn+TM8OshVphl74qvHTx1qyQK7iBkcpy3JkJgy+Aktoud01t7D8xhbd1sgtnyVLQSHHo523DvrEeDktoHTD465OV55U/gzeL87j3l9uHNppoMMDFsZE+6BC3jMnJO9cNeRf4BwLirdAmshOXNMsu6UO+DI/S0lwhLaBL6fO4LVoJeGMUjcEvFQvfH7S9wIjIcBONRIK+2BM+hAHYeGJF644jpHliHnldps8jjYogXlt3K3SZjVj5bzCB4ZkEm3+4xhlcsaMLAvPmQY00upsTBP4S9Hk0pHE5lwzro1Hnk9G3sBR7Rjm8X+GYWIPyK/HxHjRrgcXy2wUcM6+lmGxPbCHrDu0fI4xS1YBIUcoT+/MSbuwhdoWBQQq/tx8OKHA3oIi0kC7zHXimnambGNeqDApdcnbeYyKYJnfwebXJZ/64EyhSY9ACZzhkEP/hdnTRld4visZxuW95K2qOJ9hhpTOdNWGLQCxjzps0E1dnuw0gxLWrPyF6KkwILeLUeMHoNHphruhCnoH+6gtbHUxHoGhGhBVjUDqmpUhLDKfpW17gIn7nxuO7iTYrTBnwSprPgcnAMNAQQAVQHMSu/j2fnW3jb3koMPWzte6T5i3N23IdDoaWMx1jqakip6fDL9I5h1I1e3fPaJTeal5MLfYN2YjE7TsbZ9Bpn1DeXivADfLkI+9crCSJB2B9f45DFZbVpbJmATX3LWbh221TNDWuP7VdfM6kBL1AyuyD1/448DzjcoC4fA/pgvrLgC+vWueI+flw+9Jzp/4ln5F/kg/4/f9wceBXRnh3GdSwI/XNKqWPlJx06sBJ0X2lQxSBwtbvRDPW7ZUdmndRC2nxkD3iHt4cYXimBZuW8ZMTUpkL2zYVU6izaKyTHjyK/HpCEtqYHHhWI//s1ejZ0hTvgyXLYiBvJiYHDTpxnjkqh1Vi8dHVTowX1J2q2M7gAXpjBuX8FYF/BRX7APeo1uaqpOr8W1wT/r3JWTeKVdBRtciZiREM0yGznsSjER3tUZPdKj3JXqke9ErZDNEYmOE76xKpYHcNFZLiS/rZ8fOXyqTt167PNg+CI89ETGXUF4me54gOi4ptic8nLP9r9juwSn2FSN0MqTA4tbBnEZ3M7BCQX4h2jQrYf37HKp2JIB/idBGxDVdMvtplZdRJfvc5+A0CGvEkos5txEsl7yG2QKBGuetDsq1l/KOatfeXl4kPOSlPFPofzyBSJIbitM5Bg+JQ2PdPdHeqNSCOkbOfwtMnfuyAbRWrmoOc8be020lIjBjI9yWULWYmcT0Lso7ff+EbPk+lL77vz4jv0QcfBsrVTBZjVi7v+REsZGe/tVw1Q/P2HPk1Fp9maY9/fZ45SMDAxhEDZ8aZ4pWeii14FfhenPz3rFmU0mSt4hpk7i9N8XgUOT/nY807HaQBVJIDDBEbFP+xDw8m82kjNxV+M7JCbNc7SwwHHhbx/jIuhc255sdOdjnmaAiLu37OZ6LbiH30oY8h2dorPDs6sPGkLyaPpS/+vmBLcxJ/oNEIGH6rIjS79zoRdKp5Th3pOkobHnvXSFAh8qWASZLEShyEec442LJBpduTwbmlfcUVIzj1eZgx/Nr/SOOv0oL/xm/9jFIMJfPLxgGlQXHwUPAGcLYH2p3PrBx1PmB2+CCvTlxT1fm2w8pogWqxNQ8/ZKZpX5/EZUeQdDe+sp5MA9zCLwW0BwT4EoTKCZqUEcgjXirOaT+S83bP29qX47su2qsdBLIi4qkHfkpqDIf5woTQZ4qIalwCZO4dvs6wIcdevupoM5XmvaUka7BC8LGndr3kcUkqj83PCE0XFOiPVs4RmeaeqFM6Ip+3xlOfBJpyCU0mfie7hBN2RFD1H2M88/DRfVJm20yL84pos+hgI4vhKKJ2tNyIWBfkjcttwjrZyZ1LZYOd+sJ+xkFm7KMRT/U/gh2qiHee7l02vQOJ28gfNJvLKpCiB32z8mXKr/prDp0TH3ulUq539Qid16JsmNmYYJQTV2KwxXAo37dMZOOu7AFYidSRzlG3I80ncVWSLMy2cKc2Lr2h7W7a5SB+5uZdVxrzwqQe4ymghJ4MH5Tm3h1ZKmOqdqETSiOZvulZ53DkotSEqEXgRlYDpe9aUG3SrFgBvxpE1lHN8PBbozynwrfij683G2M8ctmm5C3gQEzbN5jQae8lqbK0taesOO1omHXL3mX4KcZP+t4VJhi3WpkGu54De2wmdRz8cv7LHQtLvia0M8LoSyQSkV9DYnQKfQrPI8x9nVqybl9uLVqu9IdQo41VsXSe4ykrU+05SgRE7L1VMEzcbLsTw0/0XuG//yA/TTjK334qObFlTn2dUTsdBJK8ZtSqGHFB2liLRl55Z81Slk+plAr1XowZuvQpq0zlgqHZUEpkAf60eyMRhrceGRVklyz1S4S2kU2zeks9ajTiHgL0+nCEeJlhP/aTUNmz72pwmUNgbs2C7rN14Kjtf6uvijiwy25EMplv/n3NGSU+gRywI6Gwo4Uv9Ad99ngvuXHIPvPrZHd8VZITbCMzYUbtXg8G/5/Fhx2lFic/G3iRCf/SJlhXR4uq8wIsrA3dYa6+l9zGt7n5/dPKktyFgI28pONL/bsPm0ZqPhuYgZHyCDGrIGdorYlng/XUdumy7YGCSTHEF1SZV/JxGZlXDfz/nRq+U2BVpAAMWJ5TQ+w+bGu5RdyCcRV8WbkCcZ1+AZL9IvsWjLX+9m6E+ffZnxs7eB7oIFmmZGa6UPEIJ9ZGghHK7fZgAXkRBpTHsyq3DfHSoAmGTZoxWKd32vxADqJv1qQmNNEeJ91txHAssPDchwb7/S/RkZKNnfh5go0nCcLvluCQEVQRIkgeYgBncz2/kB3xkEkLUcdYm71om6UsMWG60GgIzuzEnas/AgWRro/H1W94Z2myaWEq69ZVLR2rw3rUrDbGrHca8pNx4xV4pRzciEOH2JK3gls8dmF4VLcNdAAr67wHDNbzGd3S4wvDUz6ICppesmqfdUZg7Rsgu3GM1p7n7vqYMWyOVxM/nMdEjZeu/H/FytTARpnj+9iCJZMuNElV7J7NtIlOnZJf9Y6177Nqy+RTqFjeuAviu29iBdIKBYG+9D8HcfFG3jYPL+G3GYqKYCHEQodPTdb1H2+9kK75MR67wdPDGYb9HZ/cX/iADPOoyLTvt9URohdhWgM71YLZVDyYN5/w3+Rm2oGPY74kijmrEzy4ClgF/s0mW7YtXd/yaNiqE6kHaK48Wmtv9e6EHxRgmZG58mogxJTKdpitRUF0YguT9BxHOnbByjDaPXKpAbNaPF3MgsI71JepvRSawaovlctQbHKG2Fb+pcAMhQNKofZSeegCrybOY0AcOgKWPWGhuAh3sSjdBiymLQq80gqe71dGDYs8HpSnd96QsmuH4cDMbXXLiQFOXaiEWSs9EcGADCm09HyMo45rhI0oel1AoYPalDXjC+a0KGyNiIUf16M0/wVKvLajAWHkptHQI3/UPakBD24tlmSQ/xwxRAOR40i1QclVQcd+d/wOxX1oUBvx5RL2ibnwGJFla7KiM0OjjVmnUG+1lnaJTe8CnNiyDsfGOmk3IPH3O/MNXgDIlWYxHQ7AryeI+tqNhCAskC3tovscZqsg/hV/IO/O81Fgik4NQZr5UlCU+sXLKuUkbR9mX0SRjwZeJQSvJE082KswJJkYCpWSbzs0U5+f4dZA7896RmVXrBxIZ/ZncbiNlchQ+cnzY57hKDpRnpVihQUvI8dif1NeU7LlXWHCUtRa+bBaCwxEsVHOAyYoIiHpjmKhKIIzhJEbAUuJDsQDQN2y+kKnc6E2f5o87EUUr7PX5OrlLPSGdohkxVsFo4qjdaxoc5IbjIo2lo6ZtQtDBA46WiLUWzp4nItAoJgW0knuAedoF6ucnZYrzaQ1BcjUYnWT5OVB7tuR38AsW8F0ivy2Cz1DnJoJtYSYDKZIx/lGRKF8feFgtMhznzWEGlqk9IV7pTB9cVAhZddqt2+V3lOn7EMkEZGB1wZY7RhBgJ5FrwIzsFa2C/BVA2GgfD1CM8F2RST+yaIZ0iioPsIo+QodsI+OeS8jWDxt3zP4LGXRWj5+t8IAWvrIMxDRbscSHftVB4kr1Wz33Fi7Zfwdm1MTtaaHsCjFWj+BPRAOx0GCXzK5cpy62Q0F4w1GhMNjncl1WCIoz1Gh4gJU8hyGxFg9YN2xQGxRtAJeYu4rxCv0DVKItnf/2t1oyMM8TaJr7bN16t/bwvanEKP3puQw4E74p97N+Glad3RdbQX1xujzclaQSE2tJa2b2Q6W0+iK9KjTTuw/wTwzVtfa6rMJqAGp8d6nPkIpeGMFNfdNrQdkvuevbtQt7mXx3cxYnX8ad76Pm5fIcSXREfr8U6kZ5pddXIS6jOsneeSXm+blnNedztaQTwAHQXJRWS2GdWKDTvX9thImLTyf9q2Dio8bcnZMK304DJXXJ1uaO56ub/ObHDasRWFbuqG4VH+dsaK1kp2RpPTckdXJz9iRELgfEr9MeDVfJkAG/MK7sXOFfHeFY/fxjOCJG56DVml1GmZKG8vWZgpc59LoNXNBlh8lxua3ISY8ZoAYKTn+Yi2Z9/l0JKdq43GLydKaACfT96wMxiuISH38d+Q64/pZXuEPbRmx+gau3mRqBNmHkpT5Os5oWs4HUVU6MGAN9tcZYXAgWVOMDKkMp09xjPWA5ua7jpMJlOgy5SpBbf1AoeMnKT9cgOMqwe2KHh2/Mtq9cFEZFNY/NvqykDiSuz+0QaoX+lmLUo00Ykqv5uU9+PSreMY8Y/Kg3W+KQkOwr9eczcLzN+jbhfYNSKHAStI1Jl0QiYeXmk6zdhIIbqRwCzIrcCuCjzpPi1ljEPSw6h2PQHbroNztxfgy9MoG23iLMhRJL1fMry6hvY7YLw2A7P29Emr3jq/71mthVlo3+nhIpjypIH4GOflAzVqxUIUWA2p1S3+CHXi+9jTi1WjPsGf7/Q9Fz1yFS9VoOQzFgDPQdUAkAS7kvja74G26oipnPkqPbPNOD58+hvUC8wSOYrc1MD1tMxhbHp176wO6WTMjBsDEqSQJZap5YgN6ZrR+RIQlEDTDHOX7um0zVsD9cUooKYPZ6rt9wRdWJHJuQWuJV47X6IZZCpF3oL11HFozsTY7BRKcTdo12orj4rb0akkD11GPThCbnP/ZoGtYnzHGf/XTeKMhJ0r1izlqPXKVhGFuq6TW3JRlfdug0lmXh75BK+8KMGt1d8rkNGWgS/ZwkointkD+dv9wTr1SOivXjf08TTsP2VBnjgxjhqNuTU7/BPfx9+A0QWvjLW1BDZiG/EAO5SA0OPQkJ6SWnHqblg3RnIH7s/36ZY/DhNo2F4Yk6MWBisS2vV0liylHJZAI777/TEHJ4eGXA+oNcLW4fbC4FfEnQgcwMR2DZZZ0lUHszvpvhH1MyVMLQmg1SAZ1dJWYa0F5Qz359H0JjXiipe63a6oNNtE4oh/RQRQJsIoC2JdA1tY4ZUL8aLyzN4rVa9amDWMFhp3vVVNN2homrY0WdrOWpDqico2Qk6OBYuqpDupF9/gzxi6/GE177VvdfhXb3+WbvWjSOfSS5RaBeBVqswovSviDAdONowEm50+md91p5ek24nnMWEJb0EZUMQKOhY2eXPM507O1eigJjezQ8c2yEQ1vDAB8NyOnG7nq+AE6gtsW1Xe1LN6OgmJhbG2JnHhTJ3xPJ9lhSG/+F/QyblxMRgb2HYThA+Mvq3N0GQUCpcfG4ghe+UmFki3v3sepvLhrW+UaCXUvmYwa8XS4c9aadkb8N/RZLM9T3ou/i6nT6eUbtT7/Ue+7fUATHFZdPAeIrFEPi0NfY5Yn8uokjUh+vulQl+qanP41uXCJAT96dEA4bsrxbNBR/yKamiuf45og8gZU72RgpQ6XvdEsMWhlSIIkolnyDjTjaSiwZY0DGJ39R2cnbaS9D26E4a8yWrQUMCvot8dnBbBEYaw5qYcJgcZwZCTNPlJhpoHCU3vneiWVu6tAk1pMl9CPzT4zHMcRtxkwbhK8VTuYss4bf9kDVYwxBS18dVvNxGNYI5+LYwMMMkjKuJl3O+tircY75m/hqEQ550khGrt6oaQcYrx/CWS+MUJ/GQiHre1U/N37rmasNkvMHBkxiIZ2HsSXDUiWcK86NTIuRsrlu7XAPNWKAUb06k7iuWGo6gSjQKXoZEtAsVp55t2x9CUub55nIfMP8Lf9fduhWDELUMgU3SCCDh6ljwsVSuPe8CCv36XJx5UGXyBnDp+JPDDk1CfYnIQZwk9ecTU/c7RjHavxHYEk/v1DR8Tj3RqCTWZUbRpU1CiuNvtVM6CgU1eDB3UcBSEOfdaaXUUkz96Zb/RZFh3QeC1vSKyZiIR+jDGnlm1Y5eVwDmw1RkAztyQbF3Wu9u7Wj4qV5opPsCQ4sWjT7FpPUx5J4gbAPoz56vdTU/oFj7laOEKdXh+LlT6gH6szM5J2+oFa6KiuVbqZkRM+vj0BM3k89YjuyG2ru/TnvppR88Yq7rWVouy0sq7xtn9CFxd6yLI1+4h4X/1+ELLRcK/+IYsDa8eKBEDHe2CR4jc7pOSypy/xZikDntrf2A6Ti5FZj4vySfkzDHxlclcfyr6VbX88d5LrDaGohtDpTht3OXmSRXdhIRXwYZ2rE++NQEjYXzQd5iHhw9xq/e41uk+h9JKC+O9g3BbsZ0uwD8mFrt5yhZBaUrk4mUQFY3ht7g/GZYbfcv6KdgqyFOx/1GHGbfOCSVoWReID0abvhk6L7VUKMkSbVvrW++rTqw4GWIyOrHNa5ljGa9bKPVNZojdDKwHN31+Gei70kUGL6g09vap69sq17+Xj4iXqQkUnRNK8tfi6ihuBVdOQujKPRfPHmxHT11bNTlLjBd2r/8eXAo5xw4IdvwQ9LplBZHgQDasoamSkZRhk6PGjewVdzA/df7yYWVBLW+K6aonQqqgogVvMwi7PdJJvPbS0769h8QHrqOM9jce5qrpdLmImzLBIn7teBb4BMgUo7U99Fe4pwLs8300z6xQPh/iIYLAXiw+p6ps/YkihYzLZQmPlhDi0CtLTQRXP7jIGnitB+a+pqfXRgVLTiF55l4DwtI2QaB0qOgjFfgy7hPJpqGtlW13ZnAJ/D+d0nLshKTYDOcL1hFM1DpEbTMsWNw1cEfDU/GqdUdAAIv7Dw8AbRoNm59+HRdhUbGY7/ZzrReR8DgGIrdXlDuuQ5Q8WDKapx0YuwemES2EmRc9aiG5ebxaraM230dl6Q8GkniGoDXKCof1Oyr2AQoXF+u2ed3TsVE3hqWBhO2djL4uSLmuUOiGTZDlUZRDK0sODw3W6eKEdAcOzxER/TCabZCByZWV4hBNPCV/YWrrw8IIDhkEr6AaLf3zhji306xAdfOSW6Z+sZ9IEefEmFUFv3sfQ1EnB6a5N0Ao67aa1jsHWXPBQTxnLwVAD0AJaVXgtdRX9hFS88GmXVRMth8UYFWwAbMvH5Rqx11ZT0/8SL8ANUyTcNMdwmWsKAgWo3Do0NkYSSbQwrWaEcI3snlGJTD0+0jLXYJQ6kjo/mFNa43HhZ8JyIlbkFUb0RXSu1zLl4t3/1Lw5uOCIpBwJs4jnzfulRvQxaJbS1Tc3MBl9jyGHqc3Pz8djIzHG/BEmaE2Zw8Ru5mbH7/3YaKo5d+VeuFA+EY+tGpHzQJS9yaA/y0WxpJAWX44zjvzjDPDFqMfGh5fSTqYAa4xGvfqPuIW2yyJnE7JWo2FZHvY1Ch2bsdBjKXTezByPsJkdYLApT8hNCj7fovVURLZFb1kHGDj1xE+DuSkM2kjkax7cUbBv0jvgxWhR6qiYgK9edRwWqbPby5Oxak8KO/UpF8LwyIeXeXbR5r2DcdcKZFgoaf9PqmcAbRwb/DymXXrprRhKIFYwhwam5JOPEmcZwihBNPw5zLQeKhTzFp2dVSj9jtLf4bJ8o5Fxg2H4j8m43iKglBDXlsRAfIMNhGV2cK4E1b3Bzwd2D+XE1Z2VKA3RL1QiHD3ZbVnonJuUHdu4/NelMzcveo1W9Hi+eo6Ve2leOqs7Uq2AN7ujrgEOoDDA2C1F8TzXecWSNxG6mSfAKX6RUH1/wvC0mjg9CNFupRe9nv7OTwDMOsDkpMcG0G4wv8qmFlWy0ZmeXyR95i1UGJsibIK/uaeJSixg9zNwfrY8lwZjRLukOUhE/nyclrodV31TxL8aK1HjcfpDBi652/Aru4C+g8qGvKjti0kIeCJwlVcnaZXxL4euUms12avcaDqEYDIbzrGcuCXRIqZl59DrycJb6UJMcENC1VatylwQUJ2lJLHFLqmUz4m4SGV4uNam4itwMykol2Wl8RAZmlaVtoa0+Ov9Iju4ZvQXyaF63lnG70/+j5ubWls62K6t/WaLS7oR6P4+UWi9SxGOmHoJ030nkvLTvi7+WaOZleFjqe6U2tCrXjweKI43rCvVx4a7kVFVRuz74UB96I8qHf5XqckJHmqACsvfW4YyN7k3/ysji2yUZNH+Vaiinof0mekrSXL4FF76YVQL9CCEEPFgix89RFSGtDmy+9SE4L2rXoPSTYb+1E/frhGts8L2/tvhfUY4O7p2+BjyXJSqIcmEPFLU3IP7RpIb3iQf7iohu+UJiFFjbDrqodpbvVAKN3kTcVyF3cIv/xzRSkiaXrBbHRjz66s81Ne/GZEv4stqyUfPDE1PrSfvUI9yvEEVXKTs+FNhGCkdeqSUWxgp9gtAadX7r/PNmT2YMJxgCzDxKZL8mzihMdTpZQL7uRijDX64ibH9/MWeAcK5vWb9+pTdwEvaacHRr0il3OYlbclLv9M4twkuBG7A+mtxyGJy8m49OBPAUNMg/0qjVWhqo91jjY2AG7uaO93qx8oEp2AX9ogBHcFpvi2oKmKYNoqEyYVAaIiE9le21YeVL3Cpfg6LuvjWk5FNO1eeuq6pe6UXPiLJxGDNfsbjJSUUrxdAFlunU4MXCEEqUJYsesHMAdw85F4rVCl5ZPC4jldlToVpKnOoPWbNCNF6tw5b6sSHea4L9gXydDawbKxwlbpW3a1j9CsccnMCOHtQuU5dCfxOqsRv0iuR9lQ1VuSKKH2qlSNpZvzNyA4idHgMEd0SRo47vMEv1zKeRM5oJjhI6vPHRmeiT4FjOH1Um5IKVGta0r6GXensRfJdLDuzPL36qoiMqMvcXmbF2hG4IBn6Vu6vfuK0Txc+SPNqJry2WJ2ESrdDrNiCxX5517LiHUHGs6FEbuBawPLC4bursZIHhkdoxf+/d+Ha1Z7KgHvYv5seQ3eMrrrxEyNFQTE0jXTEo7f+aCSemypvEJgDET226hvjaYSNmUQ/3iwoLqlhAAbWT57SrrEdxhPX1YU4lwjTXENRSUmkBsb0WZ/CG7SRIuWAjSWAXU+ncxe0gDMxhKZQwNQSUK/NWfIUrL0dT8IFR3IxE+sgaTfeWbaqLwykyO1j32X0Faht1JdhC+YP/2Ye4vc1f5W9xj/PDAj7bHiSOWN58U+VUbHShvwOVNC0lemw3/OSWxYP7dMJPo+Jj76NDpLHmRCZUwyIYp1NO/J5KwgBTdvVg9/OjnO2FGv2rxoNJ5YNGzN63yV1tYgO98xtperE0umLgT9rnE3DJaUF6UzIFc2Cf6Qqid5wnKxhO8bPt5aZPIHhSuGOBZ7SP9W2s7jKu8eNILow/DS2rxzXEiTFmXYzklJI66OJ04b13bEvwiX6FvTupRy8WarM+MaHuGlWq9r44IuNabQDovqg5vvErW9/Mjyh5TubPc2QgDVVOkw3aka9O6k8WW1fPjPXpMAEMV+1o/ArzeqspnRxpYi7egeUkdzBzxl/Q5hhBZm7c8onY7HFrjcPZThKoTqpcj1Eh4IXJnfN+w9gp5DDv7dNgNHebFgL/7vgm5D44xuOHe23JMoAN0pGNAkuHblCFcpvtqKySrtKo4t8duXAJJJN04F1gwu546OZ5f6YJEdaTtv7aEH4U9FvAI2tyhwyHmth30nJBOiTHDGjaPkbmDrdVG40W71dmaGWkzoMkyKoQfflHs7TzCLxJC1SF+8Wr1nwinIvewpHosyLYJzRj0Vvpz0DGTExoYpRO2OEn5EqiEavm8e5KGDjv6v60bxvT9/rT6Xi9WblZn+AaKnQ59hsMWbyaTZxkjEDa7FaBy1YrFz9xrJJYR0zcg0k8YzLXCbTJMSJrXMvbmYue0/WxfMD40OdFiqNygo4nyVaqKiYLt6JOe7LuOjTdpsIWhmhg1I1KsduZ87WJznotqOrghT2xzk/RA8avvRy66j4cBL5lPW8lX+fnw6sZQrxGDxWU2EBOBMurzsqwb2SOSbB7wTXzVF32LUaf2+rY5EvFLpEdWbCJN1BZuQM9AZ2M+OetTx+gkUrC19lbzaMFIlnpXlaPJw4NI2l55zkHOjEG7gA3rmCqh39+PN96vWnFFLFYPjzVPlEcWOwP4E7TKXGVqn2pljWUiS+edwVI1BzXHT9Ns6awLh0qb+v66v7kdHm/HTzNQVlfmdQ6looFpJ/PdXTELGKbrceOswRqrYvAfpfc8y/uRm1NVa3etxS9P/2CDSv0HSo+3PM4xAUvTsY8djVBFb+yj66a0CID/sy5epoCnXLc85du3JVTimyXgMG3wNHhxlimSf/g5OTfr1rXkpze7z9vHVWIOLxmwEB17JQe7xp9PAghJpHOmlxiOdKzyDgwi5uahiQzidX+YRxd8wFmxPdw9XcHGml6uHsqp0iAuzHhI6Ok4VvCQ4i3QBTLTJnoSo0ojT4EKLGHjRj9A5kMyKt39DET6vyGCN54BWuDnCx0xe/N6G/oSoRWkvR7eb8QbIfSFNsBfcTyW4rGhE6jK6peh1jM2vO8IWg9wXgDUebtGiPy5P+rvoGJM9a/zU51SfyQIvSYrK7Yn4zSgkXNMUgw2YqLhjE5D9NvtS0Ra7bDPZ679ZhKfhj6MtvyyAkW+Uobpdq4TRAQlKIBdZQnqRGNsJnXAyWfAkS90SGuQ7vDQ2FQY76hQEjkGiIg9u7jnxgIR9L0Fp77wxvdBUIDJFjmNt7t1Z1HZjRPlLCvvjQ9eogvt0lkYg2SmwAMlpiENat56Z4R2YZMSXn1evg2Cn7G4DBUHWzd0SvNt39Lm6aLyTw53vs9kBP4TRTgadfKfgH9VamIm6yyUR52QtG2TuRL5y9XN14j/KUMyANF5MCNth/F0J0lYP90lelCWrEZki4vgpYnXFqymePq36IiqReUI05aBwL80L0mHcn/4T1JI2RlcowBakdiThH6Wtj+3c18VbQZ4EzDRxr9xakvIHpKjpnUm/1CQ0Z7KcAVeDh80nQcN1r5fnjE6JYTf+C3sf2v2DPdu9gTgFH9XHfWdGiZ1NpQb8SwrlxOFRQ5L1rpKoTpRciRKzXczHVUUE1vhZWLDdk7EBNmAfg/sUV6F8RYtXensnxxcaRh325NjsA7VWNjEfxXaGZtetHHDnp8wLG2N7i8NAy2Az7YcpCdLTBULLosMKbf15Evqo4KXCb+0reJGQGw0SX//uBTstt+yUc9IQFxBGKUlEfOFo7N27EHbx+uwhf0ObeD97KoGNOiBoioUivTPY7sIqN2PFUZ5c6AGyqAcZBTXX6wO8mIFEZiRNGNvwrIsEJsouEVOd8/834ciCK7luPHe8k/rjoH2lVKfYh8boG98nIUuFKF+ExFQ9IywcJ8Adjxe7ODOdnP5EqAyT/hPBGJmPm9KEcer0rGHEfkZAJ8iW93XuVKtoyU3rCWpWZC3m21RMZ1/CWpuA2iueVl61GrP7mwzyndSOcEC0WIpFavwRATqAv10rPjdufnk9Wwp+Jx/wZs00gaHow688zr+S+dzVuoy21mT+NlY59S9a9FCXruKwRq2g6RpWWEh4AvPzL378mI0ZSRju2RFgjIrmwDpE94BPpa8fdutHooxY3NiYIAv5i7UR5bxLV7T83lWWP4tD507Gy6Wk0SeHbsqkELKZsHIXSGW/7Der9cVedefyrnKYJ91tVWMrpIRoURkUzZywYC7KNkcbZwxNc51gjpOH8Ajm9kezx2PNe0eTN2r2q+ofm+xlfqqhdMy+Zq+fHwjtXFe1Z/GAG0hzmmcxYzDU50k/WHyA9fS+IX18QozLRQ2V6E4jRnWURIiPqGO4hRrTNyh+VTYnuS2wpSPjLRryLeUKRBfxNJJe0kh6AKrTpAQIfrjGjYaEaRtnUaAKA8zDvTfz6lsUiJE1gLH+8dqUrnWtX/6fpr279f2rrWvNSHFF7douSGNHAPrvAQ0LOlQi2s079VOXQHi59i5HlFZFkdcSMF9NYCuc0L/uFSlhvyvVLvR5J47xncGJ51LNnW7zVpB7UMojf1h+OMexXlVAnCx2jpUw+Nz+ulnBZE8VX7USmgF5hIgMeXTFvfEoj5oZRA3octSPtHWPzEJvpYTIX9EKKSb06liuCUlriR/LSkKY8tq29yKvPLS3hOwqgjOAymOlCDZaPpDHGvLkr4vHcaTCAlfKK/B7uF/LfNzcpEPL1ax/d9SDalhlhnLcZS6JW7jnk5yLw5r/u0OQBMy9HDmPjzwIkZCo9rUubVJLAnygh3MKa+jrsxpVX7AkM1Ytm/ulqzhPQWVM8an7aKD2ltJJNarkFF+2TYxwdTxrgqRWewAkghKNtrRNTDFTYnsctpzIh9TQENeqphedhKpiMqpUEcdgBHrlb2JJf2ES9AMXreClAGGpf55IKgWsognKWjPgeXeLj1tBonKKXuDACJFtSgZzdoY9/ERzAJhB0T3ThvkmxZhCo//20BysIFmtZYG4+Xhl/ZxGUJ6xXIXNHDoLRTQpS6qioeg0NdiUSTwpOVUMRpEWxlCzkEIPOaciQHyuP+ZUyBO13mwXeLCyOMWGbRJvZ84QPIinpRQdgE7SDlF+LT/GzjwxLtcgxpA9RskZxAhd37z3N2BWAM4PG6z1a/7UWg/8/bO9Z7iNRp1CfjWS6D2rs3y/KPbX/i+3EOoV+c6PIxGGFYnwPW6aZ/nC8QRFSo74k5e/R0tvHo9pXugCYwnIzzeGTobfp5Om9xWQAzQt3nNbIf3c8fpjVx/k12FlVzA2e/bXISyJiOFeXx8Zv32gUtSO2wlBNjxmmOO1uws0lKYq4YzrR32zqlBCodP72CLz1YegZ+ziR5RCWi3eis7pZEhG5MWdXahbRoQTp24zuRiLqjhZsV9au0SJsej2y56v1MhyH9ELtxAY/MbidsZGPfGX+4irfJ1Cva/za7xQL+lFSncDe4D21ReCK60+gZf+l2vPs2mmAzY2mfXSAcilMVdryaqBzPehSmYUVB64mpq7RhNKxIIzkV/+H5hUVcm8h3yFgJS8sYpROepWP1bHGQtaLNKhYueEhErB4LdcU3BMl24mdhtanehtU7FinLRNpDlT3A8tjqAyQ6qZzY7DmW3u63D6Ngi3KweWuj5rRNlkf8s9skYN7jdI+clOlVysj20+XVth/Qv+E+Nf3yptMJgWM35+AA6Cs6KXO/+WiTvj2KbjNl9Z2hBYCKUlAWyyuMZXor7hCaUMCX7H2Ed1UXUjQkZ8spISPr7mMrdxaXAxQP+Zw3Vxc8EIx1gSbSpgggaNQBBYj3w1gYaoHmUMcVA6i3a6b8V3+yi4J5yW4En3sdrnhf3daAeTK8j/vyKag8VV+fTrKFd4aRaTjynvm82QPxyZPhAdV6a7wjlcFNpOLM3ghP0cr3DVYCCsTW+BeOp5QMxFkchCoOCs+Z1FdYvYcROWLvr1ci3yx/rC0XC+t9W3ubVbsonrqCz/ZOlL1vJ5N7EeWFOccnF8mL0M7RT/8xNv0EAJTJgRRzVcJmZ789Ox0aMZPyqomtM6iMaubQ453gsE/Nk+U/CcjAKHNm6WDZCt5q2I4q9oK+tufeFdbUO28Bp2cnjK3Fon950/gMutUZEoVEilHBXHGD7aBelZZ+J0Woo78D40bvPEMk0LulxhG80OWJs7cssaWahJX8s7FZIeiPm5d9xYTWnsIuKtilp9FyiI8SLYuAVYnBAWu87q9Jh69bipz61y6vUOJ8dKnUIopk5Ln1y2642HujfZEUN/80CVwxGHEqrEBkwYy1ae3XNfUncP6OwsUyq+dGcwCKUbnRCSq3j+sMLDeldgCR+fChZ7vtpDOQO3d3b1YxDiIe/SfGY9GJ1q9/jYB0u3l6y2cjwn7AfV1d7eTGSujCdQfJ7Cy0P8YRh9b8JKMrYFgHlRQXXbE7wnLCH5v/sfCIJMYIFbJw7x2xcXS4gS0B65/HFZ+6D+6a7QVMQ8MC2RF7YlYm+IV2seUeI7ez4Td+5wwpx+1vvQQl6yS3x6sDqQBdGWhd0UuZ0Qooh/isAUsnXa7WR+KpzPOM2RlQt/4XKiI/yFDb5m0d35NxzVXf9UtTyA4zh933isVSLXiCP8KTNuwdTFP2IFWbNmLUsqyd3ncn89OR0dNkrZd3DWvRj6eXxzYLTvhupDui+DWcrVzOpNvaqF5656kmqu028arAn2tb5aczlK2PTPyT9HoDGMppkIdvzOAtILq/FZZNgxtpjeVCk2r78ixau5kXZu4+ZRcFjhlyxganHrp/sZU0CVenvzJEvs+0XF4FyNrsv9qJ2YyX4McO4D7lWjBttYpDBwl8TrxaQiehcGR3JELRkUzx6y/bT3yJb9wR2Tk6PU49FPOLWqx6PLqKAt0/Bgy2RTAnbd4qCoezxkDA24AKYr45QnuUA0z8SF97hWfCRWDJUgriyhnNZUyfzZDR1VANiAPO1niMU22ghRRUoOwXdZ8DMTGN9tsPILLQeL7fTnaaKxwRou53L94jKOdBRBhcPoyC2lWnwCUHbQfPDejfKhR84eCQD3T3yCb4UDOW1owdNDNZU07tjDggnb9/bJpy4LMVpnmlYGeRVJhNHpFbMu+Xu5k69l5SA876SEpHCG8Jpn6VL5OTTK50j1t/kkGTLnyGkJJXjbUZ4oIe6hnAl0NtV/n0L+JKNqLlLMHD0S4Yn/E8NIKX+Tdcd/EswgjBrI9mO8ACo8d/NepycW5+duyQ2KzQn67hKz9NI7VqY/Oc0sSIPKx5fMeUlf15tohiPjgRY65ewR5nTwpbA9vg5yRy4jj/mXquyPCqTd1zG1TDSoh8gLVQvcfYOM1iSgQqaX37NCRPPddyiWQziWhpdE14PcJVCvyUR3e7YKifyxhcmiLeLIH07kRnlfv1RACdRXN5FioWm9Hp0vxetiMqo+PSSVrN4TDA7nXmLJmTcJS3AETvJaioJet94g6TgGAk2RTDsDzSJDYSW7POt7DLcCz948vmcUSXaEccXM/U6EZKYPep08o9KcSa/SnhRAZWBNkZLpnzQl7+W3v/jsidVhFHri0gCae1HVKFbSAphI9g1sGXFV+OQ/341AGFLItuaqeaw81ghQgds1TKztm92/kbwpgH7FDQkbibpnEOA6a/LJbzizm59dheY6Fpz1MzbqS605EQwx1a/aJrwH1zUQhcA2Rp8C8FJCeQuuO4rNSUZyeHlvCmKdvdd2yWmViT+YPSfoMlqnP+OPUBhHc6IumLM5Ag7ZbGH0r/9YojIcsKWehtuJ9L8Kr2OM1AaYgvWGC7P7MAVIUP06pNUaUZ/p/TfeTPmHs4F9oOdJa1fpJQVNlPFavvEws2cXy1Fq2A0FodE1MrZGmpi8/LYYCxqDIOCENVFr8VMwQm+kc8JyYpD31bB5JUCoACcEF4TkxL41P9SOYErQi8hts8bz1S1LJercS85c/ZglRD7Vutem3JEla5tYVT353NLDOfzhYnbrxQ4sSyOsskjGP3LmD8lT4W9lqUFI8CWYrqj3hTT4tur0VBxkoIdo9VTgE19B5+jT2baIEkk6zinxqJ9zNxAsTFGl85r9tXzqv1iGoqng2YQ674SCzJY9zfxW840WSLTx78lm96Sv3LJwuvhZvvQogG5uOZAiSdxLQPautxAFSPQKNKPJWpmsTitTjjKgzGtB0149I2vhvBp27OBQwNiz8LHiMx9sbuC5KQQWeSWt3ijk/HpZdgvgQNdNpr/TK9lCjNiAEBEWc7Vu6kGRi/ktfB7XiyoSfYgAw/u1TDf6y+rIrPsMOk+bybbScAM6P6l5QX/2NfATmpjWoq6sNwUv3yc9gG/TRiSOlQyt1pdX7FC8A6+/w5tOek1lA5RTJC0A/AmhoqVzPemwa3eb86iq1kt7wq2LpGjtZghIb1+zm8x6zimJtoWXo7IsLhdMtGz5VOAVzIoRXOkUIZLzXUaSP/FclVrFkLGVpRJPJjtelJz5xIlMfXGDGkb7dOh3/BqcyoIaAmaZt1YKU52nlJ42cY4kg+cM6blg+cljae9c4xLWU3oboWDd9oDGT2k1yGEGUfSm0bpFHIyr+Xj36kF7OTfeUkU3W/O/MlC3GExp8xMSthwqN3nBeWrUnO/ibtXoO5nNjxKGbXTFjuQV83GKV+S2czDCbYxNpHByWbH4M4tbZi3Nam65+AEbpElsE0siXWGFXKhP/Cpt24Ns8BXv00kZ6RkXd5X+6ne2PSD+JgvbHAduE4zeBeTWkJBv8P5QwRWl1J9+MEpAyXmsGWq36qCI/QB6+maGIZzHOoUpoNZaQ2cVg/9i7TXZAyhu/F07B6Q6UYRWYC+C7qXfJPlyvWXCoPmpGTa+kfdhYpfjRk8etPy00KqxSgJ2H4GLNE1rS3TJvXtUfEJMwTdRyGdLHfLm/ak6yj2NiBhWctKeVRf8INCse3jb8iXZM+Mkdg1R4KtYXkbWpswgV7k7q4ieWlZ59UAgr7HNoadub62pJ2r/4ehfcGFoGY82Nzs9QNAUGt0lA/BV6CZ9CEyjxmgvedfIOMeSNVW3YkHzj2ItXe63xJzgPHdejVbcmXQwX+RN1oxnWwPUrPiTnww7ySkZEEf8QXlsYDzT6m8pkbiE6Tbec8YPzSBUDLaDysttam1pcyvrlNSJmLzsmbxwEfpFnjKfFjIAFzCZ6jUP6g3pL7I2fCzb1OEmopGh2UeIh0SnOSO0uXFKFNu+4SPR58LJRrt67cos99S+19znJqnjShS0GcSMCEkEGNV6KbbpflTk3VXsd5zLVQL06oVgQ9PQBUKYcqmz4WfKtkjOorvCHRHRS7Z8mfLIaDUiLHMCwf1EtyqG2rkQwv9t0IlbYDGdlBSen7cu8OwOXKZY5uR7IETdnSrtjnZTX202X1peLEiEF3DF+8Y+S1/mbOdjJfrULpy76RUysB6rHwHZNRM6aUfSQs4bcU2wlVhHx3MPKblFOtOltYAdjOiq0FIGPn3hs0gDD1yh7MnCTwiWbyMmiSMiNtWiULajNVfXKRfPAToLoMdBSUhCn/C6JM142QE9ral6aHIyGW5b73VtfgvRddFwD/ct0S67xV6om/NhBRMNSnaLVosrqGXyGM7Qpxa9xC73ykU8ZfuL5F04uWxphvaJZtBzxevOtdIVqTDPWfsvUkvIQmhu9y+Gl5OhKRG9L9W2ZnEGTXCUtBuxGLqdcnf4oT+Q8n2L6fisW4EAhdYXVNSwmisnAd0vntTniZYeED/nyR8/1RjucS/oscg6BPqsM7DiO7VkQ+y/F6oqk1fVDzRRVWUEMg/gTpt2lHjic0J4qmIdZSWdzuztqFkcIJUxOuDe9fC/xUWLdWJQ1V1PKqazVgo9GtCEg39Mp2pa61PPhBA7k2uhPKM6R2zCoMIrxMnLhQUxp7rpk87CZE8559WFC1Xjoh/dXLV6xD+uWTgWGrTR3JZUqgxY1cFArWDZImTohy3lkKcdQNgJulmVFwRbMnJoVwscbC4uLjrOe5dUkf3jpff+v3qgYABhhobcxiRGhQ4XxV+t4jCfd2k42g6NZRsqPOJtck9o5mHA0LPYXdsRaQKwvS92G1y7xVXiDtNAb6gtVerFiuyQc8N5WZqyaNcOZxxddhAURUpvRhLvtOx0DOU4f3s+LGDZnn02YyHeCIFnXN8pDNrc6Z1iNJYc5ZB2jJw50HlYFyk+EX160x9YysKJEs2fuPoI04fsns7hMsV7TpFiLbB0u7OQsuozbI2rJdbvUes6O96cY/xnhrNxWjO3xfyi3YxdoffmaEn3ooEg6WATSaXE3u880YXDPB/U4Bdp2O00VnvLtZXkE+uFQZETmPQU6jooEXxJ9zC/KKKpoTrw4GPOTjp2HevIGOTvxA7LeblR0eIiVHBgvzrNzv1RklN4oAPivIBKRyM0ioOCBgI+4UO3Fvl3+Eom4qVvTWHr9nLpI/mL5gqDQ8d+5eBu1bFBqIayq9DJlCrPQ+9ZgQH6dl1qWRyuSOXfcO/aCuctIlUCgDTIFZl9yeacpxFFfHBKak4Qxt8Dio8d32vTaf06uhMxo1GoImRT8B1ZIJ8Ob4MoVe7gj0sgVKA23OFcjyk5qF2XpYxA5EnnL4JW2HUocgkjE6HF6+M98SEQcAzpQcftGcxNEsX6rpO4t3iL5gWvtz4a8f8+dOncQ/XhiX7XEhMKLOYaxfe+PVwj7xO1guiPdVcVFQjdyowR5d/8MIVlWD3t2IZe1BIrnEEu0aJKz0noM03sriVaCg/Ir9kDF9FMbnhO8nzQ+84gZnzooLkark9+7L+WxTUmuTNua7gpo/RsnVY9UNWWx3XNJF3PoBeY3D0c3q037LiT/Ich4oMsJfE9oCrXtANfk1P7gabcbbVU5Uq1zc0QID2HIi3/Qf5bnNI1Hg72EtLxZsLa85+xauvd0AgUDECGaJa58VQvl7eWS/WAXfR4TWrPhDHqvUBFvX+0VqMvzO18iQqaUXFCwbXAMJNEhs7Xzl3cJ6D11ZwAYsvMxcArYXjw1kPxguUe0EllU7hQ4s6H5E0Rgu/bGI8n6EdBKOb6dFKoXC/l4wP96qukPwGpBGELg+YZF8pUojA8DaGa7I8SOQ9rUEkjECzV240CzS7HIsx7Az/dLlWelgIwKbb/+YFica3H6KLulxyOSDRuVEsgcxG27z8HHP3GuCGyroEadXvWdCMcO+6jaqUyzKwxNbPpq0w9fsBalpAAm3+OVtmbFCDJF/f975MA3KsPjnV+RaRATkkVI4J45FiGqwBUUvf9ZRF4TwWBGVzMwiyuFlKxdRP6vy6KSjt9dU3Ti8KqzGesbzmczH8qZT677DOcSpOiX17p+5526JKUauIE/4/nm4YdEYK8KfIAsRavN/bEUS348GCQ0/dVgrb/NghcIpks1+uVbXkJ5BRL2ltibf3DHsKMMQk0NGrLoGltoenNcDialAnM0rCMgGQMJIKJwf96m48LUkpHawdaBzeZ7vMYRtenEXr8bt34ASORYKYX1i4duFFUFqHqhK5+4NcY3+Z0BUCH9Vc/qskiDLDYb05p/hBN/gfUAtADPNH3lgZwXbhTjqXOrf4JjTx+u+n5nklUSYd4Ry1eR84gGp54PEkWqcnrlnat6V5mZVV1ygZXjfALrzpdElggTgJmdAcQflZyM4Rd40EdzROnKp1BNtmZS4/ryVw/3ESrQNh3GfCBRGl8yiYfhCaXamD82+V2wMA38YXD/Tdfd/qIBhIykpYXxr+lAuvVNJ9ANzAVFTBsATk6VUpssZyJcl/apFlCAa7ximlnqje94dR319RKi84T6sgUCkzIrLN3eWLdF39nkmLjDEe/u5DiP2fgKA1GOHdBBAcQcxck23Irzrt5lJS5VdxZc7hbwCK+c9Cjzzy8nHdKCV5qBSoSj8na5qOfThyAXdOG46OIni6NfrHGhWsTV88koQ7PPKCwGP9X6PvlYqzBqpwtWp8dYd//n2iGI/tOtzH1NbXMGAfZG24lBsV64kQprPAEmy0v7NBFtuAbX2tZ5HCsR2pqrcKsB/XtbxlM/iqe4HFVZGjYWlAbmG3vGVdbMQr1nxL4n0wSNqNBZRF3NhRnI/qDjPd8WBACXD/BCbjDFGK1MRagpaMNsgntHDmB4+PEIWlWq2Cn66MGA/iFghQnEOiXNSthyJYpPPCzsYyqgapuYEv/0cEh+nbt6OW39TBX9XulxtvbUOGbCYO6QGR+rokaBI7QNQSuEckvls5X02yQOiHtfZzzRbmu7HaETvx6o7eHW98/gySZ52fnoXsRqvaTGyFKVz1YjYlRszbxHtM5Vvr8m1/N6PBUSp1o6J+FY3g5ZL0A7q3wfXTw0q9WXdnFSYB8o3l/ItumjE9VeV40sTMUIN2rQDupxDlj6XeNNd0jmLjhj9wiUP2YoAEfAx2AkFKzf55qkCbRDum+7P0/YyJPEM9dOu7tyJ7sO7DFKZQVZZoQ7RXmpwx097/LgiGH/sfZfETBXTCES3z0nWwatjp9g+JteV51dZ9WcNuUE1IecJ4+ZEBFkPDDLTFsTET+pQ1fppJ/yT6n20mVpDrjn5RZ5RywPkKaLJa/70cocFTdymR8md/GOUzNySjGKCo+EsisTPLQvM7Jb/hpjT0m623+y/32jchMnlOYHAjsjkdPV3pku+5lUtYSRDaCaweC8o84gWD+UBj0q4aQOxD2+9PlDPjJFPbyXyPt+l1m6kyCki5amZpclpUsvn5uDtyxloHHxKtpnU3G9VOR50/BnDGyctnh50g+qHHvHMZdnwOPVruEvb5nTcnD1+amCoT3AwUj/2UA2qL52W55LHP2WNCoitKY5F8zPUN6XlcSVoscgA19zTXYQFAtBv+LaDKTJoCKowlVRWcZGc6rXsoXqG9G4ARqGwyyswvOdveT9n0p1ly63WmWrmKAj64RKMc2ZANqsQeS0Cyyom2LSPocsRpW7EsuElplqjPDE1hThHesqodx18KgonrUBW7cEOPkoSgo3eBbz2dcBAZeN1K1kL9X+dP/UdzCO5+CUeNiPYD4AXTdkH/M1q7rG/mUdZAsx3iqPMl1ZULSkUVGrJ+uDwVp1XrE0NiZPCUG+CgI0goXkTTADhAFSjNcInccAYTn/6LchTW4Z6H6H1IrB69yoZxH8X4/HIILMqdMOv1tlahEnHpByV4ohSLolpHe6+vlxAglyMTxwG8aYNaEkDlbZxOqHoVekUt86ylA4uZGY/Ag//TKgFMOq8mhskkNSSniw9PKNdBgIbLpzT0VOqzRw4uhJRKgr5C5Qa+Dv6kOFPw9qiP5prJy667yIJy1fVwrYlVRWBamFl1lc52wS6mos4G1o9WZTPKVh2wR8SnV58o2jA1qHxmmWENm04sFadmXNC0nnumEmymv3W5qhgdBijtC+s3lxw9FMErB0JB7lUQQu986iJ3rvSpM+nuDkD6X7Z+x9tb+5c1qJm7DaadpfbduRCDe9lPtvEYiiDyr4NCi+KqQSF2o2vRQww6Rvg3Mrrr2lvftGYo9P90QpmDJNQs7+/uXhdsmRx/JKiZoGJQIvuJiJj0vlP3cQKGzwf2MdMpzx1t7AThIwdkkQCjD1hkym9e3tkC+52W5qPsKZxSHgHIL6KGSHfvSnGv5U7/colLzStfutwEREpq4MXp6hwvJtl8lwhv10aKA6SrYSQbXmXvKXXjrMasJmGztwWnlBYSNwxfqnADzW+BNdf33aMqwoi6OwADsWIAe5erX6YZ+rWoZQQRWzUE8mbfTdJlZltozpCucqqqLBzRAD1N9X/5dcj0r1t1Z2EZOxlMC5QQFCkoPRpjldaJa+c93JMvQOypCjmrRlO7E+56M9vBK8nujPFb+C4lJ0m26ZzWg75XODDqEGV5zGe3NSp/AAZOrvzgD0UQ/1K6i/bpwzXt5L3GygWqCCFx5LsUvRi2hmKrdtPcFtDgYR4np3FJbSc0kdq2mhcibN1bkEhY1PspuQi6WwEfC5FbdWd1m4aJ1QPiN7CdVwIIsmXE9KIer+HSouca4HbGpdxqZvyZz1lroZ+ELiQPWKzgJjwa7icBnoD4WyMkeoZoDpJ99uEeOS1HdNLN4F/YGxeXX9CT7xdYj/3oL3g/5Ij+RSkup0Lk8kiYca3fAuzhOPNYRQOh9EkjLu78iX/VkAtwCeDaxkhUka/f37DFt7jsz0he8DoqfIEQeXMm0YDjYuH9DY+9i9pY/o37ddEGIG8iy4vCH1DPE7kH5/3LgjUqriBzNRkwTbno5OiO433cEtM3OI3ExspdegObw3ct4AkaeJoKx06rQdRNdhS61vBFfuknohJsQ+Ya92ECi9uNrRkR4uWGD7K277U1jBpvQvftDEEdev0E0oukj/zs98dD/kDFxwqFKA5qT2AakVfmbNpd6xqvpTBmlZm942SEIP7FoEFaVeMSQHeFQsZtS8b8VVHHizpNMjccFJMzojOEgicMFVM7uo/4dNQkq7A94W89gwtLpFBMOT7alDYRQ+/s0E+68pkd4Mjf5fMW9eo1zI+O7pREXK7XeHRQdOb9RZ2hRLsbqx+dVxAJHNiS5+l+6ZOeHR1AJ6FLr1IpuJXtRsxUXoGglIZ8OdB2PR4vjjFgxhAkIIKmPirvJfr3z/iNHlIyGywnnw21gNoavMorZ+yNuR2YZpDMBSxEd9v/BNVkJUTm+hAdV0HdEScr5gntuovSbHcKpA755GyclZP3nZ7xUyev1CE9XHw3kuPuhXNOmw3p9hY1u0+eS7lqhoNMfDmnmIjCt3f5ujYQk0m1Ddph0Xw1x3gubVLWV+9nI9u3V2n7IjtLWfi0WeCAu+LvqtJocXwwapPEBelQdkzzdbcnX4e5YcxsWxKr0ZngeE+VeSq+V6HeJ+4YyzSSUcZsbmWYV0zf0Fr8wr7ZPAim9cQm2UfeG8+99WB7+/0rp+pftn5phJdSY7tQVjDLj8vn9+uI5UYeHFz0IQ+L+w4cvffkmMS7HW2BwO/EV1s8iY/hcBtDoelwOLmFaffP4z1Zf5+d9LVfAhl5nxzlzW71cPYuLFLSwUmB+QP2hmBrRC4aOvO3MBgjOKYSZFPt74hVJW0eY+7GKi5OIGIne2wGT1x6rcQVJvHixTViG15MBvU30WAKWgRqzJuM+aytm09HAhvZzEafFQ4QByEZcOJvROES83cgoQCQ4hhsC/cm/Kstlwq4Sa2q69IhsuQhpWLKFmfeTiTejSB/6ev/Xr1qNZAkFvgWM8mJmt2m9eVieEVU3OIrNInlQv7J2KeTMHvTC1TpjVJXphlqeXSPX4d77wY1Og/HvVkiXEkIhmJusY51Fh6hQddg75KQfg3ZMDc2RejJqoInsCsSCRkLDa8dhn2zN0HpRO1wvIpq5mzk+UcZ8FcRUHMuSZyqmLQzgv7jWibZ1XOnVEpQEl9NZiknGljDCb2EBzSU/0G7TBTuhNhNNo3Tpz4tdIYzr/WdFNEIqqRoix8fZFrqF82RIKomdvMhwtA1KaVUJCrubv8eKuFz9YEcK3MSKK3EaGCGAc41jDQY3Df1Qgay2KpZWjlB80Mlg1ibdAx0QSO/eRTqAq9g3wO+euufzKCGbas5kv+Iz7paN8FFoGFcTvRUvo6FKrLXpUSiAXANm52cp/ETICFdEn6j9iOCf96jQXpII30Y2r/h9zM2nkS5uv75e/EzKl+ljdxOnqDcMu9Lrlf5RKgqi56ZOEV+3KKBCIvu0a4oEtj82W58jeHmTckmiMxtFm0lckvBvw6m/Z558tDD6qqym3u3hHs5cbAeiLEQq8nKRTlIVax4P3DufM7zjtD6iWskJfT9qlspTmb5Yy9LgTfeZ7LsxRm8D6rjSldkxrjSOb1zezKh/6MZPTMUOh9CLQ4IHf1m76ZbNL3fMJh+XXXBLXA0I4d2hQAnEjiIkJUsIb0I46nozU9SzxBqnHclhp6uVWyDmRaF5LB8oFc2QYFBBJh6qcXbQErj2EcPT1B2dRE38alzYY8CBdS225fJ6yFUw6c+4+vyHOJh94N/Tv4racSKorg9N4XCD+P2/CpCRVqV8Lp46myP909xTjbtKgVqXofF1lD4DpgK8l2pWYg5/wfXou6ElAM+vUM8b6HX0IR1RXnGcDCYbdsshV5bAdL2Rtev4DkA3FfYbxWXQx6FXxe75TADevD7iN3mH6p2qpycuJz3JFsBWFc72HnAFlUFgK4Fwvf6S2YwYBxVUQsAlBPXLHX+1qNLL52HIizYV6jIlNuHWDE/2R6BKgbbjYGrHZYZ6JtEP7tGBtEIHcVX5+gwdIKybgnGBFdO6wxoMey5JQRguZA1iZYjVpyoDnU8mNAoGUrRLJ8E7eSf5zmcAPk3TftRJFRwhFeonsGn3/wtcOYDZX9oXveVnX5kjY/K0DIR6Csix1D0iHrw+uRcSSk0Mqbz80jgdT2AehiyN0KIp0lo4PGk8ocUK5h+wZwR3+l9zGm0mdxEBbJjCtEssrIMz9B5p1xE2VhpGb4YOyX7C8o0Si+8kvJCTwhAQex8r6arKhQldU38gs4ItJ1BeXfJX32T4CVXnJyp0m+XS6R9q1H8OCfq9qQHXimIwhtGxKmDjNG34CrGAeye4uBg8XmYbNiB3ZN1d4TAP3wVrC756g6nYxko66YNo4gEqHMfEv7q1Q2cvL9GoyXji6pykQMN2eGA6lgixU8QsRZ8yd2Vmr9sl0+XTUGwCI9g1G2+9kus1+INNLz49mwNqfMnJm3UBAzdh1xyUkApJQSsd9+ee1D2BvERrJqTGe58SNFzIs90C2HqZ3GwlEH7C7AD8waqZlpWwH2ZSwR6dY7TmhQDBXybXC1Bmsxwhs4XLvTScwHPyKbPPxcDD6g0pthnkkClLtlWSKe4oXvLaMrTi8ZxSFH5eklBg3mWWg2vaiYjkjWZFe1a11Bo8ItpvwUdXmsVirZLntTTycBHtBT2GEEQkyfnV6DwIOmRasqZ+zvWff/IasXmof72zPlXY5k4n1GAFuHkzh/7ARp76T/dev1vh22wLteXtUBJD0jHB34XHpTCFmnrpnR99Tqp0wNTOLaMTq6J34IawRGdnUafZLs7ce8nKY1Gt9A5wdyjCe55s2zhNyJicWmCDmMGxivPQ/tFbwRMm/gQme33s7cUMsDkfZlmLgvBgQco9tl5PZ0eD7W7e7R5qkGDtScY90m3iiIz8NaOP1Aky8VilsvXjucLrS4OToMmQIc0rIDl+K6NMHAF22p+0lQbSSEqA61LnM6QZ2lLZAc8glLmMcvApxZxcCdveJ0GyS2G3gZbP/CiWfukp2jzyFeTayS+cT3HKgK2iZgN4ebyjNj3D/IuQzqdAmPKKvbLfhtUHcW92qNz9O/WTfB3V9f8h+/x5NQrz7LlhsQ7l2bZvLbBrExhltTtpSE0mYWsnmHZayoJko/pS9gnY5wsN4e6oeqwdRp4uWmfTHISIYW0RGbCFpKtLL1HWj16nzh+sdnIkpc+7CsuqtI8KgM7JSJ2MGbTGM3FDoCG8oL7Wvh4PNefRhk2Aj9RyNfBanDgkHuPD/Lp9cW5bFGFiWSsxVcrs4Qn+vTkFPpvpwWVPqiyvbG3cR+STUR7nTtRiGF1+bgXemfS5jI3C3usZbZUEPaGXfHN+UkNBFGWCQL1D+v4RZXGkhjG6mfuzVezGjmeJZcpzOqhuIndLvC+06BCS/AqjVqU4rjJTtCxMwkOW3xEIFqGa9eihD8n1H9f0N9ukE3uWxWt7dJf7WUPXCvKPSKlcWqx8zDNRHM2tgIDfs2gD1yCyZRbmobo/q4VwbhBMtsC65j+P+cvUOcJXb1CIKxwRg/O0nARX1LdkYM/WVLi7+MzzcVXl/oL1kKoGI7GMSr+pgMywAC3T/A+YwsVtYKpAlxZFYKEpG9CtvXcrT/hOYFMhUiiA6GiHWetKUirgi9AKjmxCvEvRDl5KQLHhjPnNXFBCtxdGR39QSXHKmlBn7vduzOltshqjIDRG4zN6EZEQfW3aRXRUkAe5jkfmJTs0D/UGRhzAjTtaB7/LbCNBnWOm8c8/wr2sGV2SObwwBzJb9DrSG3lTe/OJ71WSm5Ldki8GDSLAwtLgHKk3L3B+tfAZmK/VrMnozlO7uiLkw9g6t19Vsp2tDC8aKRUt+5NIN3ttwoj5kcAFhFpDjtf2o5Oo3FbS/jfmIlEuAy2QfClTuluMDIZeg810YlK8w7qII638NLyEr9Ghr+2JVDd4n71/Za36g9pD+dnm06P7yaWxjfMnl/mmKEM6P2ppFAg90J49gV5gbGPaZ5/KfhXmG3V2zlEhv12J+qDBaK8re7VD13lU16jlUCPkqM+tFKfoLgFD+rbmLrf1v2fkAuSLg/gGP5YFWB/qTn/z7WoTgd8AYLCZM0WL8kxLJBhJd4qJw78HFLzVaL+Ct5icBTbjlCYYukzpuwT/Qy+mbt88aFgjPs9IlrbRfn3Rm22ZY9l33pykrhRj2M2VCCG+zmEuHFFIPjgmlcetXytetX7sUe3MuYfFZnxkwjseV+bzV1AL3QJdNLcYw2xerXL3H2ym+5O1lBpdlCpATmcYZU/4nJ4ZkTGbOyMpJ5t+4hXMl/NFnGXCue1fP+/SxbSwnj05EQKHZX6wR6wpeIwQze1vn6Fyy03UVs9/Li7OR1l+axriwSlo00LskLxT+ppWWm3fvmoeK52HdoXyDNMmg/fnlrHYu6dxXiWuc8ZQ2OsbnL5zn0hiyyhP4riYswY22ZzBOUterCC+82geM7jT43fSv1fpjnfiUbFpq0OcgnlBLWRNiGkfUUSl80ux4sUWI2IWcnswuwlt33v1LVqQzgCj206lCUbXx3a8pVumSx9nS/UKoefTRVOLLCljtSOq6DjXvTTMsO2Hjl/WhIAFWMeONQ3pwEr5hldILZVTOHrDDfy4oX8mk3BvIHztkTLrs4O9Of2gVNEaRRR5ivsVJsw6AikHlpfbYKeP1wtB/v/pN3VFvtrIBOCszxU65m7Gopd0JKnWrUA7DjroSNQmmzcbTgBu3JXUdzAZCD9Z6tBQdq5CYocx9vk4fezZD6LtSqQlM59Jy/J/LXc1CNyrF2C2Ay/o5YdAZ1pRer0nzyuC63KwUWu/SHXAzDN7S3dkSfQDqeVW3VpgQB/OO5qckPPmK7sKUPrD0opxNyDD104weGlDBotPM8Zem3leWK6VUQnODRIyZIcCaIxG/EmIxTnNPgSfP6vgcIq6skNjdqug61GXCvvAwbo/SPLgxiifQp/mElt+Xr3qCU8aT3cFRf63Ko9xlAEMywalL3MP1fXoTXnbATL5olhn7Nm6lmxOBUfwJqmpyhCOIMTu6MOz2emfdD9B/f4vzIdV5Q8Cvw1jTapuF6Gv3QejiAaZm2Rn8MULQ256rvFUWi8h+qFNklG+nvKXf479ttnRdsfEJ1skjPHQaZuk0RjLpYwxC2fEP+Gaf0N1XBcZ20EKTNDIM+NFEpfDBnc33dMgRSAathS3iLh81rN6j5JvjDoJpxROEGYjPyM/5CgVWkIvCJCDGqYCEebk7r8dsXKoutVfkta/HAaruaSUZSj3EqTlL0g1JR7nDxfMgq+7b3GAddYZYvjQC4TdWTMYewbAkqWNc3KiJL52RREq/vlWah16fi3zIBwmAEttdsuCn5Yc2D+duyJxKurAbAI9/PptwZSjf5j01nYqUxGqSQW+sKbGrak+u2oDrbLu+EqJ1QVdxbLldD3xvzpU89cqs+9pSU+ErgfYDO4i9OKIm0mcpqnodekVT40iXHmTffVxpWzgTCzwgkGAw58glFrz48h2ICyA+vg4a1F2w/62HShP6hY4rzhY/XAM6Q9LaLd5MezNBBAX8MO3Ijefj06tAEA+b9EFEnTnAaQ3uN1siWMcMvfzjmFLR8WboZ1miWqpCj80dTikZ6Ks9XHxUsrfVoMpK2I1/3uFY1MpI0tEyT/fk9hje0yL9TDDAPFxNB3Qsk35a1396q4Nus8bx5g3S/Y/wBgv1F5u05D2F4iVA9Q4SlEt+LgILFyEfLasy+BzTcNpMopH7UOs6llHAWM5bLdainTirLJIGe+ycnUV4Ov/1CqK8QH3CSCzdn0TwIj7ALXbC420mRyO0Ox7YI/nQUXryLDd9Hz1YKxiWYZ3ZpScfh+lwlM01z7GPiK9KGRj1oF7FVPaEcx2VLdSVSh7lm9juw2wlqyAoFvPYSXRRJ0Yw2WDcbDEJ3we5UoX6lzM77v4Xm9b/zjR+/VlGUj/lTScEAMXWCh9NPlZkZjzpvtRkGYLYB/6jl13WJ5XHQUPmyS+pKvZQ1XzX07zEUi5fMk3V3Ne9Gzq6jVi8RiHnLOwrkIxH8NJP1I17tnLRQSMc+PVf4dB8IGlFbbmSd5VQO9C89GsNyFq0KEj7tFwKLF8izZAJYFk1mYgCeGrGmiioO1jmKbUGDO9NHA/T9UMHJYadbmFxWurei0UogOWnEumiIeKudXQLj0KR66TeB2pGUzFCyQVqi7T3w4irqd5Q8P7cPg1Bhw/qjkn78mHyzdVk0pPjdfK21X+0Baf6Uyhs/AaiPurf9k7xb6u1MFLBzXQXkAVEBt1kTZUQJTCUASWbGwVhhZrtd9baQepkJpLwHKGNN721QTX3A+7feD5PVPa6hdhknZPMvaoJTDKd89y3/d1YNZE8uXzEBd6aZHr0yfl+UYkpbwfYAHNm7brZKx6Xn6YlvjVg08hIj9+LTNgUJkvSfb/3nz1iUPWE60qfY3B7K09Ca5Wrir7CByZI4ISqsgmyTa0KgoVkMgcvlCRQt72PDxeU6Q108NEuiSp/MiDkn8yPoLoKc71flvYqKbE+5JviDou2RqhXjytUH2lWDG0v4niwC/RIRQcpcTAT3UOtKvQ6K4Alxcqxo+yA1JoIt4qch/DZYC9L9dqWJ0G3HWAYnQOptmrIez705tCJh1wL0i1rErlFMbcNmVX0JKw/AzgzCzm+8dIyrAAMk83dVE2hl25dLFdun5ZWEyZ3jOBM8Gc2N8BsXlLyRJ2n/8Z7x2WG6OJrfLBQddMhkN2fdSDCfgL0CcGMveNSXr9q/DshTaKtc+JbCeYyGZQ3onUbPiottnp+Sr0WqyW6XcYg9DcgWAqCwyYvRPp+0/ugtwe4DupOyYV+QCEHmZA4menf37U1gNPeRe+EPFYyQA7zpyI4L2S7jXp4PDUSLb/RUwFOtvvI1buPsoVjgJffcb9itcf19MgI7Icjkb9cDSQ02xkRGxUenrJLe9Q2O/rVzausLwHdkOUqG+/DNs1/86NMb8ZSOVYj4KOfgSwRAM+c/YaojdMf5sTvsFpqjXi3RaoHbAFkSS8b4Xh+P1I8rhnXNPSL2DLTLbViXMealM0Ntf/MRirm+yp0FV7RBpKbCLNi9B6RsK4JB2uh3i+9ihAy4v7cLhtYx95KfqZxOhIR6sxgYWKagqFWMEBJ00VBnpgso5eZImfeYauVYE2u6dF/td27NNtoWjQeW3J8/0vo/dLBm5wx46uZ7wnAP+6qxtUKYQ/eNJeZfHQPzg0MIe+rubkNOcrTHuBJUKBJqFlSXneOXwnxtOsS37GHwm2R79aamUVcTNi1LNm6vohPRvOPI6KSLJVSNwujrFHWji4cjLSpVgBEsCN1x/MfojnoxLGGoqG5h5Jq2+jhL7SH9h6SAFXtyc0QBauscG96uADudyFmEcVBE7A2Aj6ZIbpiH5bDyVAoTtcmula9n7itDVSjoPw+k6KgOLf+OLNxI/lTWPAMFb7H2S5gB/zqsopWnX+axgvaFKaiQvFKhMI+29QATZS5uie549XznsOlyhnLGs2NgxZgHsyTvgqONA48nPnohdL7yZcUzZ+3aBnc4N/Nu7Tu54VOCzA0pC7TqtGikG8lb25bo+jojTegeOKYIq98MInXWpDlneq+5PnY6uAnctef7CU+FDaN/mzhC5Ouo1PzVkpAorhvWoWPeCrXOTd/puwrxrvJiAlq3rMWzMoi3hVY2HYeFO0D2gNSjb6tE6ujBnqFMZIx8qU9AIIvhThtBsuD7hrCMOYzz2UECOkxwibl0aQiIc/JSZIWq6G+tD4rHf9mDeyccsc9vspzQMHD77ZfmJNWZbghwK5pcK6ZEULkCiik+C5hggg3jyN1m0tYMhTd3AdIg19Vvb8A+yiMxLgYTUZoPOU6wuJLbfo19r9mxdMcIawbNjSGh3GcQewpoj8yf3H1xl82h8uoNpHnQ8uc+5GKC+vO3P+BF4C9i43zyzH8Rj24Dj2U8bGXbQt3gLzDyJs/2NrVX/g4JfTUcg9CplY1I2XCU56+GrvhMMocsPShrRZz85oMmR3FiaYY2Ha7vqhi41daG4As0MMtbwWVz+dmaLEtm1TOR1LFiQ91mIwQ6ZGuX3wiNL8FC9yk+PR2yzJuL/LKmBDpS3tM/+d+rzv/o/kLGl3Yi+Fupd6OQ8tdkrfQLAWSNZexj9pfWY0vWm3cK9Sx+mnZLfB3NUFGNVWZwMkkNJqHE0atEtrOS/epUZeay4MfsXYWodUPORDPtLKe8euck/CXa2Uhu+RSTX1FFEZbrRnrnwA7bW4ay1mLp023W7vQFc64LGiMF4kGrbjWJVjnuYH1aROXxF5IjtqYyo0mXRFmyFNYhn+jqSo+A8JX9xVCFq7qnAmpmjveDc8QfKlyXBpGPLmmMgjqgh2NUEDV7nDMJCLXMYuRKEFYfxyUs8NhvHgGvP+x7LnjihcvVPSd84GL0gSmkjxF5+6fLY42/FHtZPzD+ZB7PmUMMqQ1N89eOWWa914VhnBuonPWqysLXQ0sJSkruZKrRjX2QbLEoQfrMw0RCI6utS82SMrF55BIONlVO3fIjjLv0TgayYNyaAnStP7tAkExvvLcHFAeeF3+6zESC0csUXUjgERFWcJwZ60pnkdsNPcmNOB2XI+NhNNP1GnrXVtj+TbLftUAb+B7bQmH5SwgE9u2N2rOO2vRcfztmZtTZF43gHGQhSODadPLwkzOyKFnmCwvHQme+ZwAYVnkd6fUtQUf+QHXrBwjzYfhMtuDw0R2tSHYiO5qO4ngyu76sem2dhuIAcV9Ocj43mF9+u1vxQJHdRhUYZWDFO7b8xS8iJwRo3lfhYMicT3gmNtx77NpoIpLh0jOjAnrV75rmfctfRXlR3DEDfJB/vnguX3rf56WOpwWCSq4CFENJ09k1RWclUPJm1TApxeYjwMtsMxq1Zi7dMe13A09DK353xmKpZ0t+7VS5sI6HFTSZOkJE/Ojf2nUVgyE0YvRyL2IDWkKpoHMPJwchQi4+zDjV8ApU9Z67m5Di18a+TGJFSCvKfImZt0LdWSAOTUh10/5uDEVnr4dZgsAYZ11nTXZZ4hAn5rUizrCtAiRzWSK2zO9TRsHIAViiBnPHdoHbGc9T9NNnIipuUgn+3Gy57Q+OrQDjupqEXMuyoLF64GhifOmpHpXkyvC8/o0Dnbg7kcXg2QcxNQYLJkPd8O/dB5PZ6DaBeOmlez+kU+QikLFKJbKJyV0QINvkS056GaWXjLEfnTB2/1Kv73e3xgVgk4usjtVPnld+78Zd1GakjJeJrQCN3vCpb200tGty1w0oFG0eQta09lSmx173bRTv42HOc9VmfMLvywI72KTTtk0kyyaoz+nELynyhS82t6I+qfTn8+Krqm8cJKlOLg+4kYThnmHfCxrFnt6k9dSOCXN5d8zrS7JNph7FxZFFd34JddYPoHnMoGowIwSpwsbtrUhdbfCnGKvKkM2lXUr3El5fGy6SltwGo0fGhgX9kZp3wFagv8olB3+VxxM24ef0VrE9C+AI2VHG5kkW5MY9XWARnIaUtpkp47b/ZEuEt/PONP2jiepARANXPzLHNuk5LY9NkIekVlFuPFJsgNl2yHgmMw2ooYCwJ6/brtpu5N9jxorKZeaXZ2QaCMIr7L0bSWoN660EGU+cw94/4oXqMpmKCM4DbGHwwNHyEFNKp+RjPHJSqu6cAmqBRtRzNMXCOrcuCu7FfqsT316YeBjtasEVigHMdiSd+4ojs1kTYRF1d+n2b3E04iWM+oyCy6AEr9qW+xoOtqWgNM4LiN0QUU1UJiNCqLaHGt52toK/GQgxAlY4Jjn4Q5Go1qZTlRcdsCGS5NiSvfHw0Kws8S0nzDuyQfMZ0phfwNjelfZgr2ZQ4E3u1Qw3t9qvAao/Bg5s/3zCSCsi3qufAcbp1EkH2Pk1IHnW6pLnlCD+2RjnYOePzqd8UpO4r/vH4eBB0LqvYaNtta5A7GSoT6+LiOmgPbGsoVM4Q/ha1E+H5O4xyg+VSr8WDPjdrkvX7jwRx4feNKH+3ibExbbNypYGDfCsozXPe6h9AiGCDKYFhPB07J63zaZl0dn5pnZrcaiuDE60Z4t4vQoljYjCEimN/QrQCCqwvSGqvfl5rWV6vxOUUTwqMdo9JR/cC6+NeUTF14vvU6Q2/qLwhHAUKJqi90b7GbGbx0k3lj41cZtcDuzquBXvAsKl9au/TO0fVzqaqcu89EYJpSrZCT3NbvCmU7w4+vchS1ppgffVtbW81VRTkv4IWXkEtYOYDxfik9oXZbTgq6UngnsmVAWjfgXS+pSLNYK/4JagFaDzefBYgrezcDV46WGRxw2BFt5gcvjXz8d3QeOJDAxcpxOvS5Sb7D64vld+l5VfxUzbYRuoS/aPPXilUXqCHMSD+aKC3Myl3kuki1Jim5efJRTAABeGt/bASWjzY5Oqgn5ulgir/06uVo4rWCLme56swreEubEkxkzts3zBYQgGNOpjzW1ujx2JOktkYEc/7w2J1YBLQAaGdPl15otNlg3CMW7p3boIuwl4xbigAniCfVmjZNV2sQ38SDhuMEp/hKTUpuzEcN8L3l4vxaKWpi7StvJMC+szO0T0M0oT2L9HArOAlP2qoyXe0U5FnLqO703exXbdffblNR+MH94DeqEHt1H0g0fMRS0P56mj9hJbSiee43L1UVHrJ48r1T2HIEHk0XUzfm7c2Cr6eaK2oiE93kxFzXMpeOagZIANY8MgFCpbjyFjZNa+HoToXJBKVaWUo8MRR/3chRsBV7jg1X67Mdrbapc2/AQJRB7UNePcG5HWxOxeAvXNHQpfG4BZSuB2Tnt5nKI3ZMCHJXPMdFah13sF+WkLJAf6S7d9z9tACOJGSPydSm/7XtN86skeOe3clldopCu0y7TOczg4C0UVXPK/tQ33NC/Z8W2T9ZzhZWSzWHcNZ29agUbEuIVpjs5jG974M7JAYyOMxBSXYereV93BCDIINUQUzI5/TJ7sSI8dxPaC+FfTGN4ekVlCJnh2r7qZZ31RTfMxkMe1q2hUFQgZohqgnxK78sR0lJSzUZCPBej0tP4uBRi18n/Xymx6IhnAWWAzeqOlq+57r7CtMu1G7mT/J/+3WAaq/3i3Uzn7675aBDrvIj3MjZex4IuV+UzLNh0dTFTMy+kFAw56RbMGYUBGS2CLGWQrRy+C+y1deFXpDsFG9blz0eFt7xJqIbXt1URKPLZQdA7ZCadLWFHFytjbetJ5U6a5TNJ4Ac877aIC6XtTSKJZl8h5ShGPgo6tWRFBQM9IsPgq7JhLajxZPASAstd7qfltjuk7OZTme96e5Uyf+IerLDv/4cwM6E/ZEg3wUc/psH9ph4TVFz1M7yZcP8bezFWUnYJCOvDV0AC4ft7Jp70jkpEWJa5ne3FWdKXL85xJeLEw5ncPaIJuDq8XfN5yEIWr2rKK947lxLncKylF5dn8IohgcRyEy1s8zQkJyrAk5Oev3Fmxr/o+gLQ2puJiG+9P7KD4ZiyQjyuGLdEvYjwHNFu1p+/9KeCaxiA3u+RuuULGtqxK3bck5dkb4TlHGBhUTy9sUb60hLNWyKdFvK0Mrdb4aGNWOoJ6ZflA2kRcFtD0MKm7N/NDv+FmxJBjzIqf5PS6gDxFZ/g9AFT9sQYgWp3TkjBOkSiL4sObRMfZ0X+GMJaS0bz0jG4UkFyRzUAgLvHcdvTSvBYykev6fwbWShuIaChVoWSfP4G49AVlRkkhxKDHwJEQ9AoTWgnZHvyKKExFpfe0yP6/OHSNY/l+v5DuFOCVWcrTkfFANvR4OVKWRQJro6dZ4sD9VMVY0CjKR4vFdxpw7pMqZlM4eT9KmvLY9GcZvshle8YPUBQYSSKmsbhchNjLvZ6gcaNEarFjblifPiKqFxrAafIgEhCwxp/itzGAfpQWwrr3nNPptGJFclMWb57OZrrsgDeRp6ZiTQ+jReRU+yU4ZkqRdUBQyzuqtzoOnvVajGOquGCNTrEHW7AjBHCiCewSuLi8g0tgSaQZH0RKHaFV2tilP6n7SwDHEwLj3KVzvj5JtFfyYY4iDjNrN/bUTEeBGysTjjsdvChgl8UPA9uJ9l83EpghAAjb8bi1QeEwhgcxMTRz+iNdSXmwQfZl8k+6s1YfgcxZTl4SqynzOzUDH0ruyT6hm5ztHTbaLniyCxMCjonnIyXQ8E+F4IDS4DzeqDafnp7hf92gDjp8ep1d3LOimPAb9y3DkxO+5JO0ihF3z8bWUR/hPZP/p5SvqieipIgkLPBk3P1dQQnp/JwhFTEdghys9vFdRa8Q7lLpmL4ja0jXhBV+6PPYrOuducluJ/gveYl1Y4vwpx3th2sjvXZg8jblhcCER7Xi4DKpUQVsEe/so5FynrH+meLRakuO1wQQVtfNDVLAAw+Uq8QPfbXvDT9HT/ru9rM9bG+9LsNp3FcHJYVjGkJyK4GnRfM/NB7/hMmr8hKOcS/0QoLr8lueGkWUDOVhbaRDfD+gwNsIJhQ7dAdMRLf0Rtnc5JXquFmaC+2Et3JVIEyudRaOL4lhvZvm1EG4M2+vSH27a994o51S7r9ttJRy4aaQ1VNy8IOItr6wwZ+uWvvlF4DlkveHBWQ6OLbH1aTQpLgDwnPLwryy7iMrxCNCAo4+RvfvK11ihcFdM0ef2bRfmNTJK+Kp9q/jrScIeRcVdIvni48Sdr79vzHmZn+HY+3pszrU4zQ0duFEFl9fDt1Dcd7WrtHPSXKLcxIihmspu3zBwdKeCQe0btceocOTOLsJoJYwPv/uBL/pbGcZ7i/1A0d+YC+Rd+0/W9SB/BqKuIjFuA5Y40yoYGI3DNvg54zW1EMJpkuphiBRYtOpDFacGpKvggQ2UF4+xsdk0AwxpF4TGAz4HeaacyC2VFFdvplyjO95VyNqGC47T2YT0XSRYBiLgjcdVPeCv4wqPLOK418WUv9lU5VVpGr76wppLwx1fhJaK5ZAnklRCbofHq2zQp2y0JOR/qx8xRkQK/9ShKfZhURMPe8Yighlibd13lPYhwmRvK/qDUtulahB+iKRu8E3tJ1zTSJm2AWv+kjzbCwxRVaDU0HXd4AZQKoiqmPyNTziBcpMYW8AE50puQXY4Om8Q1RWqQM/RXR52rqUguOtYanPXxFG53yGY/gOSxsDytApNAyl5U09agaND5Or54S6WwJFSQIf8gAMnq855v2R3S8JXhr7+z81q6N7ywEFmOkGSW0RUSKC3tMZTVCQ6kPw5afCuAbhYf+hfXeYMtbJoCkkF2yOTTs+wfAZAAeiJuzv5wPEWhANyRqzs2OBYllqDPKOY9/qXXldxluETzpFTJUZH5Fk2iS6NK3432QGqJyUoIEFoT53VaRBDiE/APKZI66CbGVJX49lOSA66WR9OMssYJd+tEGC5y4+On669UTpSrRRfkspghz+2ShKrMF8dOHV3Yc8c8/BIP320c1CEsC4sNL+FJbZRMvHNitNSfRGN0E8k/MCL1hhBmy4TtzMf6imr2TPoR0wtpATal+RJuq3xB/i66+ZIMcx3anxc0okFv1EauwhFuO6DQrcnqPLVXrAH5jo1gh08jrvRm+g8dQnMLSsCVGZYcnifUAnLiQdb+LdYp2VyBODg18IsIIFgD+RhorBl6yiMHK3uMfV6/P//95ERaPi9XGjYnzqjnJmKq6OxoIdb7HwBZFnXpKSwmw97JE6QmVYGULuZKLAqeHoyZuN0nmrAo4Mrav3J3fzw3dW35OQRRdyiwwkHZFLxj8l1GHWtuy0QYN+2QIf4v5dspAnWXOeUBN8/G3iBXyqxc0XXEzKREPZxnK/IdFwqF6aaAQF5RwF1P7JS+LFswfJBQ3c8o+ByuXC9BiUc5xswCmsPCVR4nJtG24ArF+lzzM1deMlJZCOAhfZ4Dqqje7DlaN+7rWw39qd1R7OAXSErijakb+5YoPZG4R9Q0nEhiYH3iFUACY3EXfEfuH1vDILNxMPzoE7teV422UiowQWhpFg1hHwVSjrivlbvb2cSpa1o+0djw0X9XVjtUp9cslTPnBzMgY8uwub3R6wAo2i/bISNHm8gvLmxGFS6z3ovWDpiOW/dD60+tNkMJ9aYAOeVTCEPU53QZ2DTrXZ+4n0Km3K9+V1DU5sOW6ZkH6AYTwVb2d17OLhcckf+F0WvR1TWwn2tJEJlfkf9iGV2WPKpumEzw19qx9GzFezbE9LDPFmHOr5r6Y20QM6UFVqlTpyQn1dL18eogUWaqqq1iTUZjLNESOeXp2orzPz6KhK+KSDxrbY5xAXSh92ffIfE8PzoE5zwALcH9C8lnoF4m3okfyQW5OX9Rb5rVtwoODISz4HcJlzOHUq+jO/aGGxLxWsIZf7w0oR8OfrShfPZXoyYma040BlIkxElkBs3XkD3CLYm+5peFqzH/t/A2zTEY+XqprXlsZ3L0GteF8ZdW5RflmA8dT/N39yoqPr4QyRI752o0IkyDxKSWg9XFyna12T2UJ6RXxXYZXkEQlUH1i9arpXN7cDxW3hHwCSqIW0Ftd+o9l9NEAAb2k71+4adOd1KqM9SN4Ec1yKztn0OhStTSXpNUoMkZm49k9d6m4b5OPWDHpO6mSqzWPoPSKf2i9xgEVaOQyvm5NOLSEmw7da2N2NPnPQWd+NRI8Zmus0sgDTlJiKx2QEH8ucG9mY5srAwyiTC6w0BKExuZYhogo8t1ziSocdC/uhH8nVwRhPdj8wKrwixqOBkVIOy7oykOkaWFV+1pCoXb6I87uNLpt2vYKT9EqDJ15fUg+1e3ow5hAiIZP1M2fcEZHdc54mEmnu/cSKuHGl1OjSY4MkVeyCbmFfppW3EUXTe1m5MTnW6hmS4uUZK5oCGxdwdS4twECsv3CfMaXYGaVNFFUDlBZLnzL41LF0x750zRfAipGGg1VVu4w0x6NjDYScxZNRXlud5KoyE8N6AiHzrrONRQ3q9xkSgxr8pn1kONNdIrd5TGnOyXvxy0X83elNZ6Euto2Pi3HyHhv7vw5pr1fSCUmPkgycVm3/zhcTprFBru+adYWD0QLv2aMotdsWVNFSdip9AO0kd+VxeTzRfNZBaR4LAUukK0e9RBXShlo/AcYJIpsygLAeBCkJNZOP8XvvLGYo/F3o0HUuGFllvRCdZvnBFUV9jBdrGLoc0ec3GwE6RbgFAN5NxbvDKbmu0FECs1U05BHnN/XBGhPDoH9nIXU6DqF298KH9vQJHwt9EddCG40TQnyjDRKE/1EmPWRsEtQLw73VQjrHO10C8+0o7PnsWkFKY74hD4PRhvLkH9ebb1uFC+wPfcaTpAwJziuB1XaZfUzlW9PgID3vOrpCzq8R0Scnbj2w/b0WPQ2Ah6N6OK3Bo0YoYs6r6VQ183E4PpDcgeP7CYbYArmTLzS+SXopf/QjFP+pceB4UDq2KKoXAHL5WyzXVxqXpycyDQFZcCt6LLHER5Q2oQYpUeMQB6nNUhmh5F651ViI/v/7ixUgFBDqXjm6G1HgyykJ5eTvilsuUfKl5IoO6oD4u+qB7aj1EBbHzetzDhMJwn4RnPY7++0IrXQXPFDl537prAv+Ot30imZblN3JdUL8ZzvLQkagg05jV9WmmSUnsOxgzRdZhyr4IxABBD+nz1Tybtdso5/NORyGlQ4gK3+Qn67pSjqAEI18iTJHF84Swyw8m0P+uRMybuX+cJYczkMMdLjMUX30U/vV94+dwFTunm1cn2CwWvqobzDIEnnSP/THddrO6bpvi0+IBZgVSofXM2LJ7e1wJKxxn1qf+B9xVENBOIQvmEMYGl3u5MoLzfAmwS0QWvYB6qv/FffOPFXMowLc92jStzdh7cp0hG4BsD7OS/vtCrMnWGLuvgYgGpFr/Ty6YfVhHRyv6FCzzexp0vGBi3Ybb4e31Q6U0nv8crmYnBuLbmuVT+oy/ZPn42i+CmX1Z0F/Im4iqudEhyBmLPkC89caFfpVvFS4g18YEhvlekZE4L+g/kpC0IACqzu5Vf0S8NsYmZMs6m10ZY9oF3OmFFHzgQkm1SPnb2AUHYdBtnHW1kRKtcFNqgQM+LoHQnQDa+kBdv8iiyGmUK2nYWkhtZzNEiKzDPIIskhAsW4i4qmoKUaCxHS1JHk4mHZGeLbFojMemKVDLPKAGhtFx4XUgn6PnSlOr0EiLaYTttp2qa3iztpWir2mRSSWidRZAHiGCY+MEE4IfcxmZmc7p7VU665YxZa+KYVCSj9p5YJ/cvnzmBYzPAll46Ya14E8JxhDpq4hKQDQl3r6Y+/i1RSjzid9Eo9RRBE4GRX5zTDKanAIQoqUg4puTZtey8Mw4sL+pLQz2myxSJNUg8mbuYl4pfnFHATJ2dTswIQ4/rFlMwusABEgE3WB6SspH4dWAg4ULhKo+HUBqL6TQUTsz7AM7eAJezN20/sXBF3kMbv4tRQxhUcr7C95zuZh38uw08Wh19Wre2LUFkmS3KXdIxtD4j85hj2eGrSMoHi51F4eGCPWnTnTXzBrrx0KoosJqqDhrk6LyZXKd5CAB/c+pKqxnA0v2Q1enzr+VTEVBCtgBpbRB9CsZBSR1Z+WlW5gVZstkCxU/bohvhRQstjyOJ4L+URdb3naiKELdzTgSzElYZoXalAV8DfDDGfIjh+4cNozEUAMUJl+W5pLcvVTxYplYaRFVhVe1AoI22LwSfLpF9uScyJ6lc5rizcH173UvqTRlqVe1zcCUx3v/SsWW5qy5C15uaQh3KeQlCalqlR5ZmBgjzR1PZlN90LPJ3qNjh3lh23y8ChtfD2LmmCGBZx9Z/piZXCVwsf6SM9GmiRdWKiRBN5D02ZJ0E1AY9gTpjGj95GhDAx31Auv97Mwo8amWezPxvjNRMvd1W0i+MSWk/SKHcUtdk6b+eAEofIYJ0aq4GREMWnRBf3xt1dPXmX6BiP4LacFqNovsc7VcH1IfJSwslgIjcc0RoaKXOvrYutOjRwBhY3ugOOtqi+HWDTcgLFpICxPb84X6X2D9bXwGVTyVn0u8v8ukk0WR+Ut7/JoqtTzWm4GZBS6GUMVmlsTcxm3Fyaby97bhUSWaPXl1sfKslacrEh6TSx9TIZM42uc6vCqo9idLc3waQp8Oq/LUilxRx8slgCice9JKRSeyATj++eN/dCgDU1BBXM5aw1fbEI3ZLQMacFfDK3t0uUy7Rd5CyEX3c3vKPMpB7VzERhfiCjFEVp4rEiYOUUKN1SbwjuSd8TaqVI1MWQMVp36epnpsRjMZtn6TGtBVIUSzyWy6cEVUwWDQDocMiAmhLK4EH/4z0qkuBxWtJY9A2I1VqGDWZnDoHEMdvuWwLfsLjyqXed/bm8iRFO/7+jJNgEsWNOJ8n/D2OOty5/xgxb3B/eeGUBfZNswirhtj3x6Ba+JK/O2IXJjllZEjqL5MGIZovmIDJeRg/03EKFbXnwAkZ3kDfdLH/JoWwv8LaSLK7v9wNEc7Ue1A6aHhwoVLwc5oNGR6kmKmHQB9o//pUiLyDD7Ul2wV9HNmesZjbYf4Qle5yXoLCDfSjzhYS3XocTUwdbK1yvnAksPEiPwOAQEk+WPfawA4qQjsgAPc36urlrx5fnQ1qk0FgSfm/DT4+Y/HnSlX9fZFPYvt3IvZbPkM7U880gVeUIysTWkFRTYv/7iShBYDN/0bYPIk4PH2qCE8bjes3DtI50doN8+JiFGIPkAO3204X0Mt4z9BQyt1BAcREH5pz45QXGOEMxO8tQmjDMrzm+DhYo2ujGI3YyiaOimPbVBo4od3jjwFtRCX04wR8wGWsosU/pFXhqzfyT2dQIn7DzZXwYK92qHNHTptOV4DgPb06VxFsLHrc552YzgJSsCGDFYj3bVmWbyhpxQz4YsabbXRtmCyU2iK2emb6y0Ci99ZL26kf4s7+bVNQbBIQvlLAVs0vk9qLCkdMTf//R/tN17rb/wjF4UBX/IHAjmRkF+EVDfQJJCrEtqfowtpXT972C1EKhU3EKqtZmiPnQ1WoAxHLeGVCmVJsx0QZ7yayNFrzfERcaLj4YFVz1nGmVd35am2g9OUJ2sHTYFNaOuNCsOytghyx7wA5Jg5JpTg0qfTOPvai6KnHWczR45JkA/1MlkGN2Xc+nWNDGarraLoj8CTuPUdTyw2YljxW+MjnkncP/LxVMVMRxkKsKXy6pDbbumK+v9/ZWuy5auYu526Khannth75NnJ6lDxiNxFiwSuRGIEbMNV0gdu/6weVc53Q+1ytCqLb8WsT/V05uQYe0RAyf8dNLBphkAmGFyIBgRCBOQFMd7GKjcxbZKoEg8HnhXX96svctBdA0eHVRT7/OgPXJYxZ0dJMMGcu5FDbWcKpraA5vQWWwsM2tDFvvSnRGlt4zKlkbGlVTwgXlLMfeSqUcjWaVlDWemm7Yjgwe7NdrFCS6jbOCdJGU6QBCurWIZJGg05G6JdehFyYouSRO3MiNkBVYlsrhwRZ52mbJM8rDrr90vqDe0dsVn3GM8UBK9/DB9fovOJzKVMAulkJiZ/fSmg9zrWAEtPbmYEcUxpjojCC9qo+O0Rm9TbPK8ZhIOTqDGYRanUE7pUEK0QZwgLRS/DeKY4pYPby+MFuXEiGHRnulAek6ZFDpGHlQrJ1EWVgdwqQ0Mgxs1/XHynE++L6NUErNbK4H7GOVq2wZBH8bdhCxomoq0k9FHjusEt4cHKZHC29P5Bs13NLOlw7NlLc901gamCDsLrQF8AyqR+qV0vHUAJJ84kXs8yaGd5C7ccJSD9f2/hVezZLH7zhjm3pTpkV5g+eXCC63faC/cS5DbvE1OV81e3SLl4MY+HYprBI2pItKnFzyWqydo5vXZP+iskvUVZ2SiLmcGWvsSu1EoyfdgLViBjB4mNEJr9Wi/Ek7JAMPvlijQYbX2Ij2vEza1Co5XlXlKhaw/aZalB+hyd5oACra1SPVTKm5tYDrRMA+HipjZSNOw/fRzu6NVCKJKUofa+sbHEuBpLfHFjl6P9pEwx9k4qrFfn8JitO0/YSd1EMLOd3SMCGQ2ebqmT+I9y2BxsVFaCGvWBNjmxVvChY5Bt6tTFqnSr98Fk9utZTE2y6LiF+rePsdz0XNWjekjm2659H1i5PvRn90JcJTt7fG5HAV6zFoPIc0lPReDvPFVQTxtniZ3fKoF7PcGvxZwj5SvvM7Bkjns2eqP5094b7KqEtPA3tJedWILmbm4sf74l6uoZYBSlkZWzPy+R8f0alOrbiDeoOM+CjJjn2uTMNEAef4E9HHYcRNNO3v/OV3c1vwsP9KNpn+Qe5u3Yw2PzdPfdhG4XWcc552UPCWovERuZp2Yce/dc1bYN99DyeJzLjvQw2qHnXfQrzMnEDnxipaJvBSWgz9piX3JsqqkQQiaImvakrOdE76SCh299ekRJtBwpAtcKls9H1IS6VcuQ6t1cw23rnWNo0ASxwSccbURU60myy1UZA8iaYEFdEPgLvQo9y3KPtvu9dcR2eopDhXYx5rVwB+AXKPxuTZM8XF2h1KtTdzoTdMMBJ8a9iirNRh/CmWPeSmCWtkye0STHGEt1VWJ1XXHHaEQjRzHKxhTIN+xvNr/WdjA/5FVabcuOL400Rb53OhiHNzMW111cnLUPI6iBuTOVnBWrjsiOygbrkBn0SbTzUh743FonhaAGtVZju4NOY9cYYbyK9/eMGavSImuFjQOKL0DOwFloeTXbCSOBRFqZWs9SmAhVvsUaiBVx+sfq38KyGiomjAXb+fxg3/eY84trWx60QV4f3EaCe2iZ5ICwzViXMNU29q2muN9rQL3ehjuwCGpE56iaKbXKGQWiWF+Tlpxqg0YEwYvDIPUBSk0LRR3X2RAK1gd254KlV0UulAZxP3Ps9JWdrdzWTOiklvuyaPaNc1dyelLB0ydOut246VNkd9BREoFz0T5XsLRC2sYz7LoqwrQ7OEKSYYe4IQA3+/ME29GSC3AB+jN53Q0tKcQolY3G4x98IopFpe+ozfw0SDUVBhVjeGNM0xrtaOoT5AbGTfo6x3P+fCmQ3ei5p+WnnJs90bcMEGdLUDzsi/9DmhfxC+BJfkdnE4KlzLf9hq6Ke3OL/FTYgKZRfHiV6gJNr1dhwR2YUXS38YEmFdIgiPSMHxJ26+acOENd2dltrJtFU9ys4RHodBPFmZXBx8q9FWRt6QtnNhjXEcz8kBCVyDLeNZEp5K6qrX39vUXSmITmqXDiv1lLJXLOAb/p/4Rpl2JRZ80eoSOaeYnSARdkHggVtuyiEop4486rdmC6j8RSqbe2JQs2Cv3wh8uBEUb5zqx+AecqqbctsiAmlvS+ergepF1j4+FCR2l0KHuP3F1msFHDrXtFkR5kuZEcKZAvrGkgdnC/5vVivr13S8GOfMLDSaLAbXMS5SGI6VCZIOFseuNl0GEp9Ie6vLXDobYJutCpYDah7XN2A1q0xPpbeEpExW1yS5m/U5kMDONkkjJaR9RAtZvaB7PBpgJMViiJuNqcpFghLinwm2Qfo0hIQifP800FrAbJBxVwHaoHSgv3skP3DaYqxzGPhyFHkenmnmxpk4BJ/9pnHXg9cJh4Npn5BccwprEn+fPZHTpp575I4/1Q0r72XsxS4cgcnidHytPmJDoZN942PgqbTwXH/RpFmEf4TRJWNQvtzto7QjDHrZ/hQZdnkAg7Zw7brHLrnk9+dlNk0aY8FTi6/p4TU1MDjbwSVjTZWGebhhAiGNVnAkFkrVAJIiD5jj8Tet1Nd8TWd+e5sAIrpYRBOQzUPafyohUErXopB2W3Bra8Ffy3Wi45ALinqf+NSuQAe/Bic8oRV9u/HECXfDunMNrzzB4ZWMmyKRiyB2D/IBKSDXor0aLsbdLCBzFRx0X0W3VFMtrjJ3OxC1Zu3AvMKQCPHlc7XO3p6dfQ023IJkE9qkIqREsjfURnK06pFAW+iOl3ExYxJNZ9eDLe13BJoJa0BJ/63JVEynvCsFyv45vyyLsG4G1SH6kXcLXwAi7dTur5qU6kUU6fJ2XyYHmeOBdAgJd1h+/ZNwjjiZ+covGfsiXn3uIvqN7SBpEeZcLUcKecyACr3WM7dadSUOTPmfoNyt9jco/yIgf9Fo8WWpMWEeWykLQ132KDbADsdjK0Kimbv9jhaS21lk5gXI51d1M19C+a3SLDjY3/1IfTh1HJD5mMmgQ1xbFQNHTEWQg9DPpI6sxeStXZjiQz8lFxZqSLIozgOipoEiAJExt8mahlVlm96Mr+aHvBUZSHubAuUwt+g3Hov0zlkAV501brCqFJB3EPjMctQommOujeiFM4FyRo/I41yk0T01EhPNBYqfcm+P2P6o50UAU4PR+QNpbRMe/pgKZrc1CLiH0cWna5teE71Y3o2KG66fbaxeV485ZYNIZhrTmFgt11ZYOZzYh3j1e2E3aom6HYuI+bzpIACW74VIwhjhfm4zeqhDW5j9dITX4FWOfAy51Xhe9O7PqcpBsXQVqbJIshnVhLUkQibQcil1WsiNRaQRT/Wfr6MZuvgzLjVfMWFJsMHxracw6LO5LSuuoTKUCsyXRhal3dc5cXARIGs0uLMEwuv69KJsiH/bC//ASt6Tz9kNYL0qnNYwvkrWjDNK3885Yvimv8KZBb/azxYJuoQrunDBDSAnfkTrStZkMbVJxl83cqpHWQN5WjRh8lgVQ3A1uB2xTeNN70kqilEKweddhXK0Rq4ychSilTcuEA4/j3y+x6UMZUZ6rFw8PQBpemfusaKOs/Hn0fBzl54k1ygZdQi5Y9h5wUHOop22KF2JJzzET3esmL34PPUqqbK60bcmktNERkAZKTv0HgLxkKv4h2wqFwNSlhv1uAXH+zYwque4AQQ0Q43DwK0BWNdRUx4SZNoZ8cq3nofp4v6Ns4YLWUFG4nZtWaB0i3KMNLhIzDtghdRGfOwnkcWmFLvBjpANl61i+qKI6aBkXy4mrmgofBp8hzOCE7ikoszb3os4INrs8Kdg+1801OHjeNT/9ATvxtT3Vz9ZL0FwP2+cEigokjTdKHWPFMRDRyLum8has/ClVu9CGfSKfKtmwdfHCufb8seyIRBAK/A6q9C5LVdSrmhWtNw+M+XekI5k2WpuaiXtXmQT2byKCh+4f2c5MptZnPTgo1sJvnvF/gCV6cXYLhUovh2e3g89kOobmm5N9u08fTOBdcWdiXoWvEdVxEt4aWtvpZfiYzzW+gywN4yLOqiGKFIhHgIj/uIVjzYxXyzvvGNaLUWSwJ6xe1BnflTvna5wKRtL4FHwsvgFRg/RL8NoiHd22Bh9G2KkxWHnK7WytXoDi0iqOjXCIBTnlAERuDOZ8Mwajz6+w3zme3auPck+ve0X13tzcE8Jp6rky7K/lqTxxytlx6/MsyUfwG+R2i7CQLP608fbstfUlCaK5/mQ/xBPrm2QcAar3gtvVD7DDEWcLc1Lb2omdvMze7sm7XNZcbLyKaxF5tKO7WinvAL5hAtZPHYpoWJXr6ZJ8cN8ZMA5999OJ+j8pgIE2qleF3Ffb16ti774f+/cC0Kc+S5FXomlHpGUDzPFWiKc2RAHApa6h//9d9G3xtD0doykE0P7ENJUW+KjnQMndoyDOa9JjBCrBo4PEf6/L3wwYTsBTMH//9JqWwytCtizYixOMMmeFAecSj4DvFSGUeH8zC+npL/6UqzD4K0V1I7rowZNP8GMp5VPh/RJ9Rj+eCn2EDxcXoXKWB9kuz2650Ydr1ZQL0cvck8b5qYmS6vFpsXdmb/YJUcyhC8wG85/1crFwxRk6MF7wouFDmolfhg1qt4R6Ac7hlKTtQTLQB89oMX4epad/t362MnoFit6G1buI7QjQfto0Pmr2LlgROKQkPDWbO3P0tBpCW22K9yFB+qefg9xnHAmyfa3GeOgvIRDS1GcZkZt7mhmA9TD6UcLxOAGEqqtgUlOmSNUvOhAixrFzWMP4UbGlGgZwN5thDdhPTudYZZYg34PBITxzFygRkVXlpG1MSmvnj6Cr4XRhlZaaUM00MNsKuh7JYv83bAXo2BoemoUNG7bMiOSdZ6orfKNYTKKyhiUc+Cb95ZJR5ElriSJadOMJ/G38R+6S8NS6ZDMo4KwCYdWym6vCj55L5581quYQuOhpZeDgpxPY2mqcdWBNLMyyqfFD7g6BimRJ8Lx5+gFMWyjkln6W/p63WbSxoXpBtFIZia9ab2s2jQEw0V74CdHqWb6UxC9SRuphxyf7hqXlg6ryTQPw0yj/ESfrtJM0MRBFtHxenQ3h6DBvLwUYp3Wil4Kwvb7rCqkvDtgjRfVTgMA18QZjf+KuZJbYm9fnTKCbZ1K2ajwWEZ/naBHQZRP0G1gofPo0mCCD6kYmk0Zsa5X6DEC6VLC57Cu1RDwgN7hUKfueVu+TTOBZCs3akkYZuIDH+Yq9B5Jld9fUqK6zWiBThGfc7Y7JrFrYLVsnpXP3VDj/f5ZaoTRqLC2RW7XRy8TT/4ftpZyRTHav7rg+IpdGkWaRZSiuCA6rtiLRhp6mx6JCIRPuJj6rJzzLVxTy8v5twq1o4x4cR3ReJ52LKJrBd3eEJjCxurv/aDjJhiHX0tDZCAYvQQpLgC6a1qW7WMAsfR/IAfsGKQpODoGpcWzdbJBAU2QuCPl3Se7mXZvMVbKkibs7xx4RLJO66q4e/W5Uyp8zzD8MoayI93Qgoj3NYJ6z20GL6e7EYTss8NZwAec6Ar61A5ggwaBswjeJ+c67pKkacQGM41V40ytmJTQhHZD8GbNekvsXKWlNqGSS+/pnXEOLcu1xlw4D0V5BJ5oRSBT7ZZzBcvh9NvMv83pEIQNrFhgsWYmYDgFqVcG3SMz1b4xaaxBhD1x6D+N8wxb56Vlvp4zmWHwGhQewALIslNrzL2GmOdAXm19od6uNpUe/rWpuKmpR02rR5XdPdfULfCfWHnj7u7bWAQBDdyx9SRKje5OlSCqnYP/40uZe7AfZZGtPOZuG7eJcaIWVBdc0URuYGM09VWs4ZFTUpGCrraa4V9nTDcPDCi7BONVCGnDDFeQBVtqgk5nvFIXlsCxe5SH+xZnJ97v4aE3i9x2OmZ0FOQxNqz0j1x7eyx5/IDd3qy8WB6PzGDKdxTwzBkpvkA/TXJ7Vbgpn1pwBZhuTjosZCIqOswPUKOZMJAmpHuJK+dLDjIlB3kLpIgGAp6IUwvbmh8t0N45Cs7/r/JXdXStf4WVBg6wvDkFXiqLAsAmOUiFn//F5NGnMXXhceHMuCFSDu4VAonQtsn7kIa0PvuiPnwX8p7dieHdREScxYgE6My6c9b3riev4OrmrSoDQzRT7tHZq4eKaVoCeaWNWJWMXoacLTCujePlTuxHJCXNikk6Akx/iOo+nIHAeDpb8P5sZixjOZAZ9MQMUFVAry9uZqbpHq+zseKtqJap7VTHmiZFuV4A0nbHvJj2RZrXCPrsous8WQRNFfmMDs8y+wvi5z1qN7S/Wt28xysHEVWkkhew9zyfbtmBE8qHDNZLP/DxgSGLqpM7L5W9Gn3/gFAlS/hHwzLKjFOZYOs+ULc46bzl3CUy6uDKk3BKunz4kw8hEnKlb8BI6MNXTnNLgtihiK2Wfa7IyzS8ixV83RL8Pq5wFpZVA/MfR4P7gNGp0fXZa9eUZ/7bVjFLIJrxS+5S36Dc6ARuFDeIjyt9RitC8hSpk+DRY4v2F6vh6loN7xi7jMDazdukq8E8PFS24MoY24/E1Gvnlv4LCyaYPmlZYnYfIAFRTK0Fi4kbW0qw5NmpyY768OdYGO80sB26RjV2EkfKalq4DWZ2S3ysKxfb0XNcPJuVoBn7mW5KdlmpRFDDbqD4Le6T8jDM8/pJNImCcO7Ro43ZAuvR4Clveu5WzNhq6pXKL2dp/pzqTb8JdxjP9SixgkMh3qsAkeBTCR2POw7lxAmgn6Vw4KwOpwoeUF64u4RZWn6yl63o2Zd73Pavv4JOjEGNGnPUNIBn6sGGq1iCdHECgfxuAM7eJZh2uzj+ZopJxPmEHccahskwgCMG5pcoFGQ2REtMOnEt/b5Yq0Nsy375uOcJ69PQLAhvD+XA/L+mVwxofVHavTYArv0/aHY/AE11mTE8ne854BeiSI4rNe/hSBTLRjr6WBU/WDoKTTr3Drt8pSAao6t2QiAVTSKQ5gLmvU+C0kgGGDnpnwu5wCy5oRdPm7bKq8WPOr5A5bHa6ST/Z+VIXI0ZSM149gOJArUORMt4blru984ynMhnVXsaSn35WNMijMxLYYrudngtH1px0eza3J7gMYctvCaSynaVHDJQp6hH164hfTBOQErjSLa5oOc+As8HsirfdChEJqwZERd0WcWZYOZz6RfP1kgYOYkweW0i46VE5HTAAfjY/8UijmIo82i8OmvQZ/jn2wdMHgISwLAZYtNWoQ4OFvcr2Y3p3571CK90v551Mtf/rAIf7XZ/PX2slisv3MX3lhfcCWthDEsUFohc7grGi7EaTOuOob9CRN8qXwjR9K+UYHYlB/7mZnbGImrEI6QlIWyC2mZWyiErQfdmj9TG2p/5jvDTIHA8CiG87HuJN/R9fYRu6NK71IMi7Vm/8gULW9GfnNKUqu2fTIfaVdJrBOwQfjz99LRuuYfzr/oe1zlcGoPO0TZoLrcwECjzu3Gis1fSVklvukK0gr4OcUDwZKN6YVcTxdlldEk8kjtqKqvyAHmyH8jLAm/5ueXCu/XdAX6Z5lxJU6uhE1mgjZf3AAbC7+Qbg8CYMM0c9PZ+v8byA0gzHWcd8aEIAIynF20+hGsfnSUxv0wuCwdmkeCOSC8WYGwEvkF7HFM3wkVb0mlllYO8wh0gummGBWSf7EqsVLmVFNNanMNIf7unmvgvDNIacnUFdc6pEap8SCuCDGDEwzDY62mc7tskjaSjqw00fRnOc38Z17rq537DbwIshyD3WdmnBUtumqEbZ2lmwTT8I93BMPPOa1PcqSzmOLe6T09h3qOXCJ+yu7OZMPYmth3kedxbUAL6VbxiXoWPB2R6BOS2QkOCy6vleg941VmVOEMTjPJhQzYF2Zbf0ohBImurYBHfJDnjfkSLWDMogsMr6pClKaYRqRT+xJu3SEibF48NzDkTgYu3okJ82dwAD2iVZx8k4uO+8vXDJQCbqWI1ZLOsEvyUCf7OIan7Gi3P6Glcl/qUNbMTP3N4aT70GpVQSTveqHjr78Wd+omg+UjVdPZ4ZXb3hy7HTbtePXTErwlSXHpTe9NBOgSswHo6Eldn9ef1fbP4cIjPd9UclCCR25VHoc3JFxuGB4SjbfbySzG/qoDESZZ765wHPOHZCnN2kFcjy5HlqoSRhVtDqkzQQClXop8GHkv9tPC+OPsH3+A29T/YItkhn335FjPc8Lqr+7YqPrG4FFyJ0MC/g5T2/Exj4JUWcKEwwsfJvmR4zwBFOAuqdIPjD6o4KnfbF0DrogUpex8QfEpmyg+nDisMC6fwSGdHcSg+NR6pEBpai0LS6VSxmzebbzLyhmoT8LgXI0/qGne8bEJIbzqZ9EAb0EHHl+jKHnuxYtfwU3rU5DMIC3t05E5rdMOzwztZv/lnPC/xZ+ZzpKYcObbYVEPwFIX1aTPzmjmQy0UNf9JNrsKUDWcku2+1AbyAo3ojJzLcr50RlPoq3ekkzj2isXPTdhnDWVmII8orQPorrY8VES1W8RdQGQgr7UYNseYw/BtW1BdBt/lw4+T6ppU30mY6M9fJcqc87k9arz4/Ig0sl0Xzt670We2H7nhVFr/zzg58InDzejXidDRJ9kJY3Ppek3LBjhf1/M4jE2ta8qtWrfkbtcyl9eRSKJHs8O5NZgY1Om6GRrw9jV3QOYyRsYIUfp3dF1MPOeTTHBsxOzrrkspdShDTQ00We54GA6JdCo6zc73LTYmWR/jZ8FySnQT+obgbXbeeRYpN+raIi/Zk8WX9U0OUY87jXzAhVF8JyLxRl4sKCJA/aJY7NCpe5Vi2lBJE6sIQXhWcK5Wfw8+2rwCuID+XLJGK/vzH/vEroF0rwePo2twTjei85qAlCpaP0KJxfutzGcf/XZu7fRnDeCKDSb+fADBlis5aGn/RpfKptocGaFxfSW2I2sZ8Q+0tUcH7wfPMU/hmLi8GPGn7yRaDGCccw93EFGXGLqon+ux/Etmfj0p/kU6yt1pXabLhrXSljIz5H0uLEY34/URwGq0RdQ2oaK4cxtby8OD6o5ys+t3Qm7iSgJrJbzjxoyuFFTw1+djMY/ni+kK+AK+8mI0UY7Qp/Pg7xF1KD4sDoJJMofp4j9/XMAAWwaryiau4nfhf5bqsPTZ5O2MKee0eqgfoAvbIg3i6QiS98j5gWYObAf8UIicmJYLsNcLyUlLbPMDz9sbjO0Ksv/G5SHyjlt/g0uM2XUPeNhsqWhch5nSgwWu5YtHA65TTo7tSis89YptUQehsoBGdSvJcGf7CVXhH51OqfjnmDcQX3gQszITulcNnEFJ8GVmT7p4CwrC65Pr57rz0lNKsAfZI9oChA77OoD8viyQrVLxVW9s1MgmreaROwDPnrSC6hcNKRdtfLGR2ysO8UD/FE4vqYLdaJx9F0a8wlwJi+CDDoxEVqCyCiJxcYcNyZ6qZb4sJgvgGC+YMnjmNw/CUL9ayr9I9/GjYOxlcq2WCZ+q/QRigGKThPwj57p2Jcvr7FoLt2KD1L53+ezC8iFHJpfaz5fO4l7fVMeSfPaL07eOYwK88eeH443cax3S6al6ra4MKRR0W5EavV2lyRUvPhrpbGhOwHBtotTpl4aL7JQZp5sonr+Cf95ntIZTx5NYxhaP982TwKwa+ujvvTdFjEa8lXWhGnyumknBuj9bDbZ5jQNBVAB1wvOiWh4cGIkbizc8QCTaHZMWyH2Rye2UgancTwczoO+19GNgjZGRDYBj7Xakz0O/9okSpT51dfvMdVXQoaQYOJKa5EY9I1jx3GSY50TKLltZuFzAOORtVXdYAmOkkzPbeSofQUhCmfSbHeyQaVqaj2lFiZJIaHgiOsKsdrjfvBzlqQjfig5dy1XKhhUAOziErsNtwKZ6H3Wl57eKJgfA15sYh7gg0a3bICaLskZqhQzdvt1XMMOxLXueDkNO1zHk1tVeLiXoZcawmotAOGuaW4w1gb+JF9+zdjBcFoO5+9ZU4pBVlooQPhx+rTUL+SECUWdNSsjTxaz7CgTUSWlDCXUMWoAzI9E0FMyZHUmErrNa99aa/QbHzL7gQdPjU95YHTH5RaC8NQ7/io508MKHCXQ9u22P5zyhEBx4fWprYPEFDOwjZhkkdHwmnJvoQSQu4tkDxYhmN9SveRdgjANe9pzgTESN+TP/Q2ZYpsFRWpMz9Gixr3aRlelGX/nrFEsTTtgnp4pF3NSwx4npwN9KtDK/Op65xCtVfsN18UPwyh4VcDQWGgjco7LOgQPd7lA3IT71GBFtEAhZvAeag6cqQKBOmgehlmL8HRw6+DB0m9Xm1P1pZGQ+FaXMA5/4pOcMKO1dqRoxroMEv5+D/hz59m1NI9dIXf7Lmg4dVgHQkEnQrVUFo1cOTgkOZz/MkT83FftTB/PbvhQY22U5Smv1JT+2x1Dw6659QzOKCeqO+oRw6BQ0mqywqS8KIPC0NBKTeiR57lpFT07al++pHv1VOK4HGjNbuNpJDVP/WF1guGd2ZwQP9jK2Y9+/QcGPSHCSnN3OlQxauJ0xzqAIB3FOt885t5Jg2mSAEYCVtQgvBRURsNj4U41JAO8L2+i+rNShG2/UXEJOzYkr1jRWloCD0n/mrV+9KIzroWA2lpuk4a31nd+o3vpWf+WkrPY+BZla8fDUmFCIVDVWaDAhrWWHbr7BJhxq+Em142UkqkqeG/nuNOIGjO13fRD9A9rYj1NlugFlGVcAHFVyb8nx9CXpBbGRRB5q/ZItMe4guyIWxOyJFIowb72t5I07F3Xr737v9ijNONefSIq4rFrvFncvl+cCNyrFXQsJzgQQssMgqEdBoBQF0HconK0Vlpzj79x8VQUCL2n74/OyOkw7RftHg9I4/zpmTCABTRnWwjSC1HG8kkznLP9idyu8cwsJmEf3TUGUi86EwScUgofBqK54bKfXnah+gdoTJlV7Cj77s8biqZc11qNODDPsllKUIAesYPPydd5UfT7hEixRIjhh0ckH/agOHqU/LLztm8MlxIXD1687DHdbYbBlD0edihQzp/Xf/c5isnl8PIwPNvoDQEH62FnqFHxbvuvgQk78JS1fSe7U6LluJ6C7qLTrB+j7+t8L9PLLTyY2hAvAYztmD6uN3MBKNfuAjAh4YUuPqbheqx5iW0NoThYHbuda70t6A26eJmRYKn8nNDmyHPcClqQK0b9tvOa9ovDVdeBJffxTpk/LfHnRvtvYDwd1aQSL4pzl3/HmdnJMmxvbjaI1cbx6URmQTlACkloNW5/0/9nePLBP2M/P8yxn9ikhK7PmLfgCLtmLaF0Gn7c7SBrd2Gq49dtvOeK73Hy9sY68hmDFSmtq4R/IUx5XEVt0SGvSw7SEkKUaffACIIC/8OpmnfkG2frOPZJWRqpJRgyOamxXMdpsnSv5TL0sNHPioJPRNL+B1LoBuOjL78w8y3Or3375Tg+HAynMXqjvCbUBkjmPL7GRziNYbJiqxMPK4m+JOFQs5IxgGeZJIxFcwewv952tBa1iToNmn4/nEejSKiVCbWlA1eHzsaamY4YNr81CqQuZ0r2lU7DjX5UrZ0j4jmneA6xAj66A59U355aBMNCWzn0NaJvQQQpxLcMm2DYHII4nll+VAErVPGiqk/NiqIR8/KwXDdZyi2Mf1AKtKFPM1ItljDEOwW22pPprW67BoweADh/lwldQGJk7Ftn+IiLebk8tGqeFJRxW/qkUcSKYxMCEKa5R5AVoXrl0/6FwE84tk6bADYyXoQVUOtvUz1jQ5Ls3y21zmodOqz8VPuKWeERpVG3zunK3TEuQRiNgB1NEcBNwsvhIBBvPNMc9dEwwmKXqubqfZ5IOGT5byzQq6Pk/t7EINR0AKOqrqJt4vOtmg/MNbsrOSJAI5iJTh9eBKJUCi+BtAr6AAFmz/znifJIS3XWoKw9cY4w0IiY5aU5GpB9GfOJFtesUQ+FHSb8ycgBITQMupdg5aAxsz8el53G7ZZzZHaW2LEpyMHHxqdES6BBwan1V4mrxZKhsFaPY6Ig6D31W/8tdiQro/bjcMAUJAFNQDJHvh6Vd20C3tFjqpjC71Qa7cPnBNkpETL4eCIBgDJ0S+qVoOW3mBwCVF1oabUAyoT3k7UtPui3Cq7PYp6lN7IQAoZlalj66R+pRIZCCp+ix/LqlbhXLixH7jsSStPax2F9GfSQ5Zzi0fqhm/bD9SiDjHCF/TvQsFHHETaTz8hNDebEDsjLwZcAnb1Dxmo91AWRUh9Y3oI27a3Z0eBwMtjrururj2zEBYcq7MvzG7ulUZ6qmtzjRdVWu/v5Xf9bKwnjf/cQwCZ9osgm9f9gioHdp2WvPHraxdfRqLxCvsb9DjrspzmHLCgXezqFeP4q6T1mLkGX5RYsh4Q1CIFsFXvxgT7z4tdh/NIF7vTtRxI1B+zx319ioA7owL0j/7XfpwSIBYI54kpt7Oq45ietDj6vHmAPGqj/nWRs9QSjil/Z4PTPnwY4fkakGfQUVVYDedQ6Ndg+A51VLwLuhy3cCNGWD7Q1Knq38pS2xK4Y0bzkHYnICi2StSbae4Bdcdg2FA2pMpVQhhTj+PHYEI6Wfl+49lgDzgBbhj9qQDIkownzhW5Ca4+oEdOYXB+sjzXJIXEF+ITT4s1iZle0FE50TWtbGgkEgO5Ylmu6609ShYqv/S57g+So/CI1Jm3mtTCSNh1I7hE56uSeiBPRBaTTfeKBCAksiOQ6ueJhNa2YsnaBAqrMjeM1Yxyfo7eHlo9gzcfxs9ms9HW82IQuQMjrP3iK8OBr+AhgB8INZRwWG1Li2q37t+3k/nhWQCRpTDwNhpPJUY0abFF/+vhZoKc4dSAgDQFiDyHjeO4uBIwpPi6xVX4SxNmxCWmvlMMNw1S7NHmrMlsu7XXWa6Jm4AsS+rmjwMVF95fiQZsVShfiWUFYBVix0mer5aNu4DQ0/gJexiBLYKx0k6GeyB0+xv3qvjJvgED0vPj+W3JaZegFdOlDg5cpuz9b8gF0lqvxC1RNTECg4UUDphx/IfYsXoqaqNSpOz7sc4cEFe70J4dxXVT92MHJTRehGVMyMFLiRWMb/F8e8EyL7nc9Ey5+cYueJbt0A5w6qyXUOuf3nlzSsR52PYNMdqMe9QykIUMpd43emZbYaLp9CMpmPTjeTRDZO/OVPKzjbnU5uZaIocU3fRIAg1G2GYCRYlAOU8GsM5DKtmvdH/r9T28n5rIIMxY2oo7SChu5564AHG3ZWsod30dPsxaXqc0I2ylrSUzI56cqc/GRTY7lr8A6EwEJ03MYTv+eaKg4KuEr//lJ2s0FLoifapZIEFc2HycNyjT2ZfwaH3aMuYSBClKepF/Y/Gjf4j97ej39oTfLNw/u3C6qHyuKl7CWFPDjB61qWZ0ZggxC8Z7zayfB9FU0gLZ7wFExI6fQA6L7uj10Z/AIjUt/zkBFr53PEsMbBOiUBrjwU0YFEbaEDsfm0bN8UoEl8Ud5oC1IkJ6HTstGjhXQn2gTYF0Wzh6d+gL5lkhdu6ZD6Kp4tzcCFDlthY0YAiwD9sRE1tg7D74YQB3m0NZ7pxKWZi5WEAE5t2i2qtqXmmZHuJhcu1hnFyamXb4iBxX0wp5OUTKnUhBjoeuEi547n+zD1h9dzNPUF2yDX6DBnAwBMUsCO9DM83FeYVzEfjb/HumktDMd8PNx30LzyVTjiHf/Xpfqv1+fc4hk2MhgN8lyxIqNUywywxzTsNMv5I9WPBCBpKnzAIq7rZy7TN2wOWGeUDvVn+7DwOAbkkoTkHRosxwan7ZIYzIMFpaN5hazi+GacboKKEK33ceKAJSFfJmbBfzAx39O6DHC41dlp8aUT1TvLnI4pzKqJdi0ROZJVkmrtZzK3lDkOLQJiKBSJZLWZWMGPXMMNiaSYJV4VwRmnegAaeLR+5QUuO8QnWRsqvhu/Ua8BpVJ8g2NGakkRnznbBZvPxcVLEVGenFGQCE7xd9b62RihZDe3cuDzIbAv64vs1sAq7Cn8xfjcLBsOlDIzwcq7lTfJtKWGFud+341p0NRM6lyo0ElCL+Ta0S729EpN4SVIyn6SwcsT5RaOuxV79kCWk2PDE1RE6/sVrx4/JGMjRt7NBnSQOip2SVLXbEjji9dN0KH2jnTrnxcRqPOsud/d7E59YdTSHbW8eha2cuJBO8reZygL2U09lDBImx1xQp/Ixld7atWXxt1oCLC1f/NYX+CKnS6AE46kUOJLWXJSs5zNwFnTJiwH5+obwLNFGiCaHkOtfLoHmaZBFHwgcfvM9Qwk85r+kNPf8IoSe5Ysj5hXdHTtpqzHDPVUgpnAZ/w9s39fk7wcKztsJ4Yv/sfc3Vn5Jzcudm728aRiULj6F0kz0d5voDCWBdHzG8tM9b/xBGJAXM0fYayVdNlurh3hwYLNAD6M1xUuVQEx59QM1Fyga0SFMsyBvHOeEZSesYWf3JINWD/Gbdh3k4top9o0N2CgJgdlNFLM8wEYYlgcoFvDlUvfwl9VykQZyETLL17BSmHYALHk8UPDg8zH6BUj5EYkjI31bJNyQ4e1cyEoHqnxWERYnf3LywceWQdUH9O88w9inlkXImBSYxJ6Me8Mz2X7MpmKDHsGNt6WkS+zMU8mCFvzTAqzjBaFgRt/wCDUp8Fid0Ie8ZfkNs79ONCH7aRToEzi2THOae9G8Iw6pcMOHT111FYyZtHK0voJ17ZNuS4E4S4Ad6T+kzSBeAes/IVXC8u/WkwOX9rrSClFutL/Y6dPxSxkjs/H9R896rUkp+xvPLcXnDmLyu/S7l8btAd++UfmmWaFSA1e30ummNgOCtrl6UCtCwvTuYkrNRfORzbA3aZ0eBu7F9W62O4roAg+L4dMPEblm9E2ZQuAA/hjfQYOtIlT4mKjgIqRhkXeCA5u+azzU4BGQnpc0DYhQmWiOBs4mR64pkCKyfjOyVMItFlofBkrGoq1vewiQIgOPOMKzexMoe2FDGDzzzznInoiI/DRUmav89E5gKIQS4jVH6DymW3zOxogFS3haqRMyHt/p2M6dAIb+eZiG4l7hWnHFzJfTXgyyhy0c+4RR0NET7Kb9YL6OAsImNPVG6pfUcSSxrWhIf3vrR6SUsRoKt978n0KPKXCfbH+EbyOhoRVzgZacBJBu6rGN4GrfXBK1CGoNmg5bltlwxsSBahYvwZC3MASeAA/E/RgFkgBj2RLEtPAeHP7xCoH8dTXcxCRMaAAawUtyBTL9U3azNcT8aYEYxokBW538mgAKTsgmEuyKbG3UspcV7E9kxzyUpnJfln3WDZpZ3imR0k8m0TXfTnSTdWtSRkNPaipvA86hn0QWqyiO55ev3HnBPW6OEaflGHWMEWgNPoOzSjYyT7mGGX16UXHsDQXAtHiK4ML/f5dzDduRmvhZIq6DtTRIpWU//hGh/CVLLesipjB4Q0MhNHNHr7d4CBCpI9JZ+6L5rZjCQCz98wTWkR8oJX7QVTgkqKY9V4GwzNaVGl9xhWxXzdPUPNg7hwtQZI5ORa78z9YrU4w3p3DA+HIV+5PmYiXwuu5IqtK5pQAlwiXOUpkD1gBWIzpB1qavjbeknEB80fnwcnXcVSM7YQondG+LDxLCc2C/4gA8rwNyxI0iXPjePPRPQGJdUGBCHkk9j/2ezO/58k+HiAAXlFTMpAnqr/6TVCFscG1T0CCnasyP72+hsDPUWlVIrML+SFWzZIbu4SCx3VfjKwUNIHf5JTOXyKe8GcdFG14b4pRCURMxXvw2HOtJj6zp52JVwC9huVAQ8mr2d+SyOPpv28ilFkcBCYQZBspMfy035ubCPyk8n/TMm1IrEPfzePpNkmQ6MCMhFHIDPKO9rO5c6ofcLjSt2R+G9mvqy4N4tKuygF6tlBbh2SIZJssez+ponIvfGRUh9K3oHgS5iJ1kbxFbcQM5AvnCZkKKlO/T0j6exSTZjAoT0UH7AtsnkLw/oY08LmsSRhtPIpUO+LHxB6njuI216cCT9/vswiMBTjhVfKw5XFLw5tEYamUbF/lV4Ma2PS5cpYnBa6fHn2iIMtdK2aoKM2pyd5KPPBnxp9+aU2SqPLmoakcBcm9UD5/V37eZz+qB7TrK/m2r8hApbVari4m24sdcy70TufUXqh/krkD7SnZeSvpdP4GlbX3V0uK7YtSrP/6JrP+nhttl1hLOcdNLWXSV2jmhnO5P2XZADCzuwsNODmqtv/nISY3nKk1THfFvaZBwthR15ZeX0SYAsZHmIN1DXu8cvdl2NZVe2n1AzMnU/kaoPottwPfPWcJIMAjjekPtzxGrNG5ZA4bYuq9buYmhNWXaU1/8AJnl0DlnzGdqpTi87NcNe/6OjATkVnpqiPAoWN88BAyYBHEPDL9AH7SfBwuzgF/PhE6kZvyDhbOyA9ThgJWMDIbI22pkhdGXDIj9m6eba+R7NeYwKnWwqmvVbDu8FLCktj30BIO96QmRZCPs54CBcOLBKVy3ZFJlHqUwq+TXHTXrWQ3q4hOcheI+txOKEGv4ejyrKdg1CpeU1LPVD2gQJwkYnznTfYdtR17tL7U1WqpCha0IuUo4gmWoBeX2lI6+8jH1LDBBUVHv7t4wDg7VIco/NFFoQIAy53BvNeXT4GCvqhKI5OvLC38SeY1wUo0LAMQQof5DhotAym0hDE5V0ODUKEmTgYr/1ljLDCML03C3Tb53DrN2Lg05tSLfgo49/3YpCZgIz60spHPDc4dtwf225s2MeKOmBCdrmGMJhos7Yj+yp67/XDZ7iU9pOEdTKvQ09lQT1UKwYNpkzObVlQRVzX5ucQilF5uxHY200evpYtncP4ZBPt2oLmfJRcst5orcL2uIDlcZJuWanYcgTrjnwAejR2REK4n8vS7dOloVTC95z0Fncu+iQC1qZULbBlRnNceNR2XfscKivX/HpcqidNJc6ZX2SzmB3MfVtfxUcA0kw7HppBJx+BtT7s4BX4V4RKcWDdGMjO8V/wGgRecdtRg/b3YdjlQJDMZacnIQih04OSkpt3hq8pDcgsc6sxIBPdHv6wsAEyrWipZn9h5mOdT+4Kw2ko4h48tM7qEZOi+ipB8F7v0+Gl7DV1GC897645fC48LnySHDFA0FhokXdjfVeetihMCLlQdyEVmDs4qCuhLWeQYtwlQULvcBnaFtQ+o3PBeaYisj5N1d3y6EAnew7U95sUioQBiPpLDaVLVMX1IfjxRV6ZrsjMexxyqzu0HdVv0ptuw4oHaACaCHWpEbV2nhqLxo6WFKfULYc6kZPqIDesvXjuV9IomqfT0wksLSvMGiCO9sdSPDdyOjj2yZMUO8rE5IeIAR7ljRaHazg0Au/ob0VosZoT7CSy/JDxo3jdPwWarU3JwfS/k/dtL5rhITFlTiiCf6nqJstsjnfK7lGXKNbjwO9p/2BDC0okhcNh6l56E4KpYpy6697BxAkNGHPWUWZ9id5IiZBoBiMQQf8ocPD8lqRqkcPDgDkLuOjfZTkGWPNq5YNSWmS9P1cPBEXNS3vFdbl3fp0i68Pj0euoQiF1g/I6pydCjnlNOaPOGXk1cSGzSUmW6ygCb5HJ6ieYEyJ4eotxKxGWRBx124nLKxCJpDYuOP1GASkcNYoF3cyxAEGBI6NWgtDqPLZGX/ivC9dwlD5HjgPNwyCGsHkmrvk+YSshQmmmyuz4W39+kSfqvq7Apv1DCgo4kEAO+QAWCOKU35/4HnpqfcZali9YaurXLeqOfpx27aK1p82Xw6+VwasOcQbztynbClVo1viWALivTVDIf6TTz5DrWdvTyr+slzILQjs3ShXU924NQz8delB7AoJuVAWM+PB3IP/sTPsZqV5bEyv6FB+U+TzFIYnFZYguWoU/qeVH6/YxRQyO/51K4kNWXF88Jyi4pg7xODEdEennO4ZnZUY1wkCQBj12H1RWRKs5J4GMnuW5+CdzbfsPBH0DWu9FtdiSrw/sWslmmodbk614Y6YXF39HxbxkqbbZvS0Tv1CFct+65UoU35pU3FGI1HuyhX9Lw8nRUUAWHE6mtV3MqdnEechn5ja6Dl0pmdsDCTnIorHHJsTR3hhTSVS+vwzIcpHUgSn4se6p4nwdJHWqviT9CtfCLAph9wLKA064CzudM8p3yXt0Qq1NW/fzKLhzi/S3I+NjtC1+sQnv82QqzHKxyrWzDGGjwUBoa1hZW1BrfNkzbvf6YfBP3HrnXA2k1vbtlRfMJ/p0jjdFgjJZVvntCcskM61xOy/xSm3kMv/fBIjaujPK9ZZZUyMqA/62wfX6V+X1YeblRX4b9eI5xIVLWS2wWP3jQW/iLzbR7oVLRyqcQleghqRbi9PnYKG4wMEWBiJZn9sL+EES0+YgZkwm8BI7dvl4/Rxmou+5Ya63978hSaZQhQ0isM5+cWIEywVKjNse9nvwCQWIBABdxFFQD2Nrf3YByi+pY9mGHAoRtJDQQYeRYCbZyPMROutBVjJmnih0UsmdxVZiDt1qc1u5qBB3CwNW3e9lS7D03J7e77vt2PdAr527nj4ViaxdANvzuxVOZ34Oj2yfPMPXUh3MdJ6jjjWch9KfhXKPfzHjl32qLZTiDopSp1tHjWoPhDlEnsWtmffZu97UaZcvOPVEnjy/0W5qRR6zOLKWapKAgCzMCn7n3YAq40EOmr4kY6XmKIN6Yfzbk8JWQ+5yXxVwgKnpG/AH29q2vO4EslRdL+BiITC+iJ0GG287U1QFyuwPxY7bSeUGTTrJVilFReN6qEw3wglgw5stxx6bQ1cF6TM3DoWQxXG17xBhcvWyN9oMzILgFGG8NNLFaVJwgnzMXGFVaTspMJw1s4ZtbgJERJkhYn0awf3vq3twPglVurxF5z0g+jL9zgt/C0uGFhANoCilWjBvD/V1eoxkRptj+qoej3n38CIyZOyKXVw9fBWcNFtDvdCD8DdkOLYsPr33gKJlDyoPi5hY5sk8Phit8fb5hkmUdzsl2ORCBzG0upqNw35ppN6x02VWsPykcAHcsePxtKSUmdSQvhTH6FTWJjlnALM89SXRdAogrQATPb9NfO3A+3Zh+aOg7UT1XSDUa0PGdbquypW8QkWBwK4NqYe0ExIjoEmHtpUON3eHBTQmrnYXz0gS77FOhbfnzfIy7dorINMQStFpndJsM+dgp9CwiNdymaSt6UvZQez2F/AZcaTFZvvvhRvGwtrSXCO7q0fm2S4HeTXgL7WOOg2GQEf4QksuD1//wNsFswiCzd7QQ3m1luizcsvRlE2z5cG0xvHIWOnwryq/e8HVf02JYJcBDpW6ENIX+4Zn6iVj+/L+lNdUwlnpSUYE6Etku8J4653JbG6c0s8k6bbG7jjymsWeOuc1azIrNNjp7Ujcyn6c/CWZDtp22ewa3KTKhQFYPuLBgjFjRfqYvo4DvbU2sbzXQX3R20dKpgqFKmeWfxpLlXTS2L5XmCaeuCz8kB4M1BR+SvBGRfruGmumFDMTDCWd/lZWw5B2H/LUCHgft7qHuz7JKmqg35Q5Q0n/7wMsTmJKggH5cDlcGrrZ7jNeJK8LsJNEVsDkvp9hGsX1ynTI6YSj8fJwhxhKhLlxa8KyGvMszTeGwwy3DO78fwnC1XE+JXzoEPBOoXWxbWge6sR/3rftHYWhcBv+UmlzBLBGmKshv3mXS4JIRqm1NQAO+WdSPmBEFhqP/kkrbHn65wtVZzOJvIOO8Nqr30DNltw2JWWvO/+g/7ZPpbz8Ov8W3hi8cKm9fktTitRflODkhtB1cWWKIvWnRaW0dph1drz1bzRui/Y0aRmJm920GdqnBbJ9MZ9XxvZdi/R53MCy1VAnnGbvU7voTBdHrQEStgetzcTd0TgWVnHeujyZDepXIEIXg53UaJseYeGcNyqOxpbnwgFDffucimGzj98Hp9kjZ6KH90P6IM8c4jH4LS/KAws47naIkqCL9GwVP6T+Rli/ww3r4Yk+sI1hGHrlqX5FdIkyjbOHYiKQ1r5kpmbENykYJ8VFUDA8Z8XfucixaBpClePnYEekBXxhFxt404sHDoO6gDMhJUZUt6ZOVFnTG2uWVtdaIw6z0t9j9b/Qm8l76UvvYq4/NOmRXRUb7EdkxoNHBXhEH3qo72auWaucqPZYms8BsU5qRHqZwiR9J4AIPXmgDc/AJycUaLWWEbJe2ijiOSC9hfHooYINUiHs1bs9uYpHPlIuQloSDHQr/dWKR8OUgYgHOCmTio/ZbGEBesLKrh1x6krguBuIYbE7zRmjJ4PrFe/POCW2FD93pR9f6XgIhhjY20WptSt7LhpY9fNmkdTbFZ2lufEXrFeMYL7DQ5m9JIDNpEQkStRc8k3yv6Lf6pgsgcQGDUsVLTnyWl69+UxUX14dg4yUXjYFH9iayFK0Bi2xVRQBmBNXYT7thAZv9vTlSaOQdy5uIBZUsLPlbHld5HOVm+Y5HQJM3abEuzfgNx13pwuhEQgs7Ya0XsmnWzd/vIHeeO7D3gVFXgLl78Ao1Sp3KawIUc0/zvRTvbRrGIqkaEorz464EwzFferie/RgMmDjMpMuGH5/9EacCt5JNpKYx4VlGrau3oqt9Nn04sPUBYgnaRIYKFwfmYB6Ul/ntOqCbvdAN8nV/GeWQjYmzSHcPUHoneIHj/86Y9fEv/g8NNBZwTMWHOLuAmxWK/ABuAmk4kzmIdCTZgRxYr1FuaqivEuQp1yEw1T470OquSp93uxLz3vZA+g7HmvZnmv+FcQP0xBuVwS7lk4eRPkatFm4+Pc23Z/tU8U4zQrK9IVzb3gpXshOx5u4hgcndwicOJ5hByyAgbxP9ZaIrp6R8nFgQBgJzGRhzguyRyYpBNOABKaZAdak5nUVXTtfFFW3CpAkWnEV0NUGGdJcE+iSN/JiJIpsgrGUu/E6QlpErM+WYnts7e+F4wg+6XenWhDmuJhhyOOK/yQ/sKIkXWtPDMpfY6z3XCI4vdug23tQqu87Iy3BnfIBh3cbvoD1F1AZT0oVvii86zEqA5umr6rTfWu7ABLzYqyeHOhbLRmLUhF/xcbKXiUFumylIEuY8xwoM+dJxQufAyTweXpT+CtMXx4JpCPoCoXQDbX1VGcOOHg2W3sHCi6PAj0lJagoyRUTl/weu8NAOkGE9iBoqhda7npjaMH7bn9P41jM+ryYw4yew83xCu5MTZUlnwdtxlMqIw/alXKDK3ZwhQ3GTgEd7g1WhoxRoQYTArYZeJYzS3lf21U4tteAOrKbvE2uMcFuD7ko3KzdeT4PCm+ZoWQ5UaUyYl13fXTaHnY8cjOmlAMjATcLZDY8G/ghM5/AcXJJwCs4kz7tYizviKnI/wFfI/kdru26QuGqlmKpPR5k+wv2PI8SZtjuNbhOTJ5MoYm0yC6xRKWjrAfoTzskZZij+sFR3OzxQW1YwQu3PcVCmTMHK3XSIaYypZ+XLhjVqjU6reCutF0BWekIrqrnQkSFOXYHiAuYgaBiK6C5wOmP8wPVPRgXgRhY40VRcmg7mEHN0ubneuljBzDlH0deDyVpV6nYvrUqHRiX6xFUOO6ROuiVpJudwRagswiwed67DPX/fLB0s7Vvr4l4DIslquTbXG2hnG7/hH4aEZmnJhW0SKspBaTjI8TYeU6Hr3ZLUcGBsswCgkxPF4Q9fZetvlc9Hw2A2kvxLE5JjVVfiZ35oCcV8mTltT+ZatH5ld4ptM2gTQFYNWhpc7VtV8mlMf00gxPagOaAcq71qarqGbVoVU2QfRdW1f6adxrstiT1NowcYJzlze+fyZYZZgpoM+QufYHpWNIXgEkp4WNdr8KYPf4KuEXYQrNh2ydSdBycGDsN78t7G/48tohZtxx7AlA6Cnql5qUYIHOJ/EdekWSDiEn2OuoHEb1ey8a/8VkOpR8Vh7GkW5Shaam/eMB72zcgjqwL89KsK0EAP3t1Fii6xOGfqCoazQsZHgXKx4mpxqvR3CckNxIpxYROzbN8XxLjhBbQFWV8Q86EyBg7rC1fOQ/7dgbmkCB1zYgIKY53RmPLBDcy1Cphnt27LMkkDl6gRWcJEH3r2GkWLseVMRyYX3KJRJmLLHLF8SIFGU2QtLnZHRDD1/xewYgFBb8l7JdjISbZe89zOO9EWhJadE69nPiYKJJDfRWO0peVgj1F2Ked8i+GB1SA6eU5oT8AKvl3mQHQdNJ4VaYCHewa6Qm3O+q9AcUqp+23Zh/9BpQ9VJ5NKVFtfDM/aapuDugDWrRS5LCs719NZqX9gFd7n0d7tN4gYB16hcpLI3zat2FkIrlVHjM4EdV1HI+yamWNs2X8tyj4C0zrQ9F/00p4j02Cn9pFt4bBn38oFUspFrDsZHr4DvRw+jWz6u6Z197ynLpDhcnSpswB9wbZPU8iu3tGdRpOgPd7Mxps5LgXCVLXOEaVd0ZbCJDe3Xe1lVESowHVitb5/94VhGErvRqeQjG0jFJQPjdtavYNECTler8OQkHG9tlEaRBuBtefw9pryzylV5j5tVRhuo9MJEm+3C8pKAunf62Mescl3CE8HmLiucpUXaXmjakLQnZ34SAVVr5Huw/fjyA4xBONofX8tAI2We1tZlsCpZtOwck08Ys+CC1YihboIzIwesdsTPKDdIm5gnmgHkkpdp1dMJHkiuLJmzAJgS4ULJZj3JXtdQUs6oVOz86u8d3YI8iD+ddvLYr/VfR0KtC+nr1ReTuFNktxog1G3nW3ABGDOJjuxv1yqUu2ws+jKyFsGAxzzQXmLfwcZ5ze+qNHJKyHQQYlCUb0ZVHOhM9uvShmMAz1qoIe4sMDsBZgNwjmCMImTmI+Mn8dUfzhgetF/tkelqTVVnip0XDggpG0bUGhQK6XXcmsUH/TompuPq8jUY/re2eOM8gy/yXyCqfHjGKGYC0PvXJUytJM1Fg1wyavKZRO737tCU8Oyta8R//LeL1vdhYaa/u+OW+wO3D3Bmm4JnSgkZ+O8IDVLS5iD5Ke5/pVKPjbWIE+ozOi+ifDXJpIWzj9qxMOSoNKtRiI3xTQrI6zl3eQXyMM+dDpvHuxXJZGM1OKKjoSYFCATCfAE2Kt9EPnxDz7r6UyDtBSfCyeh/NyEs617NuM6bhvtwuD0YKk+y4GOTYJBfxPuBOqwLDDVtwHyHCQUNbnxHNxRCVRxbM3JzzVHbKv/qsJ9+ubUTvC40KKGaLApx6/vGSxKtbgljlxoSD3+K99q5sc+Ua3ma2uYWwtCCKjFBbvrS5yBE/E4v6Dl2HD9Kuehw3nB8AgBeijudZFOwO4kciJmWThvOVGnB3z1fhKEDoFUz8OVQCDsY/vwesbMJzy2l6kPkauaEHa+GN8598niNvDAuDc2lyfIdqkfjNuMFj/avIhFTrcrR7I+IUXAZtZnf6309M6iFT7j5ftErDt3TX3ctmUHKbAlgXh4OqZXpJKmRY/fYLMo79XlVBBTT1uf3TzGTweLLWvqjkLWA9+dFhty0ivhrx53CVcsUad+HUc5rSxWk6lnrKEmECA1H2PyFgkpCyX/TTbC6/graInao+7gBBG8qrXuFpifRL+P/qPQ1m8H/FYwLB8Cl58UfSK3OlBqXf6Yg00Sfyv3pME0cmrj3Y3nccrZVollvN6BNsOisZOpsKWL9oTUgXwHLEUQWWIrn4HDfTsYEpwUKPNX5p3TbMwPUjPyd1oCEiKoByy5nUfxoF2lq/DHa9klpj1MNnMU1hUZBPYcxh3IdJHc2GUP9SZO2axIM6lStMbOIgJFKn2k8SXJZbM06NcbxTCiSeR6i9QvnZw+V6WOBiA7duDii5LokUS5O6gt7lxHZ+Q3K3lHoSobfXdeRnMEsYbyGhmgBkh82nn1GvjN/QdRv/zEKVlw2OST5jkWGsa7rzJ/4oxvoz1zKuweJ5OwRPDJq6tiSPs/83NW+BN7VzH57+oO6eAOZ+gZO58OQ8Az3X0tA1qT2jvN17wbAvbjeyYIPLUucIRZDt2nkGRISfUbBZFTYs4zweiuBqJxpSXt45gVBnw2zP/5H8mwHM7qNZg/aV78d+m0RR5uKLBKkPIHQvsNy5d0n0M+f40BZI/wXzsVjWUmt1JKXE0tg0XpeTmWlScjKVE1AacK8AFe0VKVE3Wjvd9XGt/U0o2sl2JyZ5Itsg9icB2frxAl5W7BmkdH2Bkl0zmIYaatjsW+Mu164Jt7ZmouESAB7l9c/pN5Oxf1xbSisgT4xf7l4GlvGyMWtD96W9c/oMjqmCm2+SPd7XccWvG0/XAXH3wJMRuhhu+FtkM0GlWy8PzOq2Fr2d3JbN5pg+Pl3bxXkb4fuNLV8GGOEJgPYkRCrforaVqoy4f6HS1/qy4LTObER9Nh+JxQoDBgxSlk7ezu7Vdva4zD/N3VCPjO0g+Yt7NAfWebaz3UL7v1JF6fem0vn6nTf1WzBQeGWmlfoc1p6tH8d65Jb/j9Msect/0L4kxkBkW3ThDUEgatC8N5Yfq9EtHazqxz/4IGjxwfoG+0op8IwRcheUQwNLHdYXH0BgYrAOS9IOjh6lxmReI3CDg1QY/HCbwzYCwHZN2RHhBMf/lxBd6DOXI1kqVZVAK2NISrPMyd+JoTEpeilCdpsw/mkyE3lTwPmix7iAu+dCmHuq1DQOgk7q/Rx7hEsSRttg4/W81EjrFWflVwKipAUY8lEoTjcDvTeoLeG1p1tdBbxzZVHZpQbhHcERBTauQY2PdDiNZimMUjBuecAmTl94fSF1KJG80aTqO/8CDXY3Wp7G9WOLlvDV+LUzvoO5Hi95FGxlipVVkucVTev4dSSbR/X+jw1SN5XP4OusIamP/PxgIQjc5E2qeSkLEpFOjQOOavP6QL6If13QoxmTuD4oRuLtqywBF4hnykT2GUjvUO9P7CCkQKb0r+Xu5PVrQgi/hgzmQPORYrs10fLCh2FH6GmQ1bi2GJ1/g5XoeVgjGt8u57fPSn52EacGK/dspXpETTvcd2xfSu7b8iRJ8AZ57RtqnoUsFMrOd/OS+wbwZE8KKY/ElFEekmXFLyF6Bcka9HQZow2rgAzXMV24zS+GtfOZhP417hbnOyhqKgFCwfj56CjCUOLD3dqWSybSp7QM/Zb6mxau8TxfZ9pIFgZODUC+Wx3BqYEGlaQeZOZrvOLLxNozL1+pzQMETvVI3SYdzxcrWTblRlZBJreDYsP/E+fmpys9etGRva+sTfgO9uCyXmDOT23kntzw38xuq2XxTi2YMn26BtSmGVxXd1doRPwHBjoKyPLTC1vuHpePigSahkfeoMZzaPqnq9yDpdhRRLZe9udXJpS82xcJRdqBB2wqcDEWiTVHmFytVNQv4lpBnJs1NVtNC1vBl33UJqn1XZ7pIybdHrzY5VDrTzTqly6RUTiNMdwQTtbIL7QOvxnBzRvwrpwewwdniLXQbSPtS4IoWzfULDaK/sV4UbJkg668ZTRhHLis5kme08hcI3nLq0jUiKzeETA5oRjxms1lTVe4e1deVfg/MFQwap82TG0cZsk0/7lWPu+sJbLPQxL4KT08ELgawIAetpd9IQ77zh7aO3zvEZizzF82x6ISGRSVNQlax+VxaM1es2teEV5Jykxza35nnbPM+FticXENBitJ3pcEf7OZqjRqqJ1Gn0Z3fFh60tMk560xKYQvMAmEX1h18P4WfFIv8hGGUKDpb6WBXcBRSYnXWw5cifgkkGfRkeYSDK8gKsWfkpVtpv7aTGAR1HgjePvMYFp4E6uW6vvfOdG+0yhuUQfNgVcNXb7jGqrPDFGj78HBpw4FMvseCh98HLC+DsBt/vbVi9eUj4N+j6kUD080AnrZ7ThiK+wrV5eZZ3ocVnN0xYc7CQ37pJXh0uigzkcr5Eed+EAX/YbP3eNQaY6YRuDWDflznO10OloTmD/Ff38ODqVAEWbW+0+QeinWzVdPxb2dQN/JRjTBTQY3IEesCX2KsY2BUykWdwu8D2UNDjoxhTB+G5qQ6VHJ+e0lP+Fu3H8FWdROZSCEaNq0L9gXcpREYmgWERz7mwniC+SH6zBp2tD80YSU/bH6ianfOx6rBmbLcinE2T/M0ByA42AsjzohoaVzaMsCk+mabku6xivlidVLY0Ks9jsDXHIm0GCgG+HH+y91wM9W0v8hDRuMvPzZYrAoXWkQsGuTLO/TAl1GPANqfjr/6XbyWQAk3WeFiw3E1CKWCG0z9yiy0ulIDEZNGVZQwdyWcpavYU71bKkxluoefm0by1sKQNh/1eq0NP20idhBMm4MMXvH4CkeS/bQJpuYuRooGhGozVv5PKducsIPZiqP5EIOc1kWZa73XdbDBe2aqZpCCqBmTbEDeSHNzm28/wd6IVY5cSmvUSNP2aqMac+iQcZAjfbQbc+limHvGUdzV/hLvfR3/PBrNG0x3BzVWdOEWGPhvh0D85La9T0pHo+O1xmJM9/SzAxiFo3+9IW+Tu4rm45lu1MRE8wJ3ptpn8qKZ08qqQzA7+aKwKa/qeJq9Sp1qyCgzIEtuaERMSbSyZtPyZtACOHVyqmN/rXTjGlVc8M2Pd3NYe6e+Hmt2a3RZfDyhIfV/VU68zHgLe5Y7ip6Diqb+m0/8TG8KRuA6slarU/Za75fO/tFgvrxwCG5xV7+Nva00JIQkzM9dVApcERdnCeyBAokmfBH45FLc0PX63DcVOPP5Xgdi4vFDsLvXxt7U0TVEEf2Jmzcgs6Be7R5d+KcTbb2XDNyyaSkKAQCgS2bRvGScDUlLPgQ1/qL2qicrQiXLo4/F7QRPH/DPGZQg9q225kMd4DnaPLkQW8L9qwIENfGYOPutVwhLKrjqJQFHPO1K53nHRGe2JOnpM81MvUyDHlB+sHVOmDq/dqCLn21oWOO6f1Emd7RGgebxMD4W5mf/2cWDb4H/IclGvla619EtiuTYSGEkfNtklD3rP6ZqpQdXarOk974OnoMUoPMCP7KuezSuj0wNGFgQhXb04o3I6tcszyiLM0V7wn/5cW4vouAl4DxNJT2sKPdyotG7EXCGpck+Y3fbBZcrBkFxtqPC8uhQ9XWoy7kP5LC2AZSMfG3NX07iDjCrB7Q/ehemeOIwasYwmcBP1pZJhPqXlIwMAzvVLfPhal4Xbu138JduTwO0AM4wc1Uw7QzDqxzHY+iGwWcOnsxGcUyOYlMhGsdFeImZSe32Pi2puJBJzkZtt8itRdU1+paSKTn5xWNDrc6c8oO6jWut8LD8TP8gxt1qUOZ+/BII+SaN8DEKJlN08kmrtnrhN51zYSC2Bbo0ISRbF3TWqrphRwvvo7Zc3vOMVkztnXfBUeuZSDVTJmOC/IydmRL6ZBzJlcTuZck3uhZIOd6IKdX7auM03/JrxxLKG814Ldy1I6BmZkjL3Q0K5h0rNdb7ymUHE7FRX0rPXiGZfndzkeuP8k5XQ0dd6XUJwSSr3zGOymGsbpUyNDyZB9y754qePFhZqcTBrsjt157KGaRiy3eoZVCUDgLSApbXMH7egTWFH6h8P/8om82jPj8Hp9ZvWWKfB5pbh2pDGy/1Jsg6ZOZHmmcAMLaPKZFUiDZJIw9z6IlXzABkI73KM9VNuRt8biQ2/92DkROXJspUu0yDUuNqGGJhoohIznAwR6dAgqtdUTXH08y0rYHQmc5Nxy4liiOmcrH/qPwH+5Fcaa/t/diQcmvwRU5OMOMphLhKmbO8Hf1oVOE4bu/28D5JdnWgtRTl8CKyHeIC7Up+cU3OR20l3WpRE34KGExXWXRtI3Ck0m8PXx9rHIFgkzil/YxEpWMivAa9BmSstUSvZAGsfjvOzpYCuQIKBSMtfzOZlv0/p6OGGj13ehCSFjtN1tzaFWtIi8L2JE5ide/H/QCIOPVNWP3OdeM1pHGQHy0Ldr8rsT+/Q4NT3eIBNi6cpaKroT/vkYZTCNvOL/3ZpUyA6sMcG4giY6A/dSlRGa6qZhMhjjFzheDCtb3SV+/xw5mL0DMA6zikppWhkFaprqher2Rgp0r4mL16wq9b9fXG4GVPqwBBe8b5FnkW/eEdHPhSGQYBfkzO2KxL9NiFg7Ipcmn3eY1E5bwF8rVpk58XuEIzpw2P3Bg7+dhQmVMazPhlIhGKQypNnU9V7Pm8BsqsEySzrteU4YiG2rAWrPIJJgLAmOf4GvwuuQ4ECX0wrdSsk8AmcA9EOsI8M1yYvOEZsSWlyNzCP6+lem8tl+0oIP6d0iUJOhrRxCQ0227tXmKskSIDMCTlZKciBp8DGnG2dSSGEm5l+OWkrxeJhtrFzxZbVMIJSgPBg1pEbjk+cwOIm2EWuMsDd+zImJQTcU3pRM0J4AYzWNJHKRxgsNFpaJudkzHRR3Gx2mAZWCOvM9DK1k0vk8k/BNSn72fdgn+8uUycq2xAqD3sB2n8goyo4LsT3zN0DiIi1TNt8CTsPpJtZPC/mOLhH6oA5lCoakZQ9RDTAArkyKAzCVun6pfYwnudFO04n34zQI8pjlrELjgb9qe8dYua8N0nExIlerYKqEjGxgvdPiiaQTx5a6+0ywcmqoy2bjoTZPbUkZam0dpLBSxhqCBclHNk200nUNgSfFZ9bia0BBwtwx4t5rWDpgtw51c5rG4ayJv7zoVyLcmad9kH3hKNf21P5cwrOKw1iWL9682xG/rmZnZp2s1R7dKYobuYM/qePhujKOH6KRjaXO3aUymIm56TQIbA9rkKBhYLV0kSdRQiRGQvCc2BjSfnsH1F4XfE5UEUieHkT+dTd/sq5I0WPP0zQgTqW13sK00ZC0C+5y4r//0LgaDufOcnvugwUe8N/uMQ/HMWegjtANwkwwSP617Q5VhrWt8I94dSvDMHqF/cUh2XQbbTob2EcSJZW2Op7tsWjnici0wuTfwPNVk8hlzyaB5MdNXdGd42oGuSR7PG8n2UBKLjs2ii6SoNpGiT9ErmBhyyijUz/H+dLn5IDEJx37HLXIPKb16RMLTOdKICafW5qWP68FdycJH9xJMrRsGqMwJLZlHfoTaT1RmrXISXmV3vV25cKy0UFxewq2P8+DSQxp+txmFDplYAZiQYBHi+mw/TMw+V4bAopdSa7QF1e9qxluIlKNuPTEbOJUmcH0vqSVYRsI+Qg6dWn79OF5ObybOfKgTfFvS+yM+P5Y82zX3+EwoAFM7S6Ino4m8gEFDReCTl1/i45gwuNXqVFB/KOeJB7wqqN5NL8vHrVRq34/t3qjD+FhnAUp7Nyqfh8zdpwCMVLlECb54XCuCtJRgZicKPUZ23k8wCocy7viu+lW/SCL55Fv7pfY7DqONXQ5vurkjZ5yvEaIIa0JFxqPilKH4C+Ey1KrHKSJ1sZKBZu4ur5SIDNM1XgsG/PuYZlFvxQrlSw4WYfHuqp17So/JswDysMgyDkI49OW2RLvCkKOFJvF+kd0yCgk7V3kVvZt4YjiyT61pbY9w7nSsIvFlfJywzmB2NPmTJkbmLtMccH8INJryutayMfvnFNNrCaxB6/ZhVM0tesLqVFwP0oKAAICgrYin/dMITRoXqLGgAYyEU+QsQqXsxhRkTmXMTdRIR6vtQOleUqMZnzkIAgVKuYJ6h3aNm6SgJmTzspHpJJcc41Q6V0ndrZ43slrAW3ooCS3uHHG37PNNKp+7n23vgqEG8aNj8WbGMlxR4du+IG+GbPc2/UNues1UdaJyCQ6F4hxMunOhGvHriLv5RS4uwct7Q/mONUrW8i6fXJs45c0fLXTm7iV3vUn35Efu7FQuPxoyz2nwDxN82tB4ROLChkGIDRs7lERN60T3cJV319eET2ehK0a0kpQF+SPjo+wZCGKjeRv0CA9n7dfLkZacsfkUfKwEPr2aYiyykySdyB7xLY6fJldzJHKGoKuHHtftXOnUX+9UJnjYWvw9bJlThoiWhqKx/uz0Po90pmwV8fh9rezVbqxarw6MnGEQkKjAbPO4psQzEMvY3qNXRu5iPOeym4JFeZOsthSacahdUn6lcNLWRsTvcRD0PhWAKX8+6PPmRYgYsSnSfGr3nDalNWyUxXfgA4LBaX++11QmuJsUwdRqLxJpG/+a7VAYMJgPndaTWElTF3wy5CXjgXY01LDHOnDwVD6Mp26Lz5DXrLnr9YNo0KCEhcOOPJQA6uwIqpYk7+SBywswhsA7RbL/fuV8uXmENMFLcvasVX2RSU8rHLhshuod85hMeyikZE9s0PDDc03Mu3UTzZu+olYsAKTUY5aLpI7VPLJsi77sO831hueSzpnNG0NizEr9+pOw2cjPdk/8tLEbumZg/9n5seAP4LnjxdIhw+1unvMOSDs9Y1w+fr6w/OnO0U0ZGATzZKrqSm8nSIUfxyo/1HdlmL8latFu3dR8p+K9JVwncrk5mJg6niKb54iCy1HIP56hP2P1mC0p9+8gAdjFxgB4nABZ9zClnIbl4lvvLR3mUhek1iHS9H93Y0fHIHNUiFbhYqa+cXtgjflhSfJcxr13KT0WxCBVA/vdRT/Te0uV1GsyCO4ZBcpE5oxh3yDuN344Lr+qLZjNZwohGfwWDcgkfKdIazDFd4oPHAWiAVH9yIWXERs8IseL4gUVrTWNJFB5xXDct7g9MsCA1CC5L9DMGyWJo4za17lsGI2FEawGcZS6n6O5GOuSel5Xd1El0dA3zzDIzUMsej7p6FlVZp7jQQXtdfvKit7Gbu8uhP/ufV0xnuG26asx+WOUfCQhqo0CGZpmxpNM3vidpdbB3l+T6xUajbcxPQ0KPh9d9kviSnBUosV2MQO8RpfhbTQsPTssIBTwHhjK3Gsz2nwRIteSwhIZiXl1RnrimP/Kx/me8hgyZ8VMOuN0jjkOrqL2WXEM8gWYP3EhWG8RufPR+lcjP9uYS+rgVvmLI+im/1CJN2Qc7GKVCyXJ2GbyM8hrze253xpxLAAYD84a+X3P80fozYPSS+Umyep7ZJ3Rke5uaxhvZ2vfXDvPFvh7dTqO7FYYqYYTehR3S0oYw0yVwu9hhkwCOD/jXgB4hDVdS+PEyXsEozbLxqT6TEi2EP1M3VmQsXuBhvG0+w6WgcIUlMSIGXb4wGraieqGpZT9qf/eaiKAQmY9dtx8ZATVyAA+IgRyjuUWZSN3WwgeceNhe/3fWEKuUnTetGnBmpgk/0f6EgUsaHCatc32WAQwShBmGySmc8vaWN15zSGzX/APY9vMhbCN9nz9SNL+rzVv1yJriEbz4Ler3MFAwInhhKsSmnBqVfU3hc4PkghhxrEfVM5Uz6flYJ8NDJvsHTtpUkn6oKbNoFUv3bmZ1PDkSFiRnfwRgxmCdXiFclkvs2nmZUsWrXdpd+Z78JiU5ftLzqz4jj+yNPdg3JvvasEV06RhNzwBZULzPjc+42qh/VOfv8riptFWhoqnzGzT4RqWqncU1HncduqCBgZN3vIeH2ijxaxXzoUwAmMHO8x8iW9KttexlrjSDetKjIS8Nk6kIJUVRNQLDO+0YVYEbi1RpfkrDm9ImsgdEymAzLB2uWWWv35YTTMMwvuLxnBVVoCuVZFXaOlRQtvJe1BPQUnz/3UnUQvSZbDX2TXfzqzOtYtLPYWiBCHsPddktZ5D+yiB57R3hqL3cL7aSm9Uv4/231weh9YUi+/9GcDkKpJi/KHkKUI9wtYMOAo/9Q6K9QE2jWPA5h74qutYHM8ZoFGj7ncTI1+7mncFBPg814+6g0RyXqVsP+lsQDZURKdGXsgGO+wwDp87XMgIK+p7ohacYSbHldLMQBj9AoEPRzKJaTKqZVR7JpHglXbIUPiLARSgNDRBZ5ddeTeYr2SK7qJIJUDsSF++YbZEiHzyb+s3WWWQl3pSCy6pMI2cfnHZXYBLE2dhzJpudE8wz3+1XWZKhpt3jWshmna0cw3XOK1rx7oaxKlIt2/jWleMi0SKQRZMUBzIfFbefI78+OGr4MM6s/KZDcp/ak8++lD5BprTV1zosv0i1seiSQ7DHwbd1/+0WpuU7X3jO8tGUAdLKyayUEs3xibiV5Gk3f4RDq+Xu0Jxjjb/8OirfMWt6x0NgWhztRB1ucLP8nv2upnV6Z/pCyg71nnwR10ivYzkDpQ6/uQZ2WJZTHN8A7iPDuAfSqCweDevm6F6wcPbZZBbcIdEqDgW8I8b5Kd1jbUdiKnHl3n5LF+0p7EMCWCfho9Uk77TaUPbL+5IRP+cx7/TI/PhOffwRc4D2Pg252giG0/boqkpSnOnkGswuriZqT+iZCpl7666MlP0aLLqH2GPCUNtsQdabA92515KzOxHwrrWhuUGzC0ykeKCLzic+scdhf19Sxhdphf6NNk1RvxvY39qN+YaMcF+VLD9U8VOxjBKQe+4sOej4ZtfUjfRcMM3Sfs+IX3s04kzOQLN2TYxK/KMYctuR9+w1I7hnR/psMbB8qN3lt77RBHMzd/LAwPNZ7TpwW9hIAZBPK6J3Yq+W2qTz4qroJT3hz8xWt3sXfysOlFi7p1UfD/razBZ/01NK/TdaF68/QVGg0a96v3NCXn/t6J1a5sRRGf/W2Pz7hzGaadv4++AFUvWZ9dzpQL/FntWgLi3KY0r1x1qycE98KpAqRb/tUZecCcYbTSOpdxV6B8nEwWH7yEeHTqs5t+rU9gcsrLroPcwZ3U0a3Jq4188o6NGfQgAQAHW08zDtjakbkKU5cx8b3O8OytG6qP0k1HMWaUrVNu6MnyafBUPspMu+nM0KfqkbWmGk5y0QeU8AoYgmC62iIfXKQIRblqlahH3YDtPcEnF13wLdbQ6CvJUugjc/7HV/wfnzJkdvOcnW44tlYDXYSzBaaRx6v3Nh++3GxinzEn/aKyFIz9Du1/mN87UmoFaZWqtSGO4QgyLOHke1QP/MZFxsKtBMN44ZtdHaHl5FV/EO52GuemnQw56s8bDesvdVPhdpwi/DiUYfGMNyXuJmIpRLJKsbwFZNH9zXkGZyxx4aYBE+d2kIQNgAwK+Iu+A57yj2flyDJUZfN3yvkNfajD3Ror4pVQ2rvuCHNP7iiQfl3Y3AkNSwjL7fl4NelH9C6cvkMQjvG1ImwQtITfgX2SyNBRgwL9w1ugmAtg6xCb0UebnxfOxWYk9BQPqMeZFpkKzAXGDP2cmpISmoqOYiyPhz+oqq75sulQpqgYHhQ3BJ+M5rfY/LifLFWBINo5GqVFtVPpFqq7ZwU7+dK9yqi1+MAIJICMfXob2BD4jXzszX2IKgGnidBEayJzgboa9zkfcKg4kLGQkmLPQVdGknz7MI7rMu+gZWHFbqRLyOPxrpIb6ljx0H/gdSvjrHOsRDppQrAK0vtp8dSrOZu6Zc+Vtts/NTSuo5/O6xlmJqPzoxNeshmqa1ssJHCLbbvmJhMbMlPtE68Y6e9Uff1XjmYTWjzNT/ioTlwFaS0r18rgWXJfeGGIc/Z//3MbcwxdvUjWgtrdGLd3d7AtCpzo3+L3BOPEw2a7WuEJqgsqS2AXNNFs+olq7qExIhLUW+f6RCvjEpJ6BWFSseG9XQYEfcFog+nnIkD9TzHc8Bx75ZwdedaQ6HXdw9apDNfyKOlWv6I5ox+LfWe9rE0QVpz2VNUnyRpGWnEtVdcAeeh/Sl4XvYwq4054+x7k4QK5Lva7wOje59z66njCrCQxTfoIrUEunWzYsyg59CHqOKFiJ69qbsqLF7YM/19ietZTg7g2p6vqwC9KxHZ+d4OTdH6EEBPPS9e88Q6mPwK8v3R9IIwmyul7Skl/qwUIKUbJSehuziV1SiVZUKB5X1NBPzkxbVVDHmDSL1Li2oDyFJIuS0kTig8qHPbnFfGyidqJbzBtZ3rG1Z51uLaj+nY9EcHq2vYi7HAsyLlYHCZsShGej93wa38BZ+FLFlroMt/bT2K9WodSJCQyeNAfO/CWil1TQdRHReA9O/pQx9rs8lkv4khXuAvPAcbj8Lh/fMNERf1L63Kf6r0u+yl3TqwCocskxiqSDDxurPDAUNkp6nyXQJKgI0JHn2TcqVaQ5NzgW4ra6q6viuX/ZdDmCxVWQhg==","categories":[{"name":"容器世界","slug":"容器世界","permalink":"http://www.digmyth.com/categories/容器世界/"}],"tags":[]},{"title":"CentOS 7.x/Mysql limit","slug":"mysql-limit","date":"2018-07-25T01:41:54.000Z","updated":"2018-08-25T06:25:06.410Z","comments":true,"path":"2018/07/25/mysql-limit/","link":"","permalink":"http://www.digmyth.com/2018/07/25/mysql-limit/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"python-08-07-抽象类抽象方法.md","slug":"python-08-07-抽象类抽象方法","date":"2018-06-15T12:39:12.000Z","updated":"2018-12-21T18:24:42.815Z","comments":true,"path":"2018/06/15/python-08-07-抽象类抽象方法/","link":"","permalink":"http://www.digmyth.com/2018/06/15/python-08-07-抽象类抽象方法/","excerpt":"","text":"接口当多个类都有同样的方法，此时可以把相同的方法提练出来放在父类，但对继承父类的子类作约束就要用到接口了。 下面来段伪代码，在其它语言中普遍使用的语法，不适于python,这里主要学习其思想12345678910111213141516interface IFoo(): # 这个叫IFoo接口，约束实现该接口的类必须实现定义的方法 def exec(self):passclass A(IFoo): # 这个叫实现了IFoo接口，接口中的方法必须在当前类实现 def exec(self): return &quot;A.exec&quot;class B(IFoo): def exec(self): return &apos;B.exec&apos;def f1(arg): arg.exec()obj = A()print(f1.obj) 上面就是接口的概念或者用法，下面是用抽象类、抽象方法实现同样功能的原理伪代码123456789101112AbstractClass Foo(): 抽象类，抽象方法(有继承的特性，也有约束的特性) def abstractmethod():passclass A(Foo): def exec(self): return &apos;A.exec&apos; def f1(self): return &quot;A.f1&quot;obj = A()obj.exec() 那么如何用代码实现python抽象类、抽象方法呢？ 要用到from abc import abstractmethod,ABCMeta1234567891011121314151617from abc import abstractmethod,ABCMetaclass IFoo(metaclass=ABCMeta): @abstractmethod def exec(self):pass def f1(self): return &quot;cloud implement really method&quot;class A(IFoo): # 当前类继承了抽象类，当前类必须实现抽象类中的所有抽象方法，其它方法可以不用定义且可以直接继承使用。 def exec(self): return &quot;really method&quot;obj = A()print(obj.exec())print(obj.f1()) 好了， 这个接口或抽象类、抽象方法的学习完结。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"Rabbitmq集群","slug":"Rabbitmq","date":"2018-06-08T01:41:54.000Z","updated":"2021-03-03T07:10:17.722Z","comments":true,"path":"2018/06/08/Rabbitmq/","link":"","permalink":"http://www.digmyth.com/2018/06/08/Rabbitmq/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"shell function语法","slug":"shell-func","date":"2018-05-29T01:41:54.000Z","updated":"2018-06-25T02:18:08.139Z","comments":true,"path":"2018/05/29/shell-func/","link":"","permalink":"http://www.digmyth.com/2018/05/29/shell-func/","excerpt":"","text":"Linux shell中函数语法很重要，它能让你写出很漂亮的shell,来看个例子学习下 1234567891011121314151617181920212223242526272829cat /usr/local/bin/show #!/bin/basha=&apos;df -hT&apos;b=&quot;ls&quot;echo_print() &#123; echo -e &quot;\\033[1;32m$1\\033[0m&quot;&#125;exec() &#123; echo_print &quot;$1&quot; $1 echo &quot;&quot;&#125;info () &#123; exec $a exec $b&#125;case &quot;$1&quot; ininfo) info;;*) echo &quot;Usage: show info&quot;;;esac 相当于定制了一个shell命令，运行一下看下效果12345678910111213#[root@wxqnode opt]# show infodfFilesystem 1K-blocks Used Available Use% Mounted on/dev/mapper/centos-root 22001156 1946776 20054380 9% /devtmpfs 2962076 0 2962076 0% /devtmpfs 2973096 0 2973096 0% /dev/shmtmpfs 2973096 33268 2939828 2% /runtmpfs 2973096 0 2973096 0% /sys/fs/cgroup/dev/sda1 1038336 145652 892684 15% /boottmpfs 594620 0 594620 0% /run/user/0lsrestart_cob study venv","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"get namespace","slug":"shell-get-namespace","date":"2018-01-29T01:41:54.000Z","updated":"2019-05-26T11:41:52.484Z","comments":true,"path":"2018/01/29/shell-get-namespace/","link":"","permalink":"http://www.digmyth.com/2018/01/29/shell-get-namespace/","excerpt":"","text":"get namespace shell123456789101112131415161718# read me :please mv this file to ns;use method #ns info#!/bin/bash#echo_print () &#123; echo -e &quot;\\033[32m$1\\033[0m&quot;&#125;nsinfo () &#123;for i in $(ip netns);do echo_print $i;ip netns exec $i ifconfig | grep &quot;inet addr:10&quot; |awk &apos;$1=$1&apos;;echo &apos;&apos; ;done&#125;case &quot;$1&quot; ininfo) nsinfo ;;*) echo_print &quot;Usage: ns info command&quot; ;;esac","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"linux awk","slug":"linux-awk","date":"2018-01-15T02:48:54.000Z","updated":"2021-01-29T09:59:47.621Z","comments":true,"path":"2018/01/15/linux-awk/","link":"","permalink":"http://www.digmyth.com/2018/01/15/linux-awk/","excerpt":"","text":"知识1： awk中,字符串或空串参与运算时会被当作数字0 1234[root@cloud-site mnt]# awk &apos;BEGIN&#123;a=&quot;test&quot;;print a; a=a+1;print a;a++;print a&#125;&apos;test12 知识2：直接引用一个数组中不存在的元素时，awk会自动创建这个元素，并且为其赋值为”空字符串”，同样参与运算时被当作数字0 123[root@cloud-site mnt]# awk &apos;BEGIN&#123;print t[&quot;ip&quot;]; t[&quot;ip&quot;]++;print t[&quot;ip&quot;]&#125;&apos;1 123456789101112示例;[root@cloud-site mnt]# cat test.txtaa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.txt | awk &apos;&#123;A[$1]++&#125;END&#123;for (i in A)&#123; print i,A[i]&#125; &#125;&apos;bb 2cc 2aa 2 示例一123456789101112[root@cloud-site mnt]# cat a.log1|aa|3|45|5|6|7|8|9|2|aa|3|44|5|6|7|8|9|3|aa|3|43|5|6|7|8|9|4|aa|3|44|5|6|7|8|9|5|bb|3|45|5|6|7|8|9|6|bb|3|4 |5|6|7|8|9|[root@cloud-site mnt]# awk -F&apos;|&apos; &apos;&#123;counxxt[$4]++;&#125;END&#123;for (i in counxxt) &#123;print i&quot;|&quot;counxxt[i]&#125;&#125;&apos; a.log44|245|24 |143|1 示例二12345678910111213141516171819202122if 表达式1？那么表达式2 ： 否则 表达式3[root@cloud-site mnt]# cat test.txt aa 99bb 75cc 55aa 100cc 99bb 40[root@cloud-site mnt]# cat test.sh#awk &apos;BEGIN &#123;#printf &quot;%s,%5s,%4s\\n&quot;,&quot;IP&quot;,&quot;AVG&quot;,&quot;MAX&quot;#&#125;awk &apos;&#123;A[$1]++;SNF[$1]+=$NF;MAXNF[$1]=($NF&gt;MAXNF[$1]?$NF:MAXNF[$1])&#125;END&#123;for (IP in A) print IP,SNF[IP]/A[IP],MAXNF[IP]&#125;&apos; test.txt[root@cloud-site mnt]# sh test.shbb 57.5 75cc 77 99aa 99.5 100","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"python-django-26-API验证","slug":"python-django-26-API验证","date":"2018-01-06T12:51:41.000Z","updated":"2018-02-12T12:44:12.444Z","comments":true,"path":"2018/01/06/python-django-26-API验证/","link":"","permalink":"http://www.digmyth.com/2018/01/06/python-django-26-API验证/","excerpt":"","text":"前言 验证原理 代码实现 讲解Django api验证，基于Tornado签名Cookie源码 验证原理客户端 服务端和客户端共同存一个字符串，客户端用这个字符串和时间戳算一个md5值，把这个md5和时间戳组成一个字符串在请求头里发送给服务端。 服务端 服务端收到这个字符串，分别取出md5和时间戳，用这个时间戳与自己存的key&#39;也算一个md5`值，这个md5值与客户端发来的md5值作比较。 当然这里还是不够的，比如黑客拿到md5和时间戳呢？ 我们还需要作进一步策略 策略一：发来的时间戳+5秒小于服务器时间戳，认为是非法请求 策略二：基于字符串和时间戳算的md5不等于客户端发来的md5值，认为是非法请求 策略三：5秒钟内的请求作进一步验证，维护一个5秒钟内的合法请求md5值,再来这个md5值的，认为是非法请求。5秒钟失效需要借住memcache redis，它们都自带过期时间。 策略四：如果基于网络原因，黑客的非法请求比客户端的请求先到达服务器，这样只能数据AES加密了。 代码实现客户端发送请求头 123456import timeimport hashlibdef md5(arg): hs = hashlib.md5() hs.update(arg.encode(&quot;utf-8&quot;)) return hs.hexdigest() 12345ctime=time.time()key=&apos;sdgasgsdgsdffsdf&apos;new_key=&quot;%s|%s&quot; %(key,ctime)md5_str = md5(new_key)auth_md5_str=&quot;%s|%s&quot; %(mdr_str,ctime) 发送请求 1requests.get(url=&quot;http://127.0.0.1:8000/test_api/&quot;,headers = &#123;&apos;auth-api&apos;:auth_md5_str&#125;) 服务端 123456789server_float_time = time.time()auth_header_val = requests.META.get(&apos;HTTP_AUTH_API&apos;)client_md5_str,client_ctime=auth_header_val.rsplit(&apos;|&apos;,maxsplit=1)if (client_float_time + 5) &lt; server_float_time : return HttpResponse(&quot;已过期&quot;)server_md5_str != client_md5_str: return HttpResponse(&quot;非法请求&quot;)if visited_keys.get(client_md5_str): return HttpResponse(&quot;来晚了，你是非法的&quot;) &lt;数据加密待续&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Flask-基础","slug":"web-Flask-基础","date":"2018-01-01T12:51:41.000Z","updated":"2018-04-23T07:00:52.290Z","comments":true,"path":"2018/01/01/web-Flask-基础/","link":"","permalink":"http://www.digmyth.com/2018/01/01/web-Flask-基础/","excerpt":"","text":"前言","categories":[{"name":"WebFlask开发","slug":"WebFlask开发","permalink":"http://www.digmyth.com/categories/WebFlask开发/"}],"tags":[]},{"title":"web-Django-25-DjangoAdmin","slug":"web-django-25-DjangoAdmin","date":"2017-12-28T12:37:00.000Z","updated":"2019-01-15T03:53:24.763Z","comments":true,"path":"2017/12/28/web-django-25-DjangoAdmin/","link":"","permalink":"http://www.digmyth.com/2017/12/28/web-django-25-DjangoAdmin/","excerpt":"","text":"目录 DjangoAdmin工作流程 制作启动文件 单例模式应用 博客参考 一 Django admin工作流程1 注册models_class，生成_registry 中model_class 字典1234admin.py注册models_class如models.UserInfofrom django.contrib import adminfrom app01 import modelsadmin.site.register(models.UserInfo) 2 admin.site.urls admin.site.urls循环_registry={}字典生成相应URL12345生成4个URL分别是如下：app01/userinfo/app01/userinfo/add/app01/userinfo/1/change/app01/userinfo/1/delete/ 其中要深入理解URL include原理： url(r’^xx’, “可以是视图函数，也可以是元组”),1234567partterns = [ url(r&apos;^admin&apos;, admin.site.urls), # admin.site.urls 返回形如（[],None,None）的元组. url(r&apos;^backend&apos;, include(&apos;backend.urls&apos;)), # include 同样返回形如（[],None,None）的元组. # 也可以写成形如 include([],None,None) 格式. ] 二 制作stack启动文件 1 创建一个stack 的app 2 settings.py 注册app- &apos;stack.apps.StackConfig&apos;, 3 在stack apps.py文件定义ready方法 stack/apps.py文件ready()方法123456from django.utils.module_loading import autodiscover_modulesclass StackConfig(AppConfig): name = &apos;stack&apos; def ready(self): autodiscover_modules(&quot;xxx&quot;) 4 启动项目时会先在执行所有app下的xxx.py文件. (当然前提是这些app也是settings.py注册好的) 三 单例模式单例模式有很多种实现方式 其中一种：利用模块多次导入时，除第一次外不会真正执行模块代码。 如果模块中有实例化对象操作，那么多次导入也不会真正实例化多个对象，而是同一个实例 如果在一个程序先运行的文件改变了实例数据或属性，后运行的文件导入后读这个实例就会有数据或属性. 示例： 随便定义一个实例化对象的文件stack/service.v1 123456789class StackSite(): def __init__(self): self._registry = &#123;&#125; def register(self,class_name,config_class): self._registry[class_name] = config_class site = StackSite()## 单例 在我们定义的启动文件app01/xxx.py中写入代码(因为会先执行xxx.py) 1234from stack.service import v1v1.site.register(&quot;k1&quot;,&quot;v1&quot;)v1.site.register(&quot;k2&quot;,&quot;v2&quot;)v1.site.name = &apos;wxq&apos; 项目urls.py中写入 from stack.service import v1 print(v1.site._registry) print(v1.site.name) 总结启动项目时，先执行app01/xxx.py,后执行urls.py文件，程序读到了实例的数据并不是重新实例化新对象，这就是单例模式的运用。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-24-Django中间件","slug":"web-django-24-Django中间件","date":"2017-12-26T12:26:37.000Z","updated":"2018-01-18T03:43:22.000Z","comments":true,"path":"2017/12/26/web-django-24-Django中间件/","link":"","permalink":"http://www.digmyth.com/2017/12/26/web-django-24-Django中间件/","excerpt":"","text":"目录 官方解释 Django默认 定义中间件 示例 总结 Django中间件学习 官方解释1234This document explains all middleware components that come with Django.For information on how to use them and how to write your own middleware, see the middleware usage guide.Middleware is a framework of hooks into Django’s request/response processing.It’s a light, low-level “plugin” system for globally altering Django’s input or output. Django 中间件是一个钩进request/response处理过程的框架，轻量且较为底层的插件系统，全局改变Django输入输出。 Django默认12345678910Django默认中间件MIDDLEWARE = [ &apos;django.middleware.security.SecurityMiddleware&apos;, &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, &apos;django.middleware.common.CommonMiddleware&apos;, &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;, &apos;django.contrib.messages.middleware.MessageMiddleware&apos;, &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,] 定义中间件在Django中就表现为一个类.123456789101112m1.process_exception(self, request, exception): print(&quot;m1.process_exception1&quot;)m1.process_requestm2.process_requestm1.process_viewm2.process_viewviews.pym2.process_exceptionm1.process_exceptionm2.process_responsem1.process_response 中间件流1234process_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_responseprocess_request process_view process_exception process_response 示例1... 总结：基于Django中间件我们能实现一些功能，这些处理是在请求到来之前或views视图函数处理过后。 process_request可以有返回值，也可以没有返回值。 process_response必须有返回值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-17-ModelForm","slug":"web-django-17-ModelForm","date":"2017-12-20T12:26:37.000Z","updated":"2018-01-18T03:48:11.260Z","comments":true,"path":"2017/12/20/web-django-17-ModelForm/","link":"","permalink":"http://www.digmyth.com/2017/12/20/web-django-17-ModelForm/","excerpt":"","text":"目录 回顾Form ModelForm特性 ModelForm使用 html前端展示 ModelForm简介1 回顾FormForm作用：第一： 用于Form验证第二： 用于生成 html标签，并且可以保留数据（如编辑） 缺点：多表查询时需要手动查出数据在前端渲染，跨表保存数据同样需要手动update() 2 ModelForm特性解决办法，引用ModelForm 1 它可以循环model class字段在前端生成表单或html标签并保留数据 2 调用save()方法自动跨表保存数据。 3 可以自定义models class以外的fields字段,很灵活，如果自定义的字段名与model class字段名重名， 那么model class字段将被重写 4 ModelForm同样可以做数据验证包括钩子函数 5 ModelForm中的fields字段是可以循环的，循环在前端生成不必写 6 当编辑数据时传入instance=obj 可以循环生成表单并且表单有值。 ModelForm适用场景 Form与ModelForm没有谁好谁不好，只是适用场景不同。 ModelForm依赖modelsclass, modelForm必须和models.py在一起。 3 ModelForm使用12345678910111213141516171819from django.forms import Formfrom django.forms import ModelFormfrom django.forms import fieldsfrom django.forms import widgets as fwidgetsfrom app01 import modelsclass TestForm(ModelForm): class Meta: model = models.Book fields = &quot;__all__&quot; # 可以是[&quot;&quot;,&quot;&quot;,] labels = &#123; &apos;title&apos;:&quot;书名&quot;, &quot;price&quot;:&quot;价格&quot;, &#125; error_messages = &#123; &quot;title&quot;:&#123;&quot;requried&quot;:&quot;书名不能为空&quot;,&#125;, &#125; widgets=&#123; &quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;) &#125; 4 html前端展示1234567&lt;form action=&quot;/addbook/&quot; method=&quot;POST&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;% for field in form %&#125; &lt;p&gt;&#123;&#123; field.label &#125;&#125;:&#123;&#123; field &#125;&#125; &#123;&#123; field.errors.0 &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt; 引入bootstrap时，querySet for循环展示:注意时间格式的转换1234567891011121314&lt;div class=&quot;container&quot; style=&quot;width: 700px;margin-top: 50px&quot;&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt;&lt;/thead&gt; &lt;tbody&gt; &#123;% for row in data_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; row.title &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.price &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; row.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"03-GET/POST/ContentType知识","slug":"web-get_post_contentype知识","date":"2017-12-15T12:51:41.000Z","updated":"2018-02-12T09:50:11.623Z","comments":true,"path":"2017/12/15/web-get_post_contentype知识/","link":"","permalink":"http://www.digmyth.com/2017/12/15/web-get_post_contentype知识/","excerpt":"","text":"前言 ContentType知识 requests发送get/post请求分析 requests发送get/post请求示例 表格总结 一、ContentType知识contentType 定义： 客户端告知服务器如何组装数据来发送，服务器那边就必须以相应编码解开。 contentType一般为 application/x-www–form-urlencode12如form就默认enctype=&quot;application/x-www-form-urlencoded&quot;形如b&apos;user=wxq&amp;pwd=123&apos; 组装数据。 Django帮我们默认以enctype=”application/x-www-form-urlencoded”解开后放在request.GET或 request.POST里方便我们取数据。如果是application/json 格式，双引号字符串 {“user”:”wxq”,”pwd”:123}，需自行解数据。 1form文件传送时必须指明enctype=&quot;multipart/form-data&quot; 如果是application/json,就要用相应格式解开后组装数据。application/json 双引号字符串 {“user”:”wxq”,”pwd”:123} request.body 报文元数据12345application/json data: JSON.stringfy(&#123;d&#125;) # 前端以json 格式发数据s=request.body.decode(&quot;utf8&quot;)d=json.loads(s) # 后端以json格式解数据d[&apos;name&apos;] 当ajax处理数据时，后端数据以json格式传过来的，那么前端需手动JSON.parse()反序列化操作， 我们可以添加参数datatype: “JSON” ，添加后就自动反序列化了。 二、 requests发送get/post请求分析分析知识点 分析如何组装数据发送 分析get/post请求组装数据方式的不同 分析get/post方式不同，requests参数写法上的不同 大家都知道请求头之间用\\r\\n分隔，请求头与请求体用\\r\\n\\r\\n分隔。 GET请求头get请求发送数据封装在请求头，形如http://www.baidu.com/?a=1&amp;b=2 get请求发送数据用params,params中的数据会组装在请求头上12requests.get(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;)data=&quot;http GET /index?a=1&amp;b=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&quot; POST请求头post请求发送数据可以像get一样?a=1&amp;b=2封装在请求头，但决大多数情况封装在请求体，形如1data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时可以data传参，数据在请求体里，封装为name=wxq&amp;age=18,请求头ContentType为application/x-www-form-urlencoded12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,data=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\nname=wxq&amp;age=18&quot; post时也可以json传参,数据在请求体里，封装为json.dumps({‘name’:’wxq’,’age’:18})后的字符串。请求头ContentType为application/json12requests.post(url=&quot;http://www.baidu.com/&quot;,params=&#123;&apos;a&apos;:1&#125;,json=&#123;&apos;name&apos;:&apos;wxq&apos;,&apos;age&apos;:18&#125;)# data=&quot;http POST /index?a=1 http1.1\\r\\nhost:baidu.com\\r\\n....\\r\\n\\r\\n&#123;&quot;name&quot;: &quot;wxq&quot;, &quot;age&quot;: 18&#125;&quot; 服务器解析当服务器接收到客户端发来的数据，所有的数据会放到request.FILES或request.body里，再跟据ContentType的不同放到相应变量里,如request.POST里是Content-Type:application/x-www-form-urlencoded; charset=UTF-8,也就是data而非json格式发来的数据。 12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 三、requests发送get/post请求示例data传参可以是字典可以是字符串可以是字节可以是文件对象1 requests.request(method=”post”,data=字典)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}1requests.post(url=&quot;xxx&quot;,data=&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;) 2 requests.request(method=”post”,data=字符串)默认加headers={&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}12requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq&amp;pwd=123&quot;) # 或requests.post(url=&quot;xxx&quot;,data=&quot;name=wxq;pwd=123&quot;) 基于HTTP本质，上面2种数据最终转为请求体\\r\\n\\r\\nname=wxq&amp;pwd=123 3 手动构建json字符串发送手动加headers={&#39;Content-Type&#39;: &#39;application/json&#39;}1234requests.post( url=&quot;xxx&quot;, data=json.dumps(&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;:123&#125;), headers=&#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;) json传参requests.request(method=”post”,json=…)1) 将json中对应的数据进行序列化成一个字符串，json.dumps(…)2) 然后发送到服务器端的body中3) 并且自动Content-Type是 {‘Content-Type’: ‘application/json’}1234def param_json(): requests.request(method=&apos;POST&apos;, url=&apos;http://127.0.0.1:8000/test/&apos;, json=&#123;&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;水电费&apos;&#125;) json方式传输数据的一种场景Content type: application/x-www-form-urlencode不支持传键所对应的值为字典的字典.1request.post(url=url,data=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 不支持 传键所对应的值为字典的字典,这种情况只能以json方式传送数据12request.post(url=url,json=&#123;&apos;name&apos;:&#123;&#125; &#125; ) # 支持Content type: application/json 四、总结 methond 传参 解析为 浏览器显示标识名 GET params ?page=1&amp;k1=v1 Query String Parameter POST data \\r\\n\\r\\nname=wxq&amp;pwd=123 Form Data POST json \\r\\n\\r\\n{“name”:”wxq”,”age”:18}” Request Payload","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"python-spider-基础知识","slug":"python-spider01-基础知识","date":"2017-12-06T12:51:41.000Z","updated":"2018-02-12T11:57:36.272Z","comments":true,"path":"2017/12/06/python-spider01-基础知识/","link":"","permalink":"http://www.digmyth.com/2017/12/06/python-spider01-基础知识/","excerpt":"","text":"前言 爬虫简介 具备技能 爬虫实现 爬虫示例 简介爬虫：利用python模块伪造浏览器行为，读取网页源码，再经过正则匹配取出HTML文本的一系列处理，数据分析称为爬虫 基本内容：123456789- python实现浏览器行为： requests- beautifulsoup4 对HTML内容进行分析- HTTP相关知识： - cookie - csftToken - 请求头：其中ContenType表明什么格式封装的数据，服务器需要用相应格式解数据 请求： 请求头(cookie)/请求体(发送的内容) 响应： 响应头（浏览器读取头数据）/响应体（我们看到的网页或网页源码）- 数据持久化（数据库存储） 具备技能1234567891011性能相关：批量get URL可想而知性能重要性1 线程池，进程池，2 协程coroutine（微线程）： 协程本身没有用，只做切换，具有切换特性,要想性能很高，刚好遇到IO时切换 3 异步非阻塞（如twisted,gevent,asyncio,tornado内部集成） 其中gevent异步模块由2个东西组成: greenlet协程: greenlet就是利用yield实现的协程 libevent: libevent做异步IO库 七牛云进程线程分享 异步非阻塞123遇到IO请求不等待继续执行其它任务,如果IO请求响应内容回来了,自动回调某个函数.异步： 回调（相关于通知机制）非阻塞： 不等待 后面会学到爬虫框架：scrapy1231 内部是twisted实现异步2 写入URL自动下载网页3 自动将下载的网页解析为对象方便我们处理 后面也会学到分布式爬虫组件redis-scrapy 爬虫实现基本模块：12pip3 install requestspip3 install beautifulsoup4 （将网页字符串解析为对象，用于直接取文本内容） 爬虫实现123451 代码发送get请求： 请求头+请求体2 接收返回值： 响应头+响应体（本质字符串）3 获取响应体后进行解析，方便获取文本内容 import requests from bs4 import BeautifulSoup 注意几点：1231 回车时得到token和cookies,如果有token和cookies的话取出来,一般get请求2 提交用户名密码时带上token和cookies,一般post请求,并且取出登录成功后的cookies3 登录后才能看到的网页(前2次请求的cookies都带上) 示例示例这里就不展开了，可以基于这几个站点简单入门 github或汽车之家 抽届点赞 博客园用户名密码密文发送给服务器的情况，其实是利用js三方模块在浏览器端加密再发送的（python rsa模块加密） 知乎，新浪微博这种有图形验证码的网站，需要第三方平台做图像识别（类似滑动验证码这种验证其实是向后台发送鼠标坐标）","categories":[{"name":"Web爬虫开发","slug":"Web爬虫开发","permalink":"http://www.digmyth.com/categories/Web爬虫开发/"}],"tags":[]},{"title":"web-Django-23-Django序列化","slug":"web-django-23-Django序列化","date":"2017-12-01T12:26:37.000Z","updated":"2018-01-18T03:43:21.996Z","comments":true,"path":"2017/12/01/web-django-23-Django序列化/","link":"","permalink":"http://www.digmyth.com/2017/12/01/web-django-23-Django序列化/","excerpt":"","text":"目录 序列化 Django中的序列化操作序列化操作参考ajax学习Django返回前端数据一般为json格式，那么就要数据进行序列化。方法一：Django内置serializers123from django.core import serializersret = models.BookType.objects.all()data = serializers.serialize(&quot;json&quot;, ret) 方法二：json.dumps123456import json #ret = models.BookType.objects.all().values(&apos;caption&apos;)ret = models.BookType.objects.all().values_list(&apos;caption&apos;)ret=list(ret)result = json.dumps(ret,nsure_ascii=False) 方法三：由于json.dumps时无法处理datetime日期，所以可以通过自定义处理器来做扩展12345678910111213import json from datetime import date from datetime import datetime class JsonCustomEncoder(json.JSONEncoder): def default(self, field): if isinstance(field, datetime): return o.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) elif isinstance(field, date): return o.strftime(&apos;%Y-%m-%d&apos;) else: return json.JSONEncoder.default(self, field) # ds = json.dumps(d, cls=JsonCustomEncoder) 有时在前端渲染也需要date:&#39;Y-m-d&#39;处理一下1&lt;p&gt;出版日期&lt;input type=&quot;date&quot; name=&quot;pubdate&quot; value=&quot;&#123;&#123; edit_book.pubDate | date:&apos;Y-m-d&apos; &#125;&#125;&quot;&gt;&lt;/p&gt; 如果用到了Form或ModelForm，同样需要widgets处理下时间格式12widgets=&#123;&quot;pubDate&quot;:fwidgets.DateInput(attrs=&#123;&quot;type&quot;:&quot;date&quot;,&quot;class&quot;:&quot;c1&quot;&#125;)","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-21-图片上传","slug":"web-django-21-图片上传","date":"2017-11-21T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/21/web-django-21-图片上传/","link":"","permalink":"http://www.digmyth.com/2017/11/21/web-django-21-图片上传/","excerpt":"","text":"目录 上传文件版本一 上传文件版本二 上传文件版本三 上传文件版本一定义views.py123456789101112def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) else: obj=request.FILES.get(&quot;fff&quot;) # obj.name 文件名 # obj.chunks 文件块 f = open(obj.name,&apos;wb&apos;) for chunk in obj.chunks(): f.write(chunk) f.close() return render(request,&quot;upload.html&quot;) upload.html12345&lt;form action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;p&gt;&lt;input type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt;&lt;/form&gt; 上传文件版本二版本一中form表单上传文件或图片无法做预览，并无法做失败验证及上传文件大小限制，那么就要用到ajax 方式发送。下面学习下ajax方式上传文件。定义views.py12345678910111213def upload(request): if request.method==&quot;GET&quot;: return render(request,&quot;upload.html&quot;) elif request.is_ajax(): file_obj= request.FILES.get(&apos;obj&apos;) print(obj) f = open(file_obj.name, &apos;wb&apos;) for chunk in file_obj.chunks(): f.write(chunk) f.close() return HttpResponse(&quot;ok&quot;) else: pass 12345678910111213141516171819202122232425262728293031&lt;h1&gt;ajax形式上传文件&lt;/h1&gt;&lt;input type=&quot;file&quot; id=&quot;f4&quot;/&gt;&lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;btn&quot;&gt; #input的button默认不会有任何事件，除非绑定事件&#123;% csrf_token %&#125;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function () &#123; $(&quot;#btn&quot;).click(function () &#123; var fm=new FormData(); fm.append(&apos;obj&apos;,$(&quot;#f4&quot;)[0].files[0]); fm.append(&apos;csrfmiddlewaretoken&apos;,$.cookie(&apos;csrftoken&apos;)); //自行组数据$(&quot;input[name=&apos;csrfmiddlewaretoken&apos;]&quot;).val()); // fm.append(&apos;file_obj&apos;,document.getElementById(&quot;f4&quot;).files[0]); //document.getElementById(&quot;f4&quot;) # dom对象 // $(&quot;#f4&quot;) # jquery对象 // $(&quot;#f4&quot;)[0] #jquery对象转dom对象 $.ajax(&#123; url:&apos;/upload/&apos;, type:&apos;POST&apos;, data:fm, processData: false, contentType: false, success:function (data) &#123; console.log(data); &#125; &#125;) &#125;) &#125;)&lt;/script&gt; 上传文件版本三版本二中对各种浏览器兼容不好，可以再次改进. 利用form+iframe特性做的，业内都是这么做的，很重要，兼容性非常好。形式上与ajax很像但不是ajax,称伪ajax,后端不能用request.is_ajax()判断请求方式。不得不先来学习下iframe标签12&lt;iframe id=&quot;ifm&quot; src=&quot;http://www.chouti.com&quot;&gt;&lt;/iframe&gt;$(&quot;#ifm&quot;).attr(&apos;src&apos;, &apos;http://www.qq.com&apos;) # 修改iframe src属性但页面不刷新，返回的数据不在整个页面，而在iframe body里，基于这样的特性我们可以上传文件。 当form表单以iframe形式发送数据到后端，后端返回的数据会在iframe body里form 的target属性值要与iframe的name属性值保持一致。12345&lt;form id=&quot;ff1&quot; action=&quot;/upload/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &lt;p&gt;&lt;input onchange=&quot;changeImg();&quot; type=&quot;file&quot; name=&quot;fff&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input id=&quot;sb&quot; type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/p&gt; &lt;/form&gt;&lt;iframe id=&quot;ifm&quot; name=&quot;ifr&quot; onload=&quot;sucessBack();&quot; &gt;&lt;/iframe&gt; 那么如何取出iframe body里的值呢？1$(&quot;#ifm&quot;).html(); # iframe会重新生成一个子document,有html/head/body,这种方法无法取出。 1$(&quot;#ifm&quot;).find(&apos;body&apos;).html(); # 有这种想法是好的，这种找只会在当前document里找，但是这样的document嵌套递归查找需要一个额外方法处理.contents()后再查找 1$(&quot;#ifm&quot;).contents().find(&apos;body&apos;).html(); # iframe最终正确的方法 文件上传完整版utils.py12345class BaseResponse(): def __init__(self): self.status=False self.data=None self.error=None views.py123456789101112131415161718192021from django.shortcuts import render,HttpResponse,redirectimport os,jsonfrom utils import BaseResponseret=BaseResponse()def upload(request): if request.method == &quot;GET&quot;: return render(request, &quot;upload.html&quot;) else: try: file_obj=request.FILES.get(&apos;fff&apos;) # file_obj.name # file name # file_obj.chunks() #file block file_path = os.path.join(&apos;static&apos;, file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) ret.status=True ret.data=file_path except Exception as e: ret.error=&quot;上传失败&quot; return HttpResponse(json.dumps(ret.__dict__,ensure_ascii=False)) upload.html123456789101112131415161718192021222324252627282930&lt;form id=&quot;sb&quot; action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; target=&quot;ifr&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;file&quot; name=&quot;fff&quot; onchange=&quot;changeImg();&quot;/&gt; &lt;!-- 元素更新时触发onchange事件 --&gt;&#123;# &lt;input type=&quot;submit&quot;&gt;#&#125;&lt;/form&gt;&lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; onload=&quot;successBack();&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt;&lt;div id=&quot;prevImg&quot;&gt;&lt;/div&gt;&lt;!-- 我们这里不是真正的ajax,是没有success回调函数的,上传成功后会返回数据到前端，文本载入会触发onload事件。 --&gt;&lt;script src=&quot;/static/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function successBack() &#123; var v=$(&quot;#ifr&quot;).contents().find(&quot;body&quot;).html(); var v=JSON.parse(v); if(v.status)&#123; var tag=document.createElement(&apos;img&apos;); tag.src=&quot;/&quot;+v.data; $(&quot;#prevImg&quot;).append(tag); &#125;else &#123; console.log(v.error) &#125; &#125; function changeImg() &#123; $(&quot;#sb&quot;)[0].submit(); // document.getElementById(&apos;sb&apos;).submit(); &#125;&lt;/script&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-20-ajax","slug":"web-django-20-ajax","date":"2017-11-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.992Z","comments":true,"path":"2017/11/20/web-django-20-ajax/","link":"","permalink":"http://www.digmyth.com/2017/11/20/web-django-20-ajax/","excerpt":"","text":"目录 代码例子 代码例子 ajax前端组装数据 ajax涉及的序列化 ajax错误验证 ajax的3种csrf_token Ajax 学习详情参考Ajax 武佩齐博客 这里只是对Ajax学习做一个记录和总结，内容还有很多没有包括。 代码例子普通请求 —&gt; render渲染全部HTMLAjax – -&gt; render生成己经渲染好的局部HTML, 功能单一。Ajax — &gt; HttpResponse(‘data’) 得到原始数据，ajax前端自行展示，定制化强，一般用于提供接口，为别人提供数据。 render和HttpResponse的关系？render:1 模板+数据进行替换2 HttpResponse(数据) HttpResponse:1 HttpResponse(数据) Ajax请求时，响应内容时可以是render和HttpResponse,不要认为只能用HttpResponse. views.py里不能return redirect(&quot;&quot;)跳转是在前端跳转location.href = “http://www.baidu.com&quot; ajax前端组装数据ajax形式发input数据时在前端取数据并组装数据后给后台123ajax取input数据时，可以用data:&#123;&quot;user&quot;:$(&quot;#user&quot;).val(),&quot;pwd&quot;:$(&quot;#pwd&quot;).val()&#125;获取数据，更简单的数据组装方法是加form表单:&lt;form id=&quot;ff&quot;&gt;&lt;input /&gt;&lt;/form&gt;此时取数据可以用：data: $(&quot;#ff&quot;).serialize(), ajax涉及的序列化Django 中Ajax方式获取ORM数据时，涉及序列化操作的5种方法1234567891011121314151617181920212223242526272829303132333435363738394041424344# # 方式一 我们伪造的数据是可以序列化实现展示的# # 模板渲染后生成字符串# # user_list = models.UserInfo.objects.all()# ## # return render(request,&quot;tpl.html&quot;,&#123;&quot;user_list&quot;:user_list&#125;)# user_list = [# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# &#123;&apos;id&apos;:1,&apos;name&apos;:&apos;wxq&apos;, &apos;pwd&apos;:123&#125;,# ]## import json# data = json.dumps(user_list)# return HttpResponse(data)# # 方式二： 这里是失败的， QuerySet不支持Json序列化，经测试失败# user_list = models.UserInfo.objects.all()# import json# return HttpResponse(json.dumps(user_list))# # 方式三 也是成功的,但不常见## user_list = models.UserInfo.objects.all()# from django.core import serializers# data= serializers.serialize(&quot;json&quot;, user_list)# return HttpResponse(data)# 方式四 推荐用法user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data)# 方式五 user_list = models.UserInfo.objects.values_list(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;)user_list=list(user_list)print(user_list)import jsondata = json.dumps(user_list)return HttpResponse(data) Ajax 错误验证123456789101112## 异常判断 import json ret = &#123;&apos;status&apos;:False,&apos;data&apos;:None,&apos;error&apos;:None&#125; try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret[&apos;status&apos;]= True ret[&apos;data&apos;] = user_list except Exception as e: ret[&apos;error&apos;] = &apos;获取数据失败&apos; data = json.dumps(ret) return HttpResponse(data) 或者以类的形式调用更为简洁123456789101112131415161718app01项目下新建utls.pyclass BaseResponse(): def __init__(self): self.status = False self.data = None self.error = Noneviews.py中导入：from app01.utils import BaseResponseret = BaseResponse()try: user_list = models.UserInfo.objects.values(&quot;id&quot;,&quot;username&quot;,&quot;pwd&quot;) user_list=list(user_list) ret.status= True ret.data = user_listexcept Exception as e: ret.error = &apos;获取数据失败&apos; data = json.dumps(ret.__dict__,ensure_ascii=False) # False表示不要中文为变为unicode编码 return HttpResponse(data) 1234var tag.createElement(&quot;a&quot;)tag.innertHTML=&quot;hello&quot;div.append(tag) # &lt;div&gt; &lt;a&gt;hello&lt;/a&gt;&lt;/div&gt; 加在标签里面div.after(tag) # &lt;div&gt;&lt;/div&gt;&lt;a&gt;hello&lt;/a&gt; 加在标签后面 ajax的3种csrf_token方法一： 自己组装数据csrf_token12&#123;% csrf_token %&#125; 会生成带csrfmiddlewaretoken的input标签data:&#123;&apos;csrfmiddlewaretoken&apos;:$(&apos;input[name=&quot;csrfmiddlewaretoken&quot;]&apos;).val()&#125; 方法二：加 form表单后用$(“#form_id”).serialize()方法自动组装数据 121 添加form HTML 标签 &lt;form id=&quot;form_id&quot;&gt;&lt;input /&gt;&lt;/form&gt;2 用data: $(&quot;#form_id&quot;).serialize(),自动组装数据 方法三：自行在cookies里取csrf_token放在请求头里参考1234561 导入jquery.cookie.js: &lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;2 jquery方式操作cookie取值: csrf_token=$.cookie(&apos;csrftoken&apos;) 3 ajax形式添加到请求头里，注意写法是定死的 $.ajax(&#123; header: &#123;&quot;X-CSRFToken&quot;: $.cookie(&apos;csrftoken&apos;)&#125;， )&#125;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"linux nginx基础","slug":"linux-nginx","date":"2017-11-12T01:41:54.000Z","updated":"2018-10-21T11:30:26.599Z","comments":true,"path":"2017/11/12/linux-nginx/","link":"","permalink":"http://www.digmyth.com/2017/11/12/linux-nginx/","excerpt":"","text":"目录 nginx基本介绍 nginx URI优先级 nginx URI优先级第一优先级精确匹配此路径123location = URI &#123;&#125; 第二优先级不使用正则表达式的模糊匹配123location ^~ URI &#123;&#125; 第三优先级可使用正则表达式的模糊匹配123location ~ URI &#123;&#125; 第四优先级匹配当前路径及其子路径123location URI &#123;&#125; 补充 ~ 区分字符大小写匹配 ~* 不区分字符大小写匹配 ! 表过不匹配 !~* 不区分字符大小写非匹配","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux haproxy基础","slug":"haproxy-基础","date":"2017-11-12T01:41:54.000Z","updated":"2018-04-23T06:57:35.510Z","comments":true,"path":"2017/11/12/haproxy-基础/","link":"","permalink":"http://www.digmyth.com/2017/11/12/haproxy-基础/","excerpt":"","text":"目录 haproxy基本介绍 haproxy基础语法 haproxy应用 haproxy基本介绍haproxy基础语法当有多个缓存key/value服务器时，app缓存到服务器1，那么必须到服务器1才能找到缓存。 取模法：key- hash(16进制数值)–这个数值除以服务器数量的余数就是哪台服务器 当有服务器添加或移走这种缓存就失效了 如何解决，是有办法的，那就是改进上面那种方法，称一致性hash算法：consitent hash 有一个环，用32位二进制从0开始计数，环上分布有离散的2^32 点。key hash 后的值除以2^32时取余数，这个余数一定在0到2^32-1范围内，也就是在这个环上那么数据就是存储在余数的下一台服务器上，服务器是离散分布在这样的环上的。缺点：服务器分布可能存在偏斜，也就是可能所有服务器集中在环三分之一处。当存储数据找下一台服务器，那台服务器存储量太大了。 解决办法：使用虚拟节点离散分布在环上来代替物理节点。hadoop前身开源搜索引擎，任何搜索引擎首先是大数据搜索平台，其次才是高性能分析平台。 流式数据存储处理平台：storm spark大数据处理平台。12345678910111213141516nginx:server &#123;&#125;server &#123; proxy_pass: &#125;upstream &#123;&#125;upstream &#123;&#125; haproxy应用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"kolla Pike on CentOS 7.3","slug":"kolla-Pike-on-CentOS7.3","date":"2017-11-09T00:41:54.000Z","updated":"2017-11-08T07:15:16.901Z","comments":true,"path":"2017/11/09/kolla-Pike-on-CentOS7.3/","link":"","permalink":"http://www.digmyth.com/2017/11/09/kolla-Pike-on-CentOS7.3/","excerpt":"","text":"openstack Pike发布很长一段时间了，一直没有时间整理一份在kolla on CentOS7.3 的文档参考：沙克老师单节点ocata安装 环境准备12yum install epel-release yum install axel vim git curl wget lrzsz ansible gcc python-devel docker-ce yum12add docker-ce yum:yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo docker-ce install12install docker-ce# yum install docker-ce docker-ce configuration12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof 编辑 /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker kolla-ansible install github项目 openstack kolla镜像地址 openstack-ansible是用ansible部署openstack用的 ceph-ansible是用ansible部署ceph用的 kolla-ansible是用ansible部署kolla用的，其中openstack+ceph环境均分散在一个一个的docker容器里 安装pike版本 kolla-ansible，pip install 安装方式存在版本问题或非最新代码，这里直接git下载代码安装。12345678910cd /optgit clone https://github.com/openstack/kolla-ansible.gitcd /opt/kolla-ansiblegit branch -avgit checkout remotes/origin/stable/pikecp -r /opt/kolla-ansible/etc/kolla/ /etc/# 安装相关依赖包cd /opt/kolla-ansiblepip install -r requirements.txt 生成密码12cd /opt/kolla-ansible/toolspython generate_passwords.py 安装镜像仓库123456# docker pull registry下载最新pike 容器镜像：http://tarballs.openstack.org/kolla/images/centos-source-registry-pike.tar.gztar xf centos-source-registry-pike.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry eg:1234mkdir /registrytar -zxf /root/docker-registry.tar.gz -C /registrydocker load &lt; /root/registry.tardocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry check docker hub12345curl http://192.168.200.2:4000/v2/_catalog[root@controller01 ~]# curl 192.168.200.2:4000/v2/99cloud/centos-source-memcached/tags/list&#123;&quot;name&quot;:&quot;99cloud/centos-source-memcached&quot;,&quot;tags&quot;:[&quot;4.0.1.1&quot;]&#125;docker pull 192.168.200.2:4000/99cloud/centos-source-memcached:4.0.1.1 ceph disk set1# for i in vdb vdc vdd; do parted /dev/$i -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1; done in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 edit global.yml12edit /etc/kolla/global.yml此处略过。。。 kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient access dashboard1curl http://openstack_VIP/horizon","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"Mysql MGR 集群","slug":"mysql-MGR","date":"2017-11-08T22:41:54.000Z","updated":"2017-11-08T15:18:04.873Z","comments":true,"path":"2017/11/09/mysql-MGR/","link":"","permalink":"http://www.digmyth.com/2017/11/09/mysql-MGR/","excerpt":"","text":"目录 MGR简介 MGR安装 数据库Galera集群的笔记做过了，今天来讲一讲MySQL Group Replication组复制技术。 一 MGR简介MySQL当前存在的三种复制模式有：异步模式、半同步模式和组复制模式。MySQL Group Replication（简称MGR）官方推出的高可用解决方案， 原生复制技术，基于插件的方式工作。 分为以下两种 single primary mode 单主模式只有一个读写，其余都是只读。 multi primary mode多主模式全部可读写 不管组复制单主还是多主的故障切换都无法让应用无感知，需要自主实现。 包含以下特性： 复制管理操作更为自动化。 通过Paxos协议提供数据库集群节点数据强一致性保证。 多主模式所有节点都可读写操作。 解决网络分区导致的脑裂问题，提升复制数据的可靠性。 官方引言1Quite obviously, regardless the mode Group Replication is deployed, it does not handle client-side fail-over. That must be handled by the application itself, connector or a middleware framework such as a proxy or router. 意思就是说MGR内部没有提供一种机制来实现主节点故障切换对应用的无感知。应用的这种故障无感知需要借助外力实现。 组复制存在以下局限性123456789101112131415161. 所有涉及的数据都必须发生在InnoDB存储引擎的表内。2. 所有的表必须有明确的主键定义。3. 网络地址只支持IPv4。4. 需要低延迟，高带宽的网络。5. 目前集群限制最多允许9个节点。6. 必须启用binlog。7. binlog 格式必须是row格式。8. 必须打开gtid模式。9. 复制相关信息必须使用表存储。10.事务写集合（Transaction write set extraction）必须打开。（这个目前与savepoint冲突，这也是导致mysqldump无法备份GR实例的原因）11. log slave updates必须打开。12. binlog的checksum目前不支持。13. 由于事务写集合的干扰，无法使用savepoint。14. SERIALIZABLE 隔离级别目前不支持。15. 对同一个对象，在集群中不同的实例上，并行地执行DDL（哪怕是相互冲突的DDL）是可行的，但会导致数据一致性等方面的错误，目前阶段不支持在多节点同时执行同一对象的DDL。16. 外键的级联约束操作目前的实现并不完全支持，不推荐使用。 二 MGR安装3.1 软件安装官方单库安装官方集群安装 参考链接 :1234https://dev.mysql.com/doc/refman/5.7/en/replace-third-party-yum.html # 禁用第三方源或安装包https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html # 根据您的系统安装相应版本https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html #CentOS7.3安装mysql 5.7https://dev.mysql.com/doc/refman/5.7/en/group-replication.html # mysql Group Replication安装 123# rpm -ivh /opt/mysql57-community-release-el7-11.noarch.rpm# yum install mysql-community-server# systemctl start mysqld 3.2 内置策略说明mysql5.7启动服务后会生成一个随机密码用于临时登录，内置策略强制让你进入数据库后马上更改登录密码，并且有一套密码复杂度管理的策略。我们可以在数据库my.cnf中过滤掉复杂度策略或临时修改全局变量来忽略复杂度。123456789101112131415161718192021mysql&gt; select @@validate_password_length;+----------------------------+| @@validate_password_length |+----------------------------+| 8 |+----------------------------+1 row in set (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec) 或者/etc/my.cnf添加5行策略来忽略掉。12345validate_password_length = 0validate_password_mixed_case_count = 0validate_password_number_count = 0validate_password_policy =0validate_password_special_char_count =0 当然也可以类似以下命令临时全局修改1set global validate_password_special_char_count =0; # 全部设置为0 查询临时密码1# grep &apos;temporary password&apos; /var/log/mysqld.log 马上修改临时密码用以后续操作。123mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;Query OK, 0 rows affected (0.00 sec)#否则收到提示：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 3.3 为复制授权1234567mysql&gt; SET SQL_LOG_BIN=0;mysql&gt; CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; SET SQL_LOG_BIN=1;mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3.4 启动组复制123456789101112mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; Query OK, 0 rows affected (0.02 sec)mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+...| validate_password | ACTIVE | VALIDATE PASSWORD | validate_password.so | GPL || group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+46 rows in set (0.01 sec) 启动复制通道123SET GLOBAL group_replication_bootstrap_group=ON;START GROUP_REPLICATION;SET GLOBAL group_replication_bootstrap_group=OFF; 查看集群成员1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+1 row in set (0.00 sec) 创建测试同步数据1234mysql&gt; CREATE DATABASE test;mysql&gt; USE test;mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);mysql&gt; INSERT INTO t1 VALUES (1, &apos;Luis&apos;); 检查同步数据和Binlog1234567mysql&gt; select * from t1;+----+------+| c1 | c2 |+----+------+| 1 | Luis |+----+------+1 row in set (0.01 sec) mysql&gt; show binlog events;12345678+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 1 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 1 | 150 | || binlog.000001 | 150 | Stop | 1 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec 3.5 加入集群其余节点加入集群1 先定义主配文件与主机hosts2 建立通道授权 123456SET SQL_LOG_BIN=0;CREATE USER rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos; ;GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;SET SQL_LOG_BIN=1;CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;; 3 添加插件1mysql&gt; INSTALL PLUGIN group_replication SONAME &apos;group_replication.so&apos;; 4 启动复制通道1mysql&gt; START GROUP_REPLICATION; 如果有失败，尝试12mysql&gt; set global validate_password_policy=0; mysql&gt; set global group_replication_allow_local_disjoint_gtids_join=ON; 5 查看集群成员123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+--------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+--------------+-------------+--------------+| group_replication_applier | 2863475f-c490-11e7-b93e-fa163ebc6e6c | 172.18.23.8 | 3306 | ONLINE || group_replication_applier | 9c1ded3e-c495-11e7-8c62-fa163ea91040 | 172.18.23.33 | 3306 | ONLINE || group_replication_applier | f2d4456f-c48b-11e7-94f2-fa163e894684 | 172.18.23.34 | 3306 | ONLINE |+---------------------------+--------------------------------------+--------------+-------------+--------------+3 rows in set (0.01 sec) 6 查看集群中的主节点1234567mysql&gt; SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= &apos;group_replication_primary_member&apos;;+--------------------------------------+| VARIABLE_VALUE |+--------------------------------------+| f2d4456f-c48b-11e7-94f2-fa163e894684 |+--------------------------------------+1 row in set (0.01 sec) 7 binlog123456789mysql&gt; show binlog events;+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| binlog.000001 | 4 | Format_desc | 3 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000001 | 123 | Previous_gtids | 3 | 150 | || binlog.000001 | 150 | Stop | 3 | 169 | |+---------------+-----+----------------+-----------+-------------+---------------------------------------+3 rows in set (0.00 sec) 8 my.cnf优化项1234max_connections = 4096max_prepared_stmt_count=100000query_cache_type = 1query_cache_size = 10M 9 命令123456789mysql&gt; show full processlist;+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| Id | User | Host | db | Command | Time | State | Info |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+| 3 | root | localhost | test | Query | 0 | starting | show full processlist || 11 | system user | | NULL | Connect | 490 | executing | NULL || 14 | system user | | NULL | Connect | 490 | Slave has read all relay log; waiting for more updates | NULL |+----+-------------+-----------+------+---------+------+--------------------------------------------------------+-----------------------+3 rows in set (0.00 sec)","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-22-验证码","slug":"web-django-22-验证码","date":"2017-11-08T12:26:37.000Z","updated":"2018-04-23T07:00:07.330Z","comments":true,"path":"2017/11/08/web-django-22-验证码/","link":"","permalink":"http://www.digmyth.com/2017/11/08/web-django-22-验证码/","excerpt":"","text":"目录 生成验证码 认证验证码 插件认证 生成验证码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108def get_valid_img(request): # 第一步 # f=open(&quot;default.jpg&quot;,&apos;rb&apos;) # data=f.read() # 第二步 # import PIL # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(123, 222, 255)) # f=open(&apos;code.png&apos;,&apos;wb&apos;) # img.save(f,&apos;png&apos;) # f = open(&apos;code.png&apos;, &apos;rb&apos;) # data=f.read() # f.close() # 第三步 # from io import BytesIO # f=BytesIO() # # from PIL import Image # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(255, 255, 66)) # img.save(f,&quot;png&quot;) # data=f.getvalue() # # 第四步： # # from io import BytesIO # # f = BytesIO() # from PIL import Image, ImageDraw, ImageFont # # # 画字 # img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(0, 255, 0)) # draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) # font=ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;,28) # draw.text([15,0],&apos;y&apos;,&quot;red&quot;,font=font) # # img.save(f,&quot;png&quot;) # data=f.getvalue() # 第五步： import random from io import BytesIO from PIL import Image, ImageDraw, ImageFont f = BytesIO() img = Image.new(mode=&apos;RGB&apos;, size=(120, 30), color=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))) draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) char_list = [] # # 画字 for i in range(5): char = random.choice([chr(random.randint(65, 90)), str(random.randint(1, 9)), chr(random.randint(97, 122)), ]) font = ImageFont.truetype(&quot;blog/static/dist/fonts/kumo.ttf&quot;, 28) draw.text([i * 24, 0], char, (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),font=font) char_list.append(char) # # # ========================= width = 120 height = 30 def rndColor(): &quot;&quot;&quot; 生成随机颜色 :return: &quot;&quot;&quot; return (random.randint(0, 255), random.randint(10, 255), random.randint(64, 255)) # 写干扰点 for i in range(40): draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # # 写干扰圆圈 # for i in range(40): # draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # x = random.randint(0, width) # y = random.randint(0, height) # draw.arc((x, y, x + 4, y + 4), 0, 90, fill=rndColor()) # # # 画干扰线 # for i in range(5): # x1 = random.randint(0, width) # y1 = random.randint(0, height) # x2 = random.randint(0, width) # y2 = random.randint(0, height) # # draw.line((x1, y1, x2, y2), fill=rndColor()) img.save(f, &quot;png&quot;) data = f.getvalue() s = &apos;&apos;.join(char_list) request.session[&quot;valid_code&quot;] = s &apos;&apos;&apos; Dajngo: set_cookie(&quot;sessionId&quot;,&quot;asdsa234asd3sad&quot;) in session表 sessionkey sessiondata asdsa234asd3sad &#123;&quot;valid_code&quot;:s&#125; &apos;&apos;&apos; return HttpResponse(data) 认证验证码注意： 验证码的验证过程也是基于session/cookie,session/cookie知识必备12345678910111213141516171819202122232425262728from PIL import Imagefrom blog.utils import BaseResponsefrom django.contrib import authfrom blog import modelsimport jsonfrom blog.forms import RegFormdef login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.is_ajax(): username=request.POST.get(&quot;username&quot;) password=request.POST.get(&quot;password&quot;) valid=request.POST.get(&quot;valid&quot;) # 输入的验证码 keep_valid = request.session.get(&quot;valid_code&quot;) loginResponse = BaseResponse() if valid.upper() == keep_valid.upper(): user=auth.authenticate(username=username,password=password) # auth模块做认证 if user: loginResponse.user = username auth.login(request,user) # auth模块加session else: loginResponse.error = &quot;用户名或密码错误&quot; else: loginResponse.error=&quot;验证码错误&quot; return HttpResponse(json.dumps(loginResponse.__dict__)) 插件认证这个插件用于拦截机器识别，确定人为登录，使认证系统更加安全等补充… 参考","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"Mysql Galera集群搭建","slug":"mysql-Galera","date":"2017-11-08T01:41:54.000Z","updated":"2017-11-07T13:25:31.456Z","comments":true,"path":"2017/11/08/mysql-Galera/","link":"","permalink":"http://www.digmyth.com/2017/11/08/mysql-Galera/","excerpt":"","text":"目录 wsrep简介 Galera集群搭建 wsrep简介wsrep是writeset replication的简称，是一种API，在底层调用各库实现数据库同步写.通过wsrep协议在全局实现复制,任何一节点都可读写. 基于wsrep协议提供的一种底层复制机制，实现了Galera cluster数据库集群。因此Galera cluster需要特定研发的一个数据库版本,只有支持了特别的研发版本，才能借住于wsrep协议实现复制机制. 多个节点之上有了信息层，上层应用完成高可用，研发时调用信息层所提供的api去开发，并基于这个api去完成集群事务决策，不然就要自行加入中间层称资源管理器crm，如pacemaker galera cluster不是专为数据库提供的，只是一个工作在较为底层能够为你的服务提供数据复制功能的底层组件. mysql只有在研发时调用了galera cluster api写的mysql才能利用galera cluster完成复制,它的复制不再是让其它节点通过读取主节点二进制日志文件在本地重放，而是你指明了复制哪个数据库文件，由galera cluster自己在底层完成同步，mysql本身不感知. 12percona-cluster 版本支持galera clusterMariaDB-cluster 版本支持galera cluster 复制的问题和解决方案:(1) 数据损坏或丢失1234语句或行记录二进制日志，从而在从服务器上重放，重放机制也可能主从不一致的情况硬件故障、软件bug也会有数据损坏或丢失Master: MHA + semi replication(至少有一个从节点接收到了提交的binlog事件才返回成功，也是半同步复制)如果主节点数据损坏或丢失，就必须手动在从节点通过gtid来判断出己经提交的所有应用或事务，然后合并出一个较新的从节点提升为主节点Slave: 重新复制数据即可 (2) 运维部署注意事项：12345关键业务监控重要数据要备份和冗余不能混合使用存储引警MyISM: 不支持事务InnoDB: 支持事务 (3) 设置了不唯一的server ID12不唯一，整个复制集群数据产生错乱，每一个服务节点都不会在本地重放由同一个server ID 所产生的事件会导致重新复制数据 (4) 复制延迟12345需要额外监控工具的辅助自写一些脚本监控从节点有一个落后于主节点的时间判定，这个时间不为0时，尝试重启从节点服务对于从服务器延迟，主节点的事务是可以并发的，往二进制写入是单线程的，有先有后，从服务器重放也是单线程的，从服务器延迟落后也是必然的mysql5.6/mariadb 10以后引入了多线程复制机制，三节点集群可设置wsrep_slave_threads = 4 数据库服务衡量指标12qps : query per second 查询量tps: transaction per second 事务量 Galera集群搭建最新文档请参考Galera 集群官方链接 一 准备工作1 关闭防火墙2 关闭selinux3 同步主机时间4 设置hosts文件 二 MariaDB源在MariaDB 10.1以前需要卸载mariadb包，单独准备MariaDB-Galera-server源来安装MariaDB-Galera-server包例：123456789101112yum list all | grep -i galerayum remove mariadb*yum -y install MariaDB-Galera-server.rpm galera-25.3rpm -ql MariaDB-Galera-serverrpm -qa | grep MariaDB MariaDB-common-10.0.32-1.el7.centos.x86_64 MariaDB-shared-10.0.32-1.el7.centos.x86_64 MariaDB-Galera-server-10.0.32-1.el7.centos.x86_64 MariaDB-client-10.0.32-1.el7.centos.x86_64vim /etc/my.cnf.d/server.cnf[galera]... 而在MariaDB 10.1以后MariaDB-server己经自带Galera集群了，不必单独安装MariaDB-Galera-server包，只需准备如下源 编辑/etc/yum.repos.d/Mariadb.repo1234567# MariaDB 10.2 CentOS repository list - created 2017-11-07 12:07 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 三 软件安装1yum install MariaDB-server MariaDB-client 四 修改配置编辑/etc/my.cnf.d/server.cnf123456789101112[galera]#Mandatory settingswsrep_provider=/usr/lib64/galera/libgalera_smm.so # 可查rpm -ql galera | grep -i smm.sowsrep_cluster_address = &apos;gcomm://172.16.100.67,172.16.100.68,172.16.100.69&apos;wsrep_cluster_name = &apos;cluster&apos;wsrep_node_name = &apos;node1&apos;wsrep_node_address= &apos;172.16.100.67&apos;binlog_format = rowdefault_storage_engine = InnoDBinnodb_autoinc_lock_mode = 2bind-address = 0.0.0.0wsrep_on=ON 五 启动服务任意一个节点启动123/etc/init.d/mysql start --wsrep-new-cluster或service mysql bootstrap或systemctl start mariadb --wsrep-new-cluster 然后在其它节点正常启动即可12systemctl start mariadbMariaDB [(none)]&gt; show status like &apos;%wsrep%&apos;; 简单验证1234567create database mydb;use mydbcreate table tb1 (id int, name char(10));desc tb1;create table tb2 (id int unsigend auto_increment not null primary key, name char(30));insert into tb2(name) values (&apos;hi&apos;, &apos;hello&apos;)select * from tb2; 有关认证及集群检测自行研究1234wsrep_sst_method = xtrabackup-v2wsrep_sst_auth = root:NtEXLlZGF9KeXYUE79e7H8N5C9Vdy0EkHlBfFPtrwsrep_slave_threads = 4wsrep_notify_cmd = /usr/local/bin/wsrep-notify.sh # 注意定义这个脚本","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"ceph-01-运维那事","slug":"ceph-01-运维那事","date":"2017-11-05T01:41:54.000Z","updated":"2017-11-22T08:06:37.975Z","comments":true,"path":"2017/11/05/ceph-01-运维那事/","link":"","permalink":"http://www.digmyth.com/2017/11/05/ceph-01-运维那事/","excerpt":"","text":"待整理ceph运维笔记 12ceph osd set nooutceph osd unset noout 1rbd create wxq --size 1 12345678(ceph-mon)[root@pike-vm /]# rbd info rbd/wxqrbd image &apos;wxq&apos;: size 1024 kB in 1 objects order 22 (4096 kB objects) block_name_prefix: rbd_data.498102ae8944a format: 2 features: layering, exclusive-lock, object-map, fast-diff, deep-flatten flags: 12(ceph-mon)[root@pike-vm /]# ceph osd map rbd rbd_data.498102ae8944aosdmap e183 pool &apos;rbd&apos; (0) object &apos;rbd_data.498102ae8944a&apos; -&gt; pg 0.455bea7d (0.3d) -&gt; up ([1], p1) acting ([1], p1) 123456[root@lab8106 ]#ceph-objectstore-tool \\ --data-path /var/lib/ceph/osd/ceph-1/ \\ --journal-path /var/lib/ceph/osd/ceph-1/journal \\ --pgid 0.3d \\ rbd_data.498102ae8944a remove 12(ceph-mon)[root@pike-vm /]# ceph pg map 8.7d osdmap e183 pg 8.7d (8.7d) -&gt; up [2] acting [2] 12345(ceph-mon)[root@pike-vm /]# ceph pg 8.7d query&#123; &quot;state&quot;: &quot;active+clean&quot;, &quot;snap_trimq&quot;: &quot;[]&quot;,... 1234ceph pg dumpceph osd dumpceph pg map 8.7dceph pg 8.7d list_missing 12ceph pg 4.438 mark_unfound_lost revertceph pg 4.438 mark_unfound_lost delete 12ceph pg repair 0.44ceph osd pool set rbd min_size 1","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"proxy-01-代理","slug":"proxy-01-代理","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:45:24.259Z","comments":true,"path":"2017/10/31/proxy-01-代理/","link":"","permalink":"http://www.digmyth.com/2017/10/31/proxy-01-代理/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"webssh-shellinabox","slug":"linux-shellinabox","date":"2017-10-31T00:48:08.000Z","updated":"2018-10-21T08:43:37.447Z","comments":true,"path":"2017/10/31/linux-shellinabox/","link":"","permalink":"http://www.digmyth.com/2017/10/31/linux-shellinabox/","excerpt":"","text":"利用http/https协议网页连接linux服务器，Webssh中最简单最方便的一种,还有GateOne/原生webssh yum安装1yum install shellinabox -y 查看安装文件，主要是主题相关，可以根据其位置自定义主题123456789101112131415161718rpm -ql shellinabox/etc/sysconfig/shellinaboxd/usr/lib/systemd/system/shellinaboxd.service/usr/sbin/shellinaboxd/usr/share/doc/shellinabox-2.20/usr/share/doc/shellinabox-2.20/AUTHORS/usr/share/doc/shellinabox-2.20/NEWS/usr/share/doc/shellinabox-2.20/README/usr/share/doc/shellinabox-2.20/README.Fedora/usr/share/doc/shellinabox-2.20/print-styles.css/usr/share/doc/shellinabox-2.20/shell_in_a_box.js/usr/share/doc/shellinabox-2.20/styles.css/usr/share/man/man1/shellinaboxd.1.gz/usr/share/shellinabox/usr/share/shellinabox/color.css/usr/share/shellinabox/monochrome.css/usr/share/shellinabox/white-on-black.css/var/lib/shellinabox 编辑配置文件/etc/sysconfig/shellinaboxd1OPTS=&quot;--css=/usr/share/shellinabox/white-on-black.css --disable-ssl-menu -s /:SSH:192.168.1.244&quot; 启动服务12systemctl enable shellinaboxd.servicesystemctl start shellinaboxd.service 网页登录服务器 https://192.168.1.244:4200","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-19-auth认证系统","slug":"web-django-19-auth认证系统","date":"2017-10-09T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/10/09/web-django-19-auth认证系统/","link":"","permalink":"http://www.digmyth.com/2017/10/09/web-django-19-auth认证系统/","excerpt":"","text":"目录 auth模块 Django内置补充 auth模块可以基于Cookie/Session自己写登录、注销的用户认证，这里我们学习Django自带的auth模块实现用户的登录、注销认证系统。 模块引入123from django.contrib import auth # 模块引入#from django.contrib.auth.models import User,AbstractUser#from app01 import models 下面2条命令会生成Django默认表，其中有张表auth_user用于存认证用户信息。12python manage.py makemigrationspython manage.py migrate 创建一个超级用户，auth_user可查看1python manage.py createsuperuser 自己写登录系统123456789101112131415161718192021def login(request): if request.method==&quot;GET&quot;: return render(request,&quot;login.html&quot;) elif request.method==&quot;POST&quot;: username=request.POST.get(&quot;username&quot;) pwd=request.POST.get(&quot;pwd&quot;) user_obj=auth.authenticate(username=username,password=pwd) # 验证 if user_obj: auth.login(request,user_obj) # 写入session return redirect(&quot;/home/&quot;) else: return redirect(&quot;/login/&quot;)def log_out(request): auth.logout(request) #相当于request.session.flush() 去除session return redirect(&quot;/login/&quot;)def home(request): if not request.user_obj.is_authenticated(): # 是否认证过有没写入session return redirect(&quot;/login/&quot;) return render(request,&quot;home.html&quot;) 注意：利用Django自带的表创建用户，不能对Django自带的表直接操作，那怎么创建呢，Django提供一个接口，通过auth模块操作User表.12from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;） 当Django自带User表字段不够用时，可以自己建表继承User表字段，方法:123from django.contrib.auth.models import AbstractUserclass UserInfo(AbstractUser): detail = modoles.CharField(max_length=32) 自建表记得settins.py配置AUTH_USER_MODEL123456789STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS =[ os.path.join(BASE_DIR,&quot;blog&quot;,&quot;static&quot;),]# MEDIA_ROOT=os.path.join(BASE_DIR,&apos;blog&apos;,&apos;media&apos;,&apos;upload&apos;)# MEDIA_URL = &apos;/media/&apos;AUTH_USER_MODEL= &quot;blog.UserInfo&quot; Django 内置补充1234567891011121314151617181920212223242526272829303132333435363738django已经为我们设计好了一个用于此种情况的装饰器：login_requierd()from django.contrib.auth.decorators import login_required @login_requireddef my_view(request): ...若用户没有登录，则会跳转到django默认的 登录URL &apos;/accounts/login/ &apos; (这个值可以在settings文件中通过LOGIN_URL进行修改)。并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。User对象User 对象属性：username， password（必填项）password用哈希算法保存到数据库is_staff ： 用户是否拥有网站的管理权限.is_active ： 是否允许用户登录, 设置为``False``，可以不用删除用户来禁止 用户登录2.1 、is_authenticated()表明是否认证通过并有session,当使用auth模块时，前端`&#123;&#123; request.user &#125;&#125;`可以直接使用不需要后端传入request.user变量。request.user.username 为AnonymousUser或用户名2.2 、创建用户使用 create_user 辅助函数创建用户:from django.contrib.auth.models import Useruser = User.objects.create_user（username=&apos;&apos;,password=&apos;&apos;,email=&apos;&apos;）2.3 、check_password(passwd)用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 True2.4 、修改密码使用 set_password() 来修改密码user = User.objects.get(username=&apos;&apos;)user.set_password(password=&apos;&apos;)user.save 简单示例注册：1234567891011121314151617181920def sign_up(request): state = None if request.method == &apos;POST&apos;: password = request.POST.get(&apos;password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) email=request.POST.get(&apos;email&apos;, &apos;&apos;) username = request.POST.get(&apos;username&apos;, &apos;&apos;) if User.objects.filter(username=username): state = &apos;user_exist&apos; else: new_user = User.objects.create_user(username=username, password=password,email=email) new_user.save() return redirect(&apos;/book/&apos;) content = &#123; &apos;state&apos;: state, &apos;user&apos;: None, &#125; return render(request, &apos;sign_up.html&apos;, content) 修改密码：123456789101112131415161718192021222324@login_requireddef set_password(request): user = request.user state = None if request.method == &apos;POST&apos;: old_password = request.POST.get(&apos;old_password&apos;, &apos;&apos;) new_password = request.POST.get(&apos;new_password&apos;, &apos;&apos;) repeat_password = request.POST.get(&apos;repeat_password&apos;, &apos;&apos;) if user.check_password(old_password): if not new_password: state = &apos;empty&apos; elif new_password != repeat_password: state = &apos;repeat_error&apos; else: user.set_password(new_password) user.save() return redirect(&quot;/log_in/&quot;) else: state = &apos;password_error&apos; content = &#123; &apos;user&apos;: user, &apos;state&apos;: state, &#125; return render(request, &apos;set_password.html&apos;, content) 补充原文","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-19-Cookies-Session","slug":"web-django-19-Cookies-Session","date":"2017-10-08T12:26:37.000Z","updated":"2019-01-20T03:34:50.249Z","comments":true,"path":"2017/10/08/web-django-19-Cookies-Session/","link":"","permalink":"http://www.digmyth.com/2017/10/08/web-django-19-Cookies-Session/","excerpt":"","text":"目录 Cookies Session 代码学习 相关配置 总结 Cookies用户第一次请求时，服务器会在浏览器上写入cookies键值对，下一次请求会把这个键值对带上，服务器会验证这个cookies键值对，基于这样的特性cookies可以做登录验证和投票。如果没有cookies时，会先让你做用户登录。 Session所有的用户信息都写入客户端浏览器存在安全问题也不现实，我们把这些信息都写到服务器端，对应一个随机字符串，再把这个随机字符串写入cookies，格式为{“sessionid”:”随机字符串”},问题就得到了解决。 cookies就是能在客户端浏览器写键值对的一种机制，类似’user’:’abc’, 如果写的是’sessionid’:’随机字符串’，那么session就诞生了，服务端再拿到这样的随机字符串，记录信息格式如’随机字符串’:’你想存的敏感信息’ 代码学习Cookies 工作特性：在浏览器F12 network-&gt;cookies中首次请求时可以看到 Response Cookies有写入的键值对，下次再访问时Request Cookies有这个键值对，证明此时浏览器会带着这个键值对发给服务器。可以简单用下面代码测试123456def ck(request): print(request.COOKIES) # cookies会封装在request.COOKIES内 obj = render(request, &quot;ck.html&quot;, &#123;&quot;msg&quot;: &quot;&quot;&#125;) obj.set_cookie(&apos;user&apos;, &apos;wxq&apos;) # 向浏览器写入cookies键值对 return obj 下面用代码描述Cookies、Session各自工作：login.html123456&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/form&gt; views.py视图12345678910111213141516171819202122232425from app01 import modelsdef login(request): if request.method == &quot;GET&quot;: return render(request, &apos;login.html&apos;,&#123;&quot;msg&quot;: &quot;&quot;&#125;) else: u = request.POST.get(&quot;username&quot;) p = request.POST.get(&quot;pwd&quot;) v=models.UserInfo.objects.filter(username=u, pwd=p).exists() if v: # obj.set_cookie(&quot;user&quot;, u,max_age=5) request.session[&quot;user&quot;] = u request.session[&quot;pwd&quot;] = p return redirect(&quot;/home/&quot;) else: return render(request,&quot;login.html&quot;,&#123;&quot;msg&quot;: &quot;用户名或密码错误&quot;&#125;)def home(request): # v = request.COOKIES.get(&quot;user&quot;) v = request.session.get(&quot;user&quot;) if v: return HttpResponse(&quot;登录成功&quot;) else: return redirect(&quot;/login/&quot;) 利用session注销1234567891011def logout(request): &apos;&apos;&apos; obj=HttpResponse(&quot;xxx&quot;) obj.set_cookie(&quot;user&quot;,&quot;name&quot;) # 设置cookie request.COOKIES.get(&quot;user&quot;) # 获取cookie obj.delete_cookie(&apos;user&apos;) # 清除cookie &apos;&apos;&apos; #request.session[&apos;user&apos;] = &apos;wxq&apos; # 设置session #request.session.get(&apos;user&apos;) # 获取session request.session.clear() # 清除session return redirect(&quot;/login/&quot;) Cookies、Session相关配置配置参考 settings.py配置12345678910SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos; # 引擎（默认） SESSION_COOKIE_NAME ＝ &quot;sessionid&quot; # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）SESSION_COOKIE_PATH ＝ &quot;/&quot; # Session的cookie保存的路径（默认）SESSION_COOKIE_DOMAIN = None # Session的cookie保存的域名（默认）SESSION_COOKIE_SECURE = False # 是否Https传输cookie（默认）SESSION_COOKIE_HTTPONLY = True # 是否Session的cookie只支持http传输（默认）SESSION_COOKIE_AGE = 1209600 # Session的cookie失效日期（2周）（默认）SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使得Session过期（默认）SESSION_SAVE_EVERY_REQUEST = True # 是否每次请求都保存Session，默认修改之后才保存（默认） 总结1 cookies是记录在浏览器上的键值对，本身与登录没有任何关系。 cookies信息保存在request.COOKIES.2 session是记录在服务器上的键值对，key是一个随机字符串, session信息保存在request.session字典里的.3 只有Django框架有session 相关的封装,Flask/tornado等其它web框架是没有的，需要自己写Cookies、session.","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(三)","slug":"web-django-orm(三)","date":"2017-09-15T12:51:41.000Z","updated":"2018-01-18T03:45:03.508Z","comments":true,"path":"2017/09/15/web-django-orm(三)/","link":"","permalink":"http://www.digmyth.com/2017/09/15/web-django-orm(三)/","excerpt":"","text":"目录 Orm Shell FQ查询 聚合查询 参考资料官方昊练习一练习二pythoncode 一 Orm Shell pycharm中models我们己经学习过了，这里记录下在linux操作系统中启动Orm Shell需要做的几件事儿. 1 模块导入12345pip3 install pymysqlpycharm中可以在应用目录下__init__.py,也可以在项目目录__init__.py下import pymysqlpymysql.install_as_MySQLdb()但是linux系统里只能在项目目录下 2 models.py的区别1234在建立一对一或一对多关系表时需要位置参数on_delete=models.CASCADE，多对多不需要author=models.OneToOneField(&quot;Author&quot;,on_delete=models.CASCADE)publisher=models.ForeignKey(to=&quot;Publish&quot;,on_delete=models.CASCADE)authors=models.ManyToManyField(&quot;Author&quot;) 3 数据库12345678910DATABASES = &#123;&apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125; &#125; 4 明确指明INSTALLED_APPS123456789 INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;app01.apps.App01Config&apos;, ] 5 启动Orm Shell可以命令行操作orm语句学习了123python3 manage.py shell&gt;&gt;&gt; from app01 import models&gt;&gt;&gt; 6 联表sql示例原始sql语句的一个精典联表操作示例123456789101112131415161718 MariaDB [wxq_db]&gt; select sum(app01_book.price) as bookSumPrice,app01_publish.name -&gt;from app01_book_authors -&gt;left join app01_book -&gt;on app01_book.nid=book_id -&gt;left join app01_author -&gt;on author_id=app01_author.id -&gt;left join app01_publish -&gt;on publisher_id=app01_publish.id -&gt;group by app01_publish.name -&gt;having bookSumPrice &gt; 100 -&gt;order by bookSumPrice desc;+--------------+-----------------+| bookSumPrice | name |+--------------+-----------------+| 176.40 | 工业出版社 || 124.00 | 人民出版社 |+--------------+-----------------+2 rows in set (0.00 sec) 二 FQ查询123456789101112131415161718def FQQuery(request): from django.db.models import F,Q # F查询 # F查询用于自修改或字段比较或一个字段值赋值给另一字段的场景 # ret1=models.Book.objects.filter(comment_num__gt=50) # ret2=models.Book.objects.filter(comment_num__gt=F(&quot;read_num&quot;)*2) # print(ret2) #models.Book.objects.all().update(price=F(&quot;price&quot;)+10) ################################## Q查询 ret3=models.Book.objects.filter(comment_num__gt=50,read_num__gt=50) # 并且 ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100)) # 或者 print(ret3) return HttpResponse(&quot;OK&quot;) F查询总结1234F查询适用场景:场景1： 两个字段间值的比较F(&apos;price&apos;)场景2： 自运算，如F(&apos;price&apos;) + 10 Q查询总结12345# 注意事项：不同顺序的区别，不同放置的区别# 关键字语句放在Q查询的后面，并且只要有(逗号)就是(且)的意思#ret3=models.Book.objects.filter(price__lt=100,(Q(comment_num__gt=100)|Q(read_num__gt=100))) # 有效语句#ret3=models.Book.objects.filter(Q(comment_num__gt=100)|Q(read_num__gt=100),price__lt=100) # 有效语句#ret3=models.Book.objects.filter(price__lt=100,Q(comment_num__gt=100)|Q(read_num__gt=100)) # 无效语句 三 聚合查询1234567891011121314151617181920212223242526272829303132def juheQuery(reqeuest): from django.db.models import F,Q,Avg,Count,Sum,Min,Max # 单纯聚合函数 # 计算所有图书的平均价格 # ret=models.Book.objects.all().aggregate(priceSum=Sum(&quot;price&quot;)) # print(ret) # &#123;&apos;priceSum&apos;: Decimal(&apos;2158.00&apos;)&#125; # 统计每一本书的作者个数 # ret2=models.Book.objects.all().annotate(authors_num=Count(&quot;authors&quot;)) # 返回QuerySet # print(ret2) # [book_obj1,book_obj2,book_obj3,book_obj4,....] # # for obj in ret2: # print(obj.nid,obj.title,obj.authors_num) # 查询每一个出版社出版过的所有书籍的总价格 #方式1： # ret3=models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)) # # for obj in ret3: # print(obj.id,obj.name,obj.priceSum) # ret4 = models.Publish.objects.all().annotate(priceSum=Sum(&quot;bookList__price&quot;)).values(&quot;name&quot;,&quot;priceSum&quot;) # print(ret4) # 方式2： # ret5=models.Book.objects.all().values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&quot;publisher__name&quot;,&quot;priceSum&quot;) # print(ret5) return HttpResponse(&quot;OK&quot;) 实践示例12345In [178]: models.Publish.objects.annotate(priceSum=Sum(&quot;book__price&quot;)).values(&apos;name&apos;,&apos;priceSum&apos;)Out[178]: &lt;QuerySet [&#123;&apos;priceSum&apos;: Decimal(&apos;12.00&apos;), &apos;name&apos;: &apos;人民出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;工业出版社&apos;&#125;, &#123;&apos;priceSum&apos;: Decimal(&apos;8.80&apos;), &apos;name&apos;: &apos;清华版社&apos;&#125;]&gt;In [179]: models.Book.objects.values(&quot;publisher__name&quot;).annotate(priceSum=Sum(&quot;price&quot;)).values(&apos;publisher__name&apos;,&apos;priceSum&apos;)Out[179]: &lt;QuerySet [&#123;&apos;publisher__name&apos;: &apos;人民出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;12.00&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;清华版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;, &#123;&apos;publisher__name&apos;: &apos;工业出版社&apos;, &apos;priceSum&apos;: Decimal(&apos;8.80&apos;)&#125;]&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"ceph-luminous安装","slug":"ceph-luminous安装","date":"2017-09-05T01:41:54.000Z","updated":"2017-11-13T05:12:03.615Z","comments":true,"path":"2017/09/05/ceph-luminous安装/","link":"","permalink":"http://www.digmyth.com/2017/09/05/ceph-luminous安装/","excerpt":"","text":"这里只简单列下luminous12.X 安装，默认存储引警Bluestore及监控界面 1 /etc/hosts解析略2 ntpservers时间同步略3 系统配置123456sed -i &apos;s/SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/configsetenforce 0systemctl stop firewalld systemctl disable firewalldsystemctl stop NetworkManagersystemctl disable NetworkManager 添加yum源123456789[root@cluster-sql ~]# cat ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 4 新建集群123456# mkdir /mnt/cluster# cd /mnt/cluster # yum -y install ceph-deploy# ceph-deploy install --no-adjust-repos node01 node02 node03# ceph-deploy new node01 node02 node03 5 生成原始文件12[root@node01 cluster]# ls /mnt/clusterceph.conf ceph-deploy-ceph.log ceph.mon.keyring 6 根据需要更新原始文件添加需的ceph.conf配置12345678910111213[root@node01 cluster]# cat ceph.conf [global]fsid = d8fa6509-0196-41bc-838e-6226c927e680mon_initial_members = node01, node02, node03mon_host = 192.168.1.10,192.168.1.11,192.168.1.12auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephxmon_allow_pool_delete=true[mgr]mgr modules = dashboard 7 初始化同时推送配置文件1# ceph-deploy mon create-initial 9 推送密钥文件1[root@node01 cluster]# ceph-deploy admin node01 node02 node03 10 查看集群状态12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: 11 添加激活osd磁盘12345[root@node01 cluster]# ceph-deploy osd create --bluestore node01:/dev/sdb node02:/dev/sdb node03:/dev/sdb --zap-disk[root@node01 cluster]# lsceph.bootstrap-mds.keyring ceph.bootstrap-osd.keyring ceph.client.admin.keyring ceph-deploy-ceph.logceph.bootstrap-mgr.keyring ceph.bootstrap-rgw.keyring ceph.conf ceph.mon.keyring 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[root@node01 cluster]# systemctl status ceph-osd@2 # 查看单个osd进程[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN no active mgr clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: no daemons active osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 0 kB used, 0 kB / 0 kB avail pgs: ####[root@node01 cluster]# ceph quorum_status --format json-pretty[root@node01 cluster]# ceph osd treeID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 0.14607 root default -3 0.04869 host node01 0 hdd 0.04869 osd.0 up 1.00000 1.00000 -5 0.04869 host node02 1 hdd 0.04869 osd.1 up 1.00000 1.00000 -7 0.04869 host node03 2 hdd 0.04869 osd.2 up 1.00000 1.00000 [root@node01 cluster]# df -hTFilesystem Type Size Used Avail Use% Mounted on/dev/mapper/vg-root xfs 16G 1.7G 14G 11% /devtmpfs devtmpfs 482M 0 482M 0% /devtmpfs tmpfs 493M 0 493M 0% /dev/shmtmpfs tmpfs 493M 6.9M 486M 2% /runtmpfs tmpfs 493M 0 493M 0% /sys/fs/cgroup/dev/sda1 xfs 497M 159M 338M 32% /boot/dev/mapper/vg-data xfs 3.9G 33M 3.9G 1% /datatmpfs tmpfs 99M 0 99M 0% /run/user/0/dev/sdb1 xfs 97M 5.4M 92M 6% /var/lib/ceph/osd/ceph-0[root@node01 cluster]# cat /var/lib/ceph/osd/ceph-0/type bluestore[root@node01 cluster]# parted /dev/sdb printModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 53.7GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name Flags 1 1049kB 106MB 105MB xfs ceph data 2 106MB 53.7GB 53.6GB ceph block 12 配置ceph-mgr1[root@node01 cluster]# ceph-deploy mgr create node01 node02 node03 可以看到己被激活12345678910111213141516[root@node01 cluster]# ceph -s cluster: id: d8fa6509-0196-41bc-838e-6226c927e680 health: HEALTH_WARN clock skew detected on mon.node02, mon.node03 services: mon: 3 daemons, quorum node01,node02,node03 mgr: node01(active), standbys: node02, node03 osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 bytes usage: 3164 MB used, 146 GB / 149 GB avail pgs: 123456789101112131415[root@node01 cluster]# ceph config-key put mgr/dashboard/server_addr 192.168.1.10set mgr/dashboard/server_addr[root@node01 cluster]# ceph config-key put mgr/dashboard/server_port 7000set mgr/dashboard/server_port[root@node01 cluster]# ceph mgr module enable dashboard[root@node01 cluster]# ceph mgr module ls[ &quot;dashboard&quot;, &quot;restful&quot;, &quot;status&quot;][root@node01 cluster]# netstat -tnlp | grep 7000tcp 0 0 192.168.1.10:7000 0.0.0.0:* LISTEN 34774/ceph-mgr 13 ceph-fs部署123456789101112# ceph-deploy mds create node01 node02 node03# ceph osd pool create cephfs_data &lt;pg_num&gt;# ceph osd pool create cephfs_metadata &lt;pg_num&gt;# ceph fs new cephfs cephfs_metadata cephfs_data(ceph-mds)[root@pike-vm /]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ](ceph-mds)[root@pike-vm /]# ceph fs get cephfsFilesystem &apos;cephfs&apos; (1)fs_name cephfs... 14 cephfs文件系统挂载确保客户端存在/etc/ceph/ceph.client.admin.keyring /etc/ceph/ceph.conf 方法一：12345[root@admin:]# yum install ceph-commonroot@admin:~# ceph-authtool -l /etc/ceph/ceph.client.admin.keyring[client.admin]key = AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg==mount -t ceph 172.16.170.135:6789:/ /mnt/cephdir/ -o name=admin,secret=AQBABNZTMCBWNhAAUYPXxFpHYMHvyACdSAZoCg== 方法二：123456[root@wxq ceph]# yum install ceph-fuse[root@wxq ceph]# ceph-fuse -m 172.18.23.17:6789 /mnt/cephdir/ceph-fuse[25849]: starting ceph clientceph-fuse[25849]: starting fuse[root@wxq ceph]# df -hT | grep fuseceph-fuse fuse.ceph-fuse 135G 116M 135G 1% /mnt/cephdir 总结几点1 ceph quorum_status –format json-pretty 可查看选举详情2 ceph osd pool application enable volumes rbd 标记一个池的应用(cephfs/rbd/rgw),不标记可以使用但集群状态将为warning3 保护机制的存在默认删除池是不允许的12345[root@ceph cluster]# ceph --show-config | grep deletemon_allow_pool_delete = falsemon_fake_pool_delete = falseosd_pool_default_flag_nodelete = falserbd_mirror_delete_retry_interval = 30.000000 需要编辑ceph.conf12[global]mon_allow_pool_delete=true 界面视图","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"kolla on redhat 7.2","slug":"kolla-on-redhat7.2","date":"2017-08-08T01:41:54.000Z","updated":"2017-09-10T16:06:09.587Z","comments":true,"path":"2017/08/08/kolla-on-redhat7.2/","link":"","permalink":"http://www.digmyth.com/2017/08/08/kolla-on-redhat7.2/","excerpt":"","text":"在一次项目中客户要求在redhat 7.2系统安装部署kolla ocata版本，在这种特定要求下还是实践一把的，在此把详细文档做个记录。 1. install wget最小化安装，系统很干净1rpm -ivh ftp://195.220.108.108/linux/centos/7.3.1611/os/x86_64/Packages/wget-1.14-13.el7.x86_64.rpm 2. remove yum of redhat 首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的12rpm -aq|grep yum|xargs rpm -e --nodeps rpm -aq|grep python-iniparse|xargs rpm -e --nodeps 3. install new yum123456wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-3.4.3-132.el7.centos.0.1.noarch.rpmwget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm rpm ivh *.rpm 4. yum sourece configure123456789101112131415161718192021222324252627edit /etc/yum.repos.d/Centos72.repo[base]name=CentOS-$releasever - Basebaseurl=http://vault.centos.org/7.2.1511/os/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updatesbaseurl=http://vault.centos.org/7.2.1511/updates/$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[extras]name=CentOS-$releasever - Extrasbaseurl=http://vault.centos.org/7.2.1511/extras//$basearch/gpgcheck=1gpgkey=http://vault.centos.org/7.2.1511/os/x86_64/RPM-GPG-KEY-CentOS-7[centosplus]name=CentOS-$releasever - Plusbaseurl=http://vault.centos.org/7.2.1511/centosplus//$basearch/gpgcheck=1enabled=0 5. update yum123yum clean allyum updateyum install epel-release axel vim git curl wget net-tools git gcc lrzsz python-devel vsftpd createrepo 6. optimization system123close selinuxclose NetworkManagerclose firewalld 7. add docker yum12345678tee /etc/yum.repos.d/docker.repo &lt;&lt; &apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 8. install docker1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 如果安装很慢，可以挂载ocata_20170420.iso光盘进入目录Packages/d 下面有相应软件包，执行下面命令1yum localinstall docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm docker-engine-1.12.6-1.el7.centos.x86_64.rpm 再执行完成安装1yum install -y ansible docker-engine-1.12.6 docker-engine-selinux-1.12.6 git gcc python-setuptools python-devel 9. 配置docker12345mkdir /etc/systemd/system/docker.service.d/tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; eof [Service]MountFlags=sharedeof edit /usr/lib/systemd/system/docker.service1ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.2:4000 启动docker:1234systemctl daemon-reloadsystemctl enable dockersystemctl restart dockersystemctl status docker 10. install pip1234yum install python-pippip install -U pip#easy_install -U pip # 或者easy_install工具安装pip install docker-py 11. install kolla-ansible1234# yum install gcc libffi-devel python-devel openssl-devel# pip install kolla-ansible#cp -rf /usr/share/kolla-ansible/etc_examples/kolla/ /etc/# kolla-genpwd 12. install docker registry123456789mount /dev/sr0 /mntdocker load &lt; registry.tarmkdir /opt/registrytar -zxf docker-registry.tar.gz -C /opt/registrydocker run -d -p 4000:5000 --restart=always --name registry -v /opt/registry/:/var/lib/registry registry# curl http://172.16.100.100:4000/v2/_catalog# curl http://172.16.100.100:4000/v2/kolla/centos-source-nova-api/tags/list&#123;&quot;name&quot;:&quot;kolla/centos-source-nova-api&quot;,&quot;tags&quot;:[&quot;4.0.0.3&quot;]&#125; 13. ceph disk set123parted /dev/sdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1parted /dev/sdd -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1 14. in case of vm如果只是在虚机中实验搭建kolla，需要额外配置12345mkdir -p /etc/kolla/config/novavim /etc/kolla/config/nova/nova-compute.conf[libvirt]virt_type = qemucpu_mode = none 创建 /etc/kolla/config/ceph.conf123[global]osd pool default size = 1osd pool default min size = 1 如果有需要，请手动调整副本数1ceph osd pool set rbd size 1 15. edit global.yml12edit /etc/kolla/global.yml此处略过。。。 16. kolla-ansible deploy1234kolla-ansible precheckskolla-ansible pullkolla-ansible deploykolla-ansible post-deploy 17. cli-commands install12yum install ceph-common pip python-openstackclient python-neutronclient 18. access dashboard1curl http://172.16.100.100/horizon 如果在openstack平台虚机中搭建kolla情况下，让其能通过浮动地址访问内部地址的dashboard1iptables -t nat -I PREROUTING -d 172.18.128.244 -p tcp --dport 80 -j DNAT --to 172.16.100.100 1成功访问：http://172.18.128.244 《成功》。。。","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-ganesha-manila","slug":"cephfs-manila","date":"2017-08-05T01:41:54.000Z","updated":"2017-11-16T03:31:22.380Z","comments":true,"path":"2017/08/05/cephfs-manila/","link":"","permalink":"http://www.digmyth.com/2017/08/05/cephfs-manila/","excerpt":"","text":"openstack manila项目最近很活跃，ceph刚好发布luminous版,具说cephfs性能得到很大提升，那么manila 后端存储cephfs找到了着力点，得到在大力发展。这里对manila cephfs实验做下记录。官网链接参考 驱动简介manila cephfs驱动分为两种：一种： cephfs native share相当于租户虚机直接连接cephfs集群，存在安全问题，生产环境中很难推行。 1 ceph-common包安装在manila-share中2 ceph-common/ceph-fuse 软件安装在租户虚机Guest里3 ceph集群与manila-share网络打通4 ceph集群与租户虚机网络打通 二种： cephfs nfs share官网说明1234567891 Pike or later versions of manila.2 Kraken or later versions of Ceph.3 2.5 or later versions of NFS-Ganesha.4 A Ceph cluster with a filesystem configured5 ceph-common package installed in the servers running the manila-share service.6 NFS client installed in the guest.7 Network connectivity between your Ceph cluster’s public network and the servers running the manila-share service.8 Network connectivity between your Ceph cluster’s public network and NFS-Ganesha server.9 Network connectivity between your NFS-Ganesha server and the manila guest. 在cephfs nfs share驱动，借住nfs-Ganesha解决了网络安全性问题，避免ceph public网直接暴露。直观的理解就是Ganesha为协议转换层，FSAL_CEPH把guest vm的NFS协议调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. 安装openstack+ceph跟据官网所说准备一套openstack pike + ceph luminous 环境，安装过程略。。。。 ceph luminous 源12345678[ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/noarch/gpgcheck=0 安装nfs-ganesha 需要nfs-ganesha 版本为2.5以上，只能编译安装了,具体[请参考(http://www.digmyth.com/2017/06/05/cephfs-Ganesha/)1234567891011yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -ycd /optgit clone --recursive git://github.com/nfs-ganesha/nfs-ganesha.gitmkdir /opt/build &amp;&amp; cd /opt/buildcmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 配置manila-share必要客户端安装 1234yum instal ceph ceph-fuse ceph-common libcephfs1-devel librgw2-develscp ceph_mon:/etc/ceph/* /etc/ceph #^# 复制相关配置文件``` ceph授权 如下命令会生成manila.keyring文件，一并复制到 manila-share的/etc/ceph目录下123456789101112read -d &apos;&apos; MON_CAPS &lt;&lt; EOFallow r,allow command &quot;auth del&quot;,allow command &quot;auth caps&quot;,allow command &quot;auth get&quot;,allow command &quot;auth get-or-create&quot;EOFceph auth get-or-create client.manila -o manila.keyring \\mds &apos;allow *&apos; \\osd &apos;allow rw&apos; \\mon &quot;$MON_CAPS&quot; 编辑manila-share的/etc/ceph/ceph.conf 添加如下配置1234567...[client.manila]client mount uid = 0client mount gid = 0log file = /var/logs/ceph-client.manila.logadmin socket = /run/ceph/ceph-mon.172.18.23.17.asokkeyring = /etc/ceph/manila.keyring 允许快照支持1ceph mds set allow_new_snaps true --yes-i-really-mean-it 编辑manila-share的/etc/manila/manila.conf 添加如下配置12345678910111213141516[DEFAULT]...enabled_share_backends = generic, cephfsnfs1default_share_type = default_share_typeenabled_share_protocols = NFS,CIFS,CEPHFS[cephfsnfs1]driver_handles_share_servers = Falseshare_backend_name = CEPHFSNFS1share_driver = manila.share.drivers.cephfs.driver.CephFSDrivercephfs_protocol_helper_type = NFScephfs_conf_path = /etc/ceph/ceph.confcephfs_auth_id = manilacephfs_cluster_name = cephcephfs_enable_snapshots = Falsecephfs_ganesha_server_is_remote= Falsecephfs_ganesha_server_ip = 172.18.23.17 # 指明nfs-ganesha服务器位置 验证服务验证12345678910(manila-share)[root@pike-vm /]# manila service-list+----+------------------+--------------------+------+---------+-------+----------------------------+| Id | Binary | Host | Zone | Status | State | Updated_at |+----+------------------+--------------------+------+---------+-------+----------------------------+| 1 | manila-data | pike-vm | nova | enabled | up | 2017-11-15T10:14:37.000000 || 2 | manila-scheduler | pike-vm | nova | enabled | up | 2017-11-15T10:14:38.000000 || 3 | manila-share | pike-vm@generic | nova | enabled | up | 2017-11-15T10:14:40.000000 || 4 | manila-share | pike-vm@cephfsnfs1 | nova | enabled | up | 2017-11-15T10:14:40.000000 |+----+------------------+--------------------+------+---------+-------+----------------------------+ 创建manila实例123manila type-create cephfsnfstype falsemanila type-key cephfsnfstype set vendor_name=Ceph storage_protocol=NFSmanila create --share-type cephfsnfstype --name cephnfsshare1 nfs 1 查看共享路径123456(manila-share)[root@pike-vm /]# manila share-export-location-list cephnfsshare1+--------------------------------------+---------------------------------------------------------------------+-----------+| ID | Path | Preferred |+--------------------------------------+---------------------------------------------------------------------+-----------+| 18cf503a-9357-40e2-925a-53333031a3e6 | 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 | False |+--------------------------------------+---------------------------------------------------------------------+-----------+ 权限管理 1manila access-allow cephnfsshare1 ip 172.24.4.225 guest vm 挂载1mount -t nfs 172.18.23.17:/volumes/_nogroup/7f53c663-57c5-4740-977b-039e4df7fc86 /mnt/nfs/","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-16-Form验证","slug":"web-django-16-Form","date":"2017-07-20T12:26:37.000Z","updated":"2018-01-18T03:41:15.272Z","comments":true,"path":"2017/07/20/web-django-16-Form/","link":"","permalink":"http://www.digmyth.com/2017/07/20/web-django-16-Form/","excerpt":"","text":"目录 基本功能 基本使用 常用字段 常用插件 总结 这篇博客记录Django Form功能的学习，链接请参考Django Form武佩齐权威博客 基本功能 Form验证 生成html标签（保留上次提交的内容） 详细：12345678class TestForm(forms.Form): username = fields.CharField( # 静态字段 required=True, min_length=6, max_length=8, error_messages=&#123;&quot;required&quot;:&quot;用户名不能为空&quot;, &quot;min_length&quot;:&quot;最少6位&quot;&#125;， widget = widgets.TextInput(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # 插件 ) 基本使用模块导入-&gt;类定义-&gt;定义字段-&gt; 定义插件-&gt; 实例化-&gt; 传入前端-&gt;前端渲染12from django import formsfrom django.forms import fields,widgets views.py定义Form类，写出来常用插件用法1234567891011121314151617class TestForm(forms.Form): n1 = fields.CharField( widget = widgets.TextInput() ) n2 = fields.CharField( widget = widgets.PasswordInput() ) n3 = fields.CharField( widget=widgets.Textarea() ) n4 = fields.CharField( widget=widgets.Select(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]) ) 单选多选总结：1 把上面CharField改为ChoiceField就好了，并choices=[]提到前面来2 单选CharField就可以，多选一定记得用ChoicField,并且choices=[]提前 123456789# n5 = fields.CharField( # # 这里是有问题的，CharField只能是字符串，&quot;n5&quot;:[1,3]默认值是一个列表，后端没法接收数据。# widget=widgets.SelectMultiple(choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)])# )n5 = fields.ChoiceField( choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget=widgets.SelectMultiple()) 12345678910111213141516n6 = fields.IntegerField( widget=widgets.RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)]))n7 = fields.CharField( # 这里只会生成CheckboxInput标签 &lt;input type=&quot;checkbox&quot; name=&quot;n7&quot; required=&quot;&quot; id=&quot;id_n7&quot;&gt; widget=widgets.CheckboxInput())n8 = fields.ChoiceField( # 真正生成checkbox组写法 choices=[(1, &quot;北京&quot;), (2, &quot;上海&quot;), (3, &quot;成都&quot;)], widget = widgets.CheckboxSelectMultiple())n9 = fields.FileField( widget=widgets.FileInput()) 实例化Form类时传入默认值用于前端展示，主要学习文件上传的方法123456789101112131415161718192021222324252627def test(request): if request.method == &quot;GET&quot;: obj = TestForm( initial=&#123;&quot;n1&quot;:&quot;请输入&quot;,&quot;n2&quot;:&quot;xxx&quot;,&quot;n3&quot;:&quot;文本输入&quot;,&quot;n4&quot;:1,&quot;n5&quot;:[1,3], &quot;n6&quot;:2,&quot;n7&quot;:&quot;&quot;,&quot;n8&quot;:[2,3]&#125; ) return render(request, &quot;test.html&quot;,&#123;&quot;obj&quot;:obj&#125;) if request.method == &quot;POST&quot;: # 文件提交保存在request.FILES # obj = TestForm(data=request.POST,files=request.FILES) # if obj.is_valid(): # # obj.cleaned_data[&apos;n9&apos;] 这是上传的文件对象 # #obj.cleaned_data[&apos;n9&apos;].name 这是上传文件名 # files_obj = obj.cleaned_data[&apos;n9&apos;] # f = open(files_obj.name, &apos;wb&apos;) # for chunck in files_obj.chunks(): # f.write(chunck) # f.close() # else: # pass files_obj = request.FILES.get(&quot;n9&quot;) f = open(files_obj.name, &apos;wb&apos;) for chunck in files_obj.chunks(): f.write(chunck) f.close() return redirect(&apos;/test/&apos;) 提交文件需要enctype=&quot;multipart/form-data&quot;测试时忽略其它值用novalidatetest.html12345678910111213&lt;form action=&quot;/test/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; novalidate&gt; &#123;% csrf_token %&#125; &#123;&#123; obj.n1 &#125;&#125; &#123;&#123; obj.n2 &#125;&#125; &#123;&#123; obj.n3 &#125;&#125; &#123;&#123; obj.n4 &#125;&#125; &#123;&#123; obj.n5 &#125;&#125; &#123;&#123; obj.n6 &#125;&#125; &#123;&#123; obj.n7 &#125;&#125; &#123;&#123; obj.n8 &#125;&#125; &#123;&#123; obj.n9 &#125;&#125; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/form&gt; 常用字段123456CharField 字符串 EmailField 字符串（邮箱格式）IntegerField 字符串（整形格式）GenericIPAddressField 字符串（Ip格式）RegexField 字符串（正则自定义）FileField 文件对象 常用插件123456789101112TextInputPasswordInputTextareaFileInput()Select(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;，choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])SelectMultiple(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) # choices=[(1,&quot;北京&quot;),(2,&quot;上海&quot;),(3,&quot;成都&quot;)]RadioSelect(choices=[(1,&quot;超级管理员&quot;),(2,&quot;普通用户&quot;)])CheckboxInput()CheckboxSelectMultiple() Form问题在前端使用选择标签渲染时，多表foreigh key跨表查询数据源无法实时更新。比如choices的选项可以从数据库中获取，但是由于是静态字段获取的值无法实时更新，那么需要自定义构造方法从而达到此目的。 方法有很多，推荐123456789101112131415161718from django.forms import Formfrom django.forms import widgetsfrom django.forms import fieldsfrom django.core.validators import RegexValidator class MyForm(Form): user = fields.ChoiceField( # choices=((1, &apos;上海&apos;), (2, &apos;北京&apos;),), initial=2, widget=widgets.Select ) def __init__(self, *args, **kwargs): super(MyForm,self).__init__(*args, **kwargs) # self.fields[&apos;user&apos;].widget.choices = ((1, &apos;上海&apos;), (2, &apos;北京&apos;),) # 或 self.fields[&apos;user&apos;].widget.choices = models.Classes.objects.all().value_list(&apos;id&apos;,&apos;caption&apos;) 总结Django Form功能一是验证，功能二是用于生成html标签并且能保留上次提交的内容。注意Form验证读取数据时的数据源实时更新问题，一般我们自定义Form类的构造方法实现。 还有很多要学习的。。。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"基于CentOS 7的PXE装机","slug":"基于CentOS7的PXE装机","date":"2017-07-01T01:41:54.000Z","updated":"2021-01-27T08:35:19.030Z","comments":true,"path":"2017/07/01/基于CentOS7的PXE装机/","link":"","permalink":"http://www.digmyth.com/2017/07/01/基于CentOS7的PXE装机/","excerpt":"","text":"网上各种贴子各种飞总说不到重点，本人表示不喜欢。 基于Centos7PXE装机基本概念 pxe装机依赖几个服务： dhcp/tftp/fileserver dhcp: 为装机分配地址及指明tftp server服务器是谁，下载什么文件 tftp: 提供网络引导文件pxelinux.0及内核文件vmlinuz、initrd.img (具体文件： boot.msg initrd.img pxelinux.0 pxelinux.cfg splash.png vesamenu.c32 vmlinuz) fileserver: 提供安装树输出，一般指yum repository (yum 仓库或yum源) syslinux: 网络引导文件pxelinux.0由syslinux软件包提供 dhcp服务1234yum -y install dhcprpm -ql dhcp/etc/dhcp/dhcpd.conf # 主配置文件/var/lib/dhcpd/dhcpd.leases # 租约文件 12345678910111213141516[root@master ~]# cat /etc/dhcp/dhcpd.conf | grep -v ^# | grep -v ^$option domain-name &quot;digmyth.com&quot;;option domain-name-servers 114.114.114.114;default-lease-time 600;max-lease-time 7200;log-facility local7;subnet 172.16.10.0 netmask 255.255.255.0 &#123; range 172.16.10.20 172.16.10.30; option domain-name-servers 172.16.10.1; option domain-name &quot;digmyth.com&quot;; option routers 172.16.10.254; default-lease-time 600; max-lease-time 7200;&#125;filename &quot;pxelinux.0&quot;; # 定义网络引导文件名next-server 172.16.10.1; # 定义tftp server地址 启动服务123# systemctl start dhcpd[root@master ~]# netstat -unlp | grep 67udp 0 0 0.0.0.0:67 0.0.0.0:* 995/dhcpd syslinux提供引导文件1234准备网络引导文件pxelinux.0 相当于bootloader# yum -y install syslinux[root@master tftpboot]# ll /usr/share/syslinux/pxelinux.0 -rw-r--r--. 1 root root 26764 Nov 6 2016 /usr/share/syslinux/pxelinux.0 tftp server12345# yum -y install tftp tftp-server[root@master ~]# rpm -ql tftp-server/etc/xinetd.d/tftp # 启动文件/usr/sbin/in.tftpd/var/lib/tftpboot # 服务根目录 1234567891011121314# cat /etc/xinetd.d/tftpservice tftp&#123; socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /var/lib/tftpboot disable = no #改为no per_source = 11 cps = 100 2 flags = IPv4&#125; 启动tftp服务1234# cp /usr/share/syslinux/pxelinux.0 /var/lit/tftpboot# systemctl start tftp# tftp localhost&gt; get pxelinux.0 # 测试成功 准备内核及其它相关文件 此时pxe己经能够获得地址并下载pxelinux.0进行网络引导，接下来是下载内核文件vmlinuz、initrd.img继续完成装机。 这里我拿CentOS7.2为例：CentOS-7-x86_64-DVD-1511.iso 12345[root@master ~]# mount -o loop CentOS-7-x86_64-DVD-1511.iso /mntmount: /dev/loop0 is write-protected, mounting read-only[root@master pxeboot]# cd /mnt/images/pxeboot/[root@master pxeboot]# cp vmlinuz /var/lib/tftpboot/[root@master pxeboot]# cp initrd.img /var/lib/tftpboot/ 12345678910111213mkdir /var/lib/tftpboot/pxelinux.cfgcp /mnt/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg /default [root@master pxelinux.cfg]# cat default default vesamenu.c32#default linux # 这里是一个标签，对找后面相应的labeltimeout 600menu title CentOS 7 wxq # 此处定义titlelabel linux menu label ^Install CentOS 7 # 此处定义系统安装时显示版本 kernel vmlinuz append initrd=initrd.img method=http://172.16.10.1/pub/ ks=http://172.16.10.1/pxe/CentOS72.ks# 注意： 如果此处只定义method,那么装机过程将全手动。 此外还有一些额外文件12345[root@master ~]# ls /mnt/isolinux/boot.cat grub.conf isolinux.bin memtest TRANS.TBL vesamenu.c32boot.msg initrd.img isolinux.cfg splash.png upgrade.img vmlinuz[root@master ~]# ll /var/lib/tftpboot/boot.msg initrd.img pxelinux.0 splash.png vesamenu.c32 vmlinuz 定义安装树12345# yum -y install httpd# mkdir /var/www/html/pxe# mkdir /var/www/html/pub# mount --bind /mnt /var/www/html/pub/ # systemctl start httpd 定义ks文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/pxe/CentOS72.ks[root@master pxe]# cat CentOS72.ks#version=DEVEL# System authorization informationinstall# Keyboard layoutskeyboard --vckeymap=us --xlayouts=&apos;us&apos;auth --enableshadow --passalgo=sha512# Use CDROM installation media# Run the Setup Agent on first boot#firstboot --enable# System languagelang en_US.UTF-8url --url=http://172.16.10.1/pub/# Use graphical installgraphical#textselinux --disabledskipxreboot# Network information#network --bootproto=static --device=ens33 --gateway=172.16.10.254 --ip=172.16.10.30 --nameserver=114.114.114.114 --netmask=255.255.255.0 --onboot=on --ipv6=auto --activatenetwork --bootproto=dhcp --device=ens33 --onboot=yes --ipv6=auto --activatenetwork --hostname=digmyth# Root password=123456rootpw --iscrypted $6$6ErC1johQ5LVAYwQ$cGGxb6Q6./SpvXCZs.K39d9LpV/IeFnspUT6mHmsVsARzToRCSsZ4fLxcOh0tYWpt38Yh6JoMzmSEkEtCtMlS/# System servicesservices --disabled=&quot;chronyd&quot;# System timezonetimezone Asia/Shanghai --isUtc --nontp# System bootloader configurationclearpart --all --initlabelbootloader --append=&quot; crashkernel=auto&quot; --location=mbr --boot-drive=sda# Partition clearing information#clearpart --drives=sda --initlabel#clearpart --none --initlabel# Disk partitioning information#ignoredisk --only-use=sda#part pv.735 --fstype=&quot;lvmpv&quot; --ondisk=sda --size=19979#volgroup vg --pesize=4096 pv.735#logvol /boot --fstype=&quot;xfs&quot; --size=500 --name=boot --vgname=vg#logvol / --fstype=&quot;xfs&quot; --size=16000 --name=root --vgname=vg#logvol /data --fstype=&quot;xfs&quot; --size=3000 --name=data --vgname=vg#logvol swap --fstype=&quot;swap&quot; --grow --size=1%packages@^minimal@corekexec-toolsvimnet-toolssysstat%end%posttouch /root/wxq.txt%end%addon com_redhat_kdump --enable --reserve-mb=&apos;auto&apos;%end 上面的装机将进入图形界面手动分区安装 到此完结，可以结合cobbler实现多pxe环境并存。 cobbler 一些概念： distro发行版： 其实就是pxe所说的相应内核文件 profile: 提供pxeboot引导文件、KS文件、安装树（用现有iso镜像mirror/import方式） 是不是很完美 。。。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux java install","slug":"linux-java-install","date":"2017-06-21T03:42:54.000Z","updated":"2021-01-29T10:01:54.393Z","comments":true,"path":"2017/06/21/linux-java-install/","link":"","permalink":"http://www.digmyth.com/2017/06/21/linux-java-install/","excerpt":"","text":"download jdk1.812[root@nodeadm ]# mkdir /usr/local/java[root@nodeadm ]# tar xf jdk-8u181-linux-x64.tar.gz -C /usr/local/java uncompress1234567891011121314151617[root@nodeadm java]# pwd/usr/local/java[root@nodeadm java]# ll jdk1.8.0_181/total 25976drwxr-xr-x 2 root root 4096 Sep 21 08:54 bin-r--r--r-- 1 root root 3244 Sep 21 08:54 COPYRIGHTdrwxr-xr-x 3 root root 132 Sep 21 08:54 include-rw-r--r-- 1 root root 5207314 Sep 21 08:54 javafx-src.zipdrwxr-xr-x 5 root root 185 Sep 21 08:54 jredrwxr-xr-x 5 root root 245 Sep 21 08:54 lib-r--r--r-- 1 root root 40 Sep 21 08:54 LICENSEdrwxr-xr-x 4 root root 47 Sep 21 08:54 man-r--r--r-- 1 root root 159 Sep 21 08:54 README.html-rw-r--r-- 1 root root 424 Sep 21 08:54 release-rw-r--r-- 1 root root 21099920 Sep 21 08:54 src.zip-rw-r--r-- 1 root root 106782 Sep 21 08:54 THIRDPARTYLICENSEREADME-JAVAFX.txt-r--r--r-- 1 root root 154222 Sep 21 08:54 THIRDPARTYLICENSEREADME.txt set java_env123456[root@nodeadm java]# tail -n 5 /etc/profileexport JAVA_HOME=/usr/local/java/jdk1.8.0_181export JRE_HOME=/usr/local/java/jdk1.8.0_181/jreexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 仅作记录","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"web-Django-11-模板渲染","slug":"web-django-11-模板渲染","date":"2017-06-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.984Z","comments":true,"path":"2017/06/20/web-django-11-模板渲染/","link":"","permalink":"http://www.digmyth.com/2017/06/20/web-django-11-模板渲染/","excerpt":"","text":"目录 基本方法 过滤器 标签 Django对template中html的渲染有着一套语法, 基本方法1234567891011return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 过滤器filter内置一些方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 1 add ： 给变量加上相应的值 # # 2 addslashes : 给变量中的引号前加上斜线 # # 3 capfirst : 首字母大写 # # 4 cut ： 从字符串中移除指定的字符 # # 5 date ： 格式化日期字符串 # # 6 default ： 如果值是False,就替换成设置的默认值，否则就是用本来的值 # # 7 default_if_none: 如果值是None，就替换成设置的默认值，否则就使用本来的值#value1=&quot;aBcDe&quot;&#123;&#123; value1|upper &#125;&#125;&lt;br&gt;#value2=5&#123;&#123; value2|add:3 &#125;&#125;&lt;br&gt;#value3=&apos;he llo wo r ld&apos;&#123;&#123; value3|cut:&apos; &apos; &#125;&#125;&lt;br&gt;#import datetime#value4=datetime.datetime.now()&#123;&#123; value4|date:&apos;Y-m-d&apos; &#125;&#125;&lt;br&gt;#value5=[]&#123;&#123; value5|default:&apos;空的&apos; &#125;&#125;&lt;br&gt;#value6=&apos;&lt;a href=&quot;#&quot;&gt;跳转&lt;/a&gt;&apos;&#123;&#123; value6 &#125;&#125;&#123;% autoescape off %&#125; &#123;&#123; value6 &#125;&#125;&#123;% endautoescape %&#125;&#123;&#123; value6|safe &#125;&#125;&lt;br&gt;&#123;&#123; value6|striptags &#125;&#125;#value7=&apos;1234&apos;&#123;&#123; value7|filesizeformat &#125;&#125;&lt;br&gt;&#123;&#123; value7|first &#125;&#125;&lt;br&gt;&#123;&#123; value7|length &#125;&#125;&lt;br&gt;&#123;&#123; value7|slice:&quot;:-1&quot; &#125;&#125;&lt;br&gt;#value8=&apos;http://www.baidu.com/?a=1&amp;b=2&apos;&#123;&#123; value8|urlencode &#125;&#125;&lt;br&gt; value9=&apos;hello I am pythoner&apos; 标签Django 提供的函数: simple_tag 可以有多个参数 filter 只能有2个参数，并且可以做条件语句的条件 自定义过滤器、自定义标签 形如for/if123&#123;% for item in todo_list %&#125; &lt;p&gt;&#123;&#123; forloop.counter &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 自定义标签当内置函数不满足需求时，可自定义filter/simple_tag 1 在Django app中创建目录名心须为templatetags的目录 2 在templatetags下随意定义.py 文件 如my_tag.py12345678910111213141516#!/usr/bin/env python3__author__ = &quot;wxq&quot;from django import templatefrom django.utils.safestring import mark_saferegister = template.Library()# register变量名是固定的，不可以改变@register.filter # 自定义过滤器def multip(x,y): return x*y@register.simple_tag # 自定义标签def multi_tag(x,y,z): return x*y*z 3 使用自定义simple_tag和filter的html文件中导入之前创建的 my_tag.py, 注意格式百分号.1&#123;% load &quot;my_tag&quot; %&#125; 4 使用定义的simple_tag和filter123456# html首行导入&#123;% load my_tag %&#125;&lt;body&gt; &lt;p&gt;&#123;&#123; 10 |add:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; n | multip:6 &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;% multi_tag 10 320 30 %&#125;&lt;/p&gt;&lt;/body&gt; 模板继承123456&#123;% block content %&#125;...&#123;% endblock %&#125;使用模板标签： &#123;% block %&#125; 。 所有的 &#123;% block %&#125; 标签告诉模板引擎，子模板可以重载这些部分。每个&#123;% block %&#125;标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。 总结：1 后端是字典如[“key”]取值，模板里都用.key2 后端是元组或列表如[0]取值，模板里都用.03 后端是函数或类方法用跨号()调用，模板里不加跨号，切记","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-02-前端html","slug":"web-02-前端html","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:47:19.192Z","comments":true,"path":"2017/06/15/web-02-前端html/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-02-前端html/","excerpt":"","text":"前言单选框提交时以{“gender”:”男”}形式, checked表示默认选中1234&lt;div&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; checked=&quot;checked&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;/&gt;女&lt;/div&gt; 多选框提交时以{“hobby”:”[11,12.13]”}形式，checked表示默认选中123456&lt;div&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;11&quot; checked=&quot;checked&quot; /&gt;乒乓球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;12&quot;/&gt;监球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;13&quot;/&gt;足球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;14&quot;/&gt;排球&lt;/div&gt; 下拉框multiple表示多选，没有multiple表示单选，selected表示默认选中1234567&lt;div&gt; &lt;select name=&quot;city&quot; id=&quot;&quot; multiple&gt; &lt;option value=&quot;北京&quot; selected=&quot;selected&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 提交type=”button” 不能提交表单数据，除非事件绑定type=”submit” 默认事件就是提交表单数据。12345&lt;form&gt; &lt;button&gt;提交&lt;/button&gt; # button标签在form里也会有事件，会提交 &lt;input type=&quot;submit&quot;&gt; # 有事件，也会提交 &lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt; # 没有事件，不会提交&lt;/form&gt; 前端相关概念Jquery学习可参考基本概念： html很骨感. css就是装饰或样式. js 就是让其能动起来, js=javascript，Javascript是一门编程语言，我们用它来编写客户端浏览器脚本 jQuery是一个快速、简洁的JavaScript框架,一种javascript工具库，把我们常用的一些功能进行封装，方便我们调用，极大简化了Javascript编程，提高了开发效率。jQuery设计的宗旨就是“write Less，Do More” Bootstrap是一个开发框架，集成了很多现成的网页格式和网页布局，封装了很多CSS样式和JS代码 Javascipt跟jQuery的区别：jQuery是javascript的一个库，包含多个可重用的函数，用来辅助我们简化javascript开发jQuery能做的javascipt都能做到，而javascript能做的事情，jQuery不一定能做到。 position定位的学习12345position position: relative # 与absolute一起使用 position: absolute #随滚动条滚动而滚动 随滚动条滚动而滚动，并且一直往上找，直到找到一个relative后进行定位 position: fixed # 永远在窗口某位置 引用图标要想用图标有很多种方法方法一：当我们引入了bootstrap.css时，我们可以用它官网的图标https://v3.bootcss.com/components/ 图标名字即类名就可使用了 方法二：fontawesome也有很多图标需要下载font-awesome文件来引入 https://fontawesome.io/icons/ # 每一个图标可点击，点开后能看到引用方法。 方法三：这个也是图标库，方法见官网http://fontawesome.dashgame.com/#basic","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(二)","slug":"web-django-orm(二)","date":"2017-06-15T12:51:41.000Z","updated":"2018-01-18T03:44:48.308Z","comments":true,"path":"2017/06/15/web-django-orm(二)/","link":"","permalink":"http://www.digmyth.com/2017/06/15/web-django-orm(二)/","excerpt":"","text":"目录 一对多查询 多对多查询 查询优化 一对多查询1.1 创建测试数据models.py数据库模型1234567from django.db import modelsclass DePart(models.Model): title=models.CharField(max_length=32)class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(DePart) 创建测试数据12345678models.DePart.objects.create(title=&quot;IT&quot;)models.DePart.objects.create(title=&quot;咨询&quot;)models.DePart.objects.create(title=&quot;公关&quot;)models.UserInfo.objects.create(username=&quot;user1&quot;,pwd=123,dp_id=1)models.UserInfo.objects.create(username=&quot;user2&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user3&quot;,pwd=456,dp_id=1)models.UserInfo.objects.create(username=&quot;user4&quot;,pwd=456,dp_id=2) 注：12p=models.UserInfo.objects.create(username=&apos;wxq&apos;,pwd=123) # 返回对象本身print(p.username,p.pwd) 1.2 一对多正向查询all() 返回Queryset123v = models.DePart.objects.all()for row in v: print(row.id,row.title,row.userinfo_set.all()) values()返回Queryset1234# values()每一个字典代表一行数据# v = models.UserInfo.objects.values(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)# for row in v:# print(row[&apos;username&apos;],row[&apos;dp__title&apos;]) values_list()返回Queryset1234# values_list()每一个元组代表一行数据v = models.UserInfo.objects.values_list(&apos;username&apos;,&apos;dp_id&apos;,&apos;dp__title&apos;)for row in v: print(row[0],row[2]) 1.3 一对多反向查询all()1234567 v=models.DePart.objects.all() for row in v: print(row.id, row.title, row.userinfo_set.all())打印结果：1 IT &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;2 咨询 &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;]&gt;3 公关 &lt;QuerySet []&gt; values()123456789v = models.DePart.objects.values(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[&apos;title&apos;],row[&apos;userinfo__username&apos;],row[&apos;userinfo__dp_id&apos;])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None values_list()123456789v = models.DePart.objects.values_list(&apos;title&apos;,&apos;userinfo__username&apos;,&apos;userinfo__dp_id&apos;)for row in v: print(row[0],row[1],row[2])#打印结果IT user1 1IT user2 1IT user3 1咨询 user4 2公关 None None 1.4 总结正向查询用字段（这里字段是指外键字段） all: 字段+.跨表字段 values: 字段 + __跨表字段 values_list 字段+ __跨表字段反向查询用表名 all: 表名小写+_set values: 表名小写 + __跨表字段 values_list 表名小写+ __跨表字段 总结一句话就是： 正向查询用字段，反向查询用表名 多对多查询2.1 多对多自建表当我们自己建第三张表时，第三张表列数没有限制，更加灵活，更能满足复杂需求1234567表模型class UserGroup(models.Model): caption= models.CharField(max_length=32)class U2G(models.Model): ui = models.ForeignKey(UserInfo) ug = models.ForeignKey(UserGroup) 12345678910111213创建测试数据models.U2G.objects.create(ui_id=1,ug_id=1)models.U2G.objects.create(ui_id=2,ug_id=1)models.U2G.objects.create(ui_id=3,ug_id=2)models.U2G.objects.create(ui_id=4,ug_id=2)v=models.U2G.objects.all()for row in v: print(row.ug.caption,row.ui.username)# 打印结果A组 user1A组 user2B组 user3B组 user4 2.2 多对多非自建多对多关系Django ManyToMany帮我们建第三张表时，我们不能对第三张直接操作，并且第三张只有三列（2张表的分别ForeighKey列，自增ID列）。只能通过如下面的ManyToMany字段间接操作12345678910111213#表模型class UserInfo(models.Model): username=models.CharField(max_length=32) pwd=models.CharField(max_length=32) dp = models.ForeignKey(&quot;DePart&quot;)class UserGroup(models.Model): caption= models.CharField(max_length=32) m = models.ManyToManyField(&quot;UserInfo&quot;)&apos;&apos;&apos;第三张表只有三列id userinfo_id usergroup_id&apos;&apos;&apos;&apos; 添加几个组做如下增删及更新数据操作123456obj = models.UserGroup.objects.filter(id=2).first() #id为2的组是B组print(obj.id,obj.caption,obj.m)obj.m.add(*[1,2]) #ID为1，2的用户加入B组# obj.m.remove(*[1,]) # 删除B组中用户id为1的记录obj.m.clear() # 清除组id为2的所有记录obj.m.set([1,]) # 不管id为2的组有几个用户都清空后把用户id为1的加入B组 2.3 多对多查询学习多对多查询注意：first/get返回对象，filter/all/values/values_list返回QuerySet1234obj=models.UserGroup.objects.filter(id=2).first() # 得到组对象v=obj.m.all() # obj.m表示UserInfo表for row in v: print(row.username, row.dp.title) 123obj=models.UserGroup.objects.filter(id=2).first() # 得到组ID为2的对象v=obj.m.filter(dp__title=&quot;IT&quot;).first() # UserInfo表中查部门为IT的记录print(v.username) # 打印符合条件的username 优化select_related优化12345user_list=models.UserInfo.objects.all() # 这里是1次sql请求for row in user_list: #如果有10条数据,会有10次sql请求 print(row.username,row.dp.title) # 每一次row.dp.title都会跨表查询那么返回结果经历了11次sql请求,做select_related优化后只有2次sql请求,其中1次是跨表请求models.UserInfo.objects.all().select_related(&quot;ForeighKeyname&quot;) #优化方法一 prefetch_related优化,推荐用优化方法二123456789models.UserInfo.objects.all().prefetch_related(&quot;ForeighKeyname&quot;) # 优化方法二prefetch_related可以分解为models.UserInfo.objects.all()一次单表查询取到了ForeighKeyname_id=[1,2,3,4,5] 然后DJango会发起第2次单表查询，models.DePart.objects.filter(id__in = [1,2,3,4,5]) 2次单表查询明显轻量了。#only:只取相应字段，否则性能下降# defer:不取相应字段，否则性能下降models.UserInfo.objects.all().only(&apos;id&apos;,&apos;name&apos;) # 只取哪几列models.UserInfo.objects.all().defer(&apos;id&apos;,&apos;name&apos;) # 不取哪几列 还有更多","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"git 利器","slug":"git-01","date":"2017-06-15T01:42:54.000Z","updated":"2018-08-25T03:35:15.638Z","comments":true,"path":"2017/06/15/git-01/","link":"","permalink":"http://www.digmyth.com/2017/06/15/git-01/","excerpt":"","text":"目录 git建版本库 git别名设置 git基本配置 git基本命令 git分支管理 git创建版本库12git init # 把当前目录变成git可管理的仓库生成的.git目录是用来跟踪管理版本库的,称为git的一个版本库 git别名设置1234为命令设置别名$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch git配置123每台机器自报家门$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 12优先级从高到低是.git/config--&gt; --global --&gt; system 12345全局生效: 配置保存在/etc/gitconfig[root@wxq-srv git_work]# git config --system user.name &quot;wxq&quot;[root@wxq-srv git_work]# cat /etc/gitconfig [user] name = wxq 12345678当前用户所有仓库生效：配置保存在~/.gitconfig[root@wxq-srv git_work]# cat /root/.gitconfig [user] name = wxq email = you@example.com[root@wxq-srv git_work]# git config --global user.name &quot;wxq&quot;[root@wxq-srv git_work]# git config --global user.email &quot;you@example.com&quot; 12345678910只对某仓库生效：配置保存在reponame/.git/config[root@wxq-srv git_work]# git config user.name &quot;wxq1&quot;[root@wxq-srv git_work]# cat .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[user] name = wxq1 基本命令1234567git log # 每一次提交的记录git reset --hard HEAD^ #HEAD表示当前版本，HEAD^^表示上上个版本，依次类推，上100个版本是HEAD~100git reset --hard $commit_id # 回到指定版本git reflog # 只要改变都会在这里记录，用于回到未来的某个版本。git add index.html # 添加更改至state暂存 区git reset HEAD index.html # unstage 退出暂存区git diff HEAD -- readme.txt # 查看当前工作区和版本库有什么不同 放弃修改除了版本回退外，只要未commit之前都可以放弃工作区所做的修改。如果有add 动作，需要先从暂存区回退到工作区git reset HEAD index.html如果没有add动作，可直接放弃修改git checkout -- index.txt或者可以这么理解git checkout -- index.txt 都会从暂存区或版本库(优先从暂存区)恢复到工作区. 分支管理123456查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt; 待续","categories":[{"name":"Git","slug":"Git","permalink":"http://www.digmyth.com/categories/Git/"}],"tags":[]},{"title":"linux_iptables应用","slug":"linux-iptables应用","date":"2017-06-15T01:42:54.000Z","updated":"2018-04-23T06:57:19.754Z","comments":true,"path":"2017/06/15/linux-iptables应用/","link":"","permalink":"http://www.digmyth.com/2017/06/15/linux-iptables应用/","excerpt":"","text":"iptables 规则应用总结防火墙端口重定向规则1iptables -t nat -I PREROUTING -i eth1 -p tcp --dport 80 -j REDIRECT --to 8080 反向代理防火墙规则12iptables -I INPUT -d 123.125.168.130 -i eth0 -p tcp --dport 80 -j ACCEPTiptables -I INPUT -s 10.10.10.0/24 -i eth1 -p tcp --sport 9999 -j ACCEPT 此包为input状态检测可省略12iptables -I OUTPUT -p tcp -o eth1 -s 10.10.10.1 -d 10.10.10.10 --dport 9999 -j ACCEPTiptables -I OUTPUT -p tcp -o eth0 -s 123.125.168.130 --sport 80 -j ACCEPT 目标地址转换：123iptables -t nat -I PREROUTING -i eth0 -d 123.125.168.130 -p tcp --dport 80 -j DNAT --to 10.10.10.10:9999iptables -A FORWARD -d 10.10.10.10 -p tcp --dport 9999 -j ACCEPTiptables -A FORWARD -s 10.10.10.10 -p tcp --sport 9999 -j ACCEPT 如果10.10.10.10机器默认网关不是10.10.10.1或没有指网关,则网关防火墙需如下:有点奇怪的规则1iptables -t nat -I POSTROUTING -d 10.10.10.10 -p tcp --dport 9999 -j SNAT --to 10.10.10.1 源地址转换：12iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j SNAT --to 123.125.168.130iptables -t nat -I POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE 此条开销较大，与上条可二选一12iptables -I FORWARD -s 10.10.10.0/24 -j ACCEPT 注：forward不指网卡，要指也是内网卡iptables -I FORWARD -d 10.10.10.0/24 -j ACCEPT","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Mysql sysbench 压测","slug":"mysql-sysbench","date":"2017-06-10T01:41:54.000Z","updated":"2017-11-10T09:01:54.314Z","comments":true,"path":"2017/06/10/mysql-sysbench/","link":"","permalink":"http://www.digmyth.com/2017/06/10/mysql-sysbench/","excerpt":"","text":"目录 工具安装 执行压测 针对优化 示例结果 数据库指标对于mysql压力测试，大多用sysbench/tpcc-mysql工具。主要针对数据库OLTP（在线事务处理）指标。 12qps : query per second 查询量tps: transaction per second 事务量 工具安装123yum install sysbench -y[root@mysql sysbench]# sysbench --versionsysbench 1.0.9 在sysbench压测时会调用内置lua脚本, 这些脚本为于/etc/share/sysbench目录下12345678910111213141516/usr/share/sysbench[root@mysql sysbench]# lltotal 64-rwxr-xr-x 1 root root 1452 Sep 18 12:29 bulk_insert.lua-rw-r--r-- 1 root root 13762 Sep 18 12:29 oltp_common.lua-rwxr-xr-x 1 root root 1290 Sep 18 12:29 oltp_delete.lua-rwxr-xr-x 1 root root 2018 Sep 18 12:29 oltp_insert.lua-rwxr-xr-x 1 root root 1265 Sep 18 12:29 oltp_point_select.lua-rwxr-xr-x 1 root root 1649 Sep 18 12:29 oltp_read_only.lua-rwxr-xr-x 1 root root 1824 Sep 18 12:29 oltp_read_write.lua-rwxr-xr-x 1 root root 1118 Sep 18 12:29 oltp_update_index.lua-rwxr-xr-x 1 root root 1127 Sep 18 12:29 oltp_update_non_index.lua-rwxr-xr-x 1 root root 1440 Sep 18 12:29 oltp_write_only.lua-rwxr-xr-x 1 root root 1919 Sep 18 12:29 select_random_points.lua-rwxr-xr-x 1 root root 2118 Sep 18 12:29 select_random_ranges.luadrwxr-xr-x 4 root root 4096 Nov 10 02:57 tests 执行压测方便压测时找到内置lua脚本，以下命令都在/etc/share/sysbench目录下执行 在远端连接数据库时，授权1grant all on test.* to root@&apos;%&apos; identified by &apos;123&apos;; 生成压测数据12cd /usr/share/sysbench/sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 prepare 执行压测1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 run 清理压测数据1sysbench oltp_read_write.lua --mysql-host=127.0.0.1 --mysql-port=3306 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=MyNewPass4! --table_size=50000 --tables=10 --threads=300 --time=60 --report-interval=10 cleanup 优化数据库在压测过程中可能出现一些错误，连接数不够，max_prepared_stmt_count不够，可优化/etc/my.cnf 做适当调整123456789101112max_connections = 4096max_prepared_stmt_count=100000 # 默认16384压测时需调大query_cache_type = 1query_cache_size = 10Mwsrep_slave_threads = 4#wsrep_notify_cmd = /usr/local/bin/wsrep-notify.shmax_connections = 10000key_buffer_size = 64Mmax_heap_table_size = 64Mtmp_table_size = 64Minnodb_buffer_pool_size = 8192M 示例结果1234567891011121314151617181920212223242526272829303132333435Initializing worker threads...Threads started![ 10s ] thds: 300 tps: 198.33 qps: 5741.67 (r/w/o: 4335.25/830.02/576.41) lat (ms,95%): 3706.08 err/s: 81.77 reconn/s: 0.00[ 20s ] thds: 300 tps: 222.61 qps: 6095.90 (r/w/o: 4553.90/924.16/617.84) lat (ms,95%): 4203.93 err/s: 102.31 reconn/s: 0.00[ 30s ] thds: 300 tps: 221.01 qps: 5899.58 (r/w/o: 4399.84/899.83/599.92) lat (ms,95%): 4055.23 err/s: 93.20 reconn/s: 0.00[ 40s ] thds: 300 tps: 198.06 qps: 5400.91 (r/w/o: 4032.79/827.03/541.09) lat (ms,95%): 4683.57 err/s: 89.98 reconn/s: 0.00[ 50s ] thds: 300 tps: 186.14 qps: 5162.76 (r/w/o: 3866.39/783.36/513.00) lat (ms,95%): 5312.73 err/s: 90.12 reconn/s: 0.00[ 60s ] thds: 300 tps: 158.49 qps: 4433.94 (r/w/o: 3325.93/670.45/437.56) lat (ms,95%): 5507.54 err/s: 78.99 reconn/s: 0.00SQL statistics: queries performed: read: 246736 write: 50340 other: 33317 total: 330393 transactions: 12147 (195.34 per sec.) queries: 330393 (5313.17 per sec.) ignored errors: 5477 (88.08 per sec.) reconnects: 0 (0.00 per sec.)General statistics: total time: 62.1815s total number of events: 12147Latency (ms): min: 16.10 avg: 1503.84 max: 14267.54 95th percentile: 4683.57 sum: 18267086.41Threads fairness: events (avg/stddev): 40.4900/6.29 execution time (avg/stddev): 60.8903/0.59","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"KVM introduction","slug":"KVM-introduction","date":"2017-06-08T01:41:54.000Z","updated":"2018-03-30T06:58:49.290Z","comments":true,"path":"2017/06/08/KVM-introduction/","link":"","permalink":"http://www.digmyth.com/2017/06/08/KVM-introduction/","excerpt":"","text":"1. kvm简介kvm as a kernel based virtual machine,现如今较为流行的虚拟化技术，openstack后端就是kvm虚拟化。 2. 模拟与虚拟 模拟： 完全由软件模拟：ring0 ring1 ring2 ring3都需要软件模拟， 底层硬件架构与虚拟机硬件架构可以不同 虚拟： 底层硬件架构与虚机硬件架构必须相同，如cpu平台架构都为x86_64 3.虚拟化分类虚拟化分类无非2种方式： 一种：直接运行于硬件平台–&gt; hypervisor: dom0 如xen ,esxi,这里xen不好理解，装xen不也要安装操作系统后安装xen4软件包么？为什么它也说直接运行在硬件平台，是因为安装完xen4后，切换了xen4的内核来启动，并非原有操作系统内核. 二种：先有host系统，再安装虚拟软件（如vmware station）或统称virtual machine mintor(虚拟机监视器) 如kvm, 虚拟机的cpu,内存通过kvm模块来调用，但IO不行，虚拟机的IO是通过host系统的qemu程序模拟提供的，再由host系统的内核提供IO 那么什么是半虚拟化？ 半虚拟化是要修改内核的，要让虚拟机知道自己运行在虚拟机环境下的，知道的结果是当虚拟机发起cpu指令时不能直接操作硬件，需要发起hypercall调用. 那么什么是完全虚拟化？ 1) 早期BT技术实现加速，binary translation 边运行边翻译,虚机内核就是运行ring1上专用于翻译加速 2) hvm: 硬件辅助虚拟化，需要cpu硬件支持，就是cpu多了ring-1，这样虚拟机直接运行在ring0上，宿主机内核运行在ring-1,ring-1捕获ring0的特权指令直接运行，性能可想而知提高了","categories":[{"name":"Openstack","slug":"Openstack","permalink":"http://www.digmyth.com/categories/Openstack/"}],"tags":[]},{"title":"cephfs-Ganesha","slug":"cephfs-Ganesha","date":"2017-06-05T01:41:54.000Z","updated":"2017-11-14T09:43:43.912Z","comments":true,"path":"2017/06/05/cephfs-Ganesha/","link":"","permalink":"http://www.digmyth.com/2017/06/05/cephfs-Ganesha/","excerpt":"","text":"nfs-ganesha简介因工作需要调研了cephfs 导为nfs,目前有两种方法： 方法一：内核mount挂载或 ceph-fuse 挂载至NFS server，如/data再正常搭建NFS-server即可。 方法二 : 借用nfs-ganesha协议转换间接存储在cephfs集群中。 nfs-ganesha不仅可以导 cephfs,也可以导RGW.ceph RGW理解: 相当于协议转换层，把符合S3和swift协议的 restFul API 请求转换为rados存储在ceph对象存储中. 换一种说法： Ceph 导出为 NFS，一种通过 RGW，一种通过 CephFS，通过 FSAL 模块 连接到 RGW 或者 CephFS FSAL_RGW 调用 librgw2 将 NFS 协议转义为 S3 协议再通过 RGW 存入到 Ceph 中. FSAL_CEPH 调用 libcephfs1 将 NFS 转义为 Cephfs 协议再存入到 Ceph 中. FSAL： File System Abstraction Layer 文件系统抽像层 题外话，openstack项目manila后端存储驱动，其中一种就是Ganesha Driver12345## manila 4驱动Default Driver: 使用 RBD 作为 Manila Service VM 的后端，在 VM 上启动 NFS 实例提供服务Ganesha Driver: 使用 Ganesha 将 CephFS 重新 Reexport 出去Native CephFS Driver: 在 Guest VM 上直接使用原生 CephFS Module 访问VirtFS Driver: 将 CephFS 挂载在 Host 端，VM 通过 VirtFS 访问 nfs-ganesha安装在CentOS7系统中有nfs-ganesha rpm软件包，但没有ceph相关模块，所以我这里是编译安装，把FSAL_RGW 模块/FSAL_CEPH 模块编译进去。 1git clone -b V2.4-stable https://github.com/nfs-ganesha/nfs-ganesha.git --recursive 由于ceph-jewel版本才有libcephfs1-devel软件包，所以这里ganesha客户端 ceph用 jewel版本，服务器ceph版本Luminousceph-jewel源123456789[root@ ganesha]# cat /etc/yum.repos.d/ceph.repo [ceph]name=cephbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/x86_64/gpgcheck=0[ceph-noarch]name=cephnoarchbaseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/noarch/gpgcheck=0 软件安装12345yum install gcc git cmake autoconf libtool bison flex doxygen openssl-devel gcc-c++ libuuid-devel nfs-utils -y# 如果要生成 FSAL_RGW 模块，需要安装 librgw2-develyum install librgw2-devel -y # 如果要生成 FSAL_CEPH 模块，需要安装 libcephfs1-develyum install libcephfs1-devel -y 如果需要生成 FSAL_RGW 模块，则在编译选项中添加： -DUSE_FSAL_RGW=ON 如果需要生成 FSAL_CEPH 模块，则在编译选项中添加： -DUSE_FSAL_CEPH=ON 12345mkdir /opt/build/cd /opt/build/cmake -DUSE_FSAL_CEPH=ON /opt/nfs-ganesha/src/makemake install 在cmake输出中确保有12345-- USE_FSAL_CEPH = ON-- USE_FSAL_CEPH_MKNOD = OFF-- USE_FSAL_CEPH_SETLK = OFF-- USE_FSAL_CEPH_LL_LOOKUP_ROOT = ON-- USE_FSAL_RGW = ON 确保： – USE_FSAL_CEPH 为 ON,以及 – USE_FSAL_RGW 为 ON。 如果过程中出错，请删除/tmp/build/* 及/tmp/build/CMakeCache.txt重新编译 make install成功输出中有:12&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/rgw.conf&gt; -- Up-to-date: /usr/share/doc/ganesha/config_samples/ceph.conf 这两个文件就是配置将 RGW 和 CephFS 配置为 nfs-ganesha的配置模板。 nfs-ganesha 配置123456789101112131415161718192021222324252627282930313233cat /etc/ganesha/ganesha.confEXPORT&#123; Export_ID=1; Path = /; Pseudo = /cephfs; Access_Type = RW; NFS_Protocols = 4; Transport_Protocols = TCP; Squash = No_Root_Squash; FSAL &#123; Name = CEPH; &#125;&#125;EXPORT&#123; Export_ID=2; Path = /; Pseudo = /rgw; Access_Type = RW; Squash = No_root_squash; NFS_Protocols = 4; Transport_Protocols = TCP; FSAL &#123; Name = RGW; User_Id = &quot;admin&quot;; Access_Key_Id =&quot;RDS4VW60OA48ZW1HSU61&quot;; Secret_Access_Key = &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;; &#125;&#125;RGW &#123; ceph_conf = &quot;/etc/ceph/ceph.conf&quot;;&#125; 其中Access_Key_Id Secret_Access_Key部份在ceph-rgw中读取123456789101112131415 (ceph-mon)[root@pike-vm /]# radosgw-admin user info --uid=admin&#123; &quot;user_id&quot;: &quot;admin&quot;, &quot;display_name&quot;: &quot;admin&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;admin&quot;, &quot;access_key&quot;: &quot;RDS4VW60OA48ZW1HSU61&quot;, &quot;secret_key&quot;: &quot;zLmFRu3mmzmsosNk07FPKpMZAARCSvCc3UjToP6Y&quot;... 启动nfs-ganesha1ganesha.nfsd -L /var/log/ganesha.log 挂载使用在客户端进行挂载使用：1 安装ceph-common ceph-fuse libcephfs1-devel librgw2-devel2 拷贝ceph.conf配置文件及keyring文件至/etc/ceph3 挂载：mount -t nfs4 {$ganesha-server-ip}:/ /mnt如果出现I/O error,请ceph-fuse -m 172.18.23.17:6789 /mnt 挂载一遍，就是这么神奇，不要问我为什么。。。12[root@-3 mnt]# lsls: reading directory .: Remote I/O error 成功123456[root@-3 cephfs]# ll /mnt/total 1drwxrwxrwx 1 root root 33 Nov 14 08:31 cephfs[root@-3 cephfs]# echo &quot;99cloud new data...&quot; &gt; cephfs.txt [root@-3 cephfs]# cat cephfs.txt cephfs data... 在cephfs集群中我们可以看到客户端写入的数据12345678[root@-3 ~]# ceph-fuse -m 172.18.23.17:6789 /data/ceph-fuse[4579]: starting ceph clientceph-fuse[4579]: starting fuse[root@-3 ~]# cd /data/[root@-3 data]# lscephfs.txt[root@3 data]# cat cephfs.txt cephfs data...","categories":[{"name":"Ceph","slug":"Ceph","permalink":"http://www.digmyth.com/categories/Ceph/"}],"tags":[]},{"title":"web-Django-02-分页示例","slug":"web-django-03-分页示例","date":"2017-05-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/05/20/web-django-03-分页示例/","link":"","permalink":"http://www.digmyth.com/2017/05/20/web-django-03-分页示例/","excerpt":"","text":"1 django 分页功能app01/views.py Paginator模块的使用123456789101112131415161718192021222324def users(request): from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger user_list = models.UserInfo.objects.all() paginator = Paginator(user_list,10) # paginator.per_page 每页显示条目数量 # paginator.count 数据总个数 # paginator.num_pages 总页数 # paginator.page_range 总页数的索引范围，如(1,10),(1,20) current_page = request.GET.get(&apos;p&apos;) try: page_obj=paginator.page(current_page) except EmptyPage as e: page_obj = paginator.page(1) except PageNotAnInteger as e: page_obj = paginator.page(1) # page_obj.has_next() 是否有下一页 # page_obj.next_page_number() 下一页页码 # page_obj.has_previous() 是否有上一页 # page_obj.previous_page_number() 上一页页码 # page_obj.object_list 分页之后的数据列表 # page_obj.number 当前页 # page_obj.paginator paginator对象 return render(request,&quot;users.html&quot;, &#123;&apos;page_obj&apos;:page_obj&#125;) templates/users.html12345678910111213141516171819&#123;% if page_obj.has_previous %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&#123;% endif %&#125;&#123;% for i in page_obj.paginator.page_range %&#125; &lt;a href=&quot;/users?p=&#123;&#123; i &#125;&#125;&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;&#123;% endfor %&#125;&#123;% if page_obj.has_next %&#125; &lt;a href=&quot;/users?p=&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&#123;% else %&#125; &lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&#123;% endif %&#125;&lt;span&gt; &lt;a&gt;&#123;&#123; page_obj.number &#125;&#125;/&#123;&#123; page_obj.paginator.num_pages &#125;&#125;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-加密解密加签验签","slug":"python加密解密加签验签","date":"2017-05-15T12:51:41.000Z","updated":"2018-04-23T06:59:41.630Z","comments":true,"path":"2017/05/15/python加密解密加签验签/","link":"","permalink":"http://www.digmyth.com/2017/05/15/python加密解密加签验签/","excerpt":"","text":"python加密解密，加签验签(转)在与第三方服务对接时，加密与解密，加签与验签是这个过程中的关键一步 一般情况下，对接服务中会有两对公私钥。使用对方公钥进行加密，使用自己私钥进行加签。传回来的数据，使用自己的私钥解密，使用对方的公钥验签。 12345678import base64from Crypto.PublicKey import RSAfrom Crypto.Hash import SHAfrom Crypto.Cipher import PKCS1_v1_5from Crypto.Signature import PKCS1_v1_5 as SIGN_PKCSPUB_KEY = RSA.importKey(open(&apos;rsa_public_key.pem&apos;,&apos;r&apos;).read())PRI_KEY = RSA.importKey(open(&apos;rsa_private_key.pem&apos;,&apos;r&apos;).read()) 加密 12345678910def split_data(l, n): for i in range(0, len(l), n): yield l[i: i+n] def encrypt(params): raw = params.encode(&apos;utf-8&apos;) cipher = PKCS1_v1_5.new(PUB_KEY) ＃ 加密超长字节117个字节一加密 content = b&apos;&apos;.join([cipher.encrypt(x) for x in chunks(raw, 117)]) return base64.b64encode(content) 解密123456def decrypt(data): raw = data.encode(&apos;utf-8&apos;) decrypt = PKCS1_v1_5.new(PRI_KEY).decrypt # 解密超长字符128一解密 content = b&apos;&apos;.join(decrypt(x, object()) for x in chunks(raw, 128)) return content.decode() 加签1234def signer(data): signstr = data.encode(&apos;utf-8&apos;) sign = SIGN_PKCS.new(PRI_KEY).sign(SHA.new(signstr)) return base64.b64encode(sign) 验签1234def verify_sign(unsign, raw_sign): # unsign: 签名 # raw_sign: 待验证签名 assert SIGN_PKCS.new(PUB_KEY).verify(SHA.new(unsign.encode(&apos;utf-8&apos;)), raw_sign)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"linux_Suse init","slug":"linux-SUSE-init","date":"2017-05-15T01:42:54.000Z","updated":"2018-09-04T13:15:50.755Z","comments":true,"path":"2017/05/15/linux-SUSE-init/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-SUSE-init/","excerpt":"The article has been encrypted, please enter your password to view.","text":"同意条款 ","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"linux_7.X内核升级","slug":"linux-7.x内核升级","date":"2017-05-15T01:42:54.000Z","updated":"2018-08-04T08:38:33.350Z","comments":true,"path":"2017/05/15/linux-7.x内核升级/","link":"","permalink":"http://www.digmyth.com/2017/05/15/linux-7.x内核升级/","excerpt":"","text":"查看版本12# uname -r3.10.0-693.el7.x86_64 升级内核需要先导入elrepo的key，然后安装elrepo的yum源12345678910111213141516171819202122232425262728293031# rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmRetrieving http://elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpmPreparing... ################################# [100%]Updating / installing... 1:elrepo-release-7.0-3.el7.elrepo ################################# [100%]# yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list availableLoaded plugins: fastestmirrorelrepo-kernel | 2.9 kB 00:00:00 elrepo-kernel/primary_db | 1.8 MB 00:00:01 Determining fastest mirrors * elrepo-kernel: mirrors.neusoft.edu.cnAvailable Packageskernel-lt.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-doc.noarch 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-headers.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-lt-tools-libs-devel.x86_64 4.4.145-1.el7.elrepo elrepo-kernelkernel-ml.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-doc.noarch 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-headers.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs.x86_64 4.17.11-1.el7.elrepo elrepo-kernelkernel-ml-tools-libs-devel.x86_64 4.17.11-1.el7.elrepo elrepo-kernelperf.x86_64 4.17.11-1.el7.elrepo elrepo-kernelpython-perf.x86_64 4.17.11-1.el7.elrepo elrepo-kernel 安装你需要的版本12# yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64版本性质：主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 查看内核是否安装完成123456# rpm -qa |grep kernelkernel-tools-3.10.0-693.el7.x86_64kernel-ml-4.17.11-1.el7.elrepo.x86_64kernel-3.10.0-693.el7.x86_64kernel-ml-devel-4.17.11-1.el7.elrepo.x86_64kernel-tools-libs-3.10.0-693.el7.x86_64 查看并修改grub的启动顺序1234# awk -F\\&apos; &apos;$1==&quot;menuentry &quot; &#123;print $2&#125;&apos; /etc/grub2.cfgCentOS Linux (4.17.11-1.el7.elrepo.x86_64) 7 (Core)CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)CentOS Linux (0-rescue-d14171e79a9e4b5da1a69e7348d0f45f) 7 (Core) 注： 最新内核为第一个，故启动项为012345678# vim /etc/default/grubGRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=saved(这里改成0)GRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 生成grub重新创建内核配置并重启12345678910# grub2-mkconfig -o /boot/grub2/grub.cfgGenerating grub configuration file ...Found linux image: /boot/vmlinuz-4.17.11-1.el7.elrepo.x86_64Found initrd image: /boot/initramfs-4.17.11-1.el7.elrepo.x86_64.imgFound linux image: /boot/vmlinuz-3.10.0-693.el7.x86_64Found initrd image: /boot/initramfs-3.10.0-693.el7.x86_64.imgFound linux image: /boot/vmlinuz-0-rescue-d14171e79a9e4b5da1a69e7348d0f45fFound initrd image: /boot/initramfs-0-rescue-d14171e79a9e4b5da1a69e7348d0f45f.imgdone[root@localhost ~]# reboot 确认内核版本12# uname -r4.17.11-1.el7.elrepo.x86_64","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.digmyth.com/categories/Linux/"}],"tags":[]},{"title":"Python 操作mysql","slug":"mysql-pyton操作mysql","date":"2017-04-29T01:41:54.000Z","updated":"2017-11-19T09:00:13.663Z","comments":true,"path":"2017/04/29/mysql-pyton操作mysql/","link":"","permalink":"http://www.digmyth.com/2017/04/29/mysql-pyton操作mysql/","excerpt":"","text":"这里记录下python操作mysql的知识点，详细参见链接 模块安装在python2中使用模块MySQLdb在python3中使用模块pymysql1pip3 install pymysql 基本使用基本操作过程就是 创建连接 创建游标 发送语句 获取数据 事务提交 关闭游标 关闭连接1234567891011121314151617181920212223import pymysql# 创建连接conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;db1&apos;)# 创建游标cursor = conn.cursor()# 发送语句cursor.execute(sqlstatement)cursor.executemany(sqlstatement)# 获取数据cursor.fetchone()cursor.fetchmany(3)cursor.fetchall() # 事务提交，不然无法保存新建或者修改的数据conn.commit() # 关闭游标cursor.close()# 关闭连接conn.close() 基本知识点获取新创建数据自增ID1234567891011import pymysql conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)cursor = conn.cursor()cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;1.1.1.11&quot;,1),(&quot;1.1.1.11&quot;,2)])conn.commit()cursor.close()conn.close() # 获取最新自增IDnew_id = cursor.lastrowid 游标操作1234在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：cursor.scroll(1,mode=&apos;relative&apos;) # 相对当前位置移动cursor.scroll(2,mode=&apos;absolute&apos;) # 相对绝对位置移动 fetch 数据类型关于默认获取的数据是元组类型，如果想要获取字典类型的数据，如下pymysql.cursors.DictCursor：1234567import pymysqlconn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)# 游标设置为字典类型cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)r = cursor.execute(&quot;call p1()&quot;) result = cursor.fetchone() 1234567891011# 执行SQL，并返回受影响行数effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos;&quot;)# 执行SQL，并返回受影响行数#effect_row = cursor.execute(&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot;, (1,)) 这里值得注意的是不能把上面语句替换成下面语句，否则会被sql注入statement=&quot;update hosts set host = &apos;172.16.0.1&apos; where nid &gt; %s&quot; % 1effect_row = cursor.execute(statement)# 执行SQL，并返回受影响行数#effect_row = cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;172.16.0.1&quot;,1),(&quot;1.1.1.11&quot;,2)]) SQLAlchemySQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果1pip3 install SQLAlchemy SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：12345678910111213MySQL-Python mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; pymysql mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;] MySQL-Connector mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; cx_Oracle oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...] 更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"web-Django-02-基本配置示例","slug":"web-django-02-基本配置示例","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.976Z","comments":true,"path":"2017/04/20/web-django-02-基本配置示例/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-02-基本配置示例/","excerpt":"","text":"1 django安装1pip install django pymysql 2 新建django project1django-admin.py startproject mysite 或用pycharm新建一个项目 3 该项目下创建一个应用1cd mysite &amp;&amp; python manage.py startapp app01 4 配置Djangosettings.py文件确保有下面代码，用于在static目录放置静态1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS= ( os.path.join(BASE_DIR, &apos;static&apos;),) 确保INSTALLED_APPS = []有app01,应用 5 Django mysql配置settings.py文件确保有12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;wxq_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123&apos;, &apos;HOST&apos;: &apos;localhost&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;&#125; app01下 init.py12import pymysqlpymysql.install_as_MySQLdb() 对于初学者建议配置此项，用于打印orm翻译后的sql语后，便于对照学习1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 6 django生成数据models.py12345from django.db import modelsclass UserInfo(models.Model): username = models.CharField(max_length=32) password = models.CharField(max_length=32) email = models.CharField(max_length=32) 12python manage.py makemigrationspython manage.py migrate 7 urls.py定义123456from app01 import viewsurlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;^users/$&apos;, views.users), # url(r&apos;^create_data/&apos;, views.create_data),] 8 views.py定义123456789101112131415from django.shortcuts import render,HttpResponse, redirectfrom app01 import modelsdef create_data(request): for i in range(1,104): models.UserInfo.objects.create( username = &quot;root%s&quot; %i, password = &quot;123&quot;, email = &quot;root%s@qq.com&quot; %i, ) return HttpResponse(&quot;data generate...&quot;)def users(request): user_list = models.UserInfo.objects.all() return render(request,&quot;users.html&quot;, &#123;&apos;user_list &apos;:user_list &#125;) 9 templates/users.html定义12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/bootstrap-3.3.7-dist/css/bootstrap.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;width: 700px; margin: 10px auto&quot;&gt; &lt;h1&gt;用户列表&lt;/h1&gt; &lt;table class=&quot;table table-hover table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; 用户名&lt;/th&gt; &lt;th&gt; 密码&lt;/th&gt; &lt;th&gt;邮箱&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for user in page_obj.object_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; user.username &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.password &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; user.email &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 10 注意bootstrap应用bootstrap下载链接 11 启动项目运行项目1python manage.py runserver 127.0.0.1:8000","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-Django-04-路由分发与别名.md","slug":"web-django-04-路由分发与别名","date":"2017-04-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.980Z","comments":true,"path":"2017/04/20/web-django-04-路由分发与别名/","link":"","permalink":"http://www.digmyth.com/2017/04/20/web-django-04-路由分发与别名/","excerpt":"","text":"目录 别名设置 namespace设置 reverse include本质 Django URLS 路由分发流程己经学习过了，这里了解一下url中的别名设置，reverse反向生成URL，以及include本质如何路由分发的。 别名设置URL有别名name的设置，添加在最后一级分发视图函数的后面1url(r&apos;^login/&apos;, views.login,name=&quot;alias_name&quot;), namespace设置URL有namespace的设置当多个app多级分发时可能存在别名相同,这时就用到namespace来加以区分 namespace添加12url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)), 或url(r&apos;^app01&apos;,([url(&apos;^hosts&apos;,oviews.hosts,name=&quot;nnnn&quot;),],None,&quot;oo&quot;)), reverse用法reverse反向生成url1234from django.urls import reversedef login(request): url = reverse(&quot;namespace1:namespace2:alias_name&quot;) return redirect(url) include本质include原生写法是1url(r&apos;^openstack/&apos;, include(&quot;openstack.urls&quot;,namespace=&quot;o&quot;)) include用于路由下级分发，本质是返回元组，最后一个None表示namespace,也就是形如1url(r&apos;^openstack/&apos;, ([url映射关系，],None,None)) 总结：了解分发基础知识有利于我们后面学习Django admin，如何动态生成URL的代码学习。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"web-django-orm(一)","slug":"web-django-orm(一)","date":"2017-04-15T12:51:41.000Z","updated":"2018-01-18T03:44:22.364Z","comments":true,"path":"2017/04/15/web-django-orm(一)/","link":"","permalink":"http://www.digmyth.com/2017/04/15/web-django-orm(一)/","excerpt":"","text":"目录 简单介绍 初识ORM 简单介绍声明：ORM原理请参考 一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 初识ORM下面学习下Django里sql操作的基本语法 通过简单设置，可以在logging查看翻译成的sql语句settings.py1234567891011121314151617LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;handlers&apos;: &#123; &apos;console&apos;:&#123; &apos;level&apos;:&apos;DEBUG&apos;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.db.backends&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;], &apos;propagate&apos;: True, &apos;level&apos;:&apos;DEBUG&apos;, &#125;, &#125;&#125; 2.1 创建表12345from django.db import modelsclass UserInfo(models.Model): nid=models.AutoField(primary_key=True) name=models.CharField(max_length=32) pwd = models.CharField(max_length=32) 2.2 操作表123456789101112q = models.UserInfo.objects.all()Queryset = [obj(id,name,pwd), obj(id,name,pwd),obj(id,name,pwd),]q=models.UserInfo.objects.values(&apos;name&apos;,&apos;pwd&apos;)Queryset = [&#123;&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123&#125;, &#123;&quot;name&quot;:&quot;user1&quot;,&quot;pwd&quot;:123&#125;, &#123;&#125;] # 字典q = models.UserInfo.objects.value_list(&apos;name&apos;,&apos;pwd&apos;)Queryset = [(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123), (&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123),(&quot;name&quot;:&quot;wxq&quot;,&quot;pwd&quot;: 123)]#元组q = models.UserInfo.objects.filter(name=&quot;wxq&quot;)q = models.UserInfo.objects.get(name=&apos;wxq&apos;) # 多个或没有值都会报错q = models.UserInfo.objects.filter(name=&apos;wxq&apos;).first() # 推荐 2.3 操作表的其它方法12345678910111213141516171819202122232425261. all() 返回的是querySet2. filter(id__lt=10, id__gt=1) 并且查， 返回的是querySet3. get() 只有一个值，否则报错， 返回的是对象4. first() 只找第一个值，返回的是对象5. exclude 取反model.Book.objects.exclude(prince=134) 返回querySet6. countmodeles.Book.objects.exclude(prince=134).count() #querySet对象才有.count()调用方法 7. order_by(*field)models.Book.objects.objects.all().order_by(&quot;prince&quot;) 小到大排序models.Book.objects.objects.all().order_by(&quot;-prince&quot;) 大到小排序8.distinct() 提除重复的记录9 values 返回字典querySet集合10 values_list 返回元组querySet集合11 existret = models.Book.objects.all().exist()","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-09-02-网络编程","slug":"python-10-02-网络编程","date":"2017-03-31T14:26:46.000Z","updated":"2018-02-08T09:19:59.999Z","comments":true,"path":"2017/03/31/python-10-02-网络编程/","link":"","permalink":"http://www.digmyth.com/2017/03/31/python-10-02-网络编程/","excerpt":"","text":"目录 socket概念 socket基本使用 socket简单示例 总结 一、socket概念什么是socket ? socket常称为’套接字’，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或应答网络请求。 Unix中一切皆文件，socket是一种特殊的套接字文件，对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。 所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。 对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。 二、socket基本使用服务器端第一步： 创建 套接字对够用123456789import socketsocket.socket(family, type)family AF_INET AF_UNIXtype SOCK_STREAM -------&gt; TCP SOCK_DGRAM -------&gt; UDPconns = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 绑定地址使用套接字对象的 bind方法绑定于地址和端口组成的元组1conns.bind((&apos;ip&apos;,port)) 第三步： 使用套接字的Listen()方法进行监听1conns.listen(10) #等待队列长度 第四步： 进入循环监听状态 使用套接字的accept()方法接收用户连接请求help(tcpconn.accept)1client_sock,client_addr = conns.accept() 编写客户端程序第一步： 创建套接字对象以连接服务器端1client_conn = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 第二步： 请求连接服务器client_conn.conncet((‘server_ip’, port)) 第三步： 发送数据 1client_conn.send(b&apos;hello world&apos;) 示例server.py1234567891011121314import socketsock = socket.socket()sock.bind((&apos;127.0.0.1&apos;,8000))sock.listen(5)while True: conn,addr = sock.accept() client_data = conn.recv(1024) print(client_data) conn.sendall(&apos;response info from server&apos;) conn.close() client.py1234567891011import socketsk = socket.socket()sk.connect((&apos;127.0.0.1&apos;,8000))sk.sendall(&apos;请求数据&apos;)server_reply = sk.recv(1024)print(server_reply)sk.close() 三、socket简单示例python中网络编程主要有socket/socketserver和异步相关的Twisted/tornado/ socket这里包括自己用select实现的伪异步IO多路复用 2.1 示例一web浏览器和socket_server交互,浏览器将收到服务端返回的数据123456789101112131415161718192021# socket_server.pyimport socketdef handle_process(client): data = client.recv(1024) print(data.decode(&quot;utf-8&quot;)) client.send(b&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;)#一定要先发送合规请求头 client.send(b&apos;hello worldfdds&apos;)def main(): sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM) sock.bind((&apos;127.0.0.1&apos;,8003)) sock.listen(5) while True: conn,addr = sock.accept() handle_process(conn) conn.close()if __name__ == &apos;__main__&apos;: main() 2.2 示例二socket + select 实现IO多路复用1234567891011121314151617181920212223242526272829303132333435363738394041# socket_server.pyimport selectimport socket# 单线程里同时监听多个socket对象，实现了&quot;伪&quot;并发IO操作： IO多路复用sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8001))sk1.listen(5)sk2 = socket.socket()sk2.bind((&apos;127.0.0.1&apos;,8002))sk2.listen(5)inputs = [sk1,sk2]w_inputs = []while True: # IO多路复用： # select: 内部循环，主动查看 # poll: 内部循环，主动查看 # epoll: 非循环， 异步回调或被动通知 r,w,e = select.select(inputs,w_inputs,[],0.05) for obj in r: if obj in [sk1,sk2]: print(&quot;新的连接来了。。&quot;) conn,addr = obj.accept() inputs.append(conn) else: print(&quot;新的数据来了&quot;) try: data=obj.recv(1024) except Exception as e: data = &quot;&quot; if data: # obj.sendall(data) w_inputs.append(obj) else: inputs.remove(obj) w_inputs.remove(obj) obj.close() for obj in w: obj.sendall(b&apos;ok&apos;) w_inputs.remove(obj) 定义2个socket_client 1234567891011# socket_client01.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8001))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 12345678910# socket_client02.pyimport socketclient = socket.socket()client.connect((&apos;127.0.0.1&apos;,8002))while True: v = input(&quot;&gt;&gt;&gt;&quot;) client.sendall(v.encode()) ret = client.recv(1024) print(&quot;server response:&quot;,ret) 测试服务端并发： 先启动socket_server.py,后启动socket_clientx.py 小结：服务端单线程同时监听了多个socket对象，表明实现了并发连接或IO多路复用，但真正实现了并发吗？当并发边连接有IO请求时还是占住了资源,那么在下一个例子中用线程处理IO请求实现真正的IO并发 4.2 示例三select + 线程实现真正的多并发123456789101112131415161718192021222324import selectimport socketimport threadingdef process_request(conn): while True: v = conn.recv(1024) conn.sendall(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\ndownload page ...&apos;) conn.close() break # 任务处理完成后终止这个线程sk1 = socket.socket()sk1.bind((&apos;127.0.0.1&apos;,8009))sk1.listen(5)inputs = [sk1,]while True: r,w,e = select.select(inputs,[],[],0.05) for obj in r: if obj in [sk1,]: conn,addr = obj.accept() t=threading.Thread(target=process_request,args=(conn,)) t.start() 设计思路可参考 socketserver源代码1234567import socketserverclass MyHandler(socketserver.BaseRequestHandler): def handle(self): pass server = socketserver.ThreadingTCPServer((&apos;127.0.0.1&apos;,8001),MyHandler)server.serve_forever() 4.2 示例四浏览器会自动向服务端请求头的一些数据，process_data()函数对请求头做了结构化处理，同时浏览器请求什么URL，服务端就会返回什么URL, 在此基础上可以用类封装为一个web框架邹形, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import selectimport socketdef process_data(client): data = bytes() while True: try: chunk = client.recv(1024) except Exception as e: chunk = None if not chunk: break data += chunk data_str = str(data, encoding=&quot;utf-8&quot;) header,body = data_str.split(&apos;\\r\\n\\r\\n&apos;,1) header_list = header.split(&apos;\\r\\n&apos;,1) header_dict = &#123;&#125; for line in header_list: value = line.split(&apos;:&apos;, 1) if len(value) == 2: k, v = value header_dict[k] = v else: header_method, header_url, header_protocal = line.split(&quot; &quot;) header_dict[&quot;header_method&quot;] = header_method header_dict[&quot;header_url&quot;] = header_url header_dict[&quot;header_protocal&quot;] = header_protocal return header_dict,bodysock = socket.socket()sock.setblocking(False) # setblocking表示是否设置为阻塞模式,这里是对accept生效sock.bind((&apos;127.0.0.1&apos;,8008))sock.listen(5)# while True:# conn,addr = sock.accept() #setblocking(False)后不阻塞了，有连接就拿连接，没有连接就直接报错# conn.setblocking(False)# conn.recv(1024) # 有数据拿数据，没有数据就直接报错inputs = [sock,]while True: rList,wList,eList = select.select(inputs,[],[],0.05) for client in rList: if client == sock: # 建立新的连接 conn,addr = client.accept() conn.setblocking(False) # 有数据拿数据，没有数据就直接报错 inputs.append(conn) else: header_dict,body=process_data(client) request_url=header_dict[&apos;header_url&apos;] client.send(b&apos;HTTP/1.1 200 OK\\r\\n\\r\\n&apos;) client.send(request_url.encode(&quot;utf-8&quot;)) inputs.remove(client) client.close() 总结对网络的编程就是对服务器，客户端socket对象打开 读写 关闭 的过程。所不同的是对于服务器而言，连接进来了，socket套接字为可读状态，发送数据为可写状态。对于客户端而言，创建连接后socket套接字为可写状态，发送数据为可读状态。掌握socket可读可写状态","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-02-面象对象编程中级","slug":"python-08-02-面象对象编程中级","date":"2017-03-26T13:28:41.000Z","updated":"2018-02-06T09:05:12.632Z","comments":true,"path":"2017/03/26/python-08-02-面象对象编程中级/","link":"","permalink":"http://www.digmyth.com/2017/03/26/python-08-02-面象对象编程中级/","excerpt":"","text":"目录 staticmethod classmethod staticmethod几个魔法方法说明： @classmethod @staticmethod不依赖任何具体的对象来执行类当中是方法，这个方法要么是静态方法， 要么是类方法，要么是属性 12345678910@classmethoddef test_func(cls): # 类方法传入cls参数（类本身） pass@staticmethoddef test_func(): # 静态方法时没有任何变量 passdef test_func(self): # 普通实例方法时传入self参数（实例本身） pass staticmethod语法12345678In [4]: class Foo(object): ...: @staticmethod ...: def spam(x,y,z): # 静态方法时方法定义不写self ...: print(x,y,z) In [5]: In [5]: Foo.spam(1,2,3) # 静态方法属于类的，用类名调用。虽然实例能调用，但不要那样混用,不规范1 2 3 staticmethod用法场景123456789101112131415161718192021In [7]: import timeIn [6]: class Date(object): ...: def __init__(self,year,mon, day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @staticmethod ...: def now(): ...: t = time.localtime() ...: return Date(t.tm_year, t.tm_mon, t.tm_mday) ...: In [8]: d1 = Date(1989, 8,20) # 获得一个对象In [9]: d2 = Date.now() # 这里也能获得一个对象In [10]: d1.dayOut[10]: 20In [11]: d2.dayOut[11]: 12 classmethod@classmethod语法1234567891011In [12]: class C1(object): ....: name = &apos;wxq&apos; ....: @classmethod ....: def test(cls): # 这里需要传入cls, 谁调用谁就是cls ....: print(cls, cls.name) ....: In [14]: C1.test() # 这里cls就是C1&lt;class &apos;__main__.C1&apos;&gt; wxqIn [13]: c = C1() # 正常实例化对象 @classmethod用法场景1234567891011121314151617In [2]: import timeIn [3]: class Date(object): ...: def __init__(self, year, mon,day): ...: self.year = year ...: self.mon = mon ...: self.day = day ...: @classmethod ...: def now(cls): ...: t = time.localtime() ...: return cls(t.tm_year, t.tm_mon, t.tm_mday) ...: In [4]: d = Date.now()In [5]: print(d.year,d.mon, d.day)2017 3 12 staticmethod与classmethod区别的牛逼之处123456789101112131415161718192021root@ubuntu:~# cat method.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @staticmethod def now(): t = time.localtime() return Date(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 method.py &lt;__main__.Date object at 0x7f5514658940&gt; 上面并没有我们想要的结果分析：e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。也就是return Date(t.tm_year, t.tm_mon, t.tm_mday), 实例print时调Date类的__str__方法，故打印return Date(t.tm_year, t.tm_mon, t.tm_mday)后的内存地址，不会打印EuroDate类中定义的__str__方法 123456789101112131415161718192021root@ubuntu:~# cat goodmethod.py #!/usr/bin/env python3import timeclass Date(object): def __init__(self, year,mon,day): self.year = year self.mon = mon self.day = day @classmethod def now(cls): t = time.localtime() return cls(t.tm_year, t.tm_mon, t.tm_mday)class EuroDate(Date): def __str__(self): return &apos;year: %s mon:%s day:%s&apos; % (self.year, self.mon,self.day)e = EuroDate.now()print(e)root@ubuntu:~# python3 goodmethod.py year: 2017 mon:3 day:12 这样才是我们想要的结果，好象参悟了点什么分析:e = EuroDate.now()实例化时，EuroDate类并没有now()方法，但继承自Date类，它会去调父类Date.now()方法实例化。这一点和上面是一致的。但此时return cls(t.tm_year, t.tm_mon, t.tm_mday)中的cls不是Date,而是EuroDate,符合谁调谁就是cls的原则。这样实例化e = EuroDate.now()时print(e)就会去调EuroDate中的__str__方法，得到我们想要的结果 小结：staticmethod与classmethod在一定场景中是有区别的。细节参照上面的例子练习","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-08-06-异常","slug":"python-08-06-异常","date":"2017-03-25T12:39:12.000Z","updated":"2018-02-06T09:07:40.152Z","comments":true,"path":"2017/03/25/python-08-06-异常/","link":"","permalink":"http://www.digmyth.com/2017/03/25/python-08-06-异常/","excerpt":"","text":"目录 1 2 3 12345678910class WxqException(Exception): def __init__(self, msg): self.message = msg def __str__(self): return self.messagetry: raise WxqException(&quot;Game Over!&quot;)except WxqException as e: print(e)","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-09-01-进程和线程","slug":"python-09-01-进程和线程","date":"2017-03-20T14:26:37.000Z","updated":"2018-02-07T07:46:27.544Z","comments":true,"path":"2017/03/20/python-09-01-进程和线程/","link":"","permalink":"http://www.digmyth.com/2017/03/20/python-09-01-进程和线程/","excerpt":"","text":"目录 基本概念 进程 线程 协程 总结 基本概念我们都知道现代操作是支持“多任务”的，什么叫“多任务”呢？。简单地说，就是操作系统可以同时运行多个任务。打个比方一边微信一边QQ。 单核cpu是如何执行“多任务”的？简单的说，就是cpu时间分片，同一时间单核cpu只能执行一个任务，cpu计算时间分片到每个任务交替运行，进程切换或上下文切换时间很短，我们无法感知而己。真正并发执行多任务还要靠多核cpu来完成。 并发执行任务方案， 多进程 多线程 多进程+多线程 Python线程有GIL(Global Interpreter Lock), 这种锁在单核cpu单进程里同一时间只能有一个线程被cpu调度。 那么多线程并发就没有用了吗？计算密集型多进程不就解决了IO密集型多线程不就解决了，同一时间只有一个线程调度，其它时间线程处理IO啊 进程，多进程，进程池进程定义: 程序由指令+数据组成，进程就是这样一种描述的实体(process),简单的认为一个任务就是一个进程。 一个进程至少一个线程，进程间相互隔离（数据不共享），一个子进程挂了并不影响程序运行，当然主进程挂了程序也就挂了，进程切换开销较大。 多进程： 用于解决计算密集型作务的多并发。 进程池： 内部维护一个进程序列，当使用时创建一个新的进程放入池中，再从池中取出来使用，当达到进程池个数时，不再创建进程，请求直接从进程池中取出来用，其它请求只能等待直到进程池中有进程可用。 进程示例：12345678910111213from multiprocessing import Processimport timedef task(arg): time.sleep(arg) print(arg)if __name__ == &apos;__main__&apos;: for i in range(10): p = Process(target=task, args=(i,)) # p.daemon=True p.start() p.join(0.5) print(&quot;end&quot;) 进程池与线程池用法一样，细节不展开1from concurrent.futures import ProcessPoolExecutor 进程锁也是和线程锁一样的用法，细节不展开 进程与线程不同的是进程数据不共享，那如何实现数据交互，方法很多rpc,Queue,pipe,自己实现socket也可以实现 ,借住第三方工具，python本身也可以实现，2种方法： Array (基于C语言数据类型) Manager (基于socket) 1234567891011from multiprocessing import Processdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: v = [] for i in range(10): p = Process(target=task,args=(i, v)) #每个进程数据独立存在 p.start() C语言里Array存的元素是定义时定死的，和python 的列表有很大不同。1234567891011from multiprocessing import Process,Arraydef task(num,li): li[num] = 1 print(list(li))if __name__ == &apos;__main__&apos;: v = Array(&apos;i&apos;, 10) #i在c语言是的int，10表示长度 for i in range(10): p = Process(target=task,args=(i, v)) p.start() Manger().list() Manger().dict()12345678910111213from multiprocessing import Process,Array,Managerdef task(num,li): li.append(num) print(li)if __name__ == &apos;__main__&apos;: # dic = Manager().dict() v = Manager().list() for i in range(10): p = Process(target=task,args=(i, v)) p.start() p.join() 线程，多线程，线程池线程定义：一个任务可以再划分为多个小任务，进程内独立执行这些小任务的最小单元。 一个进程可以有多个线程，线程间共享内存数据，一个线程挂了，其它线程也会崩溃，线程切换开销较进程小一些。 多线程： 用于解决IO密集型任务的多并发 线程池： 内部维护一个线程序列. (与进程池同理) 线程示例123456789101112import threadingimport timedef task(arg): time.sleep(1) print(arg)for i in range(5): t = threading.Thread(target=task,args=(i,)) t.setDaemon(False) # 等子线程完成后再结束主线程 t.start() t.join() # 变为串行,一直等 t.join(3) # 变为串行,只等3秒print(&quot;end&quot;) # 先打印主线程的end,再一起打印子线程的i 自定义线程类示例123456789101112131415161718import threadingimport timeclass MyThread(threading.Thread): def __init__(self,target=None,args=(),**kwargs): super(MyThread,self).__init__(target=None,args=(),**kwargs) self.target =target self._args = args def run(self,): return self.target(*self._args)def task(arg): time.sleep(1) print(arg)t = MyThread(target=task, args=(123,))t.run()print(&quot;end&quot;) 线程锁线程共享数据，共同修改一份数据是有问题的，pycharm环境下可能看不出效果，cmd命令行下可以看到数据修改混乱了。123456789101112import threadingimport timev=10def task(arg): global v v-=1 print(v)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 数据修改乱了，就要加锁了：普通锁，递归锁RLock,事件锁、条件锁，互斥锁普通锁 1234567891011import threadingimport timev=10lock = threading.Lock()def task(arg): lock.acquire() # 申请锁 global v v-=1 print(v) lock.release() # 释放锁 普通锁不能开多重没锁，如果是下面这种设置会造成死锁123456# 死锁lock = threading.Lock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 递归锁RLock递归锁RLock可以开多重锁，不会造成死锁123456# 不会死锁lock = threading.RLock()lock.acquire() # 申请锁lock.acquire() # 申请锁lock.release() # 释放锁lock.release() # 释放锁 信号量BoundedSemaphore多个线程同时使用锁，当然这里3个同时修改数据也可能混乱。 12345678910111213141516import threadingimport timev=10lock = threading.BoundedSemaphore(3)def task(arg): lock.acquire() # 申请锁 time.sleep(1) global v v-=1 print(v) lock.release() # 释放锁for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()print(&quot;end&quot;) 事件锁条件式批量解锁12345678910111213141516import threadingimport timelock = threading.Event()def task(arg): time.sleep(1) lock.wait() #锁住所有线程 print(arg)for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = input(&quot;&gt;&gt;&gt;&quot;) if value == &apos;1&apos;: lock.set() # 解锁 条件锁123456789101112131415161718import threadingimport timelock = threading.Condition()def task(arg): time.sleep(1) lock.acquire() lock.wait() #锁住所有线程 print(&apos;线程&apos;,arg) lock.release()for i in range(10): t=threading.Thread(target=task,args=(i,)) t.start()while True: value = int(input(&quot;&gt;&gt;&gt;&quot;)) lock.acquire() lock.notify(value) # 传几就解几个锁 lock.release() 线程池pool.submit(download,url)取出一个线程执行任务，返回future对象future.add_done_callback(write)future对象有一个add_done_callback方法，传入我们自己写的回调函数write, future对象也会自动传给write回调函数。download 函数的返回值=future.result() 12345678910111213141516171819202122232425import requestsfrom concurrent.futures import ThreadPoolExecutordef write(future): response = future.result() f=open(&apos;xx.txt&apos;,&apos;wb+&apos;) f.write(response.content) f.close()url_list = [ &apos;http://www.baidu.com&apos;, &apos;http://www.digmyth.com&apos;, &apos;http://www.github.com&apos;,]def download(url): response=requests.get(url) print(&quot;得到结果&quot;,url) return responsepool = ThreadPoolExecutor(2)for url in url_list: print(&quot;开始请求：&quot;,url) future=pool.submit(download,url) # 池中取一个连接 # ruture自动传给write调函数:write(future) future.add_done_callback(write) 封装1234567891011121314import requestsfrom concurrent.futures import ThreadPoolExecutordef download(url): response=requests.get(url) return responsedef run(url_list=None): pool = ThreadPoolExecutor(2) for item in url_list: url = item[&apos;url&apos;] callback = item[&apos;callback&apos;] future=pool.submit(download, url) future.add_done_callback(callback) 1234567891011121314151617def f1(future): print(future.result().content)def f2(arg): print(&quot;future&quot;)def f3(future): print(&quot;future&quot;)url_list = [ &#123;&apos;url&apos;:&apos;http://www.baidu.com&apos;,&apos;callback&apos;:f1&#125;, &#123;&apos;url&apos;:&apos;http://www.digmyth.com&apos;,&apos;callback&apos;:f2&#125;, &#123;&apos;url&apos;:&apos;http://www.github.com&apos;,&apos;callback&apos;:f3&#125;,]import nb_threadnb_thread.run(url_list) 协程协程定义： 协程不同于进程，线程对于操作系统可见且是一种资源，协程只是代码层面的来回切换，对于操作系统不可见且并非是一种资源。 1pip3 install greenlet # python中原生协程 单独协程没什么用，结合协程切换特性+IO+select+socket可以编写出牛逼的异步IO模块或异步非阻塞框架 gevent就是基于greenlet+libvent+IO二次加工实现的python异步模块1pip3 instal gevent 示例：和多线程不同，这里是单线程并发IO任务123456789101112import geventimport requestsdef func(url): response = requests.get(url) print(response.url)gevent.joinall([ gevent.spawn(func,&apos;http://www.baidu.com&apos;), gevent.spawn(func,&apos;http://www.digmyth.com&apos;), gevent.spawn(func,&apos;http://www.github.com&apos;),]) 当然我们也可以自己用select来写IO多路复实现并发 总结即使有了多进程多线程或进程池，线程池处理多任务，但如果一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型也只能处理一个任务，无法并发执行。 还好现代操作系统支持异步IO，这是一个很牛逼的东东，单进程单线程模型并发执行任务得以实现。这种称为事件驱动模型，Nginx就是支持异步IO的Web服务器。 单线程的异步编程或异步IO多路复用会是趋势，可以基于事件驱动编写高效的多任务程序。Twisted,Tornado之所以牛逼，就是因为它们的高性能也是基于事件驱动，基于异步IO多路复用。","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-Django-01-入门","slug":"web-django-01-入门","date":"2017-03-20T12:26:37.000Z","updated":"2018-01-18T03:43:21.948Z","comments":true,"path":"2017/03/20/web-django-01-入门/","link":"","permalink":"http://www.digmyth.com/2017/03/20/web-django-01-入门/","excerpt":"","text":"目录 什么是WSGI 什么是mvc/mtv模型 orm如何工作 Django安装 一、什么是WSGI对浏览器而言，远端是服务器程序和应用程序，而服务器程序就是socket Server,用于接收用户请求，解析用户请求，响应用户请求，这部份工作永远不变的。可变的是应用程序，那么服务器程序与应用程序解耦偶就有了必要。 接收用户请求，解析用户请求，响应用户请求这些封装为WSGI接口简化开发。 定义web app与web server之间接口解耦规则就是WSGI. Python标准库提供的独立wsgi服务器称为wsgiref 二、什么是mvc/mtv模型init.py: 告诉python它不是一个目录文件夹而是一个包 mvc: model(数据库交互) view(模板) control (业务处理逻辑) mtv: model（数据库交互）view(视图，业务逻辑处理) templates(模板） 注： templates模板可以放在项目下或各个app下 三、orm如何工作一个类对应一张表一个类对象对应一行表记录一个类属性对应记录字段值 自动路由： 反射应用，自定义扩展 四、Django安装安装Djangopip3 install django pika pymysql 查看安装pip3 list 创建一个Django项目cd /optmkdir /opt/templates # 用于整个项目存放模板文件django-admin startproject Mysite #创建一个项目 生成目录结构如下123456789101112/opt/Mysite - Mysite # 还有一个与项目同名的文件夹/opt/Mysite/Mysite，对整个程序进行配置 - __init__.py - settings.py # 配置文件 - urls.py # URL对应关系 - wsgi.py # 遵循WSGI规范，一般使用 uwsgi + nginx - manage.py # /opt/Mysite/manage.py管理Django程序：如下 - python manage.py runserver # 运行程序 - python manage.py startapp xx # 创建app # Django的orm框架 - python manage.py makemigrations - python manage.py migrate 创建一个应用：12345678910cd /opt/Mysitepython manage.py startapp app01生成/opt/Mysite/app01目录结构如下：/opt/Mysite/app01/__init__.py # 说明app01是一个包/opt/Mysite/app01/migrations # django orm框架，修改表结构的操作记录（差异化）/opt/Mysite/app01/admin.py # Django提供的后台管理程序/opt/Mysite/app01/apps.py # 配置当前app/opt/Mysite/app01/models.py # 数据库交互：orm-写指定的类，通过命令可以创建数据库结构/opt/Mysite/app01/views.py # 视图函数，业务逻辑处理/opt/Mysite/app01/test.py # 单元测试 初始练习：12Mysite/Mysite/urls.py (导入from blog import views及编写业务逻辑url(r&apos;^index&apos;,views.index)) ---&gt; 练习各种例子。。。 URLS别名用法：12345url(r&apos;^/login$&apos;, views.login, name=&quot;LOGIN&quot;)那么前端templates中的html代码需要用别名方式，语法如下：&lt;form action=&quot;/login/&quot; method=&quot;post&quot;&gt; 改为&lt;form action=&quot;&#123;% url &apos;LOGIN&apos; %&#125;&quot; mothod=&quot;post&quot;&gt; 1234567891011121314151617181920212223urls url(正则表达式 视图函数，参数，别名）正则这里匹配到的或者说捕获到的数据都是字符串类型，post提交的数据get post都可以向server端发送数据，区别是提交数据的方式不同：格式如下get ?id=2&amp;page=3post 数据在body里 无命名分组 位置参数有命名分组 关键字参数--在函数定义时，只能用命名的key，这一点是要注意的获取登录首页是以GET方法提交 -----GET用户名，密码表单submit时是以POST方式提交 -----POST时间表达：1 时间戳2 字符串3 结构化时间 五、Django生命周期 5.1 路由系统URLS123456789101112131 /index/ -&gt; def index(request)2 /detail-(\\d+)/ -&gt; def detail(request, nid) /detail-(?P&lt;nid&gt;\\d+)/ -&gt; def detail(request,nid)3 /index/ -&gt; def index(request) name=n1 使用别名生成URL： 模板语言： &#123;% url n1 %&#125; -&gt; /index/ 视图函数：（需要导入reverse模块） reverse(name=&quot;n1&quot;) --&gt; /index/ 4 /web/ include(&quot;app01.urls&quot;) 5.2 视图函数1 函数至少一个参数 request2 request12345678request.method # 请求方法request.GET # 请求方法为GET的数据request.POST # 请求方法为POST的数据 注： 如何获取request.post数据的呢，如果有请求头 （Content-Type:application/x-www-form-urlencoded; charset=UTF-8）， 则从request.body里取出post数据request.body # 请求时发送的所有数据request.FILES # 请求时发送的文件数据 注意:form表单提交方法只能是get或post当提交文件时特别注明enctype=&quot;multipart/form-data&quot;12345&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;filename&quot;&gt;&lt;/form&gt; 3 返回方式123HttpResponse()render(request,)redirect() 5.3 ORM操作各数据库操作是一种外对sql api接口的封装 第一层封装：数据库存储最底层是db驱动，对外开放SQL API用于操作数据库 第二层封装：python3 中操作mysql数据库的库为pymysql,是对SQL API之上的一层封装 第三层封装: orm操作是最高级封装，pymsql之上的一层封装 最终：orm翻译成pymsql,pymysql再翻译成sql语句 Django 数据库操作具体语法介绍请参考 5.4 模板引警Django对template中html的渲染有着一套语法,我有专门一篇博客讲解模板渲染语法渲染语法博客参考 1 基本方法12345678910111213return render(request, &quot;x.html&quot;, &#123;&apos;k&apos;:[1,2,3,4], &quot;d&quot;:&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;&#125;) x.html &#123;&#123; k.2 &#125;&#125; &#123;% for i in d %&#125; &#123;&#123; i &#125;&#125; --key &#123;% endfor %&#125; &#123;% for k,v in d.items %&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125; &#123;% endfor %&#125; 2 函数 Django 提供的函数:12simple_tag 可以有多个参数filter 只能有2个参数，并且可以做条件语句的条件","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-08-03-面象对象编程高级","slug":"python-08-03-面象对象编程高级","date":"2017-03-15T14:28:41.000Z","updated":"2018-02-21T04:38:02.994Z","comments":true,"path":"2017/03/15/python-08-03-面象对象编程高级/","link":"","permalink":"http://www.digmyth.com/2017/03/15/python-08-03-面象对象编程高级/","excerpt":"","text":"目录(魔法方法) 类内置方法 构造方法 @property getattr系列 getitem系列 metaclass系列 importlib 字符串形式运行函数 内置方法1234567891 Foo.__name__ 字符串形式的类名2 Foo.__doc__ Foo的文档字符串3 Foo.__bases__ 父类组成的元组4 Foo.__class__ Foo类所在5 Foo.__bases__ Foo的所有父类构成的元组7 Foo.__module__ Foo类所在模块8 obj.__class__ obj对象所在的类 9 dir(Foo)` Foo类所有属性名组成的列表10 Foo.__dict__ Foo类所在属性组成的字典 构造方法12__init__ 构造方法，通过类创建对象时自动触发执行__del__ 析构方法，当对象在内存中被释放时自动触发执行 __str__ __repr__ __call__123__str__ 对象打印时自动触发__repr__ 对象直接回车自动触发（仅供程序员使用）__call__ 对象后面加括号调用时自动触发 @property属性方法把一个类方法变为属性来用12345678910111213141516171819class Dog(object): def __init__(self,name): self.name = name self.__food = None @property def eat(self): print(&quot;%s is eating %s&quot; %(self.name, self.__food)) @eat.setter # 赋值调用属性，调这个方法 def eat(self,food): print(&quot;set to food:&quot;,food) self.__food = food @eat.deleter # 删除属性 def eat(self): del self.__food print(&quot;Delete the finished&quot;)obj=Dog(&apos;w..w&apos;)obj.eat = &quot;fish&quot; # 自动调用@eat.setter赋值obj.eat property 原理就是property类里定义了__get__() __set__() __delete__()方法，是描述符的运用123456定义： 描述符就是将某种特殊类的实例指派给另一个类的属性，__get__ __set__ __delete__实现了 描述符协议，用于property描述符编写。一种调用方式之一： property(fget=None, fset=None, fdel=None, doc=None)__get__(self, instance, owner) #用于访问属性，它返回属性的值__set__(self, instance, value) #将在属性分配操作中调用，不返回任何内容__delete__(self, instance) # 控制删除操作，不返回任何内容 getattr setattr hasattr反射系列用于通过字符串找到函数或方法 示例：1234567891011121314151617181920def func1(self): print(self.name,&apos;say Hi&apos;) return &quot;func1&quot;class Foo(object): def __init__(self): self.name = &apos;wxq&apos; def func2(self): print(self.name) return &quot;method func2&quot;obj = Foo()choice = input(&quot;请输入调用方法名:&quot;)if hasattr(obj,choice): # 实例中有这个方法，执行实例中的方法 func=getattr(obj,choice) func() # 绑定方法自动传入self参数else: # 动态加载函数封装到类中 setattr(obj,choice,func1) func = getattr(obj,choice) func(obj) # 函数时需手动传入self参数 __getattr__ __setattr__ __hasattr__ __delattr__ 进行__dict__拦截一般来讲，obj.name = &#39;wxq&#39;python自动基于self.__dict__赋值取值操作，无需关心，这里只是对这种自动操作进行拦截，用于高级代码重写操,self.xx不存在变量xx时先访问__getattribute__,再访问__getattr__,默认返回None,self.xx存在变量xx时不会访问getattr，直接取出值返回，self.name=’wxq’赋值先访问setattr`方法，没有该方法就用默认内置. 示例一12345678910111213141516171819class Foo(): def __init__(self): pass def __getattribute__(self, item): print(&apos;__getattribute__&apos;) return object.__getattribute__(self,item) def __getattr__(self, item): print(&apos;__getattr__&apos;) return &quot;%s variable don&apos;t exists&quot; % item def __setattr__(self, item, value): print(&apos;__setattr__&apos;) self.__dict__[item] = &apos;test&apos;+valueobj=Foo()obj.name = &apos;wxq&apos;print(obj.name) 打印123__setattr____getattribute__testwxq 示例二： 当没有.xx变量属性时会访问__getattr__方法12345678910111213class Foo(): def __init__(self): pass def __getattr__(self, item): if item == &apos;name&apos;: return &apos;wxq&apos; elif item == &apos;age&apos;: return 25obj = Foo()print(obj.age) 示例三：123456789101112class Foo(): def __init__(self,path=&apos;&apos;): self.path = path def __getattr__(self, item): return Foo(&quot;%s/%s&quot;%(self.path, item)) def __str__(self): return self.pathobj = Foo(&quot;www&quot;).bai.comprint(obj) # 打印 www/bai/com __getitem__ __setitem__ __delitem__用于索引操作，如字典形式：obj[&#39;k1&#39;]如Session设置 request.session[&#39; user_info&#39;] = &#39;user&#39; 1234567891011121314151617181920class Foo(object): def __init__(self,attrs=&#123;&#125;): self.attrs = attrs def __getitem__(self, key): print(&apos;__getitem__&apos;,key) return self.attrs.get(key) def __setitem__(self, key, value): print(&apos;__setitem__&apos;,key,value) self.attrs[key] = value def __delitem__(self, key): print(&apos;__delitem__&apos;,key) del self.attrs[key] print(self.attrs) obj = Foo(&#123;&apos;name&apos;:&apos;wxq&apos;&#125;)obj[&apos;k1&apos;] = &apos;v1&apos; # 设置，自动触发执行 __setitem__print(obj.attrs)print(obj[&apos;k1&apos;]) # 获取值，自动触发执行 __getitem__del obj[&apos;name&apos;] # 触发__delitem__ __new__和 __metaclass____new__与实例化对象相关123456789class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): # 其实是运行了__new__(),不再调用__init__()方法了 print(&quot;Foo __new__&quot;)obj = Foo(&apos;wxq&apos;) # 打印 Foo __new__,这里obj是None 这里可以看出实例化是先运行的__new__()方法，如果__new__()没有返回值，Foo.__init__()就不会运行了，obj也就为None了要想运行Foo.__init__(), 那么__new__()必须有返回值1234567891011class Foo(): def __init__(self,name): print(&quot;Foo __init__&quot;) self.name = name def __new__(cls, *args, **kwargs): print(&quot;Foo __new__&quot;) return object.__new__(cls)obj = Foo(&apos;wxq&apos;)print(obj) 总结实例化过程 看起来__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。 __metaclass__与类的创建相关12print type(f) # 输出：&lt;class &apos;__main__.Foo&apos;&gt; 表示，obj 对象由Foo类创建print type(Foo) # 输出：&lt;type &apos;type&apos;&gt; 表示，Foo类对象由 type 类创建 培析类 的创建过程123456789def func(self): print(&apos;hello fgf&apos;)Foo = type(&apos;Foo&apos;,(object,), &#123;&apos;talk&apos;: func&#125;)# type第一个参数：类名# type第二个参数：当前类的基类# type第三个参数：类的成员f = Foo()f.talk() 12345678910def func(self): print(&quot;hello %s %s&quot;%(self.name,self.age))def __init__(self,name,age): self.name = name self.age = ageFoo = type(&apos;Foo&apos;,(object,),&#123;&apos;func&apos;:func, &apos;__init__&apos;:__init__&#125;) # 用type创建出Foo这个对象（类）f = Foo(&quot;wxq&quot;,25) # 再用Foo对象创建f对象f.func() Metaclass元类创建过程1234567891011121314151617181920212223242526272829#print(globals())class MyType(type): def __init__(self,*args,**kwargs): print(&quot;MyType __init__&quot;,self,*args,**kwargs) def __call__(self, *args, **kwargs): print(&quot;MyType __call__&quot;,self, *args, **kwargs) obj = self.__new__(self) self.__init__(obj, *args, **kwargs) obj.age= 25 return obj def __new__(cls, *args, **kwargs): print(&quot;MyType __new__&quot;,cls, *args, **kwargs) obj = type.__new__(cls, *args, **kwargs) return objclass Foo(object,metaclass=MyType): def __init__(self, name): self.name = name print(&quot;Foo __init__&quot;) def __call__(self, *args, **kwargs): print(&quot;call...&quot;)#print(globals()f = Foo(&quot;test&quot;)print(f.name,f.age) 总结Type创建类过程 前面实例化对象的结论是__new__什么也没有干，只是有了一块内存地址或对象地址用于返回给__init__()，再__init__()执行。那么type创建Foo对象(类)也是这个流程，因为是Type实例化Foo类，MyType执行__new__创建Foo,返回给MyType.__init__()执行，当f=Foo() 实例化对象也就是加()调用MyType.__call__()方法,__call__()方法来执行实例化，实例化过程又是执行Foo.__new__()返回给Foo.__init__()，完成实例化。 importlib字符串模块导入123456import importlibx=&apos;scrapy.crawler.CrawlerProcess&apos;model_path,model_name = x.rsplit(&apos;.&apos;,maxsplit=1)md=importlib.import_module(model_path) # 字符串形式模块导入cls=getattr(md,model_name)print(cls) 字符串形式运行函数1 eval(字符串)1234def func(arg): return argeval(&apos;func(&quot;hello wolrd&quot;)&apos;) Tornado编写session组件会用到这个知识点，结合工厂设计模式 2 eval获取函数1234567def f1(arg): print(arg)x=&quot;f1&quot;func=eval(x) # 获取函数func(&quot;wxq&quot;) 3 sys.modules获取函数1234567891011import sysdef process(arg): return argf=&quot;process&quot;func=getattr(sys.modules[__name__], f) # 获取函数ret=func(&apos;hello world&apos;)print(ret) 4 运用类中getattr123456789class Foo(): def f1(self): return &quot;hello world&quot; obj = Foo()x=&quot;f1&quot;func=getattr(obj,x)print(func()) &lt;完结&gt;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-06-01-正则表达式","slug":"python-06-01-正则表达式","date":"2017-03-01T09:03:01.000Z","updated":"2017-02-27T08:36:47.909Z","comments":true,"path":"2017/03/01/python-06-01-正则表达式/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-06-01-正则表达式/","excerpt":"","text":"目录 基础 进阶 re模块 分组 切分字符串 编译compile 贪婪模式匹配 基础元字符：(Meta-Characters)是正则表达式中具有特殊意义的专用字符比如：\\d表示数字 \\s表示空格 \\w表示[a-zA-Z0-9_]大小写字母数字下划线元字符表 链接字符类：又字符集，一组可以匹配[ ]中字符串的字符12345678910111213141516171819202122. # 任意单个字符[] # 集合内[^] # 集合内取反? # 表示前一个字符长度为0或1+ # 表示前一个字符长度为1或1以上* # 表示前一个字符长度为任意，等同于?+的并集&#123;m&#125;&#123;m,n&#125;&#123;0,n&#125;&#123;m,&#125;^$pat1|pat2() # 分组\\b # 嘛意思[0-9] \\d[0-9a-zA-Z_] \\w\\s # 任意空白字符\\nna*? # 这里？使用非贪婪模式（正则表达式默认工作在贪婪模式，尽可能多的去匹配）(*|+|?|&#123;&#125;)?` # 使用非贪婪模式match # 只匹配首项以开头的，与shell中^相同 进阶re模块12345678910111213141516171819202122232425262728293031&gt;&gt;&gt; re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; res = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; print(res)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt; # 没有匹配到打印为None&gt;&gt;&gt; res.group() # 匹配到时用.group()取出匹配结果 &apos;wxq&apos;&gt;&gt;&gt; &quot;I love wxq &quot;.find(&apos;wxq&apos;)7&gt;&gt;&gt; re.search(r&apos;.&apos;, &apos;I love digmyth.com&apos;) # 匹配任意单个字符，所以匹配到&quot;I&quot;&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\.&apos;, &apos;I love digmyth.com&apos;) # 只匹配.需要转义&lt;_sre.SRE_Match object; span=(14, 15), match=&apos;.&apos;&gt;&gt;&gt;&gt; re.search(r&apos;wx.&apos;, &apos;I love wxq.com&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;wxq&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d&apos;, &apos;I love 123 wxq&apos;) # 匹配单个数字&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt; &gt;&gt;&gt; re.search(r&apos;\\d\\d\\d&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 10), match=&apos;123&apos;&gt;&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.10&apos;) # 少一位匹配不到&gt;&gt;&gt; re.search(r&apos;\\d\\d\\d.\\d\\d\\d.\\d\\d\\d.\\d\\d\\d&apos;, &apos;192.168.100.100&apos;) # 匹配到&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.100.100&apos;&gt; 12345678910111213141516171819202122232425262728293031323334353637&gt;&gt;&gt; re.search(r&apos;[aeiou]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(3, 4), match=&apos;o&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[aeiouAEIOU]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[a-z]&apos;, &apos;I love wxq&apos;)&lt;_sre.SRE_Match object; span=(2, 3), match=&apos;l&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[2-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(8, 9), match=&apos;2&apos;&gt; &gt;&gt;&gt; re.search(r&apos;[0-9]&apos;, &apos;I love 123 wxq&apos;)&lt;_sre.SRE_Match object; span=(7, 8), match=&apos;1&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3&#125;c&apos;, &apos;abbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 5), match=&apos;abbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;ab&#123;3,10&#125;c&apos;, &apos;abbbbbc&apos;)&lt;_sre.SRE_Match object; span=(0, 7), match=&apos;abbbbbc&apos;&gt;&gt;&gt;&gt; re.search(r&apos;[0-255]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;1&apos;&gt;&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[0-2][0-5][0-5]&apos;, &apos;188&apos;) # 没有匹配到&gt;&gt;&gt; &gt;&gt;&gt; re.search(r&apos;[01]\\d\\d|2[0-2]\\d|25[0-5]&apos;, &apos;188&apos;)&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;188&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5]))&apos;, &apos;192.168.1.1&apos;) # 只匹配到192&lt;_sre.SRE_Match object; span=(0, 3), match=&apos;192&apos;&gt;&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5])\\.&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;([01]\\d\\d|2[0-4]\\d|25[0-5]\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]\\d\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]\\d\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配不到&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.1.1&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 11), match=&apos;192.168.1.1&apos;&gt; ip地址匹配最终完美写法：12345&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d?\\d|2[0-4]\\d|25[0-5])&apos;, &apos;192.168.240.240&apos;) # 匹配有误细看&lt;_sre.SRE_Match object; span=(0, 14), match=&apos;192.168.240.24&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[0-1]?\\d?\\d)&apos;, &apos;192.168.240.240&apos;) # 这个写法完美&lt;_sre.SRE_Match object; span=(0, 15), match=&apos;192.168.240.240&apos;&gt; [0-255]表示的是0，1，2后跟上55[0-2][0-5][0-5]只是三个占位上的数字，没有个位，百位这样的区分，当然不能匹配188了 1234567891011121314&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;3&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 重复&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1, 5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 注意没有空格&gt;&gt;&gt; re.search(r&apos;(daemon_D)&#123;1,5&#125;&apos;, &apos;daemon_Ddaemon_Ddaemon_D&apos;) # 匹配到了&lt;_sre.SRE_Match object; span=(0, 24), match=&apos;daemon_Ddaemon_Ddaemon_D&apos;&gt;&gt;&gt;&gt; s = &quot;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt;&quot;&gt;&gt;&gt; re.search(r&apos;&lt;.+?&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;&lt;html&gt;&apos;&gt;&gt;&gt;&gt; re.search(r&apos;&lt;.+&gt;&apos;, s)&lt;_sre.SRE_Match object; span=(0, 50), match=&apos;&lt;html&gt;&lt;title&gt;I love www.digmyth.com&lt;/title&gt;&lt;/html&gt; 12345&gt;&gt;&gt; re.findall(r&apos;\\bFishC\\b&apos;, &quot;FishC.com!FishC_com!(FishC)&quot;) # 待续。#^#[&apos;FishC&apos;, &apos;FishC&apos;]&gt;&gt;&gt; &gt;&gt;&gt; re.findall(r&apos;\\w&apos;, &quot;牛X工作室Love_FishC_com!)&quot;)[&apos;牛&apos;, &apos;X&apos;, &apos;工&apos;, &apos;作&apos;, &apos;室&apos;, &apos;L&apos;, &apos;o&apos;, &apos;v&apos;, &apos;e&apos;, &apos;_&apos;, &apos;F&apos;, &apos;i&apos;, &apos;s&apos;, &apos;h&apos;, &apos;C&apos;, &apos;_&apos;, &apos;c&apos;, &apos;o&apos;, &apos;m&apos;] re-replace/sub的例子如下字符串的strip方法只能去前后空格、字符串的replace方法是字符替换、re.sub方法也是替换功能。123456789&gt;&gt;&gt; name = &apos; w x q&apos;&gt;&gt;&gt; name.strip()&apos;w x q&apos;&gt;&gt;&gt; name.replace(&apos; &apos;, &apos;&apos;)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; re.sub(&apos;wxq&apos;, &apos;love&apos;, &apos;I wxq wxq wxq&apos;, count=2)&apos;I love love wxq&apos; 分组eg1:123&gt;&gt;&gt; name = re.search(r&apos;wxq&apos;, &apos;I love wxq&apos;)&gt;&gt;&gt; name.group() # .group()打印匹配对象&apos;wxq&apos; eg2:12345678910&gt;&gt;&gt; s = &apos;aa bb cc dd &apos;&gt;&gt;&gt; p = re.compile(r&apos;\\w+\\s+\\w+&apos;) # 匹配单词空格单词这样的分组&gt;&gt;&gt; p.findall(s) # 匹配分为了2组[&apos;aa bb&apos;, &apos;cc dd&apos;]&gt;&gt;&gt; p = re.compile(r&apos;(\\w+)\\s+\\w+&apos;) # 只匹配单词空格单词中括号那个单词&gt;&gt;&gt; p.findall(s)[&apos;aa&apos;, &apos;cc&apos;]&gt;&gt;&gt; p = re.compile(r&apos;((\\w+)\\s+\\w+)&apos;) # 先打印外括号，后打印内括号，先后内容组成元组，最后列表呈现&gt;&gt;&gt; p.findall(s)[(&apos;aa bb&apos;, &apos;aa&apos;), (&apos;cc dd&apos;, &apos;cc&apos;)] eg3:12&gt;&gt;&gt; re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;(?P&lt;birthday&gt;[0-9]&#123;4&#125;))&quot;, &quot;371481199306143242&quot;).groupdict()&#123;&apos;province&apos;: &apos;3714&apos;, &apos;birthday&apos;: &apos;1993&apos;, &apos;city&apos;: &apos;811993&apos;&#125; 切分字符串re.split用法split 以至少2个空格为分隔, 两种写法:re.split(r’\\s{2,}’, str)re.split(r’\\s\\s+’，str) 12345&gt;&gt;&gt; import re&gt;&gt;&gt; re.split(r&apos;\\s&#123;2,&#125;&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;) # 以2个空隔分割字符串返回列表[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;]&gt;&gt;&gt; re.split(r&apos;\\s\\s+&apos;, &apos;17:19:28 up 2:00, 3 users, load average: 0.01, 0.03, 0.05&apos;)[&apos;17:19:28 up&apos;, &apos;2:00,&apos;, &apos;3 users,&apos;, &apos;load average: 0.01, 0.03, 0.05&apos;] 12345678910111213# cat whodata.txt 17:24:49 up 2:05, 3 users, load average: 0.00, 0.02, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/1 192.168.109.1 15:33 9.00s 0.17s 0.04s python3&gt;&gt;&gt; import re&gt;&gt;&gt; with open(&apos;whodata.txt&apos;, &apos;r&apos;) as f:... for line in f:... res = re.split(&apos;\\s\\s+&apos;, line)... print(res)... [&apos; 17:24:49 up&apos;, &apos;2:05,&apos;, &apos;3 users,&apos;, &apos;load average: 0.00, 0.02, 0.05\\n&apos;][&apos;USER&apos;, &apos;TTY&apos;, &apos;FROM&apos;, &apos;LOGIN@&apos;, &apos;IDLE&apos;, &apos;JCPU&apos;, &apos;PCPU WHAT\\n&apos;][&apos;root&apos;, &apos;pts/1&apos;, &apos;192.168.109.1&apos;, &apos;15:33&apos;, &apos;9.00s&apos;, &apos;0.17s&apos;, &apos;0.04s python3\\n&apos;] eg1:123456789101112&gt;&gt;&gt; re.sub(&apos; &apos;, &apos;&apos;, name)&apos;wxq&apos;&gt;&gt;&gt; p = re.compile(&apos;\\.&apos;)&gt;&gt;&gt; p.split(&apos;www.digmyth.com&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; url = &apos;www.digmyth.com&apos;&gt;&gt;&gt; re.compile(&apos;\\.&apos;).split(url)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;]&gt;&gt;&gt; re.sub(&apos;www&apos;, &apos;mail&apos;, url)&apos;mail.digmyth.com&apos;&gt;&gt;&gt; url.split(&apos;.&apos;)[&apos;www&apos;, &apos;digmyth&apos;, &apos;com&apos;] eg2:123456789&gt;&gt;&gt; import re&gt;&gt;&gt; name = &apos;hello world&apos;&gt;&gt;&gt; str_a, str_b = re.split(r&apos;\\s+&apos;, name)&gt;&gt;&gt; str_a, str_b(&apos;hello&apos;, &apos;world&apos;)&gt;&gt;&gt; str_a&apos;hello&apos;&gt;&gt;&gt; str_b&apos;world&apos; eg3:123456789101112root@ubuntu:~# cat put_split.py #!/usr/bin/env python3import osimport reinput = input(&quot;enter you str: &quot;).strip()cmd, path = re.split(r&apos;\\s+&apos;, input)print(cmd.strip())print(path.strip())root@ubuntu:~# python3 put_split.py enter you str: put /root/demo.txtput/root/demo.txt 编译compile正则表达式工作流程： 检测语法–&gt; 编译–&gt; 匹配当一个正则表达式多次调用时，建议预先编译好，后续直接用于匹配以提高效率 123456789&gt;&gt;&gt; p = re.compile(r&apos;[A-Z]&apos;)&gt;&gt;&gt; type(p)&lt;class &apos;_sre.SRE_Pattern&apos;&gt;&gt;&gt;&gt; p.search(&quot;I Love www.DigMyth.Com&quot;)&lt;_sre.SRE_Match object; span=(0, 1), match=&apos;I&apos;&gt;&gt;&gt;&gt; p.findall(&quot;I LLove www.DigMyth.Com&quot;)[&apos;I&apos;, &apos;L&apos;, &apos;L&apos;, &apos;D&apos;, &apos;M&apos;, &apos;C&apos;] 贪婪模式匹配","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-07-01-面象对象编程初级","slug":"python-07-01-面象对象编程初级","date":"2017-03-01T00:28:28.000Z","updated":"2018-02-06T09:03:55.804Z","comments":true,"path":"2017/03/01/python-07-01-面象对象编程初级/","link":"","permalink":"http://www.digmyth.com/2017/03/01/python-07-01-面象对象编程初级/","excerpt":"","text":"目录 相关概念 创建类和对象 面向对象内置变量 继承、封装、多态 抽象方法 相关概念定义： 面向对象编程(oop=object-oriented programming): 相对于面对过程编程，它只是一种编程范示。 状态和转换这种状态的操作: 状态其实就是数据，转换这种状态的操作其实就是方法 类：将同一种具体的共同特性抽象出来数据：如变量方法：函数：操作变量引用的数据的代码方法是类的组成部份，属性也是在类中定义的, 但数据是在类实例化时赋值的. 对象是类的实例，对象的某个方法的调用理解为对其发消息，或接口调用同一个类的所有对象都能接收相同的消息，也就是同种方法依赖 一个类中的方法操作另一个类的对象聚合 类A的对象包含类B的对象继承：描述特殊或具体与一般性的关系面向对象的模型机制有3原则：封装，继承，多态 类或类成员有数据和方法一个类的行为和接口是通过类的方法来定义的对象是类的实例自定义类—实例化—–对象–对象间的操作—消息传递这里消息就是调用请求 创建类和对象1234567891011121314class Foo(): data=&apos;hello world&apos; #类数据变量作用于所有实例 def __init__(self,name=&apos;default&apos;): # 构造器 self.name = name # 实例变量作用于调用对象或调用实例 def set_score(self,value): # 类方法属性 self.score = value def get_score(self): return self.scoreobj = Foo(&apos;wxq&apos;) obj.set_score(100)print(obj.get_score()) 可以给一个对象添加属性123456class Foo(): data = &apos;default data&apos;obj = Foo()obj.name = &apos;wxq&apos;print(obj.name) 可以把某个方法绑定给一个实例或 一个类，当绑定给类时，这个方法对此类的所有实例都生效方法绑定给一个实例12345678910def set_age(self,age): self.age = age class Foo(): data = &apos;default data&apos; from types import MethodTypeobj.set_age = MethodType(set_age, obj)obj.set_age(20) 方法绑定给一个类12345678910111213from types import MethodTypeclass Foo(): data = &apos;default data&apos;def set_age(self,age): self.age = ageFoo.set_age = MethodType(set_age, Foo)obj = Foo()obj.set_age(23)print(obj.age) 面向对象内置变量1 类变量作用于所有对象或实例2 实例变量作用于调用对象或调用实例3 __init__() 构造器 __del__() 析构器4 Foo.__name__ 字符串形式的类名5 Foo.__doc__ Foo的文档字符串6 Foo.__bases__ Foo的所有父类构成的元组 7Foo.moduleFoo类所在模块 8obj.classobj对象所在的类 9dir(Foo)` Foo类所有属性名组成的列表1[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;data&apos;] 10 Foo.__dict__Foo类的所有属性组成的字典1&#123;&apos;data&apos;: &apos;hello&apos;, &apos;__weakref__&apos;: &lt;attribute &apos;__weakref__&apos; of &apos;Foo&apos; objects&gt;, &apos;__dict__&apos;: &lt;attribute &apos;__dict__&apos; of &apos;Foo&apos; objects&gt;, &apos;__init__&apos;: &lt;function Foo.__init__ at 0x0000000000ABC9D8&gt;, &apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None&#125; 类的继承，封装，多态3特性继承1234567891011121314class Foo(): def f1(self): return self.f2() def f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def f2(self): return &quot;Bar.f2&quot;obj = Bar()obj.f1() # 打印Bar.f2# 描述运行过程:self=obj,没有f1就先调用父类的f1,再找当前类的f2, 不是直接找父类的f2,如果非要找父类的f2,参考下面引藏示例 有时子类直接继承父类，在继承基础上重构子类属性，那么就要用到super()方法用法： super(当前类，self.).__init__()或py3 supuer().__init__() 12345678class Foo(): def __init__(self,*args,**kwargs): passclass Bar(): def __int__(self,name,*args,**kwargs): super(Bar,self).__init__() self.name = name Boolean型判断123456789判断一个类是不是另一个类的子类issubclass(CC,PP)issubclass(PP,object)判断一个实例是不是那个类生成的isinstance(ins1,CC)判断一个实例有没有那个属性值hasattr(ins1,&apos;name&apos;) 12345678from types import FunctionTypeclass Foo(): def f1(self,name): return nameobj = Foo()print(isinstance(Foo.f1,FunctionType)) # Trueprint(isinstance(obj.f1,FunctionType)) # False 封装python数据封装只要写代码就会有，对数据结构化存储; 如1234567class Base(): def __init__(self): self.status = False self.data = None self.errors = Noneobj=Base()obj.status/obj.data/obj.errors # 这就是一种数据封装 封装可以__开头隐藏属性，但在类内部不受限制，外部是无法访问的，当然只是语法变形的隐藏，在名称空间还是能找到的123456789101112131415161718class Foo(): __N = &apos;NN&apos; def __init__(self,name): self.__name = name def __f1(self): # 外部无法直接访问 return self.__name def f2(self): return self.__f1() # 在内部调用不受限制obj = Foo(&apos;wxq&apos;)print(obj.__f1()) # 无法直接调用,直正调用还是可以的obj._Foo__f1()print(obj.f2())obj.__dict__ # &#123;&apos;_Foo__name&apos;: &apos;wxq&apos;&#125;obj.__x = &quot;xx&quot; # 语法隐藏变形是在定义类时，实例化后再__不会变形obj.__xx # 实例化后不会隐藏 继承类时，我们就想调用Foo的f2(),方法很多，这里用一下隐藏实现1234567891011121314 class Foo(): def f1(self): return self.__f2() #变形为 self._Foo__f2 def __f2(self): return &quot;Foo.f2&quot;class Bar(Foo): def __f2(self): # self._Bar__f2 return &quot;Bar.f2&quot;obj = Bar()x=obj.f1() # 打印Foo.f2print(x) 多态python原生就是多态，没什么可说的 123456789101112131415161718192021222324252627class Animal(): def __init__(self,name): self.name = name def talk(self): pass @staticmethod def animal_talk(obj): obj.talk()class Dog(Animal): def talk(self): print(&quot;wang...&quot;)class Cat(Animal): def talk(self): print(&quot;miao miao...&quot;)d=Dog(&apos;dog&apos;)# d.talk()c = Cat(&apos;cat&apos;)# c.talk()Animal.animal_talk(d)Animal.animal_talk(c) 抽象方法抽象方法作用：定义子类必须实现的父类的某些方法使用：12345678910111213141516171819import abcclass Base(metaclass=abc.ABCMeta): @abc.abstractmethod def read(self): pass @abc.abstractmethod def write(self): passclass dev(Base): def read(self): pass def write(self): passobj = dev() 如果子类没有实现父类规定的@abc.abstractmethod装饰的方法就会报错1TypeError: Can&apos;t instantiate abstract class dev with abstract methods read, write","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-02-模块","slug":"python-05-02-模块","date":"2017-02-20T02:09:10.000Z","updated":"2018-01-03T10:57:43.240Z","comments":true,"path":"2017/02/20/python-05-02-模块/","link":"","permalink":"http://www.digmyth.com/2017/02/20/python-05-02-模块/","excerpt":"","text":"目录 相关概念 模块os 模块sys 模块time 模块random 模块pickle 模块json 模块logging 模块paramiko 模块configparser 模块MySQLdb 模块hashlib 模块uuid 模块md5 模块 相关概念 过程编程 , 函数式编程, 模块化编程是一个意思，区别于面向对象编程 面向对象编程好处：（特性: 封装，继承，多态） python程序可以分解成模块，语句，表达式和 对象 程序由模块构成 模块包含语句 语句包含表达式 表达式建立并处理对象表达式是”某事“， 语句是“做某事”即指令语句的特性：它们改变了事物，例如，赋值语句改变了变量，print改变了屏幕输出。 模块导入的使用 123456&gt;&gt;&gt; import platform&gt;&gt;&gt; print(platform.uname())uname_result(system=&apos;Linux&apos;, node=&apos;ubuntu&apos;, release=&apos;4.2.0-35-generic&apos;, version=&apos;#40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016&apos;, machine=&apos;x86_64&apos;, processor=&apos;x86_64&apos;)&gt;&gt;&gt; import platform&gt;&gt;&gt; dir(platform)[&apos;DEV_NULL&apos;, &apos;_UNIXCONFDIR&apos;, &apos;__builtins__&apos; 此处略... ] 模块导入区别 import 导入会形成以模块名同名的名称空间，如果有个方法叫uname(),那么我们调用是print(platform.uname())加上platform名称空间前缀不会冲突 123456&gt;&gt;&gt; import random # 独立名称空间&gt;&gt;&gt; random.choice([3,5,6,7,8,9]) 7&gt;&gt;&gt; from random import choice # 没有独立名称空间，当前有choice方法会覆盖，这就是区别&gt;&gt;&gt; choice([3,5,6,7,8,9])6 from-import是导入指定模块的某些方法和属性，会导入在当前名称空间里，如果当前名称空间也有choice方法，那么会覆盖choice方法。import和from-import是可执行语句，独立可执行片断，可以嵌套在if测试中，或出现在def中，这样在我们满足条件再导入模块。 己知模块查找此模块在系统中的路径，用法module_name.__file__123&gt;&gt;&gt; import random&gt;&gt;&gt; random.__file__&apos;/usr/lib/python3.4/random.py&apos; 反射有一种说法叫反射1 以字符串的形式导入模块2 以字符串的形式调用函数 例子：12345678910111213root@apt:~# cat /usr/local/lib/python2.7/dist-packages/pkg/mysql.py#!/usr/bin/python2.7def count(): return 3306root@apt:~#In [1]: var = &apos;pkg.mysql&apos;In [2]: mode = __import__(var)In [3]: mode.mysql.count()Out[3]: 3306In [4]: func = &apos;count&apos;In [5]: Func = getattr(mode.mysql, func)In [6]: Func()Out[6]: 3306 模块osMore info 详情 模块sys利用sys模块模拟#滚动条12345678import sys,timeIn [111]: for i in range(50): .....: sys.stdout.write(&quot;\\033[32;1m#\\033[0m&quot;) .....: sys.stdout.flush() .....: time.sleep(0.05) .....: ################################################## time模块random模块博客参考 几个有用的方法1234import randomprint(random.randint(1,10)) # 取1-9print(random.randrange(1,20,2)) # 步长为2，意味着取奇数print(random.sample([1,2,3,4,5,6,7,8],3)) # 取一个3个元素的列表[3, 6, 1] 生成随机码(一)123456789checkcode = &apos;&apos;for i in range(4): current=random.randrange(0,4) if current != i: tmp = chr(random.randint(65,90)) else: tmp = random.randint(0,9) checkcode += str(tmp)print(checkcode) 生成随机码(二)1234import string# print(string.ascii_uppercase + string.ascii_lowercase+string.digits)source = string.ascii_uppercase + string.ascii_lowercase+string.digitsprint(&quot;&quot;.join(random.sample(source,4))) pickle模块pickle只是python支持，那么可以序列化python内所有数据类型 在程序运行的过程中，所有的变量都是在内存中,过程中可能改变变量，程序结束，内存变量回收。此时如果没有把修改过的变量存到磁盘上，下次程序运行又是最初的变量，怎么解决这个问题，序列化就派上用场了。 序列化： 把内存中的变量变成可存储可传输的过程称为序列化，pickling反序列化：把变量从序列化对象重新读入内存称为反序列化，unpickling pickle.dump() 序列化入文件pickle.dumps() 序列化为字符串，可赋值pickle.load() 从文件加载pickle.loads() 从字符串加载 1234567891011In [27]: import pickleIn [29]: my_listOut[29]: [0, 2, 4, 6, 8, 10]In [30]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;wb&apos;) # 打开一个文件In [31]: pickle.dump(my_list, pickle_file) # 序列化入这个文件In [32]: pickle_file.close()In [33]: pickle_file = open(&apos;/root/my_list.pkl&apos;, &apos;rb&apos;) # 打开文件In [34]: pickle.load(pickle_file) # 从一个文件加载回来Out[34]: [0, 2, 4, 6, 8, 10] 12345678910111213In [36]: import pickleIn [37]: list1 = [&apos;wxq&apos;, 11, 22,&apos;good&apos;]In [38]: dumpsed = pickle.dumps(list1)In [39]: type(dumpsed)Out[39]: builtins.bytesIn [40]: loadsed = pickle.loads(dumpsed)In [41]: loadsedOut[41]: [&apos;wxq&apos;, 11, 22, &apos;good&apos;]In [42]: type(loadsed)Out[42]: builtins.list json模块json是各语言通用的序列化数据交换格式，只支持序列化数据类型：str int float set dict list tuple JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输，并且可以直接在Web页面中读取，这也是为什么json这么通用的原因。 1234567891011121314import json# d=&#123;&quot;user&quot;:&quot;wxq&quot;&#125;## json_s=(json.dumps(d)) # 这里d是什么不管，json.dumps后是把d 序列化为符合json标准(只支持双引号)的字符串# json.loads(json_s) # json_s必须符合json双引号标准才能反序列化## json.loads(&quot;&#123;&apos;user&apos;:&apos;wxq&apos;&#125;&quot;) # 这里虽然是字符串，但里面是单引号，不符合json标准，会报错的json_s=json.dumps(&#123;&apos;user&apos;:&apos;wxq&apos;&#125;)# 可以看到这里传入的不是标准的(双引号)，但json_dumps后成为字符串&#123;&quot;user&quot;: &quot;wxq&quot;&#125;，是符合json标准(只支持双引号)的字符串。in javascriptJSON.stringfy() # 序列化JSON.parse() # 反序列化 logging模块python的logging模块提供了标准的日志接口，我们来看一下简单用法123456789101112root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;)root@apt:/tmp# python3 log.py WARNING:root:warning messageERROR:root:error message 上面的日志是直接输出，怎么才能让应用程序日志写入文件呢？ 也很简单定义一个log.py的文件12345678910111213root@apt:/tmp# cat log.py #!/usr/bin/env python3import logging#日志级别： DEGUG INFO WARNING ERROR CRITICAL#数字表示分别为 10 20 30 40 50log_file = &apos;example.log&apos;logging.basicConfig(filename=log_file,level=logging.INFO)logging.debug(&apos;program debug message ...&apos;)logging.info(&apos;info message&apos;)logging.warning(&quot;warning message&quot;)logging.error(&quot;error message&quot;) 运行一下log.py文件12345root@apt:/tmp# python3 log.pyroot@apt:/tmp# cat example.log INFO:root:info messageWARNING:root:warning messageERROR:root:error message 我们注意到logging.debug信息并没有写入，为什么呢？因为level=logging.INFO定义要写入日志的日志级别，只有达到定义的日志级别才会记录。 但是发现记录的日志太丑了，怎么样才能让打印的日志人性化呢，就需要格式化输出。 格式 说明 %(name)s Logger的名字 %(levelno)s 数字形式的日志级别 %(levelname)s 文本形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名 %(funcName)s 调用日志输出函数的函数名 %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示 %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数 %(asctime)s 字符串形式的当前时间。默认格式是 “2017-02-01 16:49:45,896”。逗号后面的是毫秒 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 %(message)s 用户输出的消息 如果想同时把log打印在屏幕和文件日志里，或者有日志切割的需求，可能要复杂些 logger提供了应用程序可以直接使用的接口； handler将(logger创建的)日志记录发什么方式输出，是屏幕还是文件，或二都都要； filter提供了细度过滤来决定哪些日志不要输出，如密码敏感信息； formatter决定日志记录的最终输出格式。 logger工作原理图 屏幕和文件都输出123456789101112131415161718192021222324252627282930import logging #create loggerlogger = logging.getLogger(&apos;TEST-LOG&apos;)logger.setLevel(logging.DEBUG) # create console handler and set level to debugsh = logging.StreamHandler()sh.setLevel(logging.DEBUG)# create file handler and set level to warningfh = logging.FileHandler(&quot;access.log&quot;)fh.setLevel(logging.WARNING)# create formatterformatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)# add formatter to sh and fhsh.setFormatter(formatter)fh.setFormatter(formatter)# add ch and fh to loggerlogger.addHandler(sh)logger.addHandler(fh)# &apos;application&apos; codelogger.debug(&apos;debug message&apos;)logger.info(&apos;info message&apos;)logger.warn(&apos;warn message&apos;)logger.error(&apos;error message&apos;)logger.critical(&apos;critical message&apos;) 日志切割handlers.RotatingFileHandler：按文件大小切割handlers.TimedRotatingFileHandler： 按时间切割 示例1：1大小切割略 示例2：12345678910111213141516import loggingfrom logging import handlerlogger = logging.getLogger(__name__)log_file = &quot;timelog.log&quot;#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3)fh = handlers.TimedRotatingFileHandler(filename=log_file,when=&quot;S&quot;,interval=5,backupCount=3)formatter = logging.Formatter(&apos;%(asctime)s %(module)s:%(lineno)d %(message)s&apos;)fh.setFormatter(formatter)logger.addHandler(fh)logger.warning(&quot;test1&quot;)logger.warning(&quot;test12&quot;)logger.warning(&quot;test13&quot;)logger.warning(&quot;test14&quot;) 模块paramiko123456789`pycrypto-2.6.1.tar.gz`# 下载安装apt-get install python-devpython setup.py buildpython setup.py installimport Crypto`paramiko-1.10.1.tar.gz` 下载安装python setup.py buildpython setup.py installimport paramiko 模块configparser生成如下example.ini 文件，该如何做呢12345678910111213root@ubuntu:~# cat example.ini[DEFAULT]compression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes[bitbucket.org]user = wxq[topsecret.server.com]host port = 5000forwardx11 = no 编写如下脚本执行 python3 create_example.py即可 12345678910111213141516171819root@ubuntu:~# cat create_example.py #!/usr/bin/env python3#import configparserconfig = configparser.ConfigParser()config[&quot;DEFAULT&quot;] = &#123;&apos;ServerAliveInterval&apos;: &apos;45&apos;, &apos;Compression&apos;: &apos;yes&apos;, &apos;CompressionLevel&apos;: &apos;9&apos;&#125;config[&apos;bitbucket.org&apos;] = &#123;&#125;config[&apos;bitbucket.org&apos;][&apos;User&apos;] = &apos;wxq&apos;config[&apos;topsecret.server.com&apos;] = &#123;&#125;topsecret = config[&apos;topsecret.server.com&apos;]topsecret[&apos;Host Port&apos;] = &apos;5000&apos; # mutates the parsertopsecret[&apos;Forwardx11&apos;] = &apos;no&apos; # same hereconfig[&apos;DEFAULT&apos;][&apos;Forwardx11&apos;] = &apos;yes&apos;with open(&apos;example.ini&apos;, &apos;w&apos;) as configfile: config.write(configfile) 那么有了example.ini 这样的文件，如何读取呢12345678910111213141516171819202122&gt;&gt;&gt; import configparser # 导入模块&gt;&gt;&gt; config = configparser.ConfigParser() # 类实例化&gt;&gt;&gt; config.sections() # 调用类中一个方法[]&gt;&gt;&gt; config.read(&apos;example.ini&apos;) # 文件读入[&apos;example.ini&apos;]&gt;&gt;&gt; config.sections() # 除了[DEFAULT]还有哪些区块，列表呈现[&apos;bitbucket.org&apos;, &apos;topsecret.server.com&apos;]&gt;&gt;&gt; &apos;bitbucket.org&apos; in configTrue&gt;&gt;&gt; config[&apos;bitbucket.org&apos;][&apos;user&apos;] # 指定区块指定字典键对应值&apos;wxq&apos;&gt;&gt;&gt; config[&apos;DEFAULT&apos;][&apos;compression&apos;]&apos;yes&apos;&gt;&gt;&gt; for i in config[&apos;bitbucket.org&apos;]: # 指定区块打印键... print(i) # 注意：包括[DEFAULT]区块的键也在这里呈现... usercompressionserveraliveintervalcompressionlevelforwardx11 123456789&gt;&gt;&gt; d1 = config[&apos;bitbucket.org&apos;] # 指定区块读出其实是一个字典&gt;&gt;&gt; for k,v in d1.items():... print(&quot;%s = %s&quot; % (k,v))... user = wxqcompression = yesserveraliveinterval = 45compressionlevel = 9forwardx11 = yes 12345678910111213141516171819202122232425root@ubuntu:~# cat wxq.txt # 有这么一个文件[section1]k1 = v1k2: v2[section2]k1 = v111&gt;&gt;&gt; import configparser&gt;&gt;&gt; config = configparser.ConfigParser()&gt;&gt;&gt; config.read(&apos;/root/wxq.txt&apos;) # 读入这样的文件[&apos;/root/wxq.txt&apos;]&gt;&gt;&gt; config.sections() # 查看这个文件的区块[&apos;section1&apos;, &apos;section2&apos;]&gt;&gt;&gt; config.items(&apos;section1&apos;) # 查看指定区块的键值对[(&apos;k1&apos;, &apos;v1&apos;), (&apos;k2&apos;, &apos;v2&apos;)]&gt;&gt;&gt; config.options(&apos;section1&apos;) ＃ 只显示指定区块的键[&apos;k1&apos;, &apos;k2&apos;]&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 判断某区块是否存在返回True/FalseFalse&gt;&gt;&gt; config.add_section(&apos;section3&apos;) # 添加一个区块&gt;&gt;&gt; config.has_section(&apos;section3&apos;) # 有了这个区块True&gt;&gt;&gt; config.set(&apos;section3&apos;, &apos;k1&apos;, &apos;v1&apos;) ＃ 添加一行配置，也就是设置一个区块的键值对&gt;&gt;&gt; config.write(open(&apos;wxq&apos;, &apos;w&apos;)) 12345678910root@ubuntu:~# cat wxq # 按照上面的写入会生成了一个新文件[section1]k1 = v1k2 = v2[section2]k1 = v111[section3]k1 = v1 123456&gt;&gt;&gt; config.remove_option(&apos;section3&apos;, &apos;k1&apos;) # 删除某键值对True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;))&gt;&gt;&gt; config.remove_section(&apos;section3&apos;) # 删除某区块True&gt;&gt;&gt; config.write(open(&apos;wxq.txt&apos;, &apos;w&apos;)) 模块MySQLdbpython连接数据库操作 建立数据库连接 创建游标cursor(用于发送sql语句，获取sql结果，解析返回结果) 关闭游标cursor curname.close() 关闭数据库连接 conname.close() 模块安装apt-get install python-mysqldb查看模块help(‘modules’)加载数据库模块import MySQLdb as mysql 创建连接，会生成一个con.cursor()的类con = mysql.connect(host=’127.0.0.1’,user=’root’,passwd=’dbpass’) 游标类实例化cur = con.cursor() cur.execute 传入一个参数执行sql语句cur.executemany 传入多个参数执行sql语句 cur.fetchall 查询执行后的结果返回所有cur.fetchmany查询执行后的结果返回多个cur.fetchone 查询执行后的结果返回一个游标回滚help(cur.scroll)scroll(self, value, mode=’relative’) cur.scroll(0,mode=’absolute’) hashlib模块用于加密相关操作，3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法123456789import hashlibstr = hashlib.sha1(b&apos;admin123&apos;) # python3中必须bytes格式str.hexdigest()&apos;f865b53623b121fd34ee5426c792e5c33af8c227&apos;str = hashlib.md5(b&apos;admin123&apos;)str.hexdigest()&apos;0192023a7bbd73250516f069df18b500&apos; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import hashlib m = hashlib.md5()m.update(b&quot;Hello&quot;)m.update(b&quot;It&apos;s me&quot;)print(m.digest())m.update(b&quot;It&apos;s been a long time since last time we ...&quot;) print(m.digest()) #2进制格式hashprint(len(m.hexdigest())) #16进制格式hash&apos;&apos;&apos;def digest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of binary data. &quot;&quot;&quot; pass def hexdigest(self, *args, **kwargs): # real signature unknown &quot;&quot;&quot; Return the digest value as a string of hexadecimal digits. &quot;&quot;&quot; pass &apos;&apos;&apos;import hashlib# ######## md5 ########hash = hashlib.md5()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha1 ########hash = hashlib.sha1()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha256 ########hash = hashlib.sha256()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha384 ########hash = hashlib.sha384()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) # ######## sha512 ########hash = hashlib.sha512()hash.update(b&apos;admin&apos;)print(hash.hexdigest()) python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密1234import hmach = hmac.new(b&apos;wxq&apos;)h.update(b&apos;hi&apos;)print(h.hexdigest()) 来个实用例子：注意：bytes只接收ascii的值，字符串为unicode,需转为ascii样的值，比如utf-8 1234567891011121314151617root@wxq:~# cat md5.py #!/usr/bin/env python3import hashlibimport timedef create_md5(): m = hashlib.md5() m.update(bytes(str(time.time()),encoding=&apos;utf-8&apos;)) return m.hexdigest()res = create_md5()print(res)root@wxq:~# python3 md5.py ebd8a4dd680e2e29b1a44b27b2bdd2f7root@wxq:~# python3 md5.py 4e178ffe5eaa58584434d3b519708638 更多关于md5,sha1,sha256等介绍的文章.看这里 模块uuid直接来个例子：12345678910root@wxq:~# cat create_uuid.py #!/usr/bin/env python3import uuiddef create_uuid(): return (str(uuid.uuid1()))res = create_uuid()print(res)root@wxq:~# python3 create_uuid.py 2cad772c-fe7d-11e6-b3db-3a71234db8d2 模块md512345678910111213#password=form.cleaned_data[&apos;password&apos;]from utils import md5form.cleaned_data[&apos;password&apos;]=md5(form.cleaned_data[&apos;password&apos;])app01/utils/md.pyimport hashlibdef md5(text): m = hashlib.md5() m.update(text.encode(&apos;utf-8&apos;)) # python3接收bytes格式，encode后就是bytes return m.hexdigest()if __name__ == &apos;__main__&apos;: text=&apos;123&apos; return md5(text) update可以执行多次，效果一样123m.update(b&quot;hello &quot;)m.update(b&quot;world&quot;)等同于m.update(b&quot;hello world&quot;) 模块模块模块","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-05-01-列表解析_生成器_迭代器","slug":"python-05-01-列表解析-生成器-迭代器","date":"2017-02-18T02:53:38.000Z","updated":"2018-02-06T05:22:07.452Z","comments":true,"path":"2017/02/18/python-05-01-列表解析-生成器-迭代器/","link":"","permalink":"http://www.digmyth.com/2017/02/18/python-05-01-列表解析-生成器-迭代器/","excerpt":"","text":"目录 列表解析 生成器 迭代器 列表解析什么是列表解析？定义： 基于一个列表生成另外一个列表，或动态生成一个列表。如：12345In [26]: [ i ** 2 for i in range(2,8)] # 对原列表乘以2Out[26]: [4, 9, 16, 25, 36, 49]In [25]: [ i for i in range(1,10) if i % 2 ] # 对原列表取奇数Out[25]: [1, 3, 5, 7, 9] 练习1： 有如下文件123# cat word.txtrender practice inventory indent accelerate,trigger status,wxq. 我们计算word.txt单词个数1234567891011In [29]: f = open(&apos;/root/word.txt&apos;, &apos;r&apos;)In [31]: word_list = [ word for line in f for word in line.split() ]In [36]: print(word_list)[&apos;render&apos;, &apos;practice&apos;, &apos;inventory&apos;, &apos;indent&apos;, &apos;accelerate,&apos;, &apos;trigger&apos;, &apos;status,wxq.&apos;]In [37]: f.seek(0) # 上面读取过文件，指针己然在最后了，这里是把指针移到文件首部Out[37]: 0In [38]: len([ word for line in f for word in line.split() ]) # 计算结果为7Out[38]: 7 我们计算word.txt非空白字符数12345In [37]: f.seek(0) # 把指针移到文件首部Out[37]: 0In [41]: sum([ len(word) for line in f for word in line.split() ])Out[41]: 58 练习2： 打印一个3行5列的矩阵123In [45]: list1 = [ (x+1, y+1) for x in range(3) for y in range(5) ]In [47]: print(list1)[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)] 练习3：123&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()][&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;] 练习4：1234In [61]: L = [&apos;I&apos;, &apos;WILL&apos;, &apos;STUDY&apos;, &apos;HARD&apos;, &apos;PYTHON&apos;]In [62]: [ s.capitalize() for s in L ]Out[62]: [&apos;I&apos;, &apos;Will&apos;, &apos;Study&apos;, &apos;Hard&apos;, &apos;Python&apos;] 生成器列表解析会创建完整列表占用内存，那么有没有一种算法或机制让我们循环使用时推算出后续元素，这样节省了内存空间。定义：这种边循环边计算的机制，称为生成器generator 创建一个生成器，其中一个方法就是把前面的列表解析[] 换成()123456789101112131415161718192021222324In [107]: g = (i for i in range(4))In [108]: gOut[108]: &lt;generator object &lt;genexpr&gt; at 0x7f98a27ba150&gt;In [117]: g.send(None) Out[117]: 0In [118]: g.send(None)Out[118]: 1In [119]: next(g)Out[119]: 2In [120]: next(g)Out[120]: 3In [122]: next(g)---------------------------------------------------------------------------StopIteration Traceback (most recent call last)&lt;ipython-input-122-5f315c5de15b&gt; in &lt;module&gt;()----&gt; 1 next(g)StopIteration: 利用yield创建一个生成器，取出完整元素需要用for 循环来迭代1234567891011In [123]: def genNum(x): .....: i = 0 .....: while i &lt; x: .....: yield i .....: i += 1 In [124]: g = genNum(5)In [136]: for i in g: .....: print(i, end=&apos; &apos;) .....: 0 1 2 3 4 来看一下yield工作细节1234567891011121314151617In [138]: def consumer(): .....: print(&quot;yield starting&quot;) .....: m = yield 5 .....: print(&quot;m_values: %s&quot; % m) .....: n = yield 12 .....: print(&quot;Game over&quot;) .....: In [139]: c = consumer()In [140]: c.send(None)yield startingOut[140]: 5In [141]: c.send(&apos;to be brave&apos;)m_values: to be braveOut[141]: 12 小结: c.send(None)遇到第一个yield停止，在解释器中out yield中的值，在python yield.py却不会. c.send(‘to be brave’)会上次中止处继续，’to be brave’会赋值给yield 5,即m = ‘to be brave’, 遇到第二个yield停止. g.send(None)启动迭代器，遇到第一个yield返回.1234567891011121314151617root@apt:~/script_study# cat yield.py #!/usr/bin/env python3#def h(): print(&quot;yield starting&quot;) m = yield 5 print(&quot;m_values: %s&quot; % m) d = yield 12 print(&apos;Game over&apos;) c = h()# print test infoc.send(None)c.send(&apos;Fighting!&apos;)root@apt:~/script_study# python3 yield.py yield startingm_values: Fighting! 后面协程正是用的这个知识点。 迭代器细心的朋友不难发现生成器可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值为止。 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator 可以直接作用于for循环的对象统称为可迭代对象：Iterable 哪些是可迭代对象呢？或说可作用于for循环呢？有以下几种数据类型： 一类是集合数据类型，如list、tuple、dict、set、str等； 一类是generator，包括生成器和带yield的generator function。 可以使用isinstance()判断一个对象是否是Iterable对象：1234567891011&gt;&gt;&gt; from collections import Iterable&gt;&gt;&gt; isinstance([], Iterable)True&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)True&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable)True&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)True&gt;&gt;&gt; isinstance(100, Iterable)False 可以使用isinstance()判断一个对象是否是Iterator对象：123456789&gt;&gt;&gt; from collections import Iterator&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)True&gt;&gt;&gt; isinstance([], Iterator)False&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)False&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterator)False 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。 把list、dict、str等Iterable变成Iterator可以使用iter()函数：1234&gt;&gt;&gt; isinstance(iter([]), Iterator)True&gt;&gt;&gt; isinstance(iter(&apos;abc&apos;), Iterator)True 为什么list、dict、str等数据类型不是Iterator 呢？ 这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。 Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。 Python的for循环本质上就是通过不断调用next()函数实现的，例如： for x in [1, 2, 3, 4, 5]: pass实际上完全等价于：12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break 总结1234567凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。迭代器：能够作用于next()函数，不断向后返回值，称为迭代器 iter([1,2,3,4])生成器：yield返回，并且可以next(),是一种特殊的迭代器可迭代对象：一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个类的对象就是可迭代对象，可for循环","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"web-01-开发入门","slug":"web-01-开发入门","date":"2017-02-15T12:51:41.000Z","updated":"2018-01-18T03:54:37.780Z","comments":true,"path":"2017/02/15/web-01-开发入门/","link":"","permalink":"http://www.digmyth.com/2017/02/15/web-01-开发入门/","excerpt":"","text":"前言从现在开始，此时此刻写点web开发和Django 的知识，便于以后查阅学习。廖雪峰老师的博客写得特别好，我也是摘抄参考其内容。廖雪峰老师博客原文 一. HTTP协议简介web历程web开发经历几个阶段1 静态页面: 直接由编辑器生成静态html2 CGI: 交互与动态数据处理出现了CGI（common gateway interface）,由C/C++编写3 脚本语言（ASP/JSP/PHP）: 脚本语言开发效率高，与html结合紧密4 框架：mvc mtv mvvm HTTP协议服务器把网页传给浏览器，实际上就是把网页的html代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议就是HTTP HTML是一种用来定义网页的文本，会HTML就会编写网页http是在网络上传输html的协议，用于浏览器和服务器的通信 Elements显示网页的结构，Network显示浏览器和服务器的通信。我们点Network，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信。 GET / HTTP/1.1： 注：1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐 当浏览器读取到新浪首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给新浪服务器，拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出一个完整的页面。所以我们在Network下面能看到很多额外的HTTP请求。 HTTP请求流程步骤1：浏览器向服务器发送http请求 方法：GET仅请求资源 POST 会附带用户数据body部份 路径; /full/url/path 域名： 步骤2：服务器向浏览器返回HTTP响应 响应代码：200表示成功 3** 表示重定向 4** 表示客户端发送的请求有错误 5** 表示服务器处理错误 响应类型： 由Content-Type指定 通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中 步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2 Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP请求中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源 HTTP协议同时具备极强的扩展性，虽然浏览器请求的是http://www.sina.com.cn/的首页，但是新浪在HTML中可以链入其他服务器的资源，比如&lt;img src=&quot;#url&quot;/&gt;，从而将请求压力分散到各个服务器上，并且一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称WWW。 二. HTML简介HTML是一种用来定义网页的文本，会HTML就会编写网页 。其它前端知识不在这里展开。略。。。 三 . WSGI接口了解了HTTP协议和HTML文档，我们其实就明白了一个Web应用的本质就是：浏览器发送一个HTTP请求；服务器收到请求，生成一个HTML文档；服务器把HTML文档作为HTTP响应的Body发送给浏览器；浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。 所以，最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。 如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。 正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。 这个接口就是WSGI：Web Server Gateway Interface。 WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”：123def application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 上面的application()函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数： environ：一个包含所有HTTP请求信息的dict对象；start_response：一个发送HTTP响应的函数。 在application()函数中，调用：start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])就发送了HTTP响应的Header，注意Header只能发送一次，也就是只能调用一次start_response()函数。start_response()函数接收两个参数，一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示。 通常情况下，都应该把Content-Type头发送给浏览器。其他很多常用的HTTP Header也应该发送。然后，函数的返回值b&#39;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#39;将作为HTTP响应的Body发送给浏览器。 有了WSGI，我们关心的就是如何从environ这个dict对象拿到HTTP请求信息，然后构造HTML，通过start_response()发送Header，最后返回Body。 整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，底层代码不需要我们自己编写，我们只负责在更高层次上考虑如何响应请求就可以了。 不过，等等，这个application()函数怎么调用？如果我们自己调用，两个参数environ和start_response我们没法提供，返回的bytes也没法发给浏览器。 所以application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器，我们可以挑选一个来用。但是现在，我们只想尽快测试一下我们编写的application()函数真的可以把HTML输出到浏览器，所以，要赶紧找一个最简单的WSGI服务器，把我们的Web应用程序跑起来。 好消息是Python内置了一个WSGI服务器，这个模块叫wsgiref，它是用纯Python编写的WSGI服务器的参考实现。所谓“参考实现”是指该实现完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用。 运行WSGI服务我们先编写hello.py，实现Web应用程序的WSGI处理函数：12345# hello.pydef application(environ, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)]) return [b&apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;] 然后，再编写一个server.py，负责启动WSGI服务器，加载application()函数：12345678910111213# server.py# 从wsgiref模块导入:from wsgiref.simple_server import make_server# 导入我们自己编写的application函数:from hello import application# 创建一个服务器，IP地址为空，端口是8000，处理函数是application:httpd = make_server(&apos;&apos;, 8000, application)print(&apos;Serving HTTP on port 8000...&apos;)# 开始监听HTTP请求:httpd.serve_forever()确保以上两个文件在同一个目录下，然后在命令行输入python server.py来启动WSGI服务器：python server.py 执行程序启动 四 web 框架了解了WSGI框架，我们发现：其实一个Web App，就是写一个WSGI的处理函数，针对每个HTTP请求进行响应。 但是如何处理HTTP请求不是问题，问题是如何处理100个不同的URL。方法是一个函数处理一个URL, 我们专注于写业务处理函数，URL和函数对应关系交给web框架完成，这就是 web框架其中一个价值。","categories":[{"name":"WebDjango开发","slug":"WebDjango开发","permalink":"http://www.digmyth.com/categories/WebDjango开发/"}],"tags":[]},{"title":"python-04-01-装饰器","slug":"python-04-01-装饰器","date":"2017-02-04T10:08:26.000Z","updated":"2017-03-01T12:12:35.805Z","comments":true,"path":"2017/02/04/python-04-01-装饰器/","link":"","permalink":"http://www.digmyth.com/2017/02/04/python-04-01-装饰器/","excerpt":"","text":"目录 装饰器 Python装饰器，英文decorator, 以被装饰函数作为参数对其装饰。这里会用到函数，我们可以像使用变量一样使用函数，函数有对象一致特性。 函数可以被赋值给其它变量 函数可以内部再定义函数 函数可以作为参数传递给另外一个函数 函数可以直接返回给外层函数 简单函数进行装饰有这么一个函数12def hello(): return &apos;hello world&apos; 我们想在不修改原函数的情况下，让函数返回特定标签1234def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper 我们定义了一个函数maketag(),该函数有一个参数func,这个参数必须是一个函数，内部又定义了一个wrapper()函数，并直接返回给maketag()123&gt;&gt;&gt; hello = maketag(hello) # 将 hello 函数传给 maketag&gt;&gt;&gt; hello()&apos;&lt;h&gt;hello world&lt;/h&gt;&apos; 上面我们把最初hello函数传给maketag()函数并将返回赋值给变量hello,此时调用hello得到我们想要的结果。注意： maketag()返回赋值给hello,hello函数本身还存在，但函数名引用己经变为了maketag返回函数的名称wrapper,不在是原来的hello,验证一下1234567In [6]: a = maketag(hello)In [8]: a.__name__Out[8]: &apos;wrapper&apos;In [9]: hello = maketag(hello)In [10]: hello.__name__Out[10]: &apos;wrapper&apos; 总结一下：为了增强原函数hello的功能定义了一个maketag函数，它接收一个函数作为参数，maketag返回一个新的函数赋值给一个变量hello,然后hello可直接调用。 一般情况下，我们使用装饰器提供的 @ 语法糖（Syntactic Sugar）来简化上面的写法：12345678def maketag(func): def wrapper(): return &quot;&lt;h&gt;&quot; + func() + &quot;&lt;/h&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 像上面的情况，可以动态修改函数（或类）功能的函数就是装饰器。本质上，它是一个高阶函数，以被装饰的函数（比如上面的 hello）为参数，并返回一个包装后的函数（比如上面的 wrapper）给被装饰函数（hello）。 单/多个装饰器的使用形式装饰器的一般使用形式如下：12345678@decoratordef func(): pass等价于下面的形式：def func(): passfunc = decorator(func) 装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如：12345678910@decorator_one@decorator_twodef func(): pass等价于：def func(): passfunc = decorator_one(decorator_two(func)) 看下多个装饰器的例子，为了简单起见，下面的例子就不使用带参数的装饰器。1234567891011121314def maketag1(func): def wrapper(): return &apos;&lt;html&gt;&apos; + func() + &apos;&lt;/html&gt;&apos; return wrapper def maketag2(func): def wrapper(): return &apos;&lt;i&gt;&apos; + func() + &apos;&lt;/i&gt;&apos; return wrapper@maketag1@maketag2def hello(): return &apos;hello world&apos; 上面定义了两个装饰器，对 hello 进行装饰，上面的最后几行代码相当于：12345678def hello(): return &apos;hello world&apos; hello = maketag1(maketag2(hello))调用函数 hello：&gt;&gt;&gt; hello() &apos;&lt;html&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/html&gt;&apos; 似乎理解深刻了：当多个装饰器时，离函数定义最近的装饰器先被调用 对带参数的函数进行装饰让被装饰函数带有参数，对前面例子中的 hello() 函数进行改写使其带参数，如下： 12345678910111213def maketag(func): def wrapper(*args, **kwargs): res = func(*args, **kwargs) return &apos;&lt;h&gt;&apos; + res + &apos;&lt;/h&gt;&apos; return wrapper@maketagdef hello(name): return &apos;hello %s&apos; % name @maketagdef hello2(name1=&apos;user1&apos;, name2=&apos;user2&apos;): return &apos;hello %s, %s&apos; % (name1, name2) 由于函数 hello 带参数，因此内嵌包装函数 wrapper 也做了一点改变： 内嵌包装函数的参数传给了 func，即被装饰函数，也就是说内嵌包装函数的参数跟被装饰函数的参数对应，这里使用了 (*args, **kwargs)，是为了适应可变参数。看看使用：1234&gt;&gt;&gt; hello1(&apos;python&apos;)&apos;&lt;h&gt;hello python&lt;/h&gt;&apos;&gt;&gt;&gt; hello2(&apos;python&apos;, &apos;java&apos;)&apos;&lt;h&gt;hello python, java&lt;/h&gt;&apos; 带参数的装饰器装饰器还可以带参数，比如：123456789@decorator(args1, args2)def func(): pass等价于：def func(): passfunc = decorator(args1, args2)(func) 我们想改用标签 &lt;html&gt;...&lt;/html&gt; 是不是要再定义一个装饰器呢？不必，其实我们可以装饰器外层再定义一个函数，将标签作为参数，返回一个装饰器，比如：12345678def outer_decorator(tag): # 外层函数参数传给装饰器 def decorator(func): # 真正的装饰器参数必然是被装饰器函数func def wrapper(*args, **kwargs): # 装饰器内层函数的参数是func的参数 res = func(*args, **kwargs) # 被装饰函数正常调用# return &apos;&lt;&apos; + tag + &apos;&gt;&apos; + res + &apos;&lt;/&apos; + tag + &apos;&gt;&apos; return &apos;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&apos;.format(tag=tag, res=res) return wrapper # 内层函数作返回值返回给装饰器 return decorator # 装饰器本身作为返回值返回给最外层函数 现在，我们可以根据需要生成想要的装饰器了：1234567outer_decorator = outer_decorator(&apos;html&apos;)@outer_decoratordef hello(name): return &apos;hello %s&apos; % name &gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 上面的形式也可以写得更加简洁：123@outer_decorator(&apos;html&apos;) # @语法糖syntactic sugardef hello(name): return &apos;hello, %s&apos; % name 这就是带参数的装饰器，其实就是在装饰器外面多了一层包装，根据不同的参数返回不同的装饰器。 基于类的装饰器前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子：12345678910111213class Deco_C(object): def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): return &apos;&lt;html&gt;&apos; + self.func(*args, **kwargs) + &apos;&lt;/html&gt;&apos;@Deco_Cdef hello(name): return &apos;hello %s&apos; % name&gt;&gt;&gt; hello(&apos;world&apos;)&apos;&lt;html&gt;hello world&lt;/html&gt;&apos; 可以看到，类 Deco_C 有两个方法： __init__()：它接收一个函数作为参数，也就是被装饰的函数__call__()：让类对象可调用，就像函数调用一样，在调用被装饰函数时被调用还可以让类装饰器带参数： 123456789101112131415class Tag(object): def __init__(self, tag): self.tag = tag def __call__(self, func): def wrapper(*args, **kwargs): return &quot;&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;&quot;.format(res=func(*args, **kwargs), tag=self.tag) return wrapper@Tag(&apos;html&apos;)def hello(name): return &apos;hello %s&apos; % name&gt;&gt; hello(&apos;, welcome&apos;)&apos;&lt;html&gt;hello, welcome&lt;/html&gt;&apos; 需要注意的是，如果类装饰器有参数，则 init 接收此参数，而 call 接收 func函数，并多了一层wrapper(*args, **kwargs)来接收func函数的参数。 装饰器的副作用前面提到装饰器有一个瑕疵，就是被装饰函数的函数名称已经不是原来的名称了，回到最开始的例子：12345678def maketagc(func): def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos; 函数 hello 被 maketag 装饰后，它的函数名称已经改变了：12&gt;&gt;&gt; hello.__name__&apos;wrapper&apos; 为了消除这样的副作用，Python 中的 functool 包提供了一个 wraps 的装饰器：1234567891011121314from functools import wrapsdef maketag(func): @wraps(func) # 加上 wraps 装饰器 def wrapper(): return &quot;&lt;i&gt;&quot; + func() + &quot;&lt;/i&gt;&quot; return wrapper@maketagdef hello(): return &apos;hello world&apos;&gt;&gt;&gt; hello.__name__&apos;hello&apos; 小结:本质上，装饰器就是一个有返回函数的高阶函数。装饰器可以动态地修改一个类或函数的功能，通过在原有的类或者函数上包裹一层修饰类或修饰函数实现。事实上，装饰器就是闭包的一种应用，但它比较特别，以被装饰函数为参数，并返回一个函数，赋给被装饰函数，闭包则没这种限制。 装饰器生产化进阶eg1:1234567891011121314def deco(func): def wrapper(x): print(&quot;what ...&quot;) func(x) print(&apos;Game over ...&apos;) return wrapper@decodef show(x): print(x)&gt;&gt;&gt;show(&quot;I am a pythoner&quot;)what ...I am a pythonerGame over ... eg2:","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"shell getopts语法","slug":"shell-getopts语法","date":"2017-01-29T01:41:54.000Z","updated":"2018-04-23T06:58:29.638Z","comments":true,"path":"2017/01/29/shell-getopts语法/","link":"","permalink":"http://www.digmyth.com/2017/01/29/shell-getopts语法/","excerpt":"","text":"Linux shell中getopts语法是一个很高级的语法，它能让你写出很漂亮的shell,来看个例子学习下 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu:~# cat getopts.sh #!/bin/bash# a: b: c: 表示脚本运行时接受选项&lt;-a options_1&gt; &lt;-b options_2&gt; &lt;-c options_3&gt;# first: 表示友好， 给出错误选项时尽量少的打印错误信息# OPTARG 表示选项给的值# OPTIND 表示选项指针（下一位）# 比如：(-a 指针为2) (-a a1 -b 指针为4) (-a a1 -b b1 -c c1指针为7)while getopts &quot;:a:b:c:&quot; OPT;docase $OPT in a) echo &quot;a is OPTARG: $OPTARG&quot; echo &quot;a is OPTIND: $OPTIND&quot; ;; b) echo &quot;b is OPTARG: $OPTARG&quot; echo &quot;b is OPTIND: $OPTIND&quot; ;; c) echo &quot;c is OPTARG: $OPTARG&quot; echo &quot;c is OPTIND: $OPTIND&quot; ;; *) echo &quot;Usage: $0 [-a arg1] [-b arg2] [-c arg3]&quot;esacdoneshift $(($OPTIND-1))echo &quot;\\$1 is: $1&quot;root@ubuntu:~# bash getopts.sh -a a1 -b b1 -c c1 test.sha is OPTARG: a1a is OPTIND: 3b is OPTARG: b1b is OPTIND: 5c is OPTARG: c1c is OPTIND: 7$1 is: test.sh","categories":[{"name":"Shell","slug":"Shell","permalink":"http://www.digmyth.com/categories/Shell/"}],"tags":[]},{"title":"Mysql 基础篇","slug":"mysql-基础篇","date":"2017-01-29T01:41:54.000Z","updated":"2017-11-19T10:00:09.447Z","comments":true,"path":"2017/01/29/mysql-基础篇/","link":"","permalink":"http://www.digmyth.com/2017/01/29/mysql-基础篇/","excerpt":"","text":"目录 知识扫盲 基础语句 主键、外键 修改表 分组与聚合 连表查询 其它查询 shell终端获取数据 数据库操作无非就是insert`deleteupdateselete,这篇博客对mysql`数据库语句做个总结记录便于学习 知识扫盲 什么是事务： 原子性操作(不可拆分)就是要么全成功，要么全失败。 mysql语句的注释符是 --，在SQL注入或别的场景中语句形如：username=”root” and 1 =1 – and password=’123’很明显 username=&quot;root&quot; and 1 =1将永远成立， and password=’123’ 部份将被注释，这点需要注意。 基础语句基础语句过于简单，这里就简单逻列下。 创建数据库1CREATE DATABASE db1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 创建一张表注意：auto_increment表示自增，primary key 表示id 这列为主键default charset utf8指定默认字符集engine=innodb指定因默认引警 1234create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 插入数据1insert into tb1(name,age) values(&apos;wxq&apos;,20),(&apos;pp&apos;,18); 更改数据1update tb1 set age=25 where name=&apos;wxq&apos;; 删除某条数据1delete from tb1 where id&gt;1; 删除表内所有数据12delete from 表名 # 不会删除自增序列truncate table 表名 # 会删除自增序列，再次插入数据将从0开始，删除更辙底 删除表1drop table tb1 主键12345主键create table tb1(id int not null auto_increment primary key,name char(20) not null,age int) engine=innodb default charset utf8; 123456组合主键create table tb1( nid int not null, num int not null, primary key(nid,num) ) 外键1constraint fk_任意字符 foreign key (department_id自己字段) references department外面的表(nid外面表的字段) 12345678外键(约束):一对多 create table tb1( id int not null primary key, name char(32) null , age int not null, department_id int not null constraint fk_department_nid foreign key (department_id) references department(nid) ) 双向外键（约束）：多对对创建主机与部门之间的多对多关系12345678910111213141516create table host (id int not null auto_increatement primary key,host char(20) not null );create table department(id int not null auto_increatement primary key,title char(20) not null);create table de_2_host (id int not null auto_increatement primary key,hid int not null,did int not null,constraint fk_hid_host foreign key (hid) references host(id)，constraint fk_did_department foreign key (did) references department(id)) 修改表1234567891011121314151617添加列：alter table 表名 add 列名 类型删除列：alter table 表名 drop column 列名修改列： alter table 表名 modify column 列名 类型; -- 类型 alter table 表名 change 原列名 新列名 类型; -- 列名，类型 添加主键： alter table 表名 add primary key(列名);删除主键： alter table 表名 drop primary key; alter table 表名 modify 列名 int, drop primary key; 添加外键：alter table 从表 add constraint 外键名称（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);删除外键：alter table 表名 drop foreign key 外键名称 修改默认值：ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;删除默认值：ALTER TABLE testalter_tbl ALTER i DROP DEFAULT; 1234show variables like &apos;%char%&apos;; 查看整个mysql字符集show create table migrate_version; 查看表字符集alter table migrate_version character set utf8; 设置表字符集或者如下条：alter table migrate_version default character set utf8 collate utf8_general_ci; 分组与聚合group by - 对列进行聚合 sum(sid),max(sid),min(sid),count(sid) - 聚合条件过滤,having count(sid) &gt; 7 123456789分组 select num from 表 group by num select num,nid from 表 group by num,nid select num,nid from 表 where nid &gt; 10 group by num,nid order nid desc select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid select num from 表 group by num having max(id) &gt; 10 特别的：group by 必须在where之后，order by之前 连表查询示例1234select A.sid,A.sname,B.captionfrom student as A left join class as B on A.class_id = class.cid; left join 表名 on 多出的数据将会出现NULL数据 rigth join 表名 on 相对left 只是表位置变化，其它没有区别 inner join 表名 on 不会出现NULL数据，没有关联的数据将不会显示 1234567891011121314151617181920连表 无对应关系则不显示 select A.num, A.name, B.name from A,B Where A.nid = B.nid 无对应关系则不显示 select A.num, A.name, B.name from A inner join B on A.nid = B.nid A表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A left join B on A.nid = B.nid B表所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A right join B on A.nid = B.nid 其它查询12345678910111213141516171819202122232425262728293031323334353637a、条件 select * from 表 where id &gt; 1 and name != &apos;wxq&apos; and num = 12; select * from 表 where id between 5 and 16; select * from 表 where id in (11,22,33) select * from 表 where id not in (11,22,33) select distinct name from 表 where id in (select nid from 表) # distinct重复数所将只显示一条 b、通配符 select * from 表 where name like &apos;wxq%&apos; - wxq开头的所有（多个字符串） select * from 表 where name like &apos;wx_&apos; - wx开头的所有（一个字符） c、限制 select * from 表 limit 5; - 前5行 select * from 表 limit 4,5; - 从第4行开始的5行 select * from 表 limit 5 offset 4 - 从第4行开始的5行 d、排序 select * from 表 order by 列 asc - 根据 “列” 从小到大排列 select * from 表 order by 列 desc - 根据 “列” 从大到小排列 select * from 表 order by 列1 desc,列2 asc - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序 e、组合 组合，自动处理重合 select nickname from A union select name from B 组合，不处理重合 select nickname from A union all select name from B shell终端获取数据下面介绍在shell终端获取mysql的几种方法 用法一：123456[root@mysql ~]# mysql -p123 -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+---------------+-------+| Variable_name | Value |+---------------+-------+| Uptime | 8025 |+---------------+-------+ 用法二：1234[root@mysql ~]# mysql -p123 -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;+--------+------+| Uptime | 8029 |+--------+------+ 用法三：12[root@mysql ~]# mysql -p123 -s -N -e &quot;show global status where variable_name=&apos;uptime&apos;&quot;Uptime 8037 用法四：12[root@mysql ~]# echo &quot;show global status where variable_name=&apos;uptime&apos;;&quot; | mysql -N -p123Uptime 8072 123456789# echo &quot;show databases;&quot; | mysql -h 127.0.0.1 -uroot -A -p123 | tail -n +2 | head -n 2 -A 表示不自动rehash tail -n +2 表示从第二行开始打印 head -n 2表示打印前2行# echo &quot;use nova01 ; show tables;&quot; | mysql -uroot -padmin# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock -e &quot;use nova01;show tables;&quot;# mysql -uroot -padmin -S /var/run/mysqld/mysqld.sock \\ -e &quot;grant all on *.* to user1@&apos;localhost&apos; identified by \\&quot;user1\\&quot;;&quot;","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.digmyth.com/categories/Mysql/"}],"tags":[]},{"title":"python-03-02-函数","slug":"python-03-02-函数","date":"2017-01-23T12:42:06.000Z","updated":"2017-02-20T10:41:23.378Z","comments":true,"path":"2017/01/23/python-03-02-函数/","link":"","permalink":"http://www.digmyth.com/2017/01/23/python-03-02-函数/","excerpt":"","text":"目录 函数概念 普通函数 匿名函数 递归函数 闭包 高阶函数 函数概念什么是函数 函数是python为了代码最大程度地重用和最小化代码冗余而提供的基本程序结构 函数是一种设计工具，它能让程序员将复杂的程序逻辑分解为可管理的部件 函数用于将相关功能打包并参数化，一个函数可以当参数传给变量或另一个函数 python自带有许多内置函数 在python有4种函数表现形式：1234全局函数： 定义在模块中局部函数：嵌套于其它函数中lambda函数：表达式，可以出现在任意表达式可以出现的地方(又称匿名函名)方法：定义在类中与特定数据类型关联的函数，并且只能与数据类型关联一起使用. 函数语法 函数代码表现12def functionName(parameters): 函数主体代码 相关概念def 是一个可执行语句,因此可以出现在任意语句可以出现的地方，甚至可以嵌套于其它if/while语句中def 创建了一个对象并将其赋值给一个变量名，也就是函数名return 用于返回结果对象,其为可选,无return语句时函数自动返回None对象,多个返回值时用逗号分隔，并组合为元组形式返回一个对象def 语句运行之后可以在程序中通过函数后附加括号的形式进行调用 普通函数函数传参内置函数官方 详解More info 动我试试 Built-in Functions abs() dict() help() main() setattr() all() dir() hex() next() slice() any() divmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod() bin() eval() int() open() str() bool() exec() isinstance() ord () sum() bytearray() filter() issubclass() pow() super() bytes() float() iter() print() tuple() callable() format() len() property() type() chr() frozenset() list() range() vars() classmethod() getattr() locals() repr() zip() compile() globals() map() reversed() __import__() complex() hasattr() max() round() delattr() hash() memoryview() set() 拿几个作下说明：123456789101112131415ASCII编码表查询：ord(&apos;a&apos;) 字符在编码表中的数字表示chr(97) 数字在编码表中的字符表示global() 查看全局变量locals() 查看局部变量vars() 无参数时等于locals(), 有参数时vars(a) == a.__dict__ (__dict__一个对象的属性)eval() 把字符串形式的表达式解析并扫行exec() 把字符串形式的代码解析并执行compile()把文件的代码加载进来，按 eval, exec方式解析并执行# 以字符串的形式导入模块, 后面模块章节也会讲到__import__()用法mode = &apos;module_name&apos;__import__(mode) 123456789101112131415161718192021222324all()与any()区别：all:传入一个可迭代对象，对其中每个元素求bool(x),所有返回True,则返回Tru迭代对象为空时返回True，注意是为空如[]，不是空元素如[&apos;&apos;]any:传入一个可迭代对象，对其中每个元素求bool(x),任意一个返回True，则返回True迭代对象为空时，返回Falsedef all(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True. &quot;&quot;&quot; passdef any(*args, **kwargs): # real signature unknown &quot;&quot;&quot; Return True if bool(x) is True for any x in the iterable. If the iterable is empty, return False. &quot;&quot;&quot; pass 匿名函数123In [31]: f = (lambda x,y,z=10: x+y+z) # 匿名函数也支持默认参数 In [32]: f(4,9)Out[32]: 23 123456In [56]: L = [ (lambda x: x*2),(lambda y: y*3) ] # 匿名函数可以出现在任意表达式可以出现的地方In [56]: for i in L: ....: print(i(4)) ....: 812 递归函数定义： 一个函数的自我循环调用称为递归 阶乘 123456&gt;&gt;&gt; def fact(x):... if x &lt;= 1: return 1... else: return x * fact(x-1)... &gt;&gt;&gt; fact(4)24 汉诺塔汉诺塔： 是一个传说，大概意思就是说把一个柱子上的盘子通过第二根柱子移到第三根柱子上。。未完。。。 123456789101112131415161718192021root@ubuntu:~# cat hanoi.py #!/usr/bin/env python3def move(n, a, b, c): if n == 1: print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) else: move(n-1, a, c, b) print(&apos;move&apos;, a, &apos;--&gt;&apos;, c) move(n-1, b, a, c)n = int(input(&quot;input: &quot;))move(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)root@ubuntu:~# python3 hanoi.py input: 3move A --&gt; Cmove A --&gt; Bmove C --&gt; Bmove A --&gt; Cmove B --&gt; Amove B --&gt; Cmove A --&gt; C 斐波那契数列 123456789101112131415161718root@ubuntu:~# cat fibonacci.py #!/usr/bin/env python3def fibonacci(): a = b = 1 yield a yield b while True: a, b = b, a+b yield bfor num in fibonacci(): if num &gt; 100: break print(num, end=&apos; &apos;)print()root@ubuntu:~# python3 fibonacci.py 1 1 2 3 5 8 13 21 34 55 89 闭包python闭包：lexical closure函数及相关环境所构成的整体, 或者说一个函数(内层函数)和它所处的环境(外层函数)所构成的整体称为python闭包在这种情况下内层函数会记住外层函数的变量，在外层函数返回时内层函数依然可以调用 eg1123456789101112131415In [123]: def f1(x): .....: def f2(y): .....: return y ** x .....: return f2 # 内层函数直接返回 .....: In [124]: f = f1(3) # f1为f2提供运行环境，记住外部变量In [125]: f Out[125]: &lt;function __main__.f1.&lt;locals&gt;.f2&gt;In [126]: f(4)Out[126]: 64In [127]: f(5)Out[127]: 125 以上例子用匿名函数lambda简写成如下12345678In [129]: def f1(x): .....: return lambda y: y ** x .....: In [131]: f = f1(3)In [132]: f(6)Out[132]: 216 高阶函数定义： 一个函数当参数传递给另一个函数，我们就称这样的函数为高阶函数.装饰器/函数闭包: 是有返回函数的高阶函数，是高阶函数的特例 高阶函数 用法说明 map(func,seq1,seq2) 将函数func作用于给定序列(s)的每个元素，并用一个列表来提供返回值，如果func为None,func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组列表 reduce(func, seq, init) 将二元函数作用于seq序列的元素，每次携带一对(先前的结果以及下一个序列无素)，连续地将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为一个单一的返回值，如果初始值init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素 filter(func,seq) 调用一个布尔函数func来迭代遍历每个seq中的元素，返回一个使func返回值为True的元素组成的序列 map()map()将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回 一个序列时1234567In [143]: def f(x): .....: return x ** 2In [144]: res = map(f, [1,2,3,4]) # 根据说明这里返回结果是一个Iterator惰性序列In [145]: list(res) # 惰性序列需要通过list()函数让它把整个序列都计算出来并返回一个listOut[145]: [1, 4, 9, 16] 二个序列时每一次同时依次取一个序列的一个值，两个序列就有2个值，那么用传入的函数作用于这2个值返回一个值,最后这些值再以列表显现。1234567In [140]: def f(x,y): return y ** xIn [141]: res = map(f, [1,2,3], [4,5,6])In [142]: list(res)Out[142]: [4, 25, 216] reduce()python3中reduce函数在functools模块里,用时需要先导入 从初始值开始，对序列折叠123456In [39]: from functools import reduceIn [50]: def add(x,y): ....: return x+y ....: In [52]: reduce(add, [1,2,3], 10) # 10为初始值Out[52]: 16 如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：123456&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])13579 这个例子本身没多大用处，但是考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()就可以写出把str转换为int的函数： 123456789&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def fn(x, y):... return x * 10 + y...&gt;&gt;&gt; def char2num(s):... return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]...&gt;&gt;&gt; reduce(fn, map(char2num, &apos;13579&apos;))13579 整理成一个str2int的函数就是：12345678from functools import reducedef str2int(s): def fn(x, y): return x * 10 + y def char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s] return reduce(fn, map(char2num, s)) 还可以用lambda函数进一步简化成：1234567from functools import reducedef char2num(s): return &#123;&apos;0&apos;: 0, &apos;1&apos;: 1, &apos;2&apos;: 2, &apos;3&apos;: 3, &apos;4&apos;: 4, &apos;5&apos;: 5, &apos;6&apos;: 6, &apos;7&apos;: 7, &apos;8&apos;: 8, &apos;9&apos;: 9&#125;[s]def str2int(s): return reduce(lambda x, y: x * 10 + y, map(char2num, s)) 也就是说，假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数. filter()Python内建的filter()函数用于过滤序列。filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。 例如，在一个list中，删掉偶数，只保留奇数，可以这么写：12345def is_odd(n): return n % 2 == 1list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))# 结果: [1, 5, 9, 15] 把一个序列中的空字符串删掉，可以这么写：12345def not_empty(s): return s and s.strip()list(filter(not_empty, [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, None, &apos;C&apos;, &apos; &apos;]))# 结果: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;] 可见filter()这个高阶函数，关键在于正确实现一个“筛选”函数, 这个函数必须是一个二元函数，返回True 或 False的函数 注意到filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。 用filter求素数 计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单： 首先，列出从2开始的所有自然数，构造一个序列： 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, … 取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：取新序列的第一个数5，然后用5把序列的5的倍数筛掉：不断筛下去，就可以得到所有的素数。 用Python来实现这个算法，可以先构造一个从3开始的奇数序列：12345def _odd_iter(): n = 1 while True: n = n + 2 yield n 注意这是一个生成器，并且是一个无限序列。 然后定义一个筛选函数：12def _not_divisible(n): return lambda x: x % n != 0 最后，定义一个生成器，不断返回下一个素数：1234567def primes(): yield 2 it = _odd_iter() # 初始序列 while True: n = next(it) # 返回序列的第一个数 yield n it = filter(_not_divisible(n), it) # 构造新序列 这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。 由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：123456# 打印1000以内的素数:for n in primes(): if n &lt; 1000: print(n) else: break 小结： filter()的作用是从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。 sorted()sorted()高阶函数用于排序 sorted()语法12sorted(iterable, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order. 先来看一个例子：123456&gt;&gt;&gt; list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]&gt;&gt;&gt; sorted(list1, key=lambda x: x[&apos;age&apos;], reverse=False) [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] 这个例子也可以写成：12345678910In [174]: def f1(x): .....: return x[&quot;age&quot;] .....: In [175]: list1 = [&#123;&quot;age&quot;:20, &quot;name&quot;: &quot;def&quot;&#125;, &#123;&apos;age&apos;:25, &quot;name&quot;:&quot;abc&quot;&#125;, &#123;&quot;age&quot;:10, &quot;name&quot;:&quot;ghi&quot;&#125;]In [176]: sorted(list1, key=f1)Out[176]: [&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;ghi&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;def&apos;&#125;, &#123;&apos;age&apos;: 25, &apos;name&apos;: &apos;abc&apos;&#125;] list1这样的迭代对象取出一个值（一个一个的字典）给key函数处理后的结果作为排序依据，而后返回另一个排续后的对象. 列表自身有个sort()方法，和sorted()有什么区别呢？ 来看个例子：123456789101112In [66]: list1Out[66]: [1, 2, 3, 4, 5]In [67]: list1.sort() # sort()方法是在原有列表上排序，这是与sorted()高阶函数的区别In [68]: list1Out[68]: [1, 2, 3, 4, 5]In [69]: list1.sort(reverse=True) # reverse表示逆序In [70]: list1 Out[70]: [5, 4, 3, 2, 1] 区别就是sorted()会生成新的对象，而列表sort()不会，如下是按字母排序的例子：12In [173]: sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], key=str.lower)Out[173]: [&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python-03-01-IO","slug":"python-03-01-IO","date":"2017-01-19T18:12:36.000Z","updated":"2017-02-20T10:30:30.882Z","comments":true,"path":"2017/01/20/python-03-01-IO/","link":"","permalink":"http://www.digmyth.com/2017/01/20/python-03-01-IO/","excerpt":"","text":"目录 文件对象 OS 对象 IO 编程文件对象文件对象用于访问系统文件的接口，文件系统是计算机存储数据，组织数据的方式。计算机文件是存储在设备中的一段数据流，归属于文件系统管理之下。是计算机中由OS管理的具有名字的存储区域，对Linux而言，文件可以被看作字节序列。 序列化的对象才能存储的文件系统中，非字节序列化的数据不能存储在文件系统中的。 文件对象接口不仅用于访问普通文件，还可以访问套接字文件，管道文件。在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。 open(name[,mode[,bufsize]]) 返回的是一个文件对象。这里三个参数分别表示文件名，文件打开模式和缓冲区大小 bufsize:定义输出缓存12340 表示无输出缓存,禁用缓冲1 表示使用缓冲，只缓冲一行数据负数表示使用系统默认设置2+之后的正数表示使用指定大小缓冲 open(‘/var/log/message’, ‘r’)简单模式，首次打开的文件指针于文件首部r: 只读w: 新建文件或文件首部覆盖写入。a: 尾部追加，即打开时指针处于文件尾部 在模式后使用+表示同时支输入输出操作r+ w+ a+ 在模式后附加 b 表示二进制方式打开rb wb+ 创建一个文件对象123&gt;&gt; f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [3]: type(f)Out[3]: _io.TextIOWrapper 只读模式打开一个不存在文件是不可以的1234567In [1]: f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)---------------------------------------------------------------------------FileNotFoundError Traceback (most recent call last)&lt;ipython-input-1-07bb2dbd474f&gt; in &lt;module&gt;()----&gt; 1 f = open(&apos;/tmp/abc&apos;, &apos;r&apos;)FileNotFoundError: [Errno 2] No such file or directory: &apos;/tmp/abc&apos; 以写模式打开一个不存在文件，这个文件会自动被创建12345678In [3]: import osIn [7]: os.path.isfile(&apos;/tmp/f1&apos;)Out[7]: FalseIn [8]: f = open(&apos;/tmp/f1&apos;, &apos;w+&apos;)In [9]: os.path.isfile(&apos;/tmp/f1&apos;)Out[9]: True 查看一个文件的描述符，描述符是一个很小的数字表示，0表示标准输入，1表示标准输出，2表示标准错误输出它们所使用的描述符12In [20]: f.fileno()Out[20]: 8 f.readline() 读文件一行数据f.readlines() 读文件指针处至尾部所有数据包括行结束符\\n，一行为一个对象，然后多行多个对象组成一个列表 返回指针在当前文件中的位置，表示在多少个字节的位置。12In [23]: f.tell()Out[23]: 597 f.seek(offset, whence) offset:表示偏移多少个字节，whence表示从 多少节字数开始偏移。下面表示回到文件首部：12In [37]: f.seek(0)Out[37]: 0 f.read() 读取给定字节123456In [44]: f.seek(0)Out[44]: 0In [45]: f.read(10)Out[45]: &apos;# /etc/fst&apos;In [46]: f.tell()Out[46]: 10 12345678910In [57]: f = open(&apos;/etc/fstab&apos;, &apos;r&apos;)In [58]: f.name #返回文件名Out[58]: &apos;/etc/fstab&apos;In [59]: f.closed #返回是否关闭文件Out[59]: FalseIn [60]: f.close() #关闭文件In [61]: f.closedOut[61]: True 操作完毕会自动关闭文件对象12with open(&apos;/root/wxq.txt&apos;,&apos;w+&apos;) as f: f.write(&apos;hello world!\\n&apos;) OS 对象一些方法123456789101112131415161718192021os.path 跟文件路径相关 basename() 路径基名 dirname() 路径目录名 join() split() 返回dirname(), basename()元组 splitext() 返回(filename, extension_name)元组 信息： getatime() getctime() getmtime() getsize() 获取文件大小查询： exists() 指定文件是否存在 isabs() 指定路径是否为绝对路径 isdir() 是否为目录 isfile() 是否为文件 islink() 是否为符号链接 ismount() 是否为挂载点 samefile() 两个路径是否指向了同一个文件 __file__属性 在上面的glabals()中有一个file属性，其中保存的是程序运行的相对路径，如python3 ../py3_training/test/yy.py，则路径为../py3_training/test/yy.py在pycharm中为什么又变成了绝对路径了呢，不要认为是pycharm做了封装，是因为pycharm运行路径永远从c:\\开始，这样看不出效果 要获取程序绝对路径os.path.abspath(file)应用举例：12345678910import osimport sysbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))print(base_dir)sys.path.append(base_dir)from core import mainif __name__ == &apos;__main__&apos;: main.run() 来几个小练习，似乎参悟了1234567891011121314&gt;&gt;&gt; import os&gt;&gt;&gt; os.path.split(&apos;/root/wxq.txt&apos;)(&apos;/root&apos;, &apos;wxq.txt&apos;)&gt;&gt;&gt; os.path.splitext(&apos;/root/wxq.txt&apos;)(&apos;/root/wxq&apos;, &apos;.txt&apos;)&gt;&gt;&gt; os.path.dirname(&apos;/root/wxq.txt&apos;)&apos;/root&apos;&gt;&gt;&gt; os.path.basename(&apos;/root/wxq.txt&apos;)&apos;wxq.txt&apos;&gt;&gt;&gt; dir, file_name = os.path.split(&apos;/root/wxq.txt&apos;)&gt;&gt;&gt; dir&apos;/root&apos;&gt;&gt;&gt; file_name&apos;wxq.txt&apos;","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_02_流程控制/枚举","slug":"python-02-流程控制_枚举","date":"2017-01-15T05:03:41.000Z","updated":"2017-02-22T04:09:53.601Z","comments":true,"path":"2017/01/15/python-02-流程控制_枚举/","link":"","permalink":"http://www.digmyth.com/2017/01/15/python-02-流程控制_枚举/","excerpt":"","text":"目录 流程控制 三元表达式 枚举类 流程控制ifif 玩猜数字游戏123456789101112131415#!/usr/bin/env python3i = 0try_num = 3AGE = 27while i &lt; try_num: enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) i += 1 else: print(&quot;too smaller&quot;) i+=1 if成绩查询12345678910111213141516171819#!/usr/bin/env python3__author__ = &quot;wxq&quot;enter_score = int(input(&quot;enter your score :&quot;).strip())if enter_score &lt;=100 and enter_score &gt;=0: if enter_score &gt;=90: print(&quot;A&quot;) elif enter_score &gt;=80: print(&quot;B&quot;) elif enter_score &gt;=70: print(&quot;C&quot;) elif enter_score &gt;= 60: print(&quot;D&quot;) else: print(&quot;you are too low&quot;)else: print(&quot;invalid score&quot;) while这里主要注意与shell中的区别，python里while后有else, 即while语句正常执行完后才执行else中的语句，否则不会执行。1234567891011i = 0while i &lt;3: if i &gt;=2: break print(i) i += 1else: print(&apos;end&apos;) #结果01 来个小练习12345678910111213count1 = 0while True: if count1 == 10000000: break count1 += 1print(&quot;cost&quot;, time.time() - t1_start, count1)t2_start = time.time()count2 = 0while count2 &lt; 10000000: count2 += 1print(&quot;cose&quot;, time.time() - t2_start, count2) for 很懒什么也没有留下…1234567891011121314151617181920count = 3AGE = 27for i in range(100): if i &gt;3: enter=input(&quot;are you want to keep trying ....&quot;).strip() if enter == &quot;y&quot;: count = 0 else: break enter = int(input(&apos;enter you num:&apos;)) if enter == AGE: print(&quot;Conguratulations, you got it&quot;) break elif enter &gt; AGE: print(&quot;too large&quot;) else: print(&quot;too smaller&quot;) count +=1 continue/breakcontinue结束本次循环，提前进入下一轮循环break 直接终止循环 1234567891011121314151617181920212223242526272829#!/usr/bin/env python3__author__ = &quot;wangxiaoqiang&quot;for i in range(10): if i == 5: for j in range(10): if j == 8: break print(&quot;inner loop&quot;,j) continue print(&quot;loop&quot;,i)结果：loop 0loop 1loop 2loop 3loop 4inner loop 0inner loop 1inner loop 2inner loop 3inner loop 4inner loop 5inner loop 6inner loop 7loop 6loop 7loop 8loop 9 三元表达式三元表达式很简单， 这里来几个小例子就明白了 条件满足为1，否则为False12n [44]: 1 if True else FalseOut[44]: 1 成员关系判断，条件满足为True, 否则为False12345In [53]: True if 1 in [1,2,3] else FalseOut[53]: TrueIn [54]: True if 0 in [1,2,3] else FalseOut[54]: False 12345In [45]: a = 10In [46]: b = 15In [47]: a if a&gt;b else bOut[47]: 15 枚举类枚举 enumerate, 在用到index和value对应关系时能用到enumerate函数，参数为可遍历对象（字符串，列表等），返回多个元组123456789101112In [3]: for i in enumerate(&apos;abc&apos;): ...: print(i) ...: (0, &apos;a&apos;)(1, &apos;b&apos;)(2, &apos;c&apos;)In [43]: for index,i in enumerate(&apos;abc&apos;, 10): ....: print(index,i) ....: 10 a11 b12 c 1234In [4]: a = enumerate(&apos;abc&apos;)In [5]: list(a)Out[5]: [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] 1234567891011121314151617181920In [6]: import stringIn [7]: s = string.ascii_uppercaseIn [8]: E = enumerate(s)In [9]: sOut[9]: &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;In [10]: list(E)Out[10]: [(0, &apos;A&apos;), (1, &apos;B&apos;),此处略...In [11]: for i in E: ....: print(i, end=&apos; &apos;) ....: In [12]: E = enumerate(s)In [13]: for i in E: print(i, end=&apos; &apos;) ....: (0, &apos;A&apos;) (1, &apos;B&apos;) (2, &apos;C&apos;) (3, &apos;D&apos;) (4, &apos;E&apos;) (5, &apos;F&apos;) (6, &apos;G&apos;) (7, &apos;H&apos;) (8, &apos;I&apos;) (9, &apos;J&apos;) (10, &apos;K&apos;) (11, &apos;L&apos;) (12, &apos;M&apos;) (13, &apos;N&apos;) (14, &apos;O&apos;) (15, &apos;P&apos;) (16, &apos;Q&apos;) (17, &apos;R&apos;) (18, &apos;S&apos;) (19, &apos;T&apos;) (20, &apos;U&apos;) (21, &apos;V&apos;) (22, &apos;W&apos;) (23, &apos;X&apos;) (24, &apos;Y&apos;) (25, &apos;Z&apos;) 枚举类用法int 常量默认从1开始，我们来看个例子 1234567891011121314151617181920212223242526272829In [16]: from enum import EnumIn [17]: Month = Enum(&apos;Month&apos;, (&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;))In [19]: print(Month.January)Month.JanuaryIn [20]: print(Month[&apos;January&apos;])Month.JanuaryIn [21]: print(Month[&apos;January&apos;].value)1In [22]: print(Month(4))Month.AprilIn [24]: for name, members in Month.__members__.items(): print(&quot;%s =&gt; %s =&gt; %s&quot; % (name, members, members.value)) ....: January =&gt; Month.January =&gt; 1February =&gt; Month.February =&gt; 2March =&gt; Month.March =&gt; 3April =&gt; Month.April =&gt; 4May =&gt; Month.May =&gt; 5June =&gt; Month.June =&gt; 6July =&gt; Month.July =&gt; 7August =&gt; Month.August =&gt; 8September =&gt; Month.September =&gt; 9October =&gt; Month.October =&gt; 10November =&gt; Month.November =&gt; 11December =&gt; Month.December =&gt; 12 自定义枚举类（自定义int常量从0开始）@unique帮助我们检查没有重复值 12345678910111213141516171819202122232425262728293031323334353637In [29]: from enum import Enum, uniqueIn [30]: @unique ....: class Myday(Enum): ....: Sun = 0 ....: Mon = 1 ....: Tue = 2 ....: Wed = 3 ....: Thu = 4 ....: Fri = 5 ....: Sat = 6 ....: In [31]: Myday.FriOut[31]: &lt;Myday.Fri: 5&gt;In [32]: print(Myday.Fri)Myday.FriIn [33]: print(Myday.Fri.value)5In [34]: print(Myday[&apos;Fri&apos;])Myday.FriIn [35]: print(Myday(5))Myday.FriIn [37]: for name, members in Myday.__members__.items(): ....: print(&quot;%s, %s, %s&quot; % (name, members, members.value)) ....: Sun, Myday.Sun, 0Mon, Myday.Mon, 1Tue, Myday.Tue, 2Wed, Myday.Wed, 3Thu, Myday.Thu, 4Fri, Myday.Fri, 5Sat, Myday.Sat, 6","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇下","slug":"python-01-基础篇下","date":"2017-01-09T02:37:13.000Z","updated":"2018-04-27T05:01:04.973Z","comments":true,"path":"2017/01/09/python-01-基础篇下/","link":"","permalink":"http://www.digmyth.com/2017/01/09/python-01-基础篇下/","excerpt":"","text":"目录 位运算 程序编码 用户交互 第四节 位运算123456位运算：&amp;与 ： 同位都为1则为1|或 ： 同位有1则为1^异或: 同位相异为1，相同为0&lt;&lt;n左移位： 左移n位(保留左位),右边补n个0&gt;&gt;n右移位： 右移n位(去掉右位),左边补n个0 &amp;运算:都为11234001100010111111100110001` |运算：或为1123001100010111111101111111 ^运算：相异为1123110011010111111110110010 &lt;&lt;3左移位：左边110保留121101000111010001000 &gt;&gt;3右移位：右边001不保留121101000100011010 第五节 程序编码bytes、str 区别python3 中bytes、str是有区别的 bytes/str的区别：bytes 是byte的序列，而str是unicode 序列 bytes并不能存储中文，需要先定义成str类型后encode()编码 之间的转换是编码，解码完成。 方式： b1 = str1.encode()/ b1.decode() 网络传输中都是用的bytes类型二进制进行传输（socket编程发送必须bytes类型） b（bytes）只能接收ASCII 的值 python3与大多数软件运行在内存中都是unicode编码 b表示方法(bytes)只能接收ASCII的值, 直接传的中文为字符串 unicode编码，一个unicode两个字节，一个汉字两个字节。 1234&gt;&gt;&gt; b1 = b&apos;hello world&apos; # bytes只能接收ASCII样的值&gt;&gt;&gt; b2 = b&apos;你好&apos; File &quot;&lt;stdin&gt;&quot;, line 1SyntaxError: bytes can only contain ASCII literal characters. 将中文转换为bytes (转为ASCII里面能支持的格式，默认为utf-8)123456&gt;&gt;&gt; b2 = &apos;你好&apos;.encode(&apos;utf-8&apos;)&gt;&gt;&gt; b3 = bytes(&apos;你好&apos;, encoding=&apos;utf-8&apos;)&gt;&gt;&gt; type(b2)&lt;class &apos;bytes&apos;&gt;&gt;&gt;&gt; b2b&apos;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd&apos; 看看下面的转换是否能领悟点什么12345678910&gt;&gt;&gt; test_str = &apos;你是最好的！&apos;&gt;&gt;&gt; test_b = test_str.encode() # 不指定时默认encode()成utf-8&gt;&gt;&gt; test_bb&apos;\\xe4\\xbd\\xa0\\xe6\\x98\\xaf\\xe6\\x9c\\x80\\xe5\\xa5\\xbd\\xe7\\x9a\\x84\\xef\\xbc\\x81&apos;&gt;&gt;&gt; for i in test_b:... print(i, end=&apos; &apos;)228 189 160 230 152 175 230 156 128 229 165 189 231 154 132 239 188 129&gt;&gt;&gt; for i in test_str:... print(i, end=&apos; &apos;)你 是 最 好 的 ！ 1234567891011121314root@ubuntu:~# cat utf-8.txt 我是最好的！root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt ϒˇخºõģ¡root@ubuntu:~# iconv -f utf-8 -t gbk utf-8.txt &gt; gbk.txtroot@ubuntu:~# cat gbk.txtϒˇخºõģ¡&gt;&gt;&gt; f = open(&apos;gbk.txt&apos;, &apos;rb&apos;)&gt;&gt;&gt; test = f.read()&gt;&gt;&gt; testb&apos;\\xce\\xd2\\xca\\xc7\\xd7\\xee\\xba\\xc3\\xb5\\xc4\\xa3\\xa1\\n&apos;&gt;&gt;&gt; test.decode(&apos;gbk&apos;)&apos;我是最好的！\\n&apos;&gt;&gt;&gt; f.close() 编码总结编码过程： 任意unicode到bytes的过程解码过程： bytes到unicode的过程12345678910pycharm默认以UTF-8存数据到硬盘(unicode to UTF-8) 一个编码过程python3默认以UTF-8读数据到内存（UTF-8 to unicode） 一个解码过程#coding:utf-8 也是指明了用什么编码读数据到内存,一个解码过程#这里open虽然文件是UTF8存的，此时要以utf8读, utf8 to unicode， 是一个解码过程with open(&quot;test.txt&quot;,&apos;r&apos;,encoding=&apos;utf8&apos;) as f: f.read() python3字符串就是unicode, 任意unicode只要编码后就是bytes&apos;你好&apos;.encode(&apos;utf8&apos;) 第六节 用户交互for python2.xname = raw_input(“What is your name:”)for python3.xname = input(“What is your name:”)eg: 想要输入密码时不可见，可以利用getpass模块的getpass()方法12345678root@apt:/mnt# cat getp.py #!/usr/bin/env python3import getpasspwd = getpass.getpass(\"请输入密码：\")print(pwd)root@apt:/mnt# python3 getp.py 请输入密码：123","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"python_01_基础篇上","slug":"python-01-基础篇上","date":"2017-01-08T02:37:13.000Z","updated":"2018-04-27T04:57:42.337Z","comments":true,"path":"2017/01/08/python-01-基础篇上/","link":"","permalink":"http://www.digmyth.com/2017/01/08/python-01-基础篇上/","excerpt":"","text":"目录 python简介 python变量 数据类型 第一节 简介Python 简介 Python 安装More info: 官网 Python第一个程序斐波那契数列： 123456789# Python 3: Fibonacci series up to n&gt;&gt;&gt; def fib(n):&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; while a &lt; n:&gt;&gt;&gt; print(a, end=&apos; &apos;)&gt;&gt;&gt; a, b = b, a+b&gt;&gt;&gt; print()&gt;&gt;&gt; fib(1000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Python 注释单行注释：#多行注释：英文三引号 ‘’’‘’’say somethig‘’’有种特殊的用法,此时并非注释123456789101112131415161718192021root@apt:/mnt/proper# cat people_info.py #!/usr/bin/env python3name = input(\"your name: \").strip()age = input(\"your age: \").strip()salary = input(\"your money: \").strip()info = ''' -------- day day up ------------ name: %s age: %s salary: %s''' % (name, age, salary)print(info)root@apt:/mnt/proper# python3 people_info.py your name: wxq your age: 18your money: 5000 -------- day day up ------------ name: wxq age: 18 salary: 5000 Python代码长相123456789101112131415#!/usr/bin/env python3 # (1)程序起始行&quot;this is a test module&quot; # (2)模块文档(文档字符串)import os # (3)模块导入import sysdebug = True # (4)全局变量定义class FooClass(object): # (5)类定义 &quot;Foo class&quot; passdef func(*args, **kwargs): # (6)函数定义 &quot;test function&quot; foo = FooClass() if debug: print(&quot;run test()&quot;)if __name__ == &apos;__main__&apos;: # (7)主程序 func() 第二节 变量2.1 变量规范变量： 字母，数字，下划线且不能以数字开头，并系统己经引用的关键字不能为变量名关键字[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’,‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]1234In [2]: name = \"wxq\"In [3]: print(name)wxq 2.2 变量标准eg: age_of_name = ‘wxq’ #习惯上 AGE_OF_NAME = &quot;XX&quot; #常量 Age_Of_Name = &quot;XX&quot; #驼峰体 Age_of_name = &quot;xx&quot; #类名 第三节 数据类型3.1 数字int(整型)long(长整型) python3 中己经没有了float(浮点型)complex(复数) 3.2 布尔值True 1False 0 3.3 字符串不可变类型字符串常用功能：字符串拼接 join()方法： 用于指定字符把序列中的每一个元素连接起来1234In [11]: str = '_'In [12]: seq = ('a', 'b', 'c')In [13]: str.join(seq)Out[13]: 'a_b_c' 移除前后空白分割len()长度index()索引split()切片格式化输出% 格式化输出%s 字符串%d 数字%f 符点%r 原生字符串，不会对\\n \\t进行转换123In [5]: name = 'wxq'In [6]: print(\"hello, %s\" % name)hello, wxq 1234# 字符串.center()方法+颜色格式化输出In [22]: print(&quot;\\033[32;1m%s\\033[0m&quot; % &quot;wxq&quot;.center(50, &apos;-&apos;))-----------------------wxq------------------------ format 格式化输出12In [7]: \"&lt;&#123;tag&#125;&gt;&#123;str&#125;&lt;/&#123;tag&#125;&gt;\".format(tag='b', str='hello world')Out[7]: '&lt;b&gt;hello world&lt;/b&gt;' 3.4 列表可变类型name = [‘hello’, ‘world’]通过下标访问列表中元素，下标从0开始计数12345In [9]: name[0]Out[9]: 'hello'In [10]: name[-1]Out[10]: 'world' 列表常用操作：切片：取出多个元素追加插入修改删除扩展 3.5 字典python支持dictionary,采用key-value存储方式，在存放时根据key算出value的存放位置，这样取的时候根据key直接拿到value，这也说明了为什么字典查找速度比列表快的原因。 由于dict根据key来计算value的存储位置，就决定了dict的key必须是不可变对象，利于每次计算相同的key得出的相同的结果，这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变. 12345678910111213141516171819In [2]: dict_test = &#123;&#125;In [3]: for i in range(4): ...: k = &apos;f%s&apos; % (i+1) ...: v = &apos;v%s&apos; % i ...: dict_test[k] = v ...: In [4]: dict_testOut[4]: &#123;&apos;f1&apos;: &apos;v0&apos;, &apos;f2&apos;: &apos;v1&apos;, &apos;f3&apos;: &apos;v2&apos;, &apos;f4&apos;: &apos;v3&apos;&#125;In [5]: dict_test.get(&apos;f4&apos;)Out[5]: &apos;v3&apos;In [6]: for k,v in dict_test.items(): ...: print(k,v) ...: (&apos;f1&apos;, &apos;v0&apos;)(&apos;f2&apos;, &apos;v1&apos;)(&apos;f3&apos;, &apos;v2&apos;)(&apos;f4&apos;, &apos;v3&apos;) 3.6 元组3.7 集合可变集合集合：一组无序排列的可哈希的值，集合没有特定语法格式，使用工厂函数创建。支持： 支持集合关系测试：并集 支持成员关系测试：in /not in/迭代不支持： 索引,元素获取，切片 集合创建12345678&gt;&gt;&gt; set1 = set([1,2,3]) # 用set创建&gt;&gt;&gt; set1 &#123;1, 2, 3&#125;&gt;&gt;&gt; s1 = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125; # 或用&#123;&#125;创建&gt;&gt;&gt; s1&#123;&apos;b&apos;, &apos;c&apos;, &apos;a&apos;&#125;&gt;&gt;&gt; type(s1)&lt;class &apos;set&apos;&gt; 项目 描述 符号表示 len(s1) 返回s1项的长度 len(s1) s1.copy 制作s1的副本 s1.difference(s2) 求差集，返回所有在s1中，但不在s2中的项 s1 - s2 s1.intersection(s2) 求交集，返回所有同时在s1 s2中的项 s1 &amp; s2 s1.union(s2) 求并集，返回所有在s1或s2中的项 s1 l s2(竖线) s1.symmetric_differencee(s2) 求对称差集，返回所有在s1或s2中，但又不同时在s1 s2中的项，即并集减交集 s1 ^ s2 s1.isdisjoin(s2) 如果s1 s2没有相同项，则返回True s1.issubset(s2) 如果s1是s2的一个子集，则返回True s1.issuperset(s2) 如果s1是s2的一个父集，则返回True max(s1) 求最大值 max(s1) min(s1) 求最小值 min(s1) 3.8 集合forzent()可变集合","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"PyCharm基本使用-01","slug":"PyCharm基本使用-01","date":"2017-01-05T02:37:13.000Z","updated":"2018-04-23T06:58:15.230Z","comments":true,"path":"2017/01/05/PyCharm基本使用-01/","link":"","permalink":"http://www.digmyth.com/2017/01/05/PyCharm基本使用-01/","excerpt":"","text":"入门More info: 参考官网 下载123456789101112131415161718192021222324252627282930313233343536373839404142434445464748491 在Pycharm为你的python项目配置python解释器 Project当前项目名为&gt;&gt;Project Interpreter &gt;&gt; add Local2 在Pycharm下创建Python 文件，Python模块 File&gt;&gt;New&gt;&gt;Python file File &gt;&gt; New &gt;&gt; Python Package3 使用Pycharm安装python 三方模块 Project 当前项目名&gt;&gt; Project Interpreter &gt;&gt; 点击右侧绿色小加号4 Pycharm基本设置，例如不使用tab, tab=4空格，字体，字体颜色，主题，脚本设置，显示行号等， 如何导出入导入自定义设置 1 不使用tab,tab=4空格：Editor&gt;&gt;Code Style&gt;&gt;python 2 字体，字体颜色：Editor&gt; Color&amp;Fronts &gt;&gt; python 3 关闭自动更新：Apperance&amp; Behavior &gt; System Setting &gt;&gt; Updates 4 脚本关设置: Editor&gt;&gt; File and Code Templates &gt;&gt; Python Script 注：其它类似 5 显示行号： Editor&gt;&gt; Geratal &gt;&gt; Apperance &gt;&gt; Show Line number 注：2016.2默认显示行号 6 右侧坚线是PEP8的代码规范，提示一行不要超过120个字符 7 导出，导入你自定义的配置：File &gt;&gt; Export Settings, Import Settings5 常用快捷键，例如复制当前行，删除当前行，批量注释，缩进，查找和替换 1 常用快捷键的查询和配置：Keymap 1 Ctrl + D : 复制当前行 2 Ctrl + E : 删除当前行 3 Ctrl + Enter 快捷换行 4 Ctrl + / 快捷注释，（选中多行后可以批量注释） 5 Tab: 缩进当前行（选中多行后可以批量缩进） 6 Shift + Tab : 取消缩进（选中多行后可以批量取消缩进） 7 Ctrl + F: 查找 8 Ctrl + H : 替换 9 批量注释：ctrl + ?6 Pycharm安装插件，例如Markdown supprot,数据库支持插件等 1 Plugins &gt; Browse reposltories (下方三个按钮中间寻个)&gt;&gt; 搜索 markdown supprot &gt; Install 2 右上解View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览7 Git配置 ？ 1 需要本地安装好git 2 Version control &gt; git 3 配置了git等版本控制系统之后，可以很方便的diff查看文件的不同8 常用操作指南，例如复制文件路径，在文件管理中打开，快速定位，查看模块结构视图，tab批量换space ,TODO的使用 ， Debug的使用， 1 复制文件路径: 左侧文件列表右键选中的文 件&gt; Copy Path 2 在文件管理器中打开：右键选中的文件&gt;&gt;往下找到show In Explorer 3 快速定位： Ctrl + 某些内键模块之后，点击在源文件中展开 4 查看结构： IDE左侧边栏Structure 查看当前项目的结构 5 tab 批量换space: Editor &gt; Convert Indents 6 Todo的使用： #todo要记录的事情 7 tab页上右键 &gt;&gt; Move Right (Down) , 把当前Tab 页移到窗口右边（下边），方便对比 8 文件中右键 &gt;&gt;Local History 能够查看文件修改前后对比 9 IDE右下解能看到一些有用的信息，光标当前在第几行的基本几个字符，当前回车换行，当前编码类型 ， 当前git 分支 10 IDE 右侧边栏&gt;&gt; Database9 如何去掉烦人的波浪线？PEP8是什么？ 完","categories":[{"name":"Python","slug":"Python","permalink":"http://www.digmyth.com/categories/Python/"}],"tags":[]},{"title":"博客声明","slug":"declare","date":"2017-01-01T00:47:02.000Z","updated":"2018-04-23T05:58:42.174Z","comments":true,"path":"2017/01/01/declare/","link":"","permalink":"http://www.digmyth.com/2017/01/01/declare/","excerpt":"","text":". 公告 本博客属个人所有，不涉及商业用途，本人保留追究其法律责任的权利。本博客为个人随笔所写，内容大多取自网络或个人经验，包括老男孩、马哥、廖雪峰、林海峰、小甲鱼及Python开发者，纯为个人学习记录所用.按金庸武侠秘籍上说就是本博客纯属虚构，如有雷同，纯属巧合.. 如涉及版权问题及时联系作者 wxqnote@163.com","categories":[{"name":"声明","slug":"声明","permalink":"http://www.digmyth.com/categories/声明/"}],"tags":[]},{"title":"为什么写博客","slug":"为什么写博客","date":"2017-01-01T00:08:08.000Z","updated":"2018-04-23T05:56:37.662Z","comments":true,"path":"2017/01/01/为什么写博客/","link":"","permalink":"http://www.digmyth.com/2017/01/01/为什么写博客/","excerpt":"","text":". 关于作者欢迎大家来到个人博客,我来自成都无疑不幸与万幸是北漂IT engineer ! 尤如www.digmyth.com,一个想要遆造神话却总在路上的人。 . 一个选择至于为什么写博客，有很多原因, 一段时间，一个心境，一段经历，一个情怀。在一个适当的时间做适当的事，想要做的事，没有目的，如半夜突然起来想写下一段话，转身安然入睡。 . 认知时间时间对年轻人来说太快了，2016年己远去，2017年己来临,刚好2017年1月1日,此时成立博客也许是天时地利。各大互联网产品创业思路一是提供服务优化它人时间如知识产品，二是让它人上瘾拖住它的时间如微信朋友圈。会在不知不觉中时间己去，套用罗振宇跨年演讲上的一句话，有时你什么错都没有，你就是老了。可能是因为身处互联网圈的原因，信息发展太快着时让人有种焦虑感,让人很着急，告别了过去却抓不到未来。此时我要做的就是脚踏实地做自己正在做的事情，就会让自己很充实. . 共鸣共勉欲望勃发节奏飞速的当下，如果不能够保持淡定和从容，不具有宠辱不惊的修养，就很难拥有一颗平常恬淡的心境。更无法在纷乱中理清头绪，认清自我，认清形势，找准坐标，在反思中沉淀，在沉淀中积累,才不会迷失方向,才不会迷失自我。 越是浮躁越是保持淡定，越是功利越是要适度恬静.焦虑和躁动不仅会折损你的心智，更会戕害你的身体，经过了不平凡不寻常的年头，度过了最艰难的岁月,再大的风险和考验都可以轻轻的付之一笑.有定力的人才有希望，告别2016，迎来2017，善待自己，给自己的心灵除除尘，给自己的灵魂洗洗礼, 给自己多些淡定和从容. . 记录点滴记录一个想要遆造神话却总在路上的人的点滴，代表曾经来过，有些事我做过。。。","categories":[{"name":"生活","slug":"生活","permalink":"http://www.digmyth.com/categories/生活/"}],"tags":[]}]}